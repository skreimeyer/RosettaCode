{"task": "Dinesman%27s_multiple-dwelling_problem", "blocks": [{"lang": "Ada", "loc": 46, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Dinesman <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Floor <span class=\"kw1\">is</span> Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">5</span>;<br/>   <span class=\"kw3\">type</span> People <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Baker, Cooper, Fletcher, Miller, Smith<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Floors <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>People'<span class=\"kw3\">Range</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Floor;<br/>   <span class=\"kw3\">type</span> PtFloors <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">all</span> Floors;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Constrained <span class=\"br0\">(</span>f\u00a0: PtFloors<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> f <span class=\"br0\">(</span>Baker<span class=\"br0\">)</span> /= Floor'Last <span class=\"kw2\">and</span><br/>         f <span class=\"br0\">(</span>Cooper<span class=\"br0\">)</span> /= Floor'First <span class=\"kw2\">and</span><br/>         Floor'First &lt; f <span class=\"br0\">(</span>Fletcher<span class=\"br0\">)</span> <span class=\"kw2\">and</span> f <span class=\"br0\">(</span>Fletcher<span class=\"br0\">)</span> &lt; Floor'Last <span class=\"kw2\">and</span><br/>         f <span class=\"br0\">(</span>Miller<span class=\"br0\">)</span> &gt; f <span class=\"br0\">(</span>Cooper<span class=\"br0\">)</span> <span class=\"kw2\">and</span><br/>         <span class=\"kw2\">abs</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>Smith<span class=\"br0\">)</span> - f <span class=\"br0\">(</span>Fletcher<span class=\"br0\">)</span><span class=\"br0\">)</span> /= <span class=\"nu0\">1</span> <span class=\"kw2\">and</span><br/>         <span class=\"kw2\">abs</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>Fletcher<span class=\"br0\">)</span> - f <span class=\"br0\">(</span>Cooper<span class=\"br0\">)</span><span class=\"br0\">)</span> /= <span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> True; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> False;<br/>   <span class=\"kw1\">end</span> Constrained;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Solve <span class=\"br0\">(</span>list\u00a0: PtFloors; n\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> Swap <span class=\"br0\">(</span>I\u00a0: People; J\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         temp\u00a0: <span class=\"kw3\">constant</span> Floor\u00a0:= list <span class=\"br0\">(</span>People'Val <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span> list <span class=\"br0\">(</span>People'Val <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= list <span class=\"br0\">(</span>I<span class=\"br0\">)</span>; list <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= temp;<br/>      <span class=\"kw1\">end</span> Swap;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">if</span> Constrained <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">for</span> p <span class=\"kw3\">in</span> People'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               Put_Line <span class=\"br0\">(</span>p'Img &amp; <span class=\"st0\">\" on floor \"</span> &amp; list <span class=\"br0\">(</span>p<span class=\"br0\">)</span>'Img<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">return</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> People'First .. <span class=\"me1\">People</span>'Val <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         Solve <span class=\"br0\">(</span>list, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Swap <span class=\"br0\">(</span>People'First, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span> Swap <span class=\"br0\">(</span>i, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;         <br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Solve;<br/>\u00a0<br/>   thefloors\u00a0: <span class=\"kw3\">aliased</span> Floors;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> person <span class=\"kw3\">in</span> People'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      thefloors <span class=\"br0\">(</span>person<span class=\"br0\">)</span>\u00a0:= People'Pos <span class=\"br0\">(</span>person<span class=\"br0\">)</span> + Floor'First;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Solve <span class=\"br0\">(</span>thefloors'<span class=\"kw3\">Access</span>, Floors'Length<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Dinesman;</pre>"}, {"lang": "ALGOL 68", "loc": 70, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># attempt to solve the dinesman Multiple Dwelling problem #</span><br/>\u00a0<br/><span class=\"coMULTI\"># SETUP #</span><br/>\u00a0<br/><span class=\"coMULTI\"># special floor values #</span><br/><span class=\"kw3\">INT</span>    top floor    <span class=\"sy1\">=</span> 4<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span>    bottom floor <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># mode to specify the persons floor constraint #</span><br/><span class=\"kw4\">MODE</span> PERSON <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> floor<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span> ok <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># yields TRUE if the floor of the specified person is OK, FALSE otherwise #</span><br/><span class=\"kw4\">OP</span> OK <span class=\"sy1\">=</span> <span class=\"br0\">(</span> PERSON p <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> ok <span class=\"kw6\">OF</span> p <span class=\"br0\">)</span><span class=\"br0\">(</span> floor <span class=\"kw6\">OF</span> p <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># yields TRUE if floor is adjacent to other persons floor, FALSE otherwise #</span><br/><span class=\"kw4\">PROC</span> adjacent <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor<span class=\"sy1\">,</span> other persons floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> floor <span class=\"sy1\">&gt;=</span> <span class=\"br0\">(</span> other persons floor <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"kw16\">AND</span> floor <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span> other persons floor <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># displays the floor of an occupant #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> floor <span class=\"sy1\">=</span> <span class=\"br0\">(</span> PERSON occupant <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> floor <span class=\"kw6\">OF</span> occupant<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> name <span class=\"kw6\">OF</span> occupant<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROBLEM STATEMENT #</span><br/>\u00a0<br/><span class=\"coMULTI\"># the inhabitants with their floor and constraints #</span><br/>PERSON baker    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Baker\"</span><span class=\"sy1\">,</span>    <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> floor <span class=\"sy1\">/=</span> top floor <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PERSON cooper   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">,</span>   <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> floor <span class=\"sy1\">/=</span> bottom floor <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PERSON fletcher <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> floor <span class=\"sy1\">/=</span> top floor <span class=\"kw16\">AND</span> floor <span class=\"sy1\">/=</span> bottom floor<br/>                                                                                    <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> adjacent<span class=\"br0\">(</span> floor<span class=\"sy1\">,</span> floor <span class=\"kw6\">OF</span> cooper <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PERSON miller   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Miller\"</span><span class=\"sy1\">,</span>   <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> floor <span class=\"sy1\">&gt;</span> floor <span class=\"kw6\">OF</span> cooper <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PERSON smith    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Smith\"</span><span class=\"sy1\">,</span>    <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> floor <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span> adjacent<span class=\"br0\">(</span> floor<span class=\"sy1\">,</span> floor <span class=\"kw6\">OF</span> fletcher <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># SOLUTION #</span><br/>\u00a0<br/><span class=\"coMULTI\"># \"brute force\" solution - we run through the possible 5^5 configurations          #</span><br/><span class=\"coMULTI\"># we cold optimise this by e.g. restricting f to bottom floor + 1 TO top floor - 1 #</span><br/><span class=\"coMULTI\"># at the cost of reducing the flexibility of the constraints                       #</span><br/><span class=\"coMULTI\"># alternatively, we could add minimum and maximum allowed floors to the PERSON     #</span><br/><span class=\"coMULTI\"># STRUCT and loop through these instead of bottom floor TO top floor               #</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> b <span class=\"kw2\">FROM</span> bottom floor <span class=\"kw2\">TO</span> top floor <span class=\"kw2\">DO</span><br/>    floor <span class=\"kw6\">OF</span> baker <span class=\"sy1\">:=</span> b<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> c <span class=\"kw2\">FROM</span> bottom floor <span class=\"kw2\">TO</span> top floor <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> b <span class=\"sy1\">/=</span> c <span class=\"kw2\">THEN</span><br/>            floor <span class=\"kw6\">OF</span> cooper <span class=\"sy1\">:=</span> c<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> f <span class=\"kw2\">FROM</span> bottom floor <span class=\"kw2\">TO</span> top floor <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> b <span class=\"sy1\">/=</span> f <span class=\"kw16\">AND</span> c <span class=\"sy1\">/=</span> f <span class=\"kw2\">THEN</span><br/>                    floor <span class=\"kw6\">OF</span> fletcher <span class=\"sy1\">:=</span> f<span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">FOR</span> m <span class=\"kw2\">FROM</span> bottom floor <span class=\"kw2\">TO</span> top floor <span class=\"kw2\">DO</span><br/>                        <span class=\"kw2\">IF</span> b <span class=\"sy1\">/=</span> m <span class=\"kw16\">AND</span> c <span class=\"sy1\">/=</span> m <span class=\"kw16\">AND</span> f <span class=\"sy1\">/=</span> m <span class=\"kw2\">THEN</span><br/>                            floor <span class=\"kw6\">OF</span> miller   <span class=\"sy1\">:=</span> m<span class=\"sy1\">;</span><br/>                            <span class=\"kw2\">FOR</span> s <span class=\"kw2\">FROM</span> bottom floor <span class=\"kw2\">TO</span> top floor <span class=\"kw2\">DO</span><br/>                                <span class=\"kw2\">IF</span> b <span class=\"sy1\">/=</span> s <span class=\"kw16\">AND</span> c <span class=\"sy1\">/=</span> s <span class=\"kw16\">AND</span> f <span class=\"sy1\">/=</span> s <span class=\"kw16\">AND</span> m <span class=\"sy1\">/=</span> s <span class=\"kw2\">THEN</span><br/>                                    floor <span class=\"kw6\">OF</span> smith    <span class=\"sy1\">:=</span> s<span class=\"sy1\">;</span><br/>                                    <span class=\"kw2\">IF</span> OK baker <span class=\"kw16\">AND</span> OK cooper <span class=\"kw16\">AND</span> OK fletcher <span class=\"kw16\">AND</span> OK miller <span class=\"kw16\">AND</span> OK smith<br/>                                    <span class=\"kw2\">THEN</span><br/>                                        <span class=\"coMULTI\"># found a solution #</span><br/>                                        <span class=\"kw22\">print</span> floor<span class=\"br0\">(</span> baker    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw22\">print</span> floor<span class=\"br0\">(</span> cooper   <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw22\">print</span> floor<span class=\"br0\">(</span> fletcher <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw22\">print</span> floor<span class=\"br0\">(</span> miller   <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw22\">print</span> floor<span class=\"br0\">(</span> smith    <span class=\"br0\">)</span><br/>                                    <span class=\"kw2\">FI</span><br/>                                <span class=\"kw2\">FI</span><br/>                            <span class=\"kw2\">OD</span><br/>                        <span class=\"kw2\">FI</span><br/>                    <span class=\"kw2\">OD</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 41, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f DINESMANS_MULTIPLE-DWELLING_PROBLEM.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Baker=<span class=\"nu0\">1</span>; Baker<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Baker<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Cooper=<span class=\"nu0\">1</span>; Cooper<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Cooper<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Fletcher=<span class=\"nu0\">1</span>; Fletcher<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Fletcher<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Miller=<span class=\"nu0\">1</span>; Miller<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Miller<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Smith=<span class=\"nu0\">1</span>; Smith<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Smith<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span><span class=\"nu0\">1</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Baker<span class=\"es0\">\\n</span>\"</span>,Baker<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Cooper<span class=\"es0\">\\n</span>\"</span>,Cooper<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Fletcher<span class=\"es0\">\\n</span>\"</span>,Fletcher<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Miller<span class=\"es0\">\\n</span>\"</span>,Miller<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Smith<span class=\"es0\">\\n</span>\"</span>,Smith<span class=\"br0\">)</span><br/>              <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> rules<span class=\"br0\">(</span>  stmt1,stmt2,stmt3,stmt4,stmt5,stmt6,stmt7<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># The following problem statements may be changed:</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house</span><br/><span class=\"co1\"># that contains only five floors numbered 1 (ground) to 5 (top)</span><br/>    stmt1 = Baker<span class=\"sy2\">!=</span>Cooper <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Fletcher <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Cooper<span class=\"sy2\">!=</span>Fletcher <span class=\"sy1\">&amp;&amp;</span> Cooper<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Cooper<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Fletcher<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Fletcher<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Miller<span class=\"sy2\">!=</span>Smith<br/>    stmt2 = Baker <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span>                     <span class=\"co1\"># Baker does not live on the top floor</span><br/>    stmt3 = Cooper <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>                    <span class=\"co1\"># Cooper does not live on the bottom floor</span><br/>    stmt4 = Fletcher <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span> <span class=\"sy1\">&amp;&amp;</span> Fletcher <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"co1\"># Fletcher does not live on either the top or the bottom floor</span><br/>    stmt5 = Miller <span class=\"sy2\">&gt;</span> Cooper                <span class=\"co1\"># Miller lives on a higher floor than does Cooper</span><br/>    stmt6 = abs<span class=\"br0\">(</span>Smith<span class=\"sy3\">-</span>Fletcher<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>       <span class=\"co1\"># Smith does not live on a floor adjacent to Fletcher's</span><br/>    stmt7 = abs<span class=\"br0\">(</span>Fletcher<span class=\"sy3\">-</span>Cooper<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>      <span class=\"co1\"># Fletcher does not live on a floor adjacent to Cooper's</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>stmt1 stmt2 stmt3 stmt4 stmt5 stmt6 stmt7<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> x <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span>x <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 41, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f DINESMANS_MULTIPLE-DWELLING_PROBLEM.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Baker=<span class=\"nu0\">1</span>; Baker<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Baker<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Cooper=<span class=\"nu0\">1</span>; Cooper<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Cooper<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Fletcher=<span class=\"nu0\">1</span>; Fletcher<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Fletcher<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Miller=<span class=\"nu0\">1</span>; Miller<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Miller<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Smith=<span class=\"nu0\">1</span>; Smith<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; Smith<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span><span class=\"nu0\">1</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Baker<span class=\"es0\">\\n</span>\"</span>,Baker<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Cooper<span class=\"es0\">\\n</span>\"</span>,Cooper<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Fletcher<span class=\"es0\">\\n</span>\"</span>,Fletcher<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Miller<span class=\"es0\">\\n</span>\"</span>,Miller<span class=\"br0\">)</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Smith<span class=\"es0\">\\n</span>\"</span>,Smith<span class=\"br0\">)</span><br/>              <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> rules<span class=\"br0\">(</span>  stmt1,stmt2,stmt3,stmt4,stmt5,stmt6,stmt7<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># The following problem statements may be changed:</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house</span><br/><span class=\"co1\"># that contains only five floors numbered 1 (ground) to 5 (top)</span><br/>    stmt1 = Baker<span class=\"sy2\">!=</span>Cooper <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Fletcher <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Baker<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Cooper<span class=\"sy2\">!=</span>Fletcher <span class=\"sy1\">&amp;&amp;</span> Cooper<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Cooper<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Fletcher<span class=\"sy2\">!=</span>Miller <span class=\"sy1\">&amp;&amp;</span> Fletcher<span class=\"sy2\">!=</span>Smith <span class=\"sy1\">&amp;&amp;</span><br/>            Miller<span class=\"sy2\">!=</span>Smith<br/>    stmt2 = Baker <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span>                     <span class=\"co1\"># Baker does not live on the top floor</span><br/>    stmt3 = Cooper <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>                    <span class=\"co1\"># Cooper does not live on the bottom floor</span><br/>    stmt4 = Fletcher <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span> <span class=\"sy1\">&amp;&amp;</span> Fletcher <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"co1\"># Fletcher does not live on either the top or the bottom floor</span><br/>    stmt5 = Miller <span class=\"sy2\">&gt;</span> Cooper                <span class=\"co1\"># Miller lives on a higher floor than does Cooper</span><br/>    stmt6 = abs<span class=\"br0\">(</span>Smith<span class=\"sy3\">-</span>Fletcher<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>       <span class=\"co1\"># Smith does not live on a floor adjacent to Fletcher's</span><br/>    stmt7 = abs<span class=\"br0\">(</span>Fletcher<span class=\"sy3\">-</span>Cooper<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span>      <span class=\"co1\"># Fletcher does not live on a floor adjacent to Cooper's</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>stmt1 stmt2 stmt3 stmt4 stmt5 stmt6 stmt7<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> x <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span>x <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 48, "block": "<pre class=\"text highlighted_source\">      REM Floors are numbered 0 (ground) to 4 (top)<br/>\u00a0<br/>      REM \"Baker, Cooper, Fletcher, Miller, and Smith live on different floors\":<br/>      stmt1$ = \"Baker&lt;&gt;Cooper AND Baker&lt;&gt;Fletcher AND Baker&lt;&gt;Miller AND \" + \\<br/>      \\        \"Baker&lt;&gt;Smith AND Cooper&lt;&gt;Fletcher AND Cooper&lt;&gt;Miller AND \" + \\<br/>      \\        \"Cooper&lt;&gt;Smith AND Fletcher&lt;&gt;Miller AND Fletcher&lt;&gt;Smith AND \" + \\<br/>      \\        \"Miller&lt;&gt;Smith\"<br/>\u00a0<br/>      REM \"Baker does not live on the top floor\":<br/>      stmt2$ = \"Baker&lt;&gt;4\"<br/>\u00a0<br/>      REM \"Cooper does not live on the bottom floor\":<br/>      stmt3$ = \"Cooper&lt;&gt;0\"<br/>\u00a0<br/>      REM \"Fletcher does not live on either the top or the bottom floor\":<br/>      stmt4$ = \"Fletcher&lt;&gt;0 AND Fletcher&lt;&gt;4\"<br/>\u00a0<br/>      REM \"Miller lives on a higher floor than does Cooper\":<br/>      stmt5$ = \"Miller&gt;Cooper\"<br/>\u00a0<br/>      REM \"Smith does not live on a floor adjacent to Fletcher's\":<br/>      stmt6$ = \"ABS(Smith-Fletcher)&lt;&gt;1\"<br/>\u00a0<br/>      REM \"Fletcher does not live on a floor adjacent to Cooper's\":<br/>      stmt7$ = \"ABS(Fletcher-Cooper)&lt;&gt;1\"<br/>\u00a0<br/>      FOR Baker = 0 TO 4<br/>        FOR Cooper = 0 TO 4<br/>          FOR Fletcher = 0 TO 4<br/>            FOR Miller = 0 TO 4<br/>              FOR Smith = 0 TO 4<br/>                IF EVAL(stmt2$) IF EVAL(stmt3$) IF EVAL(stmt5$) THEN<br/>                  IF EVAL(stmt4$) IF EVAL(stmt6$) IF EVAL(stmt7$) THEN<br/>                    IF EVAL(stmt1$) THEN<br/>                      PRINT \"Baker lives on floor \"\u00a0; Baker<br/>                      PRINT \"Cooper lives on floor \"\u00a0; Cooper<br/>                      PRINT \"Fletcher lives on floor \"\u00a0; Fletcher<br/>                      PRINT \"Miller lives on floor \"\u00a0; Miller<br/>                      PRINT \"Smith lives on floor \"\u00a0; Smith<br/>                    ENDIF<br/>                  ENDIF<br/>                ENDIF<br/>              NEXT Smith<br/>            NEXT Miller<br/>          NEXT Fletcher<br/>        NEXT Cooper<br/>      NEXT Baker<br/>      END</pre>"}, {"lang": "Bracmat", "loc": 27, "block": "<pre class=\"text highlighted_source\">(   Baker Cooper Fletcher Miller Smith:?people<br/>  &amp; ( constraints<br/>    =   <br/>      .  \u00a0!arg<br/>       \u00a0: ~(? Baker)<br/>       \u00a0: ~(Cooper\u00a0?)<br/>       \u00a0: ~(Fletcher\u00a0?|? Fletcher)<br/>       \u00a0:\u00a0? Cooper\u00a0? Miller\u00a0?<br/>       \u00a0: ~(? Smith Fletcher\u00a0?|? Fletcher Smith\u00a0?)<br/>       \u00a0: ~(? Cooper Fletcher\u00a0?|? Fletcher Cooper\u00a0?)<br/>    )<br/>  &amp; ( solution<br/>    =   floors persons A Z person<br/>      .  \u00a0!arg:(?floors.?persons)<br/>        &amp; (  \u00a0!persons:<br/>            &amp; constraints$!floors<br/>            &amp; out$(\"Inhabitants, from bottom to top:\"\u00a0!floors)<br/>            &amp; ~     { The ~ always fails on evaluation. Here, failure forces Bracmat to backtrack and find all solutions, not just the first one. }<br/>          |  \u00a0!persons<br/>           \u00a0:  \u00a0?A<br/>               \u00a0%?`person<br/>                (?Z&amp;solution$(!floors\u00a0!person.!A\u00a0!Z))<br/>          )<br/>    )<br/>  &amp; solution$(.!people)<br/>|        { After outputting all solutions, the lhs of the | operator fails. The rhs of the | operator, here an empty string, is the final result. }<br/>);</pre>"}, {"lang": "C", "loc": 81, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> verbose <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define COND(a, b) int a(int *s) { return (b); }</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>condition<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* BEGIN problem specific setup */</span><br/><span class=\"co2\">#define N_FLOORS 5</span><br/><span class=\"co2\">#define TOP (N_FLOORS - 1)</span><br/><span class=\"kw4\">int</span> solution<span class=\"br0\">[</span>N_FLOORS<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> occupied<span class=\"br0\">[</span>N_FLOORS<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> tenants <span class=\"br0\">{</span><br/>\tbaker <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\tcooper<span class=\"sy0\">,</span><br/>\tfletcher<span class=\"sy0\">,</span><br/>\tmiller<span class=\"sy0\">,</span><br/>\tsmith<span class=\"sy0\">,</span><br/>\tphantom_of_the_opera<span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>names<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"st0\">\"baker\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"cooper\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"fletcher\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"miller\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"smith\"</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>COND<span class=\"br0\">(</span>c0<span class=\"sy0\">,</span> s<span class=\"br0\">[</span>baker<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> TOP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>COND<span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> s<span class=\"br0\">[</span>cooper<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>COND<span class=\"br0\">(</span>c2<span class=\"sy0\">,</span> s<span class=\"br0\">[</span>fletcher<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>fletcher<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> TOP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>COND<span class=\"br0\">(</span>c3<span class=\"sy0\">,</span> s<span class=\"br0\">[</span>miller<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> s<span class=\"br0\">[</span>cooper<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>COND<span class=\"br0\">(</span>c4<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>s<span class=\"br0\">[</span>smith<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">[</span>fletcher<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>COND<span class=\"br0\">(</span>c5<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>s<span class=\"br0\">[</span>cooper<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">[</span>fletcher<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define N_CONDITIONS 6</span><br/>\u00a0<br/>condition cond<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> c0<span class=\"sy0\">,</span> c1<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> c3<span class=\"sy0\">,</span> c4<span class=\"sy0\">,</span> c5 <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* END of problem specific setup */</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> person<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>person <span class=\"sy0\">==</span> phantom_of_the_opera<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* check condition */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_CONDITIONS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cond<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>verbose<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> N_FLOORS<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> names<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"cond\u00a0%d bad<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Found arrangement:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_FLOORS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_FLOORS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>occupied<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\tsolution<span class=\"br0\">[</span>person<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\toccupied<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>person <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\toccupied<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tverbose <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>solve<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Nobody lives anywhere<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 68, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Baker <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, Cooper <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, Fletcher <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, Miller <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, Smith <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> names <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nameof<span class=\"br0\">(</span>Baker<span class=\"br0\">)</span>, nameof<span class=\"br0\">(</span>Cooper<span class=\"br0\">)</span>, nameof<span class=\"br0\">(</span>Fletcher<span class=\"br0\">)</span>, nameof<span class=\"br0\">(</span>Miller<span class=\"br0\">)</span>, nameof<span class=\"br0\">(</span>Smith<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> constraints <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            floorOf <span class=\"sy0\">=&gt;</span> floorOf<span class=\"br0\">[</span>Baker<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> count<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<br/>            floorOf <span class=\"sy0\">=&gt;</span> floorOf<span class=\"br0\">[</span>Cooper<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>,<br/>            floorOf <span class=\"sy0\">=&gt;</span> floorOf<span class=\"br0\">[</span>Fletcher<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> count<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> floorOf<span class=\"br0\">[</span>Fletcher<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>,<br/>            floorOf <span class=\"sy0\">=&gt;</span> floorOf<span class=\"br0\">[</span>Miller<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> floorOf<span class=\"br0\">[</span>Cooper<span class=\"br0\">]</span>,<br/>            floorOf <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>floorOf<span class=\"br0\">[</span>Smith<span class=\"br0\">]</span> <span class=\"sy0\">-</span> floorOf<span class=\"br0\">[</span>Fletcher<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>,<br/>            floorOf <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>floorOf<span class=\"br0\">[</span>Fletcher<span class=\"br0\">]</span> <span class=\"sy0\">-</span> floorOf<span class=\"br0\">[</span>Cooper<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>,<br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> solver <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DinesmanSolver<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> tenants <span class=\"kw1\">in</span> solver<span class=\"sy0\">.</span><span class=\"me1\">Solve</span><span class=\"br0\">(</span>count, constraints<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, tenants<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> names<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> DinesmanSolver<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> Solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> count, <span class=\"kw1\">params</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> constraints<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> floorOf <span class=\"kw1\">in</span> Permutations<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>constraints<span class=\"sy0\">.</span><span class=\"me1\">All</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c<span class=\"br0\">(</span>floorOf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, count<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> floorOf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> Permutations<span class=\"br0\">(</span><span class=\"kw4\">int</span> length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">bool</span> forwards <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> permutation <span class=\"kw1\">in</span> Permutations<span class=\"br0\">(</span>length <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> permutation<span class=\"sy0\">.</span><span class=\"me1\">InsertAt</span><span class=\"br0\">(</span>forwards <span class=\"sy0\">?</span> i <span class=\"sy0\">:</span> length <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, length <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            forwards <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>forwards<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> InsertAt<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source, <span class=\"kw4\">int</span> position, T newElement<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>source <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentNullException<span class=\"br0\">(</span>nameof<span class=\"br0\">(</span>source<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>position <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span>nameof<span class=\"br0\">(</span>position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> InsertAtIterator<span class=\"br0\">(</span>source, position, newElement<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> InsertAtIterator<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source, <span class=\"kw4\">int</span> position, T newElement<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T element <span class=\"kw1\">in</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> position<span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> newElement<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> element<span class=\"sy0\">;</span><br/>            index<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>index <span class=\"sy0\">&lt;</span> position<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span>nameof<span class=\"br0\">(</span>position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> position<span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> newElement<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 24, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tfunction notAdjacent(Integer a, Integer b) =&gt; (a - b).magnitude &gt;= 2;<br/>\tfunction allDifferent(Integer* ints) =&gt; ints.distinct.size == ints.size;<br/>\u00a0<br/>\tvalue solutions = [<br/>\t\tfor (baker in 1..4)<br/>\t\tfor (cooper in 2..5)<br/>\t\tfor (fletcher in 2..4)<br/>\t\tfor (miller in 2..5)<br/>\t\tfor (smith in 1..5)<br/>\t\tif (miller &gt; cooper &amp;&amp; <br/>\t\t\tnotAdjacent(smith, fletcher) &amp;&amp; <br/>\t\t\tnotAdjacent(fletcher, cooper) &amp;&amp; <br/>\t\t\tallDifferent(baker, cooper, fletcher, miller, smith))<br/>\t\t\"baker lives on ``baker`` <br/>\t\t cooper lives on ``cooper`` <br/>\t\t fletcher lives on ``fletcher`` <br/>\t\t miller lives on ``miller`` <br/>\t\t smith lives on ``smith``\"<br/>\t];<br/>\u00a0<br/>\tprint(solutions.first else \"No solution!\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>dinesman<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>core<span class=\"sy0\">.</span>logic<span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>tools<span class=\"sy0\">.</span>macro\u00a0:<span class=\"me1\">as</span> macro<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; whether x is immediately above (left of) y in list s; uses pattern matching on s</span><br/><span class=\"br0\">(</span>defne aboveo <span class=\"br0\">[</span>x y s<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">(</span>x y <span class=\"sy0\">.</span>\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">[</span>_ <span class=\"sy0\">.</span>\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>aboveo x y\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; whether x is on a higher floor than y</span><br/><span class=\"br0\">(</span>defne highero <span class=\"br0\">[</span>x y s<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">(</span>x <span class=\"sy0\">.</span>\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>membero y\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">(</span>_ <span class=\"sy0\">.</span>\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>highero x y\u00a0?<span class=\"kw1\">rest</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; whether x and y are on nonadjacent floors</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> nonadjacento <span class=\"br0\">[</span>x y s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>conda<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>aboveo x y s<span class=\"br0\">)</span> fail<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>aboveo y x s<span class=\"br0\">)</span> fail<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>succeed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dinesmano <span class=\"br0\">[</span>rs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>macro<span class=\"sy0\">/</span>symbol<span class=\"sy0\">-</span>macrolet <span class=\"br0\">[</span>_ <span class=\"br0\">(</span>lvar<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>all<br/>      <span class=\"br0\">(</span>permuteo <span class=\"br0\">[</span>'Baker 'Cooper 'Fletcher 'Miller 'Smith<span class=\"br0\">]</span> rs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>aboveo _ 'Baker rs<span class=\"br0\">)</span> <span class=\"co1\">;someone lives above Baker</span><br/>      <span class=\"br0\">(</span>aboveo 'Cooper _ rs<span class=\"br0\">)</span> <span class=\"co1\">;Cooper lives above someone</span><br/>      <span class=\"br0\">(</span>aboveo 'Fletcher _ rs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>aboveo _ 'Fletcher rs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>highero 'Miller 'Cooper rs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nonadjacento 'Smith 'Fletcher rs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nonadjacento 'Fletcher 'Cooper rs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>solns <span class=\"br0\">(</span>run<span class=\"sy0\">*</span> <span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"br0\">(</span>dinesmano q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"solution count:\"</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> solns<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"solution(s) highest to lowest floor:\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>soln solns<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"st0\">\" \"</span> soln<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> permutations2<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> Names <span class=\"br0\">{</span> Baker<span class=\"sy0\">,</span> Cooper<span class=\"sy0\">,</span> Fletcher<span class=\"sy0\">,</span> Miller<span class=\"sy0\">,</span> Smith <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span><span class=\"br0\">(</span><span class=\"kw4\">bool</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Names<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> predicates <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Baker</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Cooper</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Fletcher</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Fletcher</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Miller</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Cooper</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        s <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>s<span class=\"br0\">[</span>Names.<span class=\"me1\">Smith</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Fletcher</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        s <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>s<span class=\"br0\">[</span>Names.<span class=\"me1\">Cooper</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">[</span>Names.<span class=\"me1\">Fletcher</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    permutations<span class=\"br0\">(</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Names<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>solution <span class=\"sy0\">=&gt;</span> predicates.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pred <span class=\"sy0\">=&gt;</span> pred<span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 29, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'hash<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require' amb<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; Solver</span><br/><span class=\"co1\">;;</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>dwelling<span class=\"sy0\">-</span>puzzle context names floors H<span class=\"br0\">)</span><br/><span class=\"co1\">;; each amb calls gives a floor to a name</span><br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>name names<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>set H name <span class=\"br0\">(</span>amb context floors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; They live on different floors.</span><br/>    <span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>require <span class=\"br0\">(</span>distinct? <span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>choices context<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>constraints floors H<span class=\"br0\">)</span> <span class=\"co1\">;; may fail and backtrack</span><br/><span class=\"co1\">;; result returned to amb-run</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>name names<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> name <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref H name<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; (amb-fail) is possible here to see all solutions</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task names<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>run dwelling<span class=\"sy0\">-</span>puzzle <br/>\t<span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>make<span class=\"sy0\">-</span>context<span class=\"br0\">)</span> <br/>\t names <br/>\t<span class=\"br0\">(</span>iota <span class=\"br0\">(</span><span class=\"kw1\">length</span> names<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; list of floors\u00a0: 0,1, ....</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; hash table\u00a0: \"name\" -&gt; floor</span><br/>\t<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule Dinesman do<br/>  def problem do<br/>    names = ~w( Baker Cooper Fletcher Miller Smith )a<br/>    predicates = [fn(c)-&gt;\u00a0:Baker\u00a0!= List.last(c) end,<br/>                  fn(c)-&gt;\u00a0:Cooper\u00a0!= List.first(c) end,<br/>                  fn(c)-&gt;\u00a0:Fletcher\u00a0!= List.first(c) &amp;&amp;\u00a0:Fletcher\u00a0!= List.last(c) end,<br/>                  fn(c)-&gt; floor(c,\u00a0:Miller) &gt; floor(c,\u00a0:Cooper) end,<br/>                  fn(c)-&gt; abs(floor(c,\u00a0:Smith) - floor(c,\u00a0:Fletcher))\u00a0!= 1 end,<br/>                  fn(c)-&gt; abs(floor(c,\u00a0:Cooper) - floor(c,\u00a0:Fletcher))\u00a0!= 1 end]<br/>\u00a0<br/>    permutation(names)<br/>    |&gt; Enum.filter(fn candidate -&gt;<br/>         Enum.all?(predicates, fn predicate -&gt; predicate.(candidate) end)<br/>       end)<br/>    |&gt; Enum.each(fn name_list -&gt;<br/>         Enum.with_index(name_list)<br/>         |&gt; Enum.each(fn {name,i} -&gt; IO.puts \"#{name} lives on #{i+1}\" end)<br/>       end)<br/>  end<br/>\u00a0<br/>  defp floor(c, name), do: Enum.find_index(c, fn x -&gt; x == name end)<br/>\u00a0<br/>  defp permutation([]), do: [[]]<br/>  defp permutation(list), do: (for x &lt;- list, y &lt;- permutation(list -- [x]), do: [x|y])<br/>end<br/>\u00a0<br/>Dinesman.problem</pre>"}, {"lang": "Erlang", "loc": 45, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> dinesman_multiple_dwelling <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>solve<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">house</span><span class=\"br0\">(</span><span class=\"re5\">Bottom_floor</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">Top_floor</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Bottom_floor</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">Top_floor</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">all</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\t<span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span> <span class=\"re3\">house</span><span class=\"br0\">(</span><span class=\"re5\">Bottom_floor</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">Top_floor</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re3\">rules</span><span class=\"br0\">(</span> <span class=\"re5\">Rules</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">All_persons</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span>baker<span class=\"sy1\">,</span> cooper<span class=\"sy1\">,</span> fletcher<span class=\"sy1\">,</span> miller<span class=\"sy1\">,</span> smith<span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Rules</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span>all_on_different_floors<span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_lives_on_floor<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> baker<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_lives_on_floor<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> cooper<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_lives_on_floor<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> fletcher<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_lives_on_floor<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> fletcher<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>          <span class=\"br0\">{</span>on_higher_floor<span class=\"sy1\">,</span> miller<span class=\"sy1\">,</span> cooper<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_adjacent<span class=\"sy1\">,</span> smith<span class=\"sy1\">,</span> fletcher<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>not_adjacent<span class=\"sy1\">,</span> fletcher<span class=\"sy1\">,</span> cooper<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">House</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">All_persons</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p lives on floor ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span>\t<span class=\"re5\">House</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\t<span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">house</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_all_on_different_floors</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">A</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">B</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">A</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">C</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">A</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">D</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">A</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">E</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re5\">B</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">C</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">B</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">D</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">B</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">E</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re5\">C</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">D</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">C</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">E</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re5\">D</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">E</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_adjacent</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span> <span class=\"kw1\">andalso</span> <span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">_Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Person</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Person</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_on_higher_floor</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Person1</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_on_higher_floor</span><span class=\"br0\">(</span> <span class=\"re5\">_Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Person2</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_on_higher_floor</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Person</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_on_higher_floor</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">rules</span><span class=\"br0\">(</span> <span class=\"re5\">Rules</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> rules_fun<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">rules_fun</span><span class=\"br0\">(</span> all_on_different_floors <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span> is_all_on_different_floors<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">rules_fun</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>not_lives_on_floor<span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Person</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">House</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Person</span> <span class=\"sy3\">=/=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">rules_fun</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>on_higher_floor<span class=\"sy1\">,</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">House</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_on_higher_floor</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">rules_fun</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>not_below<span class=\"sy1\">,</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">House</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_not_below</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">rules_fun</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>not_adjacent<span class=\"sy1\">,</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">House</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\t<span class=\"re3\">is_not_adjacent</span><span class=\"br0\">(</span> <span class=\"re5\">Person1</span><span class=\"sy1\">,</span> <span class=\"re5\">Person2</span><span class=\"sy1\">,</span> <span class=\"re5\">House</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 48, "block": "<pre class=\"text highlighted_source\">PROGRAM DINESMAN<br/>\u00a0<br/>BEGIN<br/>     \u00a0! Floors are numbered 0 (ground) to 4 (top)<br/>\u00a0<br/>     \u00a0! \"Baker, Cooper, Fletcher, Miller, and Smith live on different floors\":<br/>      stmt1$=\"Baker&lt;&gt;Cooper AND Baker&lt;&gt;Fletcher AND Baker&lt;&gt;Miller AND \"+\"Baker&lt;&gt;Smith AND Cooper&lt;&gt;Fletcher AND Cooper&lt;&gt;Miller AND \"+\"Cooper&lt;&gt;Smith AND Fletcher&lt;&gt;Miller AND Fletcher&lt;&gt;Smith AND \"+\"Miller&lt;&gt;Smith\"<br/>\u00a0<br/>     \u00a0! \"Baker does not live on the top floor\":<br/>      stmt2$=\"Baker&lt;&gt;4\"<br/>\u00a0<br/>     \u00a0! \"Cooper does not live on the bottom floor\":<br/>      stmt3$=\"Cooper&lt;&gt;0\"<br/>\u00a0<br/>     \u00a0! \"Fletcher does not live on either the top or the bottom floor\":<br/>      stmt4$=\"Fletcher&lt;&gt;0 AND Fletcher&lt;&gt;4\"<br/>\u00a0<br/>     \u00a0! \"Miller lives on a higher floor than does Cooper\":<br/>      stmt5$=\"Miller&gt;Cooper\"<br/>\u00a0<br/>     \u00a0! \"Smith does not live on a floor adjacent to Fletcher's\":<br/>      stmt6$=\"ABS(Smith-Fletcher)&lt;&gt;1\"<br/>\u00a0<br/>     \u00a0! \"Fletcher does not live on a floor adjacent to Cooper's\":<br/>      stmt7$=\"ABS(Fletcher-Cooper)&lt;&gt;1\"<br/>\u00a0<br/>      FOR Baker=0 TO 4 DO<br/>        FOR Cooper=0 TO 4 DO<br/>          FOR Fletcher=0 TO 4 DO<br/>            FOR Miller=0 TO 4 DO<br/>              FOR Smith=0 TO 4 DO<br/>                IF Baker&lt;&gt;4 AND Cooper&lt;&gt;0 AND Miller&gt;Cooper THEN<br/>                  IF Fletcher&lt;&gt;0 AND Fletcher&lt;&gt;4 AND ABS(Smith-Fletcher)&lt;&gt;1 AND ABS(Fletcher-Cooper)&lt;&gt;1 THEN<br/>                    IF Baker&lt;&gt;Cooper AND Baker&lt;&gt;Fletcher AND Baker&lt;&gt;Miller AND Baker&lt;&gt;Smith AND Cooper&lt;&gt;Fletcher AND Cooper&lt;&gt;Miller AND Cooper&lt;&gt;Smith AND Fletcher&lt;&gt;Miller AND Fletcher&lt;&gt;Smith AND Miller&lt;&gt;Smith THEN<br/>                      PRINT(\"Baker lives on floor \";Baker)<br/>                      PRINT(\"Cooper lives on floor \";Cooper)<br/>                      PRINT(\"Fletcher lives on floor \";Fletcher)<br/>                      PRINT(\"Miller lives on floor \";Miller)<br/>                      PRINT(\"Smith lives on floor \";Smith)<br/>                    END IF<br/>                  END IF<br/>                END IF<br/>              END FOR\u00a0!  Smith<br/>            END FOR\u00a0!  Miller<br/>          END FOR\u00a0!  Fletcher<br/>        END FOR\u00a0!  Cooper<br/>      END FOR\u00a0!  Baker<br/>END PROGRAM</pre>"}, {"lang": "Factor", "loc": 28, "block": "<pre class=\"text highlighted_source\">USING: kernel<br/>    combinators.short-circuit<br/>    math math.combinatorics math.ranges <br/>    sequences<br/>    qw prettyprint\u00a0;<br/>IN: rosetta.dinesman<br/>\u00a0<br/>: /= ( x y --\u00a0? ) = not\u00a0;<br/>: fifth ( seq -- elt ) 4 swap nth\u00a0;<br/>\u00a0<br/>: meets-constraints? ( seq --\u00a0? )<br/>    {  <br/>        [ first 5 /= ]                         \u00a0! Baker does not live on the top floor.   <br/>        [ second 1 /= ]                        \u00a0! Cooper does not live on the bottom floor.<br/>        [ third { 1 5 } member? not ]          \u00a0! Fletcher does not live on either the top or bottom floor.<br/>        [ [ fourth ] [ second ] bi &gt; ]         \u00a0! Miller lives on a higher floor than does Cooper.<br/>        [ [ fifth ] [ third ] bi - abs 1 /= ]  \u00a0! Smith does not live on a floor adjacent to Fletcher's.<br/>        [ [ third ] [ second ] bi - abs 1 /= ] \u00a0! Fletcher does not live on a floor adjacent to Cooper's.<br/>    } 1&amp;&amp;\u00a0;<br/>\u00a0<br/>: solutions ( -- seq )<br/>    5 [1,b] all-permutations [ meets-constraints? ] filter\u00a0;<br/>\u00a0<br/>: &gt;names ( seq -- seq )<br/>    [ 1 - qw{ baker cooper fletcher miller smith } nth ] map\u00a0;<br/>\u00a0<br/>: dinesman ( -- )<br/>    solutions [ &gt;names . ] each\u00a0;</pre>"}, {"lang": "Forth", "loc": 51, "block": "<pre class=\"text highlighted_source\">  0 enum baker                         \\ enumeration of all tenants<br/>    enum cooper<br/>    enum fletcher<br/>    enum miller<br/>constant smith<br/>\u00a0<br/>create names                           \\ names of all the tenants<br/>  ,\" Baker\"<br/>  ,\" Cooper\"<br/>  ,\" Fletcher\"<br/>  ,\" Miller\"<br/>  ,\" Smith\"                            \\ get name, type it<br/>does&gt; swap cells + @c count type .\"  lives in \"\u00a0;<br/>\u00a0<br/>        5 constant #floor              \\ number of floors<br/>#floor 1- constant top                 \\ top floor<br/>        0 constant bottom              \\ we're counting the floors from 0<br/>\u00a0<br/>: <a class=\"__cf_email__\" data-cfemail=\"3d5348507d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <a class=\"__cf_email__\" data-cfemail=\"6e0d2e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] 0 -\u00a0;                 ( a -- n)<br/>: floor chars over + <a class=\"__cf_email__\" data-cfemail=\"0668736b46\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;            ( a n1 -- a n2)<br/>                                       \\ is it a valid permutation?<br/>: perm?                                ( n -- a f)<br/>  #floor base\u00a0! 0 swap s&gt;d &lt;# #floor 0\u00a0?do # loop #&gt;<br/>  over &gt;r bounds do 1 i <a class=\"__cf_email__\" data-cfemail=\"d9b7acb499\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> lshift + loop<br/>  31 = r&gt; swap decimal                 \\ create binary mask and check<br/>;<br/>                                       \\ test a solution<br/>: solution?                            ( a -- a f)<br/>  baker floor top &lt;&gt;                   \\ baker on top floor?<br/>  if cooper floor bottom &lt;&gt;            \\ cooper on the bottom floor?<br/>     if fletcher floor dup bottom &lt;&gt; swap top &lt;&gt; and<br/>        if cooper floor swap miller floor rot &gt;<br/>           if smith floor swap fletcher floor rot - abs 1 &lt;&gt;<br/>              if cooper floor swap fletcher floor rot - abs 1 &lt;&gt;<br/>                 if true exit then     \\ we found a solution!<br/>              then<br/>           then<br/>        then<br/>     then<br/>  then false                           \\ nice try, no cigar..<br/>;<br/>                                       ( a --)<br/>: .solution #floor 0 do i names i chars over + <a class=\"__cf_email__\" data-cfemail=\"9dfedd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1+ emit cr loop drop\u00a0;<br/>                                       \\ main routine<br/>: dinesman                             ( --)<br/>  2932 194 do<br/>    i perm? if solution? if .solution leave else drop then else drop then<br/>  loop<br/>;                                      \\ show the solution<br/>\u00a0<br/>dinesman</pre>"}, {"lang": "Go", "loc": 122, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// The program here is restricted to finding assignments of tenants (or more</span><br/><span class=\"co1\">// generally variables with distinct names) to floors (or more generally</span><br/><span class=\"co1\">// integer values.)  It finds a solution assigning all tenants and assigning</span><br/><span class=\"co1\">// them to different floors.</span><br/>\u00a0<br/><span class=\"co1\">// Change number and names of tenants here.  Adding or removing names is</span><br/><span class=\"co1\">// allowed but the names should be distinct; the code is not written to handle</span><br/><span class=\"co1\">// duplicate names.</span><br/><span class=\"kw1\">var</span> tenants <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Baker\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Miller\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Smith\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Change the range of floors here.  The bottom floor does not have to be 1.</span><br/><span class=\"co1\">// These should remain non-negative integers though.</span><br/><span class=\"kw1\">const</span> bottom <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">const</span> top <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"co1\">// A type definition for readability.  Do not change.</span><br/><span class=\"kw1\">type</span> assignments <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"co1\">// Change rules defining the problem here.  Change, add, or remove rules as</span><br/><span class=\"co1\">// desired.  Each rule should first be commented as human readable text, then</span><br/><span class=\"co1\">// coded as a function.  The function takes a tentative partial list of</span><br/><span class=\"co1\">// assignments of tenants to floors and is free to compute anything it wants</span><br/><span class=\"co1\">// with this information.  Other information available to the function are</span><br/><span class=\"co1\">// package level defintions, such as top and bottom.  A function returns false</span><br/><span class=\"co1\">// to say the assignments are invalid.</span><br/><span class=\"kw1\">var</span> rules <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Baker does not live on the top floor</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        floor<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Baker\"</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>assigned <span class=\"sy3\">||</span> floor <span class=\"sy2\">!=</span> top<br/>    <span class=\"sy1\">},</span><br/>    <span class=\"co1\">// Cooper does not live on the bottom floor</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        floor<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>assigned <span class=\"sy3\">||</span> floor <span class=\"sy2\">!=</span> bottom<br/>    <span class=\"sy1\">},</span><br/>    <span class=\"co1\">// Fletcher does not live on either the top or the bottom floor</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        floor<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>assigned <span class=\"sy3\">||</span> <span class=\"sy1\">(</span>floor <span class=\"sy2\">!=</span> top &amp;&amp; floor <span class=\"sy2\">!=</span> bottom<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"co1\">// Miller lives on a higher floor than does Cooper</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> m<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Miller\"</span><span class=\"sy1\">];</span> assigned <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>assigned <span class=\"sy3\">||</span> m &gt; c<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"co1\">// Smith does not live on a floor adjacent to Fletcher's</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> s<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Smith\"</span><span class=\"sy1\">];</span> assigned <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> f<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">];</span> assigned <span class=\"sy1\">{</span><br/>                d <span class=\"sy2\">:=</span> s <span class=\"sy3\">-</span> f<br/>                <span class=\"kw1\">return</span> d<span class=\"sy3\">*</span>d &gt; <span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"co1\">// Fletcher does not live on a floor adjacent to Cooper's</span><br/>    <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a assignments<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> f<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">];</span> assigned <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> c<span class=\"sy1\">,</span> assigned <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">];</span> assigned <span class=\"sy1\">{</span><br/>                d <span class=\"sy2\">:=</span> f <span class=\"sy3\">-</span> c<br/>                <span class=\"kw1\">return</span> d<span class=\"sy3\">*</span>d &gt; <span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Assignment program, do not change.  The algorithm is a depth first search,</span><br/><span class=\"co1\">// tentatively assigning each tenant in order, and for each tenant trying each</span><br/><span class=\"co1\">// unassigned floor in order.  For each tentative assignment, it evaluates all</span><br/><span class=\"co1\">// rules in the rules list and backtracks as soon as any one of them fails.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// This algorithm ensures that the tenative assignments have only names in the</span><br/><span class=\"co1\">// tenants list, only floor numbers from bottom to top, and that tentants are</span><br/><span class=\"co1\">// assigned to different floors.  These rules are hard coded here and do not</span><br/><span class=\"co1\">// need to be coded in the the rules list above.</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a <span class=\"sy2\">:=</span> assignments<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">var</span> occ <span class=\"sy1\">[</span>top <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>    <span class=\"kw1\">var</span> df <span class=\"kw4\">func</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/>    df <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>u <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>u<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        tn <span class=\"sy2\">:=</span> u<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        u <span class=\"sy2\">=</span> u<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>    f<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">for</span> f <span class=\"sy2\">:=</span> bottom<span class=\"sy1\">;</span> f &lt;<span class=\"sy2\">=</span> top<span class=\"sy1\">;</span> f<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>occ<span class=\"sy1\">[</span>f<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                a<span class=\"sy1\">[</span>tn<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> f<br/>                <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rules <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>r<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                        delete<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> tn<span class=\"sy1\">)</span><br/>                        <span class=\"kw1\">continue</span> f<br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>                occ<span class=\"sy1\">[</span>f<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>                <span class=\"kw1\">if</span> df<span class=\"sy1\">(</span>u<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>                <span class=\"sy1\">}</span><br/>                occ<span class=\"sy1\">[</span>f<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>                delete<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> tn<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>df<span class=\"sy1\">(</span>tenants<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"no solution\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> t<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>t<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 37, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>permutations<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>guard<span class=\"br0\">)</span><br/>\u00a0<br/>dinesman <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>dinesman <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"co1\">-- baker, cooper, fletcher, miller, smith are integers representing</span><br/>  <span class=\"co1\">-- the floor that each person lives on, from 1 to 5</span><br/>\u00a0<br/>  <span class=\"co1\">-- Baker, Cooper, Fletcher, Miller, and Smith live on different floors </span><br/>  <span class=\"co1\">-- of an apartment house that contains only five floors.</span><br/>  <span class=\"br0\">[</span>baker<span class=\"sy0\">,</span> cooper<span class=\"sy0\">,</span> fletcher<span class=\"sy0\">,</span> miller<span class=\"sy0\">,</span> smith<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> permutations <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">-- Baker does not live on the top floor.</span><br/>  guard <span class=\"sy0\">$</span> baker <span class=\"sy0\">/=</span> <span class=\"nu0\">5</span><br/>\u00a0<br/>  <span class=\"co1\">-- Cooper does not live on the bottom floor.</span><br/>  guard <span class=\"sy0\">$</span> cooper <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\">-- Fletcher does not live on either the top or the bottom floor.</span><br/>  guard <span class=\"sy0\">$</span> fletcher <span class=\"sy0\">/=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">&amp;&amp;</span> fletcher <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\">-- Miller lives on a higher floor than does Cooper.</span><br/>  guard <span class=\"sy0\">$</span> miller <span class=\"sy0\">&gt;</span> cooper<br/>\u00a0<br/>  <span class=\"co1\">-- Smith does not live on a floor adjacent to Fletcher's.</span><br/>  guard <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>smith <span class=\"sy0\">-</span> fletcher<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\">-- Fletcher does not live on a floor adjacent to Cooper's.</span><br/>  guard <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>fletcher <span class=\"sy0\">-</span> cooper<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\">-- Where does everyone live?</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>baker<span class=\"sy0\">,</span> cooper<span class=\"sy0\">,</span> fletcher<span class=\"sy0\">,</span> miller<span class=\"sy0\">,</span> smith<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> dinesman <span class=\"co1\">-- print first solution: (3,2,4,5,1)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> dinesman <span class=\"co1\">-- print all solutions (only one): [(3,2,4,5,1)]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 71, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">invocable</span> all<br/><span class=\"kw2\">global</span> nameL<span class=\"sy1\">,</span> nameT<span class=\"sy1\">,</span> rules<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># Dinesman</span><br/>\u00a0<br/>nameT <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>nameL <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Baker\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Miller\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Smith\"</span><span class=\"br0\">]</span><br/>rules <span class=\"sy1\">:=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> distinct <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> <span class=\"st0\">\"~=\"</span><span class=\"sy1\">,</span>        <span class=\"st0\">\"Baker\"</span><span class=\"sy1\">,</span>    top<span class=\"br0\">(</span><span class=\"br0\">)</span>      <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> <span class=\"st0\">\"~=\"</span><span class=\"sy1\">,</span>        <span class=\"st0\">\"Cooper\"</span><span class=\"sy1\">,</span>   bottom<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> <span class=\"st0\">\"~=\"</span><span class=\"sy1\">,</span>        <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> top<span class=\"br0\">(</span><span class=\"br0\">)</span>      <span class=\"br0\">]</span><span class=\"sy1\">,</span>  <br/>           <span class=\"br0\">[</span> <span class=\"st0\">\"~=\"</span><span class=\"sy1\">,</span>        <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> bottom<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy1\">,</span>         <span class=\"st0\">\"Miller\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"Cooper\"</span>   <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> notadjacent<span class=\"sy1\">,</span> <span class=\"st0\">\"Smith\"</span><span class=\"sy1\">,</span>    <span class=\"st0\">\"Fletcher\"</span> <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> notadjacent<span class=\"sy1\">,</span> <span class=\"st0\">\"Fletcher\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Cooper\"</span>   <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> showsolution <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>           <span class=\"br0\">[</span> <span class=\"kw4\">stop</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw1\">not</span> solve<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution found.\"</span><span class=\"br0\">)</span>   <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> dontstop<span class=\"br0\">(</span><span class=\"br0\">)</span>           <span class=\"co1\"># use if you want to search for all solutions</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showsolution<span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"co1\"># show the soluton</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The solution is:\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"sy1\">,</span>n <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>nameL<span class=\"sy1\">,</span> <span class=\"st0\">\" lives in \"</span><span class=\"sy1\">,</span> nameT<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span> <br/>\u00a0<br/><span class=\"kw1\">procedure</span> eval<span class=\"br0\">(</span>n<span class=\"br0\">)</span>              <span class=\"co1\"># evaluate a rule</span><br/>   r <span class=\"sy1\">:=</span> <span class=\"kw4\">copy</span><span class=\"br0\">(</span>rules<span class=\"br0\">[</span>n<span class=\"sy1\">-</span>top<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> r<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>r<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> rv<span class=\"br0\">(</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy1\">!</span>r <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rv<span class=\"br0\">(</span>x<span class=\"br0\">)</span>                <span class=\"co1\"># return referenced value if it exists</span><br/><span class=\"kw1\">return</span> <span class=\"sy1\">\\</span>nameT<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">|</span> x<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> solve<span class=\"br0\">(</span>n<span class=\"br0\">)</span>             <span class=\"co1\"># recursive solver</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy1\">&gt;</span> top<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>         <span class=\"co1\"># apply rules</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy1\">&lt;=</span> top<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"sy1\">*</span>rules <span class=\"kw1\">then</span> <br/>         <span class=\"br0\">(</span> eval<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> solve<span class=\"br0\">(</span>n<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span>   <br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span>                        <span class=\"co1\"># setup locations</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span> nameT<span class=\"br0\">[</span>nameL<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> bottom<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> top<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> solve<span class=\"br0\">(</span>n <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span><br/>   <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> distinct<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>        <span class=\"co1\"># ensure each name is distinct</span><br/>   <span class=\"kw1\">if</span> nameT<span class=\"br0\">[</span>n <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>nameL<span class=\"br0\">]</span> <span class=\"sy1\">=</span> nameT<span class=\"br0\">[</span>n <span class=\"sy1\">~==</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span>nameT<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>   <span class=\"kw1\">suspend</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> notadjacent<span class=\"br0\">(</span>n1<span class=\"sy1\">,</span>n2<span class=\"br0\">)</span>   <span class=\"co1\"># ensure n1,2 are not adjacent</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> adjacent<span class=\"br0\">(</span>n1<span class=\"sy1\">,</span>n2<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> adjacent<span class=\"br0\">(</span>n1<span class=\"sy1\">,</span>n2<span class=\"br0\">)</span>      <span class=\"co1\"># ensure n1,2 are adjacent</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>n1 <span class=\"sy1\">-</span> n2<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> bottom<span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\"># return bottom </span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>nameL <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> top<span class=\"br0\">(</span><span class=\"br0\">)</span>                <span class=\"co1\"># return top</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy1\">*</span>nameL<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">possible=: <span class=\"sy0\">((</span>i.!<span class=\"nu0\">5</span><span class=\"sy0\">)</span> A. i.<span class=\"nu0\">5</span><span class=\"sy0\">)</span> { <span class=\"st_h\">'BCFMS'</span></pre>"}, {"lang": "Java", "loc": 87, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> DinesmanMultipleDwelling <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> generatePermutations<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> apartmentDwellers, Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> set, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> curPermutation<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">:</span> apartmentDwellers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>curPermutation.<span class=\"me1\">contains</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> nextPermutation <span class=\"sy0\">=</span> curPermutation <span class=\"sy0\">+</span> s<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nextPermutation.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> apartmentDwellers.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    set.<span class=\"me1\">add</span><span class=\"br0\">(</span>nextPermutation<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    generatePermutations<span class=\"br0\">(</span>apartmentDwellers, set, nextPermutation<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> topFloor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> permutation, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> person<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//Checks to see if the person is on the top floor</span><br/>        <span class=\"kw1\">return</span> permutation.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span>person<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> bottomFloor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> permutation, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> person<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//Checks to see if the person is on the bottom floor</span><br/>        <span class=\"kw1\">return</span> permutation.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span>person<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> livesAbove<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> permutation, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> upperPerson, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> lowerPerson<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//Checks to see if the person lives above the other person</span><br/>        <span class=\"kw1\">return</span> permutation.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>upperPerson<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> permutation.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>lowerPerson<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> adjacent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> permutation, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> person1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> person2<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//checks to see if person1 is adjacent to person2</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>permutation.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>person1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> permutation.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>person2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isPossible<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/*<br/>         What this does should be obvious...proper explaination can be given if needed<br/>         Conditions here Switching any of these to\u00a0! or reverse will change what is given as a result<br/>\u00a0<br/>         example <br/>         if(topFloor(s, \"B\"){<br/>         }<br/>         to<br/>         if(!topFloor(s, \"B\"){<br/>         }<br/>         or the opposite<br/>         if(!topFloor(s, \"B\"){<br/>         }<br/>         to<br/>         if(topFloor(s, \"B\"){<br/>         }<br/>         */</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>topFloor<span class=\"br0\">(</span>s, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//B is on Top Floor</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bottomFloor<span class=\"br0\">(</span>s, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//C is on Bottom Floor</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>topFloor<span class=\"br0\">(</span>s, <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> bottomFloor<span class=\"br0\">(</span>s, <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">// F is on top or bottom floor</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>livesAbove<span class=\"br0\">(</span>s, <span class=\"st0\">\"M\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">// M does not live above C</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>adjacent<span class=\"br0\">(</span>s, <span class=\"st0\">\"S\"</span>, <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//S lives adjacent to F</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>adjacent<span class=\"br0\">(</span>s, <span class=\"st0\">\"F\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//F does not live adjacent to C </span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> set <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        generatePermutations<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"F\"</span>, <span class=\"st0\">\"M\"</span>, <span class=\"st0\">\"S\"</span><span class=\"br0\">}</span>, set, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Generates Permutations</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Iterator<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> iterator <span class=\"sy0\">=</span> set.<span class=\"me1\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> iterator.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//Loops through iterator</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> permutation <span class=\"sy0\">=</span> iterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPossible<span class=\"br0\">(</span>permutation<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//checks to see if permutation is false if so it removes it</span><br/>                iterator.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">:</span> set<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Possible arrangement: \"</span> <span class=\"sy0\">+</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/*<br/>            Prints out possible arranagement...changes depending on what you change in the \"isPossible method\"<br/>             */</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 54, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> concatMap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// range\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> range <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// and\u00a0:: [Bool] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> and <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let i <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// nubBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> nubBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> x <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><br/>            nubBy<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">filter</span><span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>p<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// PROBLEM DECLARATION</span><br/>\u00a0<br/>    <span class=\"kw1\">const</span> floors <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span>  concatMap<span class=\"br0\">(</span>b <span class=\"sy0\">=&gt;</span><br/>            concatMap<span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span><br/>            concatMap<span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span><br/>            concatMap<span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span><br/>            concatMap<span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span><br/>                and<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"co1\">// CONDITIONS</span><br/>                    nubBy<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> b<span class=\"sy0\">,</span> <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> s<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// all floors singly occupied</span><br/>                    .<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span><br/>                    b <span class=\"sy0\">!==</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> c <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> f <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> f <span class=\"sy0\">!==</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span><br/>                    m <span class=\"sy0\">&gt;</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> f<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> f<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>                <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><br/>                    Baker<span class=\"sy0\">:</span> b<span class=\"sy0\">,</span><br/>                    Cooper<span class=\"sy0\">:</span> c<span class=\"sy0\">,</span><br/>                    Fletcher<span class=\"sy0\">:</span> f<span class=\"sy0\">,</span><br/>                    Miller<span class=\"sy0\">:</span> m<span class=\"sy0\">,</span><br/>                    Smith<span class=\"sy0\">:</span> s<br/>                <span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                floors<span class=\"br0\">)</span><span class=\"sy0\">,</span> floors<span class=\"br0\">)</span><span class=\"sy0\">,</span> floors<span class=\"br0\">)</span><span class=\"sy0\">,</span> floors<span class=\"br0\">)</span><span class=\"sy0\">,</span> floors<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// --&gt; [{\"Baker\":3, \"Cooper\":2, \"Fletcher\":4, \"Miller\":5, \"Smith\":1}]</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># Input: an array representing the apartment house, with null at a<br/>#    particular position signifying that the identity of the occupant<br/>#    there has not yet been determined.<br/># Output: an elaboration of the input array but including person, and<br/>#   satisfying cond, where . in cond refers to the placement of person<br/>def resides(person; cond):<br/>  range(0;5) as $n<br/>  | if (.[$n] == null or .[$n] == person) and ($n|cond) then .[$n] = person<br/>    else empty   # no elaboration is possible<br/>    end\u00a0;<br/>\u00a0<br/># English:<br/>def top: 4;<br/>def bottom: 0;<br/>def higher(j): . &gt; j;<br/>def adjacent(j): (. - j) | (. == 1 or . == -1);</pre>"}, {"lang": "Julia", "loc": 23, "block": "<pre class=\"text highlighted_source\">using Combinatorics<br/>\u00a0<br/>function solve(n::Vector{&lt;:AbstractString}, pred::Vector{&lt;:Function})<br/>    rst = Vector{typeof(n)}(0)<br/>    for candidate in permutations(n)<br/>        if all(p(candidate) for p in predicates)<br/>            push!(rst, candidate)<br/>        end<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>Names = [\"Baker\", \"Cooper\", \"Fletcher\", \"Miller\", \"Smith\"]<br/>predicates = [<br/>    (s) -&gt; last(s)\u00a0!= \"Baker\",<br/>    (s) -&gt; first(s)\u00a0!= \"Cooper\",<br/>    (s) -&gt; first(s)\u00a0!= \"Fletcher\" &amp;&amp; last(s)\u00a0!= \"Fletcher\",<br/>    (s) -&gt; findfirst(s, \"Miller\") &gt; findfirst(s, \"Cooper\"),<br/>    (s) -&gt; abs(findfirst(s, \"Smith\") - findfirst(s, \"Fletcher\"))\u00a0!= 1,<br/>    (s) -&gt; abs(findfirst(s, \"Cooper\") - findfirst(s, \"Fletcher\"))\u00a0!= 1]<br/>\u00a0<br/>solutions = solve(Names, predicates)<br/>foreach(x -&gt; println(join(x, \", \")), solutions)</pre>"}, {"lang": "K", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>perm: {<a class=\"__cf_email__\" data-cfemail=\"f28ab29f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@&amp;n=(#?:)'m:!n#n:#x}<br/>filter: {y[&amp; x'y]}<br/>reject: {y[&amp; ~x'y]}<br/>adjacent: {1 = _abs (z?x) - (z?y)}<br/>\u00a0<br/>p: perm[`Baker `Cooper `Fletcher `Miller `Smith]<br/>p: reject[{`Cooper=x[0]}; p]<br/>p: reject[{`Baker=x[4]}; p]<br/>p: filter[{(x\u00a0? `Miller) &gt; (x\u00a0? `Cooper)}; p]<br/>p: reject[{adjacent[`Smith; `Fletcher; x]}; p]<br/>p: reject[{adjacent[`Cooper; `Fletcher; x]}; p]<br/>p: reject[{(x\u00a0? `Fletcher)_in (0 4)}; p]<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 50, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Predicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Boolean<br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> permute<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> listOf<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toInsert <span class=\"sy0\">=</span> input<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>perm in permute<span class=\"br0\">(</span>input.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">perm</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newPerm <span class=\"sy0\">=</span> perm.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            newPerm.<span class=\"me1\">add</span><span class=\"br0\">(</span>i, toInsert<span class=\"br0\">)</span><br/>            perms.<span class=\"me1\">add</span><span class=\"br0\">(</span>newPerm<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> perms<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* looks for for all possible solutions, not just the first */</span><br/>fun dinesman<span class=\"br0\">(</span>occupants<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, predicates<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Predicate<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    permute<span class=\"br0\">(</span>occupants<span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> perm -<span class=\"sy0\">&gt;</span> predicates.<span class=\"me1\">all</span> <span class=\"br0\">{</span> pred -<span class=\"sy0\">&gt;</span> pred<span class=\"br0\">(</span>perm<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> occupants <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Baker\"</span>, <span class=\"st0\">\"Cooper\"</span>, <span class=\"st0\">\"Fletcher\"</span>, <span class=\"st0\">\"Miller\"</span>, <span class=\"st0\">\"Smith\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> predicates <span class=\"sy0\">=</span> listOf<span class=\"sy0\">&lt;</span>Predicate<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><br/>        <span class=\"br0\">{</span> it.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"Baker\"</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> it.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"Cooper\"</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> it.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"Fletcher\"</span> <span class=\"sy0\">&amp;&amp;</span> it.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"Fletcher\"</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Miller\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Cooper\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Smith\"</span><span class=\"br0\">)</span> - it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Fletcher\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Fletcher\"</span><span class=\"br0\">)</span> - it.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"Cooper\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solutions <span class=\"sy0\">=</span> dinesman<span class=\"br0\">(</span>occupants, predicates<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> solutions.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>size <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"No solutions found\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> plural <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>size <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"s\"</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$size solution$plural found, namely:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>solution in solutions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, name<span class=\"br0\">)</span> in solution.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"Floor ${i + 1} -&gt; $name\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 63, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> wrap<span class=\"sy0\">,</span> yield <span class=\"sy0\">=</span> <span class=\"kw3\">coroutine.wrap</span><span class=\"sy0\">,</span> <span class=\"kw3\">coroutine.yield</span><br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> perm<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n <span class=\"kw1\">do</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>i <span class=\"kw1\">end</span>    <br/>  <span class=\"kw1\">return</span> wrap<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> swap<span class=\"br0\">(</span>m<span class=\"br0\">)</span>      <br/>      <span class=\"kw1\">if</span> m<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span>  <br/>        yield<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span>m<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>          r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>r<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">=</span>r<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">,</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>          swap<span class=\"br0\">(</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>r<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">=</span>r<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">,</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span>    <br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    swap<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> iden<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"kw1\">return</span> <span class=\"sy0\">...</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> imap<span class=\"br0\">(</span>t<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> r<span class=\"sy0\">,</span>fn <span class=\"sy0\">=</span> <span class=\"br0\">{</span>m<span class=\"sy0\">=</span>imap<span class=\"sy0\">,</span> c<span class=\"sy0\">=</span><span class=\"kw3\">table.concat</span><span class=\"sy0\">,</span> u<span class=\"sy0\">=</span><span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> f <span class=\"kw2\">or</span> iden<br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>t <span class=\"kw1\">do</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>fn<span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> tenants <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'Baker'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Cooper'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Fletcher'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Miller'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Smith'</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">local</span> conds <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">'Baker  ~= TOP'</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">'Cooper ~= BOTTOM'</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">'Fletcher ~= TOP and Fletcher~= BOTTOM'</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">'Miller &gt; Cooper'</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">'Smith + 1 ~= Fletcher and Smith - 1 ~= Fletcher'</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">'Cooper + 1 ~= Fletcher and Cooper - 1 ~= Fletcher'</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> makePredicate<span class=\"br0\">(</span>conds<span class=\"sy0\">,</span> tenants<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> load<span class=\"br0\">(</span><span class=\"st0\">'return function('</span><span class=\"sy0\">..</span>imap<span class=\"br0\">(</span>tenants<span class=\"br0\">)</span><span class=\"sy0\">:</span>c<span class=\"st0\">','</span><span class=\"sy0\">..</span><br/>    <span class=\"st0\">') return '</span> <span class=\"sy0\">..</span><br/>    imap<span class=\"br0\">(</span>conds<span class=\"sy0\">,</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"(%s)\"</span><span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>c<span class=\"st0\">\"and \"</span><span class=\"sy0\">..</span><br/>    <span class=\"st0\">\" end \"</span><span class=\"sy0\">,</span><span class=\"st0\">'-'</span><span class=\"sy0\">,</span><span class=\"kw4\">nil</span><span class=\"sy0\">,</span><span class=\"br0\">{</span>TOP<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> BOTTOM<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> solve <span class=\"br0\">(</span>conds<span class=\"sy0\">,</span> tenants<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> try<span class=\"sy0\">,</span> pred<span class=\"sy0\">,</span> upk <span class=\"sy0\">=</span> perm<span class=\"br0\">(</span><span class=\"sy0\">#</span>tenants<span class=\"br0\">)</span><span class=\"sy0\">,</span> makePredicate<span class=\"br0\">(</span>conds<span class=\"sy0\">,</span> tenants<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><br/>  <span class=\"kw1\">local</span> answer <span class=\"sy0\">=</span> try<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> answer <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> pred<span class=\"br0\">(</span>upk<span class=\"br0\">(</span>answer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> answer <span class=\"sy0\">=</span> try<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><br/>  <span class=\"kw1\">if</span> answer <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">local</span> <span class=\"kw3\">floor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span> imap<span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>person<span class=\"br0\">)</span> <br/>        <span class=\"kw3\">floor</span><span class=\"sy0\">=</span><span class=\"kw3\">floor</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>        <span class=\"kw1\">return</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s lives on floor\u00a0%d\"</span><span class=\"sy0\">,</span>tenants<span class=\"br0\">[</span><span class=\"kw3\">floor</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>person<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>c<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">nil</span><span class=\"sy0\">,</span> <span class=\"st0\">'no solution'</span><br/>  <span class=\"kw1\">end</span>  <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>solve <span class=\"br0\">(</span>conds<span class=\"sy0\">,</span> tenants<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>{Baker, Cooper, Fletcher, Miller, Smith}; <br/>(Unequal @@\u00a0%) &amp;&amp; (And @@ (0 &lt; # &lt; 6 &amp; /@\u00a0%)) &amp;&amp; <br/>  Baker &lt; 5 &amp;&amp;<br/>  Cooper &gt; 1 &amp;&amp;<br/>  1 &lt; Fletcher &lt; 5 &amp;&amp;<br/>  Miller &gt; Cooper &amp;&amp;<br/>  Abs[Smith - Fletcher] &gt; 1 &amp;&amp;<br/>  Abs[Cooper - Fletcher] &gt; 1 //<br/> Reduce[#,\u00a0%, Integers] &amp;<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 55, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>state say<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"nu0\">1.33</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>pairmap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Algorithm<span class=\"sy0\">::</span><span class=\"me2\">Permute</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>permute<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">our</span> <span class=\"re0\">%predicates</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/><span class=\"co1\">#                       | object    | sprintf format for Perl expression |</span><br/><span class=\"co1\">#   --------------------+-----------+------------------------------------+</span><br/>    <span class=\"st_h\">'on bottom'</span>      <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">''</span>        <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] == 1'</span>                      <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'on top'</span>         <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">''</span>        <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] == @f'</span>                     <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'lower than'</span>     <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'person'</span>  <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] &lt; $f[%s]'</span>                  <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'higher than'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'person'</span>  <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] &gt; $f[%s]'</span>                  <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'directly below'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'person'</span>  <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] == $f[%s] - 1'</span>             <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'directly above'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'person'</span>  <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] == $f[%s] + 1'</span>             <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'adjacent to'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'person'</span>  <span class=\"sy0\">,</span> <span class=\"st_h\">'abs($f[%s] - $f[%s]) == 1'</span>        <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'on'</span>             <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"st_h\">'ordinal'</span> <span class=\"sy0\">,</span> <span class=\"st_h\">'$f[%s] == <span class=\"es_h\">\\'</span>%s<span class=\"es_h\">\\'</span>'</span>                 <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">our</span> <span class=\"re0\">%nouns</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"st_h\">'person'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"co2\">qr/[a-z]+/i</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'ordinal'</span> <span class=\"sy0\">=&gt;</span> <span class=\"co2\">qr/1st | 2nd | 3rd | \\d+th/x</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> parse_and_solve <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@facts</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    state <span class=\"re0\">$parser</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qr.html\"><span class=\"kw3\">qr</span></a><span class=\"sy0\">/^</span><span class=\"br0\">(</span><span class=\"sy0\">?</span><span class=\"re4\">&lt;subj&gt;</span><span class=\"re0\">$nouns</span><span class=\"br0\">{</span>person<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">?</span><span class=\"re4\">&lt;not&gt;</span><span class=\"kw1\">not</span> <span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"br0\">(</span><span class=\"sy0\">?|@</span><span class=\"br0\">{</span><span class=\"br0\">[</span><br/>                            <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">'|'</span><span class=\"sy0\">,</span> pairmap <span class=\"br0\">{</span><br/>                                <span class=\"st0\">\"(?&lt;pred&gt;$a)\"</span> <span class=\"sy0\">.</span><br/>                                <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" (?&lt;obj&gt;$nouns{$b-&gt;[0]})\"</span> <span class=\"sy0\">:</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">}</span> <span class=\"re0\">%predicates</span><br/>                        <span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"co5\">$/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@expressions</span><span class=\"sy0\">,</span> <span class=\"re0\">%ids</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$id</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"re0\">$ids</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">@facts</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co2\">/$parser/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Cannot parse '$_'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$pred</span> <span class=\"sy0\">=</span> <span class=\"re0\">$predicates</span><span class=\"br0\">{</span><span class=\"co5\">$+</span><span class=\"br0\">{</span>pred<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$expr</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'('</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"re0\">$pred</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$id</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">$+</span><span class=\"br0\">{</span>subj<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         <span class=\"re0\">$pred</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'person'</span> <span class=\"sy0\">?</span> <span class=\"re0\">$id</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">$+</span><span class=\"br0\">{</span>obj<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"co5\">$+</span><span class=\"br0\">{</span>obj<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"st_h\">')'</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$expr</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'!'</span> <span class=\"sy0\">.</span> <span class=\"re0\">$expr</span> <span class=\"kw1\">if</span> <span class=\"co5\">$+</span><span class=\"br0\">{</span><span class=\"kw1\">not</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@expressions</span><span class=\"sy0\">,</span> <span class=\"re0\">$expr</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@f</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"st_h\">'no warnings \"numeric\";<br/>          permute {<br/>              say join(\", \", pairmap { \"$f[$b] $a\" }\u00a0%ids)<br/>                  if ('</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' &amp;&amp; '</span><span class=\"sy0\">,</span> <span class=\"re0\">@expressions</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st_h\">');<br/>          } @f;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 42, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> parse_and_solve <span class=\"br0\">(</span><span class=\"re0\">$text</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%ids</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$expr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">grammar</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">state</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">rule</span> TOP <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>fact<span class=\"sy0\">&gt;+</span> <span class=\"br0\">{</span> make <span class=\"kw3\">join</span> <span class=\"st_h\">' &amp;&amp; '</span><span class=\"sy0\">,</span> <span class=\"re0\">$&lt;fact</span><span class=\"sy0\">&gt;&gt;&gt;.</span><span class=\"me1\">made</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">rule</span> fact <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"sy0\">&lt;</span>position<span class=\"sy0\">&gt;</span><br/>                    <span class=\"br0\">{</span> make <span class=\"kw3\">sprintf</span> <span class=\"re0\">$&lt;position</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">made</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"co3\">$0</span> <span class=\"sy0\">??</span>  <span class=\"st0\">\"!(%s)\"</span> <span class=\"sy0\">!!</span> <span class=\"st0\">\"%s\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                   <span class=\"re0\">$&lt;name</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">made</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">rule</span> position <span class=\"br0\">{</span><br/>            <span class=\"sy0\">||</span> on bottom             <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == 1\"</span>                            <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> on top                <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == +<span class=\"es0\">\\@</span>f\"</span>                         <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> lower than <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span>     <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] &lt; <span class=\"es0\">\\@</span>f[{$&lt;name&gt;.made}]\"</span>           <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> higher than <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span>    <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] &gt; <span class=\"es0\">\\@</span>f[{$&lt;name&gt;.made}]\"</span>           <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> directly below <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == <span class=\"es0\">\\@</span>f[{$&lt;name&gt;.made}] - 1\"</span>      <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> directly above <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == <span class=\"es0\">\\@</span>f[{$&lt;name&gt;.made}] + 1\"</span>      <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> adjacent to <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span>    <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == <span class=\"es0\">\\@</span>f[{$&lt;name&gt;.made}] + (-1|1)\"</span> <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> on <span class=\"sy0\">&lt;</span>ordinal<span class=\"sy0\">&gt;</span>          <span class=\"br0\">{</span> make <span class=\"st0\">\"<span class=\"es0\">\\@</span>f[%s] == {$&lt;ordinal&gt;.made}\"</span>            <span class=\"br0\">}</span><br/>            <span class=\"sy0\">||</span> <span class=\"br0\">{</span> note <span class=\"st0\">\"Failed to parse line \"</span> <span class=\"sy0\">~</span> <span class=\"sy0\">+</span>$<span class=\"sy0\">/.</span><span class=\"me1\">prematch</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/^^/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> exit <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">token</span> name    <span class=\"br0\">{</span> <span class=\"sy0\">:</span><span class=\"kw3\">i</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">[</span>a<span class=\"sy0\">..</span><span class=\"me1\">z</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;+</span>              <span class=\"br0\">{</span> make <span class=\"re0\">%ids</span><span class=\"br0\">{</span><span class=\"sy0\">~</span>$<span class=\"sy0\">/</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"re0\">$c</span><span class=\"sy0\">++</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> ordinal <span class=\"br0\">{</span> <span class=\"br0\">[</span>1st <span class=\"sy0\">|</span> 2nd <span class=\"sy0\">|</span> 3rd <span class=\"sy0\">|</span> \\d<span class=\"sy0\">+</span>th<span class=\"br0\">]</span> <span class=\"br0\">{</span> make <span class=\"sy0\">+</span>$<span class=\"sy0\">/.</span><span class=\"kw3\">match</span><span class=\"br0\">(</span><span class=\"co2\">/(\\d+)/</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>     <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"re0\">$text</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">made</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    EVAL <span class=\"st_h\">'for [1..%ids.elems].permutations -&gt; @f {<br/>              say\u00a0%ids.kv.map({ \"$^<a class=\"__cf_email__\" data-cfemail=\"b3d28ef3d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[$^b]\" }) if ('</span> <span class=\"sy0\">~</span> <span class=\"re0\">$expr</span> <span class=\"sy0\">~</span> <span class=\"st_h\">');<br/>          }'</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>parse_and_solve Q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    Baker <span class=\"kw1\">not</span> on top<br/>    Cooper <span class=\"kw1\">not</span> on bottom<br/>    Fletcher <span class=\"kw1\">not</span> on top<br/>    Fletcher <span class=\"kw1\">not</span> on bottom<br/>    Miller higher than Cooper<br/>    Smith <span class=\"kw1\">not</span> adjacent to Fletcher<br/>    Fletcher <span class=\"kw1\">not</span> adjacent to Cooper<br/>    <span class=\"kw2\">END</span></pre>"}, {"lang": "Phix", "loc": 19, "block": "<pre class=\"text highlighted_source\">enum Baker, Cooper, Fletcher, Miller, Smith<br/>constant names={\"Baker\",\"Cooper\",\"Fletcher\",\"Miller\",\"Smith\"}<br/>\u00a0<br/>procedure test(sequence flats)<br/>    if flats[Baker]!=5<br/>    and flats[Cooper]!=1<br/>    and not find(flats[Fletcher],{1,5})<br/>    and flats[Miller]&gt;flats[Cooper]<br/>    and abs(flats[Smith]-flats[Fletcher])!=1<br/>    and abs(flats[Fletcher]-flats[Cooper])!=1 then<br/>        for i=1 to 5 do<br/>           \u00a0?{names[i],flats[i]}<br/>        end for<br/>    end if<br/>end procedure<br/>\u00a0<br/>for i=1 to factorial(5) do<br/>    test(permute(i,tagset(5)))<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 27, "block": "<pre class=\"text highlighted_source\"># Problem statement<br/>(be dwelling (@Tenants)<br/>   (permute (Baker Cooper Fletcher Miller Smith) @Tenants)<br/>   (not (topFloor Baker @Tenants))<br/>   (not (bottomFloor Cooper @Tenants))<br/>   (not (or ((topFloor Fletcher @Tenants)) ((bottomFloor Fletcher @Tenants))))<br/>   (higherFloor Miller Cooper @Tenants)<br/>   (not (adjacentFloor Smith Fletcher @Tenants))<br/>   (not (adjacentFloor Fletcher Cooper @Tenants)) )<br/>\u00a0<br/># Utility rules<br/>(be topFloor (@Tenant @Lst)<br/>   (equal (@ @ @ @ @Tenant) @Lst) )<br/>\u00a0<br/>(be bottomFloor (@Tenant @Lst)<br/>   (equal (@Tenant @ @ @ @) @Lst) )<br/>\u00a0<br/>(be higherFloor (@Tenant1 @Tenant2 @Lst)<br/>   (append @ @Rest @Lst)<br/>   (equal (@Tenant2 . @Higher) @Rest)<br/>   (member @Tenant1 @Higher) )<br/>\u00a0<br/>(be adjacentFloor (@Tenant1 @Tenant2 @Lst)<br/>   (append @ @Rest @Lst)<br/>   (or<br/>      ((equal (@Tenant1 @Tenant2 . @) @Rest))<br/>      ((equal (@Tenant2 @Tenant1 . @) @Rest)) ) )</pre>"}, {"lang": "PowerShell", "loc": 70, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\"># Floors are numbered 1 (ground) to 5 (top)</span><br/>\u00a0<br/><span class=\"co1\"># Baker, Cooper, Fletcher, Miller, and Smith live on different floors:</span><br/><span class=\"re0\">$statement1</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$baker  -ne $cooper -and $baker    -ne $fletcher -and $baker    -ne $miller -and<br/>               $baker  -ne $smith  -and $cooper   -ne $fletcher -and $cooper   -ne $miller -and<br/>               $cooper -ne $smith  -and $fletcher -ne $miller   -and $fletcher -ne $smith  -and<br/>               $miller -ne $smith'</span><br/>\u00a0<br/><span class=\"co1\"># Baker does not live on the top floor:</span><br/><span class=\"re0\">$statement2</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$baker -ne 5'</span><br/>\u00a0<br/><span class=\"co1\"># Cooper does not live on the bottom floor:</span><br/><span class=\"re0\">$statement3</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$cooper -ne 1'</span><br/>\u00a0<br/><span class=\"co1\"># Fletcher does not live on either the top or the bottom floor:</span><br/><span class=\"re0\">$statement4</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$fletcher -ne 1 -and $fletcher -ne 5'</span><br/>\u00a0<br/><span class=\"co1\"># Miller lives on a higher floor than does Cooper:</span><br/><span class=\"re0\">$statement5</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$miller -gt $cooper'</span><br/>\u00a0<br/><span class=\"co1\"># Smith does not live on a floor adjacent to Fletcher's:</span><br/><span class=\"re0\">$statement6</span> <span class=\"sy0\">=</span> <span class=\"st0\">'[Math]::Abs($smith - $fletcher) -ne 1'</span><br/>\u00a0<br/><span class=\"co1\"># Fletcher does not live on a floor adjacent to Cooper's:</span><br/><span class=\"re0\">$statement7</span> <span class=\"sy0\">=</span> <span class=\"st0\">'[Math]::Abs($fletcher - $cooper) -ne 1'</span><br/>\u00a0<br/><span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$baker</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$baker</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">6</span>; <span class=\"re0\">$baker</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$cooper</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$cooper</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">6</span>; <span class=\"re0\">$cooper</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$fletcher</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$fletcher</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">6</span>; <span class=\"re0\">$fletcher</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span> <br/>            <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$miller</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$miller</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">6</span>; <span class=\"re0\">$miller</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span> <br/>                <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$smith</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$smith</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">6</span>; <span class=\"re0\">$smith</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span> <br/>                    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement2</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement3</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement5</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">{</span><br/>                                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement4</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">{</span><br/>                                    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement6</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">{</span><br/>                                        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement7</span><span class=\"br0\">)</span><br/>                                        <span class=\"br0\">{</span><br/>                                            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$statement1</span><span class=\"br0\">)</span><br/>                                            <span class=\"br0\">{</span><br/>                                                <span class=\"re0\">$multipleDwellings</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                                <span class=\"re0\">$multipleDwellings</span><span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Baker\"</span>  \u00a0; Floor <span class=\"sy0\">=</span> <span class=\"re0\">$baker</span><span class=\"br0\">}</span><br/>                                                <span class=\"re0\">$multipleDwellings</span><span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Cooper\"</span> \u00a0; Floor <span class=\"sy0\">=</span> <span class=\"re0\">$cooper</span><span class=\"br0\">}</span><br/>                                                <span class=\"re0\">$multipleDwellings</span><span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Fletcher\"</span>; Floor <span class=\"sy0\">=</span> <span class=\"re0\">$fletcher</span><span class=\"br0\">}</span><br/>                                                <span class=\"re0\">$multipleDwellings</span><span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Miller\"</span> \u00a0; Floor <span class=\"sy0\">=</span> <span class=\"re0\">$miller</span><span class=\"br0\">}</span><br/>                                                <span class=\"re0\">$multipleDwellings</span><span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Smith\"</span>  \u00a0; Floor <span class=\"sy0\">=</span> <span class=\"re0\">$smith</span><span class=\"br0\">}</span><br/>                                            <span class=\"br0\">}</span><br/>                                        <span class=\"br0\">}</span><br/>                                    <span class=\"br0\">}</span><br/>                                <span class=\"br0\">}</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 83, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> top<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> bottom<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Baker does not live on the top floor</span><br/>rule1<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>baker<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\ttop<span class=\"br0\">(</span>Top<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tF #\\<span class=\"sy6\">=</span> Top<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Cooper does not live on the bottom floor.</span><br/>rule2<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>cooper<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tbottom<span class=\"br0\">(</span>Bottom<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tF #\\<span class=\"sy6\">=</span> Bottom<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Fletcher does not live on either the top or the bottom floor.</span><br/>rule3<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>fletcher<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\ttop<span class=\"br0\">(</span>Top<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tbottom<span class=\"br0\">(</span>Bottom<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tF #\\<span class=\"sy6\">=</span> Top<span class=\"sy4\">,</span><br/>\tF #\\<span class=\"sy6\">=</span> Bottom<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Miller lives on a higher floor than does Cooper.</span><br/>rule4<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>miller<span class=\"sy4\">,</span> Fm<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>cooper<span class=\"sy4\">,</span> Fc<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tFm #<span class=\"sy6\">&gt;</span> Fc<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Smith does not live on a floor adjacent to Fletcher's.</span><br/>rule5<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>smith<span class=\"sy4\">,</span> Fs<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>fletcher<span class=\"sy4\">,</span> Ff<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>Fs<span class=\"sy3\">-</span>Ff<span class=\"br0\">)</span> #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Fletcher does not live on a floor adjacent to Cooper's.</span><br/>rule6<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>cooper<span class=\"sy4\">,</span> Fc<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">(</span>fletcher<span class=\"sy4\">,</span> Ff<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>Fc<span class=\"sy3\">-</span>Ff<span class=\"br0\">)</span> #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% we need to define top and bottom</span><br/>\tassert<span class=\"br0\">(</span>bottom<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Top<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>top<span class=\"br0\">(</span>Top<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we say that they are all in differents floors</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span>F<span class=\"sy4\">,</span> X^member<span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tLF ins <span class=\"nu0\">1</span><span class=\"sy4\">..</span>Top<span class=\"sy4\">,</span><br/>\tall_different<span class=\"br0\">(</span>LF<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Baker does not live on the top floor</span><br/>\trule1<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Cooper does not live on the bottom floor.</span><br/>\trule2<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Fletcher does not live on either the top or the bottom floor.</span><br/>\trule3<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Miller lives on a higher floor than does Cooper.</span><br/>\trule4<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Smith does not live on a floor adjacent to Fletcher's.</span><br/>\trule5<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% Fletcher does not live on a floor adjacent to Cooper's.</span><br/>\trule6<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>solve<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span>F<span class=\"sy4\">,</span> X^member<span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlabel<span class=\"br0\">(</span>LF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>dinners <span class=\"sy1\">:-</span><br/>\tretractall<span class=\"br0\">(</span>top<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> retractall<span class=\"br0\">(</span>bottom<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>baker<span class=\"sy4\">,</span> _Fb<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>cooper<span class=\"sy4\">,</span> _Fc<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>fletcher<span class=\"sy4\">,</span> _Ff<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>miller<span class=\"sy4\">,</span> _Fm<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>smith<span class=\"sy4\">,</span> _Fs<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tinit<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsolve<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 100, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Prototype</span> cond<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Enumeration</span> #Null<br/>  #Baker<br/>  #Cooper<br/>  #Fletcher<br/>  #Miller<br/>  #Smith <br/><span class=\"kw1\">EndEnumeration</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> checkTenands<span class=\"br0\">(</span>Array tenants<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array Condions.cond<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j<br/>  <span class=\"kw1\">Protected</span>.cond <span class=\"sy0\">*</span>f <br/>  j<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>Condions<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> j<br/>    <span class=\"sy0\">*</span>f<span class=\"sy0\">=</span>Condions<span class=\"br0\">(</span>i<span class=\"br0\">)</span>              <span class=\"co1\">; load the function pointer to the current condition</span><br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>f<span class=\"br0\">(</span>tenants<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">ProcedureReturn</span>  #False<br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C1<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Abs</span><span class=\"br0\">(</span>t<span class=\"br0\">(</span>#Fletcher<span class=\"br0\">)</span><span class=\"sy0\">-</span>t<span class=\"br0\">(</span>#Cooper<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C2<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> t<span class=\"br0\">(</span>#Baker<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">5</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C3<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> t<span class=\"br0\">(</span>#Cooper<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C4<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> t<span class=\"br0\">(</span>#Miller<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> t<span class=\"br0\">(</span>#Cooper<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C5<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> t<span class=\"br0\">(</span>#Fletcher<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> t<span class=\"br0\">(</span>#Fletcher<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">5</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> C6<span class=\"br0\">(</span>Array t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Abs</span><span class=\"br0\">(</span>t<span class=\"br0\">(</span>#Smith<span class=\"br0\">)</span><span class=\"sy0\">-</span>t<span class=\"br0\">(</span>#Fletcher<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> People<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> Conditions<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> a, b, c, d, e, i<br/>  <span class=\"co1\">;</span><br/>  <span class=\"co1\">;- Load all conditions</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C1<span class=\"br0\">(</span><span class=\"br0\">)</span>: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C2<span class=\"br0\">(</span><span class=\"br0\">)</span>: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C3<span class=\"br0\">(</span><span class=\"br0\">)</span>: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C4<span class=\"br0\">(</span><span class=\"br0\">)</span>: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C5<span class=\"br0\">(</span><span class=\"br0\">)</span>: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  Conditions<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>@C6<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"co1\">; generate and the all legal combinations</span><br/>  <span class=\"kw1\">For</span> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">For</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>      <span class=\"kw1\">If</span> a<span class=\"sy0\">=</span>b: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">For</span> c<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>        <span class=\"kw1\">If</span> a<span class=\"sy0\">=</span>c <span class=\"kw1\">Or</span> b<span class=\"sy0\">=</span>c: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">For</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>          <span class=\"kw1\">If</span> d<span class=\"sy0\">=</span>a <span class=\"kw1\">Or</span> d<span class=\"sy0\">=</span>b <span class=\"kw1\">Or</span> d<span class=\"sy0\">=</span>c\u00a0: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>          <span class=\"kw1\">For</span> e<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span> <br/>            <span class=\"kw1\">If</span> e<span class=\"sy0\">=</span>a <span class=\"kw1\">Or</span> e<span class=\"sy0\">=</span>b <span class=\"kw1\">Or</span> e<span class=\"sy0\">=</span>c <span class=\"kw1\">Or</span> e<span class=\"sy0\">=</span>d: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>            People<span class=\"br0\">(</span>#Baker<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<br/>            People<span class=\"br0\">(</span>#Cooper<span class=\"br0\">)</span><span class=\"sy0\">=</span>b<br/>            People<span class=\"br0\">(</span>#Fletcher<span class=\"br0\">)</span><span class=\"sy0\">=</span>c<br/>            People<span class=\"br0\">(</span>#Miller<span class=\"br0\">)</span><span class=\"sy0\">=</span>d<br/>            People<span class=\"br0\">(</span>#Smith<span class=\"br0\">)</span><span class=\"sy0\">=</span>e<br/>            <span class=\"kw1\">If</span> checkTenands<span class=\"br0\">(</span>People<span class=\"br0\">(</span><span class=\"br0\">)</span>, Conditions<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Solution found;\"</span><span class=\"br0\">)</span><br/>              <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Baker=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Cooper=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Fletcher=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Miller=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Smith=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"br0\">)</span> <br/>            <span class=\"kw1\">EndIf</span><br/>          <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 132, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">re</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/>\u00a0<br/>problem_re <span class=\"sy0\">=</span> <span class=\"kw3\">re</span>.<span class=\"kw2\">compile</span><span class=\"br0\">(</span>r<span class=\"st0\">\"\"\"(?msx)(?:<br/>\u00a0<br/># Multiple names of form n1, n2, n3, ... , and nK<br/>(?P&lt;namelist&gt; [a-zA-Z]+ (?: , <span class=\"es0\">\\s</span>+ [a-zA-Z]+)* (?: ,? <span class=\"es0\">\\s</span>+ and) <span class=\"es0\">\\s</span>+ [a-zA-Z]+ )<br/>\u00a0<br/># Flexible floor count (2 to 10 floors)<br/>| (?:  .* house <span class=\"es0\">\\s</span>+ that <span class=\"es0\">\\s</span>+ contains <span class=\"es0\">\\s</span>+ only <span class=\"es0\">\\s</span>+<br/>  (?P&lt;floorcount&gt; two|three|four|five|six|seven|eight|nine|ten ) <span class=\"es0\">\\s</span>+ floors <span class=\"es0\">\\s</span>* <span class=\"es0\">\\.</span>)<br/>\u00a0<br/># Constraint: \"does not live on the n'th floor\" <br/>|(?: (?P&lt;not_live&gt;  <span class=\"es0\">\\b</span> [a-zA-Z]+ <span class=\"es0\">\\s</span>+ does <span class=\"es0\">\\s</span>+ not <span class=\"es0\">\\s</span>+ live <span class=\"es0\">\\s</span>+ on <span class=\"es0\">\\s</span>+ the <span class=\"es0\">\\s</span>+<br/>  (?: top|bottom|first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth) <span class=\"es0\">\\s</span>+ floor <span class=\"es0\">\\s</span>* <span class=\"es0\">\\.</span> ))<br/>\u00a0<br/># Constraint: \"does not live on either the I'th or the J'th [ or the K'th ...] floor<br/>|(?P&lt;not_either&gt; <span class=\"es0\">\\b</span> [a-zA-Z]+ <span class=\"es0\">\\s</span>+ does <span class=\"es0\">\\s</span>+ not <span class=\"es0\">\\s</span>+ live <span class=\"es0\">\\s</span>+ on <span class=\"es0\">\\s</span>+ either<br/>  (?: <span class=\"es0\">\\s</span>+ (?: or <span class=\"es0\">\\s</span>+)? the <span class=\"es0\">\\s</span>+       <br/>    (?: top|bottom|first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth))+ <span class=\"es0\">\\s</span>+ floor <span class=\"es0\">\\s</span>* <span class=\"es0\">\\.</span> )<br/>\u00a0<br/># Constraint: \"P1 lives on a higher/lower floor than P2 does\"<br/>|(?P&lt;hi_lower&gt; <span class=\"es0\">\\b</span>  [a-zA-Z]+ <span class=\"es0\">\\s</span>+ lives <span class=\"es0\">\\s</span>+ on <span class=\"es0\">\\s</span>+ a <span class=\"es0\">\\s</span> (?: higher|lower)<br/>   <span class=\"es0\">\\s</span>+ floor <span class=\"es0\">\\s</span>+ than (?: <span class=\"es0\">\\s</span>+ does)  <span class=\"es0\">\\s</span>+  [a-zA-Z]+ <span class=\"es0\">\\s</span>* <span class=\"es0\">\\.</span> )<br/>\u00a0<br/># Constraint: \"P1 does/does not live on a floor adjacent to P2's\"<br/>|(?P&lt;adjacency&gt;  <span class=\"es0\">\\b</span> [a-zA-Z]+ <span class=\"es0\">\\s</span>+ does (?:<span class=\"es0\">\\s</span>+ not)? <span class=\"es0\">\\s</span>+ live <span class=\"es0\">\\s</span>+ on <span class=\"es0\">\\s</span>+ a <span class=\"es0\">\\s</span>+<br/>   floor <span class=\"es0\">\\s</span>+ adjacent <span class=\"es0\">\\s</span>+ to <span class=\"es0\">\\s</span>+  [a-zA-Z]+ (?: 's )? <span class=\"es0\">\\s</span>* <span class=\"es0\">\\.</span> )<br/>\u00a0<br/># Ask for the solution<br/>|(?P&lt;question&gt; Where <span class=\"es0\">\\s</span>+ does <span class=\"es0\">\\s</span>+ everyone <span class=\"es0\">\\s</span>+ live <span class=\"es0\">\\s</span>* <span class=\"es0\">\\?</span>)<br/>\u00a0<br/>)<br/>\"\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>names<span class=\"sy0\">,</span> lennames <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><br/>floors <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>constraint_expr <span class=\"sy0\">=</span> <span class=\"st0\">'len(set(alloc)) == lennames'</span> <span class=\"co1\"># Start with all people on different floors</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_namelist<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" E.g. 'Baker, Cooper, Fletcher, Miller, and Smith'\"</span><br/>    <span class=\"kw1\">global</span> names<span class=\"sy0\">,</span> lennames<br/>    names <span class=\"sy0\">=</span> txt.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' and '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>    lennames <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_floorcount<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" E.g. 'five'\"</span><br/>    <span class=\"kw1\">global</span> floors<br/>    floors <span class=\"sy0\">=</span> <span class=\"st0\">'||two|three|four|five|six|seven|eight|nine|ten'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_not_live<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" E.g. 'Baker does not live on the top floor.'\"</span><br/>    <span class=\"kw1\">global</span> constraint_expr<br/>    t <span class=\"sy0\">=</span> txt.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    who<span class=\"sy0\">,</span> floor <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    w<span class=\"sy0\">,</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>names.<span class=\"me1\">index</span><span class=\"br0\">(</span>who<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">'|first|second|third|fourth|fifth|sixth|'</span> +<br/>             <span class=\"st0\">'seventh|eighth|ninth|tenth|top|bottom|'</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span>floor<span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> f <span class=\"sy0\">==</span> <span class=\"nu0\">11</span>: f <span class=\"sy0\">=</span> floors<br/>    <span class=\"kw1\">if</span> f <span class=\"sy0\">==</span> <span class=\"nu0\">12</span>: f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    constraint_expr +<span class=\"sy0\">=</span> <span class=\"st0\">' and alloc[%i]\u00a0!=\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span>w<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_not_either<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" E.g. 'Fletcher does not live on either the top or the bottom floor.'\"</span><br/>    <span class=\"kw1\">global</span> constraint_expr<br/>    t <span class=\"sy0\">=</span> txt.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' or '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' the '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    who<span class=\"sy0\">,</span> floor <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"nu0\">6</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    w<span class=\"sy0\">,</span> <span class=\"kw3\">fl</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>names.<span class=\"me1\">index</span><span class=\"br0\">(</span>who<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'|first|second|third|fourth|fifth|sixth|'</span> +<br/>               <span class=\"st0\">'seventh|eighth|ninth|tenth|top|bottom|'</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>              <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> floor<span class=\"br0\">]</span><br/>             <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> <span class=\"kw3\">fl</span>:<br/>        <span class=\"kw1\">if</span> f <span class=\"sy0\">==</span> <span class=\"nu0\">11</span>: f <span class=\"sy0\">=</span> floors<br/>        <span class=\"kw1\">if</span> f <span class=\"sy0\">==</span> <span class=\"nu0\">12</span>: f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        constraint_expr +<span class=\"sy0\">=</span> <span class=\"st0\">' and alloc[%i]\u00a0!=\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span>w<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> do_hi_lower<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" E.g. 'Miller lives on a higher floor than does Cooper.'\"</span><br/>    <span class=\"kw1\">global</span> constraint_expr<br/>    t <span class=\"sy0\">=</span> txt.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    name_indices <span class=\"sy0\">=</span> <span class=\"br0\">[</span>names.<span class=\"me1\">index</span><span class=\"br0\">(</span>who<span class=\"br0\">)</span> <span class=\"kw1\">for</span> who <span class=\"kw1\">in</span> <span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"st0\">'lower'</span> <span class=\"kw1\">in</span> t:<br/>        name_indices <span class=\"sy0\">=</span> name_indices<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    constraint_expr +<span class=\"sy0\">=</span> <span class=\"st0\">' and alloc[%i] &gt; alloc[%i]'</span>\u00a0% <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>name_indices<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_adjacency<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">''' E.g. \"Smith does not live on a floor adjacent to Fletcher's.\"'''</span><br/>    <span class=\"kw1\">global</span> constraint_expr<br/>    t <span class=\"sy0\">=</span> txt.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"'s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    name_indices <span class=\"sy0\">=</span> <span class=\"br0\">[</span>names.<span class=\"me1\">index</span><span class=\"br0\">(</span>who<span class=\"br0\">)</span> <span class=\"kw1\">for</span> who <span class=\"kw1\">in</span> <span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    constraint_expr +<span class=\"sy0\">=</span> <span class=\"st0\">' and abs(alloc[%i] - alloc[%i]) &gt; 1'</span>\u00a0% <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>name_indices<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_question<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> constraint_expr<span class=\"sy0\">,</span> names<span class=\"sy0\">,</span> lennames<br/>\u00a0<br/>    exec_txt <span class=\"sy0\">=</span> <span class=\"st0\">'''<br/>for alloc in product(range(1,floors+1), repeat=len(names)):<br/>    if\u00a0%s:<br/>        break<br/>else:<br/>    alloc = None<br/>'''</span>\u00a0% constraint_expr<br/>    <span class=\"kw1\">exec</span><span class=\"br0\">(</span>exec_txt<span class=\"sy0\">,</span> <span class=\"kw2\">globals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">locals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span> <span class=\"kw2\">locals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"st0\">'alloc'</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> a:<br/>        output<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'Floors are numbered from 1 to\u00a0%i inclusive.'</span>\u00a0% floors<span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> a2n <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> names<span class=\"br0\">)</span>:<br/>            output +<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'  Floor\u00a0%i is occupied by\u00a0%s'</span>\u00a0% a2n<span class=\"br0\">]</span><br/>        output.<span class=\"me1\">sort</span><span class=\"br0\">(</span>reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'No solution found.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>handler <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'namelist'</span>: do_namelist<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'floorcount'</span>: do_floorcount<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'not_live'</span>: do_not_live<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'not_either'</span>: do_not_either<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'hi_lower'</span>: do_hi_lower<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'adjacency'</span>: do_adjacency<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'question'</span>: do_question<span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">def</span> parse_and_solve<span class=\"br0\">(</span>problem<span class=\"br0\">)</span>:<br/>    p <span class=\"sy0\">=</span> <span class=\"kw3\">re</span>.<span class=\"me1\">sub</span><span class=\"br0\">(</span>r<span class=\"st0\">'<span class=\"es0\">\\s</span>+'</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> problem<span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> problem_re.<span class=\"me1\">finditer</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>        groupname<span class=\"sy0\">,</span> txt <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span> <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw1\">in</span> x.<span class=\"me1\">groupdict</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> v<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"co1\">#print (\"%r,\u00a0%r\"\u00a0% (groupname, txt))</span><br/>        handler<span class=\"br0\">[</span>groupname<span class=\"br0\">]</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>names = unlist(strsplit(\"baker cooper fletcher miller smith\", \" \"))<br/>\u00a0<br/>test &lt;- function(floors) {<br/>  f &lt;- function(name) which(name == floors)<br/>  if ((f('baker')\u00a0!= 5) &amp;&amp;<br/>      (f('cooper')\u00a0!= 1) &amp;&amp;<br/>      (any(f('fletcher') == 2:4)) &amp;&amp;<br/>      (f('miller') &gt; f('cooper')) &amp;&amp;<br/>      (abs(f('fletcher') - f('cooper')) &gt; 1) &amp;&amp;<br/>      (abs(f('smith') - f('fletcher')) &gt; 1))<br/>    cat(\"\\nFrom bottom to top: --&gt; \", floors, \"\\n\")<br/>}<br/>\u00a0<br/>do.perms &lt;- function(seq, func, built = c()){<br/>  if (0 == length(seq))  func(built)<br/>  else  for (x in seq) do.perms( seq[!seq==x], func, c(x, built)) }<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; A quick `amb' implementation<br/>(define fails '())<br/>(define (fail) (if (pair? fails) ((car fails)) (error \"no more choices!\")))<br/>(define (amb xs)<br/>  (let/cc k (set! fails (cons k fails)))<br/>  (if (pair? xs) (begin0 (car xs) (set! xs (cdr xs)))<br/>      (begin (set! fails (cdr fails)) (fail))))<br/>(define (assert . conditions) (when (memq #f conditions) (fail)))<br/>\u00a0<br/>;; Convenient macro for definining problem items<br/>(define-syntax-rule (with: all (name ...) #:in choices body ...)<br/>  (let* ([cs choices] [name (amb cs)] ... [all `([,name name] ...)]) body ...))<br/>\u00a0<br/>;; ===== problem translation starts here =====<br/>\u00a0<br/>;; Baker, Cooper, Fletcher, Miller, and Smith live on different floors<br/>;; of an apartment house that contains only five floors.<br/>(with: residents [Baker Cooper Fletcher Miller Smith] #:in (range 1 6)<br/> \u00a0;; Some helpers<br/>  (define (on-top    x) (for/and ([y residents]) (x . &gt;= . (car y))))<br/>  (define (on-bottom x) (for/and ([y residents]) (x . &lt;= . (car y))))<br/>  (define (adjacent x y) (= 1 (abs (- x y))))<br/>  (assert<br/>  \u00a0;; ... live on different floors ...<br/>   (assert (= 5 (length (remove-duplicates (map car residents)))))<br/>  \u00a0;; Baker does not live on the top floor.<br/>   (not (on-top Baker))<br/>  \u00a0;; Cooper does not live on the bottom floor.<br/>   (not (on-bottom Cooper))<br/>  \u00a0;; Fletcher does not live on either the top or the bottom floor.<br/>   (not (on-top Fletcher))<br/>   (not (on-bottom Fletcher))<br/>  \u00a0;; Miller lives on a higher floor than does Cooper.<br/>   (&gt; Miller Cooper)<br/>  \u00a0;; Smith does not live on a floor adjacent to Fletcher's.<br/>   (not (adjacent Smith Fletcher))<br/>  \u00a0;; Fletcher does not live on a floor adjacent to Cooper's.<br/>   (assert (not (adjacent Fletcher Cooper))))<br/> \u00a0;; Where does everyone live?<br/>  (printf \"Solution:\\n\")<br/>  (for ([x (sort residents &gt; #:key car)]) (apply printf \"  ~a. ~a\\n\" x)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves the  Dinesman's multiple\u2500dwelling  problem with \"natural\" wording.*/</span><br/>names= <span class=\"st0\">'Baker Cooper Fletcher Miller Smith'</span>      <span class=\"coMULTI\">/*names of multiple\u2500dwelling tenants.  */</span><br/>tenants=<span class=\"kw6\">words</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*the number of tenants in the building*/</span><br/>floors=<span class=\"nu0\">5</span>;   top=floors;    bottom=<span class=\"nu0\">1</span>;   #=floors; <span class=\"coMULTI\">/*floor 1 is the ground (bottom) floor.*/</span><br/>sols=<span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span>\u00a0!<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #;  <span class=\"kw1\">do</span>\u00a0!<span class=\"sy0\">.</span>2=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #;  <span class=\"kw1\">do</span>\u00a0!<span class=\"sy0\">.</span>3=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #;  <span class=\"kw1\">do</span>\u00a0!<span class=\"sy0\">.</span>4=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #;  <span class=\"kw1\">do</span>\u00a0!<span class=\"sy0\">.</span>5=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #<br/>          <span class=\"kw1\">do</span> p=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> tenants;     _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>names,p<span class=\"br0\">)</span>;         <span class=\"kw2\">upper</span> _;      <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> _,\u00a0!<span class=\"sy0\">.</span>p<br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p*/</span><br/>                         <span class=\"kw1\">do</span>     j=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> #-<span class=\"nu0\">1</span>    <span class=\"coMULTI\">/* [\u2193]  people don't live on same floor*/</span><br/>                             <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> #;   <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>j==!<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>\u00a0!<span class=\"sy0\">.</span>5    <span class=\"coMULTI\">/*cohab?*/</span><br/>                             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                         <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">call</span> Waldo                               <span class=\"coMULTI\">/* \u25c4\u2550\u2550 where the rubber meets the road.*/</span><br/>        <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*!.5  &amp; \u00a0!.4  &amp; \u00a0!.3   &amp; \u00a0!.2  &amp;  \u00a0!.1*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'found'</span>    sols     <span class=\"st0\">\"solution\"</span>s<span class=\"br0\">(</span>sols<span class=\"br0\">)</span><span class=\"sy0\">.</span>       <span class=\"coMULTI\">/*display the number of solutions found*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Waldo: <span class=\"kw1\">if</span> Baker    == top                                     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       <span class=\"kw1\">if</span> Cooper   == bottom                                  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       <span class=\"kw1\">if</span> Fletcher == bottom      <span class=\"sy0\">|</span>  Fletcher == top          <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       <span class=\"kw1\">if</span> Miller   <span class=\"sy0\">\\&gt;</span> Cooper                                  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       <span class=\"kw1\">if</span> Smith    == Fletcher-<span class=\"nu0\">1</span>  <span class=\"sy0\">|</span>  Smith    == Fletcher+<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       <span class=\"kw1\">if</span> Fletcher == Cooper  -<span class=\"nu0\">1</span>  <span class=\"sy0\">|</span>  Fletcher == Cooper  +<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>       sols=sols+<span class=\"nu0\">1</span><br/>       <span class=\"kw1\">say</span>;              <span class=\"kw1\">do</span> p=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tenants;           tenant=<span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>names, p<span class=\"br0\">)</span>,  <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">say</span> tenant      <span class=\"st0\">'lives on the'</span>     \u00a0!<span class=\"sy0\">.</span>p <span class=\"sy0\">||</span> th<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>p<span class=\"br0\">)</span>       <span class=\"st0\">\"floor.\"</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p*/</span><br/>       <span class=\"kw1\">return</span>                                    <span class=\"coMULTI\">/* [\u2191]  show tenants in order in NAMES.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:     <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>;    <span class=\"kw1\">return</span> <span class=\"st0\">\"s\"</span>        <span class=\"coMULTI\">/*a simple pluralizer function.*/</span><br/>th:    <span class=\"kw1\">arg</span> x;  x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;  <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'th st nd rd'</span>, <span class=\"nu0\">1</span> +x<span class=\"sy0\">//</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">100</span>%10<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>floor1 = \"return baker!=cooper and baker!=fletcher and baker!=miller and  <br/>          baker!=smith and cooper!=fletcher and cooper!=miller and <br/>          cooper!=smith and fletcher!=miller and fletcher!=smith and  <br/>          miller!=smith\"<br/>floor2 = \"return baker!=4\"<br/>floor3 = \"return cooper!=0\"<br/>floor4 = \"return fletcher!=0 and fletcher!=4\"<br/>floor5 = \"return miller&gt;cooper\"<br/>floor6 = \"return fabs(smith-fletcher)!=1\"<br/>floor7 = \"return fabs(fletcher-cooper)!=1\"<br/>for baker = 0 to 4<br/>    for cooper = 0 to 4<br/>        for fletcher = 0 to 4<br/>            for miller = 0 to 4<br/>                for smith = 0 to 4<br/>                    if eval(floor2) if eval(floor3) if eval(floor5) <br/>                       if eval(floor4) if eval(floor6) if eval(floor7) <br/>                          if eval(floor1) <br/>                             see \"baker lives on floor \" + baker + nl<br/>                             see \"cooper lives on floor \" + cooper + nl<br/>                             see \"fletcher lives on floor \" + fletcher + nl<br/>                             see \"miller lives on floor \" + miller + nl<br/>                             see \"smith lives on floor \" + smith + nl ok ok ok ok ok ok ok<br/>                next <br/>            next <br/>        next <br/>    next <br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 27, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span> problem <span class=\"br0\">)</span><br/>  lines = problem.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  names = lines.<span class=\"me1\">first</span>.<span class=\"me1\">scan</span><span class=\"br0\">(</span> <span class=\"sy0\">/</span><span class=\"br0\">[</span>A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span>\\w<span class=\"sy0\">*/</span> <span class=\"br0\">)</span><br/>  re_names = <span class=\"kw4\">Regexp</span>.<span class=\"me1\">union</span><span class=\"br0\">(</span> names <span class=\"br0\">)</span><br/>  <span class=\"co1\"># Later on, search for these keywords (the word \"not\" is handled separately).</span><br/>  words = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>first second third fourth fifth sixth seventh eighth ninth tenth <br/>  bottom top higher lower adjacent<span class=\"br0\">)</span><br/>  re_keywords = <span class=\"kw4\">Regexp</span>.<span class=\"me1\">union</span><span class=\"br0\">(</span> words <span class=\"br0\">)</span><br/>\u00a0<br/>  predicates = lines<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">flat_map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span>  <span class=\"co1\">#build an array of lambda's</span><br/>    keywords = line.<span class=\"me1\">scan</span><span class=\"br0\">(</span> re_keywords <span class=\"br0\">)</span><br/>    name1, name2 = line.<span class=\"me1\">scan</span><span class=\"br0\">(</span> re_names <span class=\"br0\">)</span><br/>    keywords.<span class=\"me1\">map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>keyword<span class=\"sy0\">|</span><br/>      l = <span class=\"kw1\">case</span> keyword <br/>        <span class=\"kw1\">when</span> <span class=\"st0\">\"bottom\"</span>   <span class=\"kw1\">then</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> c.<span class=\"me1\">first</span> == name1 <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">\"top\"</span>      <span class=\"kw1\">then</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> c.<span class=\"me1\">last</span> == name1 <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">\"higher\"</span>   <span class=\"kw1\">then</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name1 <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name2 <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">\"lower\"</span>    <span class=\"kw1\">then</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name1 <span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name2 <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">\"adjacent\"</span> <span class=\"kw1\">then</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"br0\">(</span>c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name1 <span class=\"br0\">)</span> <span class=\"sy0\">-</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span> name2 <span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span> == <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span>                 <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span> c<span class=\"br0\">[</span>words.<span class=\"me1\">index</span><span class=\"br0\">(</span>keyword<span class=\"br0\">)</span><span class=\"br0\">]</span> == name1 <span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>      line =~ <span class=\"sy0\">/</span>\\bnot\\b<span class=\"sy0\">/</span>\u00a0? <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">not</span> l.<span class=\"me1\">call</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">}</span>\u00a0: l  <span class=\"co1\"># handle \"not\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  names.<span class=\"me1\">permutation</span>.<span class=\"me1\">detect</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>candidate<span class=\"sy0\">|</span> predicates.<span class=\"me1\">all</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>predicate<span class=\"sy0\">|</span> predicate.<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">for baler          = 1 to 4                                    ' can not be in room 5<br/> for cooper        = 2 to 5                                    ' can not be in room 1<br/>   for fletcher    = 2 to 4                                    ' can not be in room 1 or 5<br/>    for miller     = 1 to 5                                    ' can be in any room<br/>     for smith     = 1 to 5                                    ' can be in any room<br/>     if baler &lt;&gt; cooper and fletcher &lt;&gt; miller and miller &gt; cooper and abs(smith - fletcher) &gt; 1 and abs(fletcher - cooper) &gt; 1 then<br/>      if baler + cooper + fletcher + miller + smith = 15 then  ' that is 1 + 2 + 3 + 4 + 5<br/>        rooms$ = baler;cooper;fletcher;miller;smith<br/>        print \"baler: \";baler;\" copper: \";cooper;\" fletcher: \";fletcher;\" miller: \";miller;\" smith: \";smith    <br/>      end<br/>      end if<br/>     end if <br/>    next smith<br/>   next miller<br/>  next fletcher<br/> next cooper<br/>next baler<br/>print \"Can't assign rooms\"                                     ' print this if it can not find a solution</pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">abs</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Dinesman3 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tenants <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"st0\">\"Baker\"</span>, <span class=\"st0\">\"Cooper2\"</span>, <span class=\"st0\">\"Fletcher4\"</span>, <span class=\"st0\">\"Miller\"</span>, <span class=\"st0\">\"Smith\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>groundFloor, topFloor<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, tenants.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Rules with related tenants and restrictions*/</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exclusions <span class=\"sy0\">=</span><br/>    List<span class=\"br0\">(</span><span class=\"br0\">(</span>suggestedFloor0<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> suggestedFloor0<span class=\"br0\">(</span><span class=\"st0\">\"Baker\"</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> topFloor,<br/>      <span class=\"br0\">(</span>suggestedFloor1<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> suggestedFloor1<span class=\"br0\">(</span><span class=\"st0\">\"Cooper2\"</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> groundFloor,<br/>      <span class=\"br0\">(</span>suggestedFloor2<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>List<span class=\"br0\">(</span>groundFloor, topFloor<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>suggestedFloor2<span class=\"br0\">(</span><span class=\"st0\">\"Fletcher4\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>      <span class=\"br0\">(</span>suggestedFloor3<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> suggestedFloor3<span class=\"br0\">(</span><span class=\"st0\">\"Miller\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> suggestedFloor3<span class=\"br0\">(</span><span class=\"st0\">\"Cooper2\"</span><span class=\"br0\">)</span>,<br/>      <span class=\"br0\">(</span>suggestedFloor4<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>suggestedFloor4<span class=\"br0\">(</span><span class=\"st0\">\"Smith\"</span><span class=\"br0\">)</span> - suggestedFloor4<span class=\"br0\">(</span><span class=\"st0\">\"Fletcher4\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>,<br/>      <span class=\"br0\">(</span>suggestedFloor5<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>suggestedFloor5<span class=\"br0\">(</span><span class=\"st0\">\"Fletcher4\"</span><span class=\"br0\">)</span> - suggestedFloor5<span class=\"br0\">(</span><span class=\"st0\">\"Cooper2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  tenants.<span class=\"me1\">permutations</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> zip <span class=\"br0\">(</span>groundFloor to topFloor<span class=\"br0\">)</span><span class=\"br0\">)</span>.<br/>    <span class=\"me1\">filter</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> exclusions.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">(</span>p.<span class=\"me1\">toMap</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"No solution\"</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> xss <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>s<span class=\"st0\">\"Solutions: ${xss.size}\"</span><span class=\"br0\">)</span><br/>        xss.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> l <span class=\"sy0\">=&gt;</span><br/>          println<span class=\"br0\">(</span><span class=\"st0\">\"possible solution:\"</span><span class=\"br0\">)</span><br/>          l.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"${p._1}%11s lives on floor number ${p._2}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 34, "block": "<pre class=\"ruby highlighted_source\">func dinesman<span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var lines = problem.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>  var names = lines.<span class=\"me1\">first</span>.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\b<span class=\"br0\">[</span>A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span>\\w<span class=\"sy0\">*/</span><span class=\"br0\">)</span><br/>  var re_names = Regex<span class=\"br0\">(</span>names.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Later on, search for these keywords (the word \"not\" is handled separately).</span><br/>  var words = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>first second third fourth fifth sixth seventh eighth ninth tenth<br/>                 bottom top higher lower adjacent<span class=\"br0\">)</span><br/>  var re_keywords = Regex<span class=\"br0\">(</span>words.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Build an array of lambda's</span><br/>  var predicates = lines.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, lines.<span class=\"me1\">end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    var keywords = line.<span class=\"me1\">scan</span><span class=\"br0\">(</span>re_keywords<span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>name1, name2<span class=\"br0\">)</span> = line.<span class=\"me1\">scan</span><span class=\"br0\">(</span>re_names<span class=\"br0\">)</span>...<br/>\u00a0<br/>    keywords.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>keyword<span class=\"sy0\">|</span><br/>      var l = <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        given<span class=\"br0\">(</span>keyword<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">\"bottom\"</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c.<span class=\"me1\">first</span> == name1 <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">\"top\"</span><span class=\"br0\">)</span>      <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c.<span class=\"me1\">last</span> == name1 <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">\"higher\"</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name2<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">\"lower\"</span><span class=\"br0\">)</span>    <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name1<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name2<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">\"adjacent\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> c.<span class=\"me1\">index</span><span class=\"br0\">(</span>name2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> abs == <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            default           <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> c<span class=\"br0\">[</span>words.<span class=\"me1\">index</span><span class=\"br0\">(</span>keyword<span class=\"br0\">)</span><span class=\"br0\">]</span> == name1 <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      line ~~ <span class=\"sy0\">/</span>\\bnot\\b<span class=\"sy0\">/</span>\u00a0? func<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> l<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">not</span> <span class=\"br0\">}</span>\u00a0: l;  <span class=\"co1\"># handle \"not\"</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span>.<span class=\"me1\">flat</span><br/>\u00a0<br/>  names.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span> <span class=\"sy0\">|*</span>candidate<span class=\"sy0\">|</span><br/>    predicates.<span class=\"me1\">all</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>predicate<span class=\"sy0\">|</span> predicate<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> candidate<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> dinesmanSolve <span class=\"br0\">{</span>floors people constraints<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Search for a possible assignment that satisfies the constraints</span><br/>    struct::<span class=\"kw2\">list</span> foreachperm p <span class=\"re0\">$floors</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$people</span><br/>\t<span class=\"kw1\">set</span> found <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$constraints</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> found <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$found</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Found something, or exhausted possibilities</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$found</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"no solution possible\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Generate in \"nice\" order</span><br/>    <span class=\"kw1\">foreach</span> f <span class=\"re0\">$floors</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> person <span class=\"re0\">$people</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> <span class=\"re0\">$person</span><span class=\"br0\">]</span> == <span class=\"re0\">$f</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"re0\">$f</span> <span class=\"re0\">$person</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 61, "block": "<pre class=\"text highlighted_source\">REM Floors are numbered 0 (ground) to 4 (top)<br/>\u00a0<br/>FOR B = 0 TO 4<br/>  FOR C = 0 TO 4<br/>    FOR F = 0 TO 4<br/>      FOR M = 0 TO 4<br/>        FOR S = 0 TO 4<br/>          GOSUB 100\u00a0: IF POP() THEN<br/>            GOSUB 110\u00a0: IF POP() THEN<br/>              GOSUB 120\u00a0: IF POP() THEN<br/>                GOSUB 130\u00a0: IF POP() THEN<br/>                  GOSUB 140\u00a0: IF POP() THEN<br/>                    GOSUB 150\u00a0: IF POP() THEN<br/>                      GOSUB 160\u00a0: IF POP() THEN<br/>                        PRINT \"Baker lives on floor \"\u00a0; B + 1<br/>                        PRINT \"Cooper lives on floor \"\u00a0; C + 1<br/>                        PRINT \"Fletcher lives on floor \"\u00a0; F + 1<br/>                        PRINT \"Miller lives on floor \"\u00a0; M + 1<br/>                        PRINT \"Smith lives on floor \"\u00a0; S + 1<br/>                      ENDIF<br/>                    ENDIF<br/>                  ENDIF<br/>                ENDIF<br/>              ENDIF<br/>            ENDIF<br/>          ENDIF<br/>        NEXT S<br/>      NEXT M<br/>    NEXT F<br/>  NEXT C<br/>NEXT B<br/>\u00a0<br/>END<br/>\u00a0<br/>REM \"Baker, Cooper, Fletcher, Miller, and Smith live on different floors\"<br/>100 PUSH (B#C)*(B#F)*(B#M)*(B#S)*(C#F)*(C#M)*(C#S)*(F#M)*(F#S)*(M#S)<br/>    RETURN<br/>\u00a0<br/>REM \"Baker does not live on the top floor\"<br/>110 PUSH B#4<br/>    RETURN<br/>\u00a0<br/>REM \"Cooper does not live on the bottom floor\"<br/>120 PUSH C#0<br/>    RETURN<br/>\u00a0<br/>REM \"Fletcher does not live on either the top or the bottom floor\"<br/>130 PUSH (F#0)*(F#4)<br/>    RETURN<br/>\u00a0<br/>REM \"Miller lives on a higher floor than does Cooper\"<br/>140 PUSH M&gt;C<br/>    RETURN<br/>\u00a0<br/>REM \"Smith does not live on a floor adjacent to Fletcher's\"<br/>150 PUSH ABS(S-F)#1<br/>    RETURN<br/>\u00a0<br/>REM \"Fletcher does not live on a floor adjacent to Cooper's\"<br/>160 PUSH ABS(F-C)#1<br/>    RETURN</pre>"}, {"lang": "UNIX Shell", "loc": 73, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"co0\"># NAMES is a list of names.  It can be changed as needed.  It can be more than five names, or less.</span><br/><span class=\"re2\">NAMES</span>=<span class=\"br0\">(</span>Baker Cooper Fletcher Miller Smith<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\"># CRITERIA are the rules imposed on who lives where.  Each criterion must be a valid bash expression</span><br/><span class=\"co0\"># that will be evaluated.  TOP is the top floor; BOTTOM is the bottom floor.</span><br/>\u00a0<br/><span class=\"co0\"># The CRITERIA can be changed to create different rules.</span><br/>\u00a0<br/><span class=\"re2\">CRITERIA</span>=<span class=\"br0\">(</span><br/>  <span class=\"st_h\">'Baker   \u00a0!= TOP'</span>            <span class=\"co0\"># Baker does not live on the top floor</span><br/>  <span class=\"st_h\">'Cooper  \u00a0!= BOTTOM'</span>         <span class=\"co0\"># Cooper does not live on the bottom floor</span><br/>  <span class=\"st_h\">'Fletcher\u00a0!= TOP'</span>            <span class=\"co0\"># Fletcher does not live on the top floor</span><br/>  <span class=\"st_h\">'Fletcher\u00a0!= BOTTOM'</span>         <span class=\"co0\"># and Fletch also does not live on the bottom floor</span><br/>  <span class=\"st_h\">'Miller   &gt;  Cooper'</span>         <span class=\"co0\"># Miller lives above Cooper</span><br/>  <span class=\"st_h\">'$(abs $(( Smith    - Fletcher )) ) &gt; 1'</span>   <span class=\"co0\"># Smith and Fletcher are not on adjacent floors</span><br/>  <span class=\"st_h\">'$(abs $(( Fletcher - Cooper   )) ) &gt; 1'</span>   <span class=\"co0\"># Fletcher and Cooper are not on adjacent floors</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\"># Code below here shouldn't need to change to vary parameters</span><br/><span class=\"kw3\">let</span> <span class=\"re2\">BOTTOM</span>=<span class=\"nu0\">0</span><br/><span class=\"kw3\">let</span> <span class=\"re2\">TOP</span>=<span class=\"co1\">${#NAMES[@]}</span><span class=\"re5\">-1</span><br/>\u00a0<br/><span class=\"co0\"># Not available as a builtin</span><br/>abs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">local</span> <span class=\"re2\">n</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"co0\">#$1 ))\u00a0; echo $(( n &lt; 0\u00a0? -n\u00a0: n ))\u00a0; }</span><br/>\u00a0<br/><span class=\"co0\"># Algorithm we use to iterate over the permutations</span><br/><span class=\"co0\"># requires that we start with the array sorted lexically</span><br/><span class=\"re2\">NAMES</span>=<span class=\"br0\">(</span>$<span class=\"br0\">(</span><span class=\"kw3\">printf</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[@]}</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span><br/>  <span class=\"co0\"># set each name to its position in the array</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">i</span>=BOTTOM; i<span class=\"sy0\">&lt;</span>=TOP; ++i <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">eval</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[i]}</span>=<span class=\"es2\">$i</span>\"</span><br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/>  <span class=\"co0\"># check to see if we've solved the problem</span><br/>  <span class=\"kw3\">let</span> <span class=\"re2\">solved</span>=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> criterion <span class=\"kw1\">in</span> <span class=\"st0\">\"<span class=\"es3\">${CRITERIA[@]}</span>\"</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">!</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"(( <span class=\"es2\">$criterion</span> ))\"</span>; <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">let</span> <span class=\"re2\">solved</span>=<span class=\"nu0\">0</span><br/>      <span class=\"kw3\">break</span><br/>    <span class=\"kw1\">fi</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> solved <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"From bottom to top: <span class=\"es3\">${NAMES[@]}</span>\"</span><br/>    <span class=\"kw3\">break</span><br/>  <span class=\"kw1\">fi</span><br/>\u00a0<br/>  <span class=\"co0\"># Bump the names list to the next permutation</span><br/>  <span class=\"kw3\">let</span> <span class=\"re2\">j</span>=TOP-<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> j <span class=\"sy0\">&gt;</span>= BOTTOM <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[j]}</span>\"</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[j+1]}</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">let</span> j-=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> j <span class=\"sy0\">&lt;</span> BOTTOM <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span> <span class=\"kw3\">break</span>; <span class=\"kw1\">fi</span><br/>  <span class=\"kw3\">let</span> <span class=\"re2\">k</span>=TOP<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> k <span class=\"sy0\">&gt;</span> j <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[k]}</span>\"</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"<span class=\"es3\">${NAMES[j]}</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">let</span> k-=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> k <span class=\"sy0\">&lt;</span>= j <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span> <span class=\"kw3\">break</span>; <span class=\"kw1\">fi</span><br/>  <span class=\"re2\">t</span>=<span class=\"st0\">\"<span class=\"es3\">${NAMES[j]}</span>\"</span><br/>  NAMES<span class=\"br0\">[</span>j<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es3\">${NAMES[k]}</span>\"</span><br/>  NAMES<span class=\"br0\">[</span>k<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$t</span>\"</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">k</span>=<span class=\"nu0\">1</span>; k<span class=\"sy0\">&lt;</span>=<span class=\"br0\">(</span>TOP-j<span class=\"br0\">)</span>; ++k <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"re2\">a</span>=BOTTOM+j+k<br/>    <span class=\"re2\">b</span>=TOP-k+<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> a <span class=\"sy0\">&lt;</span> b <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>      <span class=\"re2\">t</span>=<span class=\"st0\">\"<span class=\"es3\">${NAMES[a]}</span>\"</span><br/>      NAMES<span class=\"br0\">[</span>a<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es3\">${NAMES[b]}</span>\"</span><br/>      NAMES<span class=\"br0\">[</span>b<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$t</span>\"</span><br/>    <span class=\"kw1\">fi</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "UTFool", "loc": 49, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00b7\u00b7\u00b7<br/>http://rosettacode.org/wiki/Dinesman's_multiple-dwelling_problem<br/>\u00b7\u00b7\u00b7<br/>import java.util.HashSet<br/>\u00a0<br/>\u25a0 Dinesman<br/>  \u00a7 static<br/>\u00a0<br/>    houses\u2982 HashSet\u27e8String\u27e9\u00b0<br/>\u00a0<br/>    \u25b6 main<br/>    \u2022 args\u2982 String[]<br/>      \u00b7 Baker, Cooper, Fletcher, Miller, and Smith \u2026<br/>      build *StringBuilder\u00b0, *StringBuilder \"BCFMS\"<br/>      \u2200 house \u2208 houses\u2982 String<br/>        if verify house<br/>           System.out.println house.toString\u00b0<br/>\u00a0<br/>    \u25b6 verify\u2982 boolean<br/>    \u2022 house\u2982 String<br/>      \u00b7 Baker does not live on the top floor.<br/>      return false if house.charAt 4 = 'B'<br/>      \u00b7 Fletcher does not live on either the top or the bottom floor.<br/>      return false if house.charAt 0 = 'F' or house.charAt 4 = 'F'<br/>      \u00b7 Cooper does not live on the bottom floor.<br/>      return false if house.charAt 0 = 'C'<br/>      \u00b7 Miller lives on a higher floor than does Cooper.<br/>      return false if house.indexOf \"M\" \u2264 house.indexOf \"C\"<br/>      \u00b7 Smith does not live on a floor adjacent to Fletcher's.<br/>      return false if Math.abs (house.indexOf \"S\") - (house.indexOf \"F\") = 1<br/>      \u00b7 Fletcher does not live on a floor adjacent to Cooper's.<br/>      return false if Math.abs (house.indexOf \"F\") - (house.indexOf \"C\") = 1<br/>      return true<br/>\u00a0<br/>    \u25b6 build<br/>    \u2022 house\u2982 StringBuilder<br/>    \u2022 people\u2982 StringBuilder<br/>      if people.length\u00b0 = 0<br/>         houses.add house.toString\u00b0<br/>      else<br/>         \u2200 i \u2208 0\u2026people.length\u00b0<br/>           person\u2982 char: people.charAt i<br/>           house.append person<br/>           people.deleteCharAt i<br/>           build house, people<br/>           people.insert i, person<br/>           house.setLength house.length\u00b0 - 1<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int B, C, F, M, S;<br/>for B:= 1 to 4 do                       \\Baker does not live on top (5th) floor<br/>  for C:= 2 to 5 do                     \\Cooper does not live on bottom floor<br/>    if C#B then                         \\Cooper &amp; Baker live on different floors<br/>      for F:= 2 to 4 do                 \\Fletcher doesn't live on top or bottom<br/>        if F#B &amp; F#C &amp; F#C-1 &amp; F#C+1 then \\ and she's not adjacent to Cooper<br/>          for M:= 1 to 5 do<br/>            if M#F &amp; M#B &amp; M&gt;C then     \\Miller lives above Cooper<br/>              for S:= 1 to 5 do         \\Smith is not adjacent to Fletcher<br/>                if S#M &amp; S#F &amp; S#C &amp; S#B &amp; S#F-1 &amp; S#F+1 then       \\show<br/>                  [Text(0, \"Baker    \");  IntOut(0, B);  CrLf(0);   \\all<br/>                   Text(0, \"Cooper   \");  IntOut(0, C);  CrLf(0);   \\possible<br/>                   Text(0, \"Fletcher \");  IntOut(0, F);  CrLf(0);   \\solutions<br/>                   Text(0, \"Miller   \");  IntOut(0, M);  CrLf(0);<br/>                   Text(0, \"Smith    \");  IntOut(0, S);  CrLf(0);<br/>                  ]</pre>"}, {"lang": "zkl", "loc": 20, "block": "<pre class=\"text highlighted_source\">var Baker, Cooper, Fletcher, Miller, Smith;  // value == floor<br/>const bottom=1,top=5;\t// floors: 1..5<br/>// All live on different floors, enforced by using permutations of floors<br/>//fcn c0{ (Baker!=Cooper!=Fletcher) and (Fletcher!=Miller!=Smith) }<br/>fcn c1{ Baker!=top }<br/>fcn c2{ Cooper!=bottom }<br/>fcn c3{ bottom!=Fletcher!=top }<br/>fcn c4{ Miller&gt;Cooper }<br/>fcn c5{ (Fletcher - Smith).abs()\u00a0!=1 }<br/>fcn c6{ (Fletcher - Cooper).abs()!=1 }<br/>\u00a0<br/>filters:=T(c1,c2,c3,c4,c5,c6);<br/>dudes:=T(\"Baker\",\"Cooper\",\"Fletcher\",\"Miller\",\"Smith\");  // for reflection<br/>foreach combo in (Utils.Helpers.permuteW([bottom..top].walk())){  // lazy<br/>   dudes.zip(combo).apply2(fcn(nameValue){ setVar(nameValue.xplode()) });<br/>   if(not filters.runNFilter(False)){  // all constraints are True<br/>      vars.println();\t\t       // use reflection to print solution<br/>      break;<br/>   }<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"co3\">REM Floors are numbered 0 (ground) to 4 (top)</span><br/><span class=\"nu0\">20</span> <span class=\"co3\">REM \"Baker, Cooper, Fletcher, Miller, and Smith live on different floors\":</span><br/><span class=\"nu0\">30</span> <span class=\"co3\">REM \"Baker does not live on the top floor\"</span><br/><span class=\"nu0\">40</span> <span class=\"co3\">REM \"Cooper does not live on the bottom floor\"</span><br/><span class=\"nu0\">50</span> <span class=\"co3\">REM \"Fletcher does not live on either the top or the bottom floor\"</span><br/><span class=\"nu0\">60</span> <span class=\"co3\">REM \"Miller lives on a higher floor than does Cooper\"</span><br/><span class=\"nu0\">70</span> <span class=\"co3\">REM \"Smith does not live on a floor adjacent to Fletcher's\"</span><br/><span class=\"nu0\">80</span> <span class=\"co3\">REM \"Fletcher does not live on a floor adjacent to Cooper's\"</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">FOR</span> b=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">FOR</span> c=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">FOR</span> f=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">FOR</span> m=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">FOR</span> s=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> B&lt;&gt;C <span class=\"kw4\">AND</span> B&lt;&gt;F <span class=\"kw4\">AND</span> B&lt;&gt;M <span class=\"kw4\">AND</span> B&lt;&gt;S <span class=\"kw4\">AND</span> C&lt;&gt;F <span class=\"kw4\">AND</span> C&lt;&gt;M <span class=\"kw4\">AND</span> C&lt;&gt;S <span class=\"kw4\">AND</span> F&lt;&gt;M <span class=\"kw4\">AND</span> F&lt;&gt;S <span class=\"kw4\">AND</span> M&lt;&gt;S <span class=\"kw4\">AND</span> B&lt;&gt;<span class=\"nu0\">4</span> <span class=\"kw4\">AND</span> C&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw4\">AND</span> F&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw4\">AND</span> F&lt;&gt;<span class=\"nu0\">4</span> <span class=\"kw4\">AND</span> M&gt;C <span class=\"kw4\">AND</span> <span class=\"kw3\">ABS</span> <span class=\"br0\">(</span>S-F<span class=\"br0\">)</span>&lt;&gt;<span class=\"nu0\">1</span> <span class=\"kw4\">AND</span> <span class=\"kw3\">ABS</span> <span class=\"br0\">(</span>F-C<span class=\"br0\">)</span>&lt;&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Baker lives on floor \"</span>;b: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Cooper lives on floor \"</span>;c: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Fletcher lives on floor \"</span>;f: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Miller lives on floor \"</span>;m: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Smith lives on floor \"</span>;s: STOP <br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span> s: <span class=\"kw1\">NEXT</span> m: <span class=\"kw1\">NEXT</span> f: <span class=\"kw1\">NEXT</span> c: <span class=\"kw1\">NEXT</span> b</pre>"}]}