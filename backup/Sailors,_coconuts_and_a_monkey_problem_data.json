{"task": "Sailors,_coconuts_and_a_monkey_problem", "blocks": [{"lang": "Bc", "loc": 23, "block": "<pre class=\"text highlighted_source\">define coconuts(sailors, monkeys) {<br/>\tprint \"coconuts(\", sailors, \", \", monkeys, \") = \"<br/>\tif (sailors &lt; 2 || monkeys &lt; 1 || sailors &lt;= monkeys) {<br/>\t\treturn 0<br/>\t}<br/>\tblue_cocos = sailors-1<br/>\tpow_bc = blue_cocos^sailors<br/>\tx_cocos = pow_bc<br/>\twhile ((x_cocos-blue_cocos)%sailors || (x_cocos-blue_cocos)/sailors &lt; 1) {<br/>\t\tx_cocos += pow_bc<br/>\t}<br/>\treturn (x_cocos/pow_bc*(sailors^sailors)-blue_cocos)*monkeys<br/>}<br/>scale = 0<br/>coconuts(1, 1)<br/>coconuts(2, 1)<br/>coconuts(3, 1)<br/>coconuts(3, 2)<br/>coconuts(4, 1)<br/>coconuts(5, 1)<br/>coconuts(5, 4)<br/>coconuts(6, 1)<br/>coconuts(101, 1)</pre>"}, {"lang": "Befunge", "loc": 6, "block": "<pre class=\"text highlighted_source\">&gt;2+:01p9&gt;`#@_00v<br/>nvg10*g10:+&gt;#1$&lt;<br/>#&gt;\\:01g1-%#^_:0v<br/>-|:-1\\+1&lt;+/-1g1&lt;<br/>1&gt;$01g.\"&gt;-\",,48v<br/>^g10,+55&lt;.,9.,*&lt;</pre>"}, {"lang": "Bracmat", "loc": 56, "block": "<pre class=\"text highlighted_source\">( ( divmod<br/>  =   a b<br/>    .\u00a0!arg:(?a.?b)&amp;(div$(!a.!b).mod$(!a.!b))<br/>  )<br/>&amp; ( overnight<br/>  =   ns nn result s q r<br/>    .  \u00a0!arg:(?ns.?nn)<br/>      &amp;\u00a0:?result<br/>      &amp; 0:?s<br/>      &amp;   whl<br/>        ' (\u00a0!s+1:?s:~&gt;!ns<br/>          &amp; divmod$(!nn.!ns):(?q.?r)<br/>          &amp;\u00a0!r:1<br/>          &amp;\u00a0!q*(!ns+-1):?nn<br/>          &amp;\u00a0!result (!s.!q.!r.!nn):?result<br/>          )<br/>      &amp;\u00a0!s:&gt;!ns<br/>      &amp; divmod$(!nn.!ns):(?q.0)<br/>      &amp;\u00a0!result<br/>  )<br/>&amp; ( minnuts<br/>  =   nsailors nnuts result sailor takes gives leaves<br/>    .  \u00a0!arg:?nsailors<br/>      &amp; 0:?nnuts<br/>      &amp;   whl<br/>        ' ( 1+!nnuts:?nnuts<br/>          &amp; ~(overnight$(!nsailors.!nnuts):?result)<br/>          )<br/>      &amp; out$(!nsailors \": \"\u00a0!nnuts)<br/>      &amp;   whl<br/>        ' (\u00a0!result:(?sailor.?takes.?gives.?leaves)\u00a0?result<br/>          &amp;   out<br/>            $ ( str<br/>              $ ( \" Sailor #\"<br/>                 \u00a0!sailor<br/>                  \" takes \"<br/>                 \u00a0!takes<br/>                  \", giving \"<br/>                 \u00a0!gives<br/>                  \" to the monkey and leaves \"<br/>                 \u00a0!leaves<br/>                )<br/>              )<br/>          )<br/>      &amp;   out<br/>        $ ( str<br/>          $ (\"In the morning, each sailor gets \"\u00a0!leaves*!nsailors^-1 \" nuts\")<br/>          )<br/>  )<br/>&amp; 4:?n<br/>&amp;   whl<br/>  ' ( 1+!n:~&gt;6:?n<br/>    &amp; out$(\"Solution with \"\u00a0!n \" sailors:\")<br/>    &amp; minnuts$!n<br/>    )<br/>)</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> valid<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nuts<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> k<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> k<span class=\"sy0\">;</span> k<span class=\"sy0\">--,</span> nuts <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> nuts<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>nuts<span class=\"sy0\">%</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> nuts <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>nuts<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>valid<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 26, "block": "<pre class=\"text highlighted_source\">class Test<br/>{<br/>    static bool valid(int n, int nuts)<br/>    {<br/>        for (int k = n; k\u00a0!= 0; k--, nuts -= 1 + nuts / n)<br/>        {<br/>            if (nuts\u00a0% n\u00a0!= 1)<br/>            {<br/>                return false;<br/>            }                <br/>        }<br/>\u00a0<br/>        return nuts\u00a0!= 0 &amp;&amp; (nuts\u00a0% n == 0);<br/>    }<br/>\u00a0<br/>    static void Main(string[] args)<br/>    {<br/>        int x = 0;<br/>        for (int n = 2; n &lt; 10; n++)<br/>        {<br/>            while (!valid(n, x))<br/>                x++;<br/>            System.Console.WriteLine(n + \": \" + x);<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> coconuts <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    outer<span class=\"sy0\">:</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>ns<span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hidden <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>ns<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        coconuts <span class=\"sy0\">=</span> <span class=\"br0\">(</span>coconuts <span class=\"sy0\">/</span> ns<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ns <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> nc <span class=\"sy0\">=</span> coconuts<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>s<span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">ns</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">%</span> ns <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    hidden<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nc<span class=\"sy0\">/</span>ns<span class=\"sy0\">;</span><br/>                    nc <span class=\"sy0\">-=</span> hidden<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">==</span>ns <span class=\"sy0\">&amp;&amp;</span> nc<span class=\"sy0\">%</span>ns<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        writeln<span class=\"br0\">(</span>ns<span class=\"sy0\">,</span> <span class=\"st0\">\" sailors require a minimum of \"</span><span class=\"sy0\">,</span> coconuts<span class=\"sy0\">,</span> <span class=\"st0\">\" coconuts\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>t<span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">ns</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Sailor \"</span><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> <span class=\"st0\">\" hides \"</span><span class=\"sy0\">,</span> hidden<span class=\"br0\">[</span>t <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>The monkey gets \"</span><span class=\"sy0\">,</span> ns<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Finally, each sailor takes \"</span><span class=\"sy0\">,</span> nc <span class=\"sy0\">/</span> ns<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">continue</span> outer<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            coconuts <span class=\"sy0\">+=</span> ns<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def valid?(sailor, nuts), do: valid?(sailor, nuts, sailor)<br/>\u00a0<br/>  def valid?(sailor, nuts, 0), do: nuts &gt; 0 and rem(nuts,sailor) == 0<br/>  def valid?(sailor, nuts, _) when rem(nuts,sailor)!=1, do: false<br/>  def valid?(sailor, nuts, i) do<br/>    valid?(sailor, nuts - div(nuts,sailor) - 1, i-1)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([5,6], fn sailor -&gt;<br/>  nuts = Enum.find(Stream.iterate(sailor, &amp;(&amp;1+1)), fn n -&gt; RC.valid?(sailor, n) end)<br/>  IO.puts \"\\n#{sailor} sailors =&gt; #{nuts} coconuts\"<br/>  Enum.reduce(0..sailor, nuts, fn _,n -&gt;<br/>    {d, r} = {div(n,sailor), rem(n,sailor)}<br/>    IO.puts \"  #{inspect [n, d, r]}\"<br/>    n - 1 - d<br/>  end)<br/>end)</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">: total<br/>  over * over 1- rot 0\u00a0?do<br/>    over over mod if dup xor swap leave else over over / 1+ rot + swap then<br/>  loop drop<br/>;<br/>\u00a0<br/>: sailors<br/>  1+ 2\u00a0?do<br/>    1 begin i over total dup 0= while drop 1+ repeat cr i 0 .r .\"\u00a0: \" . .<br/>  loop<br/>;<br/>\u00a0<br/>9 sailors</pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    coconuts <span class=\"sy2\">:=</span> <span class=\"nu0\">11</span><br/>outer<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> ns <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> ns &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> ns<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        hidden <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> ns<span class=\"sy1\">)</span><br/>        coconuts <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>coconuts<span class=\"sy3\">/</span>ns<span class=\"sy1\">)</span><span class=\"sy3\">*</span>ns <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            nc <span class=\"sy2\">:=</span> coconuts<br/>            <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> s &lt;<span class=\"sy2\">=</span> ns<span class=\"sy1\">;</span> s<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> nc<span class=\"sy3\">%</span>ns <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                    hidden<span class=\"sy1\">[</span>s<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> nc <span class=\"sy3\">/</span> ns<br/>                    nc <span class=\"sy2\">-=</span> hidden<span class=\"sy1\">[</span>s<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">if</span> s <span class=\"sy3\">==</span> ns &amp;&amp; nc<span class=\"sy3\">%</span>ns <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>ns<span class=\"sy1\">,</span> <span class=\"st0\">\"sailors require a minimum of\"</span><span class=\"sy1\">,</span> coconuts<span class=\"sy1\">,</span> <span class=\"st0\">\"coconuts\"</span><span class=\"sy1\">)</span><br/>                        <span class=\"kw1\">for</span> t <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> t &lt;<span class=\"sy2\">=</span> ns<span class=\"sy1\">;</span> t<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Sailor\"</span><span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"st0\">\"hides\"</span><span class=\"sy1\">,</span> hidden<span class=\"sy1\">[</span>t<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>                        <span class=\"sy1\">}</span><br/>                        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>The monkey gets\"</span><span class=\"sy1\">,</span> ns<span class=\"sy1\">)</span><br/>                        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Finally, each sailor takes\"</span><span class=\"sy1\">,</span> nc<span class=\"sy3\">/</span>ns<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\b</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>                        <span class=\"kw1\">continue</span> outer<br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            coconuts <span class=\"sy2\">+=</span> ns<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 23, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment<br/>\u00a0<br/><span class=\"co1\">-- Takes the number of sailors and the final number of coconuts. Returns</span><br/><span class=\"co1\">-- Just the associated initial number of coconuts and Nothing otherwise.</span><br/>tryFor <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>tryFor s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=&gt;</span><span class=\"br0\">)</span> pure <span class=\"sy0\">$</span> replicate s step<br/>  <span class=\"kw1\">where</span> step n<br/>          <span class=\"sy0\">|</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Just <span class=\"sy0\">$</span> n <span class=\"sy0\">*</span> s `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>            <span class=\"sy0\">=</span> Nothing<br/>\u00a0<br/><span class=\"co1\">-- Gets the number of sailors from the first command-line argument and</span><br/><span class=\"co1\">-- assumes 5 as a default if none is given. Then uses tryFor to find the</span><br/><span class=\"co1\">-- smallest solution.</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    args <span class=\"sy0\">&lt;-</span> getArgs<br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> args <span class=\"kw1\">of</span><br/>              <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">5</span><br/>              s:<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> s<br/>        a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> mapMaybe <span class=\"br0\">(</span>tryFor n<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <span class=\"br0\">[</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> a</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   I.<span class=\"sy0\">(</span>=&lt;.<span class=\"sy0\">)</span>%&amp;<span class=\"nu0\">5</span> verb def<span class=\"st_h\">'4*(y-1)%5'</span>^:<span class=\"nu0\">5</span> i.<span class=\"nu0\">10000</span><br/><span class=\"nu0\">3121</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> valid<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> nuts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> k <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">--</span>, nuts <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> nuts <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nuts <span class=\"sy0\">%</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> nuts <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>nuts <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>valid<span class=\"br0\">(</span>n, x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                x<span class=\"sy0\">++;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%d%n\"</span>, n, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 23, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// wakeSplit\u00a0:: Int -&gt; Int -&gt; Int -&gt; Int</span><br/>    <span class=\"kw1\">function</span> wakeSplit<span class=\"br0\">(</span>intNuts<span class=\"sy0\">,</span> intSailors<span class=\"sy0\">,</span> intDepth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> nDepth <span class=\"sy0\">=</span> intDepth <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">?</span> intDepth <span class=\"sy0\">:</span> intSailors<span class=\"sy0\">,</span><br/>            portion <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>intNuts <span class=\"sy0\">/</span> intSailors<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            remain <span class=\"sy0\">=</span> intNuts <span class=\"sy0\">%</span> intSailors<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&gt;=</span> portion <span class=\"sy0\">||</span> remain <span class=\"sy0\">!==</span> <span class=\"br0\">(</span>nDepth <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>            <span class=\"kw2\">null</span> <span class=\"sy0\">:</span> nDepth <span class=\"sy0\">?</span> wakeSplit<span class=\"br0\">(</span><br/>                intNuts <span class=\"sy0\">-</span> portion <span class=\"sy0\">-</span> remain<span class=\"sy0\">,</span> intSailors<span class=\"sy0\">,</span> nDepth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> intNuts<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST for 5, 6, and 7 intSailors</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>intSailors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> intNuts <span class=\"sy0\">=</span> intSailors<span class=\"sy0\">;</span><br/>\u00a0<br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>wakeSplit<span class=\"br0\">(</span>intNuts<span class=\"sy0\">,</span> intSailors<span class=\"br0\">)</span><span class=\"br0\">)</span> intNuts <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> intNuts<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def until(cond; next): def _until: if cond then . else (next|_until) end; _until;</pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function validnutsforsailors(sailors, finalpile)<br/>    for i in sailors:-1:1<br/>        if finalpile\u00a0% sailors\u00a0!= 1<br/>            return false<br/>        end<br/>        finalpile -= Int(floor(finalpile/sailors) + 1)<br/>    end<br/>    (finalpile\u00a0!= 0) &amp;&amp; (finalpile\u00a0% sailors == 0)<br/>end<br/>\u00a0<br/>function runsim()<br/>    println(\"Sailors     Starting Pile\")<br/>    for sailors in 2:9<br/>        finalcount = 0<br/>        while validnutsforsailors(sailors, finalcount) == false<br/>            finalcount += 1<br/>        end<br/>        println(\"$sailors           $finalcount\")<br/>    end<br/>end<br/>\u00a0<br/>runsim()<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> coconuts <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><br/>    outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>ns in <span class=\"nu0\">2</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hidden <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>ns<span class=\"br0\">)</span><br/>        coconuts <span class=\"sy0\">=</span> <span class=\"br0\">(</span>coconuts / ns<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ns + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span>            <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nc <span class=\"sy0\">=</span> coconuts<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in <span class=\"nu0\">1</span>..<span class=\"me1\">ns</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nc <span class=\"sy0\">%</span> ns <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    hidden<span class=\"br0\">[</span>s - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nc / ns <br/>                    nc -<span class=\"sy0\">=</span> hidden<span class=\"br0\">[</span>s - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> ns <span class=\"sy0\">&amp;&amp;</span> nc <span class=\"sy0\">%</span> ns <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        println<span class=\"br0\">(</span><span class=\"st0\">\"$ns sailors require a minimum of $coconuts coconuts\"</span><span class=\"br0\">)</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>t in <span class=\"nu0\">1</span>..<span class=\"me1\">ns</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Sailor $t hides ${hidden[t - 1]}\"</span><span class=\"br0\">)</span><br/>                        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>The monkey gets $ns\"</span><span class=\"br0\">)</span><br/>                        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>Finally, each sailor takes ${nc / ns}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>       <br/>                        continue<span class=\"sy0\">@</span>outer<br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span>  <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> break<br/>            <span class=\"br0\">}</span> <br/>            coconuts +<span class=\"sy0\">=</span> ns<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-2", "loc": 53, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Coconuts;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">CONST</span> MAX_SAILORS <span class=\"sy0\">=</span> <span class=\"nu0\">9</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Scenario<span class=\"br0\">(</span>coconuts<span class=\"sy0\">,</span>ns <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    hidden <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..MAX_SAILORS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>    nc<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>t <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> ns&gt;MAX_SAILORS <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    coconuts <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>coconuts <span class=\"kw1\">DIV</span> ns<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ns <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">LOOP</span><br/>        nc <span class=\"sy0\">:=</span> coconuts;<br/>        <span class=\"kw1\">FOR</span> s<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> ns <span class=\"kw1\">DO</span><br/>            <span class=\"kw1\">IF</span> nc <span class=\"kw1\">MOD</span> ns <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>                hidden<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> nc <span class=\"kw1\">DIV</span> ns;<br/>                nc <span class=\"sy0\">:=</span> nc <span class=\"sy0\">-</span> hidden<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>                <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>s<span class=\"sy0\">=</span>ns<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>nc <span class=\"kw1\">MOD</span> ns <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>                    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i sailors require a minimum of\u00a0%i coconuts<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> ns<span class=\"sy0\">,</span> coconuts<span class=\"br0\">)</span>;<br/>                    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>                    <span class=\"kw1\">FOR</span> t<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> ns <span class=\"kw1\">DO</span><br/>                        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>Sailor\u00a0%i hides\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> hidden<span class=\"br0\">[</span>t<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>                        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>                    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>The monkey gets\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> ns<span class=\"br0\">)</span>;<br/>                    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>                    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>Finally, each sailor takes\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> nc <span class=\"kw1\">DIV</span> ns<span class=\"br0\">)</span>;<br/>                    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">RETURN</span><br/>                <span class=\"kw1\">END</span><br/>            <span class=\"kw1\">ELSE</span><br/>                BREAK<br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>coconuts<span class=\"sy0\">,</span>ns<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Scenario;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    ns <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> ns<span class=\"sy0\">:=</span><span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> MAX_SAILORS <span class=\"kw1\">DO</span><br/>        Scenario<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span>ns<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Coconuts.</pre>"}, {"lang": "Perl 6", "loc": 36, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@ones</span> <span class=\"sy0\">=</span> flat <span class=\"st_h\">'th'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'st'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'nd'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'rd'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'th'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@teens</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'th'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@suffix</span> <span class=\"sy0\">=</span> lazy flat <span class=\"br0\">(</span><span class=\"re0\">@ones</span><span class=\"sy0\">,</span> <span class=\"re0\">@teens</span><span class=\"sy0\">,</span> <span class=\"re0\">@ones</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"co1\"># brute force the first six</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$sailors</span> <span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$coconuts</span> <span class=\"br0\">{</span> <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> check<span class=\"br0\">(</span> <span class=\"re0\">$sailors</span><span class=\"sy0\">,</span> <span class=\"re0\">$coconuts</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># finesse 7 through 15</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">7</span> <span class=\"sy0\">..</span> <span class=\"nu0\">15</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$sailors</span> <span class=\"br0\">{</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> check<span class=\"br0\">(</span> <span class=\"re0\">$sailors</span><span class=\"sy0\">,</span> coconuts<span class=\"br0\">(</span> <span class=\"re0\">$sailors</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is_valid <span class=\"br0\">(</span> <span class=\"re0\">$sailors</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">$nuts</span> <span class=\"kw1\">is</span> copy <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">==</span> <span class=\"re0\">$nuts</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@shares</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$sailors</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$nuts</span> <span class=\"sy0\">%</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">push</span> <span class=\"re0\">@shares</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$nuts</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"re0\">$sailors</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$nuts</span> <span class=\"sy0\">-=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$nuts</span> <span class=\"kw1\">div</span> <span class=\"re0\">$sailors</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@shares</span><span class=\"sy0\">,</span> <span class=\"re0\">$nuts</span> <span class=\"kw1\">div</span> <span class=\"re0\">$sailors</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@shares</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!?</span><span class=\"br0\">(</span><span class=\"re0\">$nuts</span> <span class=\"sy0\">%</span> <span class=\"re0\">$sailors</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> check <span class=\"br0\">(</span><span class=\"re0\">$sailors</span><span class=\"sy0\">,</span> <span class=\"re0\">$coconuts</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">my</span> <span class=\"re0\">@piles</span> <span class=\"sy0\">=</span> is_valid<span class=\"br0\">(</span><span class=\"re0\">$sailors</span><span class=\"sy0\">,</span> <span class=\"re0\">$coconuts</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Sailors $sailors: Coconuts $coconuts:\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"re0\">@piles</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$k</span> <span class=\"br0\">{</span><br/>             <span class=\"kw3\">say</span> <span class=\"st0\">\"{$k+1}@suffix[$k+1] takes @piles[$k], gives 1 to the monkey.\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"The next morning, each sailor takes @piles[*-1]<span class=\"es0\">\\n</span>with none left over for the monkey.\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> coconuts <span class=\"br0\">(</span> <span class=\"re0\">$sailors</span> <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$sailors</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$sailors</span> <span class=\"sy0\">**</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> coconuts <span class=\"br0\">(</span> <span class=\"re0\">$sailors</span> <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">**</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sailors</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">procedure solve(integer sailors)<br/>integer m, sm1 = sailors-1<br/>    if sm1=0 then   -- edge condition for solve(1) [ avoid /0 ]<br/>        m = sailors<br/>    else<br/>        for n=sailors to 1_000_000_000 by sailors do    -- morning pile divisible by #sailors<br/>            m = n<br/>            for j=1 to sailors do               -- see if all of the sailors could..<br/>                if remainder(m,sm1)!=0 then     -- ..have pushed together sm1 piles<br/>                    m = 0                       --  (no: try a higher n)<br/>                    exit<br/>                end if<br/>                m = sailors*m/sm1+1     -- add sailor j's stash and one for the monkey<br/>            end for<br/>            if m!=0 then exit end if<br/>        end for<br/>    end if<br/>    printf(1,\"Solution with\u00a0%d sailors:\u00a0%d\\n\",{sailors,m})<br/>    for i=1 to sailors do<br/>        m -= 1                                  -- one for the monkey<br/>        m /= sailors<br/>        printf(1,\"Sailor #%d takes\u00a0%d, giving 1 to the monkey and leaving\u00a0%d\\n\",{i,m,m*sm1})<br/>        m *= (sm1)<br/>    end for<br/>    printf(1,\"In the morning each sailor gets\u00a0%d nuts\\n\",m/sailors)<br/>end procedure<br/>\u00a0<br/>solve(5)<br/>solve(6)</pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> monkey_coconuts<span class=\"br0\">(</span>sailors<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Parameterised the number of sailors using an inner loop including the last mornings case\"</span>    <br/>    nuts <span class=\"sy0\">=</span> sailors<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        n0<span class=\"sy0\">,</span> wakes <span class=\"sy0\">=</span> nuts<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> sailor <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sailors + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            portion<span class=\"sy0\">,</span> remainder <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n0<span class=\"sy0\">,</span> sailors<span class=\"br0\">)</span><br/>            wakes.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n0<span class=\"sy0\">,</span> portion<span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> portion <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> remainder <span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> sailor <span class=\"sy0\">!=</span> sailors <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>                nuts +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">break</span><br/>            n0 <span class=\"sy0\">=</span> n0 - portion - remainder<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">return</span> nuts<span class=\"sy0\">,</span> wakes<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    <span class=\"kw1\">for</span> sailors <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>:<br/>        nuts<span class=\"sy0\">,</span> wake_stats <span class=\"sy0\">=</span> monkey_coconuts<span class=\"br0\">(</span>sailors<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>For\u00a0%i sailors the initial nut count is\u00a0%i\"</span>\u00a0% <span class=\"br0\">(</span>sailors<span class=\"sy0\">,</span> nuts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"On each waking, the nut count, portion taken, and monkeys share are:<span class=\"es0\">\\n</span> \"</span><span class=\"sy0\">,</span> <br/>              <span class=\"st0\">',<span class=\"es0\">\\n</span>  '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw3\">repr</span><span class=\"br0\">(</span>ws<span class=\"br0\">)</span> <span class=\"kw1\">for</span> ws <span class=\"kw1\">in</span> wake_stats<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (wake-and-split nuts sailors depth wakes)<br/>  (define-values (portion remainder) (quotient/remainder nuts sailors))<br/>  (define monkey (if (zero? depth) 0 1))<br/>  (define new-wakes (cons (list nuts portion remainder) wakes))<br/>  (and (positive? portion)<br/>       (= remainder monkey)<br/>       (if (zero? depth)<br/>           new-wakes<br/>           (wake-and-split (- nuts portion remainder) sailors (sub1 depth) new-wakes))))<br/>\u00a0<br/>(define (sleep-and-split nuts sailors)<br/>  (wake-and-split nuts sailors sailors '()))<br/>\u00a0<br/>(define (monkey_coconuts (sailors 5))<br/>    (let loop ([nuts sailors])<br/>      (or (sleep-and-split nuts sailors)<br/>          (loop (add1 nuts)))))<br/>\u00a0<br/>(for ([sailors (in-range 5 7)])<br/>  (define wakes (monkey_coconuts sailors))<br/>  (printf \"For ~a sailors the initial nut count is ~a\\n\" sailors (first (last wakes)))<br/>  (map displayln (reverse wakes))<br/>  (newline))</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  solves  a  riddle  of 5 sailors, a pile of coconuts, and a monkey.      */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L H <span class=\"sy0\">.</span>;        <span class=\"kw1\">if</span> L==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> L=<span class=\"nu0\">5</span>       <span class=\"coMULTI\">/*L  not specified?   Then use default.*/</span><br/>                        <span class=\"kw1\">if</span> H==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> H=<span class=\"nu0\">6</span>       <span class=\"coMULTI\">/*H   \"      \"          \"   \"  default.*/</span><br/>                                                 <span class=\"coMULTI\">/*{Tars is an old name for sailors.}   */</span><br/>     <span class=\"kw1\">do</span> n=L  <span class=\"kw2\">to</span> H                                <span class=\"coMULTI\">/*traipse through a number of sailors. */</span><br/>       <span class=\"kw1\">do</span> $=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>valid<span class=\"br0\">(</span>n,$<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*perform while not valid coconuts.    */</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'sailors='</span>n    <span class=\"st0\">\"  coconuts=\"</span>$           <span class=\"coMULTI\">/*display number of sailors &amp; coconuts.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>valid: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n,nuts              <span class=\"coMULTI\">/*obtain the number sailors &amp; coconuts.*/</span><br/>                 <span class=\"kw1\">do</span> k=n  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n            <span class=\"coMULTI\">/*step through the possibilities.      */</span><br/>                 <span class=\"kw1\">if</span> nuts<span class=\"sy0\">//</span>n<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*Not one coconut left?   No solution. */</span><br/>                 nuts=nuts - <span class=\"br0\">(</span><span class=\"nu0\">1</span>+nuts%n<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*subtract number of coconuts from pile*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>       <span class=\"kw1\">return</span> <span class=\"br0\">(</span>nuts<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span><span class=\"br0\">(</span>nuts<span class=\"sy0\">//</span>n<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*see if number coconuts&gt;0 &amp; remainder.*/</span></pre>"}, {"lang": "Ring", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Sailors, coconuts and a monkey problem<br/>\u00a0<br/>scm(5)<br/>scm(6)<br/>\u00a0<br/>func scm(sailors)<br/>        sm1 = sailors-1<br/>        if sm1 = 0<br/>           m = sailors<br/>        else<br/>           for n=sailors to 1000000000 step sailors    <br/>                m = n<br/>                for j=1 to sailors              <br/>                     if m\u00a0% sm1\u00a0!= 0     <br/>                        m = 0                     <br/>                        exit<br/>                     ok<br/>                     m = sailors*m/sm1+1   <br/>                next<br/>                if m\u00a0!= 0 <br/>                   exit <br/>                ok<br/>           next<br/>        ok<br/>        see \"Solution with \" + sailors + \" sailors: \" + m + nl<br/>        for i=1 to sailors <br/>             m = m - 1                                  <br/>             m = m / sailors<br/>             see \"Sailor \" + i + \" takes \" + m + \" giving 1 to the monkey and leaving \" + m*sm1 + nl<br/>             m = m * sm1<br/>        next<br/>        see \"In the morning each sailor gets \" + m/sailors + \" nuts\" + nl + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> valid?<span class=\"br0\">(</span>sailor, nuts<span class=\"br0\">)</span><br/>  sailor.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nuts <span class=\"sy0\">%</span> sailor<span class=\"br0\">)</span>\u00a0!= <span class=\"nu0\">1</span><br/>    nuts <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> nuts <span class=\"sy0\">/</span> sailor<br/>  <span class=\"kw1\">end</span><br/>  nuts <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> nuts <span class=\"sy0\">%</span> sailor == <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>sailor<span class=\"sy0\">|</span><br/>  n = sailor<br/>  n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> valid?<span class=\"br0\">(</span>sailor, n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>#{sailor} sailors =&gt; #{n} coconuts\"</span><br/>  <span class=\"br0\">(</span>sailor<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    div, mod = n.<span class=\"me1\">divmod</span><span class=\"br0\">(</span>sailor<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"  #{[n, div, mod]}\"</span><br/>    n <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> div<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Sailors <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> valid<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, <span class=\"sy0\">_</span>nuts<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nuts <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>nuts<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- n until <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nuts <span class=\"sy0\">%</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>      nuts -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + nuts / n<br/>    <span class=\"br0\">}</span><br/>    nuts <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>nuts <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>nSailors <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> until <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>valid<span class=\"br0\">(</span>nSailors, x<span class=\"br0\">)</span><span class=\"br0\">)</span> x +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    println<span class=\"br0\">(</span>f<span class=\"st0\">\"$nSailors%d: $x%d\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func coconuts<span class=\"br0\">(</span>sailors, monkeys=<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sailors <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>monkeys <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>sailors <span class=\"sy0\">&lt;</span>= monkeys<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    var blue_cocos = sailors<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    var pow_bc = blue_cocos<span class=\"sy0\">**</span>sailors<br/>    var x_cocos = pow_bc<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x_cocos<span class=\"sy0\">-</span>blue_cocos<span class=\"br0\">)</span><span class=\"sy0\">%</span>sailors <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x_cocos<span class=\"sy0\">-</span>blue_cocos<span class=\"br0\">)</span><span class=\"sy0\">/</span>sailors <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x_cocos <span class=\"sy0\">+</span>= pow_bc<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> monkeys<span class=\"sy0\">*</span><span class=\"br0\">(</span>x_cocos <span class=\"sy0\">/</span> pow_bc <span class=\"sy0\">*</span> sailors<span class=\"sy0\">**</span>sailors <span class=\"sy0\">-</span> blue_cocos<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">2</span>.<span class=\"me1\">to</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>sailor<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"#{sailor}: #{coconuts(sailor)}\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 49, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> assert <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>msg <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>    <span class=\"sy0\">;</span><span class=\"co1\"># for \"static\" assertions that throw nice errors</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$expr</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$msg</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> msg <span class=\"st0\">\"{[uplevel 1 [list subst -noc $expr]]}\"</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        throw <span class=\"br0\">{</span>ASSERT ERROR<span class=\"br0\">}</span> <span class=\"st0\">\"{$expr} $msg\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> divmod <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> / <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> overnight <span class=\"br0\">{</span>ns nn<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> s <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$ns</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span>divmod <span class=\"re0\">$nn</span> <span class=\"re0\">$ns</span><span class=\"br0\">]</span> q r<br/>        assert <span class=\"br0\">{</span><span class=\"re0\">$r</span> eq <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"st0\">\"Incorrect remainder in round $s (expected 1, got $r)\"</span><br/>        <span class=\"kw1\">set</span> nn <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$ns</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"re0\">$s</span> <span class=\"re0\">$q</span> <span class=\"re0\">$r</span> <span class=\"re0\">$nn</span><br/>    <span class=\"br0\">}</span><br/>    lassign <span class=\"br0\">[</span>divmod <span class=\"re0\">$nn</span> <span class=\"re0\">$ns</span><span class=\"br0\">]</span> q r<br/>    assert <span class=\"br0\">{</span><span class=\"re0\">$r</span> eq <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"st0\">\"Incorrect remainder at end (expected 0, got $r)\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> minnuts <span class=\"br0\">{</span>nsailors<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> nnuts<br/>        try <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> result <span class=\"br0\">[</span>overnight <span class=\"re0\">$nsailors</span> <span class=\"re0\">$nnuts</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> on <span class=\"kw1\">error</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># continue</span><br/>        <span class=\"br0\">}</span> on ok <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$nsailors: $nnuts\"</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>sailor takes gives leaves<span class=\"br0\">}</span> <span class=\"re0\">$result</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\" Sailor #$sailor takes $takes, giving $gives to the monkey and leaves $leaves\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"In the morning, each sailor gets [expr {$leaves/$nsailors}] nuts\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">foreach</span> n <span class=\"br0\">{</span><span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Solution with $n sailors:\"</span><br/>    minnuts <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 26, "block": "<pre class=\"text highlighted_source\">For n = 2 To 7<br/>  t = 0<br/>  For x = 1 Step 1 While t = 0<br/>    t = FUNC(_Total(n,x))<br/>  Next<br/>  Print n;\": \";t;Tab(12); x - 1<br/>Next<br/>\u00a0<br/>End<br/>\u00a0<br/>_Total Param(2)<br/>  Local(1)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"593b19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"3a587a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"c2a382\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  <a class=\"__cf_email__\" data-cfemail=\"325372\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"9bfadb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"ccaf8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To <a class=\"__cf_email__\" data-cfemail=\"0d6c4d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>    If <a class=\"__cf_email__\" data-cfemail=\"167456\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"284968\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Then<br/>       <a class=\"__cf_email__\" data-cfemail=\"0c6e4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>       Break<br/>    EndIf<br/>\u00a0<br/>    <a class=\"__cf_email__\" data-cfemail=\"1b795b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"97f5d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1 + <a class=\"__cf_email__\" data-cfemail=\"315371\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"b7d6f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Next<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"600220\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">fcn monkey_coconuts(sailors=5){<br/>   nuts,wakes:=sailors,List();<br/>   while(True){<br/>      n0:=nuts; wakes.clear();<br/>      foreach sailor in (sailors + 1){<br/>         portion, remainder\u00a0:= n0.divr(sailors);<br/>\t wakes.append(T(n0, portion, remainder));<br/>\t if(portion &lt;= 0 or remainder\u00a0!= (sailor\u00a0!= sailors).toInt()){<br/>\t    nuts += 1;<br/>\t    break;<br/>\t }<br/>\t n0 = n0 - portion - remainder;<br/>      }<br/>      fallthrough{ break }<br/>   }<br/>\u00a0<br/>   return(nuts, wakes)<br/>}<br/>foreach sailors in ([5..6]){<br/>   nuts, wake_stats\u00a0:= monkey_coconuts(sailors);<br/>   println(\"For\u00a0%d sailors the initial nut count is\u00a0%,d\".fmt(sailors, nuts));<br/>   println(\"On each waking, the nut count, portion taken, and monkeys share are:\\n   \",<br/>      wake_stats.concat(\"\\n   \"));<br/>}</pre>"}]}