{"task": "HTTPS", "blocks": [{"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> AWS.<span class=\"me1\">Client</span>;<br/><span class=\"kw3\">with</span> AWS.<span class=\"me1\">Response</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> GetHttps <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>AWS.<span class=\"me1\">Response</span>.<span class=\"me1\">Message_Body</span> <span class=\"br0\">(</span>AWS.<span class=\"me1\">Client</span>.<span class=\"me1\">Get</span> <span class=\"br0\">(</span><br/>      URL =&gt; <span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> GetHttps;<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>URL      <span class=\"sy0\">:=</span> <span class=\"st0\">\"https://sourceforge.net/\"</span><br/>WININET_Init<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0%\uf72b html <span class=\"sy0\">:=</span> UrlGetContents<span class=\"br0\">(</span>URL<span class=\"br0\">)</span><br/>WININET_UnInit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#include</span></a> urlgetcontents<span class=\"sy0\">.</span>ahk<br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#include</span></a> wininet<span class=\"sy0\">.</span>ahk<br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 70, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' SSL library</span><br/>PRAGMA INCLUDE &lt;openssl/ssl.<span class=\"me1\">h</span>&gt; &lt;openssl/<span class=\"kw1\">err</span>.<span class=\"me1\">h</span>&gt;<br/>PRAGMA LDFLAGS -lcrypto -lssl<br/>\u00a0<br/><span class=\"co1\">' Using RAM disk as a string</span><br/><span class=\"kw1\">OPTION</span> MEMSTREAM <span class=\"kw1\">TRUE</span><br/>\u00a0<br/><span class=\"co1\">' BaCon must not choke on SSL functions</span><br/><span class=\"kw1\">OPTION</span> PARSE <span class=\"kw1\">FALSE</span><br/>\u00a0<br/><span class=\"co1\">' Request to send to remote webserver (CONST is a macro def)</span><br/><span class=\"kw1\">CONST</span> req$ = <span class=\"st0\">\"GET / HTTP/1.1<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>Host: \"</span> &amp; TOKEN$<span class=\"br0\">(</span>website$, <span class=\"nu0\">1</span>, <span class=\"st0\">\":\"</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span><span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/><span class=\"co1\">' Some SSL related variables</span><br/><span class=\"kw1\">DECLARE</span> ctx <span class=\"kw1\">TYPE</span> SSL_CTX*<br/><span class=\"kw1\">DECLARE</span> meth <span class=\"kw1\">TYPE</span> <span class=\"kw1\">const</span> SSL_METHOD*<br/><span class=\"kw1\">DECLARE</span> ssl <span class=\"kw1\">TYPE</span> SSL*<br/><span class=\"kw1\">DECLARE</span> sbio <span class=\"kw1\">TYPE</span> BIO*<br/>\u00a0<br/><span class=\"co1\">' Which website we need to fetch</span><br/><span class=\"kw1\">IF</span> AMOUNT<span class=\"br0\">(</span>ARGUMENT$<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>    website$ = <span class=\"st0\">\"www.google.com:443\"</span><br/><span class=\"kw1\">ELSE</span><br/>    website$ = TOKEN$<span class=\"br0\">(</span>ARGUMENT$, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"co1\">' Initialize SSL</span><br/>SSL_library_init<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>SSL_load_error_strings<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Create SSL context object</span><br/>meth = SSLv23_method<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ctx = SSL_CTX_new<span class=\"br0\">(</span>meth<span class=\"br0\">)</span><br/>ssl = SSL_new<span class=\"br0\">(</span>ctx<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Cpnnect to website creating a socket</span><br/><span class=\"kw1\">OPEN</span> website$ <span class=\"kw1\">FOR</span> NETWORK <span class=\"kw1\">AS</span> mynet<br/>\u00a0<br/><span class=\"co1\">' Perform the SSL handshake using the socket</span><br/>sbio = BIO_new_socket<span class=\"br0\">(</span>mynet, BIO_NOCLOSE<span class=\"br0\">)</span><br/>SSL_set_bio<span class=\"br0\">(</span>ssl, sbio, sbio<span class=\"br0\">)</span><br/><span class=\"kw1\">IF</span> SSL_connect<span class=\"br0\">(</span>ssl<span class=\"br0\">)</span> &lt;= <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    EPRINT <span class=\"st0\">\"SSL connect error\"</span><br/>    <span class=\"kw1\">END</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"co1\">' Setup buffer for the data coming back</span><br/>mem = MEMORY<span class=\"br0\">(</span><span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/><span class=\"kw1\">OPEN</span> mem <span class=\"kw1\">FOR</span> MEMORY <span class=\"kw1\">AS</span> buf$<br/>\u00a0<br/><span class=\"co1\">' Send the GET request to the remote server</span><br/>SSL_write<span class=\"br0\">(</span>ssl, req$, <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>req$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>REPEAT<br/>    <span class=\"co1\">' Fetch the response into the buffer</span><br/>    SSL_read<span class=\"br0\">(</span>ssl, buf$, <span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/>    total$ = total$ &amp; buf$<br/>    memset<span class=\"br0\">(</span><span class=\"br0\">(</span>void*<span class=\"br0\">)</span>mem, <span class=\"nu0\">0</span>, <span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/><span class=\"kw1\">UNTIL</span> ISFALSE<span class=\"br0\">(</span><span class=\"kw1\">WAIT</span><span class=\"br0\">(</span>mynet, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Bring down SSL</span><br/>SSL_shutdown<span class=\"br0\">(</span>ssl<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Close handles and free memory</span><br/><span class=\"kw1\">CLOSE</span> MEMORY buf$<br/><span class=\"kw1\">CLOSE</span> NETWORK mynet<br/>FREE mem<br/>\u00a0<br/><span class=\"co1\">' Show result</span><br/><span class=\"kw1\">PRINT</span> total$<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:: Must have curl.exe<br/>curl.exe -k -s -L https://sourceforge.net/<br/>\u00a0</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;curl/curl.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        CURL <span class=\"sy0\">*</span>curl<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span>CURL_ERROR_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>curl <span class=\"sy0\">=</span> curl_easy_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                curl_easy_setopt<span class=\"br0\">(</span>curl<span class=\"sy0\">,</span> CURLOPT_URL<span class=\"sy0\">,</span> <span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                curl_easy_setopt<span class=\"br0\">(</span>curl<span class=\"sy0\">,</span> CURLOPT_FOLLOWLOCATION<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                curl_easy_setopt<span class=\"br0\">(</span>curl<span class=\"sy0\">,</span> CURLOPT_ERRORBUFFER<span class=\"sy0\">,</span> buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>curl_easy_perform<span class=\"br0\">(</span>curl<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> CURLE_OK<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                curl_easy_cleanup<span class=\"br0\">(</span>curl<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> client <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> WebClient<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> client<span class=\"sy0\">.</span><span class=\"me1\">DownloadString</span><span class=\"br0\">(</span><span class=\"st0\">\"https://www.google.com\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>duck<span class=\"sy0\">-</span>streams\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">(</span>slurp<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>slurp<span class=\"sy0\">*</span> <span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> wget-drakma-string <span class=\"br0\">(</span>url <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>out *standard-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Grab the body as a string, and write it to out.\"</span><br/>  <span class=\"br0\">(</span>write-string <span class=\"br0\">(</span>drakma<span class=\"sy0\">:</span><span class=\"me1\">http-request</span> url<span class=\"br0\">)</span> out<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> wget-drakma-stream <span class=\"br0\">(</span>url <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>out *standard-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Grab the body as a stream, and write it to out.\"</span><br/>  <span class=\"br0\">(</span>loop with body <span class=\"sy0\">=</span> <span class=\"br0\">(</span>drakma<span class=\"sy0\">:</span><span class=\"me1\">http-request</span> url <span class=\"sy0\">:</span><span class=\"me1\">want-stream</span> t<span class=\"br0\">)</span><br/>        for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line body <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        while line <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-line line<span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span>close body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Use</span><br/><span class=\"br0\">(</span>wget-drakma-stream <span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 22, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> ShowHTTPS<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> IdHttp<span class=\"sy1\">,</span> IdSSLOpenSSL<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  lHTTP<span class=\"sy1\">:</span> TIdHTTP<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lHTTP <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TIdHTTP<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    lHTTP<span class=\"sy1\">.</span><span class=\"me1\">IOHandler</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TIdSSLIOHandlerSocketOpenSSL<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>lHTTP<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lHTTP<span class=\"sy1\">.</span><span class=\"me1\">HandleRedirects</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> lHTTP<span class=\"sy1\">.</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net/'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lHTTP<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 6, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; asynchronous call back definition</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>success name text<span class=\"br0\">)</span> <span class=\"br0\">(</span>writeln 'Loaded name<span class=\"br0\">)</span> <span class=\"br0\">(</span>writeln text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; </span><br/><span class=\"br0\">(</span>file<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> success <span class=\"st0\">\"https:/sourceforge.net\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 12, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>main<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Url</span>|<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <a href=\"http://erlang.org/doc/man/inets.html\"><span class=\"kw5\">inets</span></a>:<span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <a href=\"http://erlang.org/doc/man/ssl.html\"><span class=\"kw5\">ssl</span></a>:<span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/http.html\"><span class=\"kw5\">http</span></a>:<span class=\"re3\">request</span><span class=\"br0\">(</span><span class=\"kw3\">get</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">URL</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>ssl<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span>verify<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>       <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_V</span><span class=\"sy1\">,</span> <span class=\"re5\">_H</span><span class=\"sy1\">,</span> <span class=\"re5\">Body</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">Body</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>       <span class=\"br0\">{</span>error<span class=\"sy1\">,</span> <span class=\"re5\">Res</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Res</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> https_example<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">code</span><br/>   <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">command</span><br/>   <span class=\"kw3\">logical</span><span class=\"sy0\">::</span> <span class=\"me2\">waitForProcess</span><br/>\u00a0<br/>   <span class=\"co1\">! execute Node.js code</span><br/>   code <span class=\"sy0\">=</span> <span class=\"st0\">\"var https = require('https'); &amp;<br/>   https.get('https://sourceforge.net/', function(res) {&amp;<br/>   console.log('statusCode: ', res.statusCode);&amp;<br/>   console.log('Is authorized:' + res.socket.authorized);&amp;<br/>   console.log(res.socket.getPeerCertificate());&amp;<br/>   res.on('data', function(d) {process.stdout.write(d);});});\"</span><br/>\u00a0<br/>   command <span class=\"sy0\">=</span> <span class=\"st0\">'node -e \"'</span> <span class=\"sy0\">//</span> code <span class=\"sy0\">//</span> <span class=\"st0\">'\"'</span><br/>   <span class=\"kw1\">call</span> execute_command_line <span class=\"br0\">(</span>command, wait<span class=\"sy0\">=</span>waitForProcess<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> https_example<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co2\">#light</span><br/><span class=\"kw1\">let</span> wget <span class=\"br0\">(</span>url\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Net</span>.<span class=\"me1\">WebClient</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">DownloadString</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>print[read[\"https://sourceforge.net/\"]<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 18, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"io\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"net/http\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    r<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> http<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatalln<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    io<span class=\"sy3\">.</span>Copy<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> r<span class=\"sy3\">.</span>Body<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=URL&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">URL</span></a><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachLine\"><span class=\"kw7\">eachLine</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>runhaskell<br/>\u00a0<br/><span class=\"kw1\">import</span> Network<span class=\"sy0\">.</span>HTTP<span class=\"sy0\">.</span>Conduit<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Lazy <span class=\"kw1\">as</span> L<br/><span class=\"kw1\">import</span> Network <span class=\"br0\">(</span>withSocketsDo<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> withSocketsDo<br/>    <span class=\"sy0\">$</span> simpleHttp <span class=\"st0\">\"https://sourceforge.net/\"</span> <span class=\"sy0\">&gt;&gt;=</span> L<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a></pre>"}, {"lang": "Icon and Unicon", "loc": 7, "block": "<pre class=\"unicon highlighted_source\"><span class=\"co1\"># Requires Unicon version 13</span><br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>    url <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"br0\">)</span><br/>    w <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>url<span class=\"sy0\">,</span> <span class=\"st0\">\"m-\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Cannot open \"</span> <span class=\"sy0\">||</span> url<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">read</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">close</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Ioke", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>connection = URL new(\"https://sourceforge.net\") openConnection<br/>scanner = Scanner new(connection getInputStream)<br/>\u00a0<br/>while(scanner hasNext,<br/>  scanner next println<br/>)<br/>\u00a0</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>   #page=: gethttp<span class=\"st_h\">'https://sourceforge.net'</span><br/><span class=\"nu0\">0</span><br/>   #page=: <span class=\"st_h\">'--no-check-certificate'</span> gethttp<span class=\"st_h\">'https://sourceforge.net'</span><br/><span class=\"nu0\">900</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aurl+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">URL</span></a> url <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aurl+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">URL</span></a><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>HttpsURLConnection connection <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HttpsURLConnection<span class=\"br0\">)</span> url.<span class=\"me1\">openConnection</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Scanner scanner <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span>connection.<span class=\"me1\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>scanner.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>scanner.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>url<span class=\"sy0\">,</span>callback<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//on some browsers you can check certificate information.</span><br/>xhr<span class=\"sy0\">=</span><span class=\"kw1\">new</span> XMLHttpRequest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>xhr.<span class=\"me1\">open</span><span class=\"br0\">(</span><span class=\"st0\">'GET'</span><span class=\"sy0\">,</span>url<span class=\"sy0\">,</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>xhr.<span class=\"me1\">onreadystatechange</span><span class=\"sy0\">=</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>xhr.<span class=\"me1\">readyState</span><span class=\"sy0\">==</span>xhr.<span class=\"me1\">DONE</span><span class=\"br0\">)</span><span class=\"br0\">{</span>callback<span class=\"br0\">(</span>xhr<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>xhr.<span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net'</span><span class=\"sy0\">,</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>xhr<span class=\"br0\">)</span><span class=\"br0\">{</span>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>xhr.<span class=\"me1\">response</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>\u00a0<br/>using Requests<br/>\u00a0<br/>str = readstring(get(\"https://sourceforge.net/\"))</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">URL</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">net</span>.<span class=\"me1\">ssl</span>.<span class=\"me1\">HttpsURLConnection</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">InputStreamReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> url <span class=\"sy0\">=</span> URL<span class=\"br0\">(</span><span class=\"st0\">\"https://en.wikipedia.org/wiki/Main_Page\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> connection <span class=\"sy0\">=</span> url.<span class=\"me1\">openConnection</span><span class=\"br0\">(</span><span class=\"br0\">)</span> as HttpsURLConnection<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isr <span class=\"sy0\">=</span> InputStreamReader<span class=\"br0\">(</span>connection.<span class=\"me1\">inputStream</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> Scanner<span class=\"br0\">(</span>isr<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    sc.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">local(x = curl('https://sourceforge.net'))<br/>local(y = #x-&gt;result)<br/>#y-&gt;asString</pre>"}, {"lang": "Lingo", "loc": 10, "block": "<pre class=\"text highlighted_source\">ch = xtra(\"Curl\").new()<br/>CURLOPT_URL = 10002<br/>ch.setOption(CURLOPT_URL, \"https://sourceforge.net\")<br/>res = ch.exec(1) <br/>if integerP(res) then<br/>  put \"Error:\" &amp;&amp; curl_error(res)<br/>else<br/>  put \"Result:\" &amp;&amp; res.readRawString(res.length)<br/>end if<br/>-- \"Result: &lt;!doctype html&gt; ...\"</pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">libURLSetSSLVerification true  --check cert<br/>get URL \"https://sourceforge.net/\"</pre>"}, {"lang": "LSL", "loc": 20, "block": "<pre class=\"text highlighted_source\">string sURL = \"https://SourceForge.Net/\";<br/>key kHttpRequestId;<br/>default {<br/>\tstate_entry() {<br/>\t\tkHttpRequestId = llHTTPRequest(sURL, [], \"\");<br/>\t}<br/>\thttp_response(key kRequestId, integer iStatus, list lMetaData, string sBody) {<br/>\t\tif(kRequestId==kHttpRequestId) {<br/>\t\t\tllOwnerSay(\"Status=\"+(string)iStatus);<br/>\t\t\tinteger x = 0;<br/>\t\t\tfor(x=0\u00a0; x&lt;llGetListLength(lMetaData)\u00a0; x++) {<br/>\t\t\t\tllOwnerSay(\"llList2String(lMetaData, \"+(string)x+\")=\"+llList2String(lMetaData, x));<br/>\t\t\t}<br/>\t\t\tlist lBody = llParseString2List(sBody, [\"\\n\"], []);<br/>\t\t\tfor(x=0\u00a0; x&lt;llGetListLength(lBody)\u00a0; x++) {<br/>\t\t\t\tllOwnerSay(\"llList2String(lBody, \"+(string)x+\")=\"+llList2String(lBody, x));<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> request <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'http.request'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> headers<span class=\"sy0\">,</span> stream <span class=\"sy0\">=</span> request<span class=\"sy0\">.</span>new_from_uri<span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>go<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> body <span class=\"sy0\">=</span> stream<span class=\"sy0\">:</span>get_body_as_string<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> status <span class=\"sy0\">=</span> headers<span class=\"sy0\">:</span>get<span class=\"br0\">(</span><span class=\"st0\">':status'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">'Status:\u00a0%d<span class=\"es1\">\\n</span>Body:\u00a0%s<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">,</span> status<span class=\"sy0\">,</span> body<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>content\u00a0:= URL:-Get( \"https://www.google.ca/\" );<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>content=Import[\"https://sourceforge.net\", \"HTML\"]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">s=urlread<span class=\"br0\">(</span><span class=\"co2\">'https://sourceforge.net/'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nemerle", "loc": 17, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Net;<br/>using System.IO;<br/>\u00a0<br/>module HTTP<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def wc = WebClient();<br/>        def myStream = wc.OpenRead(https://sourceforge.com);<br/>        def sr = StreamReader(myStream);<br/>\u00a0<br/>        WriteLine(sr.ReadToEnd());<br/>        myStream.Close()<br/>    }<br/>}</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><span class=\"sy1\">!</span> <span class=\"st0\">\"curl https://sourceforge.net\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">import httpclient<br/>\u00a0<br/>var client = newHttpClient()<br/>echo client.getContent(\"https://sourceforge.net\")</pre>"}, {"lang": "Objeck", "loc": 13, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> HTTP<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> HttpsTest <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    client <span class=\"sy0\">:=</span> HttpsClient<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    lines <span class=\"sy0\">:=</span> client<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> lines<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      lines<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 16, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co2\">{$mode objfpc}{$H+}</span><br/><span class=\"kw1\">uses</span> fphttpclient<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  hc<span class=\"sy1\">:</span> tfphttpclient<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  hc <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tfphttpclient<span class=\"sy1\">.</span><span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> hc<span class=\"sy1\">.</span><span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"st0\">'https://www.example.com'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">finally</span><br/>    hc<span class=\"sy1\">.</span><span class=\"me1\">free</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> LWP<span class=\"sy0\">::</span><span class=\"me2\">UserAgent</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$url</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'https://www.rosettacode.org'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$response</span> <span class=\"sy0\">=</span> LWP<span class=\"sy0\">::</span><span class=\"me2\">UserAgent</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">new</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">get</span><span class=\"br0\">(</span> <span class=\"re0\">$url</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$response</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">is_success</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Failed to GET '$url': \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$response</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">status_line</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$response</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">as_string</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> WWW<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> get <span class=\"st_h\">'https://sourceforge.net/'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">include builtins\\libcurl.e<br/>curl_global_init()<br/>atom curl = curl_easy_init()<br/>curl_easy_setopt(curl, CURLOPT_URL, \"https://sourceforge.net/\")<br/>object res = curl_easy_perform_ex(curl)<br/>curl_easy_cleanup(curl)<br/>curl_global_cleanup()<br/>\u00a0<br/>puts(1,res)</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/file_get_contents\"><span class=\"kw3\">file_get_contents</span></a><span class=\"br0\">(</span><span class=\"st_h\">'https://sourceforge.net'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(in '(curl \"https://sourceforge.net\")  # Open a pipe to 'curl'<br/>   (out NIL (echo)) )                  # Echo to standard output<br/>\u00a0</pre>"}, {"lang": "Pike", "loc": 5, "block": "<pre class=\"pike highlighted_source\">\u00a0<br/>int main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, Protocols.<span class=\"me1\">HTTP</span>.<span class=\"me1\">get_url_data</span><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$wc</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> Net.WebClient<br/><span class=\"re0\">$wc</span>.DownloadString<span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">request</span> <span class=\"kw1\">import</span> urlopen<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>urlopen<span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net/'</span><span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">library(RCurl)<br/>webpage &lt;- getURL(\"https://sourceforge.net/\", .opts=list(followlocation=TRUE, ssl.verifyhost=FALSE, ssl.verifypeer=FALSE))</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require net/url)<br/>(copy-port (get-pure-port (string-&gt;url \"https://www.google.com\")<br/>                          #:redirections 100)<br/>           (current-output-port))<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      Dim sock As New HTTPSecureSocket<br/>      Print(sock.Get(\"https://sourceforge.net\", 10))  //set the timeout period to 10 seconds.<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cStr= download(\"http://sourceforge.net/\")<br/>see cStr + nl<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 17, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'net/https'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'uri'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'pp'</span><br/>\u00a0<br/>uri = <span class=\"kw4\">URI</span>.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net'</span><span class=\"br0\">)</span><br/>http = <span class=\"re2\">Net::HTTP</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>uri.<span class=\"me1\">host</span>,uri.<span class=\"me1\">port</span><span class=\"br0\">)</span><br/>http.<span class=\"me1\">use_ssl</span> = <span class=\"kw2\">true</span><br/>http.<span class=\"me1\">verify_mode</span> = <span class=\"re2\">OpenSSL::SSL::VERIFY_NONE</span><br/>\u00a0<br/>http.<span class=\"me1\">start</span> <span class=\"kw1\">do</span><br/>  content = http.<span class=\"me1\">get</span><span class=\"br0\">(</span>uri<span class=\"br0\">)</span><br/>  <span class=\"kw3\">p</span> <span class=\"br0\">[</span>content.<span class=\"me1\">code</span>, content.<span class=\"me1\">message</span><span class=\"br0\">]</span><br/>  pp content.<span class=\"me1\">to_hash</span><br/>  <span class=\"kw3\">puts</span> content.<span class=\"me1\">body</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 17, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'net/https'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'uri'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'pp'</span><br/>\u00a0<br/>uri = <span class=\"kw4\">URI</span>.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">'https://sourceforge.net'</span><span class=\"br0\">)</span><br/>http = <span class=\"re2\">Net::HTTP</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>uri.<span class=\"me1\">host</span>,uri.<span class=\"me1\">port</span><span class=\"br0\">)</span><br/>http.<span class=\"me1\">use_ssl</span> = <span class=\"kw2\">true</span><br/>http.<span class=\"me1\">verify_mode</span> = <span class=\"re2\">OpenSSL::SSL::VERIFY_NONE</span><br/>\u00a0<br/>http.<span class=\"me1\">start</span> <span class=\"kw1\">do</span><br/>  content = http.<span class=\"me1\">get</span><span class=\"br0\">(</span>uri<span class=\"br0\">)</span><br/>  <span class=\"kw3\">p</span> <span class=\"br0\">[</span>content.<span class=\"me1\">code</span>, content.<span class=\"me1\">message</span><span class=\"br0\">]</span><br/>  pp content.<span class=\"me1\">to_hash</span><br/>  <span class=\"kw3\">puts</span> content.<span class=\"me1\">body</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HttpsTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  System.<span class=\"me1\">setProperty</span><span class=\"br0\">(</span><span class=\"st0\">\"http.agent\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Source.<span class=\"me1\">fromURL</span><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>println<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 8, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"gethttps.s7i\";<br/>  include \"utf8.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(STD_UTF8_OUT, getHttps(\"sourceforge.net\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var lwp = <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'LWP::UserAgent'</span><span class=\"br0\">)</span>;    <span class=\"co1\"># LWP::Protocol::https is needed</span><br/>var url = <span class=\"st0\">'https://rosettacode.org'</span>;<br/>\u00a0<br/>var ua = lwp.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>    agent    <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'Mozilla/5.0'</span>,<br/>    ssl_opts <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>verify_hostname <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/><span class=\"br0\">)</span>;<br/>\u00a0<br/>var resp = ua.<span class=\"me1\">get</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span>;<br/>resp.<span class=\"me1\">is_success</span> <span class=\"sy0\">||</span> die <span class=\"st0\">\"Failed to GET #{url.dump}: #{resp.status_line}\"</span>;<br/><span class=\"kw3\">print</span> resp.<span class=\"me1\">decoded_content</span>;</pre>"}, {"lang": "Swift", "loc": 15, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>// With https<br/>let request = NSURLRequest(URL: NSURL(string: \"https://sourceforge.net\")!)<br/>\u00a0<br/>NSURLConnection.sendAsynchronousRequest(request, queue: NSOperationQueue()) {res, data, err in // callback<br/>\u00a0<br/>    // data is binary<br/>    if (data\u00a0!= nil) {<br/>        let string = NSString(data: data!, encoding: NSUTF8StringEncoding)<br/>        println(string)<br/>    }<br/>}<br/>\u00a0<br/>CFRunLoopRun() // dispatch</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"kw2\">package</span> require <span class=\"kw2\">http</span><br/><span class=\"kw2\">package</span> require tls<br/>\u00a0<br/><span class=\"co1\"># Tell the http package what to do with \u201chttps:\u201d URLs.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># First argument is the protocol name, second the default port, and</span><br/><span class=\"co1\"># third the connection builder command</span><br/><span class=\"kw2\">http</span>::<span class=\"me1\">register</span> <span class=\"st0\">\"https\"</span> <span class=\"nu0\">443</span>\u00a0::<span class=\"me1\">tls</span>::<span class=\"kw2\">socket</span><br/>\u00a0<br/><span class=\"co1\"># Make a secure connection, which is almost identical to normal</span><br/><span class=\"co1\"># connections except for the different protocol in the URL.</span><br/><span class=\"kw1\">set</span> token <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">geturl</span> <span class=\"st0\">\"https://sourceforge.net/\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Now as for conventional use of the \u201chttp\u201d package</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">data</span> <span class=\"re0\">$token</span><span class=\"br0\">]</span><br/><span class=\"kw2\">http</span>::<span class=\"me1\">cleanup</span> <span class=\"re0\">$token</span><br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>SET DATEN = REQUEST (\"https://sourceforge.net\")<br/>*{daten}<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/>curl <span class=\"re5\">-k</span> <span class=\"re5\">-s</span> <span class=\"re5\">-L</span> https:<span class=\"sy0\">//</span>sourceforge.net<span class=\"sy0\">/</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 19, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/>Const sURL=<span class=\"st0\">\"https://sourceforge.net/\"</span><br/>\u00a0<br/><span class=\"kw4\">Dim</span> oHTTP<br/><span class=\"kw4\">Set</span> oHTTP = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Microsoft.XmlHTTP\"</span>)<br/>\u00a0<br/><span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>oHTTP.<span class=\"kw4\">Open</span> <span class=\"st0\">\"GET\"</span>, sURL, <span class=\"kw5\">False</span><br/>oHTTP.Send <span class=\"st0\">\"\"</span><br/><span class=\"kw3\">If</span> Err.Number = 0 <span class=\"kw3\">Then</span><br/>     WScript.Echo oHTTP.responseText<br/><span class=\"kw3\">Else</span><br/>     Wscript.Echo <span class=\"st0\">\"error \"</span> &amp; Err.Number &amp; <span class=\"st0\">\": \"</span> &amp; Err.Description<br/><span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"kw4\">Set</span> oHTTP = <span class=\"kw5\">Nothing</span><br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 7, "block": "<pre class=\"vbnet highlighted_source\">\u00a0<br/><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Net</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> client <span class=\"kw1\">As</span> WebClient <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> WebClient<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> content <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> client<span class=\"sy0\">.</span><span class=\"me1\">DownloadString</span><span class=\"br0\">(</span><span class=\"st0\">\"https://sourceforge.net\"</span><span class=\"br0\">)</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>content<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">zkl: var ZC=Import(\"zklCurl\")<br/>zkl: var data=ZC().get(\"https://sourceforge.net\")<br/>L(Data(36,265),826,0)</pre>"}]}