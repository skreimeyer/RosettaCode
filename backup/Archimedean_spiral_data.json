{"task": "Archimedean_spiral", "blocks": [{"lang": "BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">110 LET H = 96<br/>120 LET W = H + H / 2<br/>130 HGR2 <br/>140 HCOLOR= 3<br/>150 LET A = 1<br/>160 LET B = 9<br/>170 LET PI = 3.1415926535<br/>180 LET M = 10 * PI<br/>190 LET S = .02<br/>200 FOR T = S TO M STEP S<br/>210     LET R = A + B * T<br/>220     LET X = R *  COS (T) + W<br/>230     LET Y = R *  SIN (T) + H<br/>240     IF X &lt; 0 THEN  290<br/>250     IF Y &lt; 0 THEN  290 <br/>260     IF X &gt; 279 THEN  290  <br/>270     IF Y &gt; 191 THEN  290<br/>280     HPLOT X,Y<br/>290 NEXT<br/>\u00a0</pre>"}, {"lang": "C", "loc": 34, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define pi M_PI</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>cycles<span class=\"sy0\">,</span>incr<span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> steps<span class=\"sy0\">,</span>x<span class=\"sy0\">=</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span>y<span class=\"sy0\">=</span><span class=\"nu0\">500</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter the parameters a and b\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf%lf\"</span><span class=\"sy0\">,&amp;</span>a<span class=\"sy0\">,&amp;</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter cycles\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>cycles<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter divisional steps\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>steps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tincr <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">/</span>steps<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinitwindow<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"st0\">\"Archimedean Spiral\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span>cycles<span class=\"sy0\">*</span>pi<span class=\"sy0\">;</span>i<span class=\"sy0\">+=</span>incr<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tputpixel<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getch.html\"><span class=\"kw3\">getch</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 112, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">600</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> myBitmap <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, brush<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, clr<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, wid<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPINFO bi<span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>        <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>    <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>      <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>       <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>      <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>        HDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        hdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        width <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> BYTE clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> pBits, clr, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setBrushColor<span class=\"br0\">(</span> DWORD bClr <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> brush <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        brush <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> bClr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenWidth<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> path <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>        BITMAPINFO       infoheader<span class=\"sy4\">;</span><br/>        BITMAP           bitmap<span class=\"sy4\">;</span><br/>        DWORD            wb<span class=\"sy4\">;</span><br/>        GetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>        GetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        HANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, <br/>                                  FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        CloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        pen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, wid, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span> HDC    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span> HBRUSH brush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span> <span class=\"kw4\">int</span>    width, height, wid<span class=\"sy4\">;</span><br/>    DWORD    clr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> spiral <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    spiral<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> draw<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> a <span class=\"sy1\">=</span> <span class=\"nu18\">.2</span>, b <span class=\"sy1\">=</span> <span class=\"nu18\">.3</span>, r, x, y<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> BMP_SIZE <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        HDC dc <span class=\"sy1\">=</span> bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">double</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> c <span class=\"sy2\">*</span> <span class=\"nu16\">6.28318530718</span><span class=\"sy4\">;</span> d <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu18\">.002</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> d<span class=\"sy4\">;</span> x <span class=\"sy1\">=</span> r <span class=\"sy2\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> r <span class=\"sy2\">*</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            SetPixel<span class=\"br0\">(</span> dc, <span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"br0\">)</span><span class=\"br0\">(</span> s <span class=\"sy2\">*</span> x <span class=\"sy2\">+</span> w <span class=\"br0\">)</span>, <span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"br0\">)</span><span class=\"br0\">(</span> s <span class=\"sy2\">*</span> y <span class=\"sy2\">+</span> w <span class=\"br0\">)</span>, <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// saves the bitmap</span><br/>        bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> <span class=\"st0\">\"./spiral.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    myBitmap bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    spiral s<span class=\"sy4\">;</span> s.<span class=\"me1\">draw</span><span class=\"br0\">(</span> <span class=\"nu0\">16</span>, <span class=\"nu0\">8</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 40, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Drawing2D</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">380</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">380</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> PointF archimedeanPoint<span class=\"br0\">(</span><span class=\"kw4\">int</span> degrees<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> t <span class=\"sy0\">=</span> degrees <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> t<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PointF <span class=\"br0\">{</span> X <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><span class=\"br0\">(</span>width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span>, Y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><span class=\"br0\">(</span>height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> bm <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> Graphics<span class=\"sy0\">.</span><span class=\"me1\">FromImage</span><span class=\"br0\">(</span>bm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g<span class=\"sy0\">.</span><span class=\"me1\">SmoothingMode</span> <span class=\"sy0\">=</span> SmoothingMode<span class=\"sy0\">.</span><span class=\"me1\">AntiAlias</span><span class=\"sy0\">;</span><br/>        g<span class=\"sy0\">.</span><span class=\"me1\">FillRectangle</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SolidBrush<span class=\"br0\">(</span>Color<span class=\"sy0\">.</span><span class=\"me1\">White</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Rectangle <span class=\"br0\">{</span> X <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, Y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, Width <span class=\"sy0\">=</span> width, Height <span class=\"sy0\">=</span> height <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> pen <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Pen<span class=\"br0\">(</span>Color<span class=\"sy0\">.</span><span class=\"me1\">OrangeRed</span>, 1<span class=\"sy0\">.</span>5f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> spiral <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">360</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">AsParallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">AsOrdered</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>archimedeanPoint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> p0 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PointF<span class=\"br0\">(</span>width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> p1 <span class=\"kw1\">in</span> spiral<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">DrawLine</span><span class=\"br0\">(</span>pen, p0, p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            p0 <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        g<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// is this really necessary\u00a0?</span><br/>        bm<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span><span class=\"st0\">\"archimedes-csharp.png\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Process<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"st0\">\"archimedes-csharp.png\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Launches default photo viewing app</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 71, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-coords-as-text <span class=\"br0\">(</span>coords size fill-char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>min-x <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">min</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">car</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>min-y <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">min</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">cdr</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>max-x <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">car</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>max-y <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">cdr</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>real-size <span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">abs</span> min-x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> max-x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; bounding square</span><br/>                         <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">abs</span> min-y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> max-y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>scale-factor <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"nu0\">1</span>- size<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ <span class=\"nu0\">1</span> real-size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>center-x <span class=\"br0\">(</span>* scale-factor -<span class=\"nu0\">1</span> min-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>center-y <span class=\"br0\">(</span>* scale-factor -<span class=\"nu0\">1</span> min-y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>intermediate-result <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> size size<span class=\"br0\">)</span> <br/>                                          <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'char <br/>                                          <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> #\\space<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>c coords<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>final-x <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>+ center-x <span class=\"br0\">(</span>* scale-factor <span class=\"br0\">(</span><span class=\"kw1\">car</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>final-y <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>+ center-y <span class=\"br0\">(</span>* scale-factor <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> intermediate-result final-x final-y<span class=\"br0\">)</span><br/>              fill-char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">; print results to output</span><br/>    <span class=\"br0\">(</span>loop for i below <span class=\"br0\">(</span>array-total-size intermediate-result<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod i size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> intermediate-result i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> spiral <span class=\"br0\">(</span>a b step-resolution step-count<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Returns a list of coordinates for r=a+b*theta stepping theta by step-resolution\"</span><br/>  <span class=\"br0\">(</span>loop for theta <br/>        from <span class=\"nu0\">0</span> upto <span class=\"br0\">(</span>* step-count step-resolution<span class=\"br0\">)</span><br/>        by step-resolution<br/>        for r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ a <span class=\"br0\">(</span>* b theta<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        for x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>* r <span class=\"br0\">(</span><span class=\"kw1\">cos</span> theta<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        for y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>* r <span class=\"br0\">(</span><span class=\"kw1\">sin</span> theta<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        collect <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>draw-coords-as-text <span class=\"br0\">(</span>spiral <span class=\"nu0\">10</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0.01</span> <span class=\"nu0\">1500</span><span class=\"br0\">)</span> <span class=\"nu0\">30</span> #\\*<span class=\"br0\">)</span><br/><span class=\"co1\">; Output:</span><br/><span class=\"co1\">; </span><br/><span class=\"co1\">;                         *     </span><br/><span class=\"co1\">;          ******          *    </span><br/><span class=\"co1\">;       ****    ***        **   </span><br/><span class=\"co1\">;     ***          **       *   </span><br/><span class=\"co1\">;    **             **       *  </span><br/><span class=\"co1\">;   **               **      *  </span><br/><span class=\"co1\">;   *                 **     ** </span><br/><span class=\"co1\">;  **                  *      * </span><br/><span class=\"co1\">; **       ******      *      * </span><br/><span class=\"co1\">; *       **    **     **     * </span><br/><span class=\"co1\">; *      **      *      *     * </span><br/><span class=\"co1\">; *     **       *      *     **</span><br/><span class=\"co1\">; *     *        *      *     * </span><br/><span class=\"co1\">; *     *     * **      *     * </span><br/><span class=\"co1\">; *     *     ***      **     * </span><br/><span class=\"co1\">; *     **             *      * </span><br/><span class=\"co1\">; *      *            **      * </span><br/><span class=\"co1\">; *      **          **      ** </span><br/><span class=\"co1\">; **      **        **       *  </span><br/><span class=\"co1\">;  *       **      **       **  </span><br/><span class=\"co1\">;  **       ********        *   </span><br/><span class=\"co1\">;   *                      **   </span><br/><span class=\"co1\">;   **                    **    </span><br/><span class=\"co1\">;    **                  **     </span><br/><span class=\"co1\">;     **               ***      </span><br/><span class=\"co1\">;       **            **        </span><br/><span class=\"co1\">;        ****      ***          </span><br/><span class=\"co1\">;           *******             </span><br/><span class=\"co1\">;                               </span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Component Pascal", "loc": 27, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> ArchimedeanSpiral;<br/><span class=\"kw1\">IMPORT</span> XYplane<span class=\"sy0\">,</span> Math;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Center<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tXYplane.<span class=\"me1\">Dot</span><span class=\"br0\">(</span>XYplane.<span class=\"me1\">W</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span>XYplane.<span class=\"me1\">H</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span>XYplane.<span class=\"me1\">draw</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Center;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ti<span class=\"sy0\">,</span>t<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tXYplane.<span class=\"me1\">Open</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"nu0\">200.0</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span>\t<br/>\t\tt <span class=\"sy0\">:=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">20</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">Pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\tx <span class=\"sy0\">:=</span> <span class=\"kw3\">SHORT</span><span class=\"br0\">(</span><span class=\"kw3\">ENTIER</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5.0</span> <span class=\"sy0\">*</span> t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">Cos</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\ty <span class=\"sy0\">:=</span> <span class=\"kw3\">SHORT</span><span class=\"br0\">(</span><span class=\"kw3\">ENTIER</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5.0</span> <span class=\"sy0\">*</span> t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">Sin</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\tCenter<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>;<br/>\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">0.01</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> ArchimedeanSpiral.<br/>\u00a0</pre>"}, {"lang": "Frege", "loc": 89, "block": "<pre class=\"text highlighted_source\">module Archimedean where<br/>\u00a0<br/>import Java.IO<br/>import Prelude.Math<br/>\u00a0<br/>data BufferedImage = native java.awt.image.BufferedImage where<br/>  pure native type_3byte_bgr \"java.awt.image.BufferedImage.TYPE_3BYTE_BGR\"\u00a0:: Int<br/>  native new\u00a0:: Int -&gt; Int -&gt; Int -&gt; STMutable s BufferedImage<br/>  native createGraphics\u00a0:: Mutable s BufferedImage -&gt; STMutable s Graphics2D<br/>\u00a0<br/>data Color = pure native java.awt.Color where<br/>  pure native orange \"java.awt.Color.orange\"\u00a0:: Color<br/>  pure native white \"java.awt.Color.white\"\u00a0:: Color<br/>  pure native new\u00a0:: Int -&gt; Color<br/>\u00a0<br/>data BasicStroke = pure native java.awt.BasicStroke where<br/>  pure native new\u00a0:: Float -&gt; BasicStroke<br/>\u00a0<br/>data RenderingHints = native java.awt.RenderingHints where<br/>  pure native key_antialiasing \"java.awt.RenderingHints.KEY_ANTIALIASING\"\u00a0:: RenderingHints_Key<br/>  pure native value_antialias_on \"java.awt.RenderingHints.VALUE_ANTIALIAS_ON\"\u00a0:: Object<br/>\u00a0<br/>data RenderingHints_Key = pure native java.awt.RenderingHints.Key<br/>\u00a0<br/>data Graphics2D = native java.awt.Graphics2D where<br/>  native drawLine\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native drawOval\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native fillRect\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native setColor\u00a0:: Mutable s Graphics2D -&gt; Color -&gt; ST s ()<br/>  native setRenderingHint\u00a0:: Mutable s Graphics2D -&gt; RenderingHints_Key -&gt; Object -&gt; ST s ()<br/>  native setStroke\u00a0:: Mutable s Graphics2D -&gt; BasicStroke -&gt; ST s ()<br/>\u00a0<br/>data ImageIO = mutable native javax.imageio.ImageIO where<br/>  native write \"javax.imageio.ImageIO.write\"\u00a0:: MutableIO BufferedImage -&gt; String -&gt; MutableIO File -&gt; IO Bool throws IOException<br/>\u00a0<br/>width = 640<br/>center = width `div` 2<br/>\u00a0<br/>roundi = fromIntegral . round<br/>\u00a0<br/>drawGrid\u00a0:: Mutable s Graphics2D -&gt; ST s ()<br/>drawGrid g = do<br/>  g.setColor $ Color.new 0xEEEEEE<br/>  g.setStroke $ BasicStroke.new 2<br/>  let angle = toRadians 45<br/>      margin = 10<br/>      numRings = 8<br/>      spacing = (width - 2 * margin) `div` (numRings * 2)<br/>  forM_ [0 .. numRings-1] $ \\i -&gt; do<br/>    let pos = margin + i * spacing<br/>        size = width - (2 * margin + i * 2 * spacing)<br/>        ia = fromIntegral i * angle<br/>        multiplier = fromIntegral $ (width - 2 * margin) `div` 2<br/>        x2 = center + (roundi (cos ia * multiplier))<br/>        y2 = center - (roundi (sin ia * multiplier))<br/>    g.drawOval pos pos size size<br/>    g.drawLine center center x2 y2<br/>\u00a0<br/>drawSpiral\u00a0:: Mutable s Graphics2D -&gt; ST s ()<br/>drawSpiral g = do<br/>  g.setStroke $ BasicStroke.new 2<br/>  g.setColor $ Color.orange<br/>  let degrees = toRadians 0.1<br/>      end = 360 * 2 * 10 * degrees<br/>      a = 0<br/>      b = 20<br/>      c = 1<br/>      drSp theta = do<br/>        let r = a + b * theta ** (1 / c)<br/>            x = r * cos theta<br/>            y = r * sin theta<br/>            theta' = theta + degrees<br/>        plot g (center + roundi x) (center - roundi y)<br/>        when (theta' &lt; end) (drSp (theta' + degrees))<br/>  drSp 0<br/>\u00a0<br/>plot\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; ST s ()<br/>plot g x y = g.drawOval x y 1 1<br/>\u00a0<br/>main = do<br/>  buffy &lt;- BufferedImage.new width width BufferedImage.type_3byte_bgr<br/>  g &lt;- buffy.createGraphics<br/>  g.setRenderingHint RenderingHints.key_antialiasing RenderingHints.value_antialias_on<br/>  g.setColor Color.white<br/>  g.fillRect 0 0 width width<br/>  drawGrid g<br/>  drawSpiral g<br/>  f &lt;- File.new \"SpiralFrege.png\"<br/>  void $ ImageIO.write buffy \"png\" f</pre>"}, {"lang": "Go", "loc": 48, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"image\"</span><br/>\t<span class=\"st0\">\"image/color\"</span><br/>\t<span class=\"st0\">\"image/draw\"</span><br/>\t<span class=\"st0\">\"image/png\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"math\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\t\twidth<span class=\"sy1\">,</span> height <span class=\"sy2\">=</span> <span class=\"nu0\">600</span><span class=\"sy1\">,</span> <span class=\"nu0\">600</span><br/>\t\tcentre        <span class=\"sy2\">=</span> width <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><br/>\t\tdegreesIncr   <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1</span> <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">/</span> <span class=\"nu0\">180</span><br/>\t\tturns         <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\t\tstop          <span class=\"sy2\">=</span> <span class=\"nu0\">360</span> <span class=\"sy3\">*</span> turns <span class=\"sy3\">*</span> <span class=\"nu0\">10</span> <span class=\"sy3\">*</span> degreesIncr<br/>\t\tfileName      <span class=\"sy2\">=</span> <span class=\"st0\">\"spiral.png\"</span><br/>\t<span class=\"sy1\">)</span><br/>\u00a0<br/>\timg <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewNRGBA<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> width<span class=\"sy1\">,</span> height<span class=\"sy1\">))</span> <span class=\"co1\">// create new image</span><br/>\tbg <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewUniform<span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">})</span> <span class=\"co1\">// prepare white for background</span><br/>\tdraw<span class=\"sy3\">.</span><span class=\"me1\">Draw</span><span class=\"sy1\">(</span>img<span class=\"sy1\">,</span> img<span class=\"sy3\">.</span><span class=\"me1\">Bounds</span><span class=\"sy1\">(),</span> bg<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span><span class=\"me1\">ZP</span><span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span><span class=\"me1\">Src</span><span class=\"sy1\">)</span>   <span class=\"co1\">// fill the background</span><br/>\tfgCol <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">}</span>                    <span class=\"co1\">// red plot</span><br/>\u00a0<br/>\ta <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><br/>\tb <span class=\"sy2\">:=</span> <span class=\"nu0\">20</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> theta <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span> theta &lt; stop<span class=\"sy1\">;</span> theta <span class=\"sy2\">+=</span> degreesIncr <span class=\"sy1\">{</span><br/>\t\tr <span class=\"sy2\">:=</span> a <span class=\"sy3\">+</span> b<span class=\"sy3\">*</span>theta<br/>\t\tx <span class=\"sy2\">:=</span> r <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>theta<span class=\"sy1\">)</span><br/>\t\ty <span class=\"sy2\">:=</span> r <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>theta<span class=\"sy1\">)</span><br/>\t\timg<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span>centre<span class=\"sy3\">+</span>x<span class=\"sy1\">),</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>centre<span class=\"sy3\">-</span>y<span class=\"sy1\">),</span> fgCol<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\timgFile<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span>fileName<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">defer</span> imgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>imgFile<span class=\"sy1\">,</span> img<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\timgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env stack<br/><span class=\"co1\">-- stack --resolver lts-7.0 --install-ghc runghc --package Rasterific --package JuicyPixels</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Codec<span class=\"sy0\">.</span>Picture<span class=\"br0\">(</span> PixelRGBA8<span class=\"br0\">(</span> <span class=\"sy0\">..</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> writePng <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Rasterific<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Rasterific<span class=\"sy0\">.</span>Texture<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Rasterific<span class=\"sy0\">.</span>Transformations<br/>\u00a0<br/>archimedeanPoint a b t <span class=\"sy0\">=</span> V2 x y<br/>  <span class=\"kw1\">where</span> r <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> t<br/>        x <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> t<br/>        y <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> t<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> white <span class=\"sy0\">=</span> PixelRGBA8 <span class=\"nu0\">255</span> <span class=\"nu0\">255</span> <span class=\"nu0\">255</span> <span class=\"nu0\">255</span><br/>      drawColor <span class=\"sy0\">=</span> PixelRGBA8 0xFF 0x53 0x73 <span class=\"nu0\">255</span><br/>      size <span class=\"sy0\">=</span> <span class=\"nu0\">800</span><br/>      points <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>archimedeanPoint <span class=\"nu0\">0</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.01</span> <span class=\"sy0\">..</span> <span class=\"nu0\">60</span><span class=\"br0\">]</span><br/>      hSize <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>      img <span class=\"sy0\">=</span> renderDrawing size size white <span class=\"sy0\">$</span><br/>            withTransformation <span class=\"br0\">(</span>translate <span class=\"sy0\">$</span> V2 hSize hSize<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>            withTexture <span class=\"br0\">(</span>uniformTexture drawColor<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>            stroke <span class=\"nu0\">4</span> JoinRound <span class=\"br0\">(</span>CapRound<span class=\"sy0\">,</span> CapRound<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>            polyline points<br/>\u00a0<br/>  writePng <span class=\"st0\">\"SpiralHaskell.png\"</span> img</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'plot'</span><br/><span class=\"st_h\">'aspect 1'</span> plot <span class=\"sy0\">(</span>*^<span class=\"sy0\">)</span>j.<span class=\"nu0\">0.01</span>*i.<span class=\"nu0\">1400</span></pre>"}, {"lang": "Java", "loc": 84, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"sy0\">*;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ArchimedeanSpiral <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ArchimedeanSpiral<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawGrid<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xEEEEEE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abasicstroke+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BasicStroke</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> angle <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> w <span class=\"sy0\">=</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> center <span class=\"sy0\">=</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> margin <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> numRings <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> spacing <span class=\"sy0\">=</span> <span class=\"br0\">(</span>w <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>numRings <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numRings<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> pos <span class=\"sy0\">=</span> margin <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> spacing<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> w <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> spacing<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>pos, pos, size, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> ia <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> angle<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> x2 <span class=\"sy0\">=</span> center <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cos<span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> y2 <span class=\"sy0\">=</span> center <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sin<span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>center, center, x2, y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawSpiral<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abasicstroke+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BasicStroke</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">orange</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> degrees <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> center <span class=\"sy0\">=</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> end <span class=\"sy0\">=</span> <span class=\"nu0\">360</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> degrees<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> theta <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> theta <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> theta <span class=\"sy0\">+=</span> degrees<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> pow<span class=\"br0\">(</span>theta, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            plot<span class=\"br0\">(</span>g, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>center <span class=\"sy0\">+</span> x<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>center <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> plot<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>x, y, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawSpiral<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Archimedean Spiral\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> ArchimedeanSpiral<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;!-- ArchiSpiral.html --&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;&lt;title&gt;Archimedean spiral&lt;/title&gt;&lt;/head&gt;<br/>&lt;body onload=\"pAS(35,'navy');\"&gt;<br/>&lt;h3&gt;Archimedean spiral&lt;/h3&gt; &lt;p id=bo&gt;&lt;/p&gt;<br/>&lt;canvas id=\"canvId\" width=\"640\" height=\"640\" style=\"border: 2px outset;\"&gt;&lt;/canvas&gt;<br/>&lt;script&gt;<br/>// Plotting Archimedean_spiral aev 3/17/17<br/>// lps - number of loops, clr - color.<br/>function pAS(lps,clr) {<br/>  var a=.0,ai=.1,r=.0,ri=.1,as=lps*2*Math.PI,n=as/ai;<br/>  var cvs=document.getElementById(\"canvId\");<br/>  var ctx=cvs.getContext(\"2d\");<br/>  ctx.fillStyle=\"white\"; ctx.fillRect(0,0,cvs.width,cvs.height);<br/>  var x=y=0, s=cvs.width/2;<br/>  ctx.beginPath();<br/>  for (var i=1; i&lt;n; i++) {<br/>    x=r*Math.cos(a), y=r*Math.sin(a);<br/>    ctx.lineTo(x+s,y+s);<br/>    r+=ri; a+=ai;<br/>  }//fend i<br/>  ctx.strokeStyle = clr; ctx.stroke();<br/>}<br/>&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">using UnicodePlots<br/>\u00a0<br/>spiral(\u03b8, a=0, b=1) = @. b * \u03b8 * cos(\u03b8 + a), b * \u03b8 * sin(\u03b8 + a)<br/>\u00a0<br/>x, y = spiral(1:0.1:10)<br/>println(lineplot(x, y))</pre>"}, {"lang": "Kotlin", "loc": 76, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ArchimedeanSpiral <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawGrid<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color<span class=\"br0\">(</span>0xEEEEEE<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">stroke</span> <span class=\"sy0\">=</span> BasicStroke<span class=\"br0\">(</span>2f<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> angle <span class=\"sy0\">=</span> Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span><span class=\"nu0\">45.0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> width<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> center <span class=\"sy0\">=</span> w / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> margin <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numRings <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> spacing <span class=\"sy0\">=</span> <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"br0\">(</span>numRings <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until numRings<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pos <span class=\"sy0\">=</span> margin + i <span class=\"sy0\">*</span> spacing<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> w - <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin + i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> spacing<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>pos, pos, size, size<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ia <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> angle<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> center + <span class=\"br0\">(</span>Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> center - <span class=\"br0\">(</span>Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>center, center, x2, y2<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawSpiral<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">stroke</span> <span class=\"sy0\">=</span> BasicStroke<span class=\"br0\">(</span>2f<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">magenta</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> degrees <span class=\"sy0\">=</span> Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> center <span class=\"sy0\">=</span> width / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> <span class=\"nu0\">360</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> degrees<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"nu0\">20.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> theta <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>theta <span class=\"sy0\">&lt;</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> a + b <span class=\"sy0\">*</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>theta, <span class=\"nu0\">1.0</span> / c<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>theta<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>theta<span class=\"br0\">)</span><br/>            plot<span class=\"br0\">(</span>g, <span class=\"br0\">(</span>center + x<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span>center - y<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            theta +<span class=\"sy0\">=</span> degrees<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun plot<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>x, y, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        drawSpiral<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">defaultCloseOperation</span> <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>        f.<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Archimedean Spiral\"</span><br/>        f.<span class=\"me1\">isResizable</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        f.<span class=\"me1\">add</span><span class=\"br0\">(</span>ArchimedeanSpiral<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>plots[polarplot](1+2*theta, theta = 0 .. 6*Pi)<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">With[{a = 5, b = 4}, PolarPlot[a + b t, {t, 0, 10 Pi}]]</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">a = <span class=\"nu0\">1</span>;<br/>b = <span class=\"nu0\">1</span>;<br/>turns = <span class=\"nu0\">2</span>;<br/>theta = <span class=\"nu0\">0</span>:<span class=\"nu0\">0.1</span>:<span class=\"nu0\">2</span>*turns*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>;<br/>polarplot<span class=\"br0\">(</span>theta, a + b*theta<span class=\"br0\">)</span>;</pre>"}, {"lang": "PARI/GP", "loc": 21, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ The Archimedean spiral  </span><br/><span class=\"co1\">\\\\ ArchiSpiral() - Where: lps is a number of loops, c is a direction 0/1</span><br/><span class=\"co1\">\\\\ (counter-clockwise/clockwise). 6/6/16 aev</span><br/><span class=\"co1\">\\\\ Note: cartes2() can be found here on </span><br/><span class=\"co1\">\\\\ http://rosettacode.org/wiki/Polyspiral#PARI.2FGP page.</span><br/>ArchiSpiral<span class=\"br0\">(</span>size<span class=\"sy0\">,</span>lps<span class=\"sy0\">,</span>c<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu2\">.0</span><span class=\"sy0\">,</span>ai<span class=\"sy0\">=</span><span class=\"nu2\">.1</span><span class=\"sy0\">,</span>r<span class=\"sy0\">=</span><span class=\"nu2\">.0</span><span class=\"sy0\">,</span>ri<span class=\"sy0\">=</span><span class=\"nu2\">.1</span><span class=\"sy0\">,</span>as<span class=\"sy0\">=</span>lps<span class=\"sy0\">*</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">Pi</span><span class=\"sy0\">,</span>n<span class=\"sy0\">=</span>as<span class=\"sy0\">/</span>ai<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>vc<span class=\"sy0\">,</span>vx<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"nu2\">.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>vy<span class=\"sy0\">=</span>vx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>c<span class=\"sy0\">&lt;</span><span class=\"nu1\">0</span><span class=\"sy0\">||</span>c<span class=\"sy0\">&gt;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> c<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> ai<span class=\"sy0\">*=-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** The Archimedean spiral: size=\"</span><span class=\"sy0\">,</span>size<span class=\"sy0\">,</span><span class=\"st0\">\" loops=\"</span><span class=\"sy0\">,</span>lps<span class=\"sy0\">,</span><span class=\"st0\">\" c=\"</span><span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> vc<span class=\"sy0\">=</span>cartes2<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> x<span class=\"sy0\">=</span>vc<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> y<span class=\"sy0\">=</span>vc<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vx<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vy<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    r<span class=\"sy0\">+=</span>ri<span class=\"sy0\">;</span> a<span class=\"sy0\">+=</span>ai<span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i</span><br/><span class=\"kw1\">plothraw</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Executing:</span><br/>ArchiSpiral<span class=\"br0\">(</span><span class=\"nu1\">640</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">\\\\ArchiSpiral1.png</span><br/>ArchiSpiral<span class=\"br0\">(</span><span class=\"nu1\">640</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ArchiSpiral2.png</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Imager<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant PI <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3.14159265</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> ysize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$theta</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$theta</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"re0\">*PI</span><span class=\"sy0\">;</span> <span class=\"re0\">$theta</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">0.025</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$theta</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"sy0\">/</span>PI<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$theta</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"sy0\">/</span>PI<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> color <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'#FF00FF'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/write.html\"><span class=\"kw3\">write</span></a><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Archimedean-spiral.png'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$png</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>width<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>height<span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span>025 <span class=\"sy0\">...</span> <span class=\"nu0\">52</span><span class=\"sy0\">*</span>\u03c0 <span class=\"sy0\">-&gt;</span> \\\u0398 <span class=\"br0\">{</span><br/>    <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">set</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">cis</span><span class=\"br0\">(</span> \u0398 <span class=\"sy0\">/</span> \u03c0 <span class=\"br0\">)</span> <span class=\"sy0\">*</span> \u0398<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">reals</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">write</span><span class=\"sy0\">:</span> <span class=\"st_h\">'Archimedean-spiral-perl6.png'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 57, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Archimedean_spiral.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>integer a = 0, b = 5<br/>integer {width, height} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>integer {centerX,centerY} = sq_floor_div({width,height},2)<br/>    cdCanvasActivate(cddbuffer)<br/>    for deg=0 to 360*7 do<br/>        atom rad = deg*PI/180<br/>        atom r = rad*b + a<br/>        integer x = centerX + floor(r*cos(rad))<br/>        integer y = centerY + floor(r*sin(rad))<br/>        cdCanvasPixel(cddbuffer, x, y, #00FF00) <br/>    end for<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_RED)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"340x340\") -- initial size<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", \"Archimedean spiral\")<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"esc_close\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    IupMap(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL) -- release the minimum limitation<br/>    IupShowXY(dlg,IUP_CENTER,IUP_CENTER)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PureBasic", "loc": 22, "block": "<pre class=\"purebasic highlighted_source\">#MAXLOOP  <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">*</span><span class=\"nu0\">360</span><br/>#XCENTER  <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>#YCENTER  <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>#SCALAR   <span class=\"sy0\">=</span> <span class=\"nu0\">200</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">640</span>, <span class=\"nu0\">480</span>, <span class=\"st0\">\"Archimedean spiral\"</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">640</span>, <span class=\"nu0\">480</span>,<span class=\"nu0\">24</span>,<span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">255</span>,<span class=\"nu0\">255</span>,<span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <br/>      i.f<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><br/>      <span class=\"kw1\">While</span> i<span class=\"sy0\">&lt;=</span>#MAXLOOP         <br/>        x.f<span class=\"sy0\">=</span>#XCENTER<span class=\"sy0\">+</span><span class=\"kw2\">Cos</span><span class=\"br0\">(</span>Radian<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>#SCALAR<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>#MAXLOOP<br/>        y.f<span class=\"sy0\">=</span>#YCENTER<span class=\"sy0\">+</span><span class=\"kw2\">Sin</span><span class=\"br0\">(</span>Radian<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>#SCALAR<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>#MAXLOOP<br/>        <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x,y,<span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">50</span>,<span class=\"nu0\">50</span>,<span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        i<span class=\"sy0\">+</span><span class=\"nu0\">0.05</span><br/>      <span class=\"kw1\">Wend</span><br/>      <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <br/>  <span class=\"kw1\">Repeat</span>\u00a0: Event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> Event <span class=\"sy0\">=</span> #PB_Event_CloseWindow <br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">turtle</span> <span class=\"kw1\">import</span> *<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> *<br/>color<span class=\"br0\">(</span><span class=\"st0\">\"blue\"</span><span class=\"br0\">)</span><br/>down<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span>:<br/>    t <span class=\"sy0\">=</span> i / <span class=\"nu0\">20</span> * pi<br/>    x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> + <span class=\"nu0\">5</span> * t<span class=\"br0\">)</span> * cos<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> + <span class=\"nu0\">5</span> * t<span class=\"br0\">)</span> * sin<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    goto<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>done<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">with(list(s=seq(0, 10 * pi, length.out=500)),<br/>     plot((1 + s) * exp(1i * s), type=\"l\"))</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require plot<br/>         racket/math)<br/>\u00a0<br/>;; x and y bounds set to centralise the circle<br/>(define (archemedian-spiral-renderer2d a b \u03b8/\u03c4-max<br/>                                       #:samples (samples (line-samples)))<br/>  (define (f \u03b8) (+ a (* b \u03b8)))<br/>  (define max-dim (+ a (* \u03b8/\u03c4-max 2 pi b)))<br/>  (polar f<br/>      0 (* \u03b8/\u03c4-max 2 pi)<br/>      #:x-min (- max-dim)<br/>      #:x-max max-dim<br/>      #:y-min (- max-dim)<br/>      #:y-max  max-dim<br/>      #:samples samples))<br/>\u00a0<br/>(plot (list (archemedian-spiral-renderer2d 0.0 24  4)))<br/>\u00a0<br/>;; writes to a file so hopefully, I can post it to RC...<br/>(plot-file (list (archemedian-spiral-renderer2d 0.0 24  4))<br/>           \"images/archemidian-spiral-racket.png\")</pre>"}, {"lang": "REXX", "loc": 42, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm plots several cycles (half a spiral) of the  Archimedean spiral (ASCII plot).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> cy a b inc chr <span class=\"sy0\">.</span>                       <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>  cy==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  cy==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  cy= <span class=\"nu0\">3</span>               <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span>   a==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   a==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>   a= <span class=\"nu0\">1</span>               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span>   b==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   b==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>   b= <span class=\"nu0\">9</span>               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> inc==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> inc==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> inc= <span class=\"nu0\">0.02</span>            <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> chr==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> chr==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> chr= <span class=\"st0\">'\u2219'</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span>==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> chr=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*plot character coded in     decimal? */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> chr=<span class=\"kw6\">x2c</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*  \"      \"       \"    \" hexadecimal? */</span><br/>cy=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, cy<span class=\"br0\">)</span>;          LOx=<span class=\"sy0\">.</span>                    <span class=\"coMULTI\">/*set the  LOx  variable (a semaphore).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> scrsize<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"kw2\">with</span>   sd  sw  <span class=\"sy0\">.</span>         <span class=\"coMULTI\">/*get the size of the terminal screen. */</span><br/>w=sw - <span class=\"nu0\">1</span>     \u00a0;         mw=w <span class=\"sy0\">*</span> <span class=\"br0\">(</span>cy-<span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*set useable width; max width for calc*/</span><br/>h=sd + cy<span class=\"sy0\">*</span><span class=\"nu0\">10</span>-<span class=\"nu0\">1</span>;         mh=h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>cy-<span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* \"     \"    depth;  \"  depth  \"   \"  */</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/*initialize the line based plot field.*/</span><br/>         <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>cy  <span class=\"kw2\">by</span> inc              <span class=\"coMULTI\">/*calc all the co\u00f6rdinates for spiral. */</span><br/>         r=a + b<span class=\"sy0\">*</span>t                               <span class=\"coMULTI\">/*  \"   \"   \"       R       \"    \"     */</span><br/>         x=w + r<span class=\"sy0\">*</span>cos<span class=\"br0\">(</span>t<span class=\"br0\">)</span>;       xx=x\u00a0% <span class=\"nu0\">2</span>          <span class=\"coMULTI\">/*  \"   \"   \"       X       \"    \"     */</span><br/>         y=h + r<span class=\"sy0\">*</span>sin<span class=\"br0\">(</span>t<span class=\"br0\">)</span>;       YY=y\u00a0% <span class=\"nu0\">2</span>          <span class=\"coMULTI\">/*  \"   \"   \"       Y       \"    \"     */</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">|</span> y<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">&gt;</span>mw <span class=\"sy0\">|</span> y<span class=\"sy0\">&gt;</span>mh <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*Is X or Y  out of bounds?  Then skip.*/</span><br/>         <span class=\"kw1\">if</span> LOx==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  LOx=xx; HIx=xx;  LOy=yy; HIy=yy;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*find MINs, MAXs.*/</span><br/>         LOx=<span class=\"kw6\">min</span><span class=\"br0\">(</span>LOx, xx<span class=\"br0\">)</span>;     HIx=<span class=\"kw6\">max</span><span class=\"br0\">(</span>HIx, xx<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*determine the   X   MIN  and  MAX.   */</span><br/>         LOy=<span class=\"kw6\">min</span><span class=\"br0\">(</span>LOy, YY<span class=\"br0\">)</span>;     HIy=<span class=\"kw6\">max</span><span class=\"br0\">(</span>HIy, YY<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*   \u00a0?      \"    Y    \"    \"    \"     */</span><br/>         @<span class=\"sy0\">.</span>yy=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>chr, @<span class=\"sy0\">.</span>yy, xx+<span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*assign the plot character (glyph).   */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span><br/><span class=\"kw1\">call</span> plot                                        <span class=\"coMULTI\">/*invoke plotting subroutine (to term).*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>pi:    pi=<span class=\"nu0\">3.1415926535897932384626433832795028841971693993751058209749445923078</span>; <span class=\"kw1\">return</span> pi<br/>plot:     <span class=\"kw1\">do</span> row=HIy  <span class=\"kw2\">to</span> LOy  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;   <span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>row, LOx+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>;          <span class=\"kw1\">return</span><br/>r2r:   <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">//</span>  <span class=\"br0\">(</span>pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*normalize radians \u2500\u2500\u2500\u25ba a unit circle.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;      x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;     a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;                   hpi= pi <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">3</span><span class=\"br0\">)</span>;         <span class=\"kw1\">if</span> a=pi       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> a=hpi <span class=\"sy0\">|</span> a=hpi<span class=\"sy0\">*</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;         <span class=\"kw1\">if</span> a=pi <span class=\"sy0\">/</span> <span class=\"nu0\">3</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5<br/>       <span class=\"kw1\">if</span> a=pi <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"sy0\">.</span>5;                          <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span><span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sin:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;        <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> x=pi <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5         <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;        <span class=\"kw1\">if</span> x==pi<span class=\"sy0\">*</span><span class=\"nu0\">1.5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>=pi <span class=\"sy0\">|</span> x=<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;                           <span class=\"kw1\">return</span>  <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>sinCos: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> _,i;                       q=x<span class=\"sy0\">*</span>x<br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">until</span> p=z;   p=z;   _=-_<span class=\"sy0\">*</span>q<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>;   z=z+_;   <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span> z</pre>"}, {"lang": "Ring", "loc": 106, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/*<br/> +---------------------------------------------------------------------------------------------------------<br/> +     Program Name\u00a0: Archimedean spiral<br/> +---------------------------------------------------------------------------------------------------------<br/>*/<br/>Load \"guilib.ring\"<br/>\u00a0<br/>horzSize  = 400<br/>vertSize  = 400 <br/>\u00a0<br/>counter     = 0  ### cycle thru colors       <br/>colorRed    = new qcolor() { setrgb(255,000,000,255) }<br/>colorGreen  = new qcolor() { setrgb(000,255,000,255) }<br/>colorBlue   = new qcolor() { setrgb(000,000,255,255) }<br/>colorYellow = new qcolor() { setrgb(255,255,000,255) }<br/>\u00a0<br/>penUseR = new qpen() { setcolor(colorRed)    setwidth(1) }<br/>penUseG = new qpen() { setcolor(colorGreen)  setwidth(1) }<br/>penUseB = new qpen() { setcolor(colorBlue)   setwidth(1) }<br/>penUseY = new qpen() { setcolor(colorYellow) setwidth(1) }<br/>\u00a0<br/>        deg2rad    = atan(1) * 4 / 180  <br/>        screensize = 600                 <br/>        turns      = 5                <br/>        halfscrn   = screensize / 2    <br/>        sf         = (turns * (screensize - 100)) / halfscrn <br/>        x = 1<br/>        y = 1<br/>        r = 0<br/>        inc = 0.50   ### control increment speed of r<br/>\u00a0<br/>New qapp<br/>{<br/>   win1 =  new qwidget()<br/>    {<br/>        setwindowtitle(\"Draw Spiral\")<br/>        setgeometry(100,100,600,600)<br/>\u00a0<br/>       label1 = new qlabel(win1)<br/>       {<br/>           setgeometry(10,10,600,600)<br/>           settext(\"\")<br/>       }<br/>\u00a0<br/>\u00a0<br/>       Canvas = new qlabel(win1)<br/>       {              <br/>            MonaLisa = new qPixMap2( 600,600)  <br/>            color    = new qcolor(){ setrgb(255,0,0,255) }<br/>\u00a0<br/>            daVinci  = new qpainter() <br/>            {<br/>               begin(MonaLisa)             <br/>               penUse = new qpen() { setcolor(colorRed) setwidth(1) }<br/>               setpen(penUseR)<br/>               #endpaint()      ### This will Stop the Painting<br/>            }<br/>\u00a0<br/>            setpixmap(MonaLisa)        <br/>       }       <br/>\u00a0<br/>        oTimer = new qTimer(win1) <br/>        {<br/>            setinterval(1)    ### 1 millisecond<br/>            settimeoutevent(\"DrawCounter()\")<br/>            start()<br/>        }       <br/>\u00a0<br/>       show()   ### Will show Painting ONLY after exec   <br/>    }<br/>   exec()<br/>}<br/>\u00a0<br/>\u00a0<br/>###====================================================<br/>\u00a0<br/>Func DrawCounter()<br/>\u00a0<br/>    x  = cos(r * deg2rad) * r / sf <br/>    y  = sin(r * deg2rad) * r / sf<br/>    r += inc   ###  0.20 fast, 0.90 slow<br/>\u00a0<br/>        if r &gt;= turns * 360<br/>            r = inc <br/>            x = 1 <br/>            y = 1   <br/>            counter++<br/>            whichColor = counter\u00a0% 4<br/>            See  \"whichColor: \"+ whichColor +nl<br/>\u00a0<br/>                if whichColor = 0 daVinci.setpen(penUseR)  ok<br/>                if whichColor = 1 daVinci.setpen(penUseG)  ok<br/>                if whichColor = 2 daVinci.setpen(penUseB)  ok<br/>                if whichColor = 3 daVinci.setpen(penUseY)  ok<br/> ok<br/>\u00a0<br/>    hpoint = halfscrn + x<br/>    ypoint = halfscrn - y<br/>\u00a0<br/>    daVinci.drawpoint(hpoint, ypoint)  <br/>    Canvas.setpixmap(MonaLisa)          ### Need this setpixmap to display imageLabel<br/>    win1.show()                         ### Need this show to display imageLabel<br/>\u00a0<br/>return<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 32, "block": "<pre class=\"text highlighted_source\">#[macro_use(px)]<br/>extern crate bmp;<br/>\u00a0<br/>use bmp::{Image, Pixel};<br/>use std::f64;<br/>\u00a0<br/>fn main() {<br/>    let width = 600u32;<br/>    let half_width = (width / 2) as i32;<br/>    let mut img = Image::new(width, width);<br/>    let draw_color = px!(255, 128, 128);<br/>\u00a0<br/>    // Constants defining the spiral size.<br/>    let a = 1.0_f64;<br/>    let b = 9.0_f64;<br/>\u00a0<br/>    // max_angle = number of spirals * 2pi.<br/>    let max_angle = 5.0_f64 * 2.0_f64 * f64::consts::PI;<br/>\u00a0<br/>    let mut theta = 0.0_f64;<br/>    while theta &lt; max_angle {<br/>        theta = theta + 0.002_f64;<br/>\u00a0<br/>        let r = a + b * theta;<br/>        let x = (r * theta.cos()) as i32 + half_width;<br/>        let y = (r * theta.sin()) as i32 + half_width;<br/>        img.set_pixel(x as u32, y as u32, draw_color);<br/>    }<br/>\u00a0<br/>    // Save the image<br/>    let _ = img.save(\"archimedean_spiral.bmp\").unwrap_or_else(|e| panic!(\"Failed to save: {}\", e));<br/>}</pre>"}, {"lang": "SAS", "loc": 14, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> xy;<br/>h=constant<span class=\"br0\">(</span><span class=\"st0\">'pi'</span><span class=\"br0\">)</span>/<span class=\"nu0\">40</span>;<br/><span class=\"kw5\">do</span> i=<span class=\"nu0\">0</span> to <span class=\"nu0\">400</span>;<br/>    t=i<span class=\"coMULTI\">*h;</span><br/>    <span class=\"kw4\">x</span>=<span class=\"br0\">(</span><span class=\"nu0\">1</span>+t<span class=\"br0\">)</span><span class=\"coMULTI\">*cos(t);</span><br/>    y=<span class=\"br0\">(</span><span class=\"nu0\">1</span>+t<span class=\"br0\">)</span><span class=\"coMULTI\">*sin(t);</span><br/>    <span class=\"kw4\">output</span>;<br/><span class=\"kw5\">end</span>;<br/><span class=\"kw4\">keep</span> <span class=\"kw4\">x</span> y;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"re1\">proc sgplot</span>;<br/>series <span class=\"kw4\">x</span>=<span class=\"kw4\">x</span> y=y;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 68, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ArchimedeanSpiral <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Archimedean Spiral\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ArchimedeanSpiral <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawGrid<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>angle, margin, numRings<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>toRadians<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> getWidth<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>center, spacing<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>w / <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"br0\">(</span>numRings <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xEEEEEE<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until numRings<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pos <span class=\"sy0\">=</span> margin + i <span class=\"sy0\">*</span> spacing<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> w - <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin + i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> spacing<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>pos, pos, size, size<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ia <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> angle<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> center + <span class=\"br0\">(</span>cos<span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> center - <span class=\"br0\">(</span>sin<span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>center, center, x2, y2<span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawSpiral<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>degrees<span class=\"sy0\">:</span> Double, center<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>toRadians<span class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span>, getWidth / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a, b, c, end<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">360</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> degrees<span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> plot<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> g.<span class=\"me1\">drawOval</span><span class=\"br0\">(</span>x, y, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter<span class=\"br0\">(</span>theta<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>theta <span class=\"sy0\">&lt;</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> a + b <span class=\"sy0\">*</span> pow<span class=\"br0\">(</span>theta, <span class=\"nu0\">1</span> / c<span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><br/>              plot<span class=\"br0\">(</span>g, <span class=\"br0\">(</span>center + x<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"br0\">(</span>center - y<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>              iter<span class=\"br0\">(</span>theta + degrees<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> theta<br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          g.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> BasicStroke<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">orange</span><span class=\"br0\">)</span><br/>          iter<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>          g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>          drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>          drawSpiral<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ArchimedeanSpiral, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 18, "block": "<pre class=\"text highlighted_source\">a = 3;<br/>b = 2;<br/>\u00a0<br/>theta = linspace(0,10*%pi,1000);<br/>r = a + b .* theta;<br/>\u00a0<br/>//1. Plot using polar coordinates<br/>scf(1);<br/>polarplot(theta,r);<br/>\u00a0<br/>//2. Plot using rectangular coordinates<br/>//2.1 Convert coordinates using Euler's formula<br/>z = r .* exp(%i .* theta);<br/>x = real(z);<br/>y = imag(z);<br/>\u00a0<br/>scf(2);<br/>plot2d(x,y);</pre>"}, {"lang": "Scheme", "loc": 36, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme complex<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>rebottled pstk<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; settings for spiral</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>resolution<span class=\"sy0\">*</span> <span class=\"nu0\">0.01</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>count<span class=\"sy0\">*</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>center<span class=\"sy0\">*</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>size <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; change this to alter size of display</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">*</span> size <span class=\"nu0\">1</span><span class=\"sy0\">+</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>draw<span class=\"sy0\">-</span>spiral canvas<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>coords theta<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">*</span> theta<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">make-polar</span> r theta<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; loop to draw spiral</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"sy0\">*</span>count<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>coords <span class=\"br0\">(</span><span class=\"sy0\">*</span> i <span class=\"sy0\">*</span>resolution<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>center<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>canvas 'create 'line <br/>              <span class=\"br0\">(</span><span class=\"kw1\">real-part</span> c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">imag-part</span> c<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">real-part</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">imag-part</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tk <span class=\"br0\">(</span>tk<span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>tk<span class=\"sy0\">/</span>wm 'title tk <span class=\"st0\">\"Archimedean Spiral\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>canvas <span class=\"br0\">(</span>tk 'create<span class=\"sy0\">-</span>widget 'canvas<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>tk<span class=\"sy0\">/</span>pack canvas<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>canvas 'configure <br/>            'height: <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">real-part</span> <span class=\"sy0\">*</span>center<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            'width: <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">imag-part</span> <span class=\"sy0\">*</span>center<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>draw<span class=\"sy0\">-</span>spiral canvas<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>tk<span class=\"sy0\">-</span>event<span class=\"sy0\">-</span>loop tk<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>define \u03c0 = Num.<span class=\"me1\">pi</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>w, h<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">400</span>, <span class=\"nu0\">400</span><span class=\"br0\">)</span><br/>var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> w, ysize <span class=\"sy0\">=&gt;</span> h<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> \u0398 <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"nu0\">52</span><span class=\"sy0\">*</span>\u03c0 <span class=\"sy0\">-&gt;</span> by<span class=\"br0\">(</span><span class=\"nu0\">0.025</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span><br/>        x <span class=\"sy0\">=&gt;</span> floor<span class=\"br0\">(</span>cos<span class=\"br0\">(</span>\u0398 <span class=\"sy0\">/</span> \u03c0<span class=\"br0\">)</span><span class=\"sy0\">*</span>\u0398 <span class=\"sy0\">+</span> w<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>        y <span class=\"sy0\">=&gt;</span> floor<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>\u0398 <span class=\"sy0\">/</span> \u03c0<span class=\"br0\">)</span><span class=\"sy0\">*</span>\u0398 <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">255</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'Archimedean_spiral.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Stata", "loc": 7, "block": "<pre class=\"text highlighted_source\">clear all<br/>scalar h=_pi/40<br/>set obs 400<br/>gen t=_n*h<br/>gen x=(1+t)*cos(t)<br/>gen y=(1+t)*sin(t)<br/>line y x</pre>"}, {"lang": "Tcl", "loc": 65, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"co1\"># create widgets</span><br/>canvas .canvas<br/>frame .controls<br/>\u00a0<br/>ttk::<span class=\"me1\">label</span> .legend -text <span class=\"st0\">\" r = a + b \u03b8 \"</span><br/>ttk::<span class=\"me1\">label</span> .label_a -text <span class=\"st0\">\"a =\"</span><br/>ttk::<span class=\"me1\">entry</span> .entry_a -textvariable a<br/>ttk::<span class=\"me1\">label</span> .label_b -text <span class=\"st0\">\"a =\"</span><br/>ttk::<span class=\"me1\">entry</span> .entry_b -textvariable b<br/>button .button -text <span class=\"st0\">\"Redraw\"</span> -command draw<br/>\u00a0<br/><span class=\"co1\"># layout</span><br/>grid .canvas .controls -sticky nsew<br/>grid .legend - -sticky ns -<span class=\"kw1\">in</span> .controls<br/>grid .label_a .entry_a -sticky nsew -<span class=\"kw1\">in</span> .controls<br/>grid .label_b .entry_b -sticky nsew -<span class=\"kw1\">in</span> .controls<br/>grid .button - -sticky ns -<span class=\"kw1\">in</span> .controls<br/>\u00a0<br/><span class=\"co1\"># make the canvas resize with the window</span><br/>grid columnconfigure . <span class=\"nu0\">0</span> -weight <span class=\"nu0\">1</span><br/>grid rowconfigure . <span class=\"nu0\">0</span> -weight <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\"># spiral parameters:</span><br/><span class=\"kw1\">set</span> a .2<br/><span class=\"kw1\">set</span> b .05<br/>\u00a0<br/><span class=\"kw1\">proc</span> draw <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> a<br/>    <span class=\"kw1\">variable</span> b<br/>\u00a0<br/>    <span class=\"co1\"># make sure inputs are valid:</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is double <span class=\"re0\">$a</span><span class=\"br0\">]</span> || <span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is double <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> == <span class=\"nu0\">0</span> || <span class=\"re0\">$b</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> w <span class=\"br0\">[</span>winfo width .canvas<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> h <span class=\"br0\">[</span>winfo height .canvas<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> r <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> pi <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>atan<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> step <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pi</span> / <span class=\"re0\">$w</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> t <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> + <span class=\"re0\">$step</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"re0\">$b</span> <span class=\"sy0\">*</span> <span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sin<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>cos<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"co1\"># transform to canvas co-ordinates</span><br/>        <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>entier<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$h</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>entier<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$w</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">lappend</span> coords <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>    <span class=\"br0\">}</span><br/>    .canvas delete all<br/>    <span class=\"kw1\">set</span> id <span class=\"br0\">[</span>.canvas create line <span class=\"re0\">$coords</span> -fill red<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># draw whenever parameters are changed</span><br/><span class=\"co1\"># \";#\" so extra trace arguments are ignored</span><br/>trace add <span class=\"kw1\">variable</span> a write <span class=\"br0\">{</span>draw<span class=\"sy0\">;</span><span class=\"co1\">#}</span><br/>trace add <span class=\"kw1\">variable</span> b write <span class=\"br0\">{</span>draw<span class=\"sy0\">;</span><span class=\"co1\">#}</span><br/>\u00a0<br/>wm protocol . WM_DELETE_WINDOW <span class=\"kw1\">exit</span> <span class=\"sy0\">;</span><span class=\"co1\"># exit when window is closed</span><br/>\u00a0<br/>update  <span class=\"sy0\">;</span><span class=\"co1\"># lay out widgets before trying to draw</span><br/>draw<br/>vwait forever <span class=\"sy0\">;</span><span class=\"co1\"># go into event loop until window is closed</span></pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn archimedeanSpiral(a,b,circles){<br/>   w,h:=640,640; centerX,centerY:=w/2,h/2;<br/>   bitmap:=PPM(w+1,h+1,0xFF|FF|FF);  // White background<br/>\u00a0<br/>   foreach deg in ([0.0 .. 360*circles]){<br/>      rad:=deg.toRad();<br/>      r:=rad*b + a;<br/>      x,y:=r.toRectangular(rad);<br/>      bitmap[centerX + x, centerY + y] = 0x00|FF|00;  // Green dot<br/>   }<br/>   bitmap.writeJPGFile(\"archimedeanSpiral.jpg\");<br/>}(0,5,7);</pre>"}]}