{"task": "Power_set", "blocks": [{"lang": "Ada", "loc": 30, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/><span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> powerset <span class=\"kw1\">is</span><br/>  <span class=\"kw3\">procedure</span> print_subset <span class=\"br0\">(</span>set\u00a0: natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <br/><span class=\"co1\">-- each i'th binary digit of \"set\" indicates if the i'th integer belongs to \"set\" or not.</span><br/>    k\u00a0: natural\u00a0:= set;<br/>    first\u00a0: boolean\u00a0:= true;<br/>  <span class=\"kw1\">begin</span><br/>    Put <span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Argument_Count</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> k <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">if</span> first <span class=\"kw1\">then</span> <br/>          first\u00a0:= false;<br/>        <span class=\"kw1\">else</span> <br/>          Put <span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;        <br/>        Put <span class=\"br0\">(</span>Argument <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      k\u00a0:= k / <span class=\"nu0\">2</span>; <span class=\"co1\">-- we go to the next bit of \"set\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span> print_subset;<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span>**Argument_Count-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>      print_subset <span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> powerset;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 27, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> MEMBER <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> power set <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>MEMBER s<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span>MEMBER<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>2<span class=\"sy1\">**</span><span class=\"kw8\">UPB</span> s<span class=\"br0\">]</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>1<span class=\"sy1\">:</span>0<span class=\"br0\">]</span>MEMBER r<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> upb r <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  r<span class=\"br0\">[</span>upb r <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>MEMBER<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>    MEMBER e <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> upb r <span class=\"kw2\">DO</span><br/>      <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> r<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span>MEMBER x<span class=\"sy1\">;</span><br/>      x<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> x<span class=\"sy1\">-</span>1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> r<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      x<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> e<span class=\"sy1\">;</span> <span class=\"coMULTI\"># append to the end of x #</span><br/>      r<span class=\"br0\">[</span>upb r <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> x <span class=\"coMULTI\"># append to end of r #</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  r<span class=\"br0\">[</span>upb r<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> s<span class=\"sy1\">;</span><br/>  r    <br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># Example: #</span><br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span>MEMBER set <span class=\"sy1\">=</span> power set<span class=\"br0\">(</span><span class=\"br0\">(</span>1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> member <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> set <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">INT</span> upb <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> set<span class=\"br0\">[</span>member<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw6\">FORMAT</span> repr set <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>f<span class=\"br0\">(</span> upb<span class=\"sy1\">=</span>0 <span class=\"sy1\">|</span> $$ <span class=\"sy1\">|</span> $n<span class=\"br0\">(</span>upb<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>d<span class=\"st0\">\", \"</span><span class=\"br0\">)</span>d$ <span class=\"br0\">)</span><span class=\"st0\">\");\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"set[\"</span>d<span class=\"st0\">\"] = \"</span>$<span class=\"sy1\">,</span>member<span class=\"sy1\">,</span> repr set<span class=\"sy1\">,</span> set<span class=\"br0\">[</span>member<span class=\"br0\">]</span><span class=\"sy1\">,</span>$l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 76, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- POWER SET -----------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- powerset\u00a0:: [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> powerset<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> subSet<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>acc, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> cons<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> y<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            acc <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>cons, acc<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>subSet, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> powerset<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> test<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>setName, setMembers<span class=\"br0\">}</span> <span class=\"kw3\">to</span> x<br/>            <span class=\"br0\">{</span>setName, powerset<span class=\"br0\">(</span>setMembers<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>test, <span class=\"br0\">[</span>\u00ac<br/>        <span class=\"br0\">[</span><span class=\"st0\">\"Set [1,2,3]\"</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span>, \u00ac<br/>        <span class=\"br0\">[</span><span class=\"st0\">\"Empty set\"</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span>, \u00ac<br/>        <span class=\"br0\">[</span><span class=\"st0\">\"Set containing only empty set\"</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{\"Set [1,2,3]\", {{}, {3}, {2}, {2, 3}, {1}, {1, 3}, {1, 2}, {1, 2, 3}}}, </span><br/>    <span class=\"co1\">--&gt;  {\"Empty set\", {{}}}, </span><br/>    <span class=\"co1\">--&gt;  {\"Set containing only empty set\", {{}, {{}}}}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "ATS", "loc": 85, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_define.hats\" // defines some names<br/>#include<br/>\"share/atspre_staload.hats\" // for targeting C<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\" // for ...<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>Power_set(xs: list0(int)): void<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>// Helper: fast power function.<br/>fun power(n: int, p: int): int =<br/>\tif p = 1 then n<br/>\telse if p = 0 then 1<br/>\telse if p\u00a0% 2 = 0 then power(n*n, p/2)<br/>\telse n * power(n, p-1)<br/>\u00a0<br/>fun print_list(list: list0(int)): void =<br/>  case+ list of<br/>  | nil0() =&gt; println!(\" \")<br/>  | cons0(car, crd) =&gt;<br/>    let<br/>      val () = begin print car; print ','; end<br/>      val () = print_list(crd)<br/>    in<br/>    end<br/>\u00a0<br/>fun get_list_length(list: list0(int), length: int): int =<br/>  case+ list of<br/>  | nil0() =&gt; length<br/>  | cons0(car, crd) =&gt; get_list_length(crd, length+1)<br/>\u00a0<br/>\u00a0<br/>fun get_list_from_bit_mask(mask: int, list: list0(int), result: list0(int)): list0(int) =<br/>  if mask = 0 then result<br/>  else<br/>    case+ list of<br/>    | nil0() =&gt; result<br/>    | cons0(car, crd) =&gt;<br/>      let<br/>        val current: int = mask\u00a0% 2<br/>      in<br/>        if current = 0 then<br/>          get_list_from_bit_mask(mask &gt;&gt; 1, crd, result)<br/>        else<br/>          get_list_from_bit_mask(mask &gt;&gt; 1, crd, list0_cons(car, result))<br/>      end<br/>\u00a0<br/>\u00a0<br/>implement<br/>Power_set(xs) = let<br/>  val len: int = get_list_length(xs, 0)<br/>  val pow: int = power(2, len)<br/>  fun loop(mask: int, list: list0(int)): void =<br/>    if mask &gt; 0 &amp;&amp; mask &gt;= pow then ()<br/>    else<br/>      let<br/>        val () = print_list(get_list_from_bit_mask(mask, list, list0_nil()))<br/>      in<br/>        loop(mask+1, list)<br/>      end<br/>  in<br/>    loop(0, xs)<br/>  end<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0() =<br/>let<br/>  val xs: list0(int) = cons0(1, list0_pair(2, 3))<br/>in<br/>  Power_set(xs)<br/>end (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,--</span>             <span class=\"co1\">; elements separated by commas</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a> a<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span>   <span class=\"co1\">; a0 = #elements, a1,a2,... = elements of the set</span><br/>\u00a0<br/>t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>a0<span class=\"br0\">)</span> <span class=\"br0\">{</span>       <span class=\"co1\">; generate all 0-1 sequences</span><br/>   x <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>      t <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">&gt;&gt;</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>\u00a0? a<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\",\"</span>\u00a0: <span class=\"st0\">\"\"</span><br/>   t <span class=\"sy0\">.=</span> <span class=\"st0\">\"}`n{\"</span>         <span class=\"co1\">; new subsets in new lines</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\",}\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 11, "block": "<pre class=\"awk highlighted_source\">cat power_set.awk<br/><span class=\"co1\">#!/usr/local/bin/gawk -f</span><br/>\u00a0<br/><span class=\"co1\"># User defined function</span><br/><span class=\"kw6\">function</span> tochar<span class=\"br0\">(</span>l,n,\tr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"br0\">{</span> n<span class=\"sy3\">--</span>; <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"sy3\">%</span>2 <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> r = r <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c \"</span>,<span class=\"nu0\">49</span><span class=\"sy3\">+</span>n<span class=\"br0\">)</span>; l = <span class=\"kw4\">int</span><span class=\"br0\">(</span>l<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>; <span class=\"kw6\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># For each input</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>;i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">2</span><span class=\"sy3\">^</span>NF<span class=\"sy3\">-</span><span class=\"nu0\">1</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"empty<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">else</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"(%s)<span class=\"es0\">\\n</span>\"</span>,tochar<span class=\"br0\">(</span>i,<span class=\"kw3\">NF</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      DIM list$(3)\u00a0: list$() = \"1\", \"2\", \"3\", \"4\"<br/>      PRINT FNpowerset(list$())<br/>      END<br/>\u00a0<br/>      DEF FNpowerset(list$())<br/>      IF DIM(list$(),1) &gt; 31 ERROR 100, \"Set too large to represent as integer\"<br/>      LOCAL i%, j%, s$<br/>      s$ = \"{\"<br/>      FOR i% = 0 TO (2 &lt;&lt; DIM(list$(),1)) - 1<br/>        s$ += \"{\"<br/>        FOR j% = 0 TO DIM(list$(),1)<br/>          IF i% AND (1 &lt;&lt; j%) s$ += list$(j%) + \",\"<br/>        NEXT<br/>        IF RIGHT$(s$) = \",\" s$ = LEFT$(s$)<br/>        s$ += \"},\"<br/>      NEXT i%<br/>      = LEFT$(s$) + \"}\"</pre>"}, {"lang": "Bracmat", "loc": 10, "block": "<pre class=\"text highlighted_source\">( ( powerset<br/>  =   done todo first<br/>    .  \u00a0!arg:(?done.?todo)<br/>      &amp; (  \u00a0!todo:%?first\u00a0?todo<br/>          &amp; (powerset$(!done\u00a0!first.!todo),powerset$(!done.!todo))<br/>        |\u00a0!done<br/>        )<br/>  )<br/>&amp; out$(powerset$(.1 2 3 4))<br/>);</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {1 2 3 4}<a class=\"__cf_email__\" data-cfemail=\"efbdaf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>{{} {1} {2} {1 2} {3} {1 3} {2 3} {1 2 3} {4} {1 4} {2 4} {1 2 4} {3 4} {1 3 4} {2 3 4} {1 2 3 4}}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> node <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">struct</span> node<span class=\"sy0\">*</span> prev<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> powerset<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>up<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> node me<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'['</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>up<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span><span class=\"sy0\">,</span> up<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tup <span class=\"sy0\">=</span> up<span class=\"sy0\">-&gt;</span>prev<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\" ]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tme.<span class=\"me1\">s</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">;</span><br/>\t\tme.<span class=\"me1\">prev</span> <span class=\"sy0\">=</span> up<span class=\"sy0\">;</span><br/>\t\tpowerset<span class=\"br0\">(</span>v <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> up<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpowerset<span class=\"br0\">(</span>v <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>me<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpowerset<span class=\"br0\">(</span>argv <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> argc <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 78, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> set_type<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>set_type<span class=\"sy1\">&gt;</span> powerset_type<span class=\"sy4\">;</span><br/>\u00a0<br/>powerset_type powerset<span class=\"br0\">(</span>set_type <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> set<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">typedef</span> set_type<span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> set_iter<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>set_iter<span class=\"sy1\">&gt;</span> vec<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">typedef</span> vec<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> vec_iter<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">struct</span> local<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> dereference<span class=\"br0\">(</span>set_iter v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy2\">*</span>v<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  powerset_type result<span class=\"sy4\">;</span><br/>\u00a0<br/>  vec elements<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">do</span><br/>  <span class=\"br0\">{</span><br/>    set_type tmp<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>elements.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, elements.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                   std<span class=\"sy4\">::</span><span class=\"me2\">inserter</span><span class=\"br0\">(</span>tmp, tmp.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                   local<span class=\"sy4\">::</span><span class=\"me2\">dereference</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    result.<span class=\"me1\">insert</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>elements.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy2\">++</span>elements.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      elements.<span class=\"me1\">pop_back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      set_iter iter<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>elements.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        iter <span class=\"sy1\">=</span> set.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"br0\">{</span><br/>        iter <span class=\"sy1\">=</span> elements.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"sy2\">++</span>iter<span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span> iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>iter<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        elements.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>iter<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>elements.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> values<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  set_type test_set<span class=\"br0\">(</span>values, values<span class=\"sy2\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  powerset_type test_powerset <span class=\"sy1\">=</span> powerset<span class=\"br0\">(</span>test_set<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>powerset_type<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iter <span class=\"sy1\">=</span> test_powerset.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> test_powerset.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       <span class=\"sy2\">++</span>iter<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"{ \"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> prefix <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>set_type<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iter2 <span class=\"sy1\">=</span> iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>begin<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>         iter2 <span class=\"sy3\">!</span><span class=\"sy1\">=</span> iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>end<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>         <span class=\"sy2\">++</span>iter2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> prefix <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>iter2<span class=\"sy4\">;</span><br/>      prefix <span class=\"sy1\">=</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" }<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> GetPowerSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> list<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">from</span> m <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> list<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>                  <span class=\"kw1\">select</span><br/>                      <span class=\"kw1\">from</span> i <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, list<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>                      <span class=\"kw1\">where</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/>                      <span class=\"kw1\">select</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PowerSetofColors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> colors <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>KnownColor<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> KnownColor<span class=\"sy0\">.</span><span class=\"me1\">Red</span>, KnownColor<span class=\"sy0\">.</span><span class=\"me1\">Green</span>, <br/>        KnownColor<span class=\"sy0\">.</span><span class=\"me1\">Blue</span>, KnownColor<span class=\"sy0\">.</span><span class=\"me1\">Yellow</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> GetPowerSet<span class=\"br0\">(</span>colors<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span> Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span>, <br/>        result<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>subset <span class=\"sy0\">=&gt;</span> <br/>            <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, subset<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>clr <span class=\"sy0\">=&gt;</span> clr<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>combinatorics\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">[</span>subsets<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> S #<span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>subsets S<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 30, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>print_power_set = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"POWER SET of #{arr}\"</span><br/>  <span class=\"kw1\">for</span> subset <span class=\"kw1\">in</span> power_set<span class=\"br0\">(</span>arr<span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span> subset<br/>\u00a0<br/>power_set = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>  <br/>  result = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  binary = <span class=\"br0\">(</span><span class=\"kw4\">false</span> <span class=\"kw1\">for</span> elem <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span><br/>  n = arr.<span class=\"me1\">length</span><br/>  <span class=\"kw1\">while</span> binary.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= n<br/>    result.<span class=\"me1\">push</span> bin_to_arr binary<span class=\"sy0\">,</span> arr<br/>    i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>      <span class=\"kw1\">if</span> binary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        binary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw4\">false</span><br/>        i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        binary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>        <span class=\"kw1\">break</span><br/>    binary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>  result<br/>\u00a0<br/>bin_to_arr = <span class=\"br0\">(</span>binary<span class=\"sy0\">,</span> arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">of</span> binary <span class=\"kw1\">when</span> binary<span class=\"br0\">[</span>arr.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> i  <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>print_power_set <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>print_power_set <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <br/>print_power_set <span class=\"br0\">[</span><span class=\"st0\">'dog'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'a'</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 18, "block": "<pre class=\"javascript highlighted_source\">public array <span class=\"kw1\">function</span> powerset<span class=\"br0\">(</span>required array data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> ps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> arguments.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> lenData <span class=\"sy0\">=</span> arrayLen<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> lenPS <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i LTE lenData<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    lenPS <span class=\"sy0\">=</span> arrayLen<span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j LTE lenPS<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      arrayAppend<span class=\"br0\">(</span>ps<span class=\"sy0\">,</span> listAppend<span class=\"br0\">(</span>ps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> ps<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> res <span class=\"sy0\">=</span> powerset<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> powerset <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> s <span class=\"br0\">(</span><span class=\"kw1\">mapcan</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> s<span class=\"br0\">)</span> x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                <span class=\"br0\">(</span>powerset <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>      '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> powerSet<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">(</span>R r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><br/>\t\t<span class=\"br0\">(</span><span class=\"nu0\">1L</span><span class=\"sy0\">&lt;&lt;</span>r.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>\t\t.<span class=\"me1\">iota</span><br/>\t\t.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span><br/>\t\t\tr.<span class=\"me1\">enumerate</span><br/>\t\t\t.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> i<span class=\"br0\">)</span><br/>\t\t\t.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> emptyArr<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>emptyArr.<span class=\"me1\">powerSet</span>.<span class=\"me1\">equal</span><span class=\"sy0\">!</span>equal<span class=\"br0\">(</span><span class=\"br0\">[</span>emptyArr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>emptyArr.<span class=\"me1\">powerSet</span>.<span class=\"me1\">powerSet</span>.<span class=\"me1\">equal</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>equal<span class=\"sy0\">!</span>equal<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>emptyArr<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\targs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>$<span class=\"br0\">]</span>.<span class=\"me1\">powerSet</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span>writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 10, "block": "<pre class=\"text highlighted_source\">powerset s:<br/>\tlocal\u00a0:out [ set{ } ]<br/>\tfor value in keys s:<br/>\t\tfor subset in copy out:<br/>\t\t\tlocal\u00a0:subset+1 copy subset<br/>\t\t\tset-to subset+1 value true<br/>\t\t\tpush-to out subset+1<br/>\tout<br/>\u00a0<br/>!. powerset set{ 1 2 3 4 }</pre>"}, {"lang": "E", "loc": 9, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> powerset<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> k <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    _.<span class=\"me1\">with</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>i <span class=\"sy0\">&amp;</span> k<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> elem <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> s <span class=\"br0\">{</span><br/>      _.<span class=\"me1\">with</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 33, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>set<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> a A<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">cons</span> a A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set <span class=\"kw1\">e</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">list</span> \u2205<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>ps <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set<br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> ps <span class=\"br0\">(</span><span class=\"kw1\">map</span> set<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>circular<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> B <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set ' <span class=\"br0\">(</span> \ud83c\udf4e \ud83c\udf47 \ud83c\udf82 \ud83c\udf84 <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set B<span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \ud83c\udf47 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf4e <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf4e \ud83c\udf82 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf4e \ud83c\udf82 \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf4e \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf82 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf82 \ud83c\udf84 <span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span> \ud83c\udf47 \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf4e <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf4e \ud83c\udf82 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf4e \ud83c\udf82 \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf4e \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf82 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf82 \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \ud83c\udf84 <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;; The Von Neumann universe</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> V0 <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set null<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; null and \u2205 are the same</span><br/>       \u2192 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> V1 <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set V0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u2192 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> V2 <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set V1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u2192 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> V3 <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set V2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u2192 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">{</span> \u2205 <span class=\"br0\">{</span> \u2205 <span class=\"br0\">}</span> <span class=\"br0\">}</span> \u2026\ud83d\udd03 <span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">length</span> V3<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">16</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> V4 <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set V3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">length</span> V4<span class=\"br0\">)</span>  \u2192 <span class=\"nu0\">65536</span><br/><span class=\"co1\">;; length V5 = 2^65536\u00a0: out of bounds</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  use Bitwise<br/>  def powerset1(list) do<br/>    n = length(list)<br/>    max = round(:math.pow(2,n))<br/>    for i &lt;- 0..max-1, do: (for pos &lt;- 0..n-1, band(i, bsl(1, pos))\u00a0!= 0, do: Enum.at(list, pos) )<br/>  end<br/>\u00a0<br/>  def powerset2([]), do: [[]]<br/>  def powerset2([h|t]) do<br/>    pt = powerset2(t)<br/>    (for x &lt;- pt, do: [h|x]) ++ pt<br/>  end<br/>\u00a0<br/>  def powerset3([]), do: [[]]<br/>  def powerset3([h|t]) do<br/>    pt = powerset3(t)<br/>    powerset3(h, pt, pt)<br/>  end<br/>\u00a0<br/>  defp powerset3(_, [], acc), do: acc<br/>  defp powerset3(x, [h|t], acc), do: powerset3(x, t, [[x|h] | acc])<br/>end<br/>\u00a0<br/>IO.inspect RC.powerset1([1,2,3])<br/>IO.inspect RC.powerset2([1,2,3])<br/>IO.inspect RC.powerset3([1,2,3])<br/>IO.inspect RC.powerset1([])<br/>IO.inspect RC.powerset1([\"one\"])</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>For [1 2 3]:\n    [     ] | 0 0 0 | 0\n    [    3] | 0 0 1 | 1\n    [  2  ] | 0 1 0 | 2\n    [  2 3] | 0 1 1 | 3\n    [1    ] | 1 0 0 | 4\n    [1   3] | 1 0 1 | 5\n    [1 2  ] | 1 1 0 | 6\n    [1 2 3] | 1 1 1 | 7\n    \u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\u00af\n</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> subsets xs <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">foldBack</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x rest <span class=\"sy0\">-&gt;</span> rest @ <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> ys <span class=\"sy0\">-&gt;</span> x::ys<span class=\"br0\">)</span> rest<span class=\"br0\">)</span> xs <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USING: kernel prettyprint sequences arrays sets hash-sets\u00a0;<br/>IN: powerset<br/>\u00a0<br/>: add ( set elt -- newset ) 1array &lt;hash-set&gt; union\u00a0;<br/>: powerset ( set -- newset ) members { HS{ } } [ dupd [ add ] curry map append ] reduce &lt;hash-set&gt;\u00a0;</pre>"}, {"lang": "Forth", "loc": 8, "block": "<pre class=\"text highlighted_source\">:\u00a0?print dup 1 and if over args type space then\u00a0;<br/>: .set begin dup while\u00a0?print &gt;r 1+ r&gt; 1 rshift repeat drop drop\u00a0;<br/>: .powerset 0 do .\" ( \" 1 i .set .\" )\" cr loop\u00a0;<br/>: check-none dup 2 &lt; abort\" Usage: powerset [val] .. [val]\"\u00a0;<br/>: check-size dup /cell 8 [*] &gt;= abort\" Set too large\"\u00a0;<br/>: powerset 1 argn check-none check-size 1- lshift .powerset\u00a0;<br/>\u00a0<br/>powerset</pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = new set[1,2,3,4]  <br/>a.subsets[]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 1, "block": "<pre class=\"text highlighted_source\">def powerset( s ) = s.subsets().toSet()</pre>"}, {"lang": "GAP", "loc": 8, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>Combinations([1, 2, 3]);                                           <br/># [ [  ], [ 1 ], [ 1, 2 ], [ 1, 2, 3 ], [ 1, 3 ], [ 2 ], [ 2, 3 ], [ 3 ] ]<br/>\u00a0<br/># Note that it handles duplicates<br/>Combinations([1, 2, 3, 1]);<br/># [ [  ], [ 1 ], [ 1, 1 ], [ 1, 1, 2 ], [ 1, 1, 2, 3 ], [ 1, 1, 3 ], [ 1, 2 ], [ 1, 2, 3 ], [ 1, 3 ], <br/>#   [ 2 ], [ 2, 3 ], [ 3 ] ]</pre>"}, {"lang": "Go", "loc": 141, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// types needed to implement general purpose sets are element and set</span><br/>\u00a0<br/><span class=\"co1\">// element is an interface, allowing different kinds of elements to be</span><br/><span class=\"co1\">// implemented and stored in sets.</span><br/><span class=\"kw1\">type</span> elem <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// an element must be distinguishable from other elements to satisfy</span><br/>    <span class=\"co1\">// the mathematical definition of a set.  a.eq(b) must give the same</span><br/>    <span class=\"co1\">// result as b.eq(a).</span><br/>    Eq<span class=\"sy1\">(</span>elem<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/>    <span class=\"co1\">// String result is used only for printable output.  Given a, b where</span><br/>    <span class=\"co1\">// a.eq(b), it is not required that a.String() == b.String().</span><br/>    <a href=\"http://golang.org/search?q=fmt.Stringer\"><span class=\"kw5\">fmt.<span class=\"me1\">Stringer</span></span></a><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// integer type satisfying element interface</span><br/><span class=\"kw1\">type</span> Int <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> Int<span class=\"sy1\">)</span> Eq<span class=\"sy1\">(</span>e elem<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    j<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> e<span class=\"sy3\">.</span><span class=\"sy1\">(</span>Int<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> ok &amp;&amp; <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> j<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> Int<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a set is a slice of elem's.  methods are added to implement</span><br/><span class=\"co1\">// the element interface, to allow nesting.</span><br/><span class=\"kw1\">type</span> set <span class=\"sy1\">[]</span>elem<br/>\u00a0<br/><span class=\"co1\">// uniqueness of elements can be ensured by using add method</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>set<span class=\"sy1\">)</span> add<span class=\"sy1\">(</span>e elem<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>s<span class=\"sy3\">.</span>has<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"sy3\">*</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>s<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>set<span class=\"sy1\">)</span> has<span class=\"sy1\">(</span>e elem<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> ex <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy3\">*</span>s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>Eq<span class=\"sy1\">(</span>ex<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> ok<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e0 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> e0<span class=\"sy3\">.</span>Eq<span class=\"sy1\">(</span>e1<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// elem.Eq</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> Eq<span class=\"sy1\">(</span>e elem<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    t<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> e<span class=\"sy3\">.</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> se <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>t<span class=\"sy3\">.</span>has<span class=\"sy1\">(</span>se<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// elem.String</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\u2205\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> buf strings<span class=\"sy3\">.</span>Builder<br/>    buf<span class=\"sy3\">.</span>WriteRune<span class=\"sy1\">(</span><span class=\"st0\">'{'</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            buf<span class=\"sy3\">.</span>WriteRune<span class=\"sy1\">(</span><span class=\"st0\">','</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        buf<span class=\"sy3\">.</span><span class=\"me1\">WriteString</span><span class=\"sy1\">(</span>e<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">())</span><br/>    <span class=\"sy1\">}</span><br/>    buf<span class=\"sy3\">.</span><span class=\"me1\">WriteRune</span><span class=\"sy1\">(</span><span class=\"st0\">'}'</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> buf<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// method required for task</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> powerSet<span class=\"sy1\">()</span> set <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> set<span class=\"sy1\">{</span>set<span class=\"sy1\">{}}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> es <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> u set<br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> er <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>            er <span class=\"sy2\">:=</span> er<span class=\"sy3\">.</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>            u <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> append<span class=\"sy1\">(</span>er<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>er<span class=\"sy1\">):</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>er<span class=\"sy1\">)],</span> es<span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> u<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> s set<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span>Int<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        s<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"      s:\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"st0\">\"length:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    ps <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>powerSet<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"   \ud835\udc77(s):\"</span><span class=\"sy1\">,</span> ps<span class=\"sy1\">,</span> <span class=\"st0\">\"length:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">))</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>(extra credit)\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> empty set<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  empty:\"</span><span class=\"sy1\">,</span> empty<span class=\"sy1\">,</span> <span class=\"st0\">\"len:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>empty<span class=\"sy1\">))</span><br/>    ps <span class=\"sy2\">=</span> empty<span class=\"sy3\">.</span>powerSet<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"   \ud835\udc77(\u2205):\"</span><span class=\"sy1\">,</span> ps<span class=\"sy1\">,</span> <span class=\"st0\">\"len:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">))</span><br/>    ps <span class=\"sy2\">=</span> ps<span class=\"sy3\">.</span>powerSet<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"\ud835\udc77(\ud835\udc77(\u2205)):\"</span><span class=\"sy1\">,</span> ps<span class=\"sy1\">,</span> <span class=\"st0\">\"len:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">))</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>(regression test for earlier bug)\"</span><span class=\"sy1\">)</span><br/>    s <span class=\"sy2\">=</span> set<span class=\"sy1\">{</span>Int<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> Int<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">),</span> Int<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span> Int<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">),</span> Int<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"      s:\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"st0\">\"length:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> <span class=\"st0\">\"ok:\"</span><span class=\"sy1\">,</span> s<span class=\"sy3\">.</span><span class=\"me1\">ok</span><span class=\"sy1\">())</span><br/>    ps <span class=\"sy2\">=</span> s<span class=\"sy3\">.</span><span class=\"me1\">powerSet</span><span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"   \ud835\udc77(s):\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"length:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">),</span> <span class=\"st0\">\"ok:\"</span><span class=\"sy1\">,</span> ps<span class=\"sy3\">.</span>ok<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ps <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>e<span class=\"sy3\">.</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><span class=\"sy3\">.</span>ok<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"invalid set in ps\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 14, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> comb<br/>comb <span class=\"sy0\">=</span> <span class=\"br0\">{</span> m, <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> list <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>\u00a0:<br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> newlist, k <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sublist <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\u00a0: list<span class=\"br0\">[</span><span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">]</span> <br/>            newlist <span class=\"sy0\">+=</span> comb<span class=\"br0\">(</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, sublist<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span>list<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> it <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> powerSet <span class=\"sy0\">=</span> <span class=\"br0\">{</span> set <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span>set.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span> list, i <span class=\"sy0\">-&gt;</span>  list <span class=\"sy0\">+</span> comb<span class=\"br0\">(</span>i,set <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> LinkedHashSet <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> LinkedHashSet<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Set<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>powerset <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> Set a <span class=\"sy0\">-&gt;</span> Set <span class=\"br0\">(</span>Set a<span class=\"br0\">)</span><br/>powerset <span class=\"sy0\">=</span> fromList <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> fromList <span class=\"sy0\">.</span> listPowerset <span class=\"sy0\">.</span> toList<br/>\u00a0<br/>listPowerset <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>listPowerset <span class=\"sy0\">=</span> filterM <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <span class=\"br0\">[</span>True<span class=\"sy0\">,</span> False<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> power_set <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">then</span> <span class=\"kw4\">insert</span> <span class=\"br0\">(</span>result<span class=\"sy1\">,</span> <span class=\"kw4\">set</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># empty set</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      head <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"sy1\">?</span>s<span class=\"br0\">)</span> <span class=\"co1\"># take a random element</span><br/>      <span class=\"co1\"># and find powerset of remaining part of set</span><br/>      tail_pset <span class=\"sy1\">:=</span> power_set <span class=\"br0\">(</span>x <span class=\"sy1\">--</span> head<span class=\"br0\">)</span><br/>      result <span class=\"sy1\">++:=</span> tail_pset <span class=\"co1\"># add powerset of remainder to results</span><br/>      <span class=\"kw1\">every</span> ps <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>tail_pset <span class=\"kw1\">do</span> <span class=\"co1\"># and add head to each powerset from the remainder</span><br/>        <span class=\"kw4\">insert</span> <span class=\"br0\">(</span>result<span class=\"sy1\">,</span> ps <span class=\"sy1\">++</span> head<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">ps =: #~ <span class=\"nu0\">2</span> #:@<a class=\"__cf_email__\" data-cfemail=\"127b3c52\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^ #</pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> getpowerset<span class=\"br0\">(</span><span class=\"kw3\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span>,<span class=\"kw3\">int</span> n,<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> ps<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"kw4\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n==<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>ps==<span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>                ps=<span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ps.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">return</span> ps<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        ps=getpowerset<span class=\"br0\">(</span>a, n-<span class=\"nu0\">1</span>, ps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> tmp=<span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s:ps<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>s.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                tmp.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>+a<span class=\"br0\">[</span>n-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                tmp.<span class=\"me1\">add</span><span class=\"br0\">(</span>s+a<span class=\"br0\">[</span>n-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        ps.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> ps<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 14, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> powerset<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> ps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> ps.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ps.<span class=\"me1\">push</span><span class=\"br0\">(</span>ps<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> ps<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> res <span class=\"sy0\">=</span> powerset<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>load<span class=\"br0\">(</span><span class=\"st0\">'json2.js'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">def powerset:<br/>  reduce .[] as $i ([[]];<br/>     reduce .[] as $r (.; . + [$r + [$i]]));</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function powerset{T}(x::Vector{T})<br/>    result = Vector{T}[[]]<br/>    for elem in x, j in eachindex(result)<br/>        push!(result, [result[j]\u00a0; elem])<br/>    end<br/>    result<br/>end<br/>\u00a0</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>   ps:{<a class=\"__cf_email__\" data-cfemail=\"d3ab93\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;:'+2_vs!_2^#x}<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PowerSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> items<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> combination<span class=\"sy0\">:</span> IntArray<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Power set of $items comprises:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in <span class=\"nu0\">0</span>..<span class=\"me1\">items</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            combination <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>            generate<span class=\"br0\">(</span><span class=\"nu0\">0</span>, m<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>     <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun generate<span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Int, m<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>combination.<span class=\"me1\">map</span> <span class=\"br0\">{</span> items<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until items.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || j <span class=\"sy0\">&gt;</span> combination<span class=\"br0\">[</span>k - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    combination<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<br/>                    generate<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span>, m<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> itemsList <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, <br/>        emptyList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        listOf<span class=\"br0\">(</span>emptyList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>items in itemsList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        PowerSet<span class=\"br0\">(</span>items<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logo", "loc": 8, "block": "<pre class=\"text highlighted_source\">to powerset\u00a0:set<br/>  if empty?\u00a0:set [output [[]]]<br/>  localmake \"rest powerset butfirst\u00a0:set<br/>  output sentence  map [sentence first\u00a0:set\u00a0?]\u00a0:rest \u00a0:rest<br/>end<br/>\u00a0<br/>show powerset [1 2 3]<br/>[[1 2 3] [1 2] [1 3] [1] [2 3] [2] [3] []]</pre>"}, {"lang": "Logtalk", "loc": 25, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(set).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(powerset<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>\u00a0<br/>    powerset(<span class=\"re0\">Set</span>, <span class=\"re0\">PowerSet</span>) <span class=\"sy2\">:-</span><br/>        reverse(<span class=\"re0\">Set</span>, <span class=\"re0\">RSet</span>),<br/>        powerset_1(<span class=\"re0\">RSet</span>, [[]], <span class=\"re0\">PowerSet</span>).<br/>\u00a0<br/>    powerset_1([], <span class=\"re0\">PowerSet</span>, <span class=\"re0\">PowerSet</span>).<br/>    powerset_1([<span class=\"re0\">X</span>| <span class=\"re0\">Xs</span>], <span class=\"re0\">Yss0</span>, <span class=\"re0\">Yss</span>) <span class=\"sy2\">:-</span><br/>        powerset_2(<span class=\"re0\">Yss0</span>, <span class=\"re0\">X</span>, <span class=\"re0\">Yss1</span>),<br/>        powerset_1(<span class=\"re0\">Xs</span>, <span class=\"re0\">Yss1</span>, <span class=\"re0\">Yss</span>).<br/>\u00a0<br/>    powerset_2([], <span class=\"re0\">_</span>, []).<br/>    powerset_2([<span class=\"re0\">Zs</span>| <span class=\"re0\">Zss</span>], <span class=\"re0\">X</span>, [<span class=\"re0\">Zs</span>, [<span class=\"re0\">X</span>| <span class=\"re0\">Zs</span>]| <span class=\"re0\">Yss</span>]) <span class=\"sy2\">:-</span><br/>        powerset_2(<span class=\"re0\">Zss</span>, <span class=\"re0\">X</span>, <span class=\"re0\">Yss</span>).<br/>\u00a0<br/>    reverse(<span class=\"re0\">List</span>, <span class=\"re0\">Reversed</span>) <span class=\"sy2\">:-</span><br/>        reverse(<span class=\"re0\">List</span>, [], <span class=\"re0\">Reversed</span>).<br/>\u00a0<br/>    reverse([], <span class=\"re0\">Reversed</span>, <span class=\"re0\">Reversed</span>).<br/>    reverse([<span class=\"re0\">Head</span>| <span class=\"re0\">Tail</span>], <span class=\"re0\">List</span>, <span class=\"re0\">Reversed</span>) <span class=\"sy2\">:-</span><br/>        reverse(<span class=\"re0\">Tail</span>, [<span class=\"re0\">Head</span>| <span class=\"re0\">List</span>], <span class=\"re0\">Reversed</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "Lua", "loc": 35, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"co1\">--returns the powerset of s, out of order.</span><br/><span class=\"kw1\">function</span> powerset<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> start<span class=\"br0\">)</span><br/>  start <span class=\"sy0\">=</span> start <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>start <span class=\"sy0\">&gt;</span> <span class=\"sy0\">#</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> powerset<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> start <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>ret <span class=\"kw1\">do</span><br/>    ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>s<span class=\"br0\">[</span>start<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--non-recurse implementation</span><br/><span class=\"kw1\">function</span> powerset<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>   <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>s <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span><br/>         t<span class=\"br0\">[</span><span class=\"sy0\">#</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--alternative, copied from the Python implementation</span><br/><span class=\"kw1\">function</span> powerset2<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>s <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> k <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>ret<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> k <span class=\"kw1\">do</span><br/>      ret<span class=\"br0\">[</span>k <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>ret<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "M4", "loc": 22, "block": "<pre class=\"text highlighted_source\">define(`for',<br/>  `ifelse($#, 0, ``$0'',<br/>          eval($2 &lt;= $3), 1,<br/>          `pushdef(`$1', `$2')$4`'popdef(<br/>             `$1')$0(`$1', incr($2), $3, `$4')')')dnl<br/>define(`nth',<br/>  `ifelse($1, 1, $2,<br/>          `nth(decr($1), shift(shift(<a class=\"__cf_email__\" data-cfemail=\"153155\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)))')')dnl<br/>define(`range',<br/>  `for(`x', eval($1 + 2), eval($2 + 2),<br/>       `nth(x, <a class=\"__cf_email__\" data-cfemail=\"082c48\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)`'ifelse(x, eval($2+2), `', `,')')')dnl<br/>define(`powerpart',<br/>  `{range(2, incr($1), <a class=\"__cf_email__\" data-cfemail=\"3e1a7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)}`'ifelse(incr($1), $#, `',<br/>     `for(`x', eval($1+2), $#,<br/>        `,powerpart(incr($1), ifelse(<br/>           eval(2 &lt;= ($1 + 1)), 1,<br/>           `range(2,incr($1), <a class=\"__cf_email__\" data-cfemail=\"fbdfbb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>), ')`'nth(x, <a class=\"__cf_email__\" data-cfemail=\"efcbaf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)`'ifelse(<br/>              eval((x + 1) &lt;= $#),1,`,range(incr(x), $#, <a class=\"__cf_email__\" data-cfemail=\"8da9cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)'))')')')dnl<br/>define(`powerset',<br/>  `{powerpart(0, substr(`$1', 1, eval(len(`$1') - 2)))}')dnl<br/>dnl<br/>powerset(`{a,b,c}')</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>combinat:-powerset({1,2,3,4});<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Subsets[{a, b, c}]</pre>"}, {"lang": "MATLAB", "loc": 18, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> pset = powerset<span class=\"br0\">(</span>theSet<span class=\"br0\">)</span><br/>\u00a0<br/>    pset = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cell.html\"><span class=\"kw2\">cell</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>theSet<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%Preallocate memory</span><br/>\u00a0<br/>    <span class=\"co1\">%Generate all numbers from 0 to 2^(num elements of the set)-1</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span> <span class=\"nu0\">0</span>:<span class=\"br0\">(</span><span class=\"nu0\">2</span>^numel<span class=\"br0\">(</span>theSet<span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">%Convert i into binary, convert each digit in binary to a boolean</span><br/>        <span class=\"co1\">%and store that array of booleans</span><br/>        indicies = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/logical.html\"><span class=\"kw2\">logical</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bitget.html\"><span class=\"kw2\">bitget</span></a><span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>theSet<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <br/>\u00a0<br/>        <span class=\"co1\">%Use the array of booleans to extract the members of the original</span><br/>        <span class=\"co1\">%set, and store the set containing these members in the powerset</span><br/>        pset<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span>theSet<span class=\"br0\">(</span>indicies<span class=\"br0\">)</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">powerset({1, 2, 3, 4});<br/>/* {{}, {1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 4}, {1, 3}, {1, 3, 4},<br/>   {1, 4}, {2}, {2, 3}, {2, 3, 4}, {2, 4}, {3}, {3, 4}, {4}} */</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import sets, hashes<br/>\u00a0<br/>proc hash(x: HashSet[int]): Hash =<br/>  var h = 0<br/>  for i in x: h = h\u00a0!&amp; hash(i)<br/>  result =\u00a0!$h<br/>\u00a0<br/>proc powerset[T](inset: HashSet[T]): auto =<br/>  result = toSet([initSet[T]()])<br/>\u00a0<br/>  for i in inset:<br/>    var tmp = result<br/>    for j in result:<br/>      var k = j<br/>      k.incl(i)<br/>      tmp.incl(k)<br/>    result = tmp<br/>\u00a0<br/>echo powerset(toSet([1,2,3,4]))</pre>"}, {"lang": "Objective-C", "loc": 16, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>powerSetForArray<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>array <span class=\"br0\">{</span><br/>\tUInt32 subsetCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> &lt;&lt; array.count;<br/>\t<a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>subsets <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> arrayWithCapacity<span class=\"sy0\">:</span>subsetCount<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> subsetIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; subsetIndex &lt; subsetCount; subsetIndex<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>subset <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> itemIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; itemIndex &lt; array.count; itemIndex<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>subsetIndex &gt;&gt; itemIndex<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"br0\">[</span>subset addObject<span class=\"sy0\">:</span>array<span class=\"br0\">[</span>itemIndex<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span>\t\t<br/>\t\t<span class=\"br0\">[</span>subsets addObject<span class=\"sy0\">:</span>subset<span class=\"br0\">]</span>;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> subsets;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">module</span> PowerSet<span class=\"br0\">(</span>S<span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">.</span>S<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/><span class=\"kw1\">struct</span><br/>\u00a0<br/>  <span class=\"kw1\">include</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">.</span>Make <span class=\"br0\">(</span>S<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> map f s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> work x r <span class=\"sy0\">=</span> add <span class=\"br0\">(</span>f x<span class=\"br0\">)</span> r <span class=\"kw1\">in</span><br/>    fold work s empty<br/>  <span class=\"sy0\">;;</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> powerset s <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> base <span class=\"sy0\">=</span> singleton <span class=\"br0\">(</span>S<span class=\"sy0\">.</span>empty<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> work x r <span class=\"sy0\">=</span> union r <span class=\"br0\">(</span>map <span class=\"br0\">(</span>S<span class=\"sy0\">.</span>add x<span class=\"br0\">)</span> r<span class=\"br0\">)</span> <span class=\"kw1\">in</span> <br/>    S<span class=\"sy0\">.</span>fold work s base<br/>  <span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* PowerSet *)</span></pre>"}, {"lang": "OPL", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>{string} s={\"A\",\"B\",\"C\",\"D\"};<br/>range r=1.. ftoi(pow(2,card(s)));<br/>{string} s2 [k in r] = {i | i in s: ((k div (ftoi(pow(2,(ord(s,i))))) mod 2) == 1)};<br/>\u00a0<br/>execute<br/>{<br/> writeln(s2);<br/>} <br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 16, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% Given a set as a list, returns its powerset (again as a list)</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Powerset</span> Set<span class=\"br0\">}</span><br/>     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Describe</span> Root<span class=\"br0\">}</span><br/>        <span class=\"co1\">%% Describe sets by lower bound (nil) and upper bound (Set)</span><br/>        Root = <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>var<span class=\"sy0\">.</span>bounds nil Set<span class=\"br0\">}</span><br/>        <span class=\"co1\">%% enumerate all possible sets</span><br/>        <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>distribute naive <span class=\"br0\">[</span>Root<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     AllSets = <span class=\"br0\">{</span>SearchAll Describe<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"co1\">%% convert to list representation</span><br/>     <span class=\"br0\">{</span>Map AllSets FS<span class=\"sy0\">.</span>reflect<span class=\"sy0\">.</span>lowerBoundList<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>Powerset <span class=\"br0\">[</span>1 2 3 4<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span>#S<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>S<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Algorithm<span class=\"sy0\">::</span><span class=\"me2\">Combinatorics</span> <span class=\"st0\">\"subsets\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@S</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@PS</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$iter</span> <span class=\"sy0\">=</span> subsets<span class=\"br0\">(</span><span class=\"re0\">\\@S</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iter</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">next</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@PS</span><span class=\"sy0\">,</span> <span class=\"st0\">\"[@$p]\"</span><br/><span class=\"br0\">}</span><br/>say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy0\">,</span><span class=\"re0\">@PS</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> powerset<span class=\"br0\">(</span>Set <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">combinations</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">Set</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Set</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> powerset set <span class=\"sy0\">&lt;</span>a b c d<span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">sequence powerset<br/>integer step = 1<br/>\u00a0<br/>function pst(object key, object /*data*/, object /*user_data*/)<br/>    integer k = 1<br/>    while k&lt;length(powerset) do<br/>        k += step<br/>        for j=1 to step do<br/>            powerset[k] = append(powerset[k],key)<br/>            k += 1<br/>        end for<br/>    end while<br/>    step *= 2<br/>    return 1<br/>end function<br/>\u00a0<br/>function power_set(integer d)<br/>    powerset = repeat({},power(2,dict_size(d)))<br/>    step = 1<br/>    traverse_dict(routine_id(\"pst\"),0,d)<br/>    return powerset<br/>end function<br/>\u00a0<br/>integer d1234 = new_dict()<br/>setd(1,0,d1234)<br/>setd(2,0,d1234)<br/>setd(3,0,d1234)<br/>setd(4,0,d1234)<br/>?power_set(d1234)<br/>integer d0 = new_dict()<br/>?power_set(d0)<br/>setd({},0,d0)<br/>?power_set(d0)</pre>"}, {"lang": "PHP", "loc": 61, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> get_subset<span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// based on true/false values in $binary array, include/exclude</span><br/>  <span class=\"co1\">// values from $arr</span><br/>  <span class=\"re0\">$subset</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$subset</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$subset</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> print_array<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <a href=\"http://www.php.net/join\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"(empty)\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> print_power_sets<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"POWER SET of [\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.php.net/join\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"]&lt;br&gt;\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>power_set<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$subset</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print_array<span class=\"br0\">(</span><span class=\"re0\">$subset</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> power_set<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <br/>  <span class=\"re0\">$binary</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$powerset</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$powerset</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> get_subset<span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$binary</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$powerset</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>print_power_sets<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print_power_sets<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'singleton'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print_power_sets<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'dog'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de powerset (Lst)<br/>   (ifn Lst<br/>      (cons)<br/>      (let L (powerset (cdr Lst))<br/>         (conc<br/>            (mapcar '((X) (cons (car Lst) X)) L)<br/>            L ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 66, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 06.01.2014 Walter Pachl  translated from REXX<br/> *-------------------------------------------------------------------*/</span><br/> powerset<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">hbound</span><span class=\"sy0\">,</span><span class=\"kw1\">index</span><span class=\"sy0\">,</span><span class=\"kw1\">left</span><span class=\"sy0\">,</span><span class=\"kw1\">substr</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">sysprint</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'one'</span><span class=\"sy0\">,</span><span class=\"st0\">'two'</span><span class=\"sy0\">,</span><span class=\"st0\">'three'</span><span class=\"sy0\">,</span><span class=\"st0\">'four'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ps   <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>chunk<span class=\"sy0\">,</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> n<span class=\"sy0\">=</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>                      <span class=\"coMULTI\">/* number of items in the list.   */</span><br/> ps<span class=\"sy0\">=</span><span class=\"st0\">'{} '</span><span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* start with a null power set.   */</span><br/> <span class=\"kw1\">Do</span> chunk<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">;</span>                  <span class=\"coMULTI\">/* loop through the ...     .     */</span><br/>   ps<span class=\"sy0\">=</span>ps!!combn<span class=\"br0\">(</span>chunk<span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* a CHUNK at a time.             */</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>ps<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>ps<span class=\"sy0\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>ps<span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   ps<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>ps<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> combn<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * returns the list of subsets with y elements of set s<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span>base<span class=\"sy0\">,</span>bbase<span class=\"sy0\">,</span>ym<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>u<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>z<span class=\"sy0\">,</span>l<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> base<span class=\"sy0\">=</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> bbase<span class=\"sy0\">=</span>base<span class=\"sy0\">-</span>y<span class=\"sy0\">;</span><br/> ym<span class=\"sy0\">=</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> p<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> y<span class=\"sy0\">;</span><br/>   a<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   l<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> y<span class=\"sy0\">;</span><br/>     u<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     l<span class=\"sy0\">=</span>l!!<span class=\"st0\">','</span>!!s<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   z<span class=\"sy0\">=</span>z!!<span class=\"st0\">'{'</span>!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>l<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>!!<span class=\"st0\">'} '</span><span class=\"sy0\">;</span><br/>   a<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">=</span>base <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">If</span> combu<span class=\"br0\">(</span>ym<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* Put Edit('combn',y,z)(Skip,a,f(2),x(1),a); */</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> combu<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">Recursive</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>d<span class=\"sy0\">,</span>u<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> d<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> p<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> u<span class=\"sy0\">=</span>d <span class=\"kw1\">To</span> y<span class=\"sy0\">;</span><br/>   a<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">=</span>bbase<span class=\"sy0\">+</span>u <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Return</span><span class=\"br0\">(</span>combu<span class=\"br0\">(</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 36, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> power<span class=\"sy0\">-</span><span class=\"kw2\">set</span> <span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$array</span>.Count<br/>        <span class=\"kw3\">function</span> state<span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-gt</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                state <span class=\"re0\">$set</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                state <span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"1e355e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <br/>            <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"$($set | sort)\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$set</span> <span class=\"sy0\">=</span> state <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$power</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$set</span>.Count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"re0\">$set</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"re0\">$power</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Split<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"re0\">$power</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Count<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><br/><span class=\"re0\">$setA</span> <span class=\"sy0\">=</span> power<span class=\"sy0\">-</span><span class=\"kw2\">set</span>  <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"number of sets in setA: $($setA.Count)\"</span><br/><span class=\"st0\">\"sets in setA:\"</span><br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span><br/><span class=\"re0\">$setA</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"$_\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><span class=\"br0\">}</span> <br/><span class=\"re0\">$setB</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"number of sets in setB: $($setB.Count)\"</span><br/><span class=\"st0\">\"sets in setB:\"</span><br/><span class=\"re0\">$setB</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"$_\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><span class=\"br0\">}</span> <br/><span class=\"re0\">$setC</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"number of sets in setC: $($setC.Count)\"</span><br/><span class=\"st0\">\"sets in setC:\"</span><br/><span class=\"re0\">$setC</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"$_\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><span class=\"br0\">}</span> <br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">powerset<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span> S<span class=\"sy4\">,</span> subseq<span class=\"br0\">(</span>S<span class=\"sy4\">,</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>subseq<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>subseq<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>subseq<span class=\"br0\">(</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">:-</span> subseq<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>subseq<span class=\"br0\">(</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">:-</span> append<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Zs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">,</span> subseq<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Zs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 25, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> argc<span class=\"sy0\">=</span><span class=\"kw2\">CountProgramParameters</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> argc<span class=\"sy0\">&gt;=</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> argc<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Set out of range.\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Define</span> i, j, text$<br/>    <span class=\"kw1\">Define</span>.q bset<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>argc<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> bset<span class=\"sy0\">-</span><span class=\"nu0\">1</span>   <span class=\"co1\">; check all binary combinations</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> i: text$<span class=\"sy0\">=</span>  <span class=\"st0\">\"{\"</span><br/>      <span class=\"kw1\">Else</span>   \u00a0: text$<span class=\"sy0\">=</span><span class=\"st0\">\", {\"</span><br/>      <span class=\"kw1\">EndIf</span><br/>      k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> argc<span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"co1\">; step through each bit   </span><br/>        <span class=\"kw1\">If</span> i<span class=\"sy0\">&amp;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>j<span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> k: text$<span class=\"sy0\">+</span><span class=\"st0\">\", \"</span>: <span class=\"kw1\">EndIf</span>         <span class=\"co1\">; pad the output </span><br/>          text$<span class=\"sy0\">+</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>: k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <span class=\"co1\">; append each matching bit </span><br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Next</span> j<br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span>text$<span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> list_powerset<span class=\"br0\">(</span>lst<span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># the power set of the empty set has one element, the empty set</span><br/>    result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> lst:<br/>        <span class=\"co1\"># for every additional element in our set</span><br/>        <span class=\"co1\"># the power set consists of the subsets that don't</span><br/>        <span class=\"co1\"># contain this element (just take the previous power set)</span><br/>        <span class=\"co1\"># plus the subsets that do contain the element (use list</span><br/>        <span class=\"co1\"># comprehension to add [x] onto everything in the</span><br/>        <span class=\"co1\"># previous power set)</span><br/>        result.<span class=\"me1\">extend</span><span class=\"br0\">(</span><span class=\"br0\">[</span>subset + <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">for</span> subset <span class=\"kw1\">in</span> result<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> result<br/>\u00a0<br/><span class=\"co1\"># the above function in one statement</span><br/><span class=\"kw1\">def</span> list_powerset2<span class=\"br0\">(</span>lst<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> result<span class=\"sy0\">,</span> x: result + <span class=\"br0\">[</span>subset + <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">for</span> subset <span class=\"kw1\">in</span> result<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                  lst<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> powerset<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">frozenset</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">frozenset</span><span class=\"sy0\">,</span> list_powerset<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define powerset<br/>  [] -&gt; [[]]<br/>  [A|As] -&gt; (append (map (cons A) (powerset As))<br/>                    (powerset As)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">for each element in the set:<br/>\tfor each subset constructed so far:<br/>\t\tnew subset = (subset + element)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>;;; Direct translation of 'functional' ruby method<br/>(define (powerset s)<br/>  (for/fold ([outer-set (set(set))]) ([element s])<br/>    (set-union outer-set <br/>               (list-&gt;set (set-map outer-set<br/>                                   (\u03bb(inner-set) (set-add inner-set element)))))))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import Set;<br/>\u00a0<br/>public set[set[&amp;T]] PowerSet(set[&amp;T] s) = power(s);<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  displays a  power set;  items may be  anything  (but can't have blanks).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> S                                      <span class=\"coMULTI\">/*allow the user specify optional set. */</span><br/><span class=\"kw1\">if</span> S=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> S= <span class=\"st0\">'one two three four'</span>            <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>@=<span class=\"st0\">'{}'</span>                                           <span class=\"coMULTI\">/*start process with a null power set. */</span><br/>N=<span class=\"kw6\">words</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span>;     <span class=\"kw1\">do</span> chunk=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                <span class=\"coMULTI\">/*traipse through the items in the set.*/</span><br/>                @<a class=\"__cf_email__\" data-cfemail=\"b28ff2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  combN<span class=\"br0\">(</span>N, chunk<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*take  N  items, a  CHUNK  at a time. */</span><br/>                <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*chunk*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>N<span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*the number of items in the power set.*/</span><br/>                <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>             <span class=\"coMULTI\">/* [\u2193]  show combinations, one per line*/</span><br/>                <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>k, w<span class=\"br0\">)</span>  <span class=\"kw6\">word</span><span class=\"br0\">(</span>@, k<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*display a single combination to term.*/</span><br/>                <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>combN:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> S;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;     base=x+<span class=\"nu0\">1</span>;      bbase=base-y;         \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>                        <span class=\"kw1\">do</span> p=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y; \u00a0!<span class=\"sy0\">.</span>p=p;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*p*/</span><br/>        $=<br/>                        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>;  L=<br/>                                                       <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y;   L=L<span class=\"st0\">','</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>S,\u00a0!<span class=\"sy0\">.</span>d<span class=\"br0\">)</span><br/>                                                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*d*/</span><br/>                        $=$  <span class=\"st0\">'{'</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>L, <span class=\"st0\">\"L\"</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"st0\">\"}\"</span><br/>                       \u00a0!<span class=\"sy0\">.</span>y=!<span class=\"sy0\">.</span>y+<span class=\"nu0\">1</span>;    <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>y==base  <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> <span class=\"sy0\">.</span>combU<span class=\"br0\">(</span>y-<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*return with a partial powerset chunk.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>combU: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span> y bbase;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> d;        <span class=\"kw1\">if</span> d==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;    p=!<span class=\"sy0\">.</span>d<br/>                        <span class=\"kw1\">do</span> u=d  <span class=\"kw2\">to</span> y; \u00a0!<span class=\"sy0\">.</span>u=p+<span class=\"nu0\">1</span>;   <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>u==bbase+u  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>combU<span class=\"br0\">(</span>u-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        p=!<span class=\"sy0\">.</span>u<br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*u*/</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Ring", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Power set<br/>\u00a0<br/>list = [\"1\", \"2\", \"3\", \"4\"]<br/>see powerset(list)<br/>\u00a0<br/>func powerset(list)<br/>        s = \"{\"<br/>        for i = 1 to (2 &lt;&lt; len(list)) - 1 step 2<br/>             s = s + \"{\"<br/>             for j = 1 to len(list) <br/>                  if i &amp; (1 &lt;&lt; j)<br/>                     s = s + list[j] + \",\"<br/>                  ok<br/>             next<br/>             if right(s,1) = \",\"<br/>                s = left(s,len(s)-1)<br/>             ok<br/>             s = s + \"},\"<br/>        next<br/>        return left(s,len(s)-1) + \"}\"<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 44, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Based on http://johncarrino.net/blog/2006/08/11/powerset-in-ruby/ </span><br/><span class=\"co1\"># See the link if you want a shorter version. </span><br/><span class=\"co1\"># This was intended to show the reader how the method works. </span><br/><span class=\"kw1\">class</span> <span class=\"kw3\">Array</span><br/>  <span class=\"co1\"># Adds a power_set method to every array, i.e.: [1, 2].power_set</span><br/>  <span class=\"kw1\">def</span> power_set<br/>\u00a0<br/>    <span class=\"co1\"># Injects into a blank array of arrays.</span><br/>    <span class=\"co1\"># acc is what we're injecting into</span><br/>    <span class=\"co1\"># you is each element of the array</span><br/>    inject<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>acc, you<span class=\"sy0\">|</span><br/>      ret = <span class=\"br0\">[</span><span class=\"br0\">]</span>             <span class=\"co1\"># Set up a new array to add into</span><br/>      acc.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span>      <span class=\"co1\"># For each array in the injected array,</span><br/>        ret <span class=\"sy0\">&lt;&lt;</span> i           <span class=\"co1\"># Add itself into the new array</span><br/>        ret <span class=\"sy0\">&lt;&lt;</span> i <span class=\"sy0\">+</span> <span class=\"br0\">[</span>you<span class=\"br0\">]</span>   <span class=\"co1\"># Merge the array with a new array of the current element</span><br/>      <span class=\"kw1\">end</span><br/>      ret       <span class=\"co1\"># Return the array we're looking at to inject more.</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># A more functional and even clearer variant.</span><br/>  <span class=\"kw1\">def</span> func_power_set<br/>    inject<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>ps,item<span class=\"sy0\">|</span>    <span class=\"co1\"># for each item in the Array</span><br/>      ps <span class=\"sy0\">+</span>                      <span class=\"co1\"># take the powerset up to now and add</span><br/>      ps.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e <span class=\"sy0\">+</span> <span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># it again, with the item appended to each element</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#A direct translation of the \"power array\" version above</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/><span class=\"kw1\">class</span> <span class=\"kw4\">Set</span><br/>  <span class=\"kw1\">def</span> powerset <br/>    inject<span class=\"br0\">(</span><span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>ps, item<span class=\"sy0\">|</span> <br/>      ps.<span class=\"me1\">union</span> ps.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e.<span class=\"me1\">union</span> <span class=\"br0\">(</span><span class=\"kw4\">Set</span>.<span class=\"me1\">new</span> <span class=\"br0\">[</span>item<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">power_set</span><br/><span class=\"kw3\">p</span> <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>one two three<span class=\"br0\">)</span>.<span class=\"me1\">func_power_set</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">powerset</span></pre>"}, {"lang": "SAS", "loc": 55, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/><span class=\"kw4\">options</span> mprint mlogic symbolgen source source2;<br/>\u00a0<br/><span class=\"kw2\">%macro</span> SubSets <span class=\"br0\">(</span>FieldCount = <span class=\"br0\">)</span>;<br/><span class=\"kw6\">data</span> <span class=\"kw1\">_NULL_</span>;<br/>\tFields = <span class=\"re0\">&amp;FieldCount</span>;<br/>\tSubSets = <span class=\"nu0\">2</span><span class=\"coMULTI\">**Fields;</span><br/>\t<span class=\"kw4\">call</span> symput <span class=\"br0\">(</span><span class=\"st0\">\"NumSubSets\"</span>, SubSets<span class=\"br0\">)</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"kw2\">%put</span> <span class=\"re0\">&amp;NumSubSets</span>;<br/>\u00a0<br/><span class=\"kw6\">data</span> inital;<br/>\t<span class=\"kw2\">%do</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">%to</span> <span class=\"re0\">&amp;FieldCount</span>;<br/>\t\tF<span class=\"re0\">&amp;j</span>. = <span class=\"nu0\">1</span>;<br/>\t<span class=\"kw2\">%end</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"kw6\">data</span> SubSets;<br/>\t<span class=\"kw4\">set</span> inital;<br/>\tRowCount =<span class=\"kw1\">_n_</span>;<br/>\t<span class=\"kw4\">call</span> symput<span class=\"br0\">(</span><span class=\"st0\">\"SetCount\"</span>,RowCount<span class=\"br0\">)</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"kw2\">%put</span> SetCount\u00a0;<br/>\u00a0<br/><span class=\"kw2\">%do</span> <span class=\"kw2\">%while</span> <span class=\"br0\">(</span><span class=\"re0\">&amp;SetCount</span> &lt; <span class=\"re0\">&amp;NumSubSets</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw6\">data</span> loop;<br/>\t<span class=\"kw2\">%do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">%to</span> <span class=\"re0\">&amp;FieldCount</span>;<br/>\t\t<span class=\"kw5\">if</span> rand<span class=\"br0\">(</span><span class=\"st0\">'GAUSSIAN'</span><span class=\"br0\">)</span> &gt; rand<span class=\"br0\">(</span><span class=\"st0\">'GAUSSIAN'</span><span class=\"br0\">)</span> <span class=\"kw5\">then</span> F<span class=\"re0\">&amp;j</span>. = <span class=\"nu0\">1</span>;<br/>\t<span class=\"kw2\">%end</span>;<br/>\u00a0<br/><span class=\"kw6\">data</span> SubSets_ \u00a0;<br/><span class=\"kw4\">set</span> SubSets loop;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"re1\">proc sort</span> <span class=\"kw6\">data</span>=SubSets_  nodupkey;<br/>\t<span class=\"kw4\">by</span> F1 - F<span class=\"re0\">&amp;FieldCount</span>.;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"kw6\">data</span> Subsets;<br/>\t<span class=\"kw4\">set</span> SubSets_;<br/>\tRowCount =<span class=\"kw1\">_n_</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"re1\">proc sql</span> noprint;<br/>\t<span class=\"kw4\">select</span> <span class=\"kw3\">max</span><span class=\"br0\">(</span>RowCount<span class=\"br0\">)</span> <span class=\"kw4\">into</span>\u00a0:SetCount<br/>\t<span class=\"kw4\">from</span> SubSets;<br/><span class=\"kw6\">quit</span>;<br/><span class=\"kw6\">run</span>; <br/>\u00a0<br/><span class=\"kw2\">%end</span>;<br/><span class=\"kw2\">%Mend</span> SubSets;<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Powerset <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> powerset<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span>Set<span class=\"br0\">(</span>Set.<span class=\"me1\">empty</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>ss, el<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ss ++ ss.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + el<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>powerset<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> Set<span class=\"br0\">(</span>Set.<span class=\"me1\">empty</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>    Set<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 13, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set set<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> set<span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rest <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> set<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>element<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> set<span class=\"br0\">)</span> element<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     rest<span class=\"br0\">)</span><br/>                rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>power<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"st0\">\"A\"</span> <span class=\"st0\">\"C\"</span> <span class=\"st0\">\"E\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 29, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array bitset: powerSet (in bitset: baseSet) is func<br/>  result<br/>    var array bitset: pwrSet is [] (bitset.value);<br/>  local<br/>    var integer: element is 0;<br/>    var integer: index is 0;<br/>    var bitset: aSet is bitset.value;<br/>  begin<br/>    for element range baseSet do<br/>      for key index range pwrSet do<br/>        aSet\u00a0:= pwrSet[index];<br/>        if element not in aSet then<br/>          incl(aSet, element);<br/>          pwrSet &amp;:= aSet;<br/>        end if;<br/>      end for;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bitset: aSet is bitset.value;<br/>  begin<br/>    for aSet range powerSet({1, 2, 3, 4}) do<br/>      writeln(aSet);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">Pfour\u00a0:<span class=\"sy0\">=</span> pow<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>Pempty\u00a0:<span class=\"sy0\">=</span> pow<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>PPempty\u00a0:<span class=\"sy0\">=</span> pow<span class=\"br0\">(</span>Pempty<span class=\"br0\">)</span>;<br/>\u00a0<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span>Pfour<span class=\"br0\">)</span>;<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span>Pempty<span class=\"br0\">)</span>;<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span>PPempty<span class=\"br0\">)</span>;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">var arr = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">arr</span>.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say arr.<span class=\"me1\">combinations</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 124, "block": "<pre class=\"text highlighted_source\">SIMSET<br/>BEGIN<br/>\u00a0<br/>    LINK CLASS LOF_INT(N); INTEGER N;;<br/>\u00a0<br/>    LINK CLASS LOF_LOF_INT(H); REF(HEAD) H;;<br/>\u00a0<br/>    REF(HEAD) PROCEDURE MAP(P_LI, P_LLI);<br/>        REF(HEAD) P_LI;<br/>        REF(HEAD) P_LLI;<br/>    BEGIN<br/>        REF(HEAD) V_RESULT;<br/>        V_RESULT\u00a0:- NEW HEAD;<br/>        IF NOT P_LLI.EMPTY THEN BEGIN<br/>            REF(LOF_LOF_INT) V_LLI;<br/>            V_LLI\u00a0:- P_LLI.FIRST QUA LOF_LOF_INT;<br/>            WHILE V_LLI =/= NONE DO BEGIN<br/>                REF(HEAD) V_NEWLIST;<br/>                V_NEWLIST\u00a0:- NEW HEAD;<br/>               \u00a0! ADD THE SAME 1ST ELEMENT TO EVERY NEWLIST\u00a0;<br/>                NEW LOF_INT(P_LI.FIRST QUA LOF_INT.N).INTO(V_NEWLIST);<br/>                IF NOT V_LLI.H.EMPTY THEN BEGIN<br/>                    REF(LOF_INT) V_LI;<br/>                    V_LI\u00a0:- V_LLI.H.FIRST QUA LOF_INT;<br/>                    WHILE V_LI =/= NONE DO BEGIN<br/>                        NEW LOF_INT(V_LI.N).INTO(V_NEWLIST);<br/>                        V_LI\u00a0:- V_LI.SUC;<br/>                    END;<br/>                END;<br/>                NEW LOF_LOF_INT(V_NEWLIST).INTO(V_RESULT);<br/>                V_LLI\u00a0:- V_LLI.SUC;<br/>            END;<br/>        END;<br/>        MAP\u00a0:- V_RESULT;<br/>    END MAP;<br/>\u00a0<br/>    REF(HEAD) PROCEDURE SUBSETS(P_LI);<br/>        REF(HEAD) P_LI;<br/>    BEGIN<br/>        REF(HEAD) V_RESULT;<br/>        IF P_LI.EMPTY THEN BEGIN<br/>            V_RESULT\u00a0:- NEW HEAD;<br/>            NEW LOF_LOF_INT(NEW HEAD).INTO(V_RESULT);<br/>        END ELSE BEGIN<br/>            REF(HEAD) V_SUBSET, V_MAP;<br/>            REF(LOF_INT) V_LI;<br/>            V_SUBSET\u00a0:- NEW HEAD;<br/>            V_LI\u00a0:- P_LI.FIRST QUA LOF_INT;<br/>           \u00a0! SKIP OVER 1ST ELEMENT\u00a0;<br/>            IF V_LI =/= NONE THEN V_LI\u00a0:- V_LI.SUC;<br/>            WHILE V_LI =/= NONE DO BEGIN<br/>                NEW LOF_INT(V_LI.N).INTO(V_SUBSET);<br/>                V_LI\u00a0:- V_LI.SUC;<br/>            END;<br/>            V_RESULT\u00a0:- SUBSETS(V_SUBSET);<br/>            V_MAP\u00a0:- MAP(P_LI, V_RESULT);<br/>            IF NOT V_MAP.EMPTY THEN BEGIN<br/>                REF(LOF_LOF_INT) V_LLI;<br/>                V_LLI\u00a0:- V_MAP.FIRST QUA LOF_LOF_INT;<br/>                WHILE V_LLI =/= NONE DO BEGIN<br/>                    NEW LOF_LOF_INT(V_LLI.H).INTO(V_RESULT);<br/>                    V_LLI\u00a0:- V_LLI.SUC;<br/>                END;<br/>            END;<br/>        END;<br/>        SUBSETS\u00a0:- V_RESULT;<br/>    END SUBSETS;<br/>\u00a0<br/>    PROCEDURE PRINT_LIST(P_LI); REF(HEAD) P_LI;<br/>    BEGIN<br/>        OUTTEXT(\"[\");<br/>        IF NOT P_LI.EMPTY THEN BEGIN<br/>            INTEGER I;<br/>            REF(LOF_INT) V_LI;<br/>            I\u00a0:= 0;<br/>            V_LI\u00a0:- P_LI.FIRST QUA LOF_INT;<br/>            WHILE V_LI =/= NONE DO BEGIN<br/>                IF I &gt; 0 THEN OUTTEXT(\",\");<br/>                OUTINT(V_LI.N, 0);<br/>                V_LI\u00a0:- V_LI.SUC;<br/>                I\u00a0:= I+1;<br/>            END;<br/>        END;<br/>        OUTTEXT(\"]\");<br/>    END PRINT_LIST;<br/>\u00a0<br/>    PROCEDURE PRINT_LIST_LIST(P_LLI); REF(HEAD) P_LLI;<br/>    BEGIN<br/>        OUTTEXT(\"[\");<br/>        IF NOT P_LLI.EMPTY THEN BEGIN<br/>            INTEGER I;<br/>            REF(LOF_LOF_INT) V_LLI;<br/>            I\u00a0:= 0;<br/>            V_LLI\u00a0:- P_LLI.FIRST QUA LOF_LOF_INT;<br/>            WHILE V_LLI =/= NONE DO BEGIN<br/>                IF I &gt; 0 THEN BEGIN<br/>                    OUTTEXT(\",\");<br/>               \u00a0!   OUTIMAGE;<br/>                END;<br/>                PRINT_LIST(V_LLI.H);<br/>                V_LLI\u00a0:- V_LLI.SUC;<br/>                I\u00a0:= I+1;<br/>            END;<br/>        END;<br/>        OUTTEXT(\"]\");<br/>        OUTIMAGE;<br/>    END PRINT_LIST_LIST;<br/>\u00a0<br/>    INTEGER N;<br/>    REF(HEAD) V_RANGE;<br/>    REF(HEAD) V_LISTS;<br/>\u00a0<br/>    V_RANGE\u00a0:- NEW HEAD;<br/>    V_LISTS\u00a0:- SUBSETS(V_RANGE);<br/>    PRINT_LIST_LIST(V_LISTS);<br/>    OUTIMAGE;<br/>    FOR N\u00a0:= 1 STEP 1 UNTIL 4 DO BEGIN<br/>        NEW LOF_INT(N).INTO(V_RANGE);<br/>        V_LISTS\u00a0:- SUBSETS(V_RANGE);<br/>        PRINT_LIST_LIST(V_LISTS);<br/>        OUTIMAGE;<br/>    END;<br/>END.<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Collection</span> extend <span class=\"br0\">[</span><br/>    <span class=\"re5\">power</span> <span class=\"br0\">[</span><br/>        ^<span class=\"br0\">(</span><span class=\"re5\">0</span> to: <span class=\"br0\">(</span><span class=\"re5\">1</span> bitShift: <span class=\"kw1\">self</span> size<span class=\"br0\">)</span> - <span class=\"re5\">1</span><span class=\"br0\">)</span> readStream collect: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">each</span> ||<span class=\"re3\"> i </span>|<br/>            <span class=\"re6\">i</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>            <span class=\"kw1\">self</span> select: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">elem</span> | <span class=\"br0\">(</span><span class=\"re5\">each</span> bitAt: <span class=\"br0\">(</span><span class=\"re5\">i</span> <span class=\"sy0\">:=</span> <span class=\"re5\">i</span> + <span class=\"re5\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re5\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">fun subsets xs = foldr (fn (x, rest) =&gt; rest @ map (fn ys =&gt; x::ys) rest) [[]] xs</pre>"}, {"lang": "Swift", "loc": 15, "block": "<pre class=\"text highlighted_source\">func powersetFrom&lt;T&gt;(_ elements: Set&lt;T&gt;) -&gt; Set&lt;Set&lt;T&gt;&gt; {<br/>  guard elements.count &gt; 0 else {<br/>    return [[]]<br/>  }<br/>  var powerset: Set&lt;Set&lt;T&gt;&gt; = [[]]<br/>  for element in elements {<br/>    for subset in powerset {<br/>      powerset.insert(subset.union([element]))<br/>    }<br/>  }<br/>  return powerset<br/>}<br/>\u00a0<br/>// Example:<br/>powersetFrom([1, 2, 4])</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> subsets <span class=\"br0\">{</span>l<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> e <span class=\"re0\">$l</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> subset <span class=\"re0\">$res</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> res <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> subset <span class=\"re0\">$e</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>subsets <span class=\"br0\">{</span>a b c d<span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">(defun power-set (s)<br/>  (mappend* (op comb s) (range 0 (length s))))</pre>"}, {"lang": "UnixPipes", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>| cat A<br/>a<br/>b<br/>c<br/>\u00a0<br/>| cat A |\\<br/>   xargs -n 1 ksh -c 'echo \\{`cat A`\\}' |\\<br/>   xargs |\\<br/>   sed -e 's;\u00a0;,;g' \\<br/>       -e 's;^;echo\u00a0;g' \\<br/>       -e 's;\\},;}\\\\\u00a0;g' |\\<br/>   ksh |unfold `wc -l A` |\\<br/>   xargs -n1 -I{} ksh -c 'echo {} |\\<br/>        unfold 1 |sort -u |xargs' |sort -u<br/>\u00a0<br/>a<br/>a b<br/>a b c<br/>a c<br/>b<br/>b c<br/>c<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\">p<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"re4\">$#</span> <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">echo</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw3\">shift</span>; p <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"d4f094\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> r\u00a0; <span class=\"kw1\">do</span> <span class=\"kw3\">echo</span> <span class=\"re5\">-e</span> <span class=\"st0\">\"$1 <span class=\"es2\">$r</span><span class=\"es1\">\\n</span><span class=\"es2\">$r</span>\"</span>; <span class=\"kw1\">done</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">powerset = ~&amp;NiC+ ~&amp;i&amp;&amp; ~&amp;at^?\\~&amp;aNC ~&amp;ahPfatPRXlNrCDrT</pre>"}, {"lang": "V", "loc": 2, "block": "<pre class=\"text highlighted_source\">[A C E] powerlist<br/>=[[A C E] [A C] [A E] [A] [C E] [C] [E] []]</pre>"}, {"lang": "VBScript", "loc": 33, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Dec2Bin(n)<br/>\tq = n<br/>\tDec2Bin = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> q = 0<br/>\t\tDec2Bin = CStr(q <span class=\"kw4\">Mod</span> 2) &amp; Dec2Bin<br/>\t\tq = Int(q / 2)<br/>\t<span class=\"kw3\">Loop</span><br/>\tDec2Bin = Right(<span class=\"st0\">\"00000\"</span> &amp; Dec2Bin,6)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> PowerSet(s)<br/>\tarrS = Split(s,<span class=\"st0\">\",\"</span>)<br/>\tPowerSet = <span class=\"st0\">\"{\"</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> 2^(<span class=\"kw4\">UBound</span>(arrS)+1)-1<br/>\t\t<span class=\"kw3\">If</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\tPowerSet = PowerSet &amp; <span class=\"st0\">\"{},\"</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tbinS = Dec2Bin(i)<br/>\t\t\tPowerSet = PowerSet &amp; <span class=\"st0\">\"{\"</span><br/>\t\t\tc = 0<br/>\t\t\t<span class=\"kw3\">For</span> j = Len(binS) <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\t\t<span class=\"kw3\">If</span> CInt(Mid(binS,j,1)) = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tPowerSet = PowerSet &amp; arrS(c) &amp; <span class=\"st0\">\",\"</span>\t<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t\tc = c + 1<br/>\t\t\t<span class=\"kw3\">Next</span><br/>\t\t\tPowerSet = Mid(PowerSet,1,Len(PowerSet)-1) &amp; <span class=\"st0\">\"},\"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tPowerSet = Mid(PowerSet,1,Len(PowerSet)-1) &amp; <span class=\"st0\">\"}\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write PowerSet(<span class=\"st0\">\"1,2,3,4\"</span>)</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn pwerSet(list){<br/>  (0).pump(list.len(),List, Utils.Helpers.pickNFrom.fp1(list),<br/>     T(Void.Write,Void.Write) ) .append(list)<br/>}</pre>"}]}