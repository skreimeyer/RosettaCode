{"task": "Shortest_common_supersequence", "blocks": [{"lang": "C", "loc": 54, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> link link_t<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> link <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> len<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> letter<span class=\"sy0\">;</span><br/>\tlink_t <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Stores a copy of a SCS of x and y in out.  Caller needs to make sure out is long enough.</span><br/><span class=\"kw4\">int</span> scs<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>y<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>out<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> lx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> ly <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlink_t lnk<span class=\"br0\">[</span>ly <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>lx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ly<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tlnk<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>lx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>link_t<span class=\"br0\">)</span> <span class=\"br0\">{</span>ly <span class=\"sy0\">-</span> i<span class=\"sy0\">,</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>lx<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> lx<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tlnk<span class=\"br0\">[</span>ly<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>link_t<span class=\"br0\">)</span> <span class=\"br0\">{</span>lx <span class=\"sy0\">-</span> j<span class=\"sy0\">,</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>ly<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlnk<span class=\"br0\">[</span>ly<span class=\"br0\">]</span><span class=\"br0\">[</span>lx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>link_t<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> ly<span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> lx<span class=\"sy0\">;</span> j<span class=\"sy0\">--;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tlink_t <span class=\"sy0\">*</span>lp <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>letter <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lnk<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span> lnk<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>letter <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tlp<span class=\"sy0\">-&gt;</span>letter <span class=\"sy0\">=</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tlp<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">=</span> lp<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>link_t <span class=\"sy0\">*</span>lp <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>lnk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> lp<span class=\"sy0\">;</span> lp <span class=\"sy0\">=</span> lp<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">*</span>out<span class=\"sy0\">++</span> <span class=\"sy0\">=</span> lp<span class=\"sy0\">-&gt;</span>letter<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abcbdab\"</span><span class=\"sy0\">,</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"bdcaba\"</span><span class=\"sy0\">,</span> res<span class=\"br0\">[</span><span class=\"nu0\">128</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tscs<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SCS(%s,\u00a0%s) -&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">dstring</span> scs<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">dstring</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">dstring</span> y<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> mScs <span class=\"sy0\">=</span> memoize<span class=\"sy0\">!</span>scs<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x.<span class=\"me1\">front</span> <span class=\"sy0\">==</span> y.<span class=\"me1\">front</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> x.<span class=\"me1\">front</span> <span class=\"sy0\">~</span> mScs<span class=\"br0\">(</span>x.<span class=\"me1\">dropOne</span><span class=\"sy0\">,</span> y.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mScs<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> mScs<span class=\"br0\">(</span>x.<span class=\"me1\">dropOne</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> y.<span class=\"me1\">front</span> <span class=\"sy0\">~</span> mScs<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> x.<span class=\"me1\">front</span> <span class=\"sy0\">~</span> mScs<span class=\"br0\">(</span>x.<span class=\"me1\">dropOne</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    scs<span class=\"br0\">(</span><span class=\"st0\">\"abcbdab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bdcaba\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 56, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> lcs<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    xl<span class=\"sy1\">,</span> yl <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>x<span class=\"sy1\">),</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>y<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> xl <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> yl <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy1\">}</span><br/>    x1<span class=\"sy1\">,</span> y1 <span class=\"sy2\">:=</span> x<span class=\"sy1\">[:</span>xl<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> y<span class=\"sy1\">[:</span>yl<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">if</span> x<span class=\"sy1\">[</span>xl<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> y<span class=\"sy1\">[</span>yl<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%s%c\"</span><span class=\"sy1\">,</span> lcs<span class=\"sy1\">(</span>x1<span class=\"sy1\">,</span> y1<span class=\"sy1\">),</span> x<span class=\"sy1\">[</span>xl<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>    x2<span class=\"sy1\">,</span> y2 <span class=\"sy2\">:=</span> lcs<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y1<span class=\"sy1\">),</span> lcs<span class=\"sy1\">(</span>x1<span class=\"sy1\">,</span> y<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>x2<span class=\"sy1\">)</span> &gt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>y2<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> x2<br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> y2<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> scs<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> v <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    ul<span class=\"sy1\">,</span> vl <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>u<span class=\"sy1\">),</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>v<span class=\"sy1\">)</span><br/>    lcs <span class=\"sy2\">:=</span> lcs<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> v<span class=\"sy1\">)</span><br/>    ui<span class=\"sy1\">,</span> vi <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">var</span> sb strings<span class=\"sy3\">.</span>Builder<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>lcs<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> ui &lt; ul &amp;&amp; u<span class=\"sy1\">[</span>ui<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> lcs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            sb<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span>u<span class=\"sy1\">[</span>ui<span class=\"sy1\">])</span><br/>            ui<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> vi &lt; vl &amp;&amp; v<span class=\"sy1\">[</span>vi<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> lcs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            sb<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span>v<span class=\"sy1\">[</span>vi<span class=\"sy1\">])</span><br/>            vi<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        sb<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span>lcs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>        ui<span class=\"sy2\">++</span><br/>        vi<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> ui &lt; ul <span class=\"sy1\">{</span><br/>        sb<span class=\"sy3\">.</span>WriteString<span class=\"sy1\">(</span>u<span class=\"sy1\">[</span>ui<span class=\"sy1\">:])</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> vi &lt; vl <span class=\"sy1\">{</span><br/>        sb<span class=\"sy3\">.</span>WriteString<span class=\"sy1\">(</span>v<span class=\"sy1\">[</span>vi<span class=\"sy1\">:])</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> sb<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    u <span class=\"sy2\">:=</span> <span class=\"st0\">\"abcbdab\"</span><br/>    v <span class=\"sy2\">:=</span> <span class=\"st0\">\"bdcaba\"</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>scs<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> v<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule SCS do<br/>  def scs(u, v) do<br/>    lcs = LCS.lcs(u, v) |&gt; to_charlist<br/>    scs(to_charlist(u), to_charlist(v), lcs, []) |&gt; to_string<br/>  end<br/>\u00a0<br/>  defp scs(u, v, [], res), do: Enum.reverse(res) ++ u ++ v<br/>  defp scs([h|ut], [h|vt], [h|lt], res),      do: scs(ut, vt, lt, [h|res])<br/>  defp scs([h|_]=u, [vh|vt], [h|_]=lcs, res), do: scs(u, vt, lcs, [vh|res])<br/>  defp scs([uh|ut], v, lcs, res),             do: scs(ut, v, lcs, [uh|res])<br/>end<br/>\u00a0<br/>u = \"abcbdab\"<br/>v = \"bdcaba\"<br/>IO.puts \"SCS(#{u}, #{v}) = #{SCS.scs(u, v)}\"</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun lcs<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> String, y<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || y.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x1 <span class=\"sy0\">=</span> x.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y1 <span class=\"sy0\">=</span> y.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> y.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> lcs<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span> + x.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> lcs<span class=\"br0\">(</span>x, y1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> lcs<span class=\"br0\">(</span>x1, y<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x2.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> y2.<span class=\"me1\">length</span><span class=\"br0\">)</span> x2 <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> y2<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun scs<span class=\"br0\">(</span>u<span class=\"sy0\">:</span> String, v<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String<span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lcs <span class=\"sy0\">=</span> lcs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ui <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> vi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until lcs.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>ui <span class=\"sy0\">&lt;</span> u.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> u<span class=\"br0\">[</span>ui<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> lcs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>u<span class=\"br0\">[</span>ui++<span class=\"br0\">]</span><span class=\"br0\">)</span>       <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>vi <span class=\"sy0\">&lt;</span> v.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> v<span class=\"br0\">[</span>vi<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> lcs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>vi++<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>lcs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        ui++<span class=\"sy0\">;</span> vi++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ui <span class=\"sy0\">&lt;</span> u.<span class=\"me1\">length</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>u.<span class=\"me1\">substring</span><span class=\"br0\">(</span>ui<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>vi <span class=\"sy0\">&lt;</span> v.<span class=\"me1\">length</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>v.<span class=\"me1\">substring</span><span class=\"br0\">(</span>vi<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> u <span class=\"sy0\">=</span> <span class=\"st0\">\"abcbdab\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> <span class=\"st0\">\"bdcaba\"</span>  <br/>    println<span class=\"br0\">(</span>scs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> lcs <span class=\"br0\">{</span> <span class=\"co1\"># longest common subsequence</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">''</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$longest</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$first</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$char</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">==</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <span class=\"re0\">$char</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$next</span> <span class=\"sy0\">.=</span> lcs<span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$first</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$i</span><span class=\"sy0\">==</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$longest</span> <span class=\"sy0\">=</span> <span class=\"re0\">$next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$longest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$longest</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> scs <span class=\"br0\">{</span> <span class=\"co1\"># shortest common supersequence</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@lcs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> lcs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pat</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(.*)\"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"(.*)\"</span><span class=\"sy0\">,</span><span class=\"re0\">@lcs</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"(.*)\"</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@u</span> <span class=\"sy0\">=</span> <span class=\"re0\">$u</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/$pat/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@v</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/$pat/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$scs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@u</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$scs</span> <span class=\"sy0\">.=</span> <span class=\"co5\">$_</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@u</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@lcs</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$scs</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$u</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abcbdab\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"bdcaba\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Strings\u00a0%s\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Longest common subsequence:  \u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> lcs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Shortest common supersquence:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> scs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 24, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> lcs<span class=\"br0\">(</span>Str <span class=\"re0\">$xstr</span><span class=\"sy0\">,</span> Str <span class=\"re0\">$ystr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># longest common subsequence</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$xstr</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ystr</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$xs</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$ys</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$xstr</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$xstr</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$ystr</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$ystr</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$y</span><br/>        <span class=\"sy0\">??</span> <span class=\"re0\">$x</span> <span class=\"sy0\">~</span> lcs<span class=\"br0\">(</span><span class=\"re0\">$xs</span><span class=\"sy0\">,</span> <span class=\"re0\">$ys</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">!!</span> <span class=\"kw3\">max</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>by<span class=\"br0\">{</span> <span class=\"re0\">$^a</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> lcs<span class=\"br0\">(</span><span class=\"re0\">$xstr</span><span class=\"sy0\">,</span> <span class=\"re0\">$ys</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lcs<span class=\"br0\">(</span><span class=\"re0\">$xs</span><span class=\"sy0\">,</span> <span class=\"re0\">$ystr</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> scs <span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># shortest common supersequence</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@lcs</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lcs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pat</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'(.*)'</span> <span class=\"sy0\">~</span> <span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'(.*)'</span><span class=\"sy0\">,</span><span class=\"re0\">@lcs</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'(.*)'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$regex</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rx/$pat/\"</span><span class=\"sy0\">.</span><span class=\"me1\">EVAL</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@u</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$u</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$regex</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@v</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$regex</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$scs</span> <span class=\"sy0\">=</span> <span class=\"kw3\">shift</span><span class=\"br0\">(</span><span class=\"re0\">@u</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"kw3\">shift</span><span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$scs</span> <span class=\"sy0\">~=</span> <span class=\"re0\">$_</span> <span class=\"sy0\">~</span> <span class=\"kw3\">shift</span><span class=\"br0\">(</span><span class=\"re0\">@u</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"kw3\">shift</span><span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@lcs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$scs</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$u</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'abcbdab'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bdcaba'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"Strings:\u00a0%s\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"Longest common subsequence:  \u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> lcs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"Shortest common supersquence:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> scs <span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 40, "block": "<pre class=\"text highlighted_source\">function longest_common_subsequence(sequence a, b)<br/>sequence res = \"\"<br/>    if length(a) and length(b) then<br/>        if a[$]=b[$] then<br/>            res = longest_common_subsequence(a[1..-2],b[1..-2])&amp;a[$]<br/>        else<br/>            sequence l = longest_common_subsequence(a,b[1..-2]),<br/>                     r = longest_common_subsequence(a[1..-2],b)<br/>            res = iff(length(l)&gt;length(r)?l:r)<br/>        end if<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>function shortest_common_supersequence(string a, b)<br/>    string lcs = longest_common_subsequence(a, b),<br/>           scs = \"\"<br/>    -- Consume lcs<br/>    while length(lcs) do<br/>        integer c = lcs[1]<br/>        if a[1]==c and b[1]==c then<br/>            -- Part of the lcs, so consume from all strings<br/>            scs &amp;= c<br/>            lcs = lcs[2..$]<br/>            a = a[2..$]<br/>            b = b[2..$]<br/>        elsif a[1]==c then<br/>            scs &amp;= b[1]<br/>            b = b[2..$]<br/>        else<br/>            scs &amp;= a[1]<br/>            a = a[2..$]<br/>        end if<br/>    end while<br/>    -- append remaining characters<br/>    return scs &amp; a &amp; b<br/>end function<br/>\u00a0<br/>?shortest_common_supersequence(\"abcbdab\", \"bdcaba\")<br/>?shortest_common_supersequence(\"WEASELS\", \"WARDANCE\")</pre>"}, {"lang": "Python", "loc": 23, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\"># Use the Longest Common Subsequence algorithm</span><br/>\u00a0<br/><span class=\"kw1\">def</span> shortest_common_supersequence<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    lcs <span class=\"sy0\">=</span> longest_common_subsequence<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    scs <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"co1\"># Consume lcs</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>lcs<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">if</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>        <span class=\"co1\"># Part of the LCS, so consume from all strings</span><br/>            scs +<span class=\"sy0\">=</span> lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            lcs <span class=\"sy0\">=</span> lcs<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>            a <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>            b <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>        <span class=\"kw1\">elif</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>            scs +<span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            b <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span>:<br/>            scs +<span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            a <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>    <span class=\"co1\"># append remaining characters</span><br/>    <span class=\"kw1\">return</span> scs + a + b<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(struct link (len letters))<br/>\u00a0<br/>(define (link-add li n letter)<br/>  (link (+ n (link-len li)) <br/>        (cons letter (link-letters li))))<br/>\u00a0<br/>(define (memoize f)<br/>  (local ([define table (make-hash)])<br/>    (lambda args<br/>      (dict-ref! table args (\u03bb () (apply f args))))))<br/>\u00a0<br/>(define scs/list<br/>  (memoize <br/>   (lambda (x y)<br/>     (cond<br/>       [(null? x)<br/>        (link (length y) y)]<br/>       [(null? y)<br/>        (link (length x) x)]<br/>       [(eq? (car x) (car y))<br/>        (link-add (scs/list (cdr x) (cdr y)) 1 (car x))]<br/>       [(&lt;= (link-len (scs/list x (cdr y)))<br/>            (link-len (scs/list (cdr x) y)))<br/>        (link-add (scs/list x (cdr y)) 1 (car y))]<br/>       [else<br/>        (link-add (scs/list (cdr x) y) 1 (car x))]))))<br/>\u00a0<br/>(define (scs x y)<br/>  (list-&gt;string (link-letters (scs/list (string-&gt;list x) (string-&gt;list y)))))<br/>\u00a0<br/>(scs \"abcbdab\" \"bdcaba\")</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds the  Shortest common supersequence (SCS)  of two character strings.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> u v <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> u==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> u==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> u= <span class=\"st0\">'abcbdab'</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> v==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> v==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> v= <span class=\"st0\">'bdcaba'</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'                     string u='</span>  u          <span class=\"coMULTI\">/*echo the value of string  U  to term.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'                     string v='</span>  v          <span class=\"coMULTI\">/*  \"   \"    \"    \"    \"    V   \"   \"  */</span><br/>$= u                                             <span class=\"coMULTI\">/*define initial value for the output. */</span><br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>    <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*process the whole length of string U.*/</span><br/>        <span class=\"kw1\">do</span> m=n  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*   \"    right\u2500ish  part   \"    \"   V.*/</span><br/>        p= <span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>v, m, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, $<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*position of mTH  V  char in $ string.*/</span><br/>        _= <span class=\"kw6\">substr</span><span class=\"br0\">(</span>v, m+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*obtain a single character of string V*/</span><br/>        <span class=\"kw1\">if</span> p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"sy0\">&amp;</span>  _<span class=\"sy0\">\\</span>==<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, p+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> $= <span class=\"kw6\">insert</span><span class=\"br0\">(</span>_, $, p<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span>                              <span class=\"coMULTI\">/* [\u2191]  insert _ in $ after position P.*/</span><br/>      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*n*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'shortest common supersequence='</span>  $          <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Shortest common supersequence<br/>\u00a0<br/>str1 = \"a b c b d a b\"<br/>str2 = \"bdcaba\"<br/>str3 = str2list(substr(str1, \" \", nl))<br/>for n = 1 to len(str3)<br/>     for m = n to len(str2)-1<br/>          pos = find(str3, str2[m])<br/>          if pos &gt; 0 and str2[m+1]\u00a0!= str3[pos+1]<br/>             insert(str3, pos, str2[m+1])<br/>          ok<br/>     next<br/>next<br/>showarray(str3)<br/>\u00a0<br/>func showarray(vect)<br/>       svect = \"\"<br/>       for n = 1 to len(vect)<br/>             svect = svect + vect[n]<br/>       next<br/>       see svect<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 28, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'lcs'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> scs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span><br/>  lcs = lcs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span><br/>  u, v = u.<span class=\"me1\">dup</span>, v.<span class=\"me1\">dup</span><br/>  scs = <span class=\"st0\">\"\"</span><br/>  <span class=\"co1\"># Iterate over the characters until LCS processed</span><br/>  <span class=\"kw1\">until</span> lcs.<span class=\"me1\">empty</span>?<br/>    <span class=\"kw1\">if</span> u<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>==lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>==lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"co1\"># Part of the LCS, so consume from all strings</span><br/>      scs <span class=\"sy0\">&lt;&lt;</span> lcs.<span class=\"me1\">slice</span>!<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      u.<span class=\"me1\">slice</span>!<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      v.<span class=\"me1\">slice</span>!<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elsif</span> u<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>==lcs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"co1\"># char of u = char of LCS, but char of LCS v doesn't so consume just that</span><br/>      scs <span class=\"sy0\">&lt;&lt;</span> v.<span class=\"me1\">slice</span>!<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"co1\"># char of u\u00a0!= char of LCS, so consume just that</span><br/>      scs <span class=\"sy0\">&lt;&lt;</span> u.<span class=\"me1\">slice</span>!<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"co1\"># append remaining characters, which are not in common</span><br/>  scs <span class=\"sy0\">+</span> u <span class=\"sy0\">+</span> v<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>u = <span class=\"st0\">\"abcbdab\"</span><br/>v = <span class=\"st0\">\"bdcaba\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"SCS(#{u}, #{v}) = #{scs(u, v)}\"</span></pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func scs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var ls = lcs<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span>.<span class=\"me1\">chars</span><br/>    var pat = Regex<span class=\"br0\">(</span><span class=\"st0\">'(.*)'</span><span class=\"sy0\">+</span>ls.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'(.*)'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">'(.*)'</span><span class=\"br0\">)</span><br/>    u.<span class=\"me1\">scan</span>!<span class=\"br0\">(</span>pat<span class=\"br0\">)</span><br/>    v.<span class=\"me1\">scan</span>!<span class=\"br0\">(</span>pat<span class=\"br0\">)</span><br/>    var ss = <span class=\"br0\">(</span>u.<span class=\"me1\">shift</span> <span class=\"sy0\">+</span> v.<span class=\"me1\">shift</span><span class=\"br0\">)</span><br/>    ls.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> ss <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> u.<span class=\"me1\">shift</span> <span class=\"sy0\">+</span> v.<span class=\"me1\">shift</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> ss<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say scs<span class=\"br0\">(</span><span class=\"st0\">\"abcbdab\"</span>, <span class=\"st0\">\"bdcaba\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> scs <span class=\"br0\">{</span>u v<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> lcs <span class=\"br0\">[</span>lcs <span class=\"re0\">$u</span> <span class=\"re0\">$v</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> scs <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\"># Iterate over the characters until LCS processed</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> ui <span class=\"br0\">[</span><span class=\"kw1\">set</span> vi <span class=\"br0\">[</span><span class=\"kw1\">set</span> li <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$li</span><span class=\"sy0\">&lt;</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$lcs</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> uc <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$u</span> <span class=\"re0\">$ui</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> vc <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$v</span> <span class=\"re0\">$vi</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> lc <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$lcs</span> <span class=\"re0\">$li</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$uc</span> eq <span class=\"re0\">$lc</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$vc</span> eq <span class=\"re0\">$lc</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># Part of the LCS, so consume from all strings</span><br/>\t\t<span class=\"kw2\">append</span> scs <span class=\"re0\">$lc</span><br/>\t\t<span class=\"kw2\">incr</span> ui<br/>\t\t<span class=\"kw2\">incr</span> li<br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># char of u = char of LCS, but char of LCS v doesn't so consume just that</span><br/>\t\t<span class=\"kw2\">append</span> scs <span class=\"re0\">$vc</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">incr</span> vi<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># char of u\u00a0!= char of LCS, so consume just that</span><br/>\t    <span class=\"kw2\">append</span> scs <span class=\"re0\">$uc</span><br/>\t    <span class=\"kw2\">incr</span> ui<br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># append remaining characters, which are not in common</span><br/>    <span class=\"kw2\">append</span> scs <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$u</span> <span class=\"re0\">$ui</span> end<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$v</span> <span class=\"re0\">$vi</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$scs</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 28, "block": "<pre class=\"text highlighted_source\">class Link{ var len,letter,next;<br/>   fcn init(l=0,c=\"\",lnk=Void){ len,letter,next=l,c,lnk; }<br/>}<br/>fcn scs(x,y,out){<br/>   lx,ly:=x.len(),y.len();<br/>   lnk:=(ly+1).pump(List,'wrap(_){ (lx+1).pump(List(),Link.create) });<br/>\u00a0<br/>   foreach i in (ly){ lnk[i][lx]=Link(ly-i, y[i]) }<br/>   foreach j in (lx){ lnk[ly][j]=Link(lx-j, x[j]) }<br/>\u00a0<br/>   foreach i,j in ([ly-1..0,-1],[lx-1..0,-1]){<br/>      lp:=lnk[i][j];<br/>      if (y[i]==x[j]){<br/>\t lp.next  =lnk[i+1][j+1];<br/>\t lp.letter=x[j];<br/>      }else if(lnk[i][j+1].len &lt; lnk[i+1][j].len){<br/>\t lp.next  =lnk[i][j+1];<br/>\t lp.letter=x[j];<br/>      }else{<br/>\t lp.next  =lnk[i+1][j];<br/>\t lp.letter=y[i];<br/>      }<br/>      lp.len=lp.next.len + 1;<br/>   }<br/>\u00a0<br/>   lp:=lnk[0][0]; while(lp){ out.write(lp.letter); lp=lp.next; }<br/>   out.close()<br/>}</pre>"}]}