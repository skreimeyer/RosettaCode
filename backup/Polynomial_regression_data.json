{"task": "Polynomial_regression", "blocks": [{"lang": "Ada", "loc": 12, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;<br/>\u00a0<br/><span class=\"kw3\">function</span> Fit <span class=\"br0\">(</span>X, Y\u00a0: Real_Vector; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real_Vector <span class=\"kw1\">is</span><br/>   A\u00a0: Real_Matrix <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">N</span>, X'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;  <span class=\"co1\">-- The plane</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         A <span class=\"br0\">(</span>J, I<span class=\"br0\">)</span>\u00a0:= X <span class=\"br0\">(</span>I<span class=\"br0\">)</span>**J;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">return</span> Solve <span class=\"br0\">(</span>A * Transpose <span class=\"br0\">(</span>A<span class=\"br0\">)</span>, A * Y<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Fit;</pre>"}, {"lang": "ALGOL 68", "loc": 114, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> FIELD <span class=\"sy1\">=</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span><br/>  VEC <span class=\"sy1\">=</span> <span class=\"br0\">[</span>0<span class=\"br0\">]</span>FIELD<span class=\"sy1\">,</span><br/>  MAT <span class=\"sy1\">=</span> <span class=\"br0\">[</span>0<span class=\"sy1\">,</span>0<span class=\"br0\">]</span>FIELD<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> raise index error <span class=\"sy1\">:=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"stop\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  stop<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">COMMENT from http://rosettacode.org/wiki/Matrix_Transpose#ALGOL_68 END COMMENT</span><br/><span class=\"kw4\">OP</span> ZIP <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span>FIELD in<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span>FIELD<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>2 <span class=\"kw8\">LWB</span> in<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> in<span class=\"sy1\">,</span>1 <span class=\"kw8\">LWB</span> in<span class=\"sy1\">:</span>1UPB in<span class=\"br0\">]</span>FIELD out<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> in <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> in <span class=\"kw2\">DO</span><br/>     out<span class=\"br0\">[</span><span class=\"sy1\">,</span>i<span class=\"br0\">]</span><span class=\"sy1\">:=</span>in<span class=\"br0\">[</span>i<span class=\"sy1\">,</span><span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">COMMENT from http://rosettacode.org/wiki/Matrix_multiplication#ALGOL_68 END COMMENT</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIELD<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># basically the dot product #</span><br/>    FIELD result<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> result<span class=\"sy1\">+:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC a<span class=\"sy1\">,</span> MAT b<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload vector times matrix #</span><br/>    <span class=\"br0\">[</span>2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>FIELD result<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> b <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> b <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"sy1\">*</span>b<span class=\"br0\">[</span><span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MAT a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>MAT<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload matrix times matrix #</span><br/>     <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>FIELD result<span class=\"sy1\">;</span><br/>     <span class=\"kw2\">IF</span> 2 <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> 2 <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>     <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> result <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">*</span>b <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>     result<br/>   <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">COMMENT from http://rosettacode.org/wiki/Pyramid_of_numbers#ALGOL_68 END COMMENT</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">/</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC a<span class=\"sy1\">,</span> MAT b<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># vector division #</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span>1<span class=\"br0\">]</span>FIELD transpose a<span class=\"sy1\">;</span><br/>  transpose a<span class=\"br0\">[</span><span class=\"sy1\">,</span>1<span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"sy1\">;</span><br/>  <span class=\"br0\">(</span>transpose a<span class=\"sy1\">/</span>b<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span>1<span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">/</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MAT a<span class=\"sy1\">,</span> MAT b<span class=\"br0\">)</span>MAT<span class=\"sy1\">:</span><span class=\"br0\">(</span> <span class=\"coMULTI\"># matrix division #</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span><span class=\"kw3\">INT</span> p <span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> sign<span class=\"sy1\">;</span><br/>  <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span>FIELD lu <span class=\"sy1\">=</span> lu decomp<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> sign<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> a<span class=\"br0\">]</span>FIELD out<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>    out<span class=\"br0\">[</span><span class=\"sy1\">,</span>col<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> lu solve<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> lu<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> a<span class=\"br0\">[</span><span class=\"sy1\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"sy1\">@</span><span class=\"kw8\">LWB</span> out<span class=\"br0\">[</span><span class=\"sy1\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw6\">FORMAT</span> int repr <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span><br/>       <span class=\"kw26\">real</span> repr <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>7<span class=\"sy1\">,</span>4<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> fit <span class=\"sy1\">=</span>  <span class=\"br0\">(</span>VEC x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> order<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"br0\">[</span>0<span class=\"sy1\">:</span>order<span class=\"sy1\">,</span> <span class=\"kw8\">LWB</span> x<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> x<span class=\"br0\">]</span>FIELD a<span class=\"sy1\">;</span>  <span class=\"coMULTI\"># the plane #</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a  <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>         a <span class=\"br0\">[</span>j<span class=\"sy1\">,</span> i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> x <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">**</span>j<br/>      <span class=\"kw2\">OD</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"br0\">(</span> y <span class=\"sy1\">*</span> ZIP a <span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span> a <span class=\"sy1\">*</span> ZIP a <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># fit #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> polynomial <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC x<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>   <span class=\"kw3\">BOOL</span> empty <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> x <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> x <span class=\"kw2\">DO</span><br/>     <span class=\"kw2\">IF</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw15\">NE</span> 0 <span class=\"kw2\">THEN</span><br/>       <span class=\"kw2\">IF</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> 0 <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> empty <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>       empty <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>       <span class=\"kw2\">IF</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw15\">NE</span> 1 <span class=\"kw16\">OR</span> i<span class=\"sy1\">=</span>0 <span class=\"kw2\">THEN</span><br/>         <span class=\"kw2\">IF</span> <span class=\"kw8\">ENTIER</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>           <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>int repr<span class=\"sy1\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw2\">ELSE</span><br/>           <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw26\">real</span> repr<span class=\"sy1\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw2\">FI</span><br/>       <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>       <span class=\"kw2\">CASE</span> i<span class=\"sy1\">+</span>1 <span class=\"kw2\">IN</span><br/>         <span class=\"kw7\">SKIP</span><span class=\"sy1\">,</span><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw2\">OUT</span><br/>         <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"x**\"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw2\">ESAC</span><br/>     <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">IF</span> empty <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>fitting<span class=\"sy1\">:</span> <span class=\"kw2\">BEGIN</span><br/>   VEC c <span class=\"sy1\">=</span><br/>          fit<br/>          <span class=\"br0\">(</span>  <span class=\"br0\">(</span><span class=\"re1\">0.0</span><span class=\"sy1\">,</span> <span class=\"re1\">1.0</span><span class=\"sy1\">,</span>  <span class=\"re1\">2.0</span><span class=\"sy1\">,</span>  <span class=\"re1\">3.0</span><span class=\"sy1\">,</span>  <span class=\"re1\">4.0</span><span class=\"sy1\">,</span>  <span class=\"re1\">5.0</span><span class=\"sy1\">,</span>   <span class=\"re1\">6.0</span><span class=\"sy1\">,</span>   <span class=\"re1\">7.0</span><span class=\"sy1\">,</span>   <span class=\"re1\">8.0</span><span class=\"sy1\">,</span>   <span class=\"re1\">9.0</span><span class=\"sy1\">,</span>  <span class=\"re1\">10.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">(</span><span class=\"re1\">1.0</span><span class=\"sy1\">,</span> <span class=\"re1\">6.0</span><span class=\"sy1\">,</span> <span class=\"re1\">17.0</span><span class=\"sy1\">,</span> <span class=\"re1\">34.0</span><span class=\"sy1\">,</span> <span class=\"re1\">57.0</span><span class=\"sy1\">,</span> <span class=\"re1\">86.0</span><span class=\"sy1\">,</span> <span class=\"re1\">121.0</span><span class=\"sy1\">,</span> <span class=\"re1\">162.0</span><span class=\"sy1\">,</span> <span class=\"re1\">209.0</span><span class=\"sy1\">,</span> <span class=\"re1\">262.0</span><span class=\"sy1\">,</span> <span class=\"re1\">321.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             2<br/>          <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> polynomial<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   VEC d <span class=\"sy1\">=</span><br/>          fit<br/>          <span class=\"br0\">(</span> <span class=\"br0\">(</span>0<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 6<span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span> 8<span class=\"sy1\">,</span> 9<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">(</span><span class=\"re1\">2.7</span><span class=\"sy1\">,</span> <span class=\"re1\">2.8</span><span class=\"sy1\">,</span> <span class=\"re1\">31.4</span><span class=\"sy1\">,</span> <span class=\"re1\">38.1</span><span class=\"sy1\">,</span> <span class=\"re1\">58.0</span><span class=\"sy1\">,</span> <span class=\"re1\">76.2</span><span class=\"sy1\">,</span> <span class=\"re1\">100.5</span><span class=\"sy1\">,</span> <span class=\"re1\">130.0</span><span class=\"sy1\">,</span> <span class=\"re1\">149.3</span><span class=\"sy1\">,</span> <span class=\"re1\">180.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            2<br/>          <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> polynomial<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># fitting #</span></pre>"}, {"lang": "BBC BASIC", "loc": 49, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"ARRAYLIB\"<br/>\u00a0<br/>      Max% = 10000<br/>      DIM vector(5), matrix(5,5)<br/>      DIM x(Max%), x2(Max%), x3(Max%), x4(Max%), x5(Max%)<br/>      DIM x6(Max%), x7(Max%), x8(Max%), x9(Max%), x10(Max%)<br/>      DIM y(Max%), xy(Max%), x2y(Max%), x3y(Max%), x4y(Max%), x5y(Max%)<br/>\u00a0<br/>      npts% = 11<br/>      x() = 0,  1,  2,  3,  4,  5,  6,   7,   8,   9,   10<br/>      y() = 1,  6,  17, 34, 57, 86, 121, 162, 209, 262, 321<br/>\u00a0<br/>      sum_x = SUM(x())<br/>      x2()  = x() * x()  \u00a0: sum_x2  = SUM(x2())<br/>      x3()  = x() * x2() \u00a0: sum_x3  = SUM(x3())<br/>      x4()  = x2() * x2()\u00a0: sum_x4  = SUM(x4())<br/>      x5()  = x2() * x3()\u00a0: sum_x5  = SUM(x5())<br/>      x6()  = x3() * x3()\u00a0: sum_x6  = SUM(x6())<br/>      x7()  = x3() * x4()\u00a0: sum_x7  = SUM(x7())<br/>      x8()  = x4() * x4()\u00a0: sum_x8  = SUM(x8())<br/>      x9()  = x4() * x5()\u00a0: sum_x9  = SUM(x9())<br/>      x10() = x5() * x5()\u00a0: sum_x10 = SUM(x10())<br/>\u00a0<br/>      sum_y = SUM(y())<br/>      xy()  = x() * y()  \u00a0: sum_xy  = SUM(xy())<br/>      x2y() = x2() * y() \u00a0: sum_x2y = SUM(x2y())<br/>      x3y() = x3() * y() \u00a0: sum_x3y = SUM(x3y())<br/>      x4y() = x4() * y() \u00a0: sum_x4y = SUM(x4y())<br/>      x5y() = x5() * y() \u00a0: sum_x5y = SUM(x5y())<br/>\u00a0<br/>      matrix() = \\<br/>      \\ npts%,  sum_x,   sum_x2,  sum_x3,  sum_x4,  sum_x5, \\<br/>      \\ sum_x,  sum_x2,  sum_x3,  sum_x4,  sum_x5,  sum_x6, \\<br/>      \\ sum_x2, sum_x3,  sum_x4,  sum_x5,  sum_x6,  sum_x7, \\<br/>      \\ sum_x3, sum_x4,  sum_x5,  sum_x6,  sum_x7,  sum_x8, \\<br/>      \\ sum_x4, sum_x5,  sum_x6,  sum_x7,  sum_x8,  sum_x9, \\<br/>      \\ sum_x5, sum_x6,  sum_x7,  sum_x8,  sum_x9,  sum_x10<br/>\u00a0<br/>      vector() = \\<br/>      \\ sum_y,  sum_xy,  sum_x2y, sum_x3y, sum_x4y, sum_x5y<br/>\u00a0<br/>      PROC_invert(matrix())<br/>      vector() = matrix().vector()<br/>\u00a0<br/>      @% = &amp;2040A<br/>      PRINT \"Polynomial coefficients = \"<br/>      FOR term% = 5 TO 0 STEP -1<br/>        PRINT\u00a0;vector(term%) \" * x^\" STR$(term%)<br/>      NEXT</pre>"}, {"lang": "C", "loc": 8, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifndef _POLIFITGSL_H</span><br/><span class=\"co2\">#define _POLIFITGSL_H</span><br/><span class=\"co2\">#include &lt;gsl/gsl_multifit.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>bool polynomialfit<span class=\"br0\">(</span><span class=\"kw4\">int</span> obs<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> degree<span class=\"sy0\">,</span> <br/>\t\t   <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>dx<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>dy<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>store<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* n, p */</span><br/><span class=\"co2\">#endif</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; Least square fit of a polynomial of order n the x-y-curve.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> polyfit <span class=\"br0\">(</span>x y n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"br0\">(</span>array-dimensions x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>A <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>m <span class=\"sy0\">,</span><span class=\"br0\">(</span>+ n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- m <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to n <span class=\"kw1\">do</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> A i j<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> x <span class=\"nu0\">0</span> i<span class=\"br0\">)</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lsqr A <span class=\"br0\">(</span>mtp y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"c highlighted_source\">        public <span class=\"kw4\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Polyfit<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> degree<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Vandermonde matrix</span><br/>            var v <span class=\"sy0\">=</span> new DenseMatrix<span class=\"br0\">(</span>x.<span class=\"me1\">Length</span><span class=\"sy0\">,</span> degree <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> v.<span class=\"me1\">RowCount</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> degree<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> v<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">Pow</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            var yv <span class=\"sy0\">=</span> new DenseVector<span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">ToColumnMatrix</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            QR qr <span class=\"sy0\">=</span> v.<span class=\"me1\">QR</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// Math.Net doesn't have an \"economy\" QR, so:</span><br/>            <span class=\"co1\">// cut R short to square upper triangle, then recompute Q</span><br/>            var r <span class=\"sy0\">=</span> qr.<span class=\"me1\">R</span>.<span class=\"me1\">SubMatrix</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> degree <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> degree <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            var q <span class=\"sy0\">=</span> v.<span class=\"me1\">Multiply</span><span class=\"br0\">(</span>r.<span class=\"me1\">Inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            var p <span class=\"sy0\">=</span> r.<span class=\"me1\">Inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Multiply</span><span class=\"br0\">(</span>q.<span class=\"me1\">TransposeThisAndMultiply</span><span class=\"br0\">(</span>yv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> p.<span class=\"me1\">Column</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 47, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> average<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">(</span>R r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> r.<span class=\"me1\">fold</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"a+b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a+1\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> polyRegression<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> n <span class=\"sy0\">=</span> x.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> xm <span class=\"sy0\">=</span> x.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> ym <span class=\"sy0\">=</span> y.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x2m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"st0\">\"a*a\"</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x3m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"st0\">\"a*a*a\"</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x4m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"st0\">\"a*a*a*a\"</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> xym <span class=\"sy0\">=</span> x.<span class=\"me1\">zip</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"st0\">\"a[0]*a[1]\"</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x2ym <span class=\"sy0\">=</span> x.<span class=\"me1\">zip</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"st0\">\"a[0]*a[0]*a[1]\"</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> sxx <span class=\"sy0\">=</span> x2m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> xm<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> sxy <span class=\"sy0\">=</span> xym <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> ym<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> sxx2 <span class=\"sy0\">=</span> x3m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> sx2x2 <span class=\"sy0\">=</span> x4m <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> sx2y <span class=\"sy0\">=</span> x2ym <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> ym<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sxy <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sx2y <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sx2y <span class=\"sy0\">*</span> sxx <span class=\"sy0\">-</span> sxy <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> ym <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span> xm <span class=\"sy0\">-</span> c <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">real</span> abc<span class=\"br0\">(</span><span class=\"kw4\">int</span> xx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> xx <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> xx <span class=\"sy0\">*</span> xx<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"y = \"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\"x + \"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> <span class=\"st0\">\"x^2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\" Input  Approximation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\" x   y     y1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%3d \u00a0%5.1f\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> abc<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> x <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> y <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"sy0\">,</span> <span class=\"nu0\">162</span><span class=\"sy0\">,</span> <span class=\"nu0\">209</span><span class=\"sy0\">,</span> <span class=\"nu0\">262</span><span class=\"sy0\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    polyRegression<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Emacs Lisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(setq x '[0 1 2 3 4 5 6 7 8 9 10])<br/>(setq y '[1 6 17 34 57 86 121 162 209 262 321])<br/>(calc-eval<br/> (format \"fit(a*x^2+b*x+c,[x],[a,b,c],[%s\u00a0%s])\" x y))<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 64, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> fitting<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> polyfit<span class=\"br0\">(</span>vx, vy, d<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>                   <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>                    <span class=\"sy0\">::</span> <span class=\"me2\">dp</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_real_kind</span><span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"nu0\">307</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>              <span class=\"sy0\">::</span> <span class=\"me2\">polyfit</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>    <span class=\"sy0\">::</span> <span class=\"me2\">vx</span>, vy<br/>\u00a0<br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">X</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">XT</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">XTX</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    <span class=\"kw3\">integer</span>     <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, lda, lwork<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">info</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">ipiv</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">work</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    lda <span class=\"sy0\">=</span> n<br/>    lwork <span class=\"sy0\">=</span> n<br/>\u00a0<br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>ipiv<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>work<span class=\"br0\">(</span>lwork<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>XT<span class=\"br0\">(</span>n, <span class=\"kw4\">size</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>X<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span>, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>XTX<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! prepare the matrix</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, d<br/>       <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span><br/>          X<span class=\"br0\">(</span>j, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> vx<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">**</span>i<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    XT  <span class=\"sy0\">=</span> <span class=\"kw4\">transpose</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>    XTX <span class=\"sy0\">=</span> <span class=\"kw4\">matmul</span><span class=\"br0\">(</span>XT, X<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! calls to LAPACK subs DGETRF and DGETRI</span><br/>    <span class=\"kw1\">call</span> DGETRF<span class=\"br0\">(</span>n, n, XTX, lda, ipiv, info<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> info <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       print <span class=\"sy0\">*</span>, <span class=\"st0\">\"problem\"</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">call</span> DGETRI<span class=\"br0\">(</span>n, XTX, lda, ipiv, work, lwork, info<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> info <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       print <span class=\"sy0\">*</span>, <span class=\"st0\">\"problem\"</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    polyfit <span class=\"sy0\">=</span> <span class=\"kw4\">matmul</span><span class=\"br0\">(</span> <span class=\"kw4\">matmul</span><span class=\"br0\">(</span>XTX, XT<span class=\"br0\">)</span>, vy<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>ipiv<span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>XT<span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>XTX<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span></pre>"}, {"lang": "FreeBASIC", "loc": 78, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">Sub</span> GaussJordan<span class=\"br0\">(</span>matrix<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>,rhs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>,ans<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n=<span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>matrix,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Redim</span> ans<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<span class=\"kw1\">Redim</span> ans<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n,<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span>,r<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> c <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n <span class=\"co1\">'take copies</span><br/>        r<span class=\"br0\">(</span>c<span class=\"br0\">)</span>=rhs<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            b<span class=\"br0\">(</span>c,d<span class=\"br0\">)</span>=matrix<span class=\"br0\">(</span>c,d<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span> d<br/>    <span class=\"kw1\">Next</span> c<br/>    <span class=\"co2\">#macro pivot(num)</span><br/>    <span class=\"kw1\">For</span> p1 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  = num <span class=\"kw1\">To</span> n - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">For</span> p2 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  = p1 + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n  <br/>            <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>b<span class=\"br0\">(</span>p1,num<span class=\"br0\">)</span><span class=\"br0\">)</span>&lt;Abs<span class=\"br0\">(</span>b<span class=\"br0\">(</span>p2,num<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Swap</span> r<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>,r<span class=\"br0\">(</span>p2<span class=\"br0\">)</span><br/>                <span class=\"kw1\">For</span> g <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                    <span class=\"kw1\">Swap</span> b<span class=\"br0\">(</span>p1,g<span class=\"br0\">)</span>,b<span class=\"br0\">(</span>p2,g<span class=\"br0\">)</span><br/>                <span class=\"kw1\">Next</span> g<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span> p2<br/>    <span class=\"kw1\">Next</span> p1<br/>    <span class=\"co2\">#endmacro</span><br/>    <span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n-<span class=\"nu0\">1</span><br/>        pivot<span class=\"br0\">(</span>k<span class=\"br0\">)</span>              <span class=\"co1\">'full pivoting </span><br/>        <span class=\"kw1\">For</span> row <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> =k <span class=\"kw1\">To</span> n-<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> b<span class=\"br0\">(</span>row+<span class=\"nu0\">1</span>,k<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>            Var f=b<span class=\"br0\">(</span>k,k<span class=\"br0\">)</span>/b<span class=\"br0\">(</span>row+<span class=\"nu0\">1</span>,k<span class=\"br0\">)</span><br/>            r<span class=\"br0\">(</span>row+<span class=\"nu0\">1</span><span class=\"br0\">)</span>=r<span class=\"br0\">(</span>row+<span class=\"nu0\">1</span><span class=\"br0\">)</span>*f-r<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>            <span class=\"kw1\">For</span> g <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                b<span class=\"br0\">(</span><span class=\"br0\">(</span>row+<span class=\"nu0\">1</span><span class=\"br0\">)</span>,g<span class=\"br0\">)</span>=b<span class=\"br0\">(</span><span class=\"br0\">(</span>row+<span class=\"nu0\">1</span><span class=\"br0\">)</span>,g<span class=\"br0\">)</span>*f-b<span class=\"br0\">(</span>k,g<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span> g<br/>        <span class=\"kw1\">Next</span> row<br/>    <span class=\"kw1\">Next</span> k<br/>    <span class=\"co1\">'back substitute </span><br/>    <span class=\"kw1\">For</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=n <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>        ans<span class=\"br0\">(</span>z<span class=\"br0\">)</span>=r<span class=\"br0\">(</span>z<span class=\"br0\">)</span>/b<span class=\"br0\">(</span>z,z<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = n <span class=\"kw1\">To</span> z+<span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>            ans<span class=\"br0\">(</span>z<span class=\"br0\">)</span>=ans<span class=\"br0\">(</span>z<span class=\"br0\">)</span>-<span class=\"br0\">(</span>b<span class=\"br0\">(</span>z,j<span class=\"br0\">)</span>*ans<span class=\"br0\">(</span>j<span class=\"br0\">)</span>/b<span class=\"br0\">(</span>z,z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span> j<br/>        <span class=\"kw1\">Next</span>    z<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>    <span class=\"co1\">'Interpolate through points.</span><br/>    <span class=\"kw1\">Sub</span> Interpolate<span class=\"br0\">(</span>x_values<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>,y_values<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>,p<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>        Var n=<span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>x_values<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Redim</span> p<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<span class=\"kw1\">Redim</span> p<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> matrix<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n,<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span>,rhs<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> a <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            rhs<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=y_values<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw1\">For</span> b <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                matrix<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=x_values<span class=\"br0\">(</span>a<span class=\"br0\">)</span>^<span class=\"br0\">(</span>b-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span> b<br/>        <span class=\"kw1\">Next</span> a<br/>        <span class=\"co1\">'Solve the linear equations</span><br/>        GaussJordan<span class=\"br0\">(</span>matrix<span class=\"br0\">(</span><span class=\"br0\">)</span>,rhs<span class=\"br0\">(</span><span class=\"br0\">)</span>,p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/> <span class=\"co1\">'======================== SET UP THE POINTS ===============  </span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">10</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> y<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">17</span>,<span class=\"nu0\">34</span>,<span class=\"nu0\">57</span>,<span class=\"nu0\">86</span>,<span class=\"nu0\">121</span>,<span class=\"nu0\">162</span>,<span class=\"nu0\">209</span>,<span class=\"nu0\">262</span>,<span class=\"nu0\">321</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">Redim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> Poly<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'Get the polynomial Poly()</span><br/>    Interpolate<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"br0\">)</span>,y<span class=\"br0\">(</span><span class=\"br0\">)</span>,Poly<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">'print coefficients to console</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Polynomial Coefficients:\"</span><br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">For</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>Poly<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> z=<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"constant term  \"</span>;<span class=\"kw1\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>;Poly<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span><br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>; <span class=\"st0\">\"x^\"</span>;z-<span class=\"nu0\">1</span>;<span class=\"st0\">\" =  \"</span>;<span class=\"kw1\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>;Poly<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> z<br/>\u00a0<br/>    <span class=\"kw1\">sleep</span></pre>"}, {"lang": "GAP", "loc": 12, "block": "<pre class=\"text highlighted_source\">PolynomialRegression\u00a0:= function(x, y, n)<br/>\tlocal a;<br/>\ta\u00a0:= List([0 .. n], i -&gt; List(x, s -&gt; s^i));<br/>\treturn TransposedMat((a * TransposedMat(a))^-1 * a * TransposedMat([y]))[1];<br/>end;<br/>\u00a0<br/>x\u00a0:= [0,  1,  2,  3,  4,  5,  6,   7,   8,   9,   10];<br/>y\u00a0:= [1,  6,  17, 34, 57, 86, 121, 162, 209, 262, 321];<br/>\u00a0<br/># Return coefficients in ascending degree order<br/>PolynomialRegression(x, y, 2);<br/># [ 1, 2, 3 ]</pre>"}, {"lang": "gnuplot", "loc": 24, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"co1\"># The polynomial approximation</span><br/>f<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">*</span><span class=\"kw5\">x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span><span class=\"kw5\">x</span> <span class=\"sy0\">+</span> c<br/>\u00a0<br/><span class=\"co1\"># Initial values for parameters</span><br/><span class=\"re0\">a =</span> <span class=\"nu0\">0.1</span><br/><span class=\"re0\">b =</span> <span class=\"nu0\">0.1</span><br/><span class=\"re0\">c =</span> <span class=\"nu0\">0.1</span><br/>\u00a0<br/><span class=\"co1\"># Fit f to the following data by modifying the variables a, b, c</span><br/><span class=\"kw1\">fit</span> f<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"br0\">)</span> <span class=\"st0\">'-'</span> <span class=\"kw5\">via</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><br/>   <span class=\"nu0\">1</span>   <span class=\"nu0\">6</span><br/>   <span class=\"nu0\">2</span>  <span class=\"nu0\">17</span><br/>   <span class=\"nu0\">3</span>  <span class=\"nu0\">34</span><br/>   <span class=\"nu0\">4</span>  <span class=\"nu0\">57</span><br/>   <span class=\"nu0\">5</span>  <span class=\"nu0\">86</span><br/>   <span class=\"nu0\">6</span> <span class=\"nu0\">121</span><br/>   <span class=\"nu0\">7</span> <span class=\"nu0\">162</span><br/>   <span class=\"nu0\">8</span> <span class=\"nu0\">209</span><br/>   <span class=\"nu0\">9</span> <span class=\"nu0\">262</span><br/>  <span class=\"nu0\">10</span> <span class=\"nu0\">321</span><br/>e<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span> --- <span class=\"es0\">\\n</span> Polynomial fit:\u00a0%.4f x^2 +\u00a0%.4f x +\u00a0%.4f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 40, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"github.com/gonum/matrix/mat64\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    x <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">}</span><br/>    y <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">57</span><span class=\"sy1\">,</span> <span class=\"nu0\">86</span><span class=\"sy1\">,</span> <span class=\"nu0\">121</span><span class=\"sy1\">,</span> <span class=\"nu0\">162</span><span class=\"sy1\">,</span> <span class=\"nu0\">209</span><span class=\"sy1\">,</span> <span class=\"nu0\">262</span><span class=\"sy1\">,</span> <span class=\"nu0\">321</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    degree <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a <span class=\"sy2\">:=</span> Vandermonde<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> degree<span class=\"sy1\">)</span><br/>    b <span class=\"sy2\">:=</span> mat64<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>y<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> y<span class=\"sy1\">)</span><br/>    c <span class=\"sy2\">:=</span> mat64<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span>degree<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    qr <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>mat64<span class=\"sy3\">.</span>QR<span class=\"sy1\">)</span><br/>    qr<span class=\"sy3\">.</span>Factorize<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>\u00a0<br/>    err <span class=\"sy2\">:=</span> c<span class=\"sy3\">.</span>SolveQR<span class=\"sy1\">(</span>qr<span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%.3f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> mat64<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>c<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Vandermonde<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> degree <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>mat64<span class=\"sy3\">.</span>Dense <span class=\"sy1\">{</span><br/>    x <span class=\"sy2\">:=</span> mat64<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">),</span> degree<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> degree<span class=\"sy1\">;</span> j<span class=\"sy1\">,</span> p <span class=\"sy2\">=</span> j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> p<span class=\"sy3\">*</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            x<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/><span class=\"kw1\">import</span> Matrix<span class=\"sy0\">.</span>LU<br/>\u00a0<br/>ppoly p x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"br0\">)</span> p<br/>\u00a0<br/>polyfit d ry <span class=\"sy0\">=</span> elems <span class=\"sy0\">$</span> solve mat vec  <span class=\"kw1\">where</span><br/>   mat <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>d<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> liftM2 <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> ppoly <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a> d<span class=\"br0\">]</span><br/>   vec <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> d ry</pre>"}, {"lang": "HicEst", "loc": 15, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> n<span class=\"sy1\">=</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> x<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> y<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> m<span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> p<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>\u00a0<br/>   x <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">1</span><span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">,</span>  <span class=\"nu0\">3</span><span class=\"sy1\">,</span>  <span class=\"nu0\">4</span><span class=\"sy1\">,</span>  <span class=\"nu0\">5</span><span class=\"sy1\">,</span>  <span class=\"nu0\">6</span><span class=\"sy1\">,</span>   <span class=\"nu0\">7</span><span class=\"sy1\">,</span>   <span class=\"nu0\">8</span><span class=\"sy1\">,</span>   <span class=\"nu0\">9</span><span class=\"sy1\">,</span>   <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   y <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>  <span class=\"nu0\">6</span><span class=\"sy1\">,</span>  <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">57</span><span class=\"sy1\">,</span> <span class=\"nu0\">86</span><span class=\"sy1\">,</span> <span class=\"nu0\">121</span><span class=\"sy1\">,</span> <span class=\"nu0\">162</span><span class=\"sy1\">,</span> <span class=\"nu0\">209</span><span class=\"sy1\">,</span> <span class=\"nu0\">262</span><span class=\"sy1\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">)</span><br/>\u00a0<br/>   p <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"co1\">! initial guess for the polynom's coefficients</span><br/>\u00a0<br/>   <span class=\"kw1\">SOLVE</span><span class=\"br0\">(</span>NUL<span class=\"sy1\">=</span>Theory<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-</span>y<span class=\"br0\">(</span>nr<span class=\"br0\">)</span><span class=\"sy1\">,</span> Unknown<span class=\"sy1\">=</span>p<span class=\"sy1\">,</span> DataIdx<span class=\"sy1\">=</span>nr<span class=\"sy1\">,</span> Iters<span class=\"sy1\">=</span>iterations<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> p<span class=\"sy1\">,</span> iterations<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Theory<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">! called by the solver of the SOLVE function. All variables are global</span><br/>   Theory <span class=\"sy1\">=</span> p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>x<span class=\"br0\">(</span>nr<span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> p<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>x<span class=\"br0\">(</span>nr<span class=\"br0\">)</span> <span class=\"sy1\">+</span> p<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">END</span></pre>"}, {"lang": "Hy", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>import <span class=\"br0\">[</span>numpy <span class=\"br0\">[</span>polyfit<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>setv x <span class=\"br0\">(</span>range <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>setv y <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">6</span> <span class=\"nu0\">17</span> <span class=\"nu0\">34</span> <span class=\"nu0\">57</span> <span class=\"nu0\">86</span> <span class=\"nu0\">121</span> <span class=\"nu0\">162</span> <span class=\"nu0\">209</span> <span class=\"nu0\">262</span> <span class=\"nu0\">321</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>polyfit x y <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   Y=:<span class=\"nu0\">1</span> <span class=\"nu0\">6</span> <span class=\"nu0\">17</span> <span class=\"nu0\">34</span> <span class=\"nu0\">57</span> <span class=\"nu0\">86</span> <span class=\"nu0\">121</span> <span class=\"nu0\">162</span> <span class=\"nu0\">209</span> <span class=\"nu0\">262</span> <span class=\"nu0\">321</span><br/>   <span class=\"sy0\">(</span>%. ^/<a class=\"__cf_email__\" data-cfemail=\"e09ea098\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:@<a class=\"__cf_email__\" data-cfemail=\"96ffb8d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> Y<br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 50, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.IntToDoubleFunction</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PolynomialRegression <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> polyRegression<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> x.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> r <span class=\"sy0\">=</span> IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> xm <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> ym <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> x2m <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> a<span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> x3m <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">*</span> a<span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> x4m <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">*</span> a<span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> xym <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> x.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> y.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            xym <span class=\"sy0\">+=</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        xym <span class=\"sy0\">/=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>x.<span class=\"me1\">length</span>, y.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> x2ym <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> x.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> y.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            x2ym <span class=\"sy0\">+=</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        x2ym <span class=\"sy0\">/=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>x.<span class=\"me1\">length</span>, y.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> sxx <span class=\"sy0\">=</span> x2m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> xm<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sxy <span class=\"sy0\">=</span> xym <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> ym<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sxx2 <span class=\"sy0\">=</span> x3m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sx2x2 <span class=\"sy0\">=</span> x4m <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sx2y <span class=\"sy0\">=</span> x2ym <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> ym<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sxy <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sx2y <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sx2y <span class=\"sy0\">*</span> sxx <span class=\"sy0\">-</span> sxy <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> ym <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span> xm <span class=\"sy0\">-</span> c <span class=\"sy0\">*</span> x2m<span class=\"sy0\">;</span><br/>\u00a0<br/>        IntToDoubleFunction abc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> xx<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> xx <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> xx <span class=\"sy0\">*</span> xx<span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"y = \"</span> <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"st0\">\"x + \"</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">+</span> <span class=\"st0\">\"x^2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" Input  Approximation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" x   y     y1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%3d \u00a0%5.1f<span class=\"es0\">\\n</span>\"</span>, x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, y<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, abc.<span class=\"me1\">applyAsDouble</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x <span class=\"sy0\">=</span> IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">121</span>, <span class=\"nu0\">162</span>, <span class=\"nu0\">209</span>, <span class=\"nu0\">262</span>, <span class=\"nu0\">321</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        polyRegression<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">polyfit(x::Vector, y::Vector, deg::Int) = collect(v ^ p for v in x, p in 0:deg) \\ y<br/>\u00a0<br/>x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br/>y = [1, 6, 17, 34, 57, 86, 121, 162, 209, 262, 321]<br/>@show polyfit(x, y, 2)</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/>fun polyRegression<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> IntArray, y<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> x.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> until n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xm <span class=\"sy0\">=</span> x.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ym <span class=\"sy0\">=</span> y.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x3m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x4m <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"sy0\">*</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xym <span class=\"sy0\">=</span> x.<span class=\"me1\">zip</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">*</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2ym <span class=\"sy0\">=</span> x.<span class=\"me1\">zip</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">*</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">*</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sxx <span class=\"sy0\">=</span> x2m - xm <span class=\"sy0\">*</span> xm<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sxy <span class=\"sy0\">=</span> xym - xm <span class=\"sy0\">*</span> ym<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sxx2 <span class=\"sy0\">=</span> x3m - xm <span class=\"sy0\">*</span> x2m<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sx2x2 <span class=\"sy0\">=</span> x4m - x2m <span class=\"sy0\">*</span> x2m<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sx2y <span class=\"sy0\">=</span> x2ym - x2m <span class=\"sy0\">*</span> ym<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sxy <span class=\"sy0\">*</span> sx2x2 - sx2y <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> / <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 - sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sx2y <span class=\"sy0\">*</span> sxx - sxy <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> / <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 - sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> ym - b <span class=\"sy0\">*</span> xm - c <span class=\"sy0\">*</span> x2m<br/>\u00a0<br/>    fun abc<span class=\"br0\">(</span>xx<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a + b <span class=\"sy0\">*</span> xx + c <span class=\"sy0\">*</span> xx <span class=\"sy0\">*</span> xx<br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"y = $a + ${b}x + ${c}x^2<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" Input  Approximation\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" x   y     y1\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        System.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%3d \u00a0%5.1f<span class=\"es1\">\\n</span>\"</span>, x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, y<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, abc<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">121</span>, <span class=\"nu0\">162</span>, <span class=\"nu0\">209</span>, <span class=\"nu0\">262</span>, <span class=\"nu0\">321</span><span class=\"br0\">)</span><br/>    polyRegression<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">data = <a class=\"__cf_email__\" data-cfemail=\"326640535c41425d415772\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{Range[0, 10], {1, 6, 17, 34, 57, 86, 121, 162, 209, 262, 321}};<br/>Fit[data, {1, x, x^2}, x]</pre>"}, {"lang": "MATLAB", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; x = <span class=\"br0\">[</span><span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span>,  <span class=\"nu0\">2</span>,  <span class=\"nu0\">3</span>,  <span class=\"nu0\">4</span>,  <span class=\"nu0\">5</span>,  <span class=\"nu0\">6</span>,   <span class=\"nu0\">7</span>,   <span class=\"nu0\">8</span>,   <span class=\"nu0\">9</span>,   <span class=\"nu0\">10</span><span class=\"br0\">]</span>;<br/>&gt;&gt; y = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">6</span>,  <span class=\"nu0\">17</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">121</span>, <span class=\"nu0\">162</span>, <span class=\"nu0\">209</span>, <span class=\"nu0\">262</span>, <span class=\"nu0\">321</span><span class=\"br0\">]</span>;<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/polyfit.html\"><span class=\"kw2\">polyfit</span></a><span class=\"br0\">(</span>x,y,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>   <span class=\"nu0\">2.999999999999998</span>   <span class=\"nu0\">2.000000000000019</span>   <span class=\"nu0\">0.999999999999956</span></pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u041fC\t\u0421/\u041f\t\u041fD\t\u0418\u041f9\t+\t\u041f9\t\u0418\u041fC\t\u0418\u041f5\t+\t\u041f5<br/>\u0418\u041fC\tx^2\t\u041f2\t\u0418\u041f6\t+\t\u041f6\t\u0418\u041f2\t\u0418\u041fC\t*\t\u0418\u041f7<br/>+\t\u041f7\t\u0418\u041f2\tx^2\t\u0418\u041f8\t+\t\u041f8\t\u0418\u041fC\t\u0418\u041fD\t*<br/>\u0418\u041fA\t+\t\u041fA\t\u0418\u041f2\t\u0418\u041fD\t*\t\u0418\u041fB\t+\t\u041fB\t\u0418\u041fD<br/>\u041a\u0418\u041f4\t\u0421/\u041f\t\u0411\u041f\t00</pre>"}, {"lang": "Modula-2", "loc": 87, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> PolynomialRegression;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> RealStr <span class=\"kw1\">IMPORT</span> RealToStr;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Eval<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>x <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> c<span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>x;<br/><span class=\"kw1\">END</span> Eval;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Regression<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    n<span class=\"sy0\">,</span>i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    xm<span class=\"sy0\">,</span>x2m<span class=\"sy0\">,</span>x3m<span class=\"sy0\">,</span>x4m <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    ym <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    xym<span class=\"sy0\">,</span>x2ym <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    sxx<span class=\"sy0\">,</span>sxy<span class=\"sy0\">,</span>sxx2<span class=\"sy0\">,</span>sx2x2<span class=\"sy0\">,</span>sx2y <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw3\">SIZE</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw3\">SIZE</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    xm <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    ym <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    x2m <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    x3m <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    x4m <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    xym <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    x2ym <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        xm <span class=\"sy0\">:=</span> xm <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        ym <span class=\"sy0\">:=</span> ym <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        x2m <span class=\"sy0\">:=</span> x2m <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        x3m <span class=\"sy0\">:=</span> x3m <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        x4m <span class=\"sy0\">:=</span> x4m <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        xym <span class=\"sy0\">:=</span> xym <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        x2ym <span class=\"sy0\">:=</span> x2ym <span class=\"sy0\">+</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    xm <span class=\"sy0\">:=</span> xm <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    ym <span class=\"sy0\">:=</span> ym <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    x2m <span class=\"sy0\">:=</span> x2m <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    x3m <span class=\"sy0\">:=</span> x3m <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    x4m <span class=\"sy0\">:=</span> x4m <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    xym <span class=\"sy0\">:=</span> xym <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    x2ym <span class=\"sy0\">:=</span> x2ym <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>\u00a0<br/>    sxx <span class=\"sy0\">:=</span> x2m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> xm;<br/>    sxy <span class=\"sy0\">:=</span> xym <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> ym;<br/>    sxx2 <span class=\"sy0\">:=</span> x3m <span class=\"sy0\">-</span> xm <span class=\"sy0\">*</span> x2m;<br/>    sx2x2 <span class=\"sy0\">:=</span> x4m <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> x2m;<br/>    sx2y <span class=\"sy0\">:=</span> x2ym <span class=\"sy0\">-</span> x2m <span class=\"sy0\">*</span> ym;<br/>\u00a0<br/>    b <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>sxy <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sx2y <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span>;<br/>    c <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>sx2y <span class=\"sy0\">*</span> sxx <span class=\"sy0\">-</span> sxy <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>sxx <span class=\"sy0\">*</span> sx2x2 <span class=\"sy0\">-</span> sxx2 <span class=\"sy0\">*</span> sxx2<span class=\"br0\">)</span>;<br/>    a <span class=\"sy0\">:=</span> ym <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span> xm <span class=\"sy0\">-</span> c <span class=\"sy0\">*</span> x2m;<br/>\u00a0<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"y = \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"x + \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"x^2\"</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%2i\u00a0%3i  \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>        RealToStr<span class=\"br0\">(</span>Eval<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>        WriteLn;<br/>    <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Regression;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> R <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>    x<span class=\"sy0\">,</span>y <span class=\"sy0\">:</span> R;<br/><span class=\"kw1\">BEGIN</span><br/>    x <span class=\"sy0\">:=</span> R<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span>;<br/>    y <span class=\"sy0\">:=</span> R<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span><span class=\"nu0\">57</span><span class=\"sy0\">,</span><span class=\"nu0\">86</span><span class=\"sy0\">,</span><span class=\"nu0\">121</span><span class=\"sy0\">,</span><span class=\"nu0\">162</span><span class=\"sy0\">,</span><span class=\"nu0\">209</span><span class=\"sy0\">,</span><span class=\"nu0\">262</span><span class=\"sy0\">,</span><span class=\"nu0\">321</span><span class=\"br0\">}</span>;<br/>    Regression<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar;<br/><span class=\"kw1\">END</span> PolynomialRegression.</pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">x <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">:</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>y <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span>   <span class=\"nu0\">6</span><span class=\"sy5\">,</span>  <span class=\"nu0\">17</span><span class=\"sy5\">,</span>  <span class=\"nu0\">34</span><span class=\"sy5\">,</span>  <span class=\"nu0\">57</span><span class=\"sy5\">,</span>  <span class=\"nu0\">86</span><span class=\"sy5\">,</span> <span class=\"nu0\">121</span><span class=\"sy5\">,</span> <span class=\"nu0\">162</span><span class=\"sy5\">,</span> <span class=\"nu0\">209</span><span class=\"sy5\">,</span> <span class=\"nu0\">262</span><span class=\"sy5\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>coeffs <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/polyfit.html\"><span class=\"kw6\">polyfit</span></a><span class=\"br0\">(</span>x<span class=\"sy5\">,</span> y<span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">polinterpolate</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">17</span><span class=\"sy0\">,</span><span class=\"nu1\">34</span><span class=\"sy0\">,</span><span class=\"nu1\">57</span><span class=\"sy0\">,</span><span class=\"nu1\">86</span><span class=\"sy0\">,</span><span class=\"nu1\">121</span><span class=\"sy0\">,</span><span class=\"nu1\">162</span><span class=\"sy0\">,</span><span class=\"nu1\">209</span><span class=\"sy0\">,</span><span class=\"nu1\">262</span><span class=\"sy0\">,</span><span class=\"nu1\">321</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 117, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!bin/usr/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.020</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">#This is a script to calculate an equation for a given set of coordinates.</span><br/><span class=\"co1\">#Input will be taken in sets of x and y. It can handle a grand total of 26 pairs.</span><br/><span class=\"co1\">#For matrix functions, we depend on the Math::MatrixReal package.</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 1: Get each x coordinate all at once (delimited by \" \") and each for y at once<br/>on the next prompt in the same format (delimited by \" \").<br/>=cut</span><br/><span class=\"kw2\">sub</span> getPairs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$buffer</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Please enter the values for the x coordinates, each delimited by a space. <span class=\"es0\">\\(</span>Ex: 0 1 2 3<span class=\"es0\">\\)</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@x</span> <span class=\"sy0\">=</span> getPairs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Please enter the values for the y coordinates, each delimited by a space. <span class=\"es0\">\\(</span>Ex: 0 1 2 3<span class=\"es0\">\\)</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=</span> getPairs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">#This whole thing depends on the number of x's being the same as the number of y's</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$pairs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 2: Devise the base equation of our polynomial using the following idea<br/>There is some polynomial of degree n (n == number of pairs - 1) such that <br/>f(x)=ax^n + bx^(n-1) + ... yx + z <br/>=cut</span><br/><span class=\"co1\">#Create an array of coefficients and their degrees with the format (\"coefficent degree\")</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@alphabet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$alpha</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$degree</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pairs</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$degree</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$degree</span><span class=\"sy0\">--,</span> <span class=\"re0\">$alpha</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@alphabet</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$alpha\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@degrees</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$degree\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 3: Using the array of coeffs and their degrees, set up individual equations solving for<br/>each coordinate pair. Why put it in this format? It interfaces witht he Math::MatrixReal package better this way.<br/>=cut</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@coeffs</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$pairs</span><span class=\"sy0\">;</span> <span class=\"re0\">$count</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"[ \"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">@degrees</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$buffer</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"re0\">$count</span><span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@coeffs</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$buffer</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$row</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">@coeffs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$row</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 4: We now have rows of x's raised to powers. With this in mind, we create a coefficient matrix.<br/>=cut</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$matrix</span> <span class=\"sy0\">=</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">new_from_string</span><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$buffMatrix</span> <span class=\"sy0\">=</span> <span class=\"re0\">$matrix</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">new_from_string</span><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 5: Now that we've gotten the matrix to do what we want it to do, we need to calculate the various determinants of the matrices<br/>=cut</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$coeffDet</span> <span class=\"sy0\">=</span> <span class=\"re0\">$matrix</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">det</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 6: Now that we have the determinant of the coefficient matrix, we need to find the determinants of the coefficient matrix with each column (1 at a time) replaced with the y values.<br/>=cut</span><br/><span class=\"co1\">#NOTE: Unlike in Perl, matrix indices start at 1, not 0.</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$column</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$column</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$pairs</span><span class=\"sy0\">;</span> <span class=\"re0\">$column</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">#Reassign the values in the current column to the y values</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$buffMatrix</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"re0\">$rows</span><span class=\"sy0\">,</span> <span class=\"re0\">$column</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$rows</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">#Find the values for the variables a, b, ... y, z in the original polynomial</span><br/>    <span class=\"co1\">#To round the difference of the determinants, I had to get creative</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$buffDet</span> <span class=\"sy0\">=</span> <span class=\"re0\">$buffMatrix</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">det</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$coeffDet</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tempDet</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffDet</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span>5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><span class=\"re0\">$column</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$buffDet</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"re0\">$tempDet</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span> <span class=\"re0\">$tempDet</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">#Reset the buffer matrix and the row counter</span><br/>    <span class=\"re0\">$buffMatrix</span> <span class=\"sy0\">=</span> <span class=\"re0\">$matrix</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">new_from_string</span><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">=pod<br/>Step 7: Now that we've found the values of a, b, ... y, z of the original polynomial, it's time to form our polynomial!<br/>=cut</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$polynomial</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$pairs</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$polynomial</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$degrees</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$degrees</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$polynomial</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"x\"</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$polynomial</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"x^\"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$degrees</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">#Now for the last piece of the poly: the y-intercept.</span><br/><span class=\"re0\">$polynomial</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$alphabet</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@alphabet</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"An approximating polynomial for your dataset is $polynomial.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Clifford<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">@x1</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">6</span> <span class=\"nu0\">17</span> <span class=\"nu0\">34</span> <span class=\"nu0\">57</span> <span class=\"nu0\">86</span> <span class=\"nu0\">121</span> <span class=\"nu0\">162</span> <span class=\"nu0\">209</span> <span class=\"nu0\">262</span> <span class=\"nu0\">321</span><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@e</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">@x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@x1</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@x1</span>\u00a0\u00bb<span class=\"sy0\">**</span>\u00bb <span class=\"nu0\">2</span>  <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">$y</span>  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@y</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$J</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span> \u2227 <span class=\"re0\">$x2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x0</span> \u2227 <span class=\"re0\">$J</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$I2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$I</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Real</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> \u2227 <span class=\"re0\">$J</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">,</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> \u2227 <span class=\"br0\">(</span><span class=\"re0\">$x2</span> \u2227 <span class=\"re0\">$x0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">,</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> \u2227 <span class=\"br0\">(</span><span class=\"re0\">$x0</span> \u2227 <span class=\"re0\">$x1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 46, "block": "<pre class=\"text highlighted_source\">constant x = {0,1,2,3,4,5,6,7,8,9,10}<br/>constant y = {1,6,17,34,57,86,121,162,209,262,321}<br/>constant n = length(x)<br/>\u00a0<br/>function regression()<br/>atom {xm, ym, x2m, x3m, x4m, xym, x2ym} @= 0<br/>    for i=1 to n do<br/>        atom xi = x[i],<br/>             yi = y[i]<br/>        xm += xi<br/>        ym += yi<br/>        x2m += power(xi,2)<br/>        x3m += power(xi,3)<br/>        x4m += power(xi,4)<br/>        xym += xi*yi<br/>        x2ym += power(xi,2)*yi<br/>    end for<br/>    xm /= n<br/>    ym /= n<br/>    x2m /= n<br/>    x3m /= n<br/>    x4m /= n<br/>    xym /= n<br/>    x2ym /= n<br/>    atom Sxx = x2m-power(xm,2),<br/>         Sxy = xym-xm*ym,<br/>         Sxx2 = x3m-xm*x2m,<br/>         Sx2x2 = x4m-power(x2m,2),<br/>         Sx2y = x2ym-x2m*ym,<br/>         B = (Sxy*Sx2x2-Sx2y*Sxx2)/(Sxx*Sx2x2-power(Sxx2,2)),<br/>         C = (Sx2y*Sxx-Sxy*Sxx2)/(Sxx*Sx2x2-power(Sxx2,2)),<br/>         A = ym-B*xm-C*x2m<br/>    return {C,B,A}<br/>end function<br/>\u00a0<br/>atom {a,b,c} = regression()<br/>\u00a0<br/>function f(atom x)<br/>    return a*x*x+b*x+c<br/>end function<br/>\u00a0<br/>printf(1,\"y=%gx^2+%gx+%g\\n\",{a,b,c})<br/>printf(1,\"\\n  x   y  f(x)\\n\")<br/>for i=1 to n do<br/>  printf(1,\"\u00a0%2d\u00a0%3d  \u00a0%3g\\n\",{x[i],y[i],f(x[i])})<br/>end for</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> x <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> y <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"nu0\">17</span><span class=\"sy0\">,</span>  <span class=\"nu0\">34</span><span class=\"sy0\">,</span>  <span class=\"nu0\">57</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"sy0\">,</span> <span class=\"nu0\">162</span><span class=\"sy0\">,</span> <span class=\"nu0\">209</span><span class=\"sy0\">,</span> <span class=\"nu0\">262</span><span class=\"sy0\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> coeffs <span class=\"sy0\">=</span> numpy.<span class=\"me1\">polyfit</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>deg<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> coeffs<br/><span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">3</span>.<span class=\"sy0\">,</span>  <span class=\"nu0\">2</span>.<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span>.<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x &lt;- c(0,  1,  2,  3,  4,  5,  6,   7,   8,   9,   10)<br/>y &lt;- c(1,  6,  17, 34, 57, 86, 121, 162, 209, 262, 321)<br/>coef(lm(y ~ x + I(x^2)))</pre>"}, {"lang": "Racket", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math plot)<br/>\u00a0<br/>(define xs '(0 1  2  3  4  5   6   7   8   9  10))<br/>(define ys '(1 6 17 34 57 86 121 162 209 262 321))<br/>\u00a0<br/>(define (fit x y n)<br/>  (define Y (-&gt;col-matrix y))<br/>  (define V (vandermonde-matrix x (+ n 1)))<br/>  (define VT (matrix-transpose V))<br/>  (matrix-&gt;vector (matrix-solve (matrix* VT V) (matrix* VT Y))))<br/>\u00a0<br/>(define ((poly v) x)<br/>  (for/sum ([c v] [i (in-naturals)])<br/>    (* c (expt x i))))<br/>\u00a0<br/>(plot (list (points   (map vector xs ys))<br/>            (function (poly (fit xs ys 2)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 51, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* Implementation of http://keisan.casio.com/exec/system/14059932254941<br/>*--------------------------------------------------------------------*/</span><br/>xl=<span class=\"st0\">'0 1  2  3  4  5   6   7   8   9  10'</span><br/>yl=<span class=\"st0\">'1 6 17 34 57 86 121 162 209 262 321'</span><br/>n=<span class=\"nu0\">11</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> xl x<span class=\"sy0\">.</span>i xl<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> yl y<span class=\"sy0\">.</span>i yl<br/>  <span class=\"kw3\">End</span><br/>xm=<span class=\"nu0\">0</span><br/>ym=<span class=\"nu0\">0</span><br/>x2m=<span class=\"nu0\">0</span><br/>x3m=<span class=\"nu0\">0</span><br/>x4m=<span class=\"nu0\">0</span><br/>xym=<span class=\"nu0\">0</span><br/>x2ym=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n<br/>  xm=xm+x<span class=\"sy0\">.</span>i<br/>  ym=ym+y<span class=\"sy0\">.</span>i<br/>  x2m=x2m+x<span class=\"sy0\">.</span>i<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>  x3m=x3m+x<span class=\"sy0\">.</span>i<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/>  x4m=x4m+x<span class=\"sy0\">.</span>i<span class=\"sy0\">**</span><span class=\"nu0\">4</span><br/>  xym=xym+x<span class=\"sy0\">.</span>i<span class=\"sy0\">*</span>y<span class=\"sy0\">.</span>i<br/>  x2ym=x2ym+<span class=\"br0\">(</span>x<span class=\"sy0\">.</span>i<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>y<span class=\"sy0\">.</span>i<br/>  <span class=\"kw3\">End</span><br/>xm =xm <span class=\"sy0\">/</span>n<br/>ym =ym <span class=\"sy0\">/</span>n<br/>x2m=x2m<span class=\"sy0\">/</span>n<br/>x3m=x3m<span class=\"sy0\">/</span>n<br/>x4m=x4m<span class=\"sy0\">/</span>n<br/>xym=xym<span class=\"sy0\">/</span>n<br/>x2ym=x2ym<span class=\"sy0\">/</span>n<br/>Sxx=x2m-xm<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>Sxy=xym-xm<span class=\"sy0\">*</span>ym<br/>Sxx2=x3m-xm<span class=\"sy0\">*</span>x2m<br/>Sx2x2=x4m-x2m<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>Sx2y=x2ym-x2m<span class=\"sy0\">*</span>ym<br/>B=<span class=\"br0\">(</span>Sxy<span class=\"sy0\">*</span>Sx2x2-Sx2y<span class=\"sy0\">*</span>Sxx2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>Sxx<span class=\"sy0\">*</span>Sx2x2-Sxx2<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>C=<span class=\"br0\">(</span>Sx2y<span class=\"sy0\">*</span>Sxx-Sxy<span class=\"sy0\">*</span>Sxx2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>Sxx<span class=\"sy0\">*</span>Sx2x2-Sxx2<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>A=ym-B<span class=\"sy0\">*</span>xm-C<span class=\"sy0\">*</span>x2m<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'y='</span>a<span class=\"st0\">'+'</span><span class=\"sy0\">||</span>b<span class=\"st0\">'*x+'</span>c<span class=\"st0\">'*x**2'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">' Input  \"Approximation\"'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">' x   y     y1'</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">11</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span>i,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>y<span class=\"sy0\">.</span>i,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>fun<span class=\"br0\">(</span>x<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>fun:<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> x<br/>  <span class=\"kw1\">Return</span> a+b<span class=\"sy0\">*</span>x+c<span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span> </pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> regress x, y, degree<br/>  x_data = x.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>xi<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">degree</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pow<span class=\"sy0\">|</span> <span class=\"br0\">(</span>xi<span class=\"sy0\">**</span>pow<span class=\"br0\">)</span>.<span class=\"me1\">to_r</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  mx = <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>x_data<span class=\"br0\">]</span><br/>  my = <span class=\"kw4\">Matrix</span>.<span class=\"me1\">column_vector</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>mx.<span class=\"me1\">t</span> <span class=\"sy0\">*</span> mx<span class=\"br0\">)</span>.<span class=\"me1\">inv</span> <span class=\"sy0\">*</span> mx.<span class=\"me1\">t</span> <span class=\"sy0\">*</span> my<span class=\"br0\">)</span>.<span class=\"me1\">transpose</span>.<span class=\"me1\">to_a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_f<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Sidef", "loc": 18, "block": "<pre class=\"ruby highlighted_source\">var <span class=\"kw4\">Matrix</span> = <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Math::Matrix'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func regress<span class=\"br0\">(</span>x, y, degree<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var x_data = x.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>xi<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">degree</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>pow<span class=\"sy0\">|</span> xi<span class=\"sy0\">**</span>pow <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    var mx = <span class=\"kw4\">Matrix</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x_data...<span class=\"br0\">)</span><br/>    var my = <span class=\"kw4\">Matrix</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>y.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/>\u00a0<br/>    mx.<span class=\"me1\">transpose</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>mx<span class=\"br0\">)</span>.<span class=\"me1\">invert</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>mx.<span class=\"me1\">transpose</span><span class=\"br0\">)</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>my<span class=\"br0\">)</span>.<span class=\"me1\">transpose</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var betas = regress<span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">121</span>, <span class=\"nu0\">162</span>, <span class=\"nu0\">209</span>, <span class=\"nu0\">262</span>, <span class=\"nu0\">321</span><span class=\"br0\">]</span>,<br/>    <span class=\"nu0\">2</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>betas.<span class=\"kw3\">print</span></pre>"}, {"lang": "Stata", "loc": 33, "block": "<pre class=\"text highlighted_source\">. clear<br/>. input x y<br/>0 1<br/>1 6<br/>2 17<br/>3 34<br/>4 57<br/>5 86<br/>6 121<br/>7 162<br/>8 209<br/>9 262<br/>10 321<br/>end<br/>\u00a0<br/>. regress y c.x##c.x<br/>\u00a0<br/>      Source |       SS           df       MS      Number of obs   =        11<br/>-------------+----------------------------------   F(2, 8)         =         .<br/>       Model |      120362         2       60181   Prob &gt; F        =         .<br/>    Residual |           0         8           0   R-squared       =    1.0000<br/>-------------+----------------------------------   Adj R-squared   =    1.0000<br/>       Total |      120362        10     12036.2   Root MSE        =         0<br/>\u00a0<br/>------------------------------------------------------------------------------<br/>           y |      Coef.   Std. Err.      t    P&gt;|t|     [95% Conf. Interval]<br/>-------------+----------------------------------------------------------------<br/>           x |          2          .        .       .            .           .<br/>             |<br/>     c.x#c.x |          3          .        .       .            .           .<br/>             |<br/>       _cons |          1          .        .       .            .           .<br/>------------------------------------------------------------------------------</pre>"}, {"lang": "Tcl", "loc": 49, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">linearalgebra</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> build.matrix <span class=\"br0\">{</span>xvec degree<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sums <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$xvec</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$degree</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">foreach</span> x <span class=\"re0\">$xvec</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + pow<span class=\"br0\">(</span><span class=\"re0\">$x</span>,<span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> sums <span class=\"re0\">$sum</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> order <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$degree</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> A <span class=\"br0\">[</span>math::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">mkMatrix</span> <span class=\"re0\">$order</span> <span class=\"re0\">$order</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$degree</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> A <span class=\"br0\">[</span>math::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">setrow</span> A <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$sums</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span>+<span class=\"re0\">$degree</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$A</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> build.vector <span class=\"br0\">{</span>xvec yvec degree<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sums <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$degree</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">foreach</span> x <span class=\"re0\">$xvec</span> y <span class=\"re0\">$yvec</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> pow<span class=\"br0\">(</span><span class=\"re0\">$x</span>,<span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> sums <span class=\"re0\">$sum</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span>math::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">mkVector</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$degree</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$degree</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span>math::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">setelem</span> x <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$sums</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Now, to solve the example from the top of this page</span><br/><span class=\"kw1\">set</span> x <span class=\"br0\">{</span><span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">2</span>   <span class=\"nu0\">3</span>   <span class=\"nu0\">4</span>   <span class=\"nu0\">5</span>   <span class=\"nu0\">6</span>   <span class=\"nu0\">7</span>   <span class=\"nu0\">8</span>   <span class=\"nu0\">9</span>  <span class=\"nu0\">10</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> y <span class=\"br0\">{</span><span class=\"nu0\">1</span>   <span class=\"nu0\">6</span>  <span class=\"nu0\">17</span>  <span class=\"nu0\">34</span>  <span class=\"nu0\">57</span>  <span class=\"nu0\">86</span> <span class=\"nu0\">121</span> <span class=\"nu0\">162</span> <span class=\"nu0\">209</span> <span class=\"nu0\">262</span> <span class=\"nu0\">321</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># build the system A.x=b</span><br/><span class=\"kw1\">set</span> degree <span class=\"nu0\">2</span><br/><span class=\"kw1\">set</span> A <span class=\"br0\">[</span>build.matrix <span class=\"re0\">$x</span> <span class=\"re0\">$degree</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> b <span class=\"br0\">[</span>build.vector <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$degree</span><span class=\"br0\">]</span><br/><span class=\"co1\"># solve it</span><br/><span class=\"kw1\">set</span> coeffs <span class=\"br0\">[</span>math::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">solveGauss</span> <span class=\"re0\">$A</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/><span class=\"co1\"># show results</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$coeffs</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">DelVar x<br/>seq(x,x,0,10) \u2192 xs<br/>{1,6,17,34,57,86,121,162,209,262,321} \u2192 ys<br/>QuadReg xs,ys<br/>Disp regeq(x)</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>(fit \"n\") (\"x\",\"y\") = ..dgelsd\\\"y\" (gang \\/*pow float*x iota successor \"n\")* \"x\"</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>xs:=GSL.VectorFromData(0,  1,  2,  3,  4,  5,   6,   7,   8,   9,  10);<br/>ys:=GSL.VectorFromData(1,  6, 17, 34, 57, 86, 121, 162, 209, 262, 321);<br/>v\u00a0:=GSL.polyFit(xs,ys,2);<br/>v.format().println();<br/>GSL.Helpers.polyString(v).println();<br/>GSL.Helpers.polyEval(v,xs).format().println();</pre>"}]}