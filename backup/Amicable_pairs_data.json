{"task": "Amicable_pairs", "blocks": [{"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Amicable <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Sum_Of_Factors<span class=\"br0\">(</span>Num\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      Sum\u00a0: Integer\u00a0:= <span class=\"nu0\">1</span>;<br/>      Test_Nr\u00a0: Integer\u00a0:= <span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>\t <span class=\"kw1\">if</span> Num <span class=\"kw2\">mod</span> Test_Nr = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t    Sum\u00a0:= Sum + Test_Nr;<br/>\t    <span class=\"kw1\">if</span> Test_Nr * Test_Nr /= Num <span class=\"kw1\">then</span><br/>\t       Sum\u00a0:= Sum + Num / Test_Nr;<br/>\t       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t Test_Nr\u00a0:= Test_Nr + <span class=\"nu0\">1</span>;<br/>\t <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Test_Nr ** <span class=\"nu0\">2</span> &gt; Num;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Sum;<br/>   <span class=\"kw1\">end</span> Sum_Of_Factors;<br/>\u00a0<br/>   Num2\u00a0: Integer;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Num1 <span class=\"kw3\">in</span> <span class=\"nu0\">4</span> .. <span class=\"nu0\">20</span>_000 <span class=\"kw1\">loop</span><br/>      Num2\u00a0:= Sum_Of_Factors<span class=\"br0\">(</span>Num1<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Num1 &lt; Num2 <span class=\"kw1\">then</span><br/>\t <span class=\"kw1\">if</span> Num1 = Sum_Of_Factors<span class=\"br0\">(</span>Num2<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t   Put_Line<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Num1<span class=\"br0\">)</span> &amp; <span class=\"st0\">\",\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Num2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Amicable;</pre>"}, {"lang": "ALGOL 68", "loc": 43, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># resturns the sum of the proper divisors of n                    #</span><br/><span class=\"coMULTI\"># if n = 1, 0 or -1, we return 0                                  #</span><br/><span class=\"kw4\">PROC</span> sum proper divisors <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> abs n <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">IF</span> abs n <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">THEN</span><br/>             <span class=\"kw2\">FOR</span> d <span class=\"kw2\">FROM</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> abs n <span class=\"br0\">)</span> <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 2 <span class=\"kw2\">DO</span><br/>                 <span class=\"kw2\">IF</span> abs n <span class=\"kw12\">MOD</span> d <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>                     <span class=\"coMULTI\"># found another divisor                      #</span><br/>                     result <span class=\"sy1\">+:=</span> d<span class=\"sy1\">;</span><br/>                     <span class=\"kw2\">IF</span> d <span class=\"sy1\">*</span> d <span class=\"sy1\">/=</span> n <span class=\"kw2\">THEN</span><br/>                         <span class=\"coMULTI\"># include the other divisor              #</span><br/>                         result <span class=\"sy1\">+:=</span> n <span class=\"kw12\">OVER</span> d<br/>                     <span class=\"kw2\">FI</span><br/>                 <span class=\"kw2\">FI</span><br/>             <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>             <span class=\"coMULTI\"># 1 is always a proper divisor of numbers &gt; 1        #</span><br/>             result <span class=\"sy1\">+:=</span> 1<br/>         <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sum proper divisors #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># construct a table of the sum of the proper divisors of numbers  #</span><br/><span class=\"coMULTI\"># up to 20 000                                                    #</span><br/><span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> 20 000<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">INT</span> proper divisor sum<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> proper divisor sum <span class=\"kw2\">DO</span> proper divisor sum<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sum proper divisors<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns TRUE if n1 and n2 are an amicable pair FALSE otherwise  #</span><br/><span class=\"coMULTI\">#         n1 and n2 are amicable if the sum of the proper diviors #</span><br/><span class=\"coMULTI\">#         n1 = n2 and the sum of the proper divisors of n2 = n1   #</span><br/><span class=\"kw4\">PROC</span> is an amicable pair <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n1<span class=\"sy1\">,</span> n2 <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"br0\">(</span> proper divisor sum<span class=\"br0\">[</span> n1 <span class=\"br0\">]</span> <span class=\"sy1\">=</span> n2 <span class=\"kw16\">AND</span> proper divisor sum<span class=\"br0\">[</span> n2 <span class=\"br0\">]</span> <span class=\"sy1\">=</span> n1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># find the amicable pairs up to 20 000                            #</span><br/><span class=\"kw2\">FOR</span> p1 <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">FOR</span> p2 <span class=\"kw2\">FROM</span> p1 <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> is an amicable pair<span class=\"br0\">(</span> p1<span class=\"sy1\">,</span> p2 <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> p1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" and \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> p2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" are a amicable pair\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ANSI Standard BASIC", "loc": 39, "block": "<pre class=\"text highlighted_source\">100 DECLARE EXTERNAL FUNCTION sum_proper_divisors<br/>110 CLEAR<br/>120\u00a0!<br/>130 DIM f(20001)     \u00a0! sum of proper factors for each n<br/>140 FOR i=1 TO 20000<br/>150    LET f(i)=sum_proper_divisors(i)<br/>160 NEXT i<br/>170\u00a0! look for pairs<br/>180 FOR i=1 TO 20000<br/>190    FOR j=i+1 TO 20000<br/>200       IF f(i)=j AND i=f(j) THEN<br/>210          PRINT \"Amicable pair \";i;\" \";j<br/>220       END IF<br/>230    NEXT j<br/>240 NEXT i<br/>250\u00a0!<br/>260 PRINT<br/>270 PRINT \"-- found all amicable pairs\"<br/>280 END<br/>290\u00a0!<br/>300\u00a0! Compute the sum of proper divisors of given number<br/>310\u00a0!<br/>320 EXTERNAL FUNCTION sum_proper_divisors(n)<br/>330\u00a0!<br/>340 IF n&gt;1 THEN\u00a0! n must be 2 or larger<br/>350    LET sum=1\u00a0! start with 1<br/>360    LET root=SQR(n)   \u00a0! note that root is an integer<br/>370   \u00a0! check possible factors, up to sqrt<br/>380    FOR i=2 TO root<br/>390       IF MOD(n,i)=0 THEN<br/>400          LET sum=sum+i    \u00a0! i is a factor<br/>410          IF i*i&lt;&gt;n THEN   \u00a0! check i is not actual square root of n<br/>420             LET sum=sum+n/i \u00a0! so n/i will also be a factor<br/>430          END IF<br/>440       END IF<br/>450    NEXT i<br/>460 END IF<br/>470 LET sum_proper_divisors = sum<br/>480 END FUNCTION</pre>"}, {"lang": "AppleScript", "loc": 143, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- AMICABLE PAIRS ------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- amicablePairsUpTo\u00a0:: Int -&gt; Int</span><br/><span class=\"kw3\">on</span> amicablePairsUpTo<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- amicable\u00a0:: [Int] -&gt; Int -&gt; Int -&gt; [Int] -&gt; [Int]</span><br/>    <span class=\"kw3\">script</span> amicable<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, m, n, lstSums<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span>m &gt; n<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>m \u2264 max<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> m <span class=\"kw3\">of</span> lstSums<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                a <span class=\"sy0\">&amp;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>n, m<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- divisorsSummed\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw3\">script</span> divisorsSummed<br/>        <span class=\"co1\">-- sum\u00a0:: Int -&gt; Int -&gt; Int</span><br/>        <span class=\"kw3\">script</span> sum<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>                a <span class=\"sy0\">+</span> b<br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            foldl<span class=\"br0\">(</span>sum, <span class=\"nu0\">0</span>, properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>amicable, <span class=\"br0\">{</span><span class=\"br0\">}</span>, \u00ac<br/>        map<span class=\"br0\">(</span>divisorsSummed, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, max<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> amicablePairsUpTo<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    amicablePairsUpTo<span class=\"br0\">(</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- PROPER DIVISORS -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- properDivisors\u00a0:: Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- isFactor\u00a0:: Int -&gt; Bool </span><br/>    <span class=\"kw3\">script</span> isFactor<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            n <span class=\"kw2\">mod</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- integerQuotient\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw3\">script</span> integerQuotient<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> x<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> realRoot <span class=\"kw3\">to</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> intRoot <span class=\"kw3\">to</span> realRoot <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>        <span class=\"kw3\">set</span> blnPerfectSquare <span class=\"kw3\">to</span> intRoot <span class=\"sy0\">=</span> realRoot<br/>\u00a0<br/>        <span class=\"co1\">-- Factors up to square root of n,</span><br/>        <span class=\"kw3\">set</span> lows <span class=\"kw3\">to</span> filter<span class=\"br0\">(</span>isFactor, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, intRoot<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">-- and quotients of these factors beyond the square root,</span><br/>        <span class=\"co1\">-- excluding n itself (last item)</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span>lows <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>integerQuotient, \u00ac<br/>            <span class=\"kw1\">items</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>blnPerfectSquare <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> reverse <span class=\"kw3\">of</span> lows<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> properDivisors<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "ATS", "loc": 106, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>fun<br/>sum_list_vt<br/>  (xs: List_vt(int)): int =<br/>(<br/>  case+ xs of<br/>  | ~list_vt_nil() =&gt; 0<br/>  | ~list_vt_cons(x, xs) =&gt; x + sum_list_vt(xs)<br/>)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>fun<br/>propDivs<br/>(<br/>  x0: int<br/>)\u00a0: List0_vt(int) =<br/>  loop(x0, 2, list_vt_sing(1)) where<br/>{<br/>//<br/>fun<br/>loop<br/>(<br/>x0: int, i: int, res: List0_vt(int)<br/>)\u00a0: List0_vt(int) =<br/>(<br/>if<br/>(i * i) &gt; x0<br/>then list_vt_reverse(res)<br/>else<br/>(<br/>  if x0\u00a0% i\u00a0!= 0<br/>    then<br/>      loop(x0, i+1, res)<br/>    // end of [then]<br/>    else let<br/>      val res =<br/>        cons_vt(i, res)<br/>      // end of [val]<br/>      val res =<br/>      (<br/>        if i * i = x0 then res else cons_vt(x0 / i, res)<br/>      )\u00a0: List0_vt(int) // end of [val]<br/>    in<br/>      loop(x0, i+1, res)<br/>    end // end of [else]<br/>  // end of [if]<br/>)<br/>) (* end of [loop] *)<br/>//<br/>} // end of [propDivs]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun<br/>sum_propDivs(x: int): int = sum_list_vt(propDivs(x))<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>val<br/>theNat2 = auxmain(2) where<br/>{<br/>fun<br/>auxmain<br/>(<br/> n: int<br/>)\u00a0: stream_vt(int) = $ldelay(stream_vt_cons(n, auxmain(n+1)))<br/>}<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>val<br/>theAmicable =<br/>(<br/>stream_vt_takeLte(theNat2, 20000)<br/>).filter()<br/>(<br/>lam x =&gt;<br/>let<br/>  val x2 = sum_propDivs(x)<br/>in x &lt; x2 &amp;&amp; x = sum_propDivs(x2) end<br/>)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>val () =<br/>theAmicable.foreach()<br/>(<br/>  lam x =&gt; println! (\"(\", x, \", \", sum_propDivs(x), \")\")<br/>)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement main0 () = ()<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 53, "block": "<pre class=\"d highlighted_source\">SetBatchLines <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>Loop<span class=\"sy0\">,</span> <span class=\"nu0\">20000</span><br/><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> A_index<br/>\u00a0<br/>\t<span class=\"sy0\">;</span> Getting factors<br/>\tloop <span class=\"sy0\">%</span> floor<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> mod<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> A_index<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span>\t<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> m <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tsum <span class=\"sy0\">+=</span> A_index<br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tsum <span class=\"sy0\">+=</span> A_index <span class=\"sy0\">+</span> m<span class=\"co1\">//A_index</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tsum <span class=\"sy0\">+=</span> A_index<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"sy0\">;</span> Factors obtained<br/>\u00a0<br/>\t<span class=\"sy0\">;</span> Checking factors of sum<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> sum <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tloop <span class=\"sy0\">%</span> floor<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> mod<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> A_index<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span>\t<br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> sum <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tsum2 <span class=\"sy0\">+=</span> A_index<br/>\t\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tsum2 <span class=\"sy0\">+=</span> A_index <span class=\"sy0\">+</span> sum<span class=\"co1\">//A_index</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> A_index <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tsum2 <span class=\"sy0\">+=</span> A_index<br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span>\t\t<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> m <span class=\"sy0\">=</span> sum2 <span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> m <span class=\"sy0\">!=</span> sum <span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> m <span class=\"sy0\">&lt;</span> sum <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw4\">final</span> .<span class=\"sy0\">=</span> m . <span class=\"st0\">\":\"</span> . <span class=\"me1\">sum</span> . <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"br0\">}</span> <span class=\"sy0\">;</span> Checked<br/>\u00a0<br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\tsum2 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>MsgBox <span class=\"sy0\">%</span> <span class=\"kw4\">final</span><br/>ExitApp</pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\">#!/bin/awk -f</span><br/><span class=\"kw6\">function</span> sumprop<span class=\"br0\">(</span>num,   i,sum,root<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy2\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/>sum=<span class=\"nu0\">1</span><br/>root=<span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> i=<span class=\"nu0\">2</span>; i <span class=\"sy2\">&lt;</span> root; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span> <br/>          sum = sum <span class=\"sy3\">+</span> i <span class=\"sy3\">+</span> num<span class=\"sy3\">/</span>i<br/>          <span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy3\">%</span> root <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">{</span><br/>         sum = sum <span class=\"sy3\">+</span> root<br/>         <span class=\"br0\">}</span>    <br/> <span class=\"kw6\">return</span> sum<br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><br/>limit=<span class=\"nu0\">20000</span><br/><span class=\"kw5\">print</span> <span class=\"st0\">\"Amicable pairs &lt; \"</span>,limit<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>n=<span class=\"nu0\">1</span>; n <span class=\"sy2\">&lt;</span> limit<span class=\"sy3\">+</span><span class=\"nu0\">1</span>; n<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    m=sumprop<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> sumprop<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> n <span class=\"sy2\">&lt;</span> m<span class=\"br0\">)</span> <span class=\"kw5\">print</span> n,m<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Befunge", "loc": 6, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"31476e71\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#-*8*:\"2\":$_:#!2#*8#g*#6:#0*#!:#-*#&lt;v&gt;*/.55+,<br/>1&gt;$$:28*:*:*%\\28*:*:*/`06p28*:*:*/\\2v\u00a0%%^:*:&lt;&gt;*v<br/>+|!:-1g60/*:*:*82::+**:*:&lt;&lt;&gt;:#**#8:#&lt;*^&gt;.28*^8\u00a0:<br/>:v&gt;&gt;*:*%/\\28*:*:*%+\\v&gt;8+#$^#_+#`\\:#0&lt;:\\`1/*:*2#&lt;<br/>2v^:*82\\/*:*:*82:::_v#!%%*:*:*82\\/*:*:*82::&lt;_^#&lt;<br/>&gt;&gt;06p:28*:*:**1+01-\\&gt;1+::28*:*:*/\\28*:*:*%:*\\`!^</pre>"}, {"lang": "C", "loc": 56, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> uint<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  uint top <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  uint <span class=\"sy0\">*</span>divsum <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>top <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>divsum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  uint pows<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> divsum<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// sieve</span><br/>  <span class=\"co1\">// only sieve within lower half , the modification starts at 2*p</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p<span class=\"sy0\">+</span>p <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divsum<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      divsum<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">;</span><span class=\"co1\">// subtract number itself from divisor sum ('proper')</span><br/>      <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><span class=\"br0\">}</span>     <span class=\"co1\">// p not prime</span><br/>\u00a0<br/>    uint x<span class=\"sy0\">;</span> <span class=\"co1\">// highest power of p we need</span><br/>    <span class=\"co1\">//checking x &lt;= top/y instead of x*y &lt;= top to avoid overflow</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> pows<span class=\"br0\">[</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">/</span>p<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      pows<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">*</span>pows<span class=\"br0\">[</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//counter where n is not a*p with a =\u00a0?*p, useful for most p.</span><br/>    <span class=\"co1\">//think of p&gt;31 seldom divisions or p&gt;sqrt(top) than no division is needed</span><br/>    <span class=\"co1\">//n = 2*p, so the prime itself is left unchanged =&gt; k=p-1</span><br/>    uint k<span class=\"sy0\">=</span> p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint n <span class=\"sy0\">=</span> p<span class=\"sy0\">+</span>p<span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> n <span class=\"sy0\">+=</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      uint s<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>pows<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      k<span class=\"sy0\">--;</span><br/>      <span class=\"co1\">// search the right power only if needed</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> k<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>pows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> s <span class=\"sy0\">+=</span> pows<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        k <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>      divsum<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//now correct the upper half</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint p <span class=\"sy0\">=</span> <span class=\"br0\">(</span>top <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divsum<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      divsum<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  uint cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    uint b <span class=\"sy0\">=</span> divsum<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;</span> a <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&lt;=</span> top <span class=\"sy0\">&amp;&amp;</span> divsum<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%u\u00a0%u<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      cnt<span class=\"sy0\">++;</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Top\u00a0%u count\u00a0:\u00a0%u<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>top<span class=\"sy0\">,</span>cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 50, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;unordered_map&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> alreadyDiscovered<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">unordered_map</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> divsumMap<span class=\"sy4\">;</span> <br/>    <span class=\"kw4\">int</span> count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> N <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> N <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">20000</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>N<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>      <br/>        <span class=\"kw4\">int</span> divSumN <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> N <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">fmod</span><span class=\"br0\">(</span>N, i<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                divSumN <span class=\"sy2\">+</span><span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// populate map of integers to the sum of their proper divisors</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divSumN <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// do not include primes</span><br/>            divsumMap<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy1\">=</span> divSumN<span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">unordered_map</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> divsumMap.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> divsumMap.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> M <span class=\"sy1\">=</span> it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first<span class=\"sy4\">;</span><br/>            <span class=\"kw4\">int</span> divSumM <span class=\"sy1\">=</span> it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"sy4\">;</span><br/>            <span class=\"kw4\">int</span> divSumN <span class=\"sy1\">=</span> divsumMap<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>N <span class=\"sy3\">!</span><span class=\"sy1\">=</span> M <span class=\"sy3\">&amp;&amp;</span> divSumM <span class=\"sy1\">==</span> N <span class=\"sy3\">&amp;&amp;</span> divSumN <span class=\"sy1\">==</span> M<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">// do not print duplicate pairs</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">find</span><span class=\"br0\">(</span>alreadyDiscovered.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, alreadyDiscovered.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, N<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> alreadyDiscovered.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\u00a0<br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"[\"</span> <span class=\"sy1\">&lt;&lt;</span> M <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> N <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"]\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>                alreadyDiscovered.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                alreadyDiscovered.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                count<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> count <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" amicable pairs discovered\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 37, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">AmicablePairs</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Limit <span class=\"sy0\">=</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span>        <br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> pair <span class=\"kw1\">in</span> GetPairs<span class=\"br0\">(</span>Limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1}\"</span>, pair<span class=\"sy0\">.</span><span class=\"me1\">Item1</span>, pair<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;</span> GetPairs<span class=\"br0\">(</span><span class=\"kw4\">int</span> max<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> divsums <span class=\"sy0\">=</span><br/>                Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, max <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> ProperDivisors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>divsums<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> divsums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> sum <span class=\"sy0\">&amp;&amp;</span> sum <span class=\"sy0\">&lt;=</span> divsums<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&amp;&amp;</span> divsums<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>i, sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> ProperDivisors<span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><br/>                Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                    <span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>divisor <span class=\"sy0\">=&gt;</span> number <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 25, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ns example<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn factors <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Find the proper factors of a number \"</span><br/>  <span class=\"br0\">(</span>into <span class=\"br0\">(</span>sorted-<span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>mapcat <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span>/ n x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span>zero? <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>Math/<span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>def find-pairs <span class=\"br0\">(</span>into #<span class=\"br0\">{</span><span class=\"br0\">}</span><br/>               <span class=\"br0\">(</span>for <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range  <span class=\"nu0\">2</span> <span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>                  <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span>factors n<span class=\"br0\">)</span>     <span class=\"co1\">; Factors of n</span><br/>                        M <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> + </span>f<span class=\"br0\">)</span>     <span class=\"co1\">; Sum of factors</span><br/>                        g <span class=\"br0\">(</span>factors M<span class=\"br0\">)</span>     <span class=\"co1\">; Factors of sum</span><br/>                        N <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> + </span>g<span class=\"br0\">)</span><span class=\"br0\">]</span>    <span class=\"co1\">; Sum of Factors of sum</span><br/>                  <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n N<span class=\"br0\">)</span>           <span class=\"co1\">; (sum(proDivs(N)) = M and sum(propDivs(M)) = N</span><br/>                  <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> M N<span class=\"br0\">)</span><span class=\"br0\">]</span>       <span class=\"co1\">; N not-equal M</span><br/>                 <span class=\"br0\">(</span>sorted-<span class=\"kw1\">set</span> n M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">; Found pair</span><br/>\u00a0<br/><span class=\"co1\">;; Output Results</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>q find-pairs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cache <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-proper-divisors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>gethash n cache<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash n cache<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to <span class=\"br0\">(</span>/ n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      sum x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> amicable-pairs-up-to <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to n<br/>        for sum-divs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum-proper-divisors x<span class=\"br0\">)</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x sum-divs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span>sum-proper-divisors sum-divs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          collect <span class=\"br0\">(</span><span class=\"kw1\">list</span> x sum-divs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>amicable-pairs-up-to <span class=\"nu0\">20000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MX = 524_000_000<br/>N = Math.sqrt(MX).to_u32<br/>x = Array(Int32).new(MX+1, 1)<br/>\u00a0<br/>(2..N).each { |i|<br/>    p = i*i<br/>    x[p] += i<br/>    k = i+i+1<br/>    (p+i..MX).step(i) { |j|<br/>        x[j] += k<br/>        k += 1<br/>    }<br/>}<br/>\u00a0<br/>(4..MX).each { |m|<br/>    n = x[m]<br/>    if n &lt; m &amp;&amp; n\u00a0!= 0 &amp;&amp; m == x[n]<br/>        puts \"#{n} #{m}\"<br/>    end<br/>}<br/>\u00a0</pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> properDivs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"sy0\">=&gt;</span><br/>        iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> rangeMax <span class=\"sy0\">=</span> <span class=\"nu0\">20</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> n2d <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> rangeMax <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> properDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> divSum<span class=\"sy0\">;</span> n2d.<span class=\"me1\">enumerate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> divSum <span class=\"sy0\">&amp;&amp;</span> divSum <span class=\"sy0\">&lt;=</span> rangeMax <span class=\"sy0\">&amp;&amp;</span> n2d<span class=\"br0\">[</span>divSum <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"Amicable pair:\u00a0%d and\u00a0%d with proper divisors:<span class=\"es1\">\\n</span>   \u00a0%s<span class=\"es1\">\\n</span>   \u00a0%s\"</span><span class=\"sy0\">,</span><br/>                     n<span class=\"sy0\">,</span> divSum<span class=\"sy0\">,</span> properDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> properDivs<span class=\"br0\">(</span>divSum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; using (sum-divisors) from math.lib</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>amicable N<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> n <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>divisors m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> n <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">1.5</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; assume n/m &lt; 1.5</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n m<span class=\"br0\">)</span> <span class=\"co1\">;; prevent perfect numbers</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>divisors n<span class=\"br0\">)</span> m<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> m n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>amicable <span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">220</span> . <span class=\"nu0\">284</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1184</span> . <span class=\"nu0\">1210</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2620</span> . <span class=\"nu0\">2924</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">5020</span> . <span class=\"nu0\">5564</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">6232</span> . <span class=\"nu0\">6368</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">10744</span> . <span class=\"nu0\">10856</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">12285</span> . <span class=\"nu0\">14595</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">17296</span> . <span class=\"nu0\">18416</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>amicable <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"co1\">;; 42 pairs</span><br/>   \u2192 <span class=\"br0\">(</span>... <span class=\"br0\">(</span><span class=\"nu0\">802725</span> . <span class=\"nu0\">863835</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">879712</span> . <span class=\"nu0\">901424</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">898216</span> . <span class=\"nu0\">980984</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">947835</span> . <span class=\"nu0\">1125765</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">998104</span> . <span class=\"nu0\">1043096</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 8, "block": "<pre class=\"text highlighted_source\">open monad io number list<br/>\u00a0<br/>divisors n = filter ((0 ==) &lt;&lt; (n `mod`)) [1..(n `div` 2)]<br/>range = [1 .. 20000]<br/>divs = zip range $ map (sum &lt;&lt; divisors) range<br/>pairs = [(n, m) \\\\ (n, nd) &lt;- divs, (m, md) &lt;- divs | n &lt; m &amp;&amp; nd == m &amp;&amp; md == n]<br/>\u00a0<br/>do putLn pairs\u00a0::: IO</pre>"}, {"lang": "Elena", "loc": 32, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'math.<br/>\u00a0<br/>const int Limit = 20000.<br/>\u00a0<br/>extension op<br/>{<br/>    properDivisors<br/>        = Range new(1,self / 2); filterBy(:n)(self mod:n == 0).<br/>\u00a0<br/>    amicablePairs<br/>    [<br/>        var divsums\u00a0:= Range new(0, self); selectBy(:i)(i properDivisors; summarize(Integer new)); toArray.<br/>\u00a0<br/>        ^ 1 repeatTill(divsums length); <br/>            filterBy(:i)<br/>            [<br/>                var sum\u00a0:= divsums[i].<br/>                ^ (i &lt; sum) &amp;&amp; (sum &lt; divsums length) &amp;&amp; (divsums[sum] == i)<br/>            ]; <br/>            selectBy(:i)({ item1 = i. item2 = divsums[i]. }).<br/>    ]<br/>}<br/>\u00a0<br/>public program =<br/>[<br/>    Limit amicablePairs; forEach(:pair)<br/>    [<br/>        console printLine(pair item1, \" \", pair item2).<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule Proper do<br/>  def divisors(1), do: []<br/>  def divisors(n), do: [1 | divisors(2,n,:math.sqrt(n))] |&gt; Enum.sort<br/>\u00a0<br/>  defp divisors(k,_n,q) when k&gt;q, do: []<br/>  defp divisors(k,n,q) when rem(n,k)&gt;0, do: divisors(k+1,n,q)<br/>  defp divisors(k,n,q) when k * k == n, do: [k | divisors(k+1,n,q)]<br/>  defp divisors(k,n,q)                , do: [k,div(n,k) | divisors(k+1,n,q)]<br/>end<br/>\u00a0<br/>map = Map.new(1..20000, fn n -&gt; {n, Proper.divisors(n) |&gt; Enum.sum} end)<br/>Enum.filter(map, fn {n,sum} -&gt; map[sum] == n and n &lt; sum end)<br/>|&gt; Enum.sort<br/>|&gt; Enum.each(fn {i,j} -&gt; IO.puts \"#{i} and #{j}\" end)</pre>"}, {"lang": "Erlang", "loc": 37, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>properdivs<span class=\"br0\">)</span><span class=\"sy1\">.</span>                                                            <br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>amicable<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>divs<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>sumdivs<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                         <br/>\u00a0<br/><span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"sy1\">,</span><span class=\"re5\">_Current</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">Limit</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">List</span><span class=\"sy1\">;</span>                       <br/><span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Current</span> <span class=\"sy3\">=&lt;</span> <span class=\"re5\">Acc</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span>  <span class=\"sy1\">-&gt;</span>                         <br/>    <span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                          <br/><span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                                                <br/>    <span class=\"re5\">CS</span> <span class=\"sy3\">=</span> <span class=\"re3\">sumdivs</span><span class=\"br0\">(</span><span class=\"re5\">Current</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>                                                         <br/>    <span class=\"re5\">AS</span> <span class=\"sy3\">=</span> <span class=\"re3\">sumdivs</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>                                                             <br/>    <span class=\"kw1\">if</span>                                                                             <br/>        <span class=\"re5\">CS</span> <span class=\"sy3\">==</span> <span class=\"re5\">Acc</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">AS</span> <span class=\"sy3\">==</span> <span class=\"re5\">Current</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">Current</span> <span class=\"sy1\">-&gt;</span>                 <br/>          <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"A: ~w, B: ~w, ~nL: ~w~w~n\"</span><span class=\"sy1\">,</span>  <span class=\"br0\">[</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy1\">,</span><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">Current</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>                                                                                <br/>          <span class=\"re5\">NL</span> <span class=\"sy3\">=</span> <span class=\"re5\">List</span> <span class=\"sy3\">++</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>                                            <br/>          <span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">NL</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                          <br/>        true <span class=\"sy1\">-&gt;</span> <br/>          <span class=\"re3\">amicable</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span>                            <br/>\u00a0<br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span>                                                                  <br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span>                                                                  <br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                           <br/>\u00a0<br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                                                                <br/>     <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                         <br/>\u00a0<br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">_N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">K</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Q</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span>                                              <br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">_Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">=/=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span>                                          <br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                         <br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">_Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">K</span> <span class=\"sy3\">*</span> <span class=\"re5\">K</span>  <span class=\"sy3\">==</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span>                                            <br/>    <span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                        <br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">_Q</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                                                             <br/>    <span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                               <br/>\u00a0<br/><span class=\"re3\">sumdivs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                               <br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 28, "block": "<pre class=\"text highlighted_source\">PROGRAM AMICABLE<br/>\u00a0<br/>CONST LIMIT=20000<br/>\u00a0<br/>PROCEDURE SUMPROP(NUM-&gt;M)<br/>  IF NUM&lt;2 THEN M=0 EXIT PROCEDURE<br/>  SUM=1<br/>  ROOT=SQR(NUM)<br/>  FOR I=2 TO ROOT-1 DO<br/>     IF (NUM=I*INT(NUM/I)) THEN<br/>         SUM=SUM+I+NUM/I<br/>     END IF<br/>     IF (NUM=ROOT*INT(NUM/ROOT)) THEN<br/>         SUM=SUM+ROOT<br/>     END IF<br/>  END FOR<br/>  M=SUM<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0! CLS<br/>  PRINT(\"Amicable pairs &lt; \";LIMIT)<br/>  FOR N=1 TO LIMIT DO<br/>    SUMPROP(N-&gt;M1)<br/>    SUMPROP(M1-&gt;M2)<br/>    IF (N=M2 AND N&lt;M1) THEN PRINT(N,M1)<br/>  END FOR<br/>END PROGRAM</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"nu0\">20000</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span> n, <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">%</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span> a<span class=\"sy0\">&lt;</span>b <span class=\"kw1\">then</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>b,a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">groupBy</span> id<br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printfn <span class=\"st0\">\"%A\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: grouping math.primes.factors math.ranges\u00a0;<br/>\u00a0<br/>: pdivs      ( n -- seq )   divisors but-last\u00a0;<br/>: dsum       ( n -- sum )   pdivs sum\u00a0;<br/>: dsum=      ( n m --\u00a0? )   dsum =\u00a0;<br/>: both-dsum= ( n m --\u00a0? )   [ dsum= ] [ swap dsum= ] 2bi and\u00a0;<br/>: amicable?  ( n m --\u00a0? )   [ both-dsum= ] [ = not ] 2bi and\u00a0;<br/>: drange     ( -- seq )     2 20000 [a,b)\u00a0;<br/>: dsums      ( -- seq )     drange [ dsum ] map\u00a0;<br/>: is-am?-seq ( -- seq )     dsums drange [ amicable? ] 2map\u00a0;<br/>: am-nums    ( -- seq )     t is-am?-seq indices\u00a0;<br/>: am-nums-c  ( -- seq )     am-nums [ 2 + ] map\u00a0;<br/>: am-pairs   ( -- seq )     am-nums-c 2 group\u00a0;<br/>: print-am   ( -- )         am-pairs [ &gt;array . ] each\u00a0;<br/>\u00a0<br/>print-am<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>Perfect!!           6\nPerfect!!          28\nAmicable!         220         284\nPerfect!!         496\nAmicable!        1184        1210\nAmicable!        2620        2924\nAmicable!        5020        5564\nAmicable!        6232        6368\nPerfect!!        8128\nAmicable!       10744       10856\nAmicable!       12285       14595\nAmicable!       17296       18416\n</pre>"}, {"lang": "FreeBASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FreeBASIC v1.05.0 win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> SumProperDivisors<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> number &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> number \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> number <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> sum += i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n, f<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sum<span class=\"br0\">(</span><span class=\"nu0\">19999</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19999</span><br/>  sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = SumProperDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The pairs of amicable numbers below 20,000 are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19998</span><br/>  <span class=\"co1\">' f = SumProperDivisors(n)</span><br/>  f = sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> f &lt;= n OrElse f &lt; <span class=\"nu0\">1</span> OrElse f &gt; <span class=\"nu0\">19999</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span> <br/>  <span class=\"kw1\">If</span> f = sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span> AndAlso n = sum<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#####\"</span>; n;  <br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" and \"</span>; <span class=\"kw1\">Using</span> <span class=\"st0\">\"#####\"</span>; sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit the program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span><br/>\u00a0</pre>"}, {"lang": "Futhark", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun divisors(n: int): []int =<br/>  filter (fn x =&gt; n%x == 0) (map (1+) (iota (n/2)))<br/>\u00a0<br/>fun amicable((n: int, nd: int), (m: int, md: int)): bool =<br/>  n &lt; m &amp;&amp; nd == m &amp;&amp; md == n<br/>\u00a0<br/>fun getPair (divs: [upper](int, int)) (flat_i: int): ((int,int), (int,int)) =<br/>  let i = flat_i / upper<br/>  let j = flat_i\u00a0% upper<br/>  in unsafe (divs[i], divs[j])<br/>\u00a0<br/>fun main(upper: int): [][2]int =<br/>  let range = map (1+) (iota upper)<br/>  let divs = zip range (map (fn n =&gt; reduce (+) 0 (divisors n)) range)<br/>  let amicable = filter amicable (map (getPair divs) (iota (upper*upper)))<br/>  in map (fn (np,mp) =&gt; [#1 np, #1 mp]) amicable<br/>\u00a0</pre>"}, {"lang": "GFA Basic", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>OPENW 1<br/>CLEARW 1<br/>'<br/>DIM f%(20001)\u00a0! sum of proper factors for each n<br/>FOR i%=1 TO 20000<br/>  f%(i%)<a class=\"__cf_email__\" data-cfemail=\"754835060018\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_proper_divisors(i%)<br/>NEXT i%<br/>' look for pairs<br/>FOR i%=1 TO 20000<br/>  FOR j%=i%+1 TO 20000<br/>    IF f%(i%)=j% AND i%=f%(j%)<br/>      PRINT \"Amicable pair \";i%;\" \";j%<br/>    ENDIF<br/>  NEXT j%<br/>NEXT i%<br/>'<br/>PRINT<br/>PRINT \"-- found all amicable pairs\"<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' Compute the sum of proper divisors of given number<br/>'<br/>FUNCTION sum_proper_divisors(n%)<br/>  LOCAL i%,sum%,root%<br/>  '<br/>  IF n%&gt;1\u00a0! n% must be 2 or larger<br/>    sum%=1\u00a0! start with 1<br/>    root%=SQR(n%)\u00a0! note that root% is an integer<br/>    ' check possible factors, up to sqrt<br/>    FOR i%=2 TO root%<br/>      IF n% MOD i%=0<br/>        sum%=sum%+i%\u00a0! i% is a factor<br/>        IF i%*i%&lt;&gt;n%\u00a0! check i% is not actual square root of n%<br/>          sum%=sum%+n%/i%\u00a0! so n%/i% will also be a factor<br/>        ENDIF<br/>      ENDIF<br/>    NEXT i%<br/>  ENDIF<br/>  RETURN sum%<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"math\"</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/><span class=\"kw1\">var</span> <span class=\"nu2\">i</span> <span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> a <span class=\"sy1\">[</span><span class=\"nu0\">200001</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>a<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy2\">=</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy2\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span>&lt;<span class=\"sy2\">=</span><span class=\"nu0\">20000</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span><span class=\"sy2\">++</span><span class=\"sy1\">{</span><br/>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy2\">=</span>pfac_sum<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The amicable pairs are:\"</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy2\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span>&lt;<span class=\"sy2\">=</span><span class=\"nu0\">20000</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span><span class=\"sy2\">++</span><span class=\"sy1\">{</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">==</span>a<span class=\"sy1\">[</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]])</span>&amp;&amp;<span class=\"sy1\">(</span><span class=\"nu2\">i</span>&lt;a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]){</span><br/>  fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d ,\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> pfac_sum<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> p<span class=\"sy1\">,</span>sum<span class=\"sy2\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> p<span class=\"sy2\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>p&lt;<span class=\"sy2\">=</span><span class=\"nu2\">i</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span>p<span class=\"sy2\">++</span><span class=\"sy1\">{</span><br/>\tx <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\ty <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>\t  <span class=\"kw1\">if</span> math<span class=\"sy3\">.</span>Mod<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">)</span><span class=\"sy3\">==</span><span class=\"nu0\">0</span><span class=\"sy1\">{</span><br/>\t   sum<span class=\"sy2\">=</span> sum<span class=\"sy3\">+</span>p<br/>\t  <span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\">divisors <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>divisors n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>`<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> range <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20000</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>      divs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> range <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> divisors<span class=\"br0\">)</span> range<br/>      pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> nd<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> divs<span class=\"sy0\">,</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> md<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> divs<span class=\"sy0\">,</span><br/>               n <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">,</span> nd <span class=\"sy0\">==</span> m<span class=\"sy0\">,</span> md <span class=\"sy0\">==</span> n<span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> pairs</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">factors=: [: /:<a class=\"__cf_email__\" data-cfemail=\"f28cb2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, */&amp;&gt;@{@<span class=\"sy0\">((</span>^ <a class=\"__cf_email__\" data-cfemail=\"b5dc9bf5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:<span class=\"sy0\">)</span>&amp;.&gt;/<span class=\"sy0\">)</span>@q:~&amp;<span class=\"nu0\">__</span><br/>properDivisors=: factors -. -.&amp;<span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.Function</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.Collectors</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.LongStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> AmicablePairs <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">20</span>_000<span class=\"sy0\">;</span><br/>\u00a0<br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>, Long<span class=\"sy0\">&gt;</span> map <span class=\"sy0\">=</span> LongStream.<span class=\"me1\">rangeClosed</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, limit<span class=\"br0\">)</span><br/>                .<span class=\"me1\">parallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">boxed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">collect</span><span class=\"br0\">(</span>Collectors.<span class=\"me1\">toMap</span><span class=\"br0\">(</span>Function.<span class=\"me1\">identity</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, AmicablePairs<span class=\"sy0\">::</span>properDivsSum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        LongStream.<span class=\"me1\">rangeClosed</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, limit<span class=\"br0\">)</span><br/>                .<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">long</span> m <span class=\"sy0\">=</span> map.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">&amp;&amp;</span> m <span class=\"sy0\">&lt;=</span> limit <span class=\"sy0\">&amp;&amp;</span> map.<span class=\"me1\">get</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>                        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%n\"</span>, n, m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a> properDivsSum<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> LongStream.<span class=\"me1\">rangeClosed</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 61, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// Proper divisors</span><br/>    <span class=\"kw1\">function</span> properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> rRoot <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                intRoot <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>rRoot<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                lows <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> intRoot<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> x<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> lows.<span class=\"me1\">concat</span><span class=\"br0\">(</span>lows.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> n <span class=\"sy0\">/</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rRoot <span class=\"sy0\">===</span> intRoot<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// [m..n]</span><br/>    <span class=\"kw1\">function</span> range<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            i <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Filter an array of proper divisor sums,</span><br/>    <span class=\"co1\">// reading the array index as a function of N (N-1)</span><br/>    <span class=\"co1\">// and the sum of proper divisors as a potential M</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> pairs <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> max<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> properDivisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> d<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> lst<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> lst<span class=\"br0\">[</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> n <span class=\"sy0\">?</span> a.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// [[a]] -&gt; bool -&gt; s -&gt; s</span><br/>    <span class=\"kw1\">function</span> wikiTable<span class=\"br0\">(</span>lstRows<span class=\"sy0\">,</span> blnHeaderRow<span class=\"sy0\">,</span> strStyle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'{| class=\"wikitable\" '</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>            strStyle <span class=\"sy0\">?</span> <span class=\"st0\">'style=\"'</span> <span class=\"sy0\">+</span> strStyle <span class=\"sy0\">+</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">+</span> lstRows.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRow<span class=\"sy0\">,</span> iRow<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> strDelim <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>blnHeaderRow <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>iRow<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'!'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|-<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> lstRow.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">typeof</span> v <span class=\"sy0\">===</span> <span class=\"st0\">'undefined'</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> v<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|}'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> wikiTable<span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'N'</span><span class=\"sy0\">,</span> <span class=\"st0\">'M'</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">'text-align:center'</span><br/>    <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 26, "block": "<pre class=\"text highlighted_source\"># unordered<br/>def proper_divisors:<br/>  . as $n<br/>  | if $n &gt; 1 then 1,<br/>      (sqrt|floor as $s<br/>      | range(2; $s+1) as $i<br/>      | if ($n\u00a0% $i) == 0 then $i,<br/>           (if $i * $i == $n then empty else ($n / $i) end)<br/>\telse empty<br/>\tend)<br/>    else empty<br/>    end;<br/>\u00a0<br/>def addup(stream): reduce stream as $i (0; . + $i);<br/>\u00a0<br/>def task(n):<br/>  (reduce range(0; n+1) as $n<br/>    ( [];  . + [$n | addup(proper_divisors)] )) as $listing<br/>  | range(1;n+1) as $j<br/>  | range(1;$j) as $k<br/>  | if $listing[$j] == $k and $listing[$k] == $j<br/>    then \"\\($k) and \\($j) are amicable\"<br/>    else empty<br/>    end\u00a0;<br/>\u00a0<br/>task(20000)</pre>"}, {"lang": "Julia", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function pcontrib(p::Int64, a::Int64)<br/>    n = one(p)<br/>    pcon = one(p)<br/>    for i in 1:a<br/>        n *= p<br/>        pcon += n<br/>    end<br/>    return pcon<br/>end<br/>\u00a0<br/>function divisorsum(n::Int64)<br/>    dsum = one(n)<br/>    for (p, a) in factor(n)<br/>        dsum *= pcontrib(p, a)<br/>    end<br/>    dsum -= n<br/>end<br/>\u00a0</pre>"}, {"lang": "K", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  propdivs:{1+&amp;0=x!'1+!x%2}<br/>  (8,2)#<a class=\"__cf_email__\" data-cfemail=\"81f7c1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;{(x=+/propdivs[a])&amp;~x=a:+/propdivs[x]}' v:1+!20000<br/>(220 284<br/> 1184 1210<br/> 2620 2924<br/> 5020 5564<br/> 6232 6368<br/> 10744 10856<br/> 12285 14595<br/> 17296 18416)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun sumProperDivisors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">{</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> it<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">20000</span>, <span class=\"br0\">{</span> sumProperDivisors<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The pairs of amicable numbers below 20,000 are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>n in <span class=\"nu0\">2</span>..<span class=\"nu0\">19998</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> sum<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">&amp;&amp;</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20000</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">==</span> sum<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> + <span class=\"st0\">\" and \"</span> + m.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> sumDivs <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> d<br/>            sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> n <span class=\"sy0\">/</span> d<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">20000</span> <span class=\"kw1\">do</span><br/>    m <span class=\"sy0\">=</span> sumDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> m <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> sumDivs<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>with(NumberTheory):<br/>pairs:=[];<br/>for i from 1 to 20000 do<br/>\tfor j from i+1 to 20000 do<br/>\t\tsum1:=SumOfDivisors(j)-j;<br/>\t\tsum2:=SumOfDivisors(i)-i;<br/>\t\tif sum1=i and sum2=j and i&lt;&gt;j then<br/>\t\t\tpairs:=[op(pairs),[i,j]];<br/>\t\t\tprintf(\"%a\", pairs);<br/>\t\tend if;<br/>\tend do;<br/>end do;<br/>pairs;<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">amicableQ[n_]\u00a0:=<br/> Module[{sum = Total[<a class=\"__cf_email__\" data-cfemail=\"b3fedcc0c7f3f7dac5dac0dcc1c0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@n]},<br/>  sum\u00a0!= n &amp;&amp; n == Total[<a class=\"__cf_email__\" data-cfemail=\"d19cbea2a59195b8a7b8a2bea3a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@sum]]<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"7d3a0f14193d2d1c0f091409141213\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[Cases[Range[4, 20000], _?(<a class=\"__cf_email__\" data-cfemail=\"5f3e32363c3e3d333a0e1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># &amp;)], 2]</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>from math import sqrt<br/>\u00a0<br/>const N = 524_000_000.int32<br/>\u00a0<br/>proc sumProperDivisors(someNum: int32, chk4less: bool): int32 =<br/>    result = 1<br/>    let maxPD = sqrt(someNum.float).int32<br/>    let offset = someNum mod 2<br/>    for divNum in countup(2 + offset, maxPD, 1 + offset):<br/>        if someNum mod divNum == 0:<br/>            result += divNum + someNum div divNum<br/>            if chk4less and result &gt;= someNum:<br/>                return 0<br/>\u00a0<br/>for n in countdown(N, 2):<br/>    let m = sumProperDivisors(n, true)<br/>    if m\u00a0!= 0 and n == sumProperDivisors(m, false):<br/>        echo $n, \" \", $m<br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 40, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> AmicablePairs;<br/><span class=\"kw1\">IMPORT</span> <br/>  Out;<br/><span class=\"kw1\">CONST</span><br/>  max <span class=\"sy0\">=</span> <span class=\"nu0\">20000</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>  pd<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> max <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ProperDivisorsSum<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>   i<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> sum<br/><span class=\"kw1\">END</span> ProperDivisorsSum;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> max <span class=\"kw1\">DO</span><br/>    pd<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ProperDivisorsSum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> max <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> max <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>pd<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>pd<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>         Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">'['</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>      <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span> <br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> AmicablePairs.<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 14, "block": "<pre class=\"text highlighted_source\">import: mapping<br/>\u00a0<br/>Integer method: properDivs -- []<br/>   #[ self swap mod 0 == ] self 2 / seq filter\u00a0;<br/>\u00a0<br/>: amicables<br/>| i j |<br/>   Array new<br/>   20000 loop: i [<br/>      i properDivs sum dup -&gt;j i &lt;= if continue then<br/>      j properDivs sum i &lt;&gt; if continue then<br/>      [ i, j ] over add<br/>      ]<br/>;</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20000</span><span class=\"sy0\">,</span>my<span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"kw1\">sigma</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>y<span class=\"sy0\">&gt;</span>x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">==</span> <span class=\"kw1\">sigma</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">-</span>y<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>x<span class=\"st0\">\" \"</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre>Chasing Chains of Sums of Factors of Numbers.\nPerfect!! 6,\nPerfect!! 28,\nAmicable! 220,284,\nPerfect!! 496,\nAmicable! 1184,1210,\nAmicable! 2620,2924,\nAmicable! 5020,5564,\nAmicable! 6232,6368,\nPerfect!! 8128,\nAmicable! 10744,10856,\nAmicable! 12285,14595,\nSociable: 12496,14288,15472,14536,14264,\nSociable: 14316,19116,31704,47616,83328,177792,295488,629072,589786,294896,358336,418904,366556,274924,275444,243760,376736,381028,285778,152990,122410,97946,48976,45946,22976,22744,19916,17716,\nAmicable! 17296,18416,\n</pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/divisor_sum/</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> divisor_sum<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>  say <span class=\"st0\">\"$x $y\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> divisor_sum<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> propdivsum <span class=\"br0\">(</span>\\<span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@l</span> <span class=\"sy0\">=</span> <span class=\"kw1\">x</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> gather <span class=\"kw1\">for</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">.</span><span class=\"kw3\">floor</span> <span class=\"sy0\">-&gt;</span> \\d <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> \\y <span class=\"sy0\">=</span> <span class=\"kw1\">x</span> <span class=\"kw1\">div</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> y <span class=\"sy0\">*</span> d <span class=\"sy0\">==</span> <span class=\"kw1\">x</span> <span class=\"br0\">{</span> take d<span class=\"sy0\">;</span> take y <span class=\"kw1\">unless</span> y <span class=\"sy0\">==</span> d <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> gather <span class=\"re0\">@l</span><span class=\"sy0\">.</span><span class=\"me1\">deepmap</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">take</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20000</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> propdivsum<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$i $j\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$i</span> <span class=\"kw1\">and</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> propdivsum<span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">integer n<br/>for m=1 to 20000 do<br/>    n = sum(factors(m,-1))<br/>    if m&lt;n and m=sum(factors(n,-1)) then\u00a0?{m,n} end if<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(de accud (Var Key)<br/>   (if (assoc Key (val Var))<br/>      (con @ (inc (cdr @)))<br/>      (push Var (cons Key 1)) )<br/>   Key )<br/>(de factor-sum (N)<br/>   (if (=1 N)<br/>      0<br/>      (let<br/>         (R NIL<br/>            D 2<br/>            L (1 2 2 . (4 2 4 2 4 6 2 6 .))<br/>            M (sqrt N)<br/>            N1 N<br/>            S 1 )<br/>         (while (&gt;= M D)<br/>            (if (=0 (% N1 D))<br/>               (setq M<br/>                  (sqrt (setq N1 (/ N1 (accud 'R D)))) )<br/>               (inc 'D (pop 'L)) ) )<br/>         (accud 'R N1)<br/>         (for I R<br/>            (one D)<br/>            (one M)<br/>            (for J (cdr I)<br/>               (setq M (* M (car I)))<br/>               (inc 'D M) )<br/>               (setq S (* S D)) )<br/>         (- S N) ) ) )<br/>(bench<br/>   (for I 20000<br/>      (let X (factor-sum I)<br/>         (and<br/>            (&lt; I X)<br/>            (= I (factor-sum X))<br/>            (println I X) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 60, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref<span class=\"sy0\">;</span><br/> ami<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> p9a<span class=\"sy0\">=</span><span class=\"kw1\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>p9a<span class=\"sy0\">,</span>p9b<span class=\"sy0\">,</span>p9c<span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'(9)9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sumpd<span class=\"br0\">(</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pd<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> npd     <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   sumpd<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> p9b<span class=\"sy0\">=</span><span class=\"kw1\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'sum(pd) computed in'</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>p9b<span class=\"sy0\">-</span>p9a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"st0\">' seconds elapsed'</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"kw1\">col</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> y<span class=\"sy0\">=</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> y<span class=\"sy0\">=</span>sumpd<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/>        x<span class=\"sy0\">=</span>sumpd<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">' found after '</span><span class=\"sy0\">,</span>elapsed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">' seconds'</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>elapsed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">' seconds total search time'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> proper_divisors<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>pd<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>npd<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>d<span class=\"sy0\">,</span>delta<span class=\"br0\">)</span>       <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> npd<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span>  <span class=\"coMULTI\">/* odd number  */</span><br/>     delta<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span>                <span class=\"coMULTI\">/* even number */</span><br/>     delta<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">By</span> delta<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       npd<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       pd<span class=\"br0\">(</span>npd<span class=\"br0\">)</span><span class=\"sy0\">=</span>d<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">sum</span><span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>pd<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>npd<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">sum</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> npd<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">sum</span><span class=\"sy0\">+=</span>pd<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> elapsed<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> p9c<span class=\"sy0\">=</span><span class=\"kw1\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p9c<span class=\"sy0\">-</span>p9b<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 31, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>ProperDivisorSum <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$SqrtN</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Divisor1</span> <span class=\"kw3\">in</span> <span class=\"nu0\">2</span>..<span class=\"re0\">$SqrtN</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$Divisor2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$N</span> <span class=\"sy0\">/</span> <span class=\"re0\">$Divisor1</span><br/>            <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$Divisor2</span> <span class=\"kw4\">-is</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Divisor1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Divisor2</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$SqrtN</span> <span class=\"kw4\">-is</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Sum</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$SqrtN</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Sum</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>AmicablePairs <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"nu0\">300</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Sum</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>ProperDivisorSum <span class=\"re0\">$X</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$Sum</span> <span class=\"kw4\">-gt</span> <span class=\"re0\">$X</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$X</span> <span class=\"kw4\">-eq</span> <span class=\"br0\">(</span> Get<span class=\"sy0\">-</span>ProperDivisorSum <span class=\"re0\">$Sum</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"$X, $Sum\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>Get<span class=\"sy0\">-</span>AmicablePairs <span class=\"nu0\">20000</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 33, "block": "<pre class=\"prolog highlighted_source\">divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Divisor<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    UpperBound <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> UpperBound<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> D<span class=\"sy4\">,</span><br/>    <span class=\"br0\">(</span><br/>        Divisor <span class=\"sy6\">=</span> D<br/>    <span class=\"sy4\">;</span><br/>        LargerDivisor <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">/</span>D<span class=\"sy4\">,</span><br/>        LargerDivisor <span class=\"sy6\">=</span>\\<span class=\"sy6\">=</span> D<span class=\"sy4\">,</span><br/>        Divisor <span class=\"sy6\">=</span> LargerDivisor<br/>    <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>proper_divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    D <span class=\"sy6\">=</span>\\<span class=\"sy6\">=</span> N<span class=\"sy4\">.</span><br/>\u00a0<br/>assoc_num_divsSum_in_range<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"sy4\">,</span> Assoc<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span> Num<span class=\"sy3\">-</span>DivSum<span class=\"sy4\">,</span><br/>             <span class=\"br0\">(</span> between<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"sy4\">,</span> Num<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>               aggregate_all<span class=\"br0\">(</span> sum<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                              proper_divisor<span class=\"br0\">(</span>Num<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                              DivSum <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>             Pairs <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    list_to_assoc<span class=\"br0\">(</span>Pairs<span class=\"sy4\">,</span> Assoc<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>get_amicable_pair<span class=\"br0\">(</span>Assoc<span class=\"sy4\">,</span> M<span class=\"sy3\">-</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    gen_assoc<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> Assoc<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    M <span class=\"sy6\">&lt;</span> N<span class=\"sy4\">,</span><br/>    get_assoc<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Assoc<span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>amicable_pairs_under_20000<span class=\"br0\">(</span>Pairs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    assoc_num_divsSum_in_range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">20000</span><span class=\"sy4\">,</span> Assoc<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>P<span class=\"sy4\">,</span> get_amicable_pair<span class=\"br0\">(</span>Assoc<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span> Pairs<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 36, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i SumProperDivisors<span class=\"br0\">(</span>Number<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Protected</span> i, sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> Number <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      sum <span class=\"sy0\">+</span> i<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n, f<br/><span class=\"kw1\">Define</span> <span class=\"kw1\">Dim</span> sum<span class=\"br0\">(</span><span class=\"nu0\">19999</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19999</span><br/>    sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> SumProperDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The pairs of amicable numbers below 20,000 are\u00a0: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19998</span><br/>    f <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> f <span class=\"sy0\">&lt;=</span> n <span class=\"kw1\">Or</span> f <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> f <span class=\"sy0\">&gt;</span> <span class=\"nu0\">19999</span>\u00a0: <span class=\"kw1\">Continue</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> f <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">And</span> n <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> proper_divisors <span class=\"kw1\">import</span> proper_divs<br/>\u00a0<br/><span class=\"kw1\">def</span> amicable<span class=\"br0\">(</span>rangemax<span class=\"sy0\">=</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span>:<br/>    n2divsum <span class=\"sy0\">=</span> <span class=\"br0\">{</span>n: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>proper_divs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> rangemax + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> num<span class=\"sy0\">,</span> divsum <span class=\"kw1\">in</span> n2divsum.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> num <span class=\"sy0\">&lt;</span> divsum <span class=\"kw1\">and</span> divsum <span class=\"sy0\">&lt;=</span> rangemax <span class=\"kw1\">and</span> n2divsum<span class=\"br0\">[</span>divsum<span class=\"br0\">]</span> <span class=\"sy0\">==</span> num:<br/>            <span class=\"kw1\">yield</span> num<span class=\"sy0\">,</span> divsum<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> num<span class=\"sy0\">,</span> divsum <span class=\"kw1\">in</span> amicable<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Amicable pair:\u00a0%i and\u00a0%i With proper divisors:<span class=\"es0\">\\n</span>   \u00a0%r<span class=\"es0\">\\n</span>   \u00a0%r'</span><br/>             \u00a0% <span class=\"br0\">(</span>num<span class=\"sy0\">,</span> divsum<span class=\"sy0\">,</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>proper_divs<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>proper_divs<span class=\"br0\">(</span>divsum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>divisors &lt;- function (n) {<br/>  Filter( function (m) 0 == n\u00a0%% m, 1:(n/2) )<br/>}<br/>\u00a0<br/>table = sapply(1:19999, function (n) sum(divisors(n)) )<br/>\u00a0<br/>for (n in 1:19999) {<br/>  m = table[n]<br/>  if ((m &gt; n) &amp;&amp; (m &lt; 20000) &amp;&amp; (n == table[m]))<br/>    cat(n, \" \", m, \"\\n\")<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require \"proper-divisors.rkt\")<br/>(define SCOPE 20000)<br/>\u00a0<br/>(define P<br/>  (let ((P-v (vector)))<br/>    (\u03bb (n)<br/>      (set! P-v (fold-divisors P-v n 0 +))<br/>      (vector-ref P-v n))))<br/>\u00a0<br/>;; returns #f if not an amicable number, amicable pairing otherwise<br/>(define (amicable? n)<br/>  (define m (P n))<br/>  (define m-sod (P m))<br/>  (and (= m-sod n)<br/>       (&lt; m n)\u00a0; each pair exactly once, also eliminates perfect numbers<br/>       m))<br/>\u00a0<br/>(void (amicable? SCOPE))\u00a0; prime the memoisation<br/>\u00a0<br/>(for* ((n (in-range 1 (add1 SCOPE)))<br/>       (m (in-value (amicable? n)))<br/>       #:when m)<br/>  (printf #&lt;&lt;EOS<br/>amicable pair: ~a, ~a<br/>  ~a: divisors: ~a<br/>  ~a: divisors: ~a<br/>\u00a0<br/>\u00a0<br/>EOS<br/>          n m n (proper-divisors n)  m (proper-divisors m)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 39, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/><span class=\"kw1\">Do</span> x=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20000</span><br/>  pd=proper_divisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  sumpd<span class=\"sy0\">.</span>x=sum<span class=\"br0\">(</span>pd<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'sum(pd) computed in'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds'</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/><span class=\"kw1\">Do</span> x=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20000</span><br/>  <span class=\"coMULTI\">/* If x//1000=0 Then Say x time() */</span><br/>  <span class=\"kw1\">Do</span> y=x+<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20000</span><br/>    <span class=\"kw1\">If</span> y=sumpd<span class=\"sy0\">.</span>x <span class=\"sy0\">&amp;</span>,<br/>       x=sumpd<span class=\"sy0\">.</span>y <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> x y <span class=\"st0\">'found after'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds total search time'</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>proper_divisors: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n<br/>Pd=<span class=\"st0\">''</span><br/><span class=\"kw1\">If</span> n=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">''</span><br/><span class=\"kw1\">If</span> n<span class=\"sy0\">//</span><span class=\"nu0\">2</span>=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span>  <span class=\"coMULTI\">/* odd number  */</span><br/>  delta=<span class=\"nu0\">2</span><br/><span class=\"kw3\">Else</span>            <span class=\"coMULTI\">/* even number */</span><br/>  delta=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> d=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n%2 <span class=\"kw2\">By</span> delta<br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">//</span>d=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    pd=pd d<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>pd<span class=\"br0\">)</span><br/>\u00a0<br/>sum: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> list<br/>sum=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>  sum=sum+<span class=\"kw6\">word</span><span class=\"br0\">(</span>list,i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> sum</pre>"}, {"lang": "Ring", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>size = 18500<br/>for n = 1 to size<br/>    m = amicable(n)<br/>    if m&gt;n and amicable(m)=n<br/>       see \"\" + n + \" and \" + m + nl ok<br/>next<br/>see \"OK\" + nl<br/>\u00a0<br/>func amicable nr<br/>     sum = 1<br/>     for d = 2 to sqrt(nr)<br/>         if nr\u00a0% d = 0 <br/>            sum = sum + d<br/>            sum = sum + nr / d ok<br/>     next<br/>     return sum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">h = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> h<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = n.<span class=\"me1\">proper_divisors</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>h.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> h<span class=\"br0\">[</span>v<span class=\"br0\">]</span> == k <span class=\"sy0\">&amp;&amp;</span> k <span class=\"sy0\">&lt;</span> v<span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>key,val<span class=\"sy0\">|</span>  <span class=\"co1\"># k&lt;v filters out doubles and perfects</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{key} and #{val}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">size = 18500<br/>for n = 1 to size<br/>    m = amicable(n)<br/>    if m &gt; n and amicable(m) = n then print  n\u00a0; \" and \"\u00a0; m<br/>next<br/>\u00a0<br/>function amicable(nr)<br/>     amicable = 1<br/>     for d = 2 to sqr(nr)<br/>         if nr mod d = 0 then amicable = amicable + d + nr / d<br/>     next<br/> end function</pre>"}, {"lang": "Rust", "loc": 15, "block": "<pre class=\"text highlighted_source\">fn sum_of_divisors(val: u32) -&gt; u32 {<br/>    (1..val/2+1).filter(|n| val\u00a0% n == 0)<br/>                .fold(0, |sum, n| sum + n)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let iter = (1..20_000).map(|i| (i, sum_of_divisors(i)))<br/>                          .filter(|&amp;(i, div_sum)| i &gt; div_sum);<br/>\u00a0<br/>    for (i, sum1) in iter {<br/>        if sum_of_divisors(sum1) == i {<br/>           println!(\"{} {}\", i, sum1);<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> properDivisors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n/<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> divisorsSum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">20000</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> i -<span class=\"sy0\">&gt;</span> properDivisors<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span>.<span class=\"me1\">toMap</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> divisorsSum.<span class=\"me1\">filter</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v.<span class=\"sy0\">_</span>1 <span class=\"sy0\">&lt;</span> v.<span class=\"sy0\">_</span>2 <span class=\"sy0\">&amp;&amp;</span> divisorsSum.<span class=\"me1\">get</span><span class=\"br0\">(</span>v.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> Some<span class=\"br0\">(</span>v.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> result mkString <span class=\"st0\">\", \"</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 51, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme inexact<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>only <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span> fold<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; return a list of the proper-divisors of n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>proper<span class=\"sy0\">-</span>divisors n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>root <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>divisors <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>i <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i root<span class=\"br0\">)</span><br/>        divisors<br/>        <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>square i<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i divisors<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> i <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span> divisors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                divisors<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>proper<span class=\"sy0\">-</span>divisors n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span>fold <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>proper<span class=\"sy0\">-</span>divisors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span> <span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; hold sums of proper divisors in a cache, to avoid recalculating</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>cache<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"sy0\">*</span>cache<span class=\"sy0\">*</span> i <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>proper<span class=\"sy0\">-</span>divisors i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>iota <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>amicable<span class=\"sy0\">-</span><span class=\"kw1\">pair?</span> i j<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>cache<span class=\"sy0\">*</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">=</span> j <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>cache<span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; double loop to *max-n*, displaying all amicable pairs</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop<span class=\"sy0\">-</span>i <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> i <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop<span class=\"sy0\">-</span>j <span class=\"br0\">(</span><span class=\"br0\">(</span>j i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> j <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>when <span class=\"br0\">(</span>amicable<span class=\"sy0\">-</span><span class=\"kw1\">pair?</span> i j<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"Amicable pair: \"</span><br/>                                  <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i<span class=\"br0\">)</span><br/>                                  <span class=\"st0\">\" \"</span><br/>                                  <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>j <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>i <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func propdivsum<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> .. <span class=\"me1\">x</span>.<span class=\"me1\">isqrt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d.<span class=\"me1\">divides</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                take<span class=\"br0\">(</span>d, x<span class=\"sy0\">/</span>d<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var j = propdivsum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"#{i} #{j}\"</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span>i <span class=\"sy0\">&amp;&amp;</span> i==propdivsum<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 54, "block": "<pre class=\"text highlighted_source\">import func Darwin.sqrt<br/>\u00a0<br/>func sqrt(x:Int) -&gt; Int { return Int(sqrt(Double(x))) }<br/>\u00a0<br/>func properDivs(n: Int) -&gt; [Int] {<br/>\u00a0<br/>    if n == 1 { return [] }<br/>\u00a0<br/>    var result = [Int]()<br/>\u00a0<br/>    for div in filter (1...sqrt(n), { n\u00a0% $0 == 0 }) {<br/>\u00a0<br/>        result.append(div)<br/>\u00a0<br/>        if n/div\u00a0!= div &amp;&amp; n/div\u00a0!= n { result.append(n/div) }<br/>    }<br/>\u00a0<br/>    return sorted(result)<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0<br/>func sumDivs(n:Int) -&gt; Int {<br/>\u00a0<br/>    struct Cache { static var sum = [Int:Int]() }<br/>\u00a0<br/>    if let sum = Cache.sum[n] { return sum }<br/>\u00a0<br/>    let sum = properDivs(n).reduce(0) { $0 + $1 }<br/>\u00a0<br/>    Cache.sum[n] = sum<br/>\u00a0<br/>    return sum<br/>}<br/>\u00a0<br/>func amicable(n:Int, m:Int) -&gt; Bool {<br/>\u00a0<br/>    if n == m { return false }<br/>\u00a0<br/>    if sumDivs(n)\u00a0!= m || sumDivs(m)\u00a0!= n { return false }<br/>\u00a0<br/>    return true<br/>}<br/>\u00a0<br/>var pairs = [(Int, Int)]()<br/>\u00a0<br/>for n in 1 ..&lt; 20_000 {<br/>    for m in n+1 ... 20_000 {<br/>        if amicable(n, m) {<br/>            pairs.append(n, m)<br/>            println(\"\\(n, m)\")<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Tcl", "loc": 41, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> properDivisors <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">set</span> divs <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> divs <span class=\"re0\">$i</span><br/>\t    <span class=\"kw2\">incr</span> sum <span class=\"re0\">$i</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> divs <span class=\"br0\">[</span><span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">incr</span> sum <span class=\"re0\">$d</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$sum</span> <span class=\"re0\">$divs</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> amicablePairs <span class=\"br0\">{</span>limit<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> sums <span class=\"br0\">[</span><span class=\"kw1\">set</span> divs <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"br0\">[</span>properDivisors <span class=\"re0\">$n</span><span class=\"br0\">]</span> sum d<br/>\t<span class=\"kw2\">lappend</span> sums <span class=\"re0\">$sum</span><br/>\t<span class=\"kw2\">lappend</span> divs <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer <span class=\"re0\">$d</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> nsum <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$sums</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> m <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$m</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>==<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$sums</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$m</span>==<span class=\"re0\">$nsum</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"re0\">$m</span> <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$divs</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$divs</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>m n md nd<span class=\"br0\">}</span> <span class=\"br0\">[</span>amicablePairs <span class=\"nu0\">20000</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$m and $n are an amicable pair with these proper divisors\"</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>$m\u00a0: $md\"</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>$n\u00a0: $nd\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 49, "block": "<pre class=\"text highlighted_source\">Input \"Limit: \";l<br/>Print \"Amicable pairs &lt; \";l<br/>\u00a0<br/>For n = 1 To l<br/>  m = FUNC(_SumDivisors (n))-n<br/>  If m = 0 Then Continue               ' No division by zero, please<br/>  p = FUNC(_SumDivisors (m))-m<br/>  If (n=p) * (n&lt;m) Then Print n;\" and \";m<br/>Next<br/>\u00a0<br/>End<br/>\u00a0<br/>_LeastPower Param(2)<br/>  Local(1)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"7a193a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"701130\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Do While (<a class=\"__cf_email__\" data-cfemail=\"b5d7f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"741734\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0<br/>    <a class=\"__cf_email__\" data-cfemail=\"8cefcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"731033\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"e584a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"eb88ab\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>\u00a0<br/>\u00a0<br/>' Return the sum of the proper divisors of <a class=\"__cf_email__\" data-cfemail=\"244564\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>_SumDivisors Param(1)<br/>  Local(4)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"3b597b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"cbaa8b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  <a class=\"__cf_email__\" data-cfemail=\"0a694a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>\u00a0<br/>  ' Handle two specially<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"197d59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = FUNC(_LeastPower (2,<a class=\"__cf_email__\" data-cfemail=\"197b59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>  <a class=\"__cf_email__\" data-cfemail=\"3a597a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"4a290a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * (<a class=\"__cf_email__\" data-cfemail=\"8eeace\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1)<br/>  <a class=\"__cf_email__\" data-cfemail=\"2c4e6c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"ff9dbf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / (<a class=\"__cf_email__\" data-cfemail=\"caae8a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / 2)<br/>\u00a0<br/>  ' Handle odd factors<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"b7d2f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 3 Step 2 While (<a class=\"__cf_email__\" data-cfemail=\"80e5c0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"7d183d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) &lt; (<a class=\"__cf_email__\" data-cfemail=\"89ebc9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1)<br/>    <a class=\"__cf_email__\" data-cfemail=\"fe9abe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = FUNC(_LeastPower (<a class=\"__cf_email__\" data-cfemail=\"dcb99c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<a class=\"__cf_email__\" data-cfemail=\"c6a486\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>    <a class=\"__cf_email__\" data-cfemail=\"ee8dae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"cfac8f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * ((<a class=\"__cf_email__\" data-cfemail=\"2d496d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1) / (<a class=\"__cf_email__\" data-cfemail=\"4e2b0e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1))<br/>    <a class=\"__cf_email__\" data-cfemail=\"492b09\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"9efcde\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / (<a class=\"__cf_email__\" data-cfemail=\"036743\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"bdd8fd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>  Loop<br/>\u00a0<br/>  ' At this point, t must be one or prime<br/>\u00a0<br/>  If (<a class=\"__cf_email__\" data-cfemail=\"2a486a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 1) <a class=\"__cf_email__\" data-cfemail=\"771437\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"a2c1e2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * (<a class=\"__cf_email__\" data-cfemail=\"157755\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1)<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"9bf8db\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "UTFool", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00b7\u00b7\u00b7<br/>http://rosettacode.org/wiki/Amicable_pairs<br/>\u00b7\u00b7\u00b7<br/>\u25a0 AmicablePairs<br/>  \u00a7 static<br/>    \u25b6 main<br/>    \u2022 args\u2982 String[]<br/>      \u2200 n \u2208 1\u202620000<br/>        m\u2982 int: sumPropDivs n<br/>        if m &lt; n = sumPropDivs m<br/>           System.out.println \"\u2e28m\u2e29\u00a0; \u2e28n\u2e29\"<br/>\u00a0<br/>    \u25b6 sumPropDivs\u2982 int<br/>    \u2022 n\u2982 int<br/>      m\u2982 int: 1<br/>      \u2200 i \u2208 \u221an \u22ef&gt; 1<br/>        m +: n \\ i = 0\u00a0? i + (i = n / i\u00a0? 0\u00a0! n / i)\u00a0! 0<br/>      \u23ce m<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 38, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> AmicablePairs()<br/><span class=\"kw4\">Dim</span> a(2 <span class=\"kw3\">To</span> 20000) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, c <span class=\"kw4\">As</span> <span class=\"kw2\">New</span> Collection, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, t#<br/>    t = Timer<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(a) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(a)<br/>        <span class=\"co1\">'collect the sum of the proper divisors<br/></span>        <span class=\"co1\">'of each numbers between 2 and 20000<br/></span>        a(i) = S(i)<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"co1\">'Double Loops to test the amicable<br/></span>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(a) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(a)<br/>        <span class=\"kw3\">For</span> j = i + 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(a)<br/>            <span class=\"kw3\">If</span> i = a(j) <span class=\"kw3\">Then</span><br/>                <span class=\"kw3\">If</span> a(i) = j <span class=\"kw3\">Then</span><br/>                     <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>                     c.Add i &amp; <span class=\"st0\">\"\u00a0: \"</span> &amp; j, CStr(i * j)<br/>                     <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>                     <span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"co1\">'End. Return\u00a0:<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Execution Time\u00a0: \"</span> &amp; Timer - t &amp; <span class=\"st0\">\" seconds.\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Amicable pairs below 20 000 are\u00a0: \"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> c.Count<br/>        Debug.<span class=\"kw4\">Print</span> c.Item(i)<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> S(n <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"co1\">'returns the sum of the proper divisors of n<br/></span><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> n \\ 2<br/>        <span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> j = 0 <span class=\"kw3\">Then</span> S = j + S<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 36, "block": "<pre class=\"text highlighted_source\">start = Now<br/>Set nlookup = CreateObject(\"Scripting.Dictionary\")<br/>Set uniquepair = CreateObject(\"Scripting.Dictionary\")<br/>\u00a0<br/>For i = 1 To 20000<br/>\tsum = 0<br/>\tFor n = 1 To 20000<br/>\t\tIf n &lt; i Then<br/>\t\t\tIf i Mod n = 0 Then<br/>\t\t\t\tsum = sum + n<br/>\t\t\tEnd If<br/>\t\tEnd If<br/>\tNext<br/>\tnlookup.Add i,sum<br/>Next<br/>\u00a0<br/>For j = 1 To 20000<br/>\tsum = 0<br/>\tFor m = 1 To 20000<br/>\t\tIf m &lt; j Then<br/>\t\t\tIf j Mod m = 0 Then<br/>\t\t\t\tsum = sum + m<br/>\t\t\tEnd If<br/>\t\tEnd If<br/>\tNext <br/>\tIf nlookup.Exists(sum) And nlookup.Item(sum) = j And j &lt;&gt; sum _<br/>\t\tAnd uniquepair.Exists(sum) = False Then<br/>\t\t\tuniquepair.Add j,sum<br/>\tEnd If<br/>Next<br/>\u00a0<br/>For Each key In uniquepair.Keys<br/>\tWScript.Echo key &amp; \":\" &amp; uniquepair.Item(key)<br/>Next<br/>\u00a0<br/>WScript.Echo \"Execution Time: \" &amp; DateDiff(\"s\",Start,Now) &amp; \" seconds\"</pre>"}, {"lang": "Yabasic", "loc": 22, "block": "<pre class=\"text highlighted_source\">sub sumDivs(n)<br/>    local sum, d<br/>\u00a0<br/>    sum = 1<br/>\u00a0<br/>    for d = 2 to sqrt(n)<br/>        if not mod(n, d) then<br/>            sum = sum + d<br/>            sum = sum + n / d<br/>        end if<br/>    next<br/>    return sum<br/>end sub<br/>\u00a0<br/>for n = 2 to 20000<br/>    m = sumDivs(n)<br/>    if m &gt; n then<br/>        if sumDivs(m) = n print n, \"\\t\", m<br/>    end if<br/>next<br/>\u00a0<br/>print\u00a0: print peek(\"millisrunning\"), \" ms\"</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn properDivs(n){ [1.. (n + 1)/2 + 1].filter('wrap(x){ n%x==0 and n!=x }) }<br/>const N=20000;<br/>sums:=[1..N].pump(T(-1),fcn(n){ properDivs(n).sum(0) });<br/>[0..].zip(sums).filter('wrap([(n,s)]){ (n&lt;s&lt;=N) and sums[s]==n }).println();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 19, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> limit=<span class=\"nu0\">20000</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Amicable pairs &lt; \"</span>;limit<br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> limit<br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> num=n: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> m=num<br/><span class=\"nu0\">60</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> n=num <span class=\"kw4\">AND</span> n&lt;m <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> n;<span class=\"st0\">\" \"</span>;m<br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">90</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM sumprop</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">IF</span> num&lt;<span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> num=<span class=\"nu0\">0</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> sum=<span class=\"nu0\">1</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">LET</span> root=<span class=\"kw3\">SQR</span> num<br/><span class=\"nu0\">1040</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> root-.01<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">IF</span> num/i=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>num/i<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> sum=sum+i+num/i<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1070</span> <span class=\"kw1\">IF</span> num/root=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>num/root<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> sum=sum+root<br/><span class=\"nu0\">1080</span> <span class=\"kw1\">LET</span> num=sum<br/><span class=\"nu0\">1090</span> <span class=\"kw1\">RETURN</span></pre>"}]}