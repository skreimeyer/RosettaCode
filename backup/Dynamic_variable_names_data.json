{"task": "Dynamic_variable_names", "blocks": [{"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"sy0\">,</span> Dynamic<span class=\"sy0\">,</span> Variable Name   <br/><span class=\"re0\">%Dynamic%</span> <span class=\"sy0\">=</span> hello <br/><a href=\"http://www.autohotkey.com/docs/commands/ListVars.htm\"><span class=\"kw3\">ListVars</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"re0\">%dynamic%</span>  <span class=\"co1\">; says hello</span></pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">10 INPUT \"Enter a variable name\", v$<br/>20 KEYIN \"LET \"+v$+\"=42\"</pre>"}, {"lang": "Batch File", "loc": 14, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enableDelayedExpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p \"name=Enter a variable name: \"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p \"value=Enter a value: \"<br/><span class=\"co2\"><br/>::Create the variable and set its value</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">name</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"re3\">value</span><span class=\"sy0\">%</span>\"<br/><span class=\"co2\"><br/>::Display the value without delayed expansion</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">name</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"sy0\">%%</span><span class=\"re3\">name</span><span class=\"sy0\">%%</span><span class=\"sy0\">%</span><br/><span class=\"co2\"><br/>::Display the value using delayed expansion</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">name</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">name</span>%</span><span class=\"sy0\">!</span></pre>"}, {"lang": "BBC BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">      INPUT \"Enter a variable name: \" name$<br/>      INPUT \"Enter a numeric value: \" numeric$<br/>      dummy% = EVAL(\"FNassign(\"+name$+\",\"+numeric$+\")\")<br/>      PRINT \"Variable \" name$ \" now has the value \"; EVAL(name$)<br/>      END<br/>\u00a0<br/>      DEF FNassign(RETURN n, v)\u00a0: n = v\u00a0: = 0</pre>"}, {"lang": "Bracmat", "loc": 9, "block": "<pre class=\"text highlighted_source\">( put$\"Enter a variable name: \"<br/>&amp; get$:?name<br/>&amp;   whl<br/>  ' ( put$\"Enter a numeric value: \"<br/>    &amp; get$:?numeric:~#<br/>    )<br/>&amp;\u00a0!numeric:?!name<br/>&amp; put$(str$(\"Variable \"\u00a0!name \" now has the value \"\u00a0!!name \\n))<br/>);</pre>"}, {"lang": "C#", "loc": 17, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Dynamic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> varname <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//Let's pretend the user has entered \"foo\"</span><br/>        <span class=\"kw4\">dynamic</span> expando <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ExpandoObject<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> map <span class=\"sy0\">=</span> expando <span class=\"kw1\">as</span> IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">object</span><span class=\"sy0\">&gt;;</span><br/>        map<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>varname, <span class=\"st0\">\"Hello world!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>expando<span class=\"sy0\">.</span><span class=\"me1\">foo</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>eval `<span class=\"br0\">(</span><span class=\"kw1\">def</span> ~<span class=\"br0\">(</span>symbol <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">setq</span> var-<span class=\"kw1\">name</span> <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; reads a name into var-name</span><br/><span class=\"br0\">(</span><span class=\"kw1\">set</span> var-<span class=\"kw1\">name</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>        <span class=\"co1\">; assigns the value 1 to a variable named as entered by the user</span><br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 5, "block": "<pre class=\"text highlighted_source\">local\u00a0:var-name\u00a0!run-blob\u00a0!compile-string dup concat( \":\"\u00a0!prompt \"Enter a variable name: \" )<br/>local var-name 42<br/>\u00a0<br/>#Assuming the user types THISISWEIRD, otherwise this'll error<br/>!. THISISWEIRD</pre>"}, {"lang": "E", "loc": 27, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeNounExpr <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elang<span class=\"sy0\">:</span>evm.<span class=\"me1\">makeNounExpr</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> dynVarName<span class=\"br0\">(</span>name<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> variable <span class=\"sy0\">:=</span> makeNounExpr<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>    return e<span class=\"st0\">`{<br/>\u00a0<br/>        def a\u00a0:= 1<br/>        def b\u00a0:= 2<br/>        def c\u00a0:= 3<br/>\u00a0<br/>        {<br/>            def $variable\u00a0:= \"BOO!\"<br/>            [a, b, c]<br/>        }<br/>\u00a0<br/>    }`</span>.<span class=\"me1\">eval</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/safeScope\"><span class=\"kw6\">safeScope</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">?</span> dynVarName<span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [1, 2, 3]</span><br/>\u00a0<br/><span class=\"sy0\">?</span> dynVarName<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [1, \"BOO!\", 3]</span><br/>\u00a0<br/><span class=\"sy0\">?</span> dynVarName<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [1, 2, \"BOO!\"]</span></pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import system'dynamic.<br/>import extensions.<br/>\u00a0<br/>class TestClass<br/>{<br/>    object theVariables.<br/>\u00a0<br/>    constructor new<br/>    [<br/>        theVariables\u00a0:= DynamicStruct new.<br/>    ]<br/>\u00a0<br/>    eval<br/>    [<br/>        subject varRef\u00a0:= Signature new literal:(console write:\"Enter the variable name:\"; readLine).<br/>        theVariables~varRef set:42.<br/>\u00a0<br/>        var v\u00a0:= theVariables~varRef get.<br/>\u00a0<br/>        console printLine(varRef literal,\"=\",theVariables~varRef get); readChar.<br/>    ]<br/>}<br/>\u00a0<br/>program = TestClass new.</pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">intern</span> <span class=\"br0\">(</span>read-string <span class=\"st0\">\"Enter variable name: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">123</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 10, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> dynamic_variable_names <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">Variable_name</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span> <span class=\"st0\">\"Variable name? \"</span><span class=\"sy1\">,</span>\t<span class=\"st0\">\"~a\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Form</span> <span class=\"sy3\">=</span> runtime_evaluation:<span class=\"re3\">form_from_string</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">atom_to_list</span><span class=\"br0\">(</span><span class=\"re5\">Variable_name</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p has value ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Variable_name</span><span class=\"sy1\">,</span> runtime_evaluation:<span class=\"re3\">evaluate_form</span><span class=\"br0\">(</span><span class=\"re5\">Form</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Variable_name</span><span class=\"sy1\">,</span> <span class=\"nu0\">42</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>42 readln set<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 3, "block": "<pre class=\"text highlighted_source\">s\" VARIABLE \" pad swap move<br/>.\" Variable name: \" pad 9 + 80 accept<br/>pad swap 9 + evaluate</pre>"}, {"lang": "FreeBASIC", "loc": 58, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> DynamicVariable<br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> <span class=\"kw1\">name</span><br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> value<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> FindVariableIndex<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> DynamicVariable, v <span class=\"kw1\">as</span> <span class=\"kw1\">String</span>, nElements <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  v = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span><span class=\"kw1\">Trim</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nElements<br/>    <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">name</span> = v <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n, index<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> v<br/><span class=\"kw1\">Cls</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/> <span class=\"kw1\">Input</span> <span class=\"st0\">\"How many variables do you want to create (max 5) \"</span>; n<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> n &gt; <span class=\"nu0\">0</span> AndAlso n &lt; <span class=\"nu0\">6</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> DynamicVariable<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"OK, enter the variable names and their values, below\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>  <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"  Variable\"</span>; i<br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"    Name \u00a0: \"</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">name</span> <br/>  a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">name</span> = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span><span class=\"kw1\">Trim</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' variable names are not case sensitive in FB</span><br/>  <span class=\"kw1\">If</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>     index = FindVariableIndex<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">name</span>, i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">If</span> index &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Print</span> <span class=\"st0\">\"  Sorry, you've already created a variable of that name, try again\"</span><br/>       i -= <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>     <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"    Value\u00a0: \"</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">value</span><br/>  a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">value</span> = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span><span class=\"kw1\">Trim</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press q to quit\"</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"Which variable do you want to inspect \"</span>; v<br/>  <span class=\"kw1\">If</span> v = <span class=\"st0\">\"q\"</span> OrElse v = <span class=\"st0\">\"Q\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>  index = FindVariableIndex<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, v, n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> index = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Sorry there's no variable of that name, try again\"</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"It's value is \"</span>; a<span class=\"br0\">(</span>index<span class=\"br0\">)</span>.<span class=\"me1\">value</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Loop</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "GAP", "loc": 4, "block": "<pre class=\"text highlighted_source\"># As is, will not work if val is a String<br/>Assign\u00a0:= function(var, val)<br/>\tRead(InputTextString(Concatenation(var, \"\u00a0:= \", String(val), \";\")));<br/>end;</pre>"}, {"lang": "Genyris", "loc": 2, "block": "<pre class=\"text highlighted_source\">defvar (intern 'This is not a pipe.') 42<br/>define |&lt;weird&gt;| 2009</pre>"}, {"lang": "Groovy", "loc": 6, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> varname <span class=\"sy0\">=</span> <span class=\"st0\">'foo'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> value <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> GroovyShell<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">binding</span><span class=\"br0\">)</span>.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"st0\">\"${varname} = ${value}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> foo <span class=\"sy0\">==</span> <span class=\"nu0\">42</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Var a <span class=\"sy0\">=</span> Var <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> a <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"please enter you variable name\"</span><br/>    vName <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>    <span class=\"kw1\">let</span> var <span class=\"sy0\">=</span> Var vName <span class=\"nu0\">42</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"this is your variable: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> var</pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>arglist <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Provide the names of variables in the argument list\"</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">dump</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>                       <span class=\"co1\"># dump program state information and variables after run</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">variable</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>arglist<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>    <span class=\"co1\"># set each user specified variable name in arglist to 1</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'misc'</span><br/><span class=\"sy0\">(</span>prompt <span class=\"st_h\">'Enter variable name: '</span><span class=\"sy0\">)</span>=: <span class=\"nu0\">0</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> varname <span class=\"sy0\">=</span> <span class=\"st0\">'foo'</span><span class=\"sy0\">;</span>  <span class=\"co1\">// pretend a user input that</span><br/><span class=\"kw1\">var</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>eval<span class=\"br0\">(</span><span class=\"st0\">'var '</span> <span class=\"sy0\">+</span> varname <span class=\"sy0\">+</span> <span class=\"st0\">'='</span> <span class=\"sy0\">+</span> value<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"Enter a variable name:\",<br/>(input as $var<br/> | (\"Enter a value:\" ,<br/>    (input as $value | { ($var)\u00a0: $value })))</pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">print(\"Insert the variable name: \")<br/>\u00a0<br/>variable   = Symbol(readline(STDIN))<br/>expression = quote<br/>    $variable = 42<br/>    println(\"Inside quote:\")<br/>    @show $variable<br/>end<br/>\u00a0<br/>eval(expression)<br/>\u00a0<br/>println(\"Outside quote:\")<br/>@show variable<br/>println(\"If I named the variable x:\")<br/>@show x</pre>"}, {"lang": "Kotlin", "loc": 41, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"How many integer variables do you want to create (max 5)\u00a0: \"</span><span class=\"br0\">)</span><br/>        n <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> || n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> map <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>String, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> name<span class=\"sy0\">:</span> String<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"OK, enter the variable names and their values, below\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>  Variable $i\"</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"    Name \u00a0: \"</span><span class=\"br0\">)</span><br/>        name <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>map.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"  Sorry, you've already created a variable of that name, try again\"</span><span class=\"br0\">)</span><br/>            continue<br/>        <span class=\"br0\">}</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"    Value\u00a0: \"</span><span class=\"br0\">)</span><br/>        value <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        map.<span class=\"me1\">put</span><span class=\"br0\">(</span>name, value<span class=\"br0\">)</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Enter q to quit\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v<span class=\"sy0\">:</span> Int<span class=\"sy0\">?</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Which variable do you want to inspect\u00a0: \"</span><span class=\"br0\">)</span><br/>        name <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>name.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"q\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        v <span class=\"sy0\">=</span> map<span class=\"br0\">[</span>name<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Sorry there's no variable of that name, try again\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"It's value is $v\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 7, "block": "<pre class=\"text highlighted_source\">local(thename = web_request-&gt;param('thename')-&gt;asString)<br/>if(#thename-&gt;size) =&gt; {^<br/>\tvar(#thename = math_random)<br/>\tvar(#thename)<br/>else<br/>\t'&lt;a href=\"?thename=xyz\"&gt;Please give the variable a name!&lt;/a&gt;'<br/>^}</pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">-- varName might contain a string that was entered by a user at runtime<br/>\u00a0<br/>-- A new global variable with a user-defined name can be created at runtime like this:<br/>(the globals)[varName] = 23 -- or (the globals).setProp(varName, 23)<br/>\u00a0<br/>-- An new instance variable (object property) with a user-defined name can be created at runtime like this:<br/>obj[varName] = 23 -- or obj.setProp(varName, 23)</pre>"}, {"lang": "Logtalk", "loc": 20, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/>| <span class=\"sy1\">?-</span> <span class=\"kw4\">create_object</span>(<span class=\"re0\">Id</span>, [], [<span class=\"kw4\">set_logtalk_flag</span>(dynamic_declarations,allow)], []),<br/>     <span class=\"kw4\">write</span>(<span class=\"st0\">'Variable name:  '</span>), <span class=\"kw4\">read</span>(<span class=\"re0\">Name</span>),<br/>     <span class=\"kw4\">write</span>(<span class=\"st0\">'Variable value: '</span>), <span class=\"kw4\">read</span>(<span class=\"re0\">Value</span>),<br/>     <span class=\"re0\">Fact</span> <span class=\"sy1\">=..</span> [<span class=\"re0\">Name</span>, <span class=\"re0\">Value</span>],<br/>     <span class=\"re0\">Id</span><span class=\"sy1\">::</span><span class=\"kw4\">assertz</span>(<span class=\"re0\">Fact</span>).<br/>\u00a0<br/><span class=\"re0\">Variable</span> name<span class=\"sy1\">:</span>  foo.<br/><span class=\"re0\">Variable</span> value<span class=\"sy1\">:</span> <span class=\"nu0\">42</span>.<br/><span class=\"re0\">Id</span> <span class=\"sy1\">=</span> o1,<br/><span class=\"re0\">Name</span> <span class=\"sy1\">=</span> foo,<br/><span class=\"re0\">Value</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">42</span>,<br/><span class=\"re0\">Fact</span> <span class=\"sy1\">=</span> foo(<span class=\"nu0\">42</span>).<br/>\u00a0<br/><span class=\"sy1\">?-</span> o1<span class=\"sy1\">::</span><span class=\"kw4\">current_predicate</span>(foo<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/><span class=\"kw5\">true</span>.<br/>\u00a0<br/>| <span class=\"sy1\">?-</span> o1<span class=\"sy1\">::</span>foo(<span class=\"re0\">X</span>).<br/><span class=\"re0\">X</span> <span class=\"sy1\">=</span> <span class=\"nu0\">42</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">_G</span><span class=\"br0\">[</span><span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"co1\">--puts 5 in a global variable named by the user</span></pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">? make readword readword<br/>julie<br/>12<br/>? show\u00a0:julie<br/>12</pre>"}, {"lang": "M4", "loc": 5, "block": "<pre class=\"text highlighted_source\">Enter foo, please.<br/>define(`inp',esyscmd(`echoinp'))<br/>define(`trim',substr(inp,0,decr(len(inp))))<br/>define(trim,42)<br/>foo</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">varname = InputString[\"Enter a variable name\"];<br/>varvalue = InputString[\"Enter a value\"];<br/>ReleaseHold[ Hold[Set[\"nameholder\", \"value\"]] /. {\"nameholder\" -&gt; Symbol[varname], \"value\" -&gt; varvalue}];<br/>Print[varname, \" is now set to \", Symbol[varname]]</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">/* Use\u00a0:: for indirect assignment */<br/>block([name: read(\"name?\"), x: read(\"value?\")], name\u00a0:: x);</pre>"}, {"lang": "MUMPS", "loc": 12, "block": "<pre class=\"text highlighted_source\">USER&gt;KILL\u00a0;Clean up workspace<br/>\u00a0<br/>USER&gt;WRITE\u00a0;show all variables and definitions<br/>\u00a0<br/>USER&gt;READ \"Enter a variable name: \",A<br/>Enter a variable name: GIBBERISH<br/>USER&gt;SET @A=3.14159<br/>\u00a0<br/>USER&gt;WRITE<br/>\u00a0<br/>A=\"GIBBERISH\"<br/>GIBBERISH=3.14159</pre>"}, {"lang": "Nim", "loc": 17, "block": "<pre class=\"text highlighted_source\">import tables<br/>\u00a0<br/>var<br/>  theVar: int = 5<br/>  varMap = initTable[string, pointer]()<br/>\u00a0<br/>proc ptrToInt(p: pointer): int =<br/>  result = cast[ptr int](p)[]<br/>\u00a0<br/>proc main() =<br/>  write(stdout, \"Enter a var name: \")<br/>  let sVar = readLine(stdin)<br/>  varMap.add($svar, theVar.addr)<br/>  echo \"Variable \", sVar, \" is \", ptrToInt(varMap[$sVar])<br/>\u00a0<br/>when isMainModule:<br/>  main()</pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">varname <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/input.html\"><span class=\"kw5\">input</span></a> <span class=\"br0\">(</span><span class=\"co4\">\"Enter variable name: \"</span><span class=\"sy5\">,</span> <span class=\"co4\">\"s\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>value <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/input.html\"><span class=\"kw5\">input</span></a> <span class=\"br0\">(</span><span class=\"co4\">\"Enter value: \"</span><span class=\"sy5\">,</span> <span class=\"co4\">\"s\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/eval.html\"><span class=\"kw5\">eval</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>varname<span class=\"sy5\">,</span><span class=\"co4\">\"=\"</span><span class=\"sy5\">,</span>value<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: createVar(varname)<br/>   \"tvar: \" varname + eval\u00a0;<br/>\u00a0<br/>\"myvar\" createVar<br/>\u00a0<br/>12 myvar put<br/>myvar at .</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=34\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Enter a variable name: \"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$varname</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span> <span class=\"co1\"># type in \"foo\" on standard input</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$varname</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$$varname</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span> <span class=\"co1\"># when you try to dereference a string, it will be</span><br/>                <span class=\"co1\"># treated as a \"symbolic reference\", where they</span><br/>                <span class=\"co1\"># take the string as the name of the variable</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$foo<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"42\"</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">our</span> <span class=\"re0\">$our</span><span class=\"sy0\">-</span>var <span class=\"sy0\">=</span> <span class=\"st_h\">'The our var'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span>  <span class=\"re0\">$my</span><span class=\"sy0\">-</span>var  <span class=\"sy0\">=</span> <span class=\"st_h\">'The my var'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$name</span>  <span class=\"sy0\">=</span> prompt <span class=\"st_h\">'Variable name: '</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$value</span> <span class=\"sy0\">=</span> $<span class=\"sy0\">::</span><span class=\"br0\">(</span><span class=\"st_h\">'name'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># use the right sigil, etc</span><br/>\u00a0<br/>put <span class=\"co2\">qq/Var ($name) starts with value \uff62$value\uff63/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>$<span class=\"sy0\">::</span><span class=\"br0\">(</span><span class=\"st_h\">'name'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">137</span><span class=\"sy0\">;</span><br/>\u00a0<br/>put <span class=\"co2\">qq/Var ($name) ends with value \uff62{$::('name')}\uff63/</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">constant globals = new_dict()<br/>\u00a0<br/>while 1 do<br/>    string name = prompt_string(\"Enter name or press Enter to quit:\")<br/>    if length(name)=0 then exit end if<br/>    integer k = getd_index(name,globals)<br/>    if k=0 then<br/>        string data = prompt_string(\"No such name, enter a value:\")<br/>        setd(name,data,globals)<br/>    else<br/>        string data = prompt_string(sprintf(\"Already exists, new value[%s]:\",{getd(name,globals)}))<br/>        if length(data) then<br/>            setd(name,data,globals)<br/>        end if<br/>    end if<br/>end while</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$varname</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rtrim\"><span class=\"kw3\">rtrim</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/fgets\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>STDIN<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co2\"># type in \"foo\" on standard input<br/></span><span class=\"re0\">$$varname</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$foo</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co2\"># prints \"42\"<br/></span><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de userVariable ()<br/>   (prin \"Enter a variable name: \")<br/>   (let Var (line T)                                  # Read transient symbol<br/>      (prin \"Enter a value: \")<br/>      (set Var (read))                                # Set symbol's value<br/>      (println 'Variable Var 'Value (val Var)) ) )    # Print them</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$variableName</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span><br/><span class=\"kw1\">New-Variable</span> <span class=\"re0\">$variableName</span> <span class=\"st0\">'Foo'</span><br/><span class=\"kw1\">Get-Variable</span> $variableName</pre>"}, {"lang": "ProDOS", "loc": 3, "block": "<pre class=\"text highlighted_source\">editvar /newvar /value=a /userinput=1 /title=Enter a variable name:<br/>editvar /newvar /value=b /userinput=1 /title=Enter a variable title:<br/>editvar /newvar /value=-a- /title=-b-</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> name <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter a variable name: \"</span><span class=\"br0\">)</span><br/>Enter a variable name: X<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">globals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> X<br/><span class=\"nu0\">42</span></pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\"># Read the name in from a command prompt<br/>varname &lt;- readline(\"Please name your variable &gt;\")<br/># Make sure the name is valid for a variable<br/>varname &lt;- make.names(varname)<br/>message(paste(\"The variable being assigned is '\", varname, \"'\"))<br/># Assign the variable (with value 42) into the user workspace (global environment)<br/>assign(varname, 42)<br/>#Check that the value has been assigned ok<br/>ls(pattern=varname)<br/>get(varname)</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-&gt; (begin (printf \"Enter some name: \")<br/>          (namespace-set-variable-value! (read) 123))<br/>Enter some name: bleh<br/>-&gt; bleh<br/>123<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 14, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Dynamic Variable Name\"<br/>\tURL: http://rosettacode.org/wiki/Dynamic_variable_names<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Here, I ask the user for a name, then convert it to a word and</span><br/><span class=\"co1\">; assign the value \"Hello!\" to it. To read this phrase, realize that</span><br/><span class=\"co1\">; REBOL collects terms from right to left, so \"Hello!\" is stored for</span><br/><span class=\"co1\">; future use, then the prompt string \"Variable name? \" is used as the</span><br/><span class=\"co1\">; argument to ask (prompts user for input). The result of ask is</span><br/><span class=\"co1\">; converted to a word so it can be an identifier, then the 'set' word</span><br/><span class=\"co1\">; accepts the new word and the string (\"Hello!\") to be assigned.</span><br/>\u00a0<br/><span class=\"kw3\">set</span>  <span class=\"kw3\">to-word</span>  <span class=\"kw3\">ask</span> <span class=\"st0\">\"Variable name? \"</span>  <span class=\"st0\">\"Hello!\"</span></pre>"}, {"lang": "Retro", "loc": 4, "block": "<pre class=\"text highlighted_source\">: newVariable: ( \"- )<br/>  getToken header 0 ,\u00a0;<br/>\u00a0<br/>newVariable: foo</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates the use of dynamic variable names &amp; setting a val.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> newVar newValue<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Arguments as they were entered via the command line: '</span>   newVar    newValue<br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> <span class=\"kw2\">value</span> newVar, newValue<br/><span class=\"kw1\">say</span> <span class=\"st0\">'The newly assigned value (as per the VALUE bif)------'</span> newVar <span class=\"kw2\">value</span><span class=\"br0\">(</span>newVar<span class=\"br0\">)</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "RLaB", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt;&gt; s = \"myusername\"<br/>myusername<br/>&gt;&gt; $$.[s] = 10;<br/>&gt;&gt; myusername<br/>  10</pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>See \"Enter the variable name: \" give cName eval(cName+\"=10\")<br/>See \"The variable name = \" + cName + \" and the variable value = \" + eval(\"return \"+cName) + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">p</span> <span class=\"st0\">\"Enter a variable name\"</span><br/>x = <span class=\"st0\">\"@\"</span> <span class=\"sy0\">+</span> <span class=\"kw3\">gets</span>.<span class=\"kw3\">chomp!</span><br/>instance_variable_set x, <span class=\"nu0\">42</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">\"The value of #{x} is #{instance_variable_get x}\"</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>variable name initial<span class=\"sy0\">-</span>val<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>eval `<span class=\"br0\">(</span><span class=\"kw1\">define</span> ,name ,initial<span class=\"sy0\">-</span>val<span class=\"br0\">)</span> <span class=\"br0\">(</span>interaction<span class=\"sy0\">-</span>environment<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>variable <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&lt;</span>hello<br/>\u00a0<br/><span class=\"sy0\">=&gt;</span> hello<br/><span class=\"nu0\">50</span></pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">var name = read<span class=\"br0\">(</span><span class=\"st0\">\"Enter a variable name: \"</span>, <span class=\"kw3\">String</span><span class=\"br0\">)</span>;     <span class=\"co1\"># type in 'foo'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> DynamicVar<span class=\"br0\">(</span>name, value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method init <span class=\"br0\">{</span><br/>        DynamicVar.<span class=\"me1\">def_method</span><span class=\"br0\">(</span>name, <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">{</span> value <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var v = DynamicVar<span class=\"br0\">(</span>name, <span class=\"nu0\">42</span><span class=\"br0\">)</span>;       <span class=\"co1\"># creates a dynamic variable</span><br/>say v.<span class=\"me1\">foo</span>;                          <span class=\"co1\"># retrieves the value</span></pre>"}, {"lang": "Slate", "loc": 3, "block": "<pre class=\"text highlighted_source\">define: #name -&gt; (query: 'Enter a variable name: ') intern. \"X\"<br/>define: name -&gt; 42.<br/>X print.</pre>"}, {"lang": "Smalltalk", "loc": 9, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> varName </span>|<br/><span class=\"re6\">varName</span> <span class=\"sy0\">:=</span> <span class=\"re0\">FillInTheBlankMorph</span> <br/>\trequest: <span class=\"st0\">'Enter a variable name'</span>.<br/><span class=\"re0\">Compiler</span> <br/>\tevaluate: <span class=\"st0\">'| '</span>, <span class=\"re5\">varName</span>, <span class=\"st0\">' | '</span>, <span class=\"re5\">varName</span>, <span class=\"st0\">'\u00a0:= 42. <br/>\tTranscript <br/>\t\tshow: '</span><span class=\"st0\">'value of '</span>, <span class=\"re5\">varName</span>, <span class=\"st0\">''</span><span class=\"st0\">'; <br/>\t\tshow: '</span><span class=\"st0\">' is '</span><span class=\"st0\">';<br/>\t\tshow: '</span>, <span class=\"re5\">varName</span>.</pre>"}, {"lang": "SNOBOL4", "loc": 11, "block": "<pre class=\"text highlighted_source\">*       # Get var name from user        <br/>        output = 'Enter variable name:'<br/>        invar = trim(input)<br/>\u00a0<br/>*       # Get value from user, assign        <br/>        output = 'Enter value:'<br/>        $invar = trim(input)<br/>\u00a0<br/>*       Display <br/>        output = invar ' == ' $invar<br/>end</pre>"}, {"lang": "Stata", "loc": 3, "block": "<pre class=\"text highlighted_source\">display \"Name?\" _request(s)<br/>scalar $s=10<br/>display $s</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">puts</span> <span class=\"st0\">\"Enter a variable name:\"</span><br/><span class=\"kw2\">gets</span> stdin varname<br/><span class=\"kw1\">set</span> <span class=\"re0\">$varname</span> <span class=\"nu0\">42</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"I have set variable $varname to [set $varname]\"</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">Local varName,value<br/>InputStr \"Variable name\", varName<br/>Prompt value<br/>value \u2192 #varName</pre>"}, {"lang": "TUSCRIPT", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>ASK \"Enter variablename\": name=\"\"<br/>ASK \"Enter value\": value=\"\"<br/>TRACE <a class=\"__cf_email__\" data-cfemail=\"674c2709060a02\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>@name=$value<br/>PRINT @name<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">read</span> name<br/><span class=\"kw3\">declare</span> <span class=\"re1\">$name</span>=<span class=\"nu0\">42</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${name}</span>=<span class=\"es3\">${!name}</span>\"</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">vname:=\"foo\";  // or vname:=ask(\"var name = \");<br/>klass:=Compiler.Compiler.compileText(\"var\u00a0%s=123\".fmt(vname))(); // compile &amp; run the constructor<br/>klass.vars.println();<br/>klass.foo.println();<br/>klass.setVar(vname).println();  // setVar(name,val) sets the var</pre>"}, {"lang": "Zsh", "loc": 2, "block": "<pre class=\"text highlighted_source\">read name<br/>typeset $name=42</pre>"}]}