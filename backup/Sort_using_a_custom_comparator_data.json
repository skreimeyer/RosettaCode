{"task": "Sort_using_a_custom_comparator", "blocks": [{"lang": "Ada", "loc": 109, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/><span class=\"kw3\">with</span> Gnat.<span class=\"me1\">Heap_Sort_G</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Custom_Compare <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> StringArrayType <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Unbounded_String;<br/>\u00a0<br/>   Strings\u00a0: StringArrayType\u00a0:= <span class=\"br0\">(</span>Null_Unbounded_String,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"this\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"is\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"set\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"of\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"strings\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"to\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"sort\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"This\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"Is\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"Set\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"Of\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"Strings\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"To\"</span><span class=\"br0\">)</span>,<br/>                                 To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"Sort\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Move <span class=\"br0\">(</span>From, To\u00a0: <span class=\"kw3\">in</span> Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      Strings<span class=\"br0\">(</span>To<span class=\"br0\">)</span>\u00a0:= Strings<span class=\"br0\">(</span>From<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Move;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> UpCase <span class=\"br0\">(</span>Char\u00a0: <span class=\"kw3\">in</span> Character<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Character <span class=\"kw1\">is</span><br/>      Temp\u00a0: Character;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Char &gt;= 'a' <span class=\"kw2\">and</span> Char &lt;= 'z' <span class=\"kw1\">then</span><br/>         Temp\u00a0:= Character'Val<span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>Char<span class=\"br0\">)</span><br/>                                 - Character'Pos<span class=\"br0\">(</span>'a'<span class=\"br0\">)</span> <br/>                                 + Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Temp\u00a0:= Char;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> Temp;<br/>   <span class=\"kw1\">end</span> UpCase;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Lt <span class=\"br0\">(</span>Op1, Op2\u00a0: Natural<span class=\"br0\">)</span> <br/>               <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Temp, Len\u00a0: Natural;<br/>   <span class=\"kw1\">begin</span><br/>      Len\u00a0:= Length<span class=\"br0\">(</span>Strings<span class=\"br0\">(</span>Op1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Temp\u00a0:= Length<span class=\"br0\">(</span>Strings<span class=\"br0\">(</span>Op2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Len &lt; Temp <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> False;<br/>      <span class=\"kw1\">elsif</span> Len &gt; Temp <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> True;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\u00a0<br/>      <span class=\"kw1\">declare</span><br/>         S1, S2\u00a0: String<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Len</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         S1\u00a0:= To_String<span class=\"br0\">(</span>Strings<span class=\"br0\">(</span>Op1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         S2\u00a0:= To_String<span class=\"br0\">(</span>Strings<span class=\"br0\">(</span>Op2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"Same size:  \"</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span>S1<span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span>S2<span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> S1'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Put<span class=\"br0\">(</span>UpCase<span class=\"br0\">(</span>S1<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Put<span class=\"br0\">(</span>UpCase<span class=\"br0\">(</span>S2<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> UpCase<span class=\"br0\">(</span>S1<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> = UpCase<span class=\"br0\">(</span>S2<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           <span class=\"kw3\">null</span>;<br/>         <span class=\"kw1\">elsif</span> UpCase<span class=\"br0\">(</span>S1<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> &lt; UpCase<span class=\"br0\">(</span>S2<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Put<span class=\"br0\">(</span><span class=\"st0\">\" LT\"</span><span class=\"br0\">)</span>;<br/>            New_Line;<br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\" GTE\"</span><span class=\"br0\">)</span>;<br/>      New_Line;<br/>      <span class=\"kw1\">return</span> False;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> Lt;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Arr\u00a0: <span class=\"kw3\">in</span> StringArrayType<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Arr</span>'Length-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Put<span class=\"br0\">(</span>To_String<span class=\"br0\">(</span>Arr<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Heap <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Gnat.<span class=\"me1\">Heap_Sort_G</span><span class=\"br0\">(</span>Move,<br/>                                        Lt<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Heap;<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Unsorted list:\"</span><span class=\"br0\">)</span>;<br/>   Put<span class=\"br0\">(</span>Strings<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Sort<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Sorted list:\"</span><span class=\"br0\">)</span>;<br/>   Put<span class=\"br0\">(</span>Strings<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Custom_Compare;</pre>"}, {"lang": "AppleScript", "loc": 97, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>\u00a0<br/><span class=\"co1\">-- SORTING LISTS OF ATOMIC (NON-RECORD) DATA WITH A CUSTOM SORT FUNCTION</span><br/>\u00a0<br/><span class=\"co1\">-- In sortBy, f is a function from () to a tuple of two parts:</span><br/><span class=\"co1\">-- 1. a function from any value to a record derived from (and containing) that value</span><br/><span class=\"co1\">--  The base value should be present in the record under the key 'value'</span><br/><span class=\"co1\">--  additional derivative keys (and optionally the 'value' key) should be included in 2:</span><br/><span class=\"co1\">-- 2. a list of (record key, boolean) tuples, in the order of sort comparison,</span><br/><span class=\"co1\">--    where the value *true* selects ascending order for the paired key</span><br/><span class=\"co1\">--    and the value *false* selects descending order for that key</span><br/>\u00a0<br/><span class=\"co1\">-- sortBy\u00a0:: (() -&gt; ((a -&gt; Record), [(String, Bool)])) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> sortBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>fn, keyBools<span class=\"br0\">}</span> <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> unWrap<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            value <span class=\"kw3\">of</span> x<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    map<span class=\"br0\">(</span>unWrap, sortByComparing<span class=\"br0\">(</span>keyBools, map<span class=\"br0\">(</span>fn, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sortBy<br/>\u00a0<br/><span class=\"co1\">-- SORTING APPLESCRIPT RECORDS BY PRIMARY AND N-ARY SORT KEYS</span><br/>\u00a0<br/><span class=\"co1\">-- sortByComparing\u00a0:: [(String, Bool)] -&gt; [Records] -&gt; [Records]</span><br/><span class=\"kw3\">on</span> sortByComparing<span class=\"br0\">(</span>keyDirections, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> recDict<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            ca<span class=\"co2\">'</span>s NSDictionary<span class=\"co2\">'</span>s dictionaryWithDictionary:x<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">set</span> dcts <span class=\"kw3\">to</span> map<span class=\"br0\">(</span>recDict, xs<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> asDescriptor<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kd<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kd<br/>            ca<span class=\"co2\">'</span>s NSSortDescriptor<span class=\"co2\">'</span>s sortDescriptorWithKey:k ascending:d selector:dcts<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:dcts<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingDescriptors:map<span class=\"br0\">(</span>asDescriptor, keyDirections<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sortByComparing<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"Shanghai\"</span>, <span class=\"st0\">\"Karachi\"</span>, <span class=\"st0\">\"Beijing\"</span>, <span class=\"st0\">\"Sao Paulo\"</span>, <span class=\"st0\">\"Dhaka\"</span>, <span class=\"st0\">\"Delhi\"</span>, <span class=\"st0\">\"Lagos\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\">-- Custom comparator:</span><br/>\u00a0<br/>    <span class=\"co1\">-- Returns a lifting function and a sequence of {key, bool} pairs</span><br/>\u00a0<br/>    <span class=\"co1\">-- Strings in order of descending length, </span><br/>    <span class=\"co1\">-- and ascending lexicographic order</span><br/>    <span class=\"kw3\">script</span> lengthDownAZup<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span>value:x, n:length <span class=\"kw3\">of</span> x<span class=\"br0\">}</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>            <span class=\"br0\">{</span><span class=\"kw1\">result</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"n\"</span>, <span class=\"kw1\">false</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"value\"</span>, <span class=\"kw1\">true</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    sortBy<span class=\"br0\">(</span>lengthDownAZup, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span></pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">numbers <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">999</span><span class=\"sy0\">,-</span><span class=\"nu0\">4</span> <br/>strings <span class=\"sy0\">=</span> Here<span class=\"sy0\">,</span>are<span class=\"sy0\">,</span>some<span class=\"sy0\">,</span>sample<span class=\"sy0\">,</span>strings<span class=\"sy0\">,</span>to<span class=\"sy0\">,</span>be<span class=\"sy0\">,</span>sorted<br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> numbers<span class=\"sy0\">,</span> F IntegerSort D<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> strings<span class=\"sy0\">,</span> F StringLengthSort D<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% numbers <br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% strings<br/>\u00a0<br/>IntegerSort<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/><span class=\"kw1\">return</span> a2 <span class=\"sy0\">-</span> a1<br/><span class=\"br0\">}</span><br/>\u00a0<br/>StringLengthSort<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">strlen</span></a><span class=\"br0\">(</span>a1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">strlen</span></a><span class=\"br0\">(</span>a2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 33, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># syntax: GAWK -f SORT_USING_A_CUSTOM_COMPARATOR.AWK</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># sorting:</span><br/><span class=\"co1\">#   PROCINFO[\"sorted_in\"] is used by GAWK</span><br/><span class=\"co1\">#   SORTTYPE is used by Thompson Automation's TAWK</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    words = <span class=\"st0\">\"This Is A Set Of Strings To Sort duplicated\"</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>words <span class=\"st0\">\" \"</span> <span class=\"kw4\">tolower</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span>,tmp_arr,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"unsorted:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      word = tmp_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      arr<span class=\"br0\">[</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>sorted:\"</span><span class=\"br0\">)</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_num_desc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"caselessCompare\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">2</span> <span class=\"co1\"># possibly 14?</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>; k<span class=\"sy2\">&lt;=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>; k<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw5\">print</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> caselessCompare<span class=\"br0\">(</span> i1, v1, i2, v2,        l1, l2, result <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    l1 = <span class=\"kw4\">tolower</span><span class=\"br0\">(</span> i1 <span class=\"br0\">)</span>;<br/>    l2 = <span class=\"kw4\">tolower</span><span class=\"br0\">(</span> i2 <span class=\"br0\">)</span>;<br/><span class=\"kw6\">return</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> l1 <span class=\"sy2\">&lt;</span> l2 <span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> l1 <span class=\"sy2\">==</span> l2 <span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">0</span> <span class=\"sy5\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span> <span class=\"co1\"># caselessCompare</span></pre>"}, {"lang": "Babel", "loc": 4, "block": "<pre class=\"text highlighted_source\">babel&gt; (\"Here\" \"are\" \"some\" \"sample\" \"strings\" \"to\" \"be\" \"sorted\") strsort\u00a0! lsstr\u00a0!<br/>( \"Here\" \"are\" \"be\" \"sample\" \"some\" \"sorted\" \"strings\" \"to\" )<br/>babel&gt; (\"Here\" \"are\" \"some\" \"sample\" \"strings\" \"to\" \"be\" \"sorted\") lexsort\u00a0! lsstr\u00a0!<br/>( \"be\" \"to\" \"are\" \"Here\" \"some\" \"sample\" \"sorted\" \"strings\" )</pre>"}, {"lang": "Burlesque", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {\"acb\"  \"Abc\" \"Acb\" \"acc\" \"ADD\"}&gt;&lt;<br/>{\"ADD\" \"Abc\" \"Acb\" \"acb\" \"acc\"}<br/>blsq ) {\"acb\"  \"Abc\" \"Acb\" \"acc\" \"ADD\"}(zz)CMsb<br/>{\"Abc\" \"acb\" \"Acb\" \"acc\" \"ADD\"}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;  /* for qsort */</span><br/><span class=\"co2\">#include &lt;string.h&gt;  /* for strlen */</span><br/><span class=\"co2\">#include &lt;strings.h&gt; /* for strcasecmp */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> mycmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>s1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>l <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span>s1<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span>s2<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> ll <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> lr <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ll <span class=\"sy0\">&gt;</span> lr<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ll <span class=\"sy0\">&lt;</span> lr<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> strcasecmp<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>strings<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>strings<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>strings<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>strings<span class=\"br0\">)</span><span class=\"sy0\">,</span> mycmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 40, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> SortCustomComparator <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Driver program</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> CustomSort<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> items <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Here\"</span>, <span class=\"st0\">\"are\"</span>, <span class=\"st0\">\"some\"</span>, <span class=\"st0\">\"sample\"</span>, <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"sorted\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">String</span><span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>items<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            DisplayList<span class=\"br0\">(</span><span class=\"st0\">\"Unsorted\"</span>, list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>CustomCompare<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DisplayList<span class=\"br0\">(</span><span class=\"st0\">\"Descending Length\"</span>, list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DisplayList<span class=\"br0\">(</span><span class=\"st0\">\"Ascending order\"</span>, list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Custom compare</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> CustomCompare<span class=\"br0\">(</span><span class=\"kw4\">String</span> x, <span class=\"kw4\">String</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>x<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>y<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result <span class=\"sy0\">=</span> x<span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>y<span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Output routine</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> DisplayList<span class=\"br0\">(</span><span class=\"kw4\">String</span> header, List<span class=\"sy0\">&lt;</span><span class=\"kw4\">String</span><span class=\"sy0\">&gt;</span> theList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>header<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span>header<span class=\"sy0\">.</span><span class=\"me1\">Length</span>, <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">String</span> str <span class=\"kw1\">in</span> theList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cctype&gt;</span><br/>\u00a0<br/><span class=\"co1\">// compare character case-insensitive</span><br/><span class=\"kw4\">struct</span> icompare_char <span class=\"br0\">{</span><br/>  <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> c1, <span class=\"kw4\">char</span> c2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw3\">toupper</span><span class=\"br0\">(</span>c1<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">toupper</span><span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// return true if s1 comes before s2</span><br/><span class=\"kw4\">struct</span> compare <span class=\"br0\">{</span><br/>  <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> s1, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> s2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> s2.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> s2.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">lexicographical_compare</span><span class=\"br0\">(</span>s1.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s1.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                        s2.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s2.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                        icompare_char<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> strings<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"Here\"</span>, <span class=\"st0\">\"are\"</span>, <span class=\"st0\">\"some\"</span>, <span class=\"st0\">\"sample\"</span>, <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"sorted\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>strings, strings<span class=\"sy2\">+</span><span class=\"nu0\">8</span>, compare<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 14, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tvalue strings = [<br/>\t\t\"Cat\", \"apple\", \"Adam\", \"zero\", \"Xmas\", \"quit\", <br/>\t\t\"Level\", \"add\", \"Actor\", \"base\", \"butter\"<br/>\t];<br/>\u00a0<br/>\tvalue sorted = strings.sort((String x, String y) =&gt;<br/>\t\t\tif(x.size == y.size)<br/>\t\t\tthen increasing(x.lowercased, y.lowercased)<br/>\t\t\telse decreasing(x.size, y.size));<br/>\u00a0<br/>\tsorted.each(print);<br/>}</pre>"}, {"lang": "Clean", "loc": 11, "block": "<pre class=\"text highlighted_source\">import StdEnv<br/>\u00a0<br/>less s1 s2<br/>    | size s1 &gt; size s2 = True<br/>    | size s1 &lt; size s2 = False<br/>    | otherwise = lower s1 &lt; lower s2<br/>where<br/>    lower\u00a0:: String -&gt; String<br/>    lower s = {toLower c \\\\ c &lt;-: s}<br/>\u00a0<br/>Start = sortBy less [\"This\", \"is\", \"a\", \"set\", \"of\", \"strings\", \"to\", \"sort\"]</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rosetta<span class=\"sy0\">-</span>compare <span class=\"br0\">[</span>s1 s2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len1 <span class=\"br0\">(</span><span class=\"kw1\">count</span> s1<span class=\"br0\">)</span>, len2 <span class=\"br0\">(</span><span class=\"kw1\">count</span> s2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> len1 len2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>compare <span class=\"br0\">(</span><span class=\"sy0\">.</span>toLowerCase s1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>toLowerCase s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">-</span> len2 len1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println<br/> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> rosetta<span class=\"sy0\">-</span>compare<br/>       <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span> <span class=\"st0\">\"are\"</span> <span class=\"st0\">\"some\"</span> <span class=\"st0\">\"sample\"</span> <span class=\"st0\">\"strings\"</span> <span class=\"st0\">\"to\"</span> <span class=\"st0\">\"be\"</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>defvar *strings*<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"st0\">\"Cat\"</span> <span class=\"st0\">\"apple\"</span> <span class=\"st0\">\"Adam\"</span> <span class=\"st0\">\"zero\"</span> <span class=\"st0\">\"Xmas\"</span> <span class=\"st0\">\"quit\"</span> <span class=\"st0\">\"Level\"</span> <span class=\"st0\">\"add\"</span> <span class=\"st0\">\"Actor\"</span> <span class=\"st0\">\"base\"</span> <span class=\"st0\">\"butter\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>*STRINGS*<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sort *strings* #'string-lessp<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"st0\">\"Actor\"</span> <span class=\"st0\">\"Adam\"</span> <span class=\"st0\">\"add\"</span> <span class=\"st0\">\"apple\"</span> <span class=\"st0\">\"base\"</span> <span class=\"st0\">\"butter\"</span> <span class=\"st0\">\"Cat\"</span> <span class=\"st0\">\"Level\"</span> <span class=\"st0\">\"quit\"</span> <span class=\"st0\">\"Xmas\"</span><br/><span class=\"st0\">\"zero\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"here are Some sample strings to be sorted\"</span><br/>    .<span class=\"me1\">split</span><br/>    .<span class=\"me1\">schwartzSort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> tuple<span class=\"br0\">(</span><span class=\"sy0\">-</span>a.<span class=\"me1\">length</span><span class=\"sy0\">,</span> a.<span class=\"me1\">toUpper</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SortWithCustomComparator<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">,</span> Types<span class=\"sy1\">,</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">,</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Defaults</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lArray<span class=\"sy1\">:</span> TStringDynArray<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lArray <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringDynArray<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'Here'</span><span class=\"sy1\">,</span> <span class=\"st0\">'are'</span><span class=\"sy1\">,</span> <span class=\"st0\">'some'</span><span class=\"sy1\">,</span> <span class=\"st0\">'sample'</span><span class=\"sy1\">,</span> <span class=\"st0\">'strings'</span><span class=\"sy1\">,</span> <span class=\"st0\">'to'</span><span class=\"sy1\">,</span> <span class=\"st0\">'be'</span><span class=\"sy1\">,</span> <span class=\"st0\">'sorted'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TArray<span class=\"sy1\">.</span><span class=\"me1\">Sort</span>&lt;string&gt;<span class=\"br0\">(</span>lArray <span class=\"sy1\">,</span> TDelegatedComparer&lt;string&gt;<span class=\"sy1\">.</span><span class=\"me1\">Construct</span><span class=\"br0\">(</span><br/>  <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"kw1\">const</span> Left<span class=\"sy1\">,</span> Right<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"co1\">//Returns ('Here', 'are', 'be', 'sample', 'some', 'sorted', 'strings', 'to')</span><br/>    <span class=\"co1\">//Result\u00a0:= CompareStr(Left, Right);</span><br/>\u00a0<br/>    <span class=\"co1\">//Returns ('are', 'be', 'Here', 'sample', 'some', 'sorted', 'strings', 'to')</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">CompareText</span><span class=\"br0\">(</span>Left<span class=\"sy1\">,</span> Right<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><span class=\"coMULTI\">/** returns a if it is nonzero, otherwise b() */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> nonzeroOr<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">isZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> a <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span> \\<br/>    .<span class=\"me1\">sort</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> a<span class=\"sy0\">,</span> b <span class=\"br0\">{</span> <br/>              nonzeroOr<span class=\"br0\">(</span>b.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">op__cmp</span><span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span> a.<span class=\"me1\">compareToIgnoreCase</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "EGL", "loc": 37, "block": "<pre class=\"text highlighted_source\">program SortExample<br/>\u00a0<br/>    function main()<br/>       \ttest1 string[] = [\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"];<br/>\ttest1.sort(sortFunction);<br/>\u00a0<br/>\tSysLib.writeStdout(\"Test 1:\");<br/>\tfor(i int from 1 to test1.getSize())<br/>      \t    SysLib.writeStdout(test1[i]);<br/>\tend<br/>\u00a0<br/>\ttest2 string[] = [\"Cat\", \"apple\", \"Adam\", \"zero\", \"Xmas\", \"quit\", \"Level\", \"add\", \"Actor\", \"base\", \"butter\"];<br/>\ttest2.sort(sortFunction);<br/>\u00a0<br/>\tSysLib.writeStdout(\"Test 2:\");<br/>\tfor(i int from 1 to test2.getSize())<br/>\t    SysLib.writeStdout(test2[i]);<br/>\tend<br/>    end<br/>\u00a0<br/>    function sortFunction(a any in, b any in) returns (int)<br/>\tresult int = (b as string).length() - (a as string).length();<br/>\tif (result == 0)<br/>  \t    case<br/>\t\twhen ((a as string).toLowerCase() &gt; (b as string).toLowerCase())<br/>\t  \t    result = 1;<br/>\t\twhen ((a as string).toLowerCase() &lt; (b as string).toLowerCase())<br/>\t\t    result = -1;<br/>\t\totherwise<br/>\t\t    result = 0;<br/>\t    end<br/>\tend<br/>\u00a0<br/>    \treturn result;<br/>    end<br/>\u00a0<br/>end</pre>"}, {"lang": "Elena", "loc": 16, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'culture.<br/>\u00a0<br/>program =<br/>[<br/>    var items\u00a0:= ( \"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\" ).<br/>\u00a0<br/>    console printLine(\"Unsorted:          \", items).<br/>\u00a0<br/>    console printLine(\"Descending length: \", items clone; <br/>        sort(:p:n)(p length &gt; n length) ).<br/>\u00a0<br/>    console printLine(\"Ascending order:   \", items clone; <br/>        sort(:p:n)(p toUpper(invariantLocale) &lt; n toUpper(invariantLocale)) ).    <br/>].</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">strs = ~w[this is a set of strings to sort This Is A Set Of Strings To Sort]<br/>\u00a0<br/>comparator = fn s1,s2 -&gt; if String.length(s1)==String.length(s2),<br/>                           do:   String.downcase(s1) &lt;= String.downcase(s2),<br/>                           else: String.length(s1) &gt;= String.length(s2) end<br/>IO.inspect Enum.sort(strs, comparator)<br/>\u00a0<br/># or<br/>IO.inspect Enum.sort_by(strs, fn str -&gt; {-String.length(str), String.downcase(str)} end)</pre>"}, {"lang": "Erlang", "loc": 14, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> sort_using_custom_comparator <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> longest_first_case_insensitive<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"this\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"is\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"set\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"of\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sort\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"This\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Is\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Set\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Of\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Strings\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"To\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Sort\"</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">longest_first_case_insensitive</span><span class=\"br0\">(</span> <span class=\"re5\">String1</span><span class=\"sy1\">,</span> <span class=\"re5\">String2</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String1</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"re5\">String1</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"re5\">String2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">longest_first_case_insensitive</span><span class=\"br0\">(</span> <span class=\"re5\">String1</span><span class=\"sy1\">,</span> <span class=\"re5\">String2</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String1</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">longest_first_case_insensitive</span><span class=\"br0\">(</span> <span class=\"re5\">_String1</span><span class=\"sy1\">,</span> <span class=\"re5\">_String2</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/><span class=\"kw1\">include</span> wildcard.e<br/><span class=\"kw1\">include</span> misc.e<br/>\u00a0<br/><span class=\"kw1\">function</span> my_compare<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>!<span class=\"sy1\">=</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">-</span><span class=\"kw2\">compare</span><span class=\"br0\">(</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>lower<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy2\">,</span>lower<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> strings<br/>strings <span class=\"sy1\">=</span> reverse<span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"st0\">\"Here\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"sorted\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Unsorted:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>pretty_print<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>strings<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Sorted:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>pretty_print<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>custom_sort<span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"my_compare\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span>strings<span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> myCompare <span class=\"br0\">(</span>s1:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>s2:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> compare s2.<span class=\"me1\">Length</span> s1.<span class=\"me1\">Length</span> <span class=\"kw1\">with</span><br/>    | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> compare <span class=\"br0\">(</span>s1.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>s2.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    | X <span class=\"sy0\">-&gt;</span> X<br/>\u00a0<br/><span class=\"kw1\">let</span> strings <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sortedStrings <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sortWith</span> myCompare strings<br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> sortedStrings</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">: my-compare ( s1 s2 -- &lt;=&gt; )<br/>    2dup [ length ] compare invert-comparison<br/>    dup +eq+ = [ drop [ &gt;lower ] compare ] [ 2nip ] if\u00a0;<br/>\u00a0<br/>{ \"this\" \"is\" \"a\" \"set\" \"of\" \"strings\" \"to\" \"sort\" } [ my-compare ] sort</pre>"}, {"lang": "Fantom", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    // sample strings from Lisp example<br/>    strs\u00a0:= [\"Cat\", \"apple\", \"Adam\", \"zero\", \"Xmas\", \"quit\", <br/>             \"Level\", \"add\", \"Actor\", \"base\", \"butter\"]<br/>\u00a0<br/>    sorted\u00a0:= strs.dup // make a copy of original list <br/>    sorted.sort |Str a, Str b -&gt; Int|  // sort using custom comparator<br/>    {<br/>      if (b.size == a.size)           // if size is same<br/>        return a.compareIgnoreCase(b) // then sort in ascending lexicographic order, ignoring case<br/>      else<br/>        return b.size &lt;=&gt; a.size      // else sort in descending size order<br/>    }<br/>    echo (\"Started with\u00a0: \" + strs.join(\" \"))<br/>    echo (\"Finished with: \" + sorted.join(\" \"))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 33, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> sorts_with_custom_comparator<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">subroutine</span> a_sort<span class=\"br0\">(</span>a, cc<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw1\">interface</span><br/>       <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> cc<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>         <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> cc<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, increment<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">max</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>\u00a0<br/>    increment <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> increment &gt; <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> increment<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>          j <span class=\"sy0\">=</span> i<br/>          temp <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> j &gt;<span class=\"sy0\">=</span> increment<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> cc<span class=\"br0\">(</span>a<span class=\"br0\">(</span>j<span class=\"sy0\">-</span>increment<span class=\"br0\">)</span>, temp<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"sy0\">-</span>increment<span class=\"br0\">)</span><br/>             j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> increment<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>          a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> increment <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          increment <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">else</span><br/>          increment <span class=\"sy0\">=</span> increment <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"nu0\">11</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> a_sort<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> sorts_with_custom_comparator</pre>"}, {"lang": "FreeBASIC", "loc": 48, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 23-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"crt/stdlib.bi\" ' for qsort</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> mycmp <span class=\"kw1\">Cdecl</span> <span class=\"br0\">(</span>s1 <span class=\"kw1\">As</span> Any <span class=\"kw1\">Pointer</span>, s2 <span class=\"kw1\">As</span> Any <span class=\"kw1\">Pointer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"co1\">' -1 no swap first element before second element</span><br/>    <span class=\"co1\">'  0 no swap needed, don't care</span><br/>    <span class=\"co1\">'  1 swap first element after second element</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> str1 = *Cast<span class=\"br0\">(</span><span class=\"kw1\">String</span> <span class=\"kw1\">Ptr</span>, s1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> str2 = *Cast<span class=\"br0\">(</span><span class=\"kw1\">String</span> <span class=\"kw1\">Ptr</span>, s2<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> l1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span>, l2 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>l1 &gt; l2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> -<span class=\"nu0\">1</span> <span class=\"co1\">' descending</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>l1 &lt; l2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span>  <span class=\"nu0\">1</span> <span class=\"co1\">'</span><br/>\u00a0<br/>    <span class=\"co1\">' there equal length, sort ascending</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span> = <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">If</span> str1 &gt; str2 <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span> &gt; <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> words<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"st0\">\"Here\"</span>, <span class=\"st0\">\"are\"</span>, <span class=\"st0\">\"some\"</span>, <span class=\"st0\">\"sample\"</span>, _<br/>                                 <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"sorted\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong array_size = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>\u00a0<br/>qsort<span class=\"br0\">(</span>@words<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, array_size, <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span><span class=\"kw1\">String</span><span class=\"br0\">)</span>, @mycmp<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">def preceeds( a, b ) = b.length() &lt; a.length() or b.length() == a.length() and a.compareToIgnoreCase( b ) &lt; 0<br/>\u00a0<br/>println( [\"here\", \"are\", \"Some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"].sortWith(preceeds) )</pre>"}, {"lang": "Go", "loc": 27, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> sortable <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sortable<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sortable<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sortable<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    a<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> &gt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>ToLower<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> &lt; strings<span class=\"sy3\">.</span>ToLower<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> s sortable <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span><span class=\"st0\">\"To tell your name the livelong day To an admiring bog\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\"(original)\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    sort<span class=\"sy3\">.</span><span class=\"me1\">Sort</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\"(sorted)\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> strings <span class=\"sy0\">=</span> <span class=\"st0\">\"Here are some sample strings to be sorted\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>strings.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a> <span class=\"br0\">{</span> x, y <span class=\"sy0\">-&gt;</span><br/>    y.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=&gt;</span> x.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span>: x.<span class=\"me1\">compareToIgnoreCase</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> strings</pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>toLower<span class=\"br0\">)</span><br/>\u00a0<br/>lengthThenAZ <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ordering\"><span class=\"kw4\">Ordering</span></a><br/>lengthThenAZ a b<br/>  <span class=\"sy0\">|</span> d <span class=\"sy0\">==</span> EQ <span class=\"sy0\">=</span> on <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>toLower <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span> a b<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> d<br/>  <span class=\"kw1\">where</span><br/>    d <span class=\"sy0\">=</span> on <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a b<br/>\u00a0<br/>descLengthThenAZ <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ordering\"><span class=\"kw4\">Ordering</span></a><br/>descLengthThenAZ a b<br/>  <span class=\"sy0\">|</span> d <span class=\"sy0\">==</span> EQ <span class=\"sy0\">=</span> on <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>toLower <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span> a b<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> d<br/>  <span class=\"kw1\">where</span><br/>    d <span class=\"sy0\">=</span> on <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a b<br/>\u00a0<br/>xs <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>    <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> sortBy lengthThenAZ xs<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> sortBy descLengthThenAZ xs<span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>                     <span class=\"co1\">#: demonstrate various ways to sort a list and string</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Sorting Demo for custom comparator\"</span><span class=\"br0\">)</span><br/>   L <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"  Unsorted Input\u00a0: \"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"    \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   shellsort<span class=\"br0\">(</span>L<span class=\"sy1\">,</span>cmptask<span class=\"br0\">)</span>                <span class=\"co1\"># most of the RC sorts will work here</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"  Sorted Output\u00a0: \"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"    \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cmptask<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>   <span class=\"co1\"># sort by descending length and ascending lexicographic order for strings of equal length</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span>a <span class=\"sy1\">&gt;</span> <span class=\"sy1\">*</span>b<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>a <span class=\"sy1\">=</span> <span class=\"sy1\">*</span>b<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> b<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   mycmp=: <span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'/:u'</span><br/>   length_and_lex =: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"8ba6cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:#\u00a0; lower<span class=\"sy0\">)</span>&amp;&gt;<br/>   strings=: <span class=\"st_h\">'Here'</span>;<span class=\"st_h\">'are'</span>;<span class=\"st_h\">'some'</span>;<span class=\"st_h\">'sample'</span>;<span class=\"st_h\">'strings'</span>;<span class=\"st_h\">'to'</span>;<span class=\"st_h\">'be'</span>;<span class=\"st_h\">'sorted'</span><br/>   length_and_lex mycmp strings<br/>+-------+------+------+----+----+---+--+--+<br/>|strings|sample|sorted|Here|some|are|be|to|<br/>+-------+------+------+----+----+---+--+--+</pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Comparator</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Test <span class=\"br0\">{</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> strings = <span class=\"br0\">{</span><span class=\"st0\">\"Here\"</span>, <span class=\"st0\">\"are\"</span>, <span class=\"st0\">\"some\"</span>, <span class=\"st0\">\"sample\"</span>, <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"sorted\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>strings, <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Comparator.html\"><span class=\"kw46\">Comparator</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">public</span> <span class=\"kw3\">int</span> compare<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s1, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">int</span> c = s2.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - s1.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          c = s1.<span class=\"me1\">compareToIgnoreCase</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> c<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s: strings<span class=\"br0\">)</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>s + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> lengthSorter<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> b.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    result <span class=\"sy0\">=</span> a.<span class=\"me1\">localeCompare</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> test <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>test.<span class=\"me1\">sort</span><span class=\"br0\">(</span>lengthSorter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>alert<span class=\"br0\">(</span> test.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>                      <span class=\"co1\">// strings sample sorted Here some are be to</span></pre>"}, {"lang": "jq", "loc": 22, "block": "<pre class=\"text highlighted_source\">def quicksort(cmp):<br/>  if length &lt; 2 then .                                     # it is already sorted<br/>  else .[0] as $pivot<br/>    | reduce .[] as $x<br/>      # state: [less, equal, greater]<br/>      ( [ [], [], [] ];                                    # three empty arrays:<br/>        if   $x == $pivot then    .[1] += [$x]             # add x to equal<br/>        else ([$x,$pivot]|cmp) as $order<br/>          | if   $order == 0 then .[1] += [$x]             # ditto<br/>            elif ($order|type) == \"number\" then<br/>              if $order &lt; 0 then  .[0] += [$x]             # add x to less<br/>              else .[2] += [$x]                            # add x to greater<br/>              end<br/>            else ([$pivot,$x]|cmp) as $order2<br/>              | if $order and $order2 then   .[1] += [$x]  # add x to equal<br/>                elif $order then   .[0] += [$x]            # add x to less<br/>                else .[2] += [$x]                          # add x to greater<br/>                end<br/>            end<br/>        end )<br/>    | (.[0] | quicksort(cmp) ) + .[1] + (.[2] | quicksort(cmp) )<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">wl = filter(!isempty, split(\"\"\"You will rejoice to hear that no disaster has accompanied the<br/>    commencement of an enterprise which you have regarded with such evil<br/>    forebodings.\"\"\", r\"\\W+\"))<br/>\u00a0<br/>println(\"Original list:\\n - \", join(wl, \"\\n - \"))<br/>sort!(wl; by=x -&gt; (-length(x), lowercase(x)))<br/>println(\"\\nSorted list:\\n - \", join(wl, \"\\n - \"))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"text highlighted_source\">import java.util.Arrays<br/>\u00a0<br/>fun main(args: Array&lt;String&gt;) {<br/>    val strings = arrayOf(\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\")<br/>\u00a0<br/>    fun printArray(message: String, array: Array&lt;String&gt;) = with(array) {<br/>        print(\"$message [\")<br/>        forEachIndexed { index, string -&gt;<br/>            print(if (index == lastIndex) string else \"$string, \")<br/>        }<br/>        println(\"]\")<br/>    }<br/>\u00a0<br/>    printArray(\"Unsorted:\", strings)<br/>\u00a0<br/>    Arrays.sort(strings) { first, second -&gt;<br/>        val lengthDifference = second.length - first.length<br/>        if (lengthDifference == 0) first.compareTo(second, true) else lengthDifference<br/>    }<br/>\u00a0<br/>    printArray(\"Sorted:\", strings)<br/>}</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\">test <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"we\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"have\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> stringSorter<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw3\">string.lower</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw3\">string.lower</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>test<span class=\"sy0\">,</span> stringSorter<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- print sorted table</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>test<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 81, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Class Quick {<br/>            Private:<br/>         partition=lambda-&gt; {<br/>               Read &amp;A(), p, r\u00a0: i = p-1\u00a0: x=A(r)<br/>               For j=p to r-1 {If .LE(A(j), x) Then i++:Swap A(i),A(j)<br/>               }\u00a0: Swap A(i+1), A(r)\u00a0:  Push  i+2, i <br/>         }<br/>            Public:<br/>         LE=Lambda-&gt;Number&lt;=Number<br/>         Module ForStrings {<br/>               .partition&lt;=lambda-&gt; {<br/>                     Read &amp;a$(), p, r\u00a0: i = p-1\u00a0: x$=a$(r)<br/>                     For j=p to r-1 {If a$(j)&lt;= x$ Then i++:Swap a$(i),a$(j)<br/>                     }\u00a0: Swap a$(i+1), a$(r)\u00a0: Push i+2, i<br/>               }<br/>         }<br/>         Function quicksort {<br/>              Read ref$<br/>              {<br/>                      loop\u00a0: If Stackitem() &gt;= Stackitem(2) Then Drop 2\u00a0: if  empty then {Break} else continue<br/>                      over 2,2\u00a0: call .partition(ref$)\u00a0:shift 3 <br/>              }<br/>         }<br/>      }<br/>      Quick=Quick()<br/>\u00a0<br/>      ToSort$=\"this is a set of strings to sort This Is A Set Of Strings To Sort\"<br/>      Dim a$()<br/>      a$()=Piece$(ToSort$, \" \")<br/>      \\\\ we can redim to any range<br/>      Dim a$(100 to len(a$())+99)  ' from 100 to 115 (16 items)<br/>      Group Quick {<br/>            Module ForStringsSpecial {<br/>               .partition&lt;=lambda-&gt; {<br/>                        Read &amp;a$(), p, r\u00a0: i = p-1\u00a0: x$=a$(r)\u00a0:lx$=lcase$(x$)\u00a0: k=len(x$)<br/>                        For j=p to r-1 {<br/>                              m=len(a$(j))<br/>                              select case compare(m, k)<br/>                              case 0<br/>                              {<br/>                                   aj$=lcase$(a$(j))                              <br/>                                   if aj$&gt;lx$ then exit<br/>                                   if aj$=lx$ then if a$(j)&lt;=x$ then exit<br/>                                   i++ <br/>                                   Swap a$(i),a$(j) <br/>                              }<br/>                              case 1<br/>                              {<br/>                                    i++:Swap a$(i),a$(j)<br/>                              }<br/>                              End Select<br/>                     }\u00a0: Swap a$(i+1), a$(r)\u00a0: Push i+2, i<br/>               }<br/>         }<br/>      }<br/>      Document doc$={Unsorted List:<br/>      } <br/>      k=each(a$())<br/>      While k {<br/>            doc$=\"   \"+array$(k)+{<br/>            }<br/>      }<br/>      Quick.ForStringsSpecial<br/>      \\\\ Dimension(a$(), 0, 1) is Lbound a$() first dimension<br/>      \\\\ Dimension(a$(), 0, 1) is Ubound a$() first dimension<br/>      Call Quick.quicksort(&amp;a$(), Dimension(a$(), 0, 1), Dimension(a$(), 1,1))<br/>      k=each(a$())<br/>      Doc$={<br/>            Sorted List:<br/>            }<br/>      While k {<br/>            doc$=\"   \"+array$(k)+{<br/>            }<br/>      }<br/>      Report doc$<br/>      Clipboard doc$<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">StringOrderQ[x_String, y_String]\u00a0:= <br/> If[StringLength[x] == StringLength[y],<br/>       OrderedQ[{x, y}],<br/>       StringLength[x] &gt;StringLength[y]<br/>   ]<br/>words={\"on\",\"sunday\",\"sander\",\"sifted\",\"and\",\"sorted\",\"sambaa\",\"for\",\"a\",\"second\"};<br/>Sort[words,StringOrderQ]</pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">strangeorderp(a, b)\u00a0:= slength(a) &gt; slength(b) or (slength(a) = slength(b) and orderlessp(a, b))$<br/>s: tokens(\"Lorem ipsum dolor sit amet consectetur adipiscing elit Sed non risus Suspendisse\\<br/> lectus tortor dignissim sit amet adipiscing nec ultricies sed dolor\")$<br/>\u00a0<br/>sort(s, strangeorderp);<br/>[\"Suspendisse\", \"consectetur\", \"adipiscing\", \"adipiscing\", \"dignissim\", \"ultricies\",<br/>\"lectus\", \"tortor\", \"Lorem\", \"dolor\", \"dolor\", \"ipsum\", \"risus\", \"amet\", \"amet\",<br/>\"elit\", \"Sed\", \"nec\", \"non\", \"sed\", \"sit\", \"sit\"]</pre>"}, {"lang": "MAXScript", "loc": 23, "block": "<pre class=\"text highlighted_source\">fn myCmp str1 str2 =<br/>(<br/>    case of<br/>    (<br/>        (str1.count &lt; str2.count):  1<br/>        (str1.count &gt; str2.count): -1<br/>        default:(<br/>                -- String compare is case sensitive, name compare isn't. Hence...<br/>                str1 = str1 as name<br/>                str2 = str2 as name<br/>                case of<br/>                (<br/>                    (str1 &gt; str2):  1<br/>                    (str1 &lt; str2): -1<br/>                    default:        0<br/>                )<br/>                )<br/>    )<br/>)\t<br/>\u00a0<br/>strList = #(\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\")<br/>qSort strList myCmp<br/>print strList</pre>"}, {"lang": "Nemerle", "loc": 13, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>\u00a0<br/>module CustomSort<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def strings1 = [\"these\", \"are\", \"strings\", \"of\", \"different\", \"length\"];<br/>        def strings2 = [\"apple\", \"House\", \"chewy\", \"Salty\", \"rises\", \"Later\"];<br/>\u00a0<br/>        WriteLine(strings1.Sort((x, y) =&gt; y.Length.CompareTo(x.Length)));<br/>        WriteLine(strings2.Sort((x, y) =&gt; x.CompareTo(y)))<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 33, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RSortCustomComparator <span class=\"kw2\">public</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  sample = <span class=\"br0\">[</span>String <span class=\"st0\">'Here'</span>, <span class=\"st0\">'are'</span>, <span class=\"st0\">'some'</span>, <span class=\"st0\">'sample'</span>, <span class=\"st0\">'strings'</span>, <span class=\"st0\">'to'</span>, <span class=\"st0\">'be'</span>, <span class=\"st0\">'sorted'</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">say</span> displayArray<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/>  Arrays.<span class=\"me0\">sort</span><span class=\"br0\">(</span>sample, LengthComparator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> displayArray<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method displayArray<span class=\"br0\">(</span>harry = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">constant</span><br/>  disp = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> elmt over harry<br/>    disp = disp<span class=\"st0\">','</span>elmt<br/>    <span class=\"kw3\">end</span> elmt<br/>  <span class=\"kw1\">return</span> <span class=\"st0\">'['</span>disp.<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">']'</span> <span class=\"co1\">-- trim leading comma</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RSortCustomComparator.<span class=\"me0\">LengthComparator</span> <span class=\"kw2\">implements</span> Comparator<br/>\u00a0<br/>method <span class=\"kw6\">compare</span><span class=\"br0\">(</span>lft = Object, rgt = Object<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> int<br/>  cRes = int<br/>  <span class=\"kw1\">if</span> lft <span class=\"sy0\">&lt;</span>= String, rgt <span class=\"sy0\">&lt;</span>= String <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    cRes = <span class=\"br0\">(</span>String rgt<span class=\"br0\">)</span>.<span class=\"me0\">length</span> - <span class=\"br0\">(</span>String lft<span class=\"br0\">)</span>.<span class=\"me0\">length</span><br/>    <span class=\"kw1\">if</span> cRes == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> cRes = <span class=\"br0\">(</span>String lft<span class=\"br0\">)</span>.<span class=\"me0\">compareToIgnoreCase</span><span class=\"br0\">(</span>String rgt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">'Arguments must be Strings'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> cRes<br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 4, "block": "<pre class=\"text highlighted_source\">sort fork [=[tally first,tally last],up, &gt;= [tally first,tally last]] ['Here', 'are', 'some', 'sample', 'strings', 'to', 'be', 'sorted']<br/>=+-------+------+------+----+----+---+--+--+<br/>=|strings|sample|sorted|Here|some|are|be|to|<br/>=+-------+------+------+----+----+---+--+--+</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import strutils, algorithm<br/>\u00a0<br/>var strings = \"here are Some sample strings to be sorted\".split(' ')<br/>\u00a0<br/>strings.sort(proc (x,y: string): int =<br/>  cmp(y.len, x.len))<br/>\u00a0<br/>echo strings</pre>"}, {"lang": "Objeck", "loc": 57, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    v <span class=\"sy0\">:=</span> CreateHolders<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"unsorted: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    v<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"sorted: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> CreateHolders<span class=\"br0\">(</span>strings <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ CompareVector <span class=\"br0\">{</span><br/>    vector <span class=\"sy0\">:=</span> CompareVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> strings<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      vector<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>StringHolder<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>strings<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> vector<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Show<span class=\"br0\">(</span>v <span class=\"sy0\">:</span> CompareVector<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">:=</span> v<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>StringHolder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> v<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        '<span class=\"sy0\">,</span>'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    '\\n'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> StringHolder implements Compare <span class=\"br0\">{</span><br/>  @s <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>s <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @s <span class=\"sy0\">:=</span> s<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Compare<span class=\"br0\">(</span>c <span class=\"sy0\">:</span> Compare<span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    h <span class=\"sy0\">:=</span> c<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>StringHolder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    r <span class=\"sy0\">:=</span> h<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    size <span class=\"sy0\">:=</span> r<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> @s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>size <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      size <span class=\"sy0\">:=</span> @s<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Compare</span><span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> size<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> HashID<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @s<span class=\"sy0\">-&gt;</span><span class=\"me1\">HashID</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @s<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 28, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">#define esign(X) (((X)&gt;0)?1:(((X)&lt;0)?-1:0))</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>arr <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a><br/>      arrayWithArray<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"this is a set of strings to sort\"</span><br/>                       componentsSeparatedByString<span class=\"sy0\">:</span> <span class=\"co3\">@</span><span class=\"st0\">\" \"</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"br0\">[</span>arr sortUsingComparator<span class=\"sy0\">:</span> <span class=\"sy0\">^</span>NSComparisonResult<span class=\"br0\">(</span><span class=\"kw4\">id</span> obj1, <span class=\"kw4\">id</span> obj2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      NSComparisonResult l <span class=\"sy0\">=</span> esign<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">[</span>obj1 length<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span>obj2 length<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> l\u00a0? <span class=\"sy0\">-</span>l <span class=\"co2\">// reverse the ordering</span><br/>               <span class=\"sy0\">:</span> <span class=\"br0\">[</span>obj1 caseInsensitiveCompare<span class=\"sy0\">:</span> obj2<span class=\"br0\">]</span>;<br/>     <span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>str <span class=\"kw1\">in</span> arr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, str<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">EXIT_SUCCESS</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> mycmp s1 s2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s1 <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s2 <span class=\"kw1\">then</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s2<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>lowercase s1<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>lowercase s2<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">String method: customCmp(s)<br/>   s size self size &gt; ifTrue: [ true return ]<br/>   s size self size &lt; ifTrue: [ false return ]<br/>   s toUpper self toUpper &lt;=\u00a0;<br/>\u00a0<br/>[\"this\", \"is\", \"a\", \"set\", \"of\", \"strings\", \"to\", \"sort\", \"This\", \"Is\", \"A\", \"Set\", \"Of\", \"Strings\", \"To\", \"Sort\"] <br/>sortWith(#customCmp) println</pre>"}, {"lang": "ooRexx", "loc": 10, "block": "<pre class=\"oorexx highlighted_source\">A=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">'The seven deadly sins'</span>,<span class=\"st0\">'Pride'</span>,<span class=\"st0\">'avarice'</span>,<span class=\"st0\">'Wrath'</span>,<span class=\"st0\">'envy'</span>,<span class=\"st0\">'gluttony'</span>,<span class=\"st0\">'sloth'</span>,<span class=\"st0\">'Lust'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Sorted in order of descending length, and in ascending lexicographic order'</span><br/><span class=\"kw1\">say</span> A~sortWith<span class=\"br0\">(</span><span class=\"sy0\">.</span>DescLengthAscLexical~new<span class=\"br0\">)</span>~makeString<br/>\u00a0<br/>::class DescLengthAscLexical mixinclass Comparator<br/>::method <span class=\"kw6\">compare</span><br/><span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">left</span>~<span class=\"kw6\">length</span>==<span class=\"kw6\">right</span>~<span class=\"kw6\">length</span><br/>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw6\">left</span>~caselessCompareTo<span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> <span class=\"kw6\">right</span>~length-<span class=\"kw6\">left</span>~<span class=\"kw6\">length</span></pre>"}, {"lang": "Oz", "loc": 21, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LexicographicLessThan</span> Xs Ys<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span><br/>        X <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Map Xs Char<span class=\"sy0\">.</span>toLower<span class=\"br0\">}</span><br/>        Y <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Map Ys Char<span class=\"sy0\">.</span>toLower<span class=\"br0\">}</span><br/>        return:Return<br/>        default:<span class=\"br0\">{</span>Length Xs<span class=\"br0\">}</span><span class=\"sy0\">&lt;</span><span class=\"br0\">{</span>Length Ys<span class=\"br0\">}</span><br/>     <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> X <span class=\"sy0\">&lt;</span> Y <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Return <span class=\"kw1\">true</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LessThan</span> Xs Ys<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Length Xs<span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span>Length Ys<span class=\"br0\">}</span><br/>     <span class=\"kw1\">orelse</span><br/>     <span class=\"br0\">{</span>Length Xs<span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"br0\">{</span>Length Ys<span class=\"br0\">}</span> <span class=\"kw1\">andthen</span> <span class=\"br0\">{</span>LexicographicLessThan Xs Ys<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Strings = <span class=\"br0\">[</span><span class=\"st0\">\"Here\"</span> <span class=\"st0\">\"are\"</span> <span class=\"st0\">\"some\"</span> <span class=\"st0\">\"sample\"</span> <span class=\"st0\">\"strings\"</span> <span class=\"st0\">\"to\"</span> <span class=\"st0\">\"be\"</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Sort Strings LessThan<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">cmp</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#a<span class=\"sy0\">&lt;</span>#b<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#a<span class=\"sy0\">&gt;</span>#b<span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">lex</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"kw1\">cmp</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> mycmp <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;=&gt;</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$a</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$a</span> <span class=\"kw1\">cmp</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$b</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@strings</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> mycmp <span class=\"re0\">@strings</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> mycmp <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;=&gt;</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$a</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$a</span> <span class=\"kw1\">cmp</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$b</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@strings</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> mycmp <span class=\"re0\">@strings</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@strings</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>Here are some sample strings to be sorted<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sorted_strings</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$^a</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$^b</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"kw1\">or</span> <span class=\"re0\">$^a</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$^b</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@strings</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@sorted_strings</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># If instead the function you feed to &lt;code&gt;sort&lt;/code&gt; is of arity 1, it will do the Schwartzian transform for you, automatically sorting numeric fields numerically, and strings fields stringily:</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@sorted_strings</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"re0\">$x</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@strings</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function my_compare(sequence a, sequence b)<br/>    if length(a)!=length(b) then<br/>        return -compare(length(a),length(b))<br/>    else<br/>        return compare(lower(a),lower(b))<br/>    end if<br/>end function<br/>?custom_sort(routine_id(\"my_compare\"),{\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"})</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> mycmp<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$s2</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/strcasecmp\"><span class=\"kw3\">strcasecmp</span></a><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$s2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$strings</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/usort\"><span class=\"kw3\">usort</span></a><span class=\"br0\">(</span><span class=\"re0\">$strings</span><span class=\"sy0\">,</span> <span class=\"st0\">\"mycmp\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (sort '(\"def\" \"abc\" \"ghi\") &gt;)    <br/>-&gt; (\"ghi\" \"def\" \"abc\")</pre>"}, {"lang": "PL/I", "loc": 70, "block": "<pre class=\"pli highlighted_source\">MRGEPKG<span class=\"sy0\">:</span> <span class=\"kw1\">package</span> <span class=\"kw1\">exports</span><span class=\"br0\">(</span>MERGESORT<span class=\"sy0\">,</span>MERGE<span class=\"sy0\">,</span>RMERGE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">DCL</span> <span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* scratch space of length N/2 */</span><br/>\u00a0<br/>MERGE<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span>LA<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>LB<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>CMPFN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>B<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>C<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>LA<span class=\"sy0\">,</span>LB<span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">NONASGN</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>I<span class=\"sy0\">,</span>J<span class=\"sy0\">,</span>K<span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> CMPFN <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span><br/>          <span class=\"kw1\">NONASGN</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"sy0\">,</span><br/>          <span class=\"kw1\">NONASGN</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">RETURNS</span> <span class=\"br0\">(</span><span class=\"kw1\">FIXED</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   I<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> LA<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>J <span class=\"sy0\">&lt;=</span> LB<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">IF</span> CMPFN<span class=\"br0\">(</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">,</span>B<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>         <span class=\"kw1\">DO</span><span class=\"sy0\">;</span> C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> I<span class=\"sy0\">=</span>I<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">ELSE</span><br/>         <span class=\"kw1\">DO</span><span class=\"sy0\">;</span> C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>B<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> J<span class=\"sy0\">=</span>J<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> LA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"sy0\">=</span>I<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> MERGE<span class=\"sy0\">;</span><br/>\u00a0<br/>MERGESORT<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span>N<span class=\"sy0\">,</span>CMPFN<span class=\"br0\">)</span> <span class=\"kw1\">RECURSIVE</span> <span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> N                    <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">NONASGN</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> CMPFN                <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span><br/>          <span class=\"kw1\">NONASGN</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"sy0\">,</span><br/>          <span class=\"kw1\">NONASGN</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span><span class=\"br0\">)</span><br/>                                  <span class=\"kw1\">RETURNS</span> <span class=\"br0\">(</span><span class=\"kw1\">FIXED</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>M<span class=\"sy0\">,</span>I<span class=\"br0\">)</span>                <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> AMP1<span class=\"br0\">(</span>N<span class=\"br0\">)</span>              <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span> <span class=\"kw1\">BASED</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> P <span class=\"kw1\">POINTER</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/>   M <span class=\"sy0\">=</span> <span class=\"kw1\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> M <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">CALL</span> MERGESORT<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>M<span class=\"sy0\">,</span>CMPFN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   P<span class=\"sy0\">=</span><span class=\"kw1\">ADDR</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>M<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N<span class=\"sy0\">-</span>M <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">CALL</span> MERGESORT<span class=\"br0\">(</span>AMP1<span class=\"sy0\">,</span>N<span class=\"sy0\">-</span>M<span class=\"sy0\">,</span>CMPFN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> CMPFN<span class=\"br0\">(</span>A<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">,</span>AMP1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> M<span class=\"sy0\">;</span> T<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">CALL</span> MERGE<span class=\"br0\">(</span>T<span class=\"sy0\">,</span>M<span class=\"sy0\">,</span>AMP1<span class=\"sy0\">,</span>N<span class=\"sy0\">-</span>M<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>CMPFN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> MERGESORT<span class=\"sy0\">;</span><br/>\u00a0<br/>RMERGE<span class=\"sy0\">:</span> <span class=\"kw1\">PROC</span> <span class=\"kw1\">OPTIONS</span><span class=\"br0\">(</span><span class=\"kw1\">MAIN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">DCL</span> I <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">DCL</span> A<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span> <span class=\"kw1\">INIT</span><span class=\"br0\">(</span><span class=\"st0\">\"this\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"is\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"set\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"of\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"sort\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>MyCMP<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span><span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span> <span class=\"kw1\">RETURNS</span> <span class=\"br0\">(</span><span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DCL</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">VAR</span> <span class=\"kw1\">NONASGN</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DCL</span> <span class=\"br0\">(</span>I<span class=\"sy0\">,</span>J<span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   I <span class=\"sy0\">=</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> J <span class=\"sy0\">=</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> I <span class=\"sy0\">&lt;</span> J <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> I <span class=\"sy0\">&gt;</span> J <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> <span class=\"kw1\">lowercase</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw1\">lowercase</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> <span class=\"kw1\">lowercase</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw1\">lowercase</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> MyCMP<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">CALL</span> MERGESORT<span class=\"br0\">(</span>A<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span>MyCMP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">DO</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>I<span class=\"sy0\">,</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>X<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>A<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">skip</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> RMERGE<span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 21, "block": "<pre class=\"text highlighted_source\">lvars ls = ['Here' 'are' 'some' 'sample' 'strings' 'to' 'be' 'sorted'];<br/>define compare(s1, s2);<br/>lvars k = length(s2) - length(s1);<br/>if k &lt; 0 then<br/>    return(true);<br/>elseif k &gt; 0 then<br/>    return(false);<br/>else<br/>    return (alphabefore(uppertolower(s1), uppertolower(s2)));<br/>endif;<br/>enddefine;<br/>\u00a0<br/>syssort(ls, compare) -&gt; ls;<br/>\u00a0<br/>NOTE: The definition of compare can also be written thus:<br/>define compare(s1, s2);<br/> lvars<br/>     l1 = length(s1),<br/>     l2 = length(s2);<br/> l1 &gt; l2 or (l1 == l2 and alphabefore(uppertolower(s1), uppertolower(s2)))<br/>enddefine;</pre>"}, {"lang": "PowerBASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">FUNCTION Sorter(p1 AS STRING, p2 AS STRING) AS LONG<br/>    'if p1 should be first, returns -1<br/>    'if p2 should be first, returns 1<br/>    '     if they're equal, returns 0<br/>    IF LEN(p1) &gt; LEN(p2) THEN<br/>        FUNCTION = -1<br/>    ELSEIF LEN(p2) &gt; LEN(p1) THEN<br/>        FUNCTION = 1<br/>    ELSEIF UCASE$(p1) &gt; UCASE$(p2) THEN<br/>        'if we get here, they're of equal length,<br/>        'so now we're doing a \"normal\" string comparison<br/>        FUNCTION = -1<br/>    ELSEIF UCASE$(p2) &gt; UCASE$(p1) THEN<br/>        FUNCTION = 1<br/>    ELSE<br/>        FUNCTION = 0<br/>    END IF<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION PBMAIN()<br/>    DIM x(7) AS STRING<br/>    ARRAY ASSIGN x() = \"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"<br/>\u00a0<br/>    'pb's built-in sorting; \"USING\" tells it to use our custom comparator<br/>    ARRAY SORT x(), USING Sorter()<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$list</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Here\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"are\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"some\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sample\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted\"</span><br/><span class=\"re0\">$list</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Length<span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 19, "block": "<pre class=\"prolog highlighted_source\">rosetta_sort <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span>\"Here\"<span class=\"sy4\">,</span> \"are\"<span class=\"sy4\">,</span> \"some\"<span class=\"sy4\">,</span> \"sample\"<span class=\"sy4\">,</span> \"strings\"<span class=\"sy4\">,</span> \"to\"<span class=\"sy4\">,</span> \"be\"<span class=\"sy4\">,</span> \"sorted\" <span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tpredsort<span class=\"br0\">(</span>my_comp<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span><span class=\"st_h\">'Input list\u00a0:'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span><span class=\"st_h\">'Sorted list\u00a0:'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>my_comp<span class=\"br0\">(</span>Comp<span class=\"sy4\">,</span> W1<span class=\"sy4\">,</span> W2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span>L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>W2<span class=\"sy4\">,</span> L2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   L1 <span class=\"sy6\">&lt;</span> L2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Comp <span class=\"sy6\">=</span> <span class=\"st_h\">'&gt;'</span><br/>\t<span class=\"sy4\">;</span>   L1 <span class=\"sy6\">&gt;</span> L2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Comp <span class=\"sy6\">=</span> <span class=\"st_h\">'&lt;'</span><br/>\t<span class=\"sy4\">;</span>   compare<span class=\"br0\">(</span>Comp<span class=\"sy4\">,</span> W1<span class=\"sy4\">,</span> W2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span>W<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~s '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>W<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\">strings <span class=\"sy0\">=</span> <span class=\"st0\">\"here are Some sample strings to be sorted\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mykey<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> -<span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>strings<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span>mykey<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">v = c(\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\")<br/>print(v[order(-nchar(v), tolower(v))])</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Using a combination of the two comparisons<br/>(define (sort1 words)<br/>  (sort words (\u03bb(x y)<br/>                (define xl (string-length x)) (define yl (string-length y))<br/>                (or (&gt; xl yl) (and (= xl yl) (string-ci&lt;? x y))))))<br/>(sort1 '(\"Some\" \"pile\" \"of\" \"words\"))<br/>;; -&gt; '(\"words\" \"pile\" \"Some\" \"of\")<br/>\u00a0<br/>;; Doing two sorts, relying on `sort's stability<br/>(define (sort2 words)<br/>  (sort (sort words string-ci&lt;?) &gt; #:key string-length))<br/>(sort2 '(\"Some\" \"pile\" \"of\" \"words\"))<br/>;; -&gt; '(\"words\" \"pile\" \"Some\" \"of\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 130, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program sorts a (stemmed) array using the  merge-sort method. */</span><br/><span class=\"coMULTI\">/*   using mycmp function for the sort order                         */</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* mergesort taken from REXX (adapted for ooRexx (and all other REXXes))<br/>* 28.07.2013 Walter Pachl<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Call</span> gena                        <span class=\"coMULTI\">/* generate the array elements.   */</span><br/>  <span class=\"kw1\">Call</span> showa <span class=\"st0\">'before sort'</span>         <span class=\"coMULTI\">/* show the before array elements.*/</span><br/>  <span class=\"kw1\">Call</span> mergeSort highitem          <span class=\"coMULTI\">/* invoke the merge sort for array*/</span><br/>  <span class=\"kw1\">Call</span> showa <span class=\"st0\">' after sort'</span>         <span class=\"coMULTI\">/* show the  after array elements.*/</span><br/>  <span class=\"kw1\">Exit</span>                             <span class=\"coMULTI\">/* stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*---------------------------------GENa subroutine-------------------*/</span><br/>gena:<br/>  a<span class=\"sy0\">.</span>=<span class=\"st0\">''</span>                            <span class=\"coMULTI\">/* assign default value for a stem*/</span><br/>  a<span class=\"sy0\">.</span>1=<span class=\"st0\">'---The seven deadly sins---'</span><span class=\"coMULTI\">/* everybody:  pick your favorite.*/</span><br/>  a<span class=\"sy0\">.</span>2=<span class=\"st0\">'==========================='</span><br/>  a<span class=\"sy0\">.</span>3=<span class=\"st0\">'pride'</span><br/>  a<span class=\"sy0\">.</span>4=<span class=\"st0\">'avarice'</span><br/>  a<span class=\"sy0\">.</span>5=<span class=\"st0\">'wrath'</span><br/>  a<span class=\"sy0\">.</span>6=<span class=\"st0\">'envy'</span><br/>  a<span class=\"sy0\">.</span>7=<span class=\"st0\">'gluttony'</span><br/>  a<span class=\"sy0\">.</span>8=<span class=\"st0\">'sloth'</span><br/>  a<span class=\"sy0\">.</span>9=<span class=\"st0\">'lust'</span><br/>  <span class=\"kw1\">Do</span> highitem=<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> a<span class=\"sy0\">.</span>highitem<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"coMULTI\">/*find number of entries       */</span><br/>    <span class=\"kw3\">End</span><br/>  highitem=highitem-<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/* adjust highitem by -1.         */</span><br/>  <span class=\"kw1\">Return</span><br/><span class=\"coMULTI\">/*---------------------------------MERGETOa subroutine---------------*/</span><br/>mergetoa: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> a<span class=\"sy0\">.</span>\u00a0!<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> l,n<br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> n==<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Nop</span><br/>    <span class=\"kw3\">When</span> n==<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      h=l+<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> mycmp<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>l,a<span class=\"sy0\">.</span>h<span class=\"br0\">)</span>=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>        _=a<span class=\"sy0\">.</span>h<br/>        a<span class=\"sy0\">.</span>h=a<span class=\"sy0\">.</span>l<br/>        a<span class=\"sy0\">.</span>l=_<br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span><br/>      m=n%2<br/>      <span class=\"kw1\">Call</span> mergeToa l+m,n-m<br/>      <span class=\"kw1\">Call</span> mergeTo! l,m,<span class=\"nu0\">1</span><br/>      i=<span class=\"nu0\">1</span><br/>      j=l+m<br/>      <span class=\"kw1\">Do</span> k=l <span class=\"kw2\">While</span> k<span class=\"sy0\">&lt;</span>j<br/>        <span class=\"kw1\">If</span> j==l+n<span class=\"sy0\">|</span>mycmp<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>i,a<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>          a<span class=\"sy0\">.</span>k=!<span class=\"sy0\">.</span>i<br/>          i=i+<span class=\"nu0\">1</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>          a<span class=\"sy0\">.</span>k=a<span class=\"sy0\">.</span>j<br/>          j=j+<span class=\"nu0\">1</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/><span class=\"coMULTI\">/*---------------------------------MERGESORT subroutine--------------*/</span><br/>mergesort: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> a<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">Call</span> mergeToa <span class=\"nu0\">1</span>,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span><br/><span class=\"coMULTI\">/*---------------------------------MERGETO! subroutine---------------*/</span><br/>mergeto!: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> a<span class=\"sy0\">.</span>\u00a0!<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> l,n,_<br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> n==<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>     \u00a0!<span class=\"sy0\">.</span>_=a<span class=\"sy0\">.</span>l<br/>    <span class=\"kw3\">When</span> n==<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      h=l+<span class=\"nu0\">1</span><br/>      q=<span class=\"nu0\">1</span>+_<br/>      <span class=\"kw1\">If</span> mycmp<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>l,a<span class=\"sy0\">.</span>h<span class=\"br0\">)</span>=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>        q=_<br/>        _=q+<span class=\"nu0\">1</span><br/>        <span class=\"kw3\">End</span><br/>     \u00a0!<span class=\"sy0\">.</span>_=a<span class=\"sy0\">.</span>l<br/>     \u00a0!<span class=\"sy0\">.</span>q=a<span class=\"sy0\">.</span>h<br/>      <span class=\"kw1\">Return</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span><br/>      m=n%2<br/>      <span class=\"kw1\">Call</span> mergeToa l,m<br/>      <span class=\"kw1\">Call</span> mergeTo! l+m,n-m,m+_<br/>      i=l<br/>      j=m+_<br/>      <span class=\"kw1\">Do</span> k=_ <span class=\"kw2\">While</span> k<span class=\"sy0\">&lt;</span>j<br/>        <span class=\"kw1\">If</span> j==n+_<span class=\"sy0\">|</span>mycmp<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>i,!<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>         \u00a0!<span class=\"sy0\">.</span>k=a<span class=\"sy0\">.</span>i<br/>          i=i+<span class=\"nu0\">1</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>         \u00a0!<span class=\"sy0\">.</span>k=!<span class=\"sy0\">.</span>j<br/>          j=j+<span class=\"nu0\">1</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/><span class=\"coMULTI\">/*---------------------------------SHOWa subroutine------------------*/</span><br/>showa:<br/>  widthh=<span class=\"kw6\">length</span><span class=\"br0\">(</span>highitem<span class=\"br0\">)</span>           <span class=\"coMULTI\">/* maximum the width of any line.*/</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> highitem<br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'element'</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,widthh<span class=\"br0\">)</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> a<span class=\"sy0\">.</span>j<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>,<span class=\"nu0\">60</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/* show a separator line (fence).*/</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>mycmp: <span class=\"kw1\">Procedure</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* shorter string considered higher<br/>* when lengths are equal: caseless 'Z' considered higher than 'X' etc.<br/>* Result:  1  B consider higher than A<br/>*         -1  A consider higher than B<br/>*          0  A==B (caseless)<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Upper</span> <span class=\"kw1\">Arg</span> A,B<br/>    A=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    B=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>    I = <span class=\"kw6\">length</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    J = <span class=\"kw6\">length</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Select</span><br/>      <span class=\"kw3\">When</span> I <span class=\"sy0\">&lt;&lt;</span> J <span class=\"kw3\">THEN</span> res=<span class=\"nu0\">1</span><br/>      <span class=\"kw3\">When</span> I <span class=\"sy0\">&gt;&gt;</span> J <span class=\"kw3\">THEN</span> res=-<span class=\"nu0\">1</span><br/>      <span class=\"kw3\">When</span> A <span class=\"sy0\">&gt;&gt;</span> B <span class=\"kw3\">THEN</span> res=<span class=\"nu0\">1</span><br/>      <span class=\"kw3\">When</span> A <span class=\"sy0\">&lt;&lt;</span> B <span class=\"kw3\">THEN</span> res=-<span class=\"nu0\">1</span><br/>      <span class=\"kw3\">Otherwise</span>        res=<span class=\"nu0\">0</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">RETURN</span> res</pre>"}, {"lang": "Ring", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"stdlib.ring\"<br/>\u00a0<br/>sList = newlist(8, 2)<br/>aList = [\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"]<br/>ind = len(aList)<br/>\u00a0<br/>for n = 1 to ind<br/>    sList[n] [1] = aList[n]<br/>    sList[n] [2] = len(aList[n])<br/>next<br/>\u00a0<br/>nList = sortFirstSecond(sList, 2)<br/>oList = newlist(8, 2)<br/>count = 0<br/>\u00a0<br/>for n = len(nList) to 1 step -1<br/>    count = count + 1<br/>    oList[count] [1] = nList[n] [1]<br/>    oList[count] [2] = nList[n] [2]<br/>next<br/>\u00a0<br/>for n = 1 to len(oList) - 1<br/>    temp1 = oList[n] [1]<br/>    temp2 = oList[n+1] [1]<br/>    if (oList[n] [2] = oList[n+1] [2]) and (strcmp(temp1, temp2) &gt; 0)<br/>       temp = oList[n] [1]<br/>       oList[n] [1] = oList[n+1] [1]<br/>       oList[n+1] [1] = temp<br/>    ok<br/>next<br/>\u00a0<br/>for n = 1 to len(oList)<br/>    see oList[n] [1] + nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">words = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>Here are some sample strings to be sorted<span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> words.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>word<span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span>word.<span class=\"me1\">size</span>, word.<span class=\"me1\">downcase</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    let mut words = [\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"];<br/>    words.sort_by(|l, r| if l.len() == r.len() {<br/>        l.cmp(&amp;r)<br/>    } else {<br/>        r.len().cmp(&amp;l.len())<br/>    });<br/>    println!(\"{:?}\", words);<br/>}<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 15, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  custom_comp(a, b:STR):BOOL is<br/>    l\u00a0::= a.length - b.length;<br/>    if l = 0 then return a.lower &lt; b.lower; end;<br/>    return l &gt; 0;<br/>  end;<br/>\u00a0<br/>  main is<br/>    s:ARRAY{STR}\u00a0:= |\"this\", \"is\", \"an\", \"array\", \"of\", \"strings\", \"to\", \"sort\"|;<br/>\u00a0<br/>    s.insertion_sort_by(bind(custom_comp(_,_)));<br/>    loop #OUT + s.elt! + \"\\n\"; end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\">List<span class=\"br0\">(</span><span class=\"st0\">\"Here\"</span>, <span class=\"st0\">\"are\"</span>, <span class=\"st0\">\"some\"</span>, <span class=\"st0\">\"sample\"</span>, <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"sorted\"</span><span class=\"br0\">)</span>.<span class=\"me1\">sortWith</span><span class=\"br0\">{</span><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cmp<span class=\"sy0\">=</span>a.<span class=\"me1\">size</span>-b.<span class=\"me1\">size</span><br/>  <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cmp<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> -a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> cmp<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 10, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use srfi<span class=\"sy0\">-</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"co1\">;;Syntax for module inclusion depends on implementation, </span><br/><span class=\"co1\">;;a sort function may be predefined, or available through srfi 95</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mypred? a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>len<span class=\"sy0\">-</span>a <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>len<span class=\"sy0\">-</span>b <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> len<span class=\"sy0\">-</span>a len<span class=\"sy0\">-</span>b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>string<span class=\"sy0\">&gt;</span>? <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>downcase b<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>downcase a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> len<span class=\"sy0\">-</span>a len<span class=\"sy0\">-</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>sort '<span class=\"br0\">(</span><span class=\"st0\">\"sorted\"</span> <span class=\"st0\">\"here\"</span> <span class=\"st0\">\"strings\"</span> <span class=\"st0\">\"sample\"</span> <span class=\"st0\">\"Some\"</span> <span class=\"st0\">\"are\"</span> <span class=\"st0\">\"be\"</span> <span class=\"st0\">\"to\"</span><span class=\"br0\">)</span> mypred?<span class=\"br0\">)</span> </pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">func mycmp<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>b.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;=&gt;</span> a.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>a.<span class=\"me1\">lc</span> <span class=\"sy0\">&lt;=&gt;</span> b.<span class=\"me1\">lc</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/>var strings = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>Here are some sample strings to be sorted<span class=\"br0\">)</span>;<br/>var sorted = strings.<span class=\"me1\">sort</span><span class=\"br0\">(</span>mycmp<span class=\"br0\">)</span>;</pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">define: #words -&gt; #('here' 'are' 'some' 'sample' 'strings' 'to' 'sort' 'since' 'this' 'exercise' 'is' 'not' 'really' 'all' 'that' 'dumb' '(sorry)').<br/>words sortBy: [|\u00a0:first\u00a0:second | (first lexicographicallyCompare: second) isNegative]</pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"st0\">'here'</span> <span class=\"st0\">'are'</span> <span class=\"st0\">'some'</span> <span class=\"st0\">'sample'</span> <span class=\"st0\">'strings'</span> <span class=\"st0\">'to'</span> <span class=\"st0\">'sort'</span> <span class=\"st0\">'since'</span> <span class=\"st0\">'this'</span> <span class=\"st0\">'exercise'</span> <span class=\"st0\">'is'</span> <span class=\"st0\">'not'</span> <span class=\"st0\">'really'</span> <span class=\"st0\">'all'</span> <span class=\"st0\">'that'</span> <span class=\"st0\">'dumb'</span> <span class=\"st0\">'(sorry)'</span> <span class=\"br0\">)</span> asSortedCollection<br/>          sortBlock:<br/>                     <span class=\"br0\">[</span>:<span class=\"re5\">first</span>\u00a0:<span class=\"re5\">second</span> | <span class=\"br0\">(</span><span class=\"re5\">second</span> size <span class=\"sy0\">=</span> <span class=\"re5\">first</span> size<span class=\"br0\">)</span><br/>                                            ifFalse: <span class=\"br0\">[</span><span class=\"re5\">second</span> size &lt; first size<span class=\"br0\">]</span><br/>                                            ifTrue: <span class=\"br0\">[</span><span class=\"re5\">first</span> &lt; second<span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">fun mygt (s1, s2) =<br/>  if size s1 &lt;&gt; size s2 then<br/>    size s2 &gt; size s1<br/>  else<br/>    String.map Char.toLower s1 &gt; String.map Char.toLower s2</pre>"}, {"lang": "Swift", "loc": 30, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>var list = [\"this\",<br/>  \"is\",<br/>  \"a\",<br/>  \"set\",<br/>  \"of\",<br/>  \"strings\",<br/>  \"to\",<br/>  \"sort\",<br/>  \"This\",<br/>  \"Is\",<br/>  \"A\",<br/>  \"Set\",<br/>  \"Of\",<br/>  \"Strings\",<br/>  \"To\",<br/>  \"Sort\"]<br/>\u00a0<br/>list.sortInPlace {lhs, rhs in<br/>  let lhsCount = lhs.characters.count<br/>  let rhsCount = rhs.characters.count<br/>  let result = rhsCount - lhsCount<br/>\u00a0<br/>  if result == 0 {<br/>    return lhs.lowercaseString &gt; rhs.lowercaseString<br/>  }<br/>\u00a0<br/>  return lhsCount &gt; rhsCount<br/>}</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> sorter <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> la <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> lb <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$la</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$lb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$la</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$lb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> compare <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> strings <span class=\"br0\">{</span>here are Some sample strings to be sorted<span class=\"br0\">}</span><br/><span class=\"kw2\">lsort</span> -command sorter <span class=\"re0\">$strings</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; strings sample sorted here Some are be to</span></pre>"}, {"lang": "TUSCRIPT", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>setofstrings=\"this is a set of strings to sort This Is A Set Of Strings To Sort\"<br/>unsorted=SPLIT (setofstrings,\":\u00a0:\")<br/>PRINT \"1. setofstrings unsorted\"<br/>index=\"\"<br/>LOOP l=unsorted<br/>PRINT l<br/>length=LENGTH (l),index=APPEND(index,length)<br/>ENDLOOP<br/>index =DIGIT_INDEX (index)<br/>sorted=INDEX_SORT (unsorted,index)<br/>PRINT \"2. setofstrings sorted\"<br/>*{sorted}<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 6, "block": "<pre class=\"text highlighted_source\">#import std<br/>#show+<br/>\u00a0<br/>data = &lt;'this','is','a','list','of','strings','to','be','sorted'&gt;<br/>\u00a0<br/>example = psort&lt;not leql,lleq+ ~* ~&amp;K31K30piK26 letters&gt; data</pre>"}, {"lang": "Visual Basic .NET", "loc": 18, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<br/>\u00a0<br/><span class=\"kw1\">Module</span> Sorting_Using_a_Custom_Comparator<br/>    <span class=\"kw1\">Function</span> CustomComparator<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> x <span class=\"kw1\">As</span> <span class=\"kw2\">String</span>, <span class=\"kw1\">ByVal</span> y <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        result <span class=\"sy0\">=</span> y<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> x<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>        <span class=\"kw1\">If</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            result <span class=\"sy0\">=</span> <span class=\"kw2\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Compare</span><span class=\"br0\">(</span>x, y, <span class=\"kw1\">True</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Return</span> result<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> strings <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"test\"</span>, <span class=\"st0\">\"Zoom\"</span>, <span class=\"st0\">\"strings\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>        Array<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>strings, <span class=\"kw1\">New</span> Comparison<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">AddressOf</span> CustomComparator<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">s:=T(\"Cat\",\"apple\",\"Adam\",\"zero\",\"Xmas\",\"quit\",\"Level\",\"add\",\"Actor\",\"base\",\"butter\");<br/>r:=s.sort(fcn(a,b){ <br/>\t    an,bn\u00a0:= a.len(),b.len(); <br/>            if(an==bn)(a.toLower() &lt; b.toLower()) else (an &gt; bn)<br/>\t  });<br/>r.pump(Console.println);</pre>"}]}