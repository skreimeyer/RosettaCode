{"task": "Use_another_language_to_call_a_function", "blocks": [{"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Interfaces.<span class=\"me1\">C</span>;          <span class=\"kw3\">use</span> Interfaces.<span class=\"me1\">C</span>;<br/><span class=\"kw3\">with</span> Interfaces.<span class=\"me1\">C</span>.<span class=\"me1\">Strings</span>;  <span class=\"kw3\">use</span> Interfaces.<span class=\"me1\">C</span>.<span class=\"me1\">Strings</span>;<br/>\u00a0<br/><span class=\"kw3\">package</span> Exported <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Query <span class=\"br0\">(</span>Data\u00a0: chars_ptr; Size\u00a0: <span class=\"kw3\">access</span> size_t<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> int;<br/>   <span class=\"kw3\">pragma</span> Export <span class=\"br0\">(</span>C, Query, <span class=\"st0\">\"Query\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Exported;</pre>"}, {"lang": "AutoHotkey", "loc": 21, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Example: The following is a working script that displays a summary of all top-level windows.</span><br/>\u00a0<br/><span class=\"co1\">; For performance and memory conservation, call RegisterCallback() only once for a given callback:</span><br/><span class=\"kw1\">if</span> not EnumAddress  <span class=\"co1\">; Fast-mode is okay because it will be called only from this thread:</span><br/>    EnumAddress <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegisterCallback.htm\"><span class=\"kw3\">RegisterCallback</span></a><span class=\"br0\">(</span><span class=\"st0\">\"EnumWindowsProc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Fast\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/DetectHiddenWindows.htm\"><span class=\"kw3\">DetectHiddenWindows</span></a> On  <span class=\"co1\">; Due to fast-mode, this setting will go into effect for the callback too.</span><br/>\u00a0<br/><span class=\"co1\">; Pass control to EnumWindows(), which calls the callback repeatedly:</span><br/><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"EnumWindows\"</span><span class=\"sy0\">,</span> UInt<span class=\"sy0\">,</span> EnumAddress<span class=\"sy0\">,</span> UInt<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%Output%</span>  <span class=\"co1\">; Display the information accumulated by the callback.</span><br/>\u00a0<br/>EnumWindowsProc<span class=\"br0\">(</span>hwnd<span class=\"sy0\">,</span> lParam<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    global Output<br/>    <a href=\"http://www.autohotkey.com/docs/commands/WinGetTitle.htm\"><span class=\"kw3\">WinGetTitle</span></a><span class=\"sy0\">,</span> title<span class=\"sy0\">,</span> ahk_id <span class=\"re0\">%hwnd%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/WinGetClass.htm\"><span class=\"kw3\">WinGetClass</span></a><span class=\"sy0\">,</span> class<span class=\"sy0\">,</span> ahk_id <span class=\"re0\">%hwnd%</span><br/>    <span class=\"kw1\">if</span> title<br/>        Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"HWND: \"</span> <span class=\"sy0\">.</span> hwnd <span class=\"sy0\">.</span> <span class=\"st0\">\"`tTitle: \"</span> <span class=\"sy0\">.</span> title <span class=\"sy0\">.</span> <span class=\"st0\">\"`tClass: \"</span> <span class=\"sy0\">.</span> class <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span><br/>    <span class=\"kw1\">return</span> true  <span class=\"co1\">; Tell EnumWindows() to continue until all windows have been enumerated.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#if 0</span><br/>I rewrote the driver according to good sense<span class=\"sy0\">,</span> my style<span class=\"sy0\">,</span><br/>and discussion.<br/>\u00a0<br/><span class=\"me1\">This</span> is file main.<span class=\"me1\">c</span> on Autumn <span class=\"nu0\">2011</span> ubuntu linux release.<br/><span class=\"me1\">The</span> emacs compile command output<span class=\"sy0\">:</span><br/>\u00a0<br/><span class=\"sy0\">-*-</span> mode<span class=\"sy0\">:</span> compilation<span class=\"sy0\">;</span> default<span class=\"sy0\">-</span>directory<span class=\"sy0\">:</span> <span class=\"st0\">\"/tmp/\"</span> <span class=\"sy0\">-*-</span><br/>Compilation started at Mon Mar <span class=\"nu0\">12</span> <span class=\"nu0\">20</span><span class=\"sy0\">:</span><span class=\"nu0\">25</span><span class=\"sy0\">:</span><span class=\"nu0\">27</span><br/>\u00a0<br/>make <span class=\"sy0\">-</span>k CFLAGS<span class=\"sy0\">=-</span>Wall main.<span class=\"me1\">o</span><br/>cc <span class=\"sy0\">-</span>Wall   <span class=\"sy0\">-</span>c <span class=\"sy0\">-</span>o main.<span class=\"me1\">o</span> main.<span class=\"me1\">c</span><br/>\u00a0<br/>Compilation finished at Mon Mar <span class=\"nu0\">12</span> <span class=\"nu0\">20</span><span class=\"sy0\">:</span><span class=\"nu0\">25</span><span class=\"sy0\">:</span><span class=\"nu0\">27</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt; </span><br/>\u00a0<br/><span class=\"kw2\">extern</span> <span class=\"kw4\">int</span> Query<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>Data<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"sy0\">*</span>Length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> Buffer<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>pc<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">unsigned</span> Size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Query<span class=\"br0\">(</span>Buffer<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"failed to call Query\"</span><span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>pc <span class=\"sy0\">=</span> Buffer<span class=\"sy0\">;</span> Size<span class=\"sy0\">--;</span> <span class=\"sy0\">++</span>pc<span class=\"br0\">)</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>pc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 17, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// C++ functions with extern \"C\" can get called from C.</span><br/><span class=\"kw4\">extern</span> <span class=\"st0\">\"C\"</span> <span class=\"kw4\">int</span><br/>Query <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy2\">*</span>Data, <span class=\"kw4\">size_t</span> <span class=\"sy2\">*</span>Length<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> string Message <span class=\"sy1\">=</span> <span class=\"st0\">\"Here am I\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"co1\">// Check that Message fits in Data.</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>Length <span class=\"sy1\">&lt;</span> Message.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span>  <span class=\"co1\">// C++ converts bool to int.</span><br/>\u00a0<br/>   <span class=\"sy2\">*</span>Length <span class=\"sy1\">=</span> Message.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   Message.<span class=\"me1\">copy</span><span class=\"br0\">(</span>Data, <span class=\"sy2\">*</span>Length<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "COBOL", "loc": 33, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> Query<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">special-names</span><span class=\"sy0\">.</span><br/>           call-convention <span class=\"nu0\">0</span> <span class=\"kw3\">is</span> extern<span class=\"sy0\">.</span><br/>\u00a0<br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> query-result<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"Here I am\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> data-<span class=\"kw3\">reference</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> data-buffer   <span class=\"kw3\">pic</span> x <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> <span class=\"nu0\">8192</span> <span class=\"kw2\">times</span><br/>                                 <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> length-<span class=\"kw3\">reference</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> length-<span class=\"kw3\">reference</span> <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> extern <span class=\"kw3\">using</span> data-<span class=\"kw3\">reference</span> length-<span class=\"kw3\">reference</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>query-result<span class=\"br0\">)</span> <span class=\"kw3\">less</span> <span class=\"kw3\">than</span> <span class=\"kw3\">or</span> <span class=\"kw3\">equal</span> <span class=\"kw2\">to</span> length-<span class=\"kw3\">reference</span><br/>                           <span class=\"kw3\">and</span> length-<span class=\"kw3\">reference</span> <span class=\"kw3\">less</span> <span class=\"kw3\">than</span> <span class=\"nu0\">8193</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> query-result <span class=\"kw2\">to</span> data-<span class=\"kw3\">reference</span><br/>           <span class=\"kw2\">move</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>query-result<span class=\"br0\">)</span> <span class=\"kw2\">to</span> length-<span class=\"kw3\">reference</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> return-<span class=\"kw1\">code</span><br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> Query<span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">bool</span> query<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span>length<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"Here am I\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>length <span class=\"sy0\">&lt;</span> text.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">*</span>length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// Also clears length.</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        memcpy<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> text.<span class=\"me1\">ptr</span><span class=\"sy0\">,</span> text.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>length <span class=\"sy0\">=</span> text.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 23, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> Query<span class=\"br0\">(</span>Buffer<span class=\"sy1\">:</span> <span class=\"kw4\">PChar</span><span class=\"sy1\">;</span> <span class=\"kw1\">var</span> Size<span class=\"sy1\">:</span> <span class=\"kw4\">Int64</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">LongBool</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>    Text <span class=\"sy3\">=</span> <span class=\"st0\">'Hello World!'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">not</span> <span class=\"kw3\">Assigned</span><span class=\"br0\">(</span>Buffer<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">begin</span><br/>        Size <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>        Exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">If</span> Size &lt; <span class=\"kw3\">Length</span><span class=\"br0\">(</span>Text<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">begin</span><br/>        Size <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>        Exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    Size <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>Text<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Move</span><span class=\"br0\">(</span>Text<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> Buffer<span class=\"sy2\">^</span><span class=\"sy1\">,</span> Size<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 17, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Function</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">function</span>  fortran_query<span class=\"br0\">(</span><span class=\"kw3\">data</span>, length<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span> bind<span class=\"br0\">(</span>c, <span class=\"kw1\">name</span><span class=\"sy0\">=</span><span class=\"st0\">'Query'</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">use</span>, <span class=\"kw3\">intrinsic</span>  <span class=\"sy0\">::</span> <span class=\"me2\">iso_c_binding</span>, <span class=\"kw1\">only</span><span class=\"sy0\">:</span> c_char, c_int, c_size_t, c_null_char<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span>c_char<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span>,  <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span>  <span class=\"kw3\">data</span><br/>   <span class=\"kw3\">integer</span><span class=\"br0\">(</span>c_size_t<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">length</span><br/>   <span class=\"kw3\">integer</span><span class=\"br0\">(</span>c_int<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">answer</span><br/>   answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>length&lt;<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>   <span class=\"kw3\">data</span> <span class=\"sy0\">=</span> <span class=\"kw4\">transfer</span><span class=\"br0\">(</span><span class=\"st0\">\"Here I am\"</span><span class=\"sy0\">//</span>c_null_char, <span class=\"kw3\">data</span><span class=\"br0\">)</span><br/>   length <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>_c_size_t<br/>   answer <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> fortran_query<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include \"_cgo_export.h\"</span><br/>\u00a0<br/><span class=\"kw4\">void</span> Run<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">char</span>     Buffer <span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">size_t</span>   Size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>Buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> Query <span class=\"br0\">(</span>Buffer<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   ...</pre>"}, {"lang": "Haskell", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifdef __GLASGOW_HASKELL__</span><br/><span class=\"co2\">#include \"Called_stub.h\"</span><br/><span class=\"kw2\">extern</span> <span class=\"kw4\">void</span> __stginit_Called<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;HsFFI.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span>     Buffer <span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span>   Size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>Buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    hs_init<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>argc<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>argv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#ifdef __GLASGOW_HASKELL__</span><br/>    hs_add_root<span class=\"br0\">(</span>__stginit_Called<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> query_hs <span class=\"br0\">(</span>Buffer<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"failed to call Query<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> Ptr <span class=\"sy0\">=</span> Buffer<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>Size<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span>Ptr<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    hs_exit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haxe", "loc": 1, "block": "<pre class=\"text highlighted_source\">untyped __call__(\"functionName\", args);</pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>query=:<span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'0&amp;#^:(y &lt; #)'</span><span class=\"st_h\">'Here am I'</span><span class=\"st_h\">''</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 14, "block": "<pre class=\"java highlighted_source\"><span class=\"coMULTI\">/* Query.java */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Query <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> call<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> length<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">throws</span> java.<span class=\"me1\">io</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunsupportedencodingexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnsupportedEncodingException</span></a><br/>    <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> message <span class=\"sy0\">=</span> <span class=\"st0\">\"Here am I\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> mb <span class=\"sy0\">=</span> message.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>length<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> mb.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\tlength<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> mb.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>mb, <span class=\"nu0\">0</span>, data, <span class=\"nu0\">0</span>, mb.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Kotlin Native v0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlinx.<span class=\"me1\">cinterop</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> platform.<span class=\"me1\">posix</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun query<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> CPointer<span class=\"sy0\">&lt;</span>ByteVar<span class=\"sy0\">&gt;</span>, length<span class=\"sy0\">:</span> CPointer<span class=\"sy0\">&lt;</span>size<span class=\"sy0\">_</span>tVar<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Here am I\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strLen <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bufferSize <span class=\"sy0\">=</span> length.<span class=\"me1\">pointed</span>.<span class=\"me1\">value</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>strLen <span class=\"sy0\">&gt;</span> bufferSize<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span>  <span class=\"co1\">// buffer not large enough</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until strLen<span class=\"br0\">)</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    length.<span class=\"me1\">pointed</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> strLen.<span class=\"me1\">signExtend</span><span class=\"sy0\">&lt;</span>size<span class=\"sy0\">_</span>t<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lisaac", "loc": 32, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= QUERY;<br/>- external\u00a0:= `#define main _query_main`;<br/>- external\u00a0:= `#define query Query`;<br/>\u00a0<br/>Section External<br/>\u00a0<br/>- query(buffer\u00a0: NATIVE_ARRAY[CHARACTER], size\u00a0: NATIVE_ARRAY[INTEGER])\u00a0: INTEGER &lt;- (<br/>  + s\u00a0: STRING_CONSTANT;<br/>  + len, result\u00a0: INTEGER;<br/>  s\u00a0:= \"Here am I\";<br/>  len\u00a0:= s.count;<br/>  (len &gt; size.item(0)).if {<br/>    result\u00a0:= 0;<br/>  } else {<br/>    1.to len do { i\u00a0: INTEGER;<br/>      buffer.put (s @ i) to (i - 1);<br/>    };<br/>    size.put len to 0;<br/>    result\u00a0:= 1;<br/>  };<br/>  result<br/>);<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- main &lt;- (<br/>  + buffer\u00a0: NATIVE_ARRAY[CHARACTER];<br/>  + size\u00a0: NATIVE_ARRAY[INTEGER];<br/>  query(buffer, size); // need this to pull the query() method<br/>);</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">proc Query*(data: var array[1024, char], length: var cint): cint {.exportc.} =<br/>  const text = \"Here am I\"<br/>  if length &lt; text.len:<br/>    return 0<br/>\u00a0<br/>  for i in 0 .. &lt;text.len:<br/>    data[i] = text[i]<br/>  length = text.len<br/>  return 1</pre>"}, {"lang": "OCaml", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;caml/mlvalues.h&gt;</span><br/><span class=\"co2\">#include &lt;caml/callback.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span> <span class=\"kw4\">int</span> Query <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> Data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span> Length<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">static</span> value <span class=\"sy0\">*</span> closure_f <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>closure_f <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       closure_f <span class=\"sy0\">=</span> caml_named_value<span class=\"br0\">(</span><span class=\"st0\">\"Query function cb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   value ret <span class=\"sy0\">=</span> caml_callback<span class=\"br0\">(</span><span class=\"sy0\">*</span>closure_f<span class=\"sy0\">,</span> Val_unit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"sy0\">*</span>Length <span class=\"sy0\">=</span> Int_val<span class=\"br0\">(</span>Field<span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>Data<span class=\"sy0\">,</span> String_val<span class=\"br0\">(</span>Field<span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>Length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">char</span>     Buffer <span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">unsigned</span> Size <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   caml_main<span class=\"br0\">(</span>argv<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* added from the original main */</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> Query <span class=\"br0\">(</span>Buffer<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"failed to call Query<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> Ptr <span class=\"sy0\">=</span> Buffer<span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"size:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> Size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>Size<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span>Ptr<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>k<span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span><span class=\"nu1\">96</span><span class=\"sy0\">&amp;&amp;</span>k<span class=\"sy0\">&lt;</span><span class=\"nu1\">123</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu1\">84</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">26</span><span class=\"sy0\">+</span><span class=\"nu1\">97</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span><span class=\"nu1\">64</span><span class=\"sy0\">&amp;&amp;</span>k<span class=\"sy0\">&lt;</span><span class=\"nu1\">91</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu1\">52</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">26</span><span class=\"sy0\">+</span><span class=\"nu1\">65</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 10, "block": "<pre class=\"text highlighted_source\">constant Here_am_I = \"Here am I\"<br/>function Query(atom pData, atom pLength)<br/>integer len = peekNS(pLength,machine_word(),0)<br/>    if poke_string(pData,len,Here_am_I) then<br/>        return 0<br/>    end if<br/>    pokeN(pLength,length(Here_am_I)+1,machine_word())<br/>    return 1<br/>end function<br/>constant Query_cb = call_back(routine_id(\"Query\"))</pre>"}, {"lang": "Phix", "loc": 10, "block": "<pre class=\"text highlighted_source\">constant Here_am_I = \"Here am I\"<br/>function Query(atom pData, atom pLength)<br/>integer len = peekNS(pLength,machine_word(),0)<br/>    if poke_string(pData,len,Here_am_I) then<br/>        return 0<br/>    end if<br/>    pokeN(pLength,length(Here_am_I)+1,machine_word())<br/>    return 1<br/>end function<br/>constant Query_cb = call_back(routine_id(\"Query\"))</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(let (Str \"Here am I\"  Len (format (opt)))  # Get length from command line<br/>   (unless (&gt;= (size Str) Len)              # Check buffer size<br/>      (prinl Str) ) )                       # Return string if OK</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\"># store this in file rc_embed.py</span><br/><span class=\"co1\"># store this in file rc_embed.py</span><br/><span class=\"kw1\">def</span> query<span class=\"br0\">(</span>buffer_length<span class=\"br0\">)</span>:<br/>    message <span class=\"sy0\">=</span> b<span class=\"st0\">'Here am I'</span><br/>    L <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> message<span class=\"br0\">[</span><span class=\"nu0\">0</span>:L*<span class=\"br0\">(</span>L <span class=\"sy0\">&lt;=</span> buffer_length<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> strfun <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> Data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span> Length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>strfun <span class=\"sy0\">*</span>Query <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 37, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># query.rb</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'fiddle'</span><br/>\u00a0<br/><span class=\"co1\"># Look for a C variable named QueryPointer.</span><br/><span class=\"co1\"># Raise an error if it is missing.</span><br/>c_var = Fiddle.<span class=\"me1\">dlopen</span><span class=\"br0\">(</span><span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"st0\">'QueryPointer'</span><span class=\"br0\">]</span><br/>\u00a0<br/>int = <span class=\"re2\">Fiddle::TYPE_INT</span><br/>voidp = <span class=\"re2\">Fiddle::TYPE_VOIDP</span><br/>sz_voidp = <span class=\"re2\">Fiddle::SIZEOF_VOIDP</span><br/>\u00a0<br/><span class=\"co1\"># Implement the C function</span><br/><span class=\"co1\">#   int Query(void *data, size_t *length)</span><br/><span class=\"co1\"># in Ruby code.  Store it in a global constant in Ruby (named Query)</span><br/><span class=\"co1\"># to protect it from Ruby's garbage collector.</span><br/><span class=\"co1\">#</span><br/>Query = <span class=\"re2\">Fiddle::Closure::BlockCaller</span><br/>          .<span class=\"me1\">new</span><span class=\"br0\">(</span>int, <span class=\"br0\">[</span>voidp, voidp<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>datap, lengthp<span class=\"sy0\">|</span><br/>  message = <span class=\"st0\">\"Here am I\"</span><br/>\u00a0<br/>  <span class=\"co1\"># We got datap and lengthp as Fiddle::Pointer objects.</span><br/>  <span class=\"co1\"># Read length, assuming sizeof(size_t) == sizeof(void *).</span><br/>  length = lengthp<span class=\"br0\">[</span><span class=\"nu0\">0</span>, sz_voidp<span class=\"br0\">]</span>.<span class=\"me1\">unpack</span><span class=\"br0\">(</span><span class=\"st0\">'J'</span><span class=\"br0\">)</span>.<span class=\"me1\">first</span><br/>\u00a0<br/>  <span class=\"co1\"># Does the message fit in length bytes?</span><br/>  <span class=\"kw1\">if</span> length <span class=\"sy0\">&lt;</span> message.<span class=\"me1\">bytesize</span><br/>    <span class=\"nu0\">0</span>  <span class=\"co1\"># failure</span><br/>  <span class=\"kw1\">else</span><br/>    length = message.<span class=\"me1\">bytesize</span><br/>    datap<span class=\"br0\">[</span><span class=\"nu0\">0</span>, length<span class=\"br0\">]</span> = message  <span class=\"co1\"># Copy the message.</span><br/>    lengthp<span class=\"br0\">[</span><span class=\"nu0\">0</span>, sz_voidp<span class=\"br0\">]</span> = <span class=\"br0\">[</span>length<span class=\"br0\">]</span>.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"st0\">'J'</span><span class=\"br0\">)</span>  <span class=\"co1\"># Update the length.</span><br/>    <span class=\"nu0\">1</span>  <span class=\"co1\"># success</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Set the C variable to our Query.</span><br/><span class=\"re2\">Fiddle::Pointer</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>c_var<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, sz_voidp<span class=\"br0\">]</span> = <span class=\"br0\">[</span>Query.<span class=\"me1\">to_i</span><span class=\"br0\">]</span>.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"st0\">'J'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/* Query.scala */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Query <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> call<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span>, length<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> message <span class=\"sy0\">=</span> <span class=\"st0\">\"Here am I\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mb <span class=\"sy0\">=</span> message.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>length<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> mb.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      length<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> mb.<span class=\"me1\">length</span><br/>      System.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>mb, <span class=\"nu0\">0</span>, data, <span class=\"nu0\">0</span>, mb.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> Query <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> Data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span> Length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Tcl_Obj <span class=\"sy0\">*</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> code<span class=\"sy0\">;</span><br/>\u00a0<br/>    arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Tcl_NewStringObj<span class=\"br0\">(</span><span class=\"st0\">\"Query\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* -1 for \"use up to zero byte\" */</span><br/>    arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Tcl_NewStringObj<span class=\"br0\">(</span>Data<span class=\"sy0\">,</span> Length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Tcl_IncrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Tcl_IncrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Tcl_EvalObjv<span class=\"br0\">(</span>interp<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> arguments<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> TCL_OK<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* Was an error or other exception; report here... */</span><br/>        Tcl_DecrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Tcl_DecrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    Tcl_DecrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Tcl_DecrRefCount<span class=\"br0\">(</span>arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Tcl_GetObjResult<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> Tcl_GetObjResult<span class=\"br0\">(</span>interp<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>code<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> TCL_OK<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* Not an integer result */</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> code<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 17, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> query<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>callback<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">size_t</span> size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span> buffer<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>callback<span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>size<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"query: callback failed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ptr <span class=\"sy0\">=</span> buffer<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>size<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ptr<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 47, "block": "<pre class=\"c highlighted_source\"><span class=\"co1\">// query.c</span><br/><span class=\"co1\">// export zklRoot=/home/ZKL</span><br/><span class=\"co1\">// clang query.c -I $zklRoot/VM -L $zklRoot/Lib -lzkl -pthread -lncurses -o query</span><br/><span class=\"co1\">// LD_LIBRARY_PATH=$zklRoot/Lib ./query</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#include \"zklObject.h\"</span><br/><span class=\"co2\">#include \"zklImports.h\"</span><br/><span class=\"co2\">#include \"zklClass.h\"</span><br/><span class=\"co2\">#include \"zklFcn.h\"</span><br/><span class=\"co2\">#include \"zklString.h\"</span><br/>\u00a0<br/><span class=\"kw4\">int</span> query<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span>sz<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   Instance <span class=\"sy0\">*</span>r<span class=\"sy0\">;</span><br/>   pVM       vm<span class=\"sy0\">;</span><br/>   MLIST<span class=\"br0\">(</span>mlist<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"co1\">// Bad practice: not protecting things from the garbage collector</span><br/>\u00a0<br/>   <span class=\"co1\">// build the call parameters: (\"query.zkl\",False,False,True)</span><br/>   mlistBuild<span class=\"br0\">(</span>mlist<span class=\"sy0\">,</span>stringCreate<span class=\"br0\">(</span><span class=\"st0\">\"query.zkl\"</span><span class=\"sy0\">,</span>I_OWNED<span class=\"sy0\">,</span>NoVM<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              BoolFalse<span class=\"sy0\">,</span>BoolFalse<span class=\"sy0\">,</span>BoolTrue<span class=\"sy0\">,</span>ZNIL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"co1\">// Import is in the Vault, a store of useful stuff</span><br/>   <span class=\"co1\">// We want to call TheVault.Import.import(\"query.zkl\",False,False,True)</span><br/>   <span class=\"co1\">//    which will load/compile/run query.zkl</span><br/>   r <span class=\"sy0\">=</span> fcnRunith<span class=\"br0\">(</span><span class=\"st0\">\"Import\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"import\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>Instance <span class=\"sy0\">*</span><span class=\"br0\">)</span>mlist<span class=\"sy0\">,</span>NoVM<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"co1\">// query.zkl is a class with a var that has the query result</span><br/>   r <span class=\"sy0\">=</span> classFindVar<span class=\"br0\">(</span>r<span class=\"sy0\">,</span><span class=\"st0\">\"query\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>NoVM<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// --&gt;the var contents</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span>stringText<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// decode the string into a char *</span><br/>   <span class=\"sy0\">*</span>sz <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// screw overflow checking</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">char</span>   buf<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">size_t</span> sz <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   zklConstruct<span class=\"br0\">(</span>argc<span class=\"sy0\">,</span>argv<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// initialize the zkl shared library</span><br/>   query<span class=\"br0\">(</span>buf<span class=\"sy0\">,&amp;</span>sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Query() --&gt; <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}]}