{"task": "Recaman%27s_sequence", "blocks": [{"lang": "ALGOL W", "loc": 88, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% calculate Recaman's sequence values                                             \u00a0%<br/>\u00a0<br/>   \u00a0% a hash table element - holds n, A(n) and a link to the next element with the    \u00a0%<br/>   \u00a0%                        same hash value                                          \u00a0%<br/>    record AValue ( integer eN, eAn\u00a0; reference(AValue) eNext );<br/>\u00a0<br/>   \u00a0% hash modulus                                                                    \u00a0%<br/>    integer HMOD;<br/>    HMOD\u00a0:= 100000;<br/>\u00a0<br/>    begin<br/>        reference(AValue) array hashTable ( 0\u00a0:: HMOD - 1 );<br/>        integer array A ( 0\u00a0:: 14 );<br/>        integer le1000Count, firstN, duplicateN, duplicateValue, n, An, An1, prevN;<br/>\u00a0<br/>       \u00a0% adds an element to the hash table, returns true if an element with value An \u00a0%<br/>       \u00a0% was already present, false otherwise                                        \u00a0%<br/>       \u00a0% if the value was already present, its eN value is returned in prevN         \u00a0%<br/>        logical procedure addAValue( integer value n, An\u00a0; integer result prevN )\u00a0;<br/>            begin<br/>                integer hash;<br/>                logical duplicate;<br/>                reference(AValue) element;<br/>                hash     \u00a0:= An rem HMOD;<br/>                element  \u00a0:= hashTable( hash );<br/>                duplicate\u00a0:= false;<br/>                while element not = null and eAn(element) not = An do element\u00a0:= eNext(element);<br/>                duplicate\u00a0:= element not = null;<br/>                if not duplicate then hashTable( hash )\u00a0:= AValue( n, An, hashTable( hash ) )<br/>                                 else prevN\u00a0:= eN(element);<br/>                duplicate<br/>            end addAValue\u00a0;<br/>\u00a0<br/>       \u00a0% initialise the hash table                                                   \u00a0%<br/>        for h\u00a0:= 0 until HMOD - 1 do hashTable( h )\u00a0:= null;<br/>\u00a0<br/>       \u00a0% calculate the values of the sequence until we have found values that        \u00a0%<br/>       \u00a0% include all numbers in 1..1000                                              \u00a0%<br/>       \u00a0% also store the first 15 values                                              \u00a0%<br/>\u00a0<br/>        A( 0 )\u00a0:= An1\u00a0:= n\u00a0:= 0;<br/>        le1000Count\u00a0:= 0;<br/>        firstN\u00a0:= duplicateN\u00a0:= duplicateValue\u00a0:= -1;<br/>        while le1000Count &lt; 1000 do begin<br/>            logical le0, duplicate;<br/>            n \u00a0:= n + 1;<br/>            An\u00a0:= An1 - n;<br/>            le0\u00a0:= ( An &lt;= 0 );<br/>            if le0 then An\u00a0:= An1 + n;<br/>            prevN\u00a0:= -1;<br/>            duplicate\u00a0:= addAValue( n, An, prevN );<br/>            if duplicate and not le0 then begin<br/>                An\u00a0:= An1 + n;<br/>                duplicate\u00a0:= addAValue( n, An, prevN )<br/>            end if_duplicate_and_not_le0\u00a0;<br/>            if duplicate then begin<br/>               \u00a0% the value was already present\u00a0%<br/>                if firstN &lt; 0 then begin  \u00a0% have the first duplicate                 \u00a0%<br/>                    firstN        \u00a0:= n;<br/>                    duplicateN    \u00a0:= prevN;<br/>                    duplicateValue\u00a0:= An;<br/>                end if_firstN_lt_0<br/>                end<br/>            else if An &lt;= 1000 then le1000Count\u00a0:= le1000Count + 1;;<br/>            if n &lt; 15 then A( n )\u00a0:= An;<br/>            An1\u00a0:= An<br/>        end while_le1000Count_lt_1000\u00a0;<br/>\u00a0<br/>       \u00a0% show the first 15 values of the sequence                                    \u00a0%<br/>        write( \"A( 0 .. 14 ): \" );<br/>        for n\u00a0:= 0 until 14 do writeon( i_w\u00a0:= 1, A( n ) );<br/>       \u00a0% positions of the first duplicate                                            \u00a0%<br/>        write( i_w\u00a0:= 1<br/>               , s_w\u00a0:= 0<br/>               , \"First duplicates: \"<br/>               , duplicateN<br/>               , \" \"<br/>               , firstN<br/>               , \" (\"<br/>               , duplicateValue<br/>               , \")\"<br/>               );<br/>       \u00a0% number of elements required to include the first 1000 integers              \u00a0%<br/>        write( i_w\u00a0:= 1, \"first element to include all 1..1000: \", n )<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 188, "block": "<pre class=\"applescript highlighted_source\">use AppleScript <span class=\"kw1\">version</span> <span class=\"st0\">\"2.4\"</span><br/>use framework <span class=\"st0\">\"Foundation\"</span><br/>use scripting additions<br/>\u00a0<br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>  <span class=\"co1\">-- FIRST FIFTEEN RECAMANs ------------------------------------------------------</span><br/>\u00a0<br/>  <span class=\"kw3\">script</span> term15<br/>    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"nu0\">15</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> |\u03bb|<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>  <span class=\"kw3\">set</span> strFirst15 <span class=\"kw3\">to</span> unwords<span class=\"br0\">(</span>snd<span class=\"br0\">(</span>recamanUpto<span class=\"br0\">(</span><span class=\"kw1\">true</span>, term15<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">set</span> strFirstMsg <span class=\"kw3\">to</span> <span class=\"st0\">\"First 15 Recamans:\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/>  display notification strFirstMsg <span class=\"sy0\">&amp;</span> strFirst15<br/>  delay <span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"co1\">-- FIRST DUPLICATE RECAMAN ----------------------------------------------------</span><br/>\u00a0<br/>  <span class=\"kw3\">script</span> firstDuplicate<br/>    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, seen, rs<span class=\"br0\">)</span><br/>      setSize<span class=\"br0\">(</span>seen<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span> <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>rs <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> |\u03bb|<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>  <span class=\"kw3\">set</span> strDuplicate <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> snd<span class=\"br0\">(</span>recamanUpto<span class=\"br0\">(</span><span class=\"kw1\">true</span>, firstDuplicate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>\u00a0<br/>  <span class=\"kw3\">set</span> strDupMsg <span class=\"kw3\">to</span> <span class=\"st0\">\"First duplicated Recaman:\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/>  display notification strDupMsg <span class=\"sy0\">&amp;</span> strDuplicate<br/>  delay <span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"co1\">-- NUMBER OF RECAMAN TERMS NEEDED TO GET ALL OF [0..1000]</span><br/>  <span class=\"co1\">-- (takes about a minute, depending on system)</span><br/>\u00a0<br/>  <span class=\"kw3\">set</span> setK <span class=\"kw3\">to</span> setFromList<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">script</span> supersetK<br/>    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>i, setR<span class=\"br0\">)</span><br/>      setK<span class=\"co2\">'</span>s isSubsetOfSet:<span class=\"br0\">(</span>setR<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> |\u03bb|<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>  display notification <span class=\"st0\">\"Superset size result will take c. 1 min to find ...\"</span><br/>  <span class=\"kw3\">set</span> dteStart <span class=\"kw3\">to</span> current date<br/>\u00a0<br/>  <span class=\"kw3\">set</span> strSetSize <span class=\"kw3\">to</span> <span class=\"br0\">(</span>fst<span class=\"br0\">(</span>recamanUpto<span class=\"br0\">(</span><span class=\"kw1\">false</span>, supersetK<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>\u00a0<br/>  <span class=\"kw3\">set</span> dteEnd <span class=\"kw3\">to</span> current date<br/>\u00a0<br/>  <span class=\"kw3\">set</span> strSetSizeMsg <span class=\"kw3\">to</span> <span class=\"st0\">\"Number of Recaman terms needed to generate\"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>    linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"all integers from [0..1000]:\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/>  <span class=\"kw3\">set</span> strElapsed <span class=\"kw3\">to</span> <span class=\"st0\">\"(Last result took c. \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>dteEnd <span class=\"sy0\">-</span> dteStart<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" seconds to find)\"</span><br/>  display notification strSetSizeMsg <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> strSetSize<br/>\u00a0<br/>  <span class=\"co1\">-- CLEARED REFERENCE TO NSMUTABLESET ------------------------------------- </span><br/>  <span class=\"kw3\">set</span> setK <span class=\"kw3\">to</span> <span class=\"kw1\">missing value</span><br/>\u00a0<br/>  <span class=\"co1\">-- REPORT ----------------------------------------------------------------</span><br/>  unlines<span class=\"br0\">(</span><span class=\"br0\">{</span>strFirstMsg <span class=\"sy0\">&amp;</span> strFirst15, <span class=\"st0\">\"\"</span>, \u00ac<br/>    strDupMsg <span class=\"sy0\">&amp;</span> strDuplicate, <span class=\"st0\">\"\"</span>, \u00ac<br/>    strSetSizeMsg <span class=\"sy0\">&amp;</span> strSetSize, <span class=\"st0\">\"\"</span>, \u00ac<br/>    strElapsed<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- nextR\u00a0:: Set Int -&gt; Int -&gt; Int</span><br/><span class=\"kw3\">on</span> nextR<span class=\"br0\">(</span>seen, i, n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> bk <span class=\"kw3\">to</span> n <span class=\"sy0\">-</span> i<br/>  <span class=\"kw3\">if</span> <span class=\"nu0\">0</span> &gt; bk <span class=\"kw2\">or</span> setMember<span class=\"br0\">(</span>bk, seen<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>    n <span class=\"sy0\">+</span> i<br/>  <span class=\"kw3\">else</span><br/>    bk<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> nextR<br/>\u00a0<br/><span class=\"co1\">-- recamanUpto\u00a0:: Bool -&gt; (Int -&gt; Set Int &gt; [Int] -&gt; Bool) -&gt; (Int, [Int])</span><br/><span class=\"kw3\">on</span> recamanUpto<span class=\"br0\">(</span>bln, p<span class=\"br0\">)</span><br/>  <span class=\"kw3\">script</span> recaman<br/>    <span class=\"kw3\">property</span> mp\u00a0: mReturn<span class=\"br0\">(</span>p<span class=\"br0\">)</span>'s |\u03bb|<br/>    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">set</span> i <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">set</span> r <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw3\">set</span> rs <span class=\"kw3\">to</span> <span class=\"br0\">{</span>r<span class=\"br0\">}</span><br/>      <span class=\"kw3\">set</span> seen <span class=\"kw3\">to</span> setFromList<span class=\"br0\">(</span>rs<span class=\"br0\">)</span><br/>      <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"kw2\">not</span> mp<span class=\"br0\">(</span>i, seen, rs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> r <span class=\"kw3\">to</span> nextR<span class=\"br0\">(</span>seen, i, r<span class=\"br0\">)</span><br/>        setInsert<span class=\"br0\">(</span>r, seen<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> bln <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> rs <span class=\"kw3\">to</span> r<br/>        <span class=\"kw3\">set</span> i <span class=\"kw3\">to</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>      <span class=\"kw3\">set</span> seen <span class=\"kw3\">to</span> <span class=\"kw1\">missing value</span> <span class=\"co1\">-- clear pointer to NSMutableSet</span><br/>      <span class=\"br0\">{</span>i, rs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> |\u03bb|<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>  recaman<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> recamanUpto<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS -------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">if</span> m \u2264 n <span class=\"kw3\">then</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n<br/>      <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw3\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- fst\u00a0:: (a, b) -&gt; a</span><br/><span class=\"kw3\">on</span> fst<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span><br/>  <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> tpl <span class=\"kw3\">is</span> record <span class=\"kw3\">then</span><br/>    |<span class=\"nu0\">1</span>| <span class=\"kw3\">of</span> tpl<br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> tpl<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> fst<br/>\u00a0<br/><span class=\"co1\">-- intercalateS\u00a0:: String -&gt; [String] -&gt; String</span><br/><span class=\"kw3\">on</span> intercalateS<span class=\"br0\">(</span><span class=\"kw1\">sep</span>, xs<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, <span class=\"kw1\">sep</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">set</span> s <span class=\"kw3\">to</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>  <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>  <span class=\"kw3\">return</span> s<br/><span class=\"kw3\">end</span> intercalateS<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: First-class m =&gt; (a -&gt; b) -&gt; m (a -&gt; b)</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>  <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>    f<br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw3\">script</span><br/>      <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- NB All names of NSMutableSets should be set to *missing value*</span><br/><span class=\"co1\">-- before the script exits.</span><br/><span class=\"co1\">-- ( scpt files containing residual ObjC pointer values can not be saved)</span><br/><span class=\"co1\">-- setFromList\u00a0:: Ord a =&gt; [a] -&gt; Set a</span><br/><span class=\"kw3\">on</span> setFromList<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>  ca<span class=\"co2\">'</span>s NSMutableSet<span class=\"co2\">'</span>s \u00ac<br/>    setWithArray:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> setFromList<br/>\u00a0<br/><span class=\"co1\">-- setMember\u00a0:: Ord a =&gt; a -&gt; Set a -&gt; Bool</span><br/><span class=\"kw3\">on</span> setMember<span class=\"br0\">(</span>x, objcSet<span class=\"br0\">)</span><br/>  <span class=\"kw1\">missing value</span> <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>objcSet<span class=\"co2\">'</span>s member:<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> setMember<br/>\u00a0<br/><span class=\"co1\">-- setInsert\u00a0:: Ord a =&gt; a -&gt; Set a -&gt; Set a</span><br/><span class=\"kw3\">on</span> setInsert<span class=\"br0\">(</span>x, objcSet<span class=\"br0\">)</span><br/>  objcSet<span class=\"co2\">'</span>s addObject:<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  objcSet<br/><span class=\"kw3\">end</span> setInsert<br/>\u00a0<br/><span class=\"co1\">-- setSize\u00a0:: Set a -&gt; Int</span><br/><span class=\"kw3\">on</span> setSize<span class=\"br0\">(</span>objcSet<span class=\"br0\">)</span><br/>  objcSet<span class=\"co2\">'</span>s |<span class=\"kw1\">count</span>|<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">end</span> setSize<br/>\u00a0<br/><span class=\"co1\">-- snd\u00a0:: (a, b) -&gt; b</span><br/><span class=\"kw3\">on</span> snd<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span><br/>  <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> tpl <span class=\"kw3\">is</span> record <span class=\"kw3\">then</span><br/>    |<span class=\"nu0\">2</span>| <span class=\"kw3\">of</span> tpl<br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> tpl<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> snd<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> \u00ac<br/>    <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, linefeed<span class=\"br0\">}</span><br/>  <span class=\"kw3\">set</span> str <span class=\"kw3\">to</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>  <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>  str<br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- unwords\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unwords<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>  intercalateS<span class=\"br0\">(</span><span class=\"kw1\">space</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unwords</pre>"}, {"lang": "C", "loc": 54, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;gmodule.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> bool<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> next<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">;</span><br/>    bool foundDup <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>    gboolean alreadyUsed<span class=\"sy0\">;</span><br/>    GHashTable<span class=\"sy0\">*</span> used <span class=\"sy0\">=</span> g_hash_table_new<span class=\"br0\">(</span>g_direct_hash<span class=\"sy0\">,</span> g_direct_equal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    GHashTable<span class=\"sy0\">*</span> used1000 <span class=\"sy0\">=</span> g_hash_table_new<span class=\"br0\">(</span>g_direct_hash<span class=\"sy0\">,</span> g_direct_equal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    a <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">400000</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    g_hash_table_add<span class=\"br0\">(</span>used<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g_hash_table_add<span class=\"br0\">(</span>used1000<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>foundDup <span class=\"sy0\">||</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        next <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> g_hash_table_contains<span class=\"br0\">(</span>used<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            next <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        alreadyUsed <span class=\"sy0\">=</span> g_hash_table_contains<span class=\"br0\">(</span>used<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g_hash_table_add<span class=\"br0\">(</span>used<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> next <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                g_hash_table_add<span class=\"br0\">(</span>used1000<span class=\"sy0\">,</span> GINT_TO_POINTER<span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman's sequence are: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\b</span>]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>foundDup <span class=\"sy0\">&amp;&amp;</span> alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The first duplicated term is a[%d] =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            foundDup <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        k <span class=\"sy0\">=</span> g_hash_table_size<span class=\"br0\">(</span>used1000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Terms up to a[%d] are needed to generate 0 to 1000<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    g_hash_table_destroy<span class=\"br0\">(</span>used<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g_hash_table_destroy<span class=\"br0\">(</span>used1000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RecamanSequence <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> a <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> used <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> used1000 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> foundDup <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>foundDup <span class=\"sy0\">||</span> used1000<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> next <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> used<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    next <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw4\">bool</span> alreadyUsed <span class=\"sy0\">=</span> used<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                a<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    used<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> next <span class=\"sy0\">&amp;&amp;</span> next <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        used1000<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman sequence are: [{0}]\"</span>, <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>foundDup <span class=\"sy0\">&amp;&amp;</span> alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The first duplicated term is a[{0}] = {1}\"</span>, n, next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    foundDup <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>used1000<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Terms up to a[{0}] are needed to generate 0 to 1000\"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                n<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span> used<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span> used1000<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> foundDup<span class=\"sy0\">;</span><br/>\u00a0<br/>    a <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    used<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    used1000<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>foundDup <span class=\"sy0\">||</span> used1000.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> next <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>next <span class=\"kw2\">in</span> used<span class=\"br0\">)</span> <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            next <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">bool</span> alreadyUsed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>next <span class=\"kw2\">in</span> used<span class=\"br0\">)</span> <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        a <span class=\"sy0\">~=</span> next<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            used<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> next <span class=\"sy0\">&amp;&amp;</span> next <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                used1000<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writeln<span class=\"br0\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman sequence are: \"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>foundDup <span class=\"sy0\">&amp;&amp;</span> alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"The first duplicated term is a[%d] =\u00a0%d\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            foundDup <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>used1000.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"Terms up to a[%d] are needed to generate 0 to 1000\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        n<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    used <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"nu0\">1001</span><span class=\"sy1\">)</span><br/>    used<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    used1000 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"nu0\">1001</span><span class=\"sy1\">)</span><br/>    used1000<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy1\">,</span> foundDup <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">15</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>foundDup <span class=\"sy3\">||</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>used1000<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">1001</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        next <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">-</span> n<br/>        <span class=\"kw1\">if</span> next &lt; <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> used<span class=\"sy1\">[</span>next<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            next <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> n<br/>        <span class=\"sy1\">}</span><br/>        alreadyUsed <span class=\"sy2\">:=</span> used<span class=\"sy1\">[</span>next<span class=\"sy1\">]</span><br/>        a <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> next<span class=\"sy1\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>alreadyUsed <span class=\"sy1\">{</span><br/>            used<span class=\"sy1\">[</span>next<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            <span class=\"kw1\">if</span> next &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; next &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1000</span> <span class=\"sy1\">{</span><br/>                used1000<span class=\"sy1\">[</span>next<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">14</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman's sequence are:\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>foundDup &amp;&amp; alreadyUsed <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"The first duplicated term is a[%d] =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> next<span class=\"sy1\">)</span><br/>            foundDup <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>used1000<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1001</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Terms up to a[%d] are needed to generate 0 to 1000<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 16, "block": "<pre class=\"haskell highlighted_source\">recaman <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>recaman n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"br0\">(</span>go n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    go <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    go <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    go x <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> xs<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> go <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a> x<span class=\"br0\">)</span><br/>            back <span class=\"sy0\">=</span> r <span class=\"sy0\">-</span> i<br/>        <span class=\"kw1\">in</span> <span class=\"br0\">(</span> <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> back <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>back <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> xs<span class=\"br0\">)</span><br/>               <span class=\"kw1\">then</span> back<br/>               <span class=\"kw1\">else</span> r <span class=\"sy0\">+</span> i<br/>           <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span>\u00a0:<br/>           xs<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> recaman <span class=\"nu0\">15</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RecamanSequence <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> used <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        used.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> used1000 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        used1000.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> foundDup <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>foundDup <span class=\"sy0\">||</span> used1000.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> next <span class=\"sy0\">=</span> a.<span class=\"me1\">get</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> used.<span class=\"me1\">contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                next <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">boolean</span> alreadyUsed <span class=\"sy0\">=</span> used.<span class=\"me1\">contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            a.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                used.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> next <span class=\"sy0\">&amp;&amp;</span> next <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    used1000.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman sequence are\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>foundDup <span class=\"sy0\">&amp;&amp;</span> alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The first duplicate term is a[%d] =\u00a0%d<span class=\"es0\">\\n</span>\"</span>, n, next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                foundDup <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>used1000.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Terms up to a[%d] are needed to generate 0 to 1000<span class=\"es0\">\\n</span>\"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            n<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 86, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> main <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">'First 15 Recaman:<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            recamanUpto<span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">15</span> <span class=\"sy0\">===</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>First duplicated Recaman:<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            last<span class=\"br0\">(</span>recamanUpto<span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> <span class=\"kw1\">set</span><span class=\"sy0\">,</span> rs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">set</span>.<span class=\"me1\">size</span> <span class=\"sy0\">!==</span> rs.<span class=\"me1\">length</span><br/>            <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> setK <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Number of Recaman terms needed to generate'</span> <span class=\"sy0\">+</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\n</span>all integers from [0..1000]:<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            <span class=\"br0\">(</span>recamanUpto<span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> setR<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> isSubSetOf<span class=\"br0\">(</span>setK<span class=\"sy0\">,</span> setR<span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// RECAMAN --------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// recamanUpto\u00a0:: (Int -&gt; Set Int &gt; [Int] -&gt; Bool) -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> recamanUpto <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let<br/>            i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"co1\">// First term of series</span><br/>            rs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> seen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"br0\">(</span>rs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> seen<span class=\"sy0\">,</span> rs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy0\">=</span> nextR<span class=\"br0\">(</span>seen<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            seen.<span class=\"me1\">add</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            rs.<span class=\"me1\">push</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            i<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> rs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Next Recaman number.</span><br/>\u00a0<br/>    <span class=\"co1\">// nextR\u00a0:: Set Int -&gt; Int -&gt; Int</span><br/>    <span class=\"kw1\">const</span> nextR <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seen<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> back <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&gt;</span> back <span class=\"sy0\">||</span> seen.<span class=\"me1\">has</span><span class=\"br0\">(</span>back<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            n <span class=\"sy0\">+</span> i<br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> back<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC --------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        m <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">?</span> iterateUntil<span class=\"br0\">(</span><br/>            x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&lt;=</span> x<span class=\"sy0\">,</span><br/>            x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span><br/>            m<br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// isSubsetOf\u00a0:: Ord a =&gt; Set a -&gt; Set a -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> isSubSetOf <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let x of a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>b.<span class=\"me1\">has</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// iterateUntil\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> iterateUntil <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> vs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        let h <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>h <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">,</span> vs.<span class=\"me1\">push</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> vs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// last\u00a0:: [a] -&gt; a</span><br/>    <span class=\"kw1\">const</span> last <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// MAIN ------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.60</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> used <span class=\"sy0\">=</span> mutableSetOf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> used1000 <span class=\"sy0\">=</span> mutableSetOf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> foundDup <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span> || <span class=\"sy0\">!</span>foundDup || used1000.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> next <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span> - n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>next <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> || used.<span class=\"me1\">contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span> next +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> alreadyUsed <span class=\"sy0\">=</span> used.<span class=\"me1\">contains</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>        a.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            used.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>next in <span class=\"nu0\">0</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span> used1000.<span class=\"me1\">add</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"The first 15 terms of the Recaman's sequence are: $a\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>foundDup <span class=\"sy0\">&amp;&amp;</span> alreadyUsed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"The first duplicated term is a[$n] = $next\"</span><span class=\"br0\">)</span><br/>            foundDup <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>used1000.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Terms up to a[$n] are needed to generate 0 to 1000\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        n++<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Microsoft Small Basic", "loc": 44, "block": "<pre class=\"text highlighted_source\">' Recaman's sequence - smallbasic - 05/08/2015<br/>    nn=15<br/>    TextWindow.WriteLine(\"Recaman's sequence for the first \" + nn + \" numbers:\")<br/>    recaman()<br/>    TextWindow.WriteLine(Text.GetSubTextToEnd(recaman,2))<br/>    nn=\"firstdup\"<br/>    recaman()<br/>    TextWindow.WriteLine(\"The first duplicated term is a[\"+n+\"]=\"+a[n])<br/>\u00a0<br/>Sub recaman<br/>    a=\"\"<br/>    b=\"\"<br/>    dup=\"\"<br/>    recaman=\"\"<br/>    firstdup=\"\"<br/>    If nn=\"firstdup\" Then<br/>        nn=1000<br/>        firstdup=\"True\"<br/>    EndIf<br/>    For n=0 To nn-1<br/>        ap=a[n-1]+n <br/>        If a[n-1]&lt;=n Then <br/>            a[n]=ap  'a[n]=a[n-1]+n<br/>            b[ap]=1<br/>        Else<br/>            am=a[n-1]-n<br/>            If b[am]=1 Then<br/>                a[n]=ap  'a[n]=a[n-1]+n<br/>                b[ap]=1<br/>            Else<br/>                a[n]=am  'a[n]=a[n-1]-n<br/>                b[am]=1<br/>            EndIf<br/>        EndIf<br/>        If firstdup Then<br/>            If dup[a[n]]=1 Then<br/>                Goto exitsub<br/>            EndIf<br/>            dup[a[n]]=1<br/>        EndIf<br/>        recaman=recaman+\",\"+a[n]<br/>    EndFor<br/>    exitsub:<br/>EndSub </pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@recamans</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">state</span> <span class=\"re0\">%seen</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">state</span> <span class=\"re0\">$term</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$term</span><span class=\"sy0\">++;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <span class=\"re0\">$^previous</span> <span class=\"sy0\">-</span> <span class=\"re0\">$term</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <span class=\"re0\">$previous</span> <span class=\"sy0\">+</span> <span class=\"re0\">$term</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">%seen</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">%seen</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$this</span><br/><span class=\"br0\">}</span> \u2026 <span class=\"sy0\">*;</span><br/>\u00a0<br/>put <span class=\"st0\">\"First fifteen terms of Recaman's sequence: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@recamans</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"First duplicate at term: a[{ @recamans.first({@recamans[^$_].Bag.values.max == 2})-1 }]\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@seen</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> int <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> int <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <span class=\"re0\">@recamans</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">or</span> <span class=\"re0\">@seen</span><span class=\"br0\">[</span><span class=\"re0\">$this</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@seen</span><span class=\"br0\">[</span><span class=\"re0\">$this</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Range 0..1000 covered by terms up to a[{$i - 1}]\"</span> <span class=\"kw1\">and</span> <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"sy0\">++</span>$ <span class=\"sy0\">==</span> <span class=\"nu0\">1001</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 42, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> islice<br/>\u00a0<br/><span class=\"kw1\">class</span> Recamans<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Recam\u00e1n's sequence generator callable class\"</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">a</span> <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>   <span class=\"co1\"># Set of results so far</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>   <span class=\"co1\"># n'th term (counting from zero)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__call__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"Recam\u00e1n's sequence  generator\"</span><br/>        nxt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        a<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"br0\">{</span>nxt<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">a</span> <span class=\"sy0\">=</span> a<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">yield</span> nxt<br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>            an1<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> nxt<span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><br/>            nxt <span class=\"sy0\">=</span> an1 - n<br/>            <span class=\"kw1\">if</span> nxt <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> nxt <span class=\"kw1\">in</span> a:<br/>                nxt <span class=\"sy0\">=</span> an1 + n<br/>            a.<span class=\"me1\">add</span><span class=\"br0\">(</span>nxt<span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> n<br/>            <span class=\"kw1\">yield</span> nxt<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    recamans <span class=\"sy0\">=</span> Recamans<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"First fifteen members of Recamans sequence:\"</span><span class=\"sy0\">,</span> <br/>          <span class=\"kw2\">list</span><span class=\"br0\">(</span>islice<span class=\"br0\">(</span>recamans<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    so_far <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> term <span class=\"kw1\">in</span> recamans<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> term <span class=\"kw1\">in</span> so_far:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">\"First duplicate number in series is: a({recamans.n}) = {term}\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><br/>        so_far.<span class=\"me1\">add</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000<br/>    setn <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\"># The target set of numbers to be covered</span><br/>    <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> recamans<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> setn.<span class=\"me1\">issubset</span><span class=\"br0\">(</span>recamans.<span class=\"me1\">a</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">\"Range 0 ..{n} is covered by terms up to a({recamans.n})\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span></pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>  if z&lt;0  then              z= _ + #\n          else if\u00a0!.z  then z= _ + #\n</pre>"}, {"lang": "Sidef", "loc": 46, "block": "<pre class=\"ruby highlighted_source\">func recamans_generator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var term = <span class=\"nu0\">0</span><br/>    var prev = <span class=\"nu0\">0</span><br/>    var seen = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">{</span><br/>        var this = <span class=\"br0\">(</span>prev <span class=\"sy0\">-</span> term<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>this <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> seen<span class=\"br0\">{</span>this<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            this = <span class=\"br0\">(</span>prev <span class=\"sy0\">+</span> term<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        prev = this<br/>        seen<span class=\"br0\">{</span>this<span class=\"br0\">}</span> = <span class=\"kw2\">true</span><br/>        term<span class=\"sy0\">++</span><br/>        this<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>with <span class=\"br0\">(</span>recamans_generator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">\"First 15 terms of the Recaman's sequence: \"</span>, <span class=\"nu0\">15</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> r.<span class=\"me1\">run</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>with <span class=\"br0\">(</span>recamans_generator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>    var seen = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Inf.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        var n = r.<span class=\"me1\">run</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>seen<span class=\"br0\">{</span>n<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            say <span class=\"st0\">\"First duplicate term in the series is a(#{i}) = #{n}\"</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>        seen<span class=\"br0\">{</span>n<span class=\"br0\">}</span> = <span class=\"kw2\">true</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>with <span class=\"br0\">(</span>recamans_generator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>    var seen = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Inf.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        var n = r.<span class=\"me1\">run</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>seen<span class=\"br0\">{</span>n<span class=\"br0\">}</span>\u00a0:= <span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>seen.<span class=\"me1\">len</span> == <span class=\"nu0\">1001</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            say <span class=\"st0\">\"Terms up to a(#{i}) are needed to generate 0 to 1000\"</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn recamanW{  // --&gt;iterator --&gt;(n,a,True if a is a dup)<br/>   Walker.tweak(fcn(rn,rp,d){<br/>      n,p,a\u00a0:= rn.value, rp.value, p - n;<br/>      if(a&lt;=0 or d.find(a)) a+=2*n;<br/>      d.incV(a); rp.set(a);<br/>      return(rn.inc(),a,d[a]&gt;1);<br/>   }.fp(Ref(0),Ref(0),Dictionary()) )<br/>}</pre>"}]}