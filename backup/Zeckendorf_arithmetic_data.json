{"task": "Zeckendorf_arithmetic", "blocks": [{"lang": "C++", "loc": 73, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// For a class N which implements Zeckendorf numbers:</span><br/><span class=\"co1\">// I define an increment operation ++()</span><br/><span class=\"co1\">// I define a comparison operation &lt;=(other N)</span><br/><span class=\"co1\">// I define an addition operation +=(other N)</span><br/><span class=\"co1\">// I define a subtraction operation -=(other N)</span><br/><span class=\"co1\">// Nigel Galloway October 28th., 2012</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">enum</span> <span class=\"kw2\">class</span> zd <span class=\"br0\">{</span>N00,N01,N10,N11<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> N <span class=\"br0\">{</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">int</span> dVal <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, dLen<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">void</span> _a<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dLen <span class=\"sy1\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>zd<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> zd<span class=\"sy4\">::</span><span class=\"me2\">N00</span><span class=\"sy4\">:</span> <span class=\"kw1\">case</span> zd<span class=\"sy4\">::</span><span class=\"me2\">N01</span><span class=\"sy4\">:</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> zd<span class=\"sy4\">::</span><span class=\"me2\">N10</span><span class=\"sy4\">:</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>                      dVal <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> zd<span class=\"sy4\">::</span><span class=\"me2\">N11</span><span class=\"sy4\">:</span> dVal <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> ~<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> _b<span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">void</span> _b<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy2\">++*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dVal <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> pos<span class=\"sy4\">;</span><br/>      _a<span class=\"br0\">(</span>pos<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> _a<span class=\"br0\">(</span><span class=\"br0\">(</span>pos<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      dVal <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> ~<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> pos<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      _b<span class=\"br0\">(</span>pos <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      _b<span class=\"br0\">(</span>pos <span class=\"sy2\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pos <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">?</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">void</span> _c<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>dVal <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> ~<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> pos<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    _c<span class=\"br0\">(</span>pos <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> _b<span class=\"br0\">(</span>pos <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> <span class=\"sy2\">++*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  N<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> x <span class=\"sy1\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, q <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dLen <span class=\"sy1\">=</span> <span class=\"sy2\">--</span>i<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>dVal<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">-</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"sy2\">*</span>q<span class=\"sy4\">;</span> q<span class=\"sy2\">*</span><span class=\"sy1\">=</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>dVal <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> _a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> GN <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> GN <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> GN<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> GN<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> _b<span class=\"br0\">(</span>GN<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">-</span><span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> GN <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> GN <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> GN<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> GN<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> _c<span class=\"br0\">(</span>GN<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> dLen<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> or dLen <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dLen<span class=\"sy2\">--</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">*</span><span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    N Na <span class=\"sy1\">=</span> other, Nb <span class=\"sy1\">=</span> other, Nt, Nr<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span>dLen <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> Nr <span class=\"sy2\">+</span><span class=\"sy1\">=</span> Nb<span class=\"sy4\">;</span><br/>      Nt <span class=\"sy1\">=</span> Nb<span class=\"sy4\">;</span> Nb <span class=\"sy2\">+</span><span class=\"sy1\">=</span> Na<span class=\"sy4\">;</span> Na <span class=\"sy1\">=</span> Nt<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span> <span class=\"sy1\">=</span> Nr<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> operator<span class=\"sy1\">&lt;=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> dVal <span class=\"sy1\">&lt;=</span> other.<span class=\"me1\">dVal</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>  <span class=\"kw2\">friend</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span>, <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>N operator <span class=\"st0\">\"\"</span> N<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> N<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span> <span class=\"sy3\">&amp;</span>operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span> <span class=\"sy3\">&amp;</span>os, <span class=\"kw4\">const</span> N <span class=\"sy3\">&amp;</span>G<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> dig<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"00\"</span>,<span class=\"st0\">\"01\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">}</span>, dig1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>  os <span class=\"sy1\">&lt;&lt;</span> dig1<span class=\"br0\">[</span><span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>G.<span class=\"me1\">dLen</span><span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> G.<span class=\"me1\">dLen</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span> os <span class=\"sy1\">&lt;&lt;</span> dig<span class=\"br0\">[</span><span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 189, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ZeckendorfArithmetic <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Zeckendorf <span class=\"sy0\">:</span> IComparable<span class=\"sy0\">&lt;</span>Zeckendorf<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dig <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"00\"</span>, <span class=\"st0\">\"01\"</span>, <span class=\"st0\">\"10\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dig1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"10\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> dVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> dLen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Zeckendorf<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// empty</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Zeckendorf<span class=\"br0\">(</span><span class=\"kw4\">string</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> x<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            dLen <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dVal <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> q<span class=\"sy0\">;</span><br/>                q <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                i<span class=\"sy0\">--;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> A<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                        dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                        dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>                        B<span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> B<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Inc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>                A<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> A<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>                temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>                B<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                B<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> C<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>                temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            C<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                B<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                Inc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Zeckendorf Inc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal<span class=\"sy0\">++;</span><br/>            A<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Zeckendorf Copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Zeckendorf z <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf <span class=\"br0\">{</span><br/>                dVal <span class=\"sy0\">=</span> dVal,<br/>                dLen <span class=\"sy0\">=</span> dLen<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> z<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PlusAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> gn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gn <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>other<span class=\"sy0\">.</span><span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> gn<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other<span class=\"sy0\">.</span><span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    B<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> MinusAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> gn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gn <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>other<span class=\"sy0\">.</span><span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> gn<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other<span class=\"sy0\">.</span><span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    C<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dLen<span class=\"sy0\">--;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> TimesAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Zeckendorf na <span class=\"sy0\">=</span> other<span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Zeckendorf nb <span class=\"sy0\">=</span> other<span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Zeckendorf nt<span class=\"sy0\">;</span><br/>            Zeckendorf nr <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    nr<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                nt <span class=\"sy0\">=</span> nb<span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                nb<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span>na<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                na <span class=\"sy0\">=</span> nt<span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            dVal <span class=\"sy0\">=</span> nr<span class=\"sy0\">.</span><span class=\"me1\">dVal</span><span class=\"sy0\">;</span><br/>            dLen <span class=\"sy0\">=</span> nr<span class=\"sy0\">.</span><span class=\"me1\">dLen</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> CompareTo<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> dVal<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>other<span class=\"sy0\">.</span><span class=\"me1\">dVal</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            StringBuilder sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span>dig1<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> dLen <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>                sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>dig<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Addition:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Zeckendorf g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1001\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1000\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Subtraction:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">MinusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">MinusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Multiplication:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1001\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">TimesAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101010\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">PlusAssign</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 172, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> inv<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">^</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Zeckendorf <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> dVal<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> dLen<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">void</span> a<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">auto</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">switch</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                    dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                    dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    b<span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            i<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">void</span> b<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span><span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>            a<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">void</span> c<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        c<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">string</span> x <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> x.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        dLen <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> q<span class=\"sy0\">;</span><br/>            q <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            i<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> opUnary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"++\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Zeckendorf rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>gn<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                b<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Zeckendorf rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>gn<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                c<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dLen<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Zeckendorf rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> na <span class=\"sy0\">=</span> rhs.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> nb <span class=\"sy0\">=</span> rhs.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        Zeckendorf nt<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> nr <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>dLen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> nr <span class=\"sy0\">+=</span> nb<span class=\"sy0\">;</span><br/>            nt <span class=\"sy0\">=</span> nb.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>            nb <span class=\"sy0\">+=</span> na<span class=\"sy0\">;</span><br/>            na <span class=\"sy0\">=</span> nt.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        dVal <span class=\"sy0\">=</span> nr.<span class=\"me1\">dVal</span><span class=\"sy0\">;</span><br/>        dLen <span class=\"sy0\">=</span> nr.<span class=\"me1\">dLen</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> toString<span class=\"br0\">(</span><span class=\"kw2\">scope</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> sink<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sink<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        sink<span class=\"br0\">(</span>dig1<span class=\"br0\">[</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"me1\">dLen</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sink<span class=\"br0\">(</span>dig<span class=\"br0\">[</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Zeckendorf dup<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> z <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>        z.<span class=\"me1\">dVal</span> <span class=\"sy0\">=</span> dVal<span class=\"sy0\">;</span><br/>        z.<span class=\"me1\">dLen</span> <span class=\"sy0\">=</span> dLen<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> z<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> dig <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"00\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"01\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> dig1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> Z<span class=\"br0\">(</span><span class=\"kw4\">string</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> Zeckendorf<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Addition:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> g <span class=\"sy0\">=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"1001\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"1000\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"10101\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Subtraction:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"1000\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">-=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"10101010\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">-=</span> <span class=\"st0\">\"1010101\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Multiplication:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"1001\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">*=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"101010\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    g <span class=\"sy0\">+=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 239, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>const dig = (\"00\",\"01\",\"10\").<br/>const dig1 = (\"\",\"1\",\"10\").<br/>\u00a0<br/>sealed struct ZeckendorfNumber\u00a0:: BaseNumber<br/>{<br/>    int dVal.<br/>    int dLen.<br/>\u00a0<br/>    clone<br/>        = ZeckendorfNumber $new(dVal,dLen).<br/>\u00a0<br/>    stacksafe explicit n(LiteralValue s)<br/>    [<br/>        int i\u00a0:= s length - 1.<br/>        int q\u00a0:= 1.<br/>\u00a0<br/>        dLen\u00a0:= i / 2.<br/>        dVal\u00a0:= 0.<br/>\u00a0<br/>        while (i &gt;= 0)<br/>        [<br/>            dVal += ((intConvertor convert(s[i]) - 48) * q).<br/>            q *= 2. <br/>\u00a0<br/>            i -= 1.<br/>        ].<br/>    ]<br/>\u00a0<br/>    stacksafe $readContent vint:val vint:len<br/>    [<br/>        val int\u00a0:= dVal.<br/>        len int\u00a0:= dLen.<br/>    ]<br/>\u00a0<br/>    sealed $a(IntNumber n)<br/>    [<br/>        int i\u00a0:= n.<br/>\u00a0<br/>        while (true)<br/>        [<br/>            if (dLen &lt; i)<br/>            [<br/>                dLen\u00a0:= i.<br/>            ].<br/>\u00a0<br/>            ((dVal &gt;&gt; (i * 2)) &amp;&amp; 3) =&gt;<br/>                0 [ ^ $self ];<br/>                1 [ ^ $self ];<br/>                2 [<br/>                    ifnot ((dVal &gt;&gt; ((i + 1) * 2)) allMask:1)<br/>                    [<br/>                        ^ $self.<br/>                    ].<br/>\u00a0<br/>                    dVal += (1 &lt;&lt; (i*2 + 1)).<br/>                    ^ $self.<br/>                ];<br/>                3 [<br/>                    dVal\u00a0:= dVal &amp;&amp; ((3 &lt;&lt; i*2) inverted).<br/>\u00a0<br/>                    $self $b((i+1)*2).<br/>                ].<br/>\u00a0<br/>            i += 1.<br/>        ].<br/>    ]<br/>\u00a0<br/>    inc<br/>    [<br/>        dVal += 1.<br/>        $self $a(0).<br/>    ]<br/>\u00a0<br/>    $b(IntNumber pos)<br/>    [<br/>        if (pos == 0) [ ^ $self inc ].<br/>\u00a0<br/>        ifnot((dVal &gt;&gt; pos) allMask:1)<br/>        [<br/>            dVal += (1 &lt;&lt; pos).<br/>            $self $a(pos / 2).<br/>            if (pos &gt; 1) [ $self $a((pos / 2) - 1) ]<br/>        ];<br/>        [<br/>            dVal\u00a0:= dVal &amp;&amp; (1 &lt;&lt; pos) inverted.<br/>            $self $b(pos + 1).<br/>            $self $b(pos - (pos &gt; 1) iif(2,1)).<br/>        ].<br/>    ]<br/>\u00a0<br/>    $c(IntNumber pos)<br/>    [<br/>        if ((dVal &gt;&gt; pos) allMask:1)<br/>        [<br/>            dVal\u00a0:= dVal &amp;&amp; (1 &lt;&lt; pos) inverted.<br/>\u00a0<br/>            ^ $self<br/>        ].<br/>\u00a0<br/>        $self $c(pos + 1).<br/>\u00a0<br/>        if (pos &gt; 0)<br/>        [<br/>            $self $b(pos - 1).<br/>        ];<br/>        [<br/>            $self inc.<br/>        ]            <br/>    ]<br/>\u00a0<br/>    constructor $sum(ZeckendorfNumber n, ZeckendorfNumber m)<br/>    [<br/>        int mVal\u00a0:= 0.<br/>        int mLen\u00a0:= 0.<br/>\u00a0<br/>        n $readContent vint:dVal vint:dLen.        <br/>        m $readContent vint:mVal vint:mLen.<br/>\u00a0<br/>        0 till((mLen + 1) * 2) do(:GN)<br/>        [<br/>            if (mVal shiftRight:GN; allMask:1)<br/>            [<br/>                $self $b(GN).<br/>            ].<br/>        ].<br/>    ]<br/>\u00a0<br/>    constructor $difference(ZeckendorfNumber n, ZeckendorfNumber m)<br/>    [<br/>        int mVal\u00a0:= 0.<br/>        int mLen\u00a0:= 0.<br/>\u00a0<br/>        n $readContent vint:dVal vint:dLen.        <br/>        m $readContent vint:mVal vint:mLen.<br/>\u00a0<br/>        0 till((mLen + 1) * 2) do(:GN)      <br/>        [<br/>            if (mVal shiftRight:GN; allMask:1)<br/>            [<br/>                $self $c(GN).<br/>            ].<br/>        ].<br/>\u00a0<br/>        while ((((dVal &gt;&gt; (dLen*2)) &amp;&amp; 3) == 0) || (dLen == 0))<br/>        [<br/>            dLen -= 1.<br/>        ].<br/>    ]<br/>\u00a0<br/>    constructor $product(ZeckendorfNumber n, ZeckendorfNumber m)<br/>    [<br/>        n $readContent vint:dVal vint:dLen.        <br/>\u00a0<br/>        var Na\u00a0:= m.<br/>        var Nb\u00a0:= m.<br/>        var Nr\u00a0:= 0n.<br/>        var Nt\u00a0:= 0n.<br/>\u00a0<br/>        0 to((dLen + 1) * 2) do(:i)<br/>        [<br/>            if (((dVal shiftRight:i) &amp;&amp; 1) &gt; 0)<br/>            [<br/>                Nr += Nb<br/>            ].<br/>            Nt\u00a0:= Nb.<br/>            Nb += Na.<br/>            Na\u00a0:= Nt.<br/>        ].<br/>\u00a0<br/>        Nr $readContent vint:dVal vint:dLen.<br/>    ]<br/>\u00a0<br/>    constructor $new(IntNumber v, IntNumber l)<br/>    [<br/>        dVal\u00a0:= v.<br/>        dLen\u00a0:= l.<br/>    ]<br/>\u00a0<br/>    literal<br/>    [<br/>        if (dVal == 0)<br/>            [ ^ \"0\". ].<br/>\u00a0<br/>        literal s\u00a0:= dig1[(dVal &gt;&gt; (dLen * 2)) &amp;&amp; 3].<br/>        int i\u00a0:= dLen - 1.<br/>        while (i &gt;= 0)<br/>        [<br/>            s\u00a0:= s + dig[(dVal &gt;&gt; (i * 2)) &amp;&amp; 3].<br/>\u00a0<br/>            i-=1<br/>        ].<br/>\u00a0<br/>        ^ s.<br/>    ]<br/>\u00a0<br/>    add(ZeckendorfNumber n)<br/>        = ZeckendorfNumber $sum($self, n).<br/>\u00a0<br/>    subtract(ZeckendorfNumber n)<br/>        = ZeckendorfNumber $difference($self, n).<br/>\u00a0<br/>    multiply(ZeckendorfNumber n)<br/>        = ZeckendorfNumber $product($self, n).<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(\"Addition:\").<br/>    var n\u00a0:= 10n.<br/>\u00a0<br/>    n += 10n.    <br/>    console printLine(n).<br/>    n += 10n.    <br/>    console printLine(n).<br/>    n += 1001n.    <br/>    console printLine(n).<br/>    n += 1000n.    <br/>    console printLine(n).<br/>    n += 10101n.    <br/>    console printLine(n).<br/>\u00a0<br/>    console printLine(\"Subtraction:\").<br/>    n\u00a0:= 1000n.<br/>    n -= 101n.<br/>    console printLine(n).<br/>    n\u00a0:= 10101010n.<br/>    n -= 1010101n.<br/>    console printLine(n).<br/>\u00a0<br/>    console printLine(\"Multiplication:\").<br/>    n\u00a0:= 1001n.<br/>    n *= 101n.<br/>    console printLine(n).<br/>    n\u00a0:= 101010n.<br/>    n += 101n.<br/>    console printLine(n).<br/>].</pre>"}, {"lang": "Java", "loc": 186, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Zeckendorf <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>Zeckendorf<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> dig <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"st0\">\"00\"</span>, <span class=\"st0\">\"01\"</span>, <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> dig1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> dVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> dLen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Zeckendorf<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Zeckendorf<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> x.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        dLen <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>x.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> q<span class=\"sy0\">;</span><br/>            q <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            i<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> a<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                    dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>                    b<span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            i<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> b<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Zeckendorf thiz <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>            thiz.<span class=\"me1\">inc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>            a<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>            temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> c<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<span class=\"sy0\">;</span><br/>            temp <span class=\"sy0\">^=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            dVal <span class=\"sy0\">=</span> dVal <span class=\"sy0\">&amp;</span> temp<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        c<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            b<span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            Zeckendorf thiz <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>            thiz.<span class=\"me1\">inc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Zeckendorf inc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dVal<span class=\"sy0\">++;</span><br/>        a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> plusAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> gn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gn <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> gn<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                b<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> minusAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> gn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gn <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> gn<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> <span class=\"sy0\">&gt;&gt;</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                c<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dLen<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> timesAssign<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Zeckendorf na <span class=\"sy0\">=</span> other.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Zeckendorf nb <span class=\"sy0\">=</span> other.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Zeckendorf nt<span class=\"sy0\">;</span><br/>        Zeckendorf nr <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nr.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            nt <span class=\"sy0\">=</span> nb.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            nb.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span>na<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            na <span class=\"sy0\">=</span> nt.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        dVal <span class=\"sy0\">=</span> nr.<span class=\"me1\">dVal</span><span class=\"sy0\">;</span><br/>        dLen <span class=\"sy0\">=</span> nr.<span class=\"me1\">dLen</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> Zeckendorf copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Zeckendorf z <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        z.<span class=\"me1\">dVal</span> <span class=\"sy0\">=</span> dVal<span class=\"sy0\">;</span><br/>        z.<span class=\"me1\">dLen</span> <span class=\"sy0\">=</span> dLen<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> z<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>Zeckendorf other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">)</span> dVal<span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        StringBuilder stringBuilder <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span>dig1.<span class=\"me1\">get</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> dLen <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            stringBuilder.<span class=\"me1\">append</span><span class=\"br0\">(</span>dig.<span class=\"me1\">get</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> stringBuilder.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Addition:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Zeckendorf g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1001\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1000\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Subtraction:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">minusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">minusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Multiplication:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"1001\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">timesAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101010\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">plusAssign</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Zeckendorf<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 156, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Zeckendorf<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Zeckendorf<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dLen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun a<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dLen <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy0\">=</span> i<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dVal shr <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> and <span class=\"nu0\">3</span><br/>            when <span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>\u00a0<br/>                <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal shr <span class=\"br0\">(</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>                    dVal +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> shl <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                    dVal <span class=\"sy0\">=</span> dVal and <span class=\"br0\">(</span><span class=\"nu0\">3</span> shl <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    b<span class=\"br0\">(</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            i++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun b<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> thiz <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>            ++thiz<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal shr pos<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> shl pos<br/>            a<span class=\"br0\">(</span>pos / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span>pos / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">=</span> dVal and <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl pos<span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            b<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            b<span class=\"br0\">(</span>pos - <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun c<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal shr pos<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal <span class=\"sy0\">=</span> dVal and <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl pos<span class=\"br0\">)</span>.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        c<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> b<span class=\"br0\">(</span>pos - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> thiz <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">;</span> ++thiz <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> x.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><br/>        dLen <span class=\"sy0\">=</span> i / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dVal +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - <span class=\"st0\">'0'</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> q<br/>            q <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>            i--<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun inc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Zeckendorf <span class=\"br0\">{</span><br/>        dVal +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun plusAssign<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Zeckendorf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>gn in <span class=\"nu0\">0</span> until <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> shr gn<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> b<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun minusAssign<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Zeckendorf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>gn in <span class=\"nu0\">0</span> until <span class=\"br0\">(</span>other.<span class=\"me1\">dLen</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span> shr gn<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> c<span class=\"br0\">(</span>gn<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal shr dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> and <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>dLen <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> dLen--<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun timesAssign<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Zeckendorf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> na <span class=\"sy0\">=</span> other.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nb <span class=\"sy0\">=</span> other.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nt<span class=\"sy0\">:</span> Zeckendorf<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nr <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>.<span class=\"me1\">Z</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"br0\">(</span>dLen + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal shr i<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> nr +<span class=\"sy0\">=</span> nb<br/>            nt <span class=\"sy0\">=</span> nb.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            nb +<span class=\"sy0\">=</span> na<br/>            na <span class=\"sy0\">=</span> nt.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        dVal <span class=\"sy0\">=</span> nr.<span class=\"me1\">dVal</span><br/>        dLen <span class=\"sy0\">=</span> nr.<span class=\"me1\">dLen</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> operator fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Zeckendorf<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dVal.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other.<span class=\"me1\">dVal</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dVal <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"0\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span>dig1<span class=\"br0\">[</span><span class=\"br0\">(</span>dVal shr <span class=\"br0\">(</span>dLen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> and <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in dLen - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>dig<span class=\"br0\">[</span><span class=\"br0\">(</span>dVal shr <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> and <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun copy<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Zeckendorf <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> z <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>.<span class=\"me1\">Z</span><br/>        z.<span class=\"me1\">dVal</span> <span class=\"sy0\">=</span> dVal<br/>        z.<span class=\"me1\">dLen</span> <span class=\"sy0\">=</span> dLen<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> z<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dig <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"00\"</span>, <span class=\"st0\">\"01\"</span>, <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dig1 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> String.<span class=\"me1\">Z</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Zeckendorf<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Addition:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> g <span class=\"sy0\">=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"10\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"1001\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"1000\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"10101\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Subtraction:\"</span><span class=\"br0\">)</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"1000\"</span>.<span class=\"me1\">Z</span><br/>    g -<span class=\"sy0\">=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"10101010\"</span>.<span class=\"me1\">Z</span><br/>    g -<span class=\"sy0\">=</span> <span class=\"st0\">\"1010101\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Multiplication:\"</span><span class=\"br0\">)</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"1001\"</span>.<span class=\"me1\">Z</span><br/>    g <span class=\"sy0\">*=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    g <span class=\"sy0\">=</span> <span class=\"st0\">\"101010\"</span>.<span class=\"me1\">Z</span><br/>    g +<span class=\"sy0\">=</span> <span class=\"st0\">\"101\"</span>.<span class=\"me1\">Z</span><br/>    println<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre> addition: <b>+z</b>\n subtraction: <b>-z</b>\n multiplication: <b>*z</b>\n division: <b>/z</b> (more of a divmod really)\n post increment: <b>++z</b>\n post decrement: <b>--z</b>\n</pre>"}, {"lang": "Phix", "loc": 267, "block": "<pre class=\"text highlighted_source\">sequence fib = {1,1}<br/>\u00a0<br/>function zeckendorf(atom n)<br/>-- Same as [[Zeckendorf_number_representation#Phix]]<br/>atom r = 0<br/>    while fib[$]&lt;n do<br/>        fib &amp;= fib[$] + fib[$-1]<br/>    end while<br/>    integer k = length(fib)<br/>    while k&gt;2 and n&lt;fib[k] do<br/>        k -= 1<br/>    end while   <br/>    for i=k to 2 by -1 do<br/>        integer c = n&gt;=fib[i]<br/>        r += r+c<br/>        n -= c*fib[i]<br/>    end for<br/>    return r<br/>end function<br/>\u00a0<br/>function decimal(object z)<br/>-- Convert Zeckendorf number(s) to decimal<br/>atom dec = 0, bit = 2<br/>    if sequence(z) then<br/>        for i=1 to length(z) do<br/>            z[i] = decimal(z[i])<br/>        end for<br/>        return z<br/>    end if<br/>    while z do<br/>        if and_bits(z,1) then<br/>            dec += fib[bit]<br/>        end if<br/>        bit += 1<br/>        if bit&gt;length(fib) then<br/>            fib &amp;= fib[$] + fib[$-1]<br/>        end if<br/>        z = floor(z/2)<br/>    end while<br/>    return dec<br/>end function<br/>\u00a0<br/>function to_bits(integer x)<br/>-- Simplified copy of int_to_bits(), but in reverse order, <br/>-- and +ve only but (also only) as many bits as needed, and<br/>-- ensures there are *two* trailing 0 (most significant)<br/>    sequence bits = {}<br/>    if x&lt;0 then\u00a0?9/0 end if     -- sanity/avoid infinite loop<br/>    while 1 do<br/>        bits &amp;= remainder(x,2)<br/>        if x=0 then exit end if<br/>        x = floor(x/2)<br/>    end while<br/>    bits &amp;= 0 -- (since eg 101+101 -&gt; 10000)<br/>    return bits<br/>end function<br/>\u00a0<br/>function to_bits2(integer a,b)<br/>-- Apply to_bits() to a and b, and pad to the same length<br/>    sequence sa = to_bits(a), sb = to_bits(b)<br/>    integer diff = length(sa)-length(sb)<br/>    if diff!=0 then<br/>        if diff&lt;0 then  sa &amp;= repeat(0,-diff)<br/>                  else  sb &amp;= repeat(0,+diff)<br/>        end if<br/>    end if<br/>    return {sa,sb}<br/>end function<br/>\u00a0<br/>function to_int(sequence bits)<br/>-- Copy of bits_to_int(), but in reverse order (lsb last)<br/>    atom val = 0, p = 1<br/>    for i=length(bits) to 1 by -1 do<br/>        if bits[i] then<br/>            val += p<br/>        end if<br/>        p += p<br/>    end for<br/>    return val<br/>end function<br/>\u00a0<br/>function zstr(object z)<br/>    if sequence(z) then<br/>        for i=1 to length(z) do<br/>            z[i] = zstr(z[i])<br/>        end for<br/>        return z<br/>    end if<br/>    return sprintf(\"%b\",z)<br/>end function<br/>\u00a0<br/>function rep(sequence res, integer ds, sequence was, wth)<br/>-- helper for cleanup, validates replacements <br/>    integer de = ds+length(was)-1<br/>    if res[ds..de]!=was then\u00a0?9/0 end if<br/>    if length(was)!=length(wth) then\u00a0?9/0 end if<br/>    res[ds..de] = wth<br/>    return res<br/>end function<br/>\u00a0<br/>function zcleanup(sequence res)<br/>-- (shared by zadd and zsub)<br/>    integer l = length(res)<br/>    -- first stage, left to right, {020x -&gt; 100x', 030x -&gt; 110x', 021x-&gt;110x, 012x-&gt;101x}<br/>    for i=1 to l-3 do<br/>        switch res[i..i+2]<br/>            case {0,2,0}:   res[i..i+2] = {1,0,0}   res[i+3] += 1<br/>            case {0,3,0}:   res[i..i+2] = {1,1,0}   res[i+3] += 1<br/>            case {0,2,1}:   res[i..i+2] = {1,1,0}<br/>            case {0,1,2}:   res[i..i+2] = {1,0,1}<br/>        end switch<br/>    end for<br/>    -- first stage cleanup<br/>    if l&gt;1 then<br/>        if res[l-1]=3 then      res = rep(res,l-2,{0,3,0},{1,1,1})      -- 030 -&gt; 111<br/>        elsif res[l-1]=2 then<br/>            if res[l-2]=0 then  res = rep(res,l-2,{0,2,0},{1,0,1})      -- 020 -&gt; 101<br/>                          else  res = rep(res,l-3,{0,1,2,0},{1,0,1,0})  -- 0120 -&gt; 1010<br/>            end if<br/>        end if<br/>    end if<br/>    if res[l]=3 then            res = rep(res,l-1,{0,3},{1,1})          -- 03 -&gt; 11<br/>    elsif res[l]=2 then<br/>        if res[l-1]=0 then      res = rep(res,l-1,{0,2},{1,0})          -- 02 -&gt; 10<br/>                      else      res = rep(res,l-2,{0,1,2},{1,0,1})      -- 012 -&gt; 101<br/>        end if<br/>    end if      <br/>    -- second stage, pass 1, right to left, 011 -&gt; 100<br/>    for i=length(res)-2 to 1 by -1 do<br/>        if res[i..i+2]={0,1,1} then res[i..i+2] = {1,0,0} end if<br/>    end for<br/>    -- second stage, pass 2, left to right, 011 -&gt; 100<br/>    for i=1 to length(res)-2 do<br/>        if res[i..i+2]={0,1,1} then res[i..i+2] = {1,0,0} end if<br/>    end for<br/>    return to_int(res)<br/>end function<br/>\u00a0<br/>function zadd(integer a, b)<br/>    sequence {sa,sb} = to_bits2(a,b)<br/>    return zcleanup(reverse(sq_add(sa,sb)))<br/>end function<br/>\u00a0<br/>function zinc(integer a)<br/>    return zadd(a,0b1)<br/>end function<br/>\u00a0<br/>function zsub(integer a, b)<br/>    sequence {sa,sb} = to_bits2(a,b)<br/>    sequence res = reverse(sq_sub(sa,sb))<br/>    -- (/not/ combined with the first pass of the add routine!)<br/>    for i=1 to length(res)-2 do<br/>        switch res[i..i+2] do<br/>            case {1, 0, 0}: res[i..i+2] = {0,1,1}<br/>            case {1,-1, 0}: res[i..i+2] = {0,0,1}<br/>            case {1,-1, 1}: res[i..i+2] = {0,0,2}<br/>            case {1, 0,-1}: res[i..i+2] = {0,1,0}<br/>            case {2, 0, 0}: res[i..i+2] = {1,1,1}<br/>            case {2,-1, 0}: res[i..i+2] = {1,0,1}<br/>            case {2,-1, 1}: res[i..i+2] = {1,0,2}<br/>            case {2, 0,-1}: res[i..i+2] = {1,1,0}<br/>        end switch<br/>    end for<br/>    -- copied from PicoLisp: {1,-1} -&gt; {0,1} and {2,-1} -&gt; {1,1}<br/>    for i=1 to length(res)-1 do<br/>        switch res[i..i+1] do<br/>            case {1,-1}: res[i..i+1] = {0,1}<br/>            case {2,-1}: res[i..i+1] = {1,1}<br/>        end switch<br/>    end for<br/>    if find(-1,res) then\u00a0?9/0 end if -- sanity check<br/>    return zcleanup(res)<br/>end function<br/>\u00a0<br/>function zdec(integer a)<br/>    return zsub(a,0b1)<br/>end function<br/>\u00a0<br/>function zmul(integer a, b)<br/>integer res = 0<br/>    sequence mult = {a,zadd(a,a)}   -- (as per task desc)<br/>    integer bits = 2<br/>    while bits&lt;b do<br/>        mult = append(mult,zadd(mult[$],mult[$-1]))<br/>        bits *= 2<br/>    end while<br/>    integer bit = 1<br/>    while b do<br/>        if and_bits(b,1) then<br/>            res = zadd(res,mult[bit])<br/>        end if<br/>        b = floor(b/2)<br/>        bit += 1<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>function zdiv(integer a, b)<br/>integer res = 0<br/>    sequence mult = {b,zadd(b,b)}<br/>    integer bits = 2<br/>    while mult[$]&lt;a do<br/>        mult = append(mult,zadd(mult[$],mult[$-1]))<br/>        bits *= 2<br/>    end while<br/>    for i=length(mult) to 1 by -1 do<br/>        integer mi = mult[i]<br/>        if mi&lt;=a then<br/>            res = zadd(res,bits)<br/>            a = zsub(a,mi)<br/>            if a=0 then exit end if<br/>        end if<br/>        bits = floor(bits/2)<br/>    end for<br/>    return {res,a} -- (a is the remainder)<br/>end function<br/>\u00a0<br/>for i=0 to 20 do<br/>    integer zi = zeckendorf(i)<br/>    atom d = decimal(zi)<br/>    printf(1,\"%2d:\u00a0%7b (%d)\\n\",{i,zi,d})<br/>end for<br/>\u00a0<br/>procedure test(atom a, string op, atom b, object res, string expected)<br/>    string zres = iff(atom(res)?zstr(res):join(zstr(res),\" rem \")),<br/>           dres = sprintf(iff(atom(res)?\"%d\":\"%d rem\u00a0%d\"),decimal(res)),<br/>           aka = sprintf(\"aka\u00a0%d\u00a0%s\u00a0%d =\u00a0%s\",{decimal(a),op,decimal(b),dres}),<br/>           ok = iff(zres=expected?\"\":\" *** ERROR ***!!\")<br/>    printf(1,\"%s\u00a0%s\u00a0%s =\u00a0%s,\u00a0%s\u00a0%s\\n\",{zstr(a),op,zstr(b),zres,aka,ok})<br/>end procedure<br/>\u00a0<br/>test(0b0,\"+\",0b0,zadd(0b0,0b0),\"0\")<br/>test(0b101,\"+\",0b101,zadd(0b101,0b101),\"10000\")<br/>test(0b10100,\"-\",0b1000,zsub(0b10100,0b1000),\"1001\")<br/>test(0b100100,\"-\",0b1000,zsub(0b100100,0b1000),\"10100\")<br/>test(0b1001,\"*\",0b101,zmul(0b1001,0b101),\"1000100\")<br/>test(0b1000101,\"/\",0b101,zdiv(0b1000101,0b101),\"1001 rem 1\")<br/>\u00a0<br/>test(0b10,\"+\",0b10,zadd(0b10,0b10),\"101\")<br/>test(0b101,\"+\",0b10,zadd(0b101,0b10),\"1001\")<br/>test(0b1001,\"+\",0b1001,zadd(0b1001,0b1001),\"10101\")<br/>test(0b10101,\"+\",0b1000,zadd(0b10101,0b1000),\"100101\")<br/>test(0b100101,\"+\",0b10101,zadd(0b100101,0b10101),\"1010000\")<br/>test(0b1000,\"-\",0b101,zsub(0b1000,0b101),\"1\")<br/>test(0b10101010,\"-\",0b1010101,zsub(0b10101010,0b1010101),\"1000000\")<br/>test(0b1001,\"*\",0b101,zmul(0b1001,0b101),\"1000100\")<br/>test(0b101010,\"+\",0b101,zadd(0b101010,0b101),\"1000100\")<br/>\u00a0<br/>test(0b10100,\"+\",0b1010,zadd(0b10100,0b1010),\"101000\")<br/>test(0b101000,\"-\",0b1010,zsub(0b101000,0b1010),\"10100\")<br/>\u00a0<br/>test(0b100010,\"*\",0b100101,zmul(0b100010,0b100101),\"100001000001\")<br/>test(0b100001000001,\"/\",0b100,zdiv(0b100001000001,0b100),\"101010001 rem 0\")<br/>test(0b101000101,\"*\",0b101001,zmul(0b101000101,0b101001),\"101010000010101\")<br/>test(0b101010000010101,\"/\",0b100,zdiv(0b101010000010101,0b100),\"1001010001001 rem 10\")<br/>\u00a0<br/>test(0b10100010010100,\"+\",0b1001000001,zadd(0b10100010010100,0b1001000001),\"100000000010101\")<br/>test(0b10100010010100,\"-\",0b1001000001,zsub(0b10100010010100,0b1001000001),\"10010001000010\")<br/>test(0b10000,\"*\",0b1001000001,zmul(0b10000,0b1001000001),\"10100010010100\")<br/>test(0b1010001010000001001,\"/\",0b100000000100000,zdiv(0b1010001010000001001,0b100000000100000),\"10001 rem 10100001010101\")<br/>\u00a0<br/>test(0b10100,\"+\",0b1010,zadd(0b10100,0b1010),\"101000\")<br/>test(0b10100,\"-\",0b1010,zsub(0b10100,0b1010),\"101\")<br/>test(0b10100,\"*\",0b1010,zmul(0b10100,0b1010),\"101000001\")<br/>test(0b10100,\"/\",0b1010,zdiv(0b10100,0b1010),\"1 rem 101\")<br/>integer m = zmul(0b10100,0b1010)<br/>test(m,\"/\",0b1010,zdiv(m,0b1010),\"10100 rem 0\")</pre>"}, {"lang": "PicoLisp", "loc": 133, "block": "<pre class=\"text highlighted_source\">(seed (in \"/dev/urandom\" (rd 8)))<br/>\u00a0<br/>(de unpad (Lst)<br/>   (while (=0 (car Lst))<br/>      (pop 'Lst) )<br/>   Lst )<br/>\u00a0<br/>(de numz (N)<br/>   (let Fibs (1 1)<br/>      (while (&gt;= N (+ (car Fibs) (cadr Fibs)))<br/>         (push 'Fibs (+ (car Fibs) (cadr Fibs))) )<br/>      (make<br/>         (for I (uniq Fibs)<br/>            (if (&gt; I N)<br/>               (link 0)<br/>               (link 1)<br/>               (dec 'N I) ) ) ) ) )<br/>\u00a0<br/>(de znum (Lst)<br/>   (let Fibs (1 1)<br/>      (do (dec (length Lst))<br/>         (push 'Fibs (+ (car Fibs) (cadr Fibs))) )<br/>      (sum<br/>         '((X Y) (unless (=0 X) Y))<br/>         Lst<br/>         (uniq Fibs) ) ) )<br/>\u00a0<br/>(de incz (Lst)<br/>   (addz Lst (1)) )<br/>\u00a0<br/>(de decz (Lst)<br/>   (subz Lst (1)) )<br/>\u00a0<br/>(de addz (Lst1 Lst2)<br/>   (let Max (max (length Lst1) (length Lst2))<br/>      (reorg<br/>         (mapcar + (need Max Lst1 0) (need Max Lst2 0)) ) ) )<br/>\u00a0<br/>(de subz (Lst1 Lst2)<br/>   (use (@A @B)<br/>      (let<br/>         (Max (max (length Lst1) (length Lst2))<br/>            Lst (mapcar - (need Max Lst1 0) (need Max Lst2 0)) )<br/>         (loop <br/>            (while (match '(@A 1 0 0 @B) Lst)<br/>               (setq Lst (append @A (0 1 1) @B)) )<br/>            (while (match '(@A 1 -1 0 @B) Lst)<br/>               (setq Lst (append @A (0 0 1) @B)) )<br/>            (while (match '(@A 1 -1 1 @B) Lst)<br/>               (setq Lst (append @A (0 0 2) @B)) )<br/>            (while (match '(@A 1 0 -1 @B) Lst)<br/>               (setq Lst (append @A (0 1 0) @B)) )<br/>            (while (match '(@A 2 0 0 @B) Lst)<br/>               (setq Lst (append @A (1 1 1) @B)) )<br/>            (while (match '(@A 2 -1 0 @B) Lst)<br/>               (setq Lst (append @A (1 0 1) @B)) )<br/>            (while (match '(@A 2 -1 1 @B) Lst)<br/>               (setq Lst (append @A (1 0 2) @B)) )<br/>            (while (match '(@A 2 0 -1 @B) Lst)<br/>               (setq Lst (append @A (1 1 0) @B)) )<br/>            (while (match '(@A 1 -1) Lst)<br/>               (setq Lst (append @A (0 1))) )<br/>            (while (match '(@A 2 -1) Lst)<br/>               (setq Lst (append @A (1 1))) )<br/>            (NIL (match '(@A -1 @B) Lst)) )<br/>         (reorg (unpad Lst)) ) ) )<br/>\u00a0<br/>(de mulz (Lst1 Lst2)<br/>   (let (Sums (list Lst1) Mulz (0))<br/>      (mapc<br/>         '((X)<br/>            (when (= 1 (car X))<br/>               (setq Mulz (addz (cdr X) Mulz)) ) <br/>            Mulz )<br/>         (mapcar<br/>            '((X)<br/>               (cons<br/>                  X <br/>                  (push 'Sums (addz (car Sums) (cadr Sums))) ) )<br/>            (reverse Lst2) ) ) ) ) <br/>\u00a0<br/>(de divz (Lst1 Lst2)<br/>   (let Q 0<br/>      (while (lez Lst2 Lst1)<br/>         (setq Lst1 (subz Lst1 Lst2))<br/>         (setq Q (incz Q)) )<br/>      (list Q (or Lst1 (0))) ) )<br/>\u00a0<br/>(de reorg (Lst)<br/>   (use (@A @B)<br/>      (let Lst (reverse Lst)<br/>         (loop<br/>            (while (match '(@A 1 1 @B) Lst)<br/>               (if @B<br/>                  (inc (nth @B 1))<br/>                  (setq @B (1)) )<br/>               (setq Lst (append @A (0 0) @B) ) )<br/>            (while (match '(@A 2 @B) Lst)<br/>               (inc<br/>                  (if (cdr @A) <br/>                     (tail 2 @A)<br/>                     @A ) )<br/>               (if @B<br/>                  (inc (nth @B 1))<br/>                  (setq @B (1)) )<br/>               (setq Lst (append @A (0) @B)) )<br/>            (NIL<br/>               (or<br/>                  (match '(@A 1 1 @B) Lst)<br/>                  (match '(@A 2 @B) Lst) ) ) )<br/>         (reverse Lst) ) ) )<br/>\u00a0<br/>(de lez (Lst1 Lst2)<br/>   (let Max (max (length Lst1) (length Lst2))<br/>      (&lt;= (need Max Lst1 0) (need Max Lst2 0)) ) )<br/>\u00a0<br/>(let (X 0 Y 0)<br/>   (do 1024<br/>      (setq X (rand 1 1024))<br/>      (setq Y (rand 1 1024))<br/>      (test (numz (+ X Y)) (addz (numz X) (numz Y)))<br/>      (test (numz (* X Y)) (mulz (numz X) (numz Y)))<br/>      (test (numz (+ X 1)) (incz (numz X))) )<br/>\u00a0<br/>   (do 1024<br/>      (setq X (rand 129 1024))<br/>      (setq Y (rand 1 128))<br/>      (test (numz (- X Y)) (subz (numz X) (numz Y)))<br/>      (test (numz (/ X Y)) (car (divz (numz X) (numz Y))))<br/>      (test (numz (% X Y)) (cadr (divz (numz X) (numz Y))))<br/>      (test (numz (- X 1)) (decz (numz X))) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "Racket", "loc": 196, "block": "<pre class=\"text highlighted_source\">#lang racket (require math)<br/>\u00a0<br/>(define sqrt5 (sqrt 5))<br/>(define phi (* 0.5 (+ 1 sqrt5)))<br/>\u00a0<br/>;; What is the nth fibonnaci number, shifted by 2 so that<br/>;; F(0) = 1, F(1) = 2, ...?<br/>;;<br/>(define (F n)<br/>  (fibonacci (+ n 2)))<br/>\u00a0<br/>;; What is the largest n such that F(n) &lt;= m?<br/>;;<br/>(define (F* m)<br/>  (let ([n (- (inexact-&gt;exact (round (/ (log (* m sqrt5)) (log phi)))) 2)])<br/>    (if (&lt;= (F n) m) n (sub1 n))))<br/>\u00a0<br/>(define (zeck-&gt;natural z)<br/>  (for/sum ([i (reverse z)]<br/>            [j (in-naturals)])<br/>    (* i (F j))))<br/>\u00a0<br/>(define (natural-&gt;zeck n)<br/>  (if (zero? n)<br/>      null<br/>      (for/list ([i (in-range (F* n) -1 -1)])<br/>        (let ([f (F i)])<br/>          (cond [(&gt;= n f) (set! n (- n f))<br/>                          1]<br/>                [else 0])))))<br/>\u00a0<br/>; Extend list to the right to a length of len with repeated padding elements<br/>;<br/>(define (pad lst len [padding 0])<br/>  (append lst (make-list (- len (length lst)) padding)))<br/>\u00a0<br/>; Strip padding elements from the left of the list<br/>;<br/>(define (unpad lst [padding 0])<br/>  (cond [(null? lst) lst]<br/>        [(equal? (first lst) padding) (unpad (rest lst) padding)]<br/>        [else lst]))<br/>\u00a0<br/>;; Run a filter function across a window in a list from left to right<br/>;;<br/>(define (left-&gt;right width fn)<br/>  (\u03bb (lst)<br/>    (let F ([a lst])<br/>      (if (&lt; (length a) width) <br/>          a<br/>          (let ([f (fn (take a width))])<br/>            (cons (first f) (F (append (rest f) (drop a width)))))))))<br/>\u00a0<br/>;; Run a function fn across a window in a list from right to left<br/>;;<br/>(define (right-&gt;left width fn)<br/>  (\u03bb (lst)<br/>    (let F ([a lst])<br/>      (if (&lt; (length a) width) <br/>          a<br/>          (let ([f (fn (take-right a width))])<br/>            (append (F (append (drop-right a width) (drop-right f 1)))<br/>                    (list (last f))))))))<br/>\u00a0<br/>;; (a0 a1 a2 ... an) -&gt; (a0 a1 a2 ... (fn ... an))<br/>;;<br/>(define (replace-tail width fn)<br/>  (\u03bb (lst)<br/>    (append (drop-right lst width) (fn (take-right lst width)))))<br/>\u00a0<br/>(define (rule-a lst)<br/>  (match lst<br/>    [(list 0 2 0 x) (list 1 0 0 (add1 x))]<br/>    [(list 0 3 0 x) (list 1 1 0 (add1 x))]<br/>    [(list 0 2 1 x) (list 1 1 0 x)]<br/>    [(list 0 1 2 x) (list 1 0 1 x)]<br/>    [else lst]))<br/>\u00a0<br/>(define (rule-a-tail lst)<br/>  (match lst<br/>    [(list x 0 3 0) (list x 1 1 1)]<br/>    [(list x 0 2 0) (list x 1 0 1)]<br/>    [(list 0 1 2 0) (list 1 0 1 0)]<br/>    [(list x y 0 3) (list x y 1 1)]<br/>    [(list x y 0 2) (list x y 1 0)]<br/>    [(list x 0 1 2) (list x 1 0 0)]<br/>    [else lst]))<br/>\u00a0<br/>(define (rule-b lst)<br/>  (match lst<br/>    [(list 0 1 1) (list 1 0 0)]<br/>    [else lst]))<br/>\u00a0<br/>(define (rule-c lst)<br/>  (match lst<br/>    [(list 1 0 0) (list 0 1 1)]<br/>    [(list 1 -1 0) (list 0 0 1)]<br/>    [(list 1 -1 1) (list 0 0 2)]<br/>    [(list 1 0 -1) (list 0 1 0)]<br/>    [(list 2 0 0) (list 1 1 1)]<br/>    [(list 2 -1 0) (list 1 0 1)]<br/>    [(list 2 -1 1) (list 1 0 2)]<br/>    [(list 2 0 -1) (list 1 1 0)]<br/>    [else lst]))<br/>\u00a0<br/>(define (zeck-combine op y z [f identity])<br/>  (let* ([bits (max (add1 (length y)) (add1 (length z)) 4)]<br/>         [f0 (\u03bb (x) (pad (reverse x) bits))]<br/>         [f1 (left-&gt;right 4 rule-a)]<br/>         [f2 (replace-tail 4 rule-a-tail)]<br/>         [f3 (right-&gt;left 3 rule-b)]<br/>         [f4 (left-&gt;right 3 rule-b)])<br/>    ((compose1 unpad f4 f3 f2 f1 f reverse) (map op (f0 y) (f0 z)))))<br/>\u00a0<br/>(define (zeck+ y z)<br/>  (zeck-combine + y z))<br/>\u00a0<br/>(define (zeck- y z)<br/>  (when (zeck&lt; y z) (error (format \"~a\" `(zeck-: cannot subtract since ,y &lt; ,z))))<br/>  (zeck-combine - y z (left-&gt;right 3 rule-c)))<br/>\u00a0<br/>(define (zeck* y z)<br/>  (define (M ry Zn Zn_1 [acc null])<br/>    (if (null? ry) <br/>        acc<br/>        (M (rest ry) (zeck+ Zn Zn_1) Zn <br/>           (if (zero? (first ry)) acc (zeck+ acc Zn))))) <br/>  (cond [(zeck&lt; z y) (zeck* z y)]<br/>        [(null? y) null]              \u00a0; 0 * z -&gt; 0<br/>        [else (M (reverse y) z z)]))<br/>\u00a0<br/>(define (zeck-quotient/remainder y z)<br/>  (define (M Zn acc)<br/>    (if (zeck&lt; y Zn) <br/>        (drop-right acc 1)<br/>        (M (zeck+ Zn (first acc)) (cons Zn acc))))<br/>  (define (D x m [acc null])<br/>    (if (null? m)<br/>        (values (reverse acc) x)<br/>        (let* ([v (first m)]<br/>               [smaller (zeck&lt; v x)]<br/>               [bit (if smaller 1 0)]<br/>               [x_ (if smaller (zeck- x v) x)])<br/>          (D x_ (rest m) (cons bit acc)))))<br/>  (D y (M z (list z))))<br/>\u00a0<br/>(define (zeck-quotient y z)<br/>  (let-values ([(quotient _) (zeck-quotient/remainder y z)])<br/>    quotient))<br/>\u00a0<br/>(define (zeck-remainder y z)<br/>  (let-values ([(_ remainder) (zeck-quotient/remainder y z)])<br/>    remainder))<br/>\u00a0<br/>(define (zeck-add1 z)<br/>  (zeck+ z '(1)))<br/>\u00a0<br/>(define (zeck= y z)<br/>  (equal? (unpad y) (unpad z)))<br/>\u00a0<br/>(define (zeck&lt; y z)<br/> \u00a0; Compare equal-length unpadded zecks<br/>  (define (LT a b)<br/>    (if (null? a) <br/>        #f<br/>        (let ([a0 (first a)] [b0 (first b)])<br/>          (if (= a0 b0) <br/>              (LT (rest a) (rest b))<br/>              (= a0 0)))))<br/>\u00a0<br/>  (let* ([a (unpad y)] [len-a (length a)]<br/>         [b (unpad z)] [len-b (length b)])<br/>    (cond [(&lt; len-a len-b) #t]<br/>          [(&gt; len-a len-b) #f]<br/>          [else (LT a b)])))<br/>\u00a0<br/>(define (zeck&gt; y z)<br/>  (not (or (zeck= y z) (zeck&lt; y z))))<br/>\u00a0<br/>\u00a0<br/>;; Examples<br/>;;<br/>(define (example op-name op a b)<br/>  (let* ([y (natural-&gt;zeck a)]<br/>         [z (natural-&gt;zeck b)]<br/>         [x (op y z)]<br/>         [c (zeck-&gt;natural x)])<br/>    (printf \"~a ~a ~a = ~a ~a ~a = ~a = ~a\\n\"<br/>            a op-name b y op-name z x c)))<br/>\u00a0<br/>(example '+ zeck+ 888 111)<br/>(example '- zeck- 888 111)<br/>(example '* zeck* 8 111)<br/>(example '/ zeck-quotient 9876 1000)<br/>(example '% zeck-remainder 9876 1000)<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 251, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ZA <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Stream.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Z <span class=\"br0\">{</span><br/>  <span class=\"co1\">// only for comfort and result checking:</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fibs<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> series<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>BigInt,j<span class=\"sy0\">:</span>BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span>Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">#::</span> series<span class=\"br0\">(</span>j,i+j<span class=\"br0\">)</span><span class=\"sy0\">;</span> series<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">tail</span> <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> z2i<span class=\"sy0\">:</span> Z <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> z <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>z.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>v,i<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>v<span class=\"sy0\">*</span>fibs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">:</span>\\BigInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>z.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> fmts <span class=\"sy0\">=</span> Map<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>-<span class=\"sy0\">&gt;</span>List<span class=\"br0\">[</span>Z<span class=\"br0\">]</span><span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">//map of Fibonacci multiples table of divisors</span><br/>\u00a0<br/>  <span class=\"co1\">// get multiply table from fmts</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mt<span class=\"br0\">(</span>z<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>fmts.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span>z,Nil<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> mwv<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span> fmts<span class=\"sy0\">=</span>fmts+<span class=\"br0\">(</span>z-<span class=\"sy0\">&gt;</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span> e<span class=\"br0\">}</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l <span class=\"sy0\">=&gt;</span> l<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// multiply weight vector</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mwv<span class=\"br0\">(</span>z<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> wv <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ListBuffer<span class=\"br0\">[</span>Z<span class=\"br0\">]</span><span class=\"sy0\">;</span> wv +<span class=\"sy0\">=</span> z<span class=\"sy0\">;</span> wv +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>z+z<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> zs <span class=\"sy0\">=</span> <span class=\"st0\">\"11\"</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> upper <span class=\"sy0\">=</span> z.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>zs.<span class=\"me1\">size</span><span class=\"sy0\">&lt;</span>upper.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>wv +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>wv.<span class=\"me1\">toList</span>.<span class=\"me1\">last</span> + wv.<span class=\"me1\">toList</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">head</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> zs <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span>+zs<span class=\"br0\">}</span><br/>    wv.<span class=\"me1\">toList</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// get division table (division weight vector)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> dt<span class=\"br0\">(</span>dd<span class=\"sy0\">:</span> Z, ds<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> wv <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ListBuffer<span class=\"br0\">[</span>Z<span class=\"br0\">]</span><span class=\"sy0\">;</span> mt<span class=\"br0\">(</span>ds<span class=\"br0\">)</span>.<span class=\"me1\">copyToBuffer</span><span class=\"br0\">(</span>wv<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> zs <span class=\"sy0\">=</span> ds.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> upper <span class=\"sy0\">=</span> dd.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>zs.<span class=\"me1\">size</span><span class=\"sy0\">&lt;</span>upper.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>wv +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>wv.<span class=\"me1\">toList</span>.<span class=\"me1\">last</span> + wv.<span class=\"me1\">toList</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">head</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> zs <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span>+zs<span class=\"br0\">}</span><br/>    wv.<span class=\"me1\">toList</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Z<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> zs<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Z.<span class=\"sy0\">_</span><br/>  require <span class=\"br0\">(</span><span class=\"br0\">(</span>zs.<span class=\"me1\">toSet</span>--Set<span class=\"br0\">(</span><span class=\"st0\">'-'</span>,<span class=\"st0\">'0'</span>,<span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>Set<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>zs.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"11\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z<span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span>zs<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> z+<span class=\"st0\">\"Z(i:\"</span>+z2i<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span>+<span class=\"st0\">\")\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> size <span class=\"sy0\">=</span> z.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">size</span><br/>\u00a0<br/>  <span class=\"co1\">//--- fa(summand1.z,summand2.z) --------------------------</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fa<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1, z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span>z1.<span class=\"me1\">toString</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">padTo</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">zipAll</span><span class=\"br0\">(</span>z2.<span class=\"me1\">toString</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arr1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>v.<span class=\"me1\">map</span><span class=\"br0\">(</span>p<span class=\"sy0\">=&gt;</span>p.<span class=\"sy0\">_</span>1+p.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"sy0\">:</span>+<span class=\"nu0\">0</span> reverse<span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> to arr1.<span class=\"me1\">size</span>-<span class=\"nu0\">4</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>i<span class=\"sy0\">=&gt;</span>     <span class=\"co1\">//stage1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arr1.<span class=\"me1\">slice</span><span class=\"br0\">(</span>i,i+<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span> dropRight <span class=\"nu0\">1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> b <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"020\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>, a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"030\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>, a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"021\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>, a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"012\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>, a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>     <span class=\"sy0\">=&gt;</span> a<br/>      <span class=\"br0\">}</span><br/>      <span class=\"nu0\">0</span> to <span class=\"nu0\">3</span> foreach <span class=\"br0\">{</span>j<span class=\"sy0\">=&gt;</span>arr1<span class=\"br0\">(</span>j+i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arr2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr1<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"0120\"</span>,<span class=\"st0\">\"1010\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"030\"</span>,<span class=\"st0\">\"111\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"003\"</span>,<span class=\"st0\">\"100\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"020\"</span>,<span class=\"st0\">\"101\"</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"003\"</span>,<span class=\"st0\">\"100\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"012\"</span>,<span class=\"st0\">\"101\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"021\"</span>,<span class=\"st0\">\"110\"</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"02\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"03\"</span>,<span class=\"st0\">\"11\"</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">reverse</span>.<span class=\"me1\">toArray</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> to arr2.<span class=\"me1\">size</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>i<span class=\"sy0\">=&gt;</span>     <span class=\"co1\">//stage2, step1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arr2.<span class=\"me1\">slice</span><span class=\"br0\">(</span>i,i+<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> b <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"110\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"st0\">'0'</span>,<span class=\"st0\">'0'</span>,<span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>     <span class=\"sy0\">=&gt;</span> a<br/>      <span class=\"br0\">}</span><br/>      <span class=\"nu0\">0</span> to <span class=\"nu0\">2</span> foreach <span class=\"br0\">{</span>j<span class=\"sy0\">=&gt;</span>arr2<span class=\"br0\">(</span>j+i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arr3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr2<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">toArray</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> to arr3.<span class=\"me1\">size</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>i<span class=\"sy0\">=&gt;</span>     <span class=\"co1\">//stage2, step2</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arr3.<span class=\"me1\">slice</span><span class=\"br0\">(</span>i,i+<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> b <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"011\"</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"st0\">'1'</span>,<span class=\"st0\">'0'</span>,<span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>     <span class=\"sy0\">=&gt;</span> a<br/>      <span class=\"br0\">}</span><br/>      <span class=\"nu0\">0</span> to <span class=\"nu0\">2</span> foreach <span class=\"br0\">{</span>j<span class=\"sy0\">=&gt;</span>arr3<span class=\"br0\">(</span>j+i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    BigInt<span class=\"br0\">(</span><span class=\"br0\">(</span>arr3<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//--- fs(minuend.z,subtrahend.z) -------------------------</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fs<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>min,sub<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zmvr <span class=\"sy0\">=</span> min.<span class=\"me1\">toString</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zsvr <span class=\"sy0\">=</span> sub.<span class=\"me1\">toString</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">padTo</span><span class=\"br0\">(</span>zmvr.<span class=\"me1\">size</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> zmvr.<span class=\"me1\">zipAll</span><span class=\"br0\">(</span>zsvr, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> last <span class=\"sy0\">=</span> v.<span class=\"me1\">size</span>-<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zma <span class=\"sy0\">=</span> zmvr.<span class=\"me1\">reverse</span>.<span class=\"me1\">toArray</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zsa <span class=\"sy0\">=</span> zsvr.<span class=\"me1\">reverse</span>.<span class=\"me1\">toArray</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to last reverse<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> zma<span class=\"br0\">(</span>i<span class=\"br0\">)</span>-zsa<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        zma<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> zma<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>        zma<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> part <span class=\"sy0\">=</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i to last<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>zma<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> carry <span class=\"sy0\">=</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>.<span class=\"me1\">padTo</span><span class=\"br0\">(</span>last-i,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> part + carry<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sums <span class=\"sy0\">=</span> sum.<span class=\"me1\">z</span>.<span class=\"me1\">toString</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span> to sum.<span class=\"me1\">size</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>j<span class=\"sy0\">=&gt;</span>zma<span class=\"br0\">(</span>last-sum.<span class=\"me1\">size</span>+j<span class=\"br0\">)</span><span class=\"sy0\">=</span>sums<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>zma<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to i-<span class=\"nu0\">1</span> reverse<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>zma<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              zma<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> zma<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>              zma<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> part <span class=\"sy0\">=</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>j to last<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>zma<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> carry <span class=\"sy0\">=</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>.<span class=\"me1\">padTo</span><span class=\"br0\">(</span>last-j,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> part + carry<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sums <span class=\"sy0\">=</span> sum.<span class=\"me1\">z</span>.<span class=\"me1\">toString</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">1</span> to sum.<span class=\"me1\">size</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>k<span class=\"sy0\">=&gt;</span>zma<span class=\"br0\">(</span>last-sum.<span class=\"me1\">size</span>+k<span class=\"br0\">)</span><span class=\"sy0\">=</span>sums<span class=\"br0\">(</span>k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> zma<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> e<br/>      zsa<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    BigInt<span class=\"br0\">(</span><span class=\"br0\">(</span>zma<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//--- fm(multiplicand.z,multplier.z) ---------------------</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fm<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mc, mp<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mct <span class=\"sy0\">=</span> mt<span class=\"br0\">(</span>Z<span class=\"br0\">(</span>mc.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mpxi <span class=\"sy0\">=</span> mp.<span class=\"me1\">toString</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1 <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>mpxi<span class=\"sy0\">:</span>\\Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fi,sum<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>sum+mct<span class=\"br0\">(</span>fi<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">z</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//--- fd(dividend.z,divisor.z) ---------------------------</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fd<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dd, ds<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dst <span class=\"sy0\">=</span> dt<span class=\"br0\">(</span>Z<span class=\"br0\">(</span>dd.<span class=\"me1\">toString</span><span class=\"br0\">)</span>,Z<span class=\"br0\">(</span>ds.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> diff <span class=\"sy0\">=</span> Z<span class=\"br0\">(</span>dd.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zd <span class=\"sy0\">=</span> ListBuffer<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> to dst.<span class=\"me1\">size</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>i<span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dst<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>diff<span class=\"br0\">)</span> zd+<span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span>diff <span class=\"sy0\">=</span> diff-dst<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> zd+<span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    BigInt<span class=\"br0\">(</span>zd.<span class=\"me1\">mkString</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fasig<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Z, Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1, z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>z1.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"sy0\">&gt;</span>z2.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span> z1.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> z2.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fssig<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Z, Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1, z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>z1.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"sy0\">&gt;</span>z2.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&amp;&amp;</span> z1.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>||<span class=\"br0\">(</span>z1.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"sy0\">&lt;</span>z2.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&amp;&amp;</span> z1.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"nu0\">1</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> +<span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Z <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> that <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span> <span class=\"sy0\">==</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fa<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">==</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fs<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>fasig<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>, that<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ++ <span class=\"sy0\">:</span> Z <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> za <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">zs</span> <span class=\"sy0\">=</span> za.<span class=\"me1\">zs</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">=</span> za.<span class=\"me1\">z</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> -<span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Z <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span> <span class=\"sy0\">!=</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fa<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">==</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fs<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>fssig<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>, that<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> -- <span class=\"sy0\">:</span> Z <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zs <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">zs</span> <span class=\"sy0\">=</span> zs.<span class=\"me1\">zs</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">=</span> zs.<span class=\"me1\">z</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Z <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>||that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> that<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fm<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"sy0\">*</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> / <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> None<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">==</span> that.<span class=\"me1\">z</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"br0\">(</span>fd<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"sy0\">*</span>that.<span class=\"me1\">z</span>.<span class=\"me1\">signum</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> None<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>that<span class=\"sy0\">==</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> that.<span class=\"me1\">z</span>.<span class=\"me1\">abs</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">==</span> that.<span class=\"me1\">z</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>/that <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> None<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>this-z<span class=\"sy0\">*</span>that<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">&lt;</span>  <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">&lt;</span>  that.<span class=\"me1\">z</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">&lt;=</span> that.<span class=\"me1\">z</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">&gt;</span>  <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">&gt;</span>  that.<span class=\"me1\">z</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Z<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">z</span> <span class=\"sy0\">&gt;=</span> that.<span class=\"me1\">z</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> elapsed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Long <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"sy0\">;</span> f<span class=\"sy0\">;</span> <span class=\"br0\">(</span>System.<span class=\"me1\">currentTimeMillis</span> - s<span class=\"br0\">)</span>/<span class=\"nu0\">1000</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> add<span class=\"sy0\">:</span>      <span class=\"br0\">(</span>Z,Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Z <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1,z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z1+z2<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subtract<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Z,Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Z <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1,z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z1-z2<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> multiply<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Z,Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Z <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1,z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z1<span class=\"sy0\">*</span>z2<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> divide<span class=\"sy0\">:</span>   <span class=\"br0\">(</span>Z,Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Option<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1,z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z1/z2<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> modulo<span class=\"sy0\">:</span>   <span class=\"br0\">(</span>Z,Z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Option<span class=\"br0\">[</span>Z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z1,z2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z1<span class=\"sy0\">%</span>z2<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ops <span class=\"sy0\">=</span> Map<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span>,add<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>,subtract<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span>,multiply<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"/\"</span>,divide<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"%\"</span>,modulo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> calcs <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><br/>  <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1000101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1000101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1000101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1000101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10100\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"100101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"100\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"101010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"101010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"101010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"101010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010101\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"101010101010101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010101010101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010101010101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"-\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010101010101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"*\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010101010101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"10101010101010101010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"1010101010101010\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"1010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"-1010\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"-10\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"100\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"/\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>, <span class=\"br0\">(</span>Z<span class=\"br0\">(</span><span class=\"st0\">\"100\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"%\"</span>,Z<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// just for result checking:</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Z.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> iadd<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a+b<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isub<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a-b<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> imul<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">*</span>b<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> idiv<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Option<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> None <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Some<span class=\"br0\">(</span>a/b<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> imod<span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt,BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Option<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> None <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Some<span class=\"br0\">(</span>a<span class=\"sy0\">%</span>b<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> iops <span class=\"sy0\">=</span> Map<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span>,iadd<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>,isub<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span>,imul<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"/\"</span>,idiv<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"%\"</span>,imod<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span><span class=\"st0\">\"elapsed time: \"</span>+elapsed<span class=\"br0\">{</span><br/>    calcs foreach <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>op1,op,op2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>op1+<span class=\"st0\">\" \"</span>+op+<span class=\"st0\">\" \"</span>+op2+<span class=\"st0\">\" = \"</span><br/>      +<span class=\"br0\">{</span><span class=\"br0\">(</span>ops<span class=\"br0\">(</span>op<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>op1,op2<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> None<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> z<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> z <span class=\"sy0\">=&gt;</span> z<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        .<span class=\"me1\">ensuring</span><span class=\"br0\">{</span>x<span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span>iops<span class=\"br0\">(</span>op<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>z2i<span class=\"br0\">(</span>op1<span class=\"br0\">)</span>,z2i<span class=\"br0\">(</span>op2<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> None <span class=\"sy0\">==</span> x<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">==</span> z2i<span class=\"br0\">(</span>x.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">==</span> z2i<span class=\"br0\">(</span>x.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span>   <br/>  <span class=\"br0\">}</span>+<span class=\"st0\">\" sec\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 75, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> zeckendorf <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Want to use alternate symbols? Change these</span><br/>    <span class=\"kw1\">variable</span> zero <span class=\"st0\">\"0\"</span><br/>    <span class=\"kw1\">variable</span> one <span class=\"st0\">\"1\"</span><br/>\u00a0<br/>    <span class=\"co1\"># Base operations: increment and decrement</span><br/>    <span class=\"kw1\">proc</span> zincr var <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$var</span> a<br/>\t<span class=\"kw1\">namespace</span> <span class=\"kw1\">upvar</span> <span class=\"br0\">[</span><span class=\"kw1\">namespace</span> current<span class=\"br0\">]</span> zero <span class=\"nu0\">0</span> one <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"st0\">\"$0$\"</span> <span class=\"re0\">$a</span> <span class=\"sy0\">$</span>1<span class=\"sy0\">$</span>0 a<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">append</span> a <span class=\"sy0\">$</span>1<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"st0\">\"$0$1$1\"</span> <span class=\"re0\">$a</span> <span class=\"st0\">\"$1$0$0\"</span> a<span class=\"br0\">]</span><br/>\t\t|| <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"st0\">\"^$1$1\"</span> <span class=\"re0\">$a</span> <span class=\"st0\">\"$1$0$0\"</span> a<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw2\">regsub</span> <span class=\"st0\">\".$\"</span> <span class=\"re0\">$a</span> <span class=\"st0\">\"\"</span> a<br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> zdecr var <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$var</span> a<br/>\t<span class=\"kw1\">namespace</span> <span class=\"kw1\">upvar</span> <span class=\"br0\">[</span><span class=\"kw1\">namespace</span> current<span class=\"br0\">]</span> zero <span class=\"nu0\">0</span> one <span class=\"nu0\">1</span><br/>\t<span class=\"kw2\">regsub</span> <span class=\"st0\">\"^$0+(.+)$\"</span> <span class=\"br0\">[</span><span class=\"kw2\">subst</span> <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"st0\">\"${1}($0*)$\"</span> <span class=\"re0\">$a</span> <span class=\"st0\">\"$0<span class=\"es0\">\\[</span><br/>\t\tstring repeat {$1$0} <span class=\"es0\">\\[</span>regsub -all .. {<span class=\"es0\">\\\\</span>1} {} x]]<span class=\"es0\">\\[</span><br/>\t\tstring repeat {$1} <span class=\"es0\">\\[</span>expr {<span class=\"es0\">\\$</span>x ne {}}]]\"</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">]</span> <span class=\"br0\">{</span>\\<span class=\"nu0\">1</span><span class=\"br0\">}</span> a<br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Exported operations</span><br/>    <span class=\"kw1\">proc</span> eq <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> eq <span class=\"re0\">$b</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> add <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> zero<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    zincr a<br/>\t    zdecr b<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> sub <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> zero<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    zdecr a<br/>\t    zdecr b<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> mul <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> zero<br/>\t<span class=\"kw1\">variable</span> one<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>eq <span class=\"re0\">$a</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span> || <span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$zero</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>eq <span class=\"re0\">$a</span> <span class=\"re0\">$one</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$one</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> c <span class=\"re0\">$a</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>eq <span class=\"br0\">[</span>zdecr b<span class=\"br0\">]</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span>add <span class=\"re0\">$c</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$c</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> div <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> zero<br/>\t<span class=\"kw1\">variable</span> one<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"div zero\"</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>eq <span class=\"re0\">$a</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span> || <span class=\"br0\">[</span>eq <span class=\"re0\">$b</span> <span class=\"re0\">$one</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> r <span class=\"re0\">$zero</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>eq <span class=\"re0\">$a</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>eq <span class=\"re0\">$a</span> <span class=\"br0\">[</span>add <span class=\"br0\">[</span><span class=\"kw1\">set</span> a <span class=\"br0\">[</span>sub <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\t    zincr r<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Note that there aren't any ordering operations in this version</span><br/>\u00a0<br/>    <span class=\"co1\"># Assemble into a coherent API</span><br/>    <span class=\"kw1\">namespace</span> export \\<span class=\"br0\">[</span>a-y\\<span class=\"br0\">]</span><span class=\"sy0\">*</span><br/>    <span class=\"kw1\">namespace</span> ensemble create<br/><span class=\"br0\">}</span></pre>"}]}