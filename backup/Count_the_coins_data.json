{"task": "Count_the_coins", "blocks": [{"lang": "360 Assembly", "loc": 59, "block": "<pre class=\"text highlighted_source\">*        count the coins           04/09/2015<br/>COINS    CSECT<br/>         USING  COINS,R12<br/>         LR     R12,R15<br/>         L      R8,AMOUNT          npenny=amount<br/>         L      R4,AMOUNT<br/>         SRDA   R4,32<br/>         D      R4,=F'5'<br/>         LR     R9,R5              nnickle=amount/5<br/>         L      R4,AMOUNT<br/>         SRDA   R4,32<br/>         D      R4,=F'10'<br/>         LR     R10,R5             ndime=amount/10<br/>         L      R4,AMOUNT<br/>         SRDA   R4,32<br/>         D      R4,=F'25'<br/>         LR     R11,R5             nquarter=amount/25<br/>         SR     R1,R1              count=0<br/>         SR     R4,R4              p=0<br/>LOOPP    CR     R4,R8              do p=0 to npenny<br/>         BH     ELOOPP<br/>         SR     R5,R5              n=0<br/>LOOPN    CR     R5,R9              do n=0 to nnickle<br/>         BH     ELOOPN<br/>         SR     R6,R6<br/>LOOPD    CR     R6,R10             do d=0 to ndime<br/>         BH     ELOOPD<br/>         SR     R7,R7              q=0<br/>LOOPQ    CR     R7,R11             do q=0 to nquarter<br/>         BH     ELOOPQ<br/>         LR     R3,R5              n<br/>         MH     R3,=H'5'<br/>         LR     R2,R4              p<br/>         AR     R2,R3<br/>         LR     R3,R6              d<br/>         MH     R3,=H'10'<br/>         AR     R2,R3<br/>         LR     R3,R7              q<br/>         MH     R3,=H'25'<br/>         AR     R2,R3              s=p+n*5+d*10+q*25<br/>         C      R2,=F'100'         if s=100<br/>         BNE    NOTOK<br/>         LA     R1,1(R1)           count=count+1<br/>NOTOK    LA     R7,1(R7)           q=q+1<br/>         B      LOOPQ<br/>ELOOPQ   LA     R6,1(R6)           d=d+1<br/>         B      LOOPD<br/>ELOOPD   LA     R5,1(R5)           n=n+1<br/>         B      LOOPN<br/>ELOOPN   LA     R4,1(R4)           p=p+1<br/>         B      LOOPP<br/>ELOOPP   XDECO  R1,PG+0            edit count<br/>         XPRNT  PG,12              print count<br/>         XR     R15,R15<br/>         BR     R14<br/>AMOUNT   DC     F'100'             start value in cents<br/>PG       DS     CL12<br/>         YREGS<br/>         END    COINS</pre>"}, {"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Count_The_Coins <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Counter_Type <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span>; <span class=\"co1\">-- works with gnat</span><br/>   <span class=\"kw3\">type</span> Coin_List <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Count<span class=\"br0\">(</span>Goal: Natural; Coins: Coin_List<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Counter_Type <span class=\"kw1\">is</span><br/>      Cnt: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">Goal</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Counter_Type\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span> =&gt; <span class=\"nu0\">1</span>, <span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"co1\">-- 0 =&gt; we already know one way to choose (no) coins that sum up to zero</span><br/>      <span class=\"co1\">-- 1 .. Goal =&gt; we do not (yet) other ways to choose coins</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> C <span class=\"kw3\">in</span> Coins'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> Amount <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Cnt</span>'Last <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> Coins<span class=\"br0\">(</span>C<span class=\"br0\">)</span> &lt;= Amount <span class=\"kw1\">then</span><br/>               Cnt<span class=\"br0\">(</span>Amount<span class=\"br0\">)</span>\u00a0:= Cnt<span class=\"br0\">(</span>Amount<span class=\"br0\">)</span> + Cnt<span class=\"br0\">(</span>Amount-Coins<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"co1\">-- Amount-Coins(C) plus Coins(C) sums up to Amount;</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Cnt<span class=\"br0\">(</span>Goal<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Count;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>C: Counter_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Counter_Type'Image<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Print<span class=\"br0\">(</span>Count<span class=\"br0\">(</span>   <span class=\"nu0\">1</span>_00,          <span class=\"br0\">(</span><span class=\"nu0\">25</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Print<span class=\"br0\">(</span>Count<span class=\"br0\">(</span><span class=\"nu0\">1000</span>_00, <span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Count_The_Coins;</pre>"}, {"lang": "ALGOL 68", "loc": 33, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"coMULTI\">#<br/>  Rosetta Code \"Count the coins\"<br/>  This is a direct translation of a Haskell version, using an array rather than<br/>  a list. LWB, UPB, and array slicing makes the mapping very simple:<br/>\u00a0<br/>  LWB &gt; UPB     &lt;=&gt; []<br/>  LWB = UPB     &lt;=&gt; [x]<br/>  a[LWB a]      &lt;=&gt; head xs<br/>  a[LWB a + 1:] &lt;=&gt; tail xs<br/>#</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw4\">PROC</span> ways to make change <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw3\">INT</span> denoms<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> amount<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>  <span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw2\">IF</span> amount <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>      1<br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw8\">LWB</span> denoms <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> denoms <span class=\"kw2\">THEN</span><br/>      0<br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw8\">LWB</span> denoms <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> denoms <span class=\"kw2\">THEN</span><br/>      <span class=\"br0\">(</span>amount <span class=\"kw12\">MOD</span> denoms<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> denoms<span class=\"br0\">]</span> <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> 1 <span class=\"sy1\">|</span> 0<span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">BY</span> denoms<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> denoms<span class=\"br0\">]</span> <span class=\"kw2\">TO</span> amount <span class=\"kw2\">DO</span><br/>        sum <span class=\"sy1\">+:=</span> ways to make change<span class=\"br0\">(</span>denoms<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> denoms <span class=\"sy1\">+</span> 1<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> amount <span class=\"sy1\">-</span> i<span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      sum<br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw3\">INT</span> denoms <span class=\"sy1\">=</span> <span class=\"br0\">(</span>25<span class=\"sy1\">,</span> 10<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ways to make change<span class=\"br0\">(</span>denoms<span class=\"sy1\">,</span> 100<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"ahk highlighted_source\">countChange<span class=\"br0\">(</span>amount<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> cc<span class=\"br0\">(</span>amount<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>cc<span class=\"br0\">(</span>amount<span class=\"sy0\">,</span> kindsOfCoins<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> amount <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> amount <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> || <span class=\"br0\">(</span> kindsOfCoins <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> cc<span class=\"br0\">(</span>amount<span class=\"sy0\">,</span> kindsOfCoins<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t    <span class=\"sy0\">+</span>  cc<span class=\"br0\">(</span>amount <span class=\"sy0\">-</span> firstDenomination<span class=\"br0\">(</span>kindsOfCoins<span class=\"br0\">)</span><span class=\"sy0\">,</span> kindsOfCoins<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>firstDenomination<span class=\"br0\">(</span>kindsOfCoins<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">[</span>kindsOfCoins<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% countChange<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 27, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> cc<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    exit<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> cc<span class=\"br0\">(</span>amount, coins,    numPennies, numNickles, numQuarters, p, n, d, q, s, count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    numPennies = amount<br/>    numNickles = <span class=\"kw4\">int</span><span class=\"br0\">(</span>amount <span class=\"sy3\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    numDimes = <span class=\"kw4\">int</span><span class=\"br0\">(</span>amount <span class=\"sy3\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    numQuarters = <span class=\"kw4\">int</span><span class=\"br0\">(</span>amount <span class=\"sy3\">/</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>\u00a0<br/>    count = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>p = <span class=\"nu0\">0</span>; p <span class=\"sy2\">&lt;=</span> numPennies; p<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n = <span class=\"nu0\">0</span>; n <span class=\"sy2\">&lt;=</span> numNickles; n<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>d = <span class=\"nu0\">0</span>; d <span class=\"sy2\">&lt;=</span> numDimes; d<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>q = <span class=\"nu0\">0</span>; q <span class=\"sy2\">&lt;=</span> numQuarters; q<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    s = p <span class=\"sy3\">+</span> n <span class=\"sy3\">*</span> <span class=\"nu0\">5</span> <span class=\"sy3\">+</span> d <span class=\"sy3\">*</span> <span class=\"nu0\">10</span> <span class=\"sy3\">+</span> q <span class=\"sy3\">*</span> <span class=\"nu0\">25</span>;<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy2\">==</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> count<span class=\"sy3\">++</span>;<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span> count;<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 37, "block": "<pre class=\"text highlighted_source\">      DIM uscoins%(3)<br/>      uscoins%() = 1, 5, 10, 25<br/>      PRINT FNchange(100, uscoins%()) \" ways of making $1\"<br/>      PRINT FNchange(1000, uscoins%()) \" ways of making $10\"<br/>\u00a0<br/>      DIM ukcoins%(7)<br/>      ukcoins%() = 1, 2, 5, 10, 20, 50, 100, 200<br/>      PRINT FNchange(100, ukcoins%()) \" ways of making \u00a31\"<br/>      PRINT FNchange(1000, ukcoins%()) \" ways of making \u00a310\"<br/>      END<br/>\u00a0<br/>      DEF FNchange(sum%, coins%())<br/>      LOCAL C%, D%, I%, N%, P%, Q%, S%, table()<br/>      C% = 0<br/>      N% = DIM(coins%(),1) + 1<br/>      FOR I% = 0 TO N% - 1<br/>        D% = coins%(I%)<br/>        IF D% &lt;= sum% IF D% &gt;= C% C% = D% + 1<br/>      NEXT<br/>      C% *= N%<br/>      DIM table(C%-1)<br/>      FOR I% = 0 TO N%-1\u00a0: table(I%) = 1\u00a0: NEXT<br/>\u00a0<br/>      P% = N%<br/>      FOR S% = 1 TO sum%<br/>        FOR I% = 0 TO N% - 1<br/>          IF I% = 0 IF P% &gt;= C% P% = 0<br/>          IF coins%(I%) &lt;= S% THEN<br/>            Q% = P% - coins%(I%) * N%<br/>            IF Q% &gt;= 0 table(P%) = table(Q%) ELSE table(P%) = table(Q% + C%)<br/>          ENDIF<br/>          IF I% table(P%) += table(P% - 1)<br/>          P% += 1<br/>        NEXT<br/>      NEXT<br/>      = table(P%-1)<br/>\u00a0</pre>"}, {"lang": "C", "loc": 100, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// ad hoc 128 bit integer type; faster than using GMP because of low</span><br/><span class=\"co1\">// overhead</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">uint64_t</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> i128<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// display in decimal</span><br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span>i128 v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">uint32_t</span> x<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>v.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> v.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> v.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> v.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">uint64_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> c <span class=\"sy0\">%=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tbuf<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>len <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>x<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> len<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>j<span class=\"sy0\">--</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>i128 count<span class=\"br0\">(</span><span class=\"kw4\">int</span> sum<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>coins<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> coins<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ti128 <span class=\"sy0\">**</span>v <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>idx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tidx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> coins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// each v[i] is a cyclic buffer</span><br/>\t\tv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>i128<span class=\"br0\">)</span><span class=\"sy0\">,</span> coins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>coins<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i128<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> sum<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">--</span><span class=\"br0\">)</span> idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> coins<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ti128 c <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span> idx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\ti128 <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// 128 bit addition</span><br/>\t\t\tp<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tp<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// carry</span><br/>\t\t\t\tp<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">++;</span><br/>\t\t\tc <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\ti128 r <span class=\"sy0\">=</span> v<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>idx<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// simple recursive method; slow</span><br/><span class=\"kw4\">int</span> count2<span class=\"br0\">(</span><span class=\"kw4\">int</span> sum<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>coins<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!*</span>coins <span class=\"sy0\">||</span> sum <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>sum<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> count2<span class=\"br0\">(</span>sum <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>coins<span class=\"sy0\">,</span> coins<span class=\"br0\">)</span> <span class=\"sy0\">+</span> count2<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> coins <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> us_coins<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> eu_coins<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span>   <span class=\"nu0\">100</span><span class=\"sy0\">,</span> us_coins <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span>  <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> us_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span>  <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> us_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> us_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span><span class=\"nu0\">100000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> us_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span>     <span class=\"nu0\">1</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> eu_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span>  <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> eu_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> eu_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>count<span class=\"br0\">(</span><span class=\"nu0\">100000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> eu_coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 35, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;stack&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> DataFrame <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> sum<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> coins<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> avail_coins<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">stack</span><span class=\"sy1\">&lt;</span>DataFrame<span class=\"sy1\">&gt;</span> s<span class=\"sy4\">;</span><br/>  s.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">100</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">25</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> ways <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>s.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    DataFrame top <span class=\"sy1\">=</span> s.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top.<span class=\"me1\">sum</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top.<span class=\"me1\">sum</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"sy2\">++</span>ways<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top.<span class=\"me1\">avail_coins</span>.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>    DataFrame d <span class=\"sy1\">=</span> top<span class=\"sy4\">;</span><br/>    d.<span class=\"me1\">sum</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> top.<span class=\"me1\">avail_coins</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    d.<span class=\"me1\">coins</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>top.<span class=\"me1\">avail_coins</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">push</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    d <span class=\"sy1\">=</span> top<span class=\"sy4\">;</span><br/>    d.<span class=\"me1\">avail_coins</span>.<span class=\"me1\">erase</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>d.<span class=\"me1\">avail_coins</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">push</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ways <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/>    <span class=\"co1\">// Adapted from http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> Count<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> C, <span class=\"kw4\">int</span> m, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> table <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">long</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            table<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> C<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    table<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> table<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> C<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> table<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> C <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">25</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> C<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Count<span class=\"br0\">(</span>C, m, n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">//242</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def denomination-kind <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn- cc <span class=\"br0\">[</span>amount denominations<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> amount <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> amount <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>empty? denominations<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>cc amount <span class=\"br0\">(</span>rest denominations<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>cc <span class=\"br0\">(</span>- amount <span class=\"br0\">(</span>first denominations<span class=\"br0\">)</span><span class=\"br0\">)</span> denominations<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn count-change<br/>  <span class=\"st0\">\"Calculates the number of times you can give change with the given denominations.\"</span><br/>  <span class=\"br0\">[</span>amount denominations<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>cc amount denominations<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>count-change <span class=\"nu0\">15</span> denomination-kind<span class=\"br0\">)</span> <span class=\"co1\">; = 6 </span></pre>"}, {"lang": "Coco", "loc": 8, "block": "<pre class=\"text highlighted_source\">changes = (amount, coins) -&gt;<br/>    ways = [1].concat [0] * amount<br/>    for coin of coins<br/>        for j from coin to amount<br/>            ways[j] += ways[j - coin]<br/>    ways[amount]<br/>\u00a0<br/>console.log changes 100, [1 5 10 25]</pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-change <span class=\"br0\">(</span>amount coins<br/>                    <span class=\"sy0\">&amp;</span>optional<br/>                    <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>cache  <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ amount<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                        <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">length</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> amount <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> amount <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> cache amount <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> cache amount <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>count-change <span class=\"br0\">(</span>- amount <span class=\"br0\">(</span>first coins<span class=\"br0\">)</span><span class=\"br0\">)</span> coins <span class=\"kw1\">length</span> cache<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>count-change amount <span class=\"br0\">(</span>rest coins<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"kw1\">length</span><span class=\"br0\">)</span> cache<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; (compile 'count-change)\u00a0; for CLISP</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>count-change <span class=\"nu0\">100</span> '<span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"nu0\">10</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t   <span class=\"co1\">; = 242</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>count-change <span class=\"nu0\">100000</span> '<span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"nu0\">50</span> <span class=\"nu0\">25</span> <span class=\"nu0\">10</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; = 13398445413854501</span><br/><span class=\"br0\">(</span>terpri<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> changes<span class=\"br0\">(</span><span class=\"kw4\">int</span> amount<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> coins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> ways <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> BigInt<span class=\"br0\">[</span>amount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    ways<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>coin<span class=\"sy0\">;</span> coins<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>j<span class=\"sy0\">;</span> coin <span class=\"sy0\">..</span> <span class=\"me1\">amount</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            ways<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> ways<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> coin<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> ways<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    changes<span class=\"br0\">(</span>   <span class=\"nu0\">1</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    changes<span class=\"br0\">(</span><span class=\"nu0\">1000</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var cache = new Map();<br/>\u00a0<br/>main() {<br/>    var stopwatch = new Stopwatch()..start();<br/>\u00a0<br/>    // use the brute-force recursion for the small problem<br/>    int amount = 100;<br/>    list coinTypes = [25,10,5,1];<br/>    print (coins(amount,coinTypes).toString() + \" ways for $amount using $coinTypes coins.\");<br/>\u00a0<br/>    // use the cache version for the big problem<br/>    amount = 100000;<br/>    coinTypes = [100,50,25,10,5,1];<br/>    print (cachedCoins(amount,coinTypes).toString() + \" ways for $amount using $coinTypes coins.\");<br/>\u00a0<br/>    stopwatch.stop();<br/>    print (\"... completed in \" + (stopwatch.elapsedMilliseconds/1000).toString() + \" seconds\");<br/>}<br/>\u00a0<br/>\u00a0<br/>coins(int amount, list coinTypes) {<br/>    int count = 0;<br/>\u00a0<br/>    if(coinTypes.length == 1) return (1);   // just pennies available, so only one way to make change<br/>\u00a0<br/>    for(int i=0; i&lt;=(amount/coinTypes[0]).toInt(); i++){                // brute force recursion<br/>      count += coins(amount-(i*coinTypes[0]),coinTypes.sublist(1));     // sublist(1) is like lisp's '(rest ...)'<br/>    }<br/>\u00a0<br/>    // uncomment if you want to see intermediate steps<br/>    //print(\"there are \" + count.toString() +\" ways to count change for ${amount.toString()} using ${coinTypes} coins.\");<br/>    return(count);<br/>  }<br/>\u00a0<br/>\u00a0<br/>  cachedCoins(int amount, list coinTypes) {<br/>      int count = 0;<br/>\u00a0<br/>      // this is more efficient, looks at last two coins.  but not fast enough for the optional exercise.<br/>      if(coinTypes.length == 2) return ((amount/coinTypes[0]).toInt() + 1);<br/>\u00a0<br/>      var key = \"$amount.$coinTypes\";         // lookes like \"100.[25,10,5,1]\"<br/>      var cacheValue = cache[key];            // check whether we have seen this before<br/>\u00a0<br/>      if(cacheValue\u00a0!= null) return(cacheValue);<br/>\u00a0<br/>      count = 0;<br/>      // same recursion as simple method, but caches all subqueries too<br/>      for(int i=0; i&lt;=(amount/coinTypes[0]).toInt(); i++){<br/>        count += cachedCoins(amount-(i*coinTypes[0]),coinTypes.sublist(1));     // sublist(1) is like lisp's '(rest ...)'<br/>      }<br/>\u00a0<br/>      cache[key] = count;                     // add this to the cache<br/>      return(count);<br/>    }<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 22, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'compile<span class=\"br0\">)</span> <span class=\"co1\">;; for (compile)</span><br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span>  <span class=\"co1\">;; integer results &gt; 32 bits</span><br/><span class=\"br0\">(</span>lib 'hash<span class=\"br0\">)</span>    <span class=\"co1\">;; hash table</span><br/>\u00a0<br/><span class=\"co1\">;; h-table</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> Hcoins <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; the function to memoize</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sumways cents coins<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>ways cents <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ways <span class=\"br0\">(</span><span class=\"sy0\">-</span> cents <span class=\"br0\">(</span><span class=\"kw1\">car</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; accelerator\u00a0: ways (cents, coins) = ways ((cents  - cents\u00a0% 5) , coins)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ways cents coins<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> coins<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">negative</span>? cents<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> cents<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> coins c<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;; if coins = (1) --&gt; 1</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref<span class=\"sy0\">!</span> Hcoins <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> cents <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> cents <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> coins<span class=\"br0\">)</span> sumways<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>compile 'ways<span class=\"br0\">)</span> <span class=\"co1\">;; speed-up things</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Coins do<br/>  def find(coins,lim) do<br/>    vals = Map.new(0..lim,&amp;{&amp;1,0}) |&gt; Map.put(0,1)<br/>    count(coins,lim,vals)<br/>      |&gt; Map.values<br/>      |&gt; Enum.max<br/>      |&gt; IO.inspect<br/>  end<br/>\u00a0<br/>  defp count([],_,vals), do: vals<br/>  defp count([coin|coins],lim,vals) do<br/>    count(coins,lim,ways(coin,coin,lim,vals))<br/>  end<br/>\u00a0<br/>  defp ways(num,_coin,lim,vals) when num &gt; lim, do: vals<br/>  defp ways(num, coin,lim,vals) do<br/>    ways(num+1,coin,lim,ad(coin,num,vals))<br/>  end<br/>\u00a0<br/>  defp ad(a,b,c), do: Map.put(c,b,c[b]+c[b-a])<br/>end<br/>\u00a0<br/>Coins.find([1,5,10,25],100)<br/>Coins.find([1,5,10,25,50,100],100_000)</pre>"}, {"lang": "Erlang", "loc": 33, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>coins<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">Amount</span><span class=\"sy1\">,</span> <span class=\"re5\">Coins</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">_C</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">Amount</span><span class=\"sy1\">,</span> <span class=\"re5\">Coins</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">N</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">_N</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">C</span>|Cs<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">Coins</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">is_key</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Coins</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span> <br/>            <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Coins</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Cache</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">N1</span><span class=\"sy1\">,</span><span class=\"re5\">C1</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"re5\">C</span><span class=\"sy1\">,</span><span class=\"re5\">Coins</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">N2</span><span class=\"sy1\">,</span><span class=\"re5\">C2</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Cs</span><span class=\"sy1\">,</span><span class=\"re5\">C1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">N1</span><span class=\"sy3\">+</span><span class=\"re5\">N2</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Coins</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">N1</span><span class=\"sy3\">+</span><span class=\"re5\">N2</span><span class=\"sy1\">,</span><span class=\"re5\">C2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">Amount</span><span class=\"sy1\">,</span> <span class=\"re5\">Coins</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~b ways to make change for ~b cents with ~p coins~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">count</span><span class=\"br0\">(</span><span class=\"re5\">Amount</span><span class=\"sy1\">,</span><span class=\"re5\">Coins</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Amount</span><span class=\"sy1\">,</span><span class=\"re5\">Coins</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">A1</span> <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">A1</span><span class=\"sy1\">,</span><span class=\"re5\">C1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">A2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">100000</span><span class=\"sy1\">,</span> <span class=\"re5\">C2</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"nu0\">25</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">A2</span><span class=\"sy1\">,</span><span class=\"re5\">C2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> changes amount coins <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> ways <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">zeroCreate</span> <span class=\"br0\">(</span>amount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    ways.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> 1L<br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> coin <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> coin <span class=\"kw1\">to</span> amount <span class=\"kw1\">do</span> ways.<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> ways.<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ways.<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> coin<span class=\"br0\">]</span><br/>    <span class=\"br0\">)</span> coins<br/>    ways.<span class=\"br0\">[</span>amount<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span> <br/>    printfn <span class=\"st0\">\"%d\"</span> <span class=\"br0\">(</span>changes    <span class=\"nu0\">100</span> <span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    printfn <span class=\"st0\">\"%d\"</span> <span class=\"br0\">(</span>changes <span class=\"nu0\">100000</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 36, "block": "<pre class=\"text highlighted_source\">USING: combinators kernel locals math math.ranges sequences sets sorting\u00a0;<br/>IN: rosetta.coins<br/>\u00a0<br/>&lt;PRIVATE<br/>! recursive-count uses memoization and local variables.<br/>! coins must be a sequence.<br/>MEMO:: recursive-count ( cents coins -- ways )<br/>    coins length\u00a0:&gt; types<br/>    {<br/>       \u00a0! End condition: 1 way to make 0 cents.<br/>        { [ cents zero? ] [ 1 ] }<br/>       \u00a0! End condition: 0 ways to make money without any coins.<br/>        { [ types zero? ] [ 0 ] }<br/>       \u00a0! Optimization: At most 1 way to use 1 type of coin.<br/>        { [ types 1 number= ] [<br/>            cents coins first mod zero? [ 1 ] [ 0 ] if<br/>        ] }<br/>       \u00a0! Find all ways to use the first type of coin.<br/>        [<br/>           \u00a0! f = first type, r = other types of coins.<br/>            coins unclip-slice\u00a0:&gt; f\u00a0:&gt; r<br/>           \u00a0! Loop for 0, f, 2*f, 3*f, ..., cents.<br/>            0 cents f &lt;range&gt; [<br/>               \u00a0! Recursively count how many ways to make remaining cents<br/>               \u00a0! with other types of coins.<br/>                cents swap - r recursive-count<br/>            ] [ + ] map-reduce         \u00a0! Sum the counts.<br/>        ]<br/>    } cond\u00a0;<br/>PRIVATE&gt;<br/>\u00a0<br/>! How many ways can we make the given amount of cents<br/>! with the given set of coins?<br/>: make-change ( cents coins -- ways )<br/>    members [ ] inv-sort-with  \u00a0! Sort coins in descending order.<br/>    recursive-count\u00a0;</pre>"}, {"lang": "Forth", "loc": 16, "block": "<pre class=\"text highlighted_source\">\\ counting change (SICP section 1.2.2)<br/>\u00a0<br/>: table create does&gt; swap cells + @\u00a0;<br/>table coin-value 0 , 1 , 5 , 10 , 25 , 50 ,<br/>\u00a0<br/>: count-change ( total coin -- n )<br/>  over 0= if<br/>    2drop 1<br/>  else over 0&lt; over 0= or if<br/>    2drop 0<br/>  else<br/>    2dup coin-value - over recurse<br/>    &gt;r 1- recurse r&gt; +<br/>  then then\u00a0;<br/>\u00a0<br/>100 5 count-change .</pre>"}, {"lang": "FreeBASIC", "loc": 66, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 09-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Function</span> count<span class=\"br0\">(</span>S<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j<br/>  <span class=\"co1\">' calculate m from array S()</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> m = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> +<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> x, y<br/>\u00a0<br/>  <span class=\"co1\">'' We need n+1 rows as the table is consturcted in bottom up manner using</span><br/>  <span class=\"co1\">'' the base case 0 value case (n = 0)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> table<span class=\"br0\">(</span>n +<span class=\"nu0\">1</span>, m<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">'' Fill the enteries for 0 value case (n = 0)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m -<span class=\"nu0\">1</span><br/>    table<span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">'' Fill rest of the table enteries in bottom up manner</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m -<span class=\"nu0\">1</span><br/>      <span class=\"co1\">'' Count of solutions including S[j]</span><br/>      x = <span class=\"kw1\">IIf</span> <span class=\"br0\">(</span>i &gt;= S<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, table<span class=\"br0\">(</span>i - S<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, j<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">'' Count of solutions excluding S[j]</span><br/>      y = <span class=\"kw1\">IIf</span> <span class=\"br0\">(</span>j &gt;= <span class=\"nu0\">1</span>, table<span class=\"br0\">(</span>i, j -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">''total count</span><br/>      table<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = x + y<br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Return</span> table<span class=\"br0\">(</span>n, m -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> n<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> value<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">ReDim</span> value<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>value<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">5</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">10</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> = <span class=\"nu0\">25</span><br/>\u00a0<br/>n = <span class=\"nu0\">100</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" There are \"</span>; count<span class=\"br0\">(</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<span class=\"br0\">)</span>; <span class=\"st0\">\" ways to make change for $\"</span>;n/<span class=\"nu0\">100</span>;<span class=\"st0\">\" with 4 coins\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/>n = <span class=\"nu0\">100000</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" There are \"</span>; count<span class=\"br0\">(</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<span class=\"br0\">)</span>; <span class=\"st0\">\" ways to make change for $\"</span>;n/<span class=\"nu0\">100</span>;<span class=\"st0\">\" with 4 coins\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">ReDim</span> value<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>value<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> =  <span class=\"nu0\">1</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> =  <span class=\"nu0\">5</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> =  <span class=\"nu0\">10</span><br/>value<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> = <span class=\"nu0\">25</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> = <span class=\"nu0\">50</span>\u00a0: value<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> = <span class=\"nu0\">100</span><br/>\u00a0<br/>n = <span class=\"nu0\">100000</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" There are \"</span>; count<span class=\"br0\">(</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<span class=\"br0\">)</span>; <span class=\"st0\">\" ways to make change for $\"</span>;n/<span class=\"nu0\">100</span>;<span class=\"st0\">\" with 6 coins\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "FutureBasic", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as long penny, nickel, dime, quarter , count<br/>\u00a0<br/>penny = 1\u00a0: nickel = 1<br/>dime = 1 \u00a0: quarter = 1<br/>\u00a0<br/>for penny = 0 to 100<br/>   for nickel = 0 to 20<br/>      for dime = 0 to 10<br/>         for quarter = 0 to 4<br/>            if penny + nickel * 5 + dime * 10 + quarter * 25 == 100<br/>               print penny; \" pennies \"; nickel;\" nickels \"; dime; \" dimes \"; quarter; \" quarters\"<br/>               count++ <br/>            end if<br/>         next quarter<br/>      next dime<br/>   next nickel<br/>next penny<br/>print count;\" ways to make a dollar\"<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    amount <span class=\"sy2\">:=</span> <span class=\"nu0\">100</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"amount, ways to make change:\"</span><span class=\"sy1\">,</span> amount<span class=\"sy1\">,</span> countChange<span class=\"sy1\">(</span>amount<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countChange<span class=\"sy1\">(</span>amount <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> cc<span class=\"sy1\">(</span>amount<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> cc<span class=\"sy1\">(</span>amount<span class=\"sy1\">,</span> kindsOfCoins <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> amount <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">case</span> amount &lt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> kindsOfCoins <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> cc<span class=\"sy1\">(</span>amount<span class=\"sy1\">,</span> kindsOfCoins<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span><br/>        cc<span class=\"sy1\">(</span>amount <span class=\"sy3\">-</span> firstDenomination<span class=\"sy1\">(</span>kindsOfCoins<span class=\"sy1\">),</span> kindsOfCoins<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> firstDenomination<span class=\"sy1\">(</span>kindsOfCoins <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> kindsOfCoins <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">25</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>kindsOfCoins<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> ccR<br/>ccR <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> tot, List<span class=\"sy0\">&lt;</span>BigInteger<span class=\"sy0\">&gt;</span> coins <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> n <span class=\"sy0\">=</span> coins.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span>tot:tot, coins:coins<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">tot</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>\u00a0:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> 1g<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">tot</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> coins <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\u00a0:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> 0g<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> ccR<span class=\"br0\">(</span>tot, coins<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                ccR<span class=\"br0\">(</span>tot <span class=\"sy0\">-</span> coins<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, coins<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\">count <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> t<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/>count <span class=\"nu0\">0</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>count <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>count x <span class=\"br0\">(</span>c:coins<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><br/>    <span class=\"br0\">[</span> count <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span> coins<br/>    <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> x c<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>count <span class=\"nu0\">100</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 19, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   US_coins       <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><br/>   US_allcoins    <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">50</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>   EU_coins       <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">]</span><br/>   CDN_coins      <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">200</span><span class=\"br0\">]</span><br/>   CDN_allcoins   <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">50</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">200</span><span class=\"br0\">]</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> trans <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"sy1\">,</span>US_coins<span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>                     <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span>US_coins<span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>                     <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy1\">*</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span>US_allcoins<span class=\"br0\">]</span> <br/>                  <span class=\"br0\">]</span> <span class=\"kw1\">do</span> <br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"There are\u00a0%i ways to count change for\u00a0%i using\u00a0%s coins.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>CountCoins<span class=\"sy1\">!</span>trans<span class=\"sy1\">,</span>trans<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>ShowList<span class=\"br0\">(</span>trans<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ShowList<span class=\"br0\">(</span>L<span class=\"br0\">)</span>            <span class=\"co1\"># helper list to string </span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">!</span>L <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><br/><span class=\"kw1\">return</span> s <span class=\"sy1\">||</span> <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">merge=: <span class=\"sy0\">(</span>{:\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>+/@:<span class=\"sy0\">(</span>{.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>,{:@{:<span class=\"sy0\">)</span>/. ]<span class=\"sy0\">)</span>@;<br/>count=: {<a class=\"__cf_email__\" data-cfemail=\"9eb0de\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>] &lt;@,. {:@] - [ * [ <a class=\"__cf_email__\" data-cfemail=\"fa93d4ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:@&lt;<a class=\"__cf_email__\" data-cfemail=\"9bb5db\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%~ {:@]<br/>init=: <span class=\"sy0\">(</span><span class=\"nu0\">1</span> ,. ,.<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>=#@$<span class=\"sy0\">)</span><br/>nsplits=: <span class=\"nu0\">0</span> { [: +/ [: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"9ef3fbecf9fbde\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>count\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> init<span class=\"sy0\">)</span>/ }<a class=\"__cf_email__\" data-cfemail=\"85abc5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/:<a class=\"__cf_email__\" data-cfemail=\"e29ca2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"205e0e60\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,</pre>"}, {"lang": "Java", "loc": 46, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> CountTheCoins <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a> countChanges<span class=\"br0\">(</span><span class=\"kw3\">int</span> amount, <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> coins<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> n = coins.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> cycle = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> c\u00a0: coins<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span>= amount <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&gt;</span>= cycle<span class=\"br0\">)</span><br/>                cycle = c + <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        cycle <span class=\"sy0\">*</span>= n<span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> table = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"br0\">[</span>cycle<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>table, <span class=\"nu0\">0</span>, n, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>table, n, cycle, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">int</span> pos = n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> s = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> s <span class=\"sy0\">&lt;</span>= amount<span class=\"sy0\">;</span> s++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> pos <span class=\"sy0\">&gt;</span>= cycle<span class=\"br0\">)</span><br/>                    pos = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coins<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> q = pos - <span class=\"br0\">(</span>coins<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    table<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> = <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> table<span class=\"br0\">[</span>q<span class=\"br0\">]</span>\u00a0: table<span class=\"br0\">[</span>q + cycle<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    table<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> = table<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>table<span class=\"br0\">[</span>pos - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                pos++<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">return</span> table<span class=\"br0\">[</span>pos - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">final</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> coinsUsEu = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                                   <span class=\"br0\">{</span><span class=\"nu0\">200</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> coins\u00a0: coinsUsEu<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countChanges<span class=\"br0\">(</span>     <span class=\"nu0\">100</span>,<br/>                <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">copyOfRange</span><span class=\"br0\">(</span>coins, <span class=\"nu0\">2</span>, coins.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countChanges<span class=\"br0\">(</span>  <span class=\"nu0\">100000</span>, coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countChanges<span class=\"br0\">(</span> <span class=\"nu0\">1000000</span>, coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countChanges<span class=\"br0\">(</span><span class=\"nu0\">10000000</span>, coins<span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 19, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> countcoins<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> o<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> targetsLength <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> operandsLength <span class=\"sy0\">=</span> o.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    t <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> operandsLength<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span> targetsLength<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"co1\">// initialise undefined target</span><br/>            t<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">?</span> t<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// accumulate target + operand ways</span><br/>            t<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> o<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> t<span class=\"br0\">[</span>b <span class=\"sy0\">-</span> o<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> t<span class=\"br0\">[</span>targetsLength <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># How many ways are there to make \"target\" cents, given a list of coin<br/># denominations as input.<br/># The strategy is to record at total[n] the number of ways to make n cents.<br/>def countcoins(target):<br/>  . as $coin<br/>  | reduce range(0; length) as $a<br/>      ( [1];   # there is 1 way to make 0 cents<br/>        reduce range(1; target + 1) as $b<br/>          (.;                                      # total[]<br/>           if $b &lt; $coin[$a] then .<br/>           else  .[$b - $coin[$a]] as $count<br/>           | if $count == 0 then .<br/>             else .[$b] += $count<br/>             end<br/>           end ) ) <br/>  | .[target]\u00a0;</pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">function changes(amount::Int, coins::Array{Int})::Int128<br/>    ways = zeros(Int128, amount + 1)<br/>    ways[1] = 1<br/>    for coin in coins, j in coin+1:amount+1<br/>        ways[j] += ways[j - coin]<br/>    end<br/>    return ways[amount + 1]<br/>end<br/>\u00a0<br/>@show changes(100, [1, 5, 10, 25])<br/>@show changes(100000, [1, 5, 10, 25, 50, 100])</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun countCoins<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> IntArray, m<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> table <span class=\"sy0\">=</span> LongArray<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    table<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m<span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in c<span class=\"br0\">[</span>i<span class=\"br0\">]</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> table<span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> table<span class=\"br0\">[</span>j - c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> table<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>countCoins<span class=\"br0\">(</span>c, <span class=\"nu0\">4</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>countCoins<span class=\"br0\">(</span>c, <span class=\"nu0\">6</span>, <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 30, "block": "<pre class=\"text highlighted_source\">define cointcoins(<br/>\ttarget::integer,<br/>\toperands::array<br/>) =&gt; {<br/>\u00a0<br/>\tlocal(<br/>\t\ttargetlength\t= #target + 1,<br/>\t\toperandlength\t= #operands -&gt; size,<br/>\t\toutput\t\t\t= staticarray_join(#targetlength,0),<br/>\t\touterloopcount<br/>\t)<br/>\u00a0<br/>\t#output -&gt; get(1) = 1<br/>\u00a0<br/>\tloop(#operandlength) =&gt; {<br/>\t\t#outerloopcount = loop_count<br/>\t\tloop(#targetlength) =&gt; {<br/>\u00a0<br/>\t\t\tif(loop_count &gt;= #operands -&gt; get(#outerloopcount) and loop_count - #operands -&gt; get(#outerloopcount) &gt; 0) =&gt; {<br/>\t\t\t\t#output -&gt; get(loop_count) += #output -&gt; get(loop_count - #operands -&gt; get(#outerloopcount))<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\treturn #output -&gt; get(#targetlength)<br/>}<br/>\u00a0<br/>cointcoins(100, array(1,5,10,25,))<br/>'&lt;br /&gt;'<br/>cointcoins(100000, array(1, 5, 10, 25, 50, 100))</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> countSums <span class=\"br0\">(</span>amount<span class=\"sy0\">,</span> values<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> amount <span class=\"kw1\">do</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>    t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> val <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> val<span class=\"sy0\">,</span> amount <span class=\"kw1\">do</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> val<span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> t<span class=\"br0\">[</span>amount<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>countSums<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>countSums<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module FindCoins {<br/>      Function count(c(), n)  {<br/>            dim table(n+1)<a class=\"__cf_email__\" data-cfemail=\"1c212c5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0:  table(0)<a class=\"__cf_email__\" data-cfemail=\"80bdb1c0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>            for c=0 to len(c())-1 {<br/>                 if c(c)&gt;n then exit<br/>            }<br/>            if c else exit<br/>            for i=0 to c-1 {for j=c(i) to n {table(j)+=table(j-c(i))}}<br/>            =table(n)<br/>      }<br/>      Print \"For 1$ ways to change:\";count((1,5,10,25),100)<br/>      Print \"For 100$ (optional task ways to change):\";count((1,5,10,25,50,100),100000)<br/>}<br/>FindCoins<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">CountCoins[amount_, coinlist_]\u00a0:= ( ways = ConstantArray[1, amount];<br/>Do[For[j = coin, j &lt;= amount, j++,<br/>  If[ j - coin == 0,<br/>    ways[[j]] ++,<br/>    ways[[j]] += ways[[j - coin]]<br/>]]<br/>, {coin, coinlist}];<br/>ways[[amount]])</pre>"}, {"lang": "MATLAB / Octave", "loc": 32, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"co1\">%% Count_The_Coins</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/clear.html\"><span class=\"kw2\">clear</span></a>;<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/close.html\"><span class=\"kw2\">close</span></a> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a>;<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/clc.html\"><span class=\"kw2\">clc</span></a>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/tic.html\"><span class=\"kw2\">tic</span></a><br/>\u00a0<br/><span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"nu0\">1</span>:<span class=\"nu0\">2</span> <span class=\"co1\">% 1st loop is main challenge 2nd loop is optional challenge</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        amount = <span class=\"nu0\">100</span>;                       <span class=\"co1\">% Matlab indexes from 1 not 0, so we need to add 1 to our target value                        </span><br/>        amount = amount + <span class=\"nu0\">1</span>;                    <br/>        coins = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span>;                <span class=\"co1\">% Value of coins we can use</span><br/>    <span class=\"kw1\">else</span><br/>        amount = <span class=\"nu0\">100</span>*<span class=\"nu0\">1000</span>;                  <span class=\"co1\">% Matlab indexes from 1 not 0, so we need to add 1 to our target value                        </span><br/>        amount = amount + <span class=\"nu0\">1</span>; <br/>        coins = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span> <span class=\"nu0\">50</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span>;         <span class=\"co1\">% Value of coins we can use</span><br/>    <span class=\"kw1\">end</span> <span class=\"co1\">% End if</span><br/>    ways = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,amount<span class=\"br0\">)</span>;                 <span class=\"co1\">% Preallocating for speed</span><br/>    ways<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>;                            <span class=\"co1\">% First solution is 1</span><br/>\u00a0<br/>    <span class=\"co1\">% Solves from smallest sub problem to largest (bottom up approach of dynamic programming).</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>coins<span class=\"br0\">)</span>                 <br/>        <span class=\"kw1\">for</span> K = coins<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:amount           <br/>            ways<span class=\"br0\">(</span>K<span class=\"br0\">)</span> = ways<span class=\"br0\">(</span>K<span class=\"br0\">)</span> + ways<span class=\"br0\">(</span>K-coins<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span>;   <br/>        <span class=\"kw1\">end</span> <span class=\"co1\">% End for</span><br/>    <span class=\"kw1\">end</span> <span class=\"co1\">% End for</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>\u2018Main Challenge: <span class=\"co1\">%d \\n', ways(amount));</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>\u2018Bonus Challenge: <span class=\"co1\">%d \\n', ways(amount));</span><br/>        <span class=\"kw1\">end</span> <span class=\"co1\">% End if </span><br/><span class=\"kw1\">end</span> <span class=\"co1\">% End for</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/toc.html\"><span class=\"kw2\">toc</span></a><br/>\u00a0</pre>"}, {"lang": "Mercury", "loc": 48, "block": "<pre class=\"text highlighted_source\">:- module coins.<br/>:- interface.<br/>:- import_module int, io.<br/>:- type coin ---&gt; quarter; dime; nickel; penny.<br/>:- type purse ---&gt; purse(int, int, int, int).<br/>\u00a0<br/>:- pred sum_to(int::in, purse::out) is nondet.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>:- implementation.<br/>:- import_module solutions, list, string.<br/>\u00a0<br/>:- func value(coin) = int.<br/>value(quarter) = 25.<br/>value(dime) = 10.<br/>value(nickel) = 5.<br/>value(penny) = 1.<br/>\u00a0<br/>:- pred supply(coin::in, int::in, int::out) is multi.<br/>supply(C, Target, N)\u00a0:- upto(Target div value(C), N).<br/>\u00a0<br/>:- pred upto(int::in, int::out) is multi.<br/>upto(N, R)\u00a0:- ( nondet_int_in_range(0, N, R0) -&gt; R = R0\u00a0; R = 0 ).<br/>\u00a0<br/>sum_to(To, Purse)\u00a0:-<br/>\tPurse = purse(Q, D, N, P),<br/>\tsum(Purse) = To,<br/>\tsupply(quarter, To, Q),<br/>\tsupply(dime, To, D),<br/>\tsupply(nickel, To, N),<br/>\tsupply(penny, To, P).<br/>\u00a0<br/>:- func sum(purse) = int.<br/>sum(purse(Q, D, N, P)) =<br/>\tvalue(quarter) * Q + value(dime) * D +<br/>\tvalue(nickel) * N + value(penny) * P.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>\tsolutions(sum_to(100), L),<br/>\tshow(L,\u00a0!IO),<br/>\tio.format(\"There are\u00a0%d ways to make change for a dollar.\\n\",<br/>                  [i(length(L))],\u00a0!IO).<br/>\u00a0<br/>:- pred show(list(purse)::in, io::di, io::uo) is det.<br/>show([],\u00a0!IO).<br/>show([P|T],\u00a0!IO)\u00a0:-<br/>\tio.write(P,\u00a0!IO), io.nl(!IO),<br/>\tshow(T,\u00a0!IO).</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">proc changes(amount: int, coins: openArray[int]): int =<br/>  var ways = @[1]<br/>  ways.setLen(amount+1)<br/>  for coin in coins:<br/>    for j in coin..amount:<br/>      ways[j] += ways[j-coin]<br/>  ways[amount]<br/>\u00a0<br/>echo changes(100, [1, 5, 10, 25])<br/>echo changes(100000, [1, 5, 10, 25, 50, 100])</pre>"}, {"lang": "OCaml", "loc": 14, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> changes amount coins <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ways <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"br0\">(</span>amount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> 0L <span class=\"kw1\">in</span><br/>  ways<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> 1L<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> coin <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> coin <span class=\"kw1\">to</span> amount <span class=\"kw1\">do</span><br/>      ways<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>add ways<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> ways<span class=\"sy0\">.</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> coin<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"br0\">)</span> coins<span class=\"sy0\">;</span><br/>  ways<span class=\"sy0\">.</span><span class=\"br0\">(</span>amount<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%Ld\\n\"</span> <span class=\"br0\">(</span>changes    <span class=\"nu0\">1</span>_00 <span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%Ld\\n\"</span> <span class=\"br0\">(</span>changes <span class=\"nu0\">1000</span>_00 <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">coins<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">prod</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">-</span><span class=\"re1\">'x</span><span class=\"sy0\">^</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ways<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">polcoeff</span><span class=\"br0\">(</span>coins<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw1\">O</span><span class=\"br0\">(</span><span class=\"re1\">'x</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ways<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"nu1\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu1\">100</span><span class=\"br0\">)</span><br/>ways<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"nu1\">25</span><span class=\"sy0\">,</span><span class=\"nu1\">50</span><span class=\"sy0\">,</span><span class=\"nu1\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu1\">100000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 23, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> <span class=\"nu0\">5.01</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Memoize<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"co5\">@_</span> <span class=\"sy0\">||</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$first</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    cc<span class=\"br0\">(</span> <span class=\"re0\">$amount</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> cc<span class=\"br0\">(</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">-</span> <span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>memoize <span class=\"st_h\">'cc'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Make recursive algorithm run faster by sorting coins descending by value:</span><br/><span class=\"kw2\">sub</span> cc_optimized <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    cc<span class=\"br0\">(</span> <span class=\"re0\">$amount</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">}</span> <span class=\"co5\">@_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st_h\">'Ways to change $ 1 with common coins: '</span><span class=\"sy0\">,</span><br/>    cc_optimized<span class=\"br0\">(</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say <span class=\"st_h\">'Ways to change $ 1000 with addition of less common coins: '</span><span class=\"sy0\">,</span><br/>    cc_optimized<span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 30, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># Recursive (cached)</span><br/><span class=\"kw2\">sub</span> change<span class=\"sy0\">-</span>r<span class=\"br0\">(</span><span class=\"re0\">$amount</span><span class=\"sy0\">,</span> <span class=\"re0\">@coins</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@cache</span> <span class=\"sy0\">=</span> $<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">xx</span> <span class=\"re0\">@coins</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">multi</span> ways<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">@now</span> <span class=\"br0\">[</span><span class=\"re0\">$coin</span><span class=\"sy0\">,*</span><span class=\"re0\">@later</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@cache</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"re0\">@later</span><span class=\"br0\">]</span> <span class=\"sy0\">//=</span> ways<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$coin</span><span class=\"sy0\">,</span> <span class=\"re0\">@now</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> ways<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@later</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> ways<span class=\"br0\">(</span>$<span class=\"sy0\">,@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># more efficient to start with coins sorted in descending order</span><br/>    ways<span class=\"br0\">(</span><span class=\"re0\">$amount</span><span class=\"sy0\">,</span> <span class=\"re0\">@coins</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span><span class=\"sy0\">-*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>change<span class=\"sy0\">-</span>r    <span class=\"nu0\">1</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>change<span class=\"sy0\">-</span>r <span class=\"nu0\">1000</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Iterative</span><br/><span class=\"kw2\">sub</span> change<span class=\"sy0\">-</span><span class=\"kw3\">i</span><span class=\"br0\">(</span>\\n<span class=\"sy0\">,</span> <span class=\"re0\">@coins</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@table</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">xx</span> <span class=\"re0\">@coins</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">@coins</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">n</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">@coins</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\<span class=\"kw3\">i</span><span class=\"sy0\">,</span> \\j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> \\c <span class=\"sy0\">=</span> <span class=\"re0\">@coins</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@table</span><span class=\"br0\">[</span><span class=\"kw3\">i</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">@table</span><span class=\"br0\">[</span><span class=\"kw3\">i</span> <span class=\"sy0\">-</span> c<span class=\"br0\">]</span><span class=\"br0\">[</span>j    <span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">@table</span><span class=\"br0\">[</span><span class=\"kw3\">i</span>    <span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">@table</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> change<span class=\"sy0\">-</span><span class=\"kw3\">i</span>    <span class=\"nu0\">1</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> change<span class=\"sy0\">-</span><span class=\"kw3\">i</span> <span class=\"nu0\">1000</span>_00<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 10, "block": "<pre class=\"text highlighted_source\">function coin_count(sequence coins, integer amount)<br/>    sequence s = repeat(0,amount+1)<br/>    s[1] = 1<br/>    for c=1 to length(coins) do<br/>        for n=coins[c] to amount do<br/>            s[n+1] += s[n-coins[c]+1]<br/>        end for<br/>    end for<br/>    return s[amount+1]<br/>end function</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de coins (Sum Coins)<br/>   (let (Buf (mapcar '((N) (cons 1 (need (dec N) 0))) Coins)  Prev)<br/>      (do Sum<br/>         (zero Prev)<br/>         (for L Buf<br/>            (inc (rot L) Prev)<br/>            (setq Prev (car L)) ) )<br/>      Prev ) )</pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> changes<span class=\"br0\">(</span>amount<span class=\"sy0\">,</span> coins<span class=\"br0\">)</span>:<br/>    ways <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>amount + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    ways<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> coin <span class=\"kw1\">in</span> coins:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>coin<span class=\"sy0\">,</span> amount + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            ways<span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> ways<span class=\"br0\">[</span>j - coin<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> ways<span class=\"br0\">[</span>amount<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span> changes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> changes<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (ways-to-make-change cents coins)<br/>  (cond ((null? coins) 0)<br/>        ((negative? cents) 0)<br/>        ((zero? cents) 1)<br/>        (else<br/>         (+ (ways-to-make-change cents (cdr coins))<br/>            (ways-to-make-change (- cents (car coins)) coins)))))<br/>\u00a0<br/>(ways-to-make-change 100 '(25 10 5 1))\u00a0; -&gt; 242<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts the number of ways to make change with coins from an given amount.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*be able to handle large amounts of $.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N $                                    <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N=<span class=\"st0\">\",\"</span>    <span class=\"kw3\">then</span> N=<span class=\"nu0\">100</span>                    <span class=\"coMULTI\">/*Not specified?  Then Use $1  (\u2261100\u00a2).*/</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> $=<span class=\"st0\">\",\"</span>    <span class=\"kw3\">then</span> $=<span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span>              <span class=\"coMULTI\">/*Use penny/nickel/dime/quarter default*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'$'</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>N,<span class=\"nu0\">2</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*the amount was specified in  dollars.*/</span><br/>coins=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*the number of coins specified.       */</span><br/>NN=N;              <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> coins             <span class=\"coMULTI\">/*create a fast way of accessing specie*/</span><br/>                   _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$,j<span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*define an array element for the coin.*/</span><br/>                   <span class=\"kw1\">if</span> _==<span class=\"st0\">'1/2'</span>  <span class=\"kw3\">then</span> _=<span class=\"sy0\">.</span>5        <span class=\"coMULTI\">/*an alternate spelling of a half-cent.*/</span><br/>                   <span class=\"kw1\">if</span> _==<span class=\"st0\">'1/4'</span>  <span class=\"kw3\">then</span> _=<span class=\"sy0\">.</span>25       <span class=\"coMULTI\">/* \"     \"         \"     \" \" quarter-\u00a2.*/</span><br/>                   $<span class=\"sy0\">.</span>j=_                         <span class=\"coMULTI\">/*assign the value to a particular coin*/</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>_=n<span class=\"sy0\">//</span><span class=\"nu0\">100</span>;                          cnt=<span class=\"st0\">' cents'</span>  <span class=\"coMULTI\">/* [\u2193]  is the amount in whole dollars?*/</span><br/><span class=\"kw1\">if</span> _=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; NN=<span class=\"st0\">'$'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>NN%100<span class=\"br0\">)</span>;  cnt=;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*show the amount in dollars, not cents*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'with an amount of '</span>      commas<span class=\"br0\">(</span>NN<span class=\"br0\">)</span>cnt<span class=\"st0\">\",  there are \"</span>       commas<span class=\"br0\">(</span> MKchg<span class=\"br0\">(</span>N, coins<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'ways to make change with coins of the following denominations: '</span>    $<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>commas: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _;           n=_<span class=\"st0\">'.9'</span>;     #=<span class=\"nu0\">123456789</span>;     b=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>n,#,<span class=\"st0\">\"M\"</span><span class=\"br0\">)</span><br/>        e=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>n,#<span class=\"st0\">'0'</span>,,<span class=\"kw6\">verify</span><span class=\"br0\">(</span>n,#<span class=\"st0\">\"0.\"</span>,<span class=\"st0\">'M'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"nu0\">4</span><br/>                    <span class=\"kw1\">do</span> j=e  <span class=\"kw2\">to</span> b  <span class=\"kw2\">by</span> -<span class=\"nu0\">3</span>;   _=<span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">','</span>,_,j<span class=\"br0\">)</span>;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>;      <span class=\"kw1\">return</span> _<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>MKchg: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> $<span class=\"sy0\">.</span>;       <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,k  <span class=\"coMULTI\">/*this function is invoked recursively.*/</span><br/>         <span class=\"kw1\">if</span> a==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*unroll for a special case of  zero.  */</span><br/>         <span class=\"kw1\">if</span> k==<span class=\"nu0\">1</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*   \"    \"  \"    \"      \"   \"  unity. */</span><br/>         <span class=\"kw1\">if</span> k==<span class=\"nu0\">2</span>    <span class=\"kw3\">then</span> f=<span class=\"nu0\">1</span>                     <span class=\"coMULTI\">/*handle this special case   of  two.  */</span><br/>                    <span class=\"kw3\">else</span> f=MKchg<span class=\"br0\">(</span>a, k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*count,  and then recurse the amount. */</span><br/>         <span class=\"kw1\">if</span> a==$<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> f+<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*handle this special case of A=a coin.*/</span><br/>         <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span>$<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> f                <span class=\"coMULTI\">/*   \"     \"     \"      \"   \" A&lt;a coin.*/</span><br/>                         <span class=\"kw1\">return</span> f+MKchg<span class=\"br0\">(</span>a-$<span class=\"sy0\">.</span>k,k<span class=\"br0\">)</span> <span class=\"coMULTI\">/*use diminished amount ($) for change.*/</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>penny = 1<br/>nickel = 1<br/>dime = 1 <br/>quarter = 1<br/>count = 0<br/>\u00a0<br/>for penny = 0 to 100<br/>    for nickel = 0 to 20<br/>        for dime = 0 to 10<br/>            for quarter = 0 to 4<br/>                if (penny + nickel * 5 + dime * 10 + quarter * 25) = 100<br/>                   see \"\" + penny + \" pennies \" + nickel + \" nickels \" + dime + \" dimes \" + quarter + \" quarters\" + nl<br/>                   count = count + 1 <br/>                ok<br/>            next<br/>        next<br/>    next<br/>next<br/>see  count + \" ways to make a dollar\" + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> make_change<span class=\"br0\">(</span>amount, coins<span class=\"br0\">)</span><br/>  <span class=\"re1\">@cache</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>amount<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>coins.<span class=\"me1\">size</span>, i.<span class=\"me1\">zero</span>?\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"re1\">@coins</span> = coins<br/>  do_count<span class=\"br0\">(</span>amount, <span class=\"re1\">@coins</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> do_count<span class=\"br0\">(</span>n, m<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">elsif</span> <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>    <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span> = do_count<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>@coins<span class=\"br0\">[</span>m<span class=\"br0\">]</span>, m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> do_count<span class=\"br0\">(</span>n, m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> make_change<span class=\"br0\">(</span>   <span class=\"nu0\">1</span>_00, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> make_change<span class=\"br0\">(</span><span class=\"nu0\">1000</span>_00, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">25</span>,<span class=\"nu0\">50</span>,<span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">for penny         = 0 to 100<br/>  for nickel      = 0 to 20<br/>    for dime      = 0 to 10<br/>      for quarter = 0 to 4<br/>       if penny + nickel * 5 + dime * 10 + quarter * 25 = 100 then<br/>        print penny;\" pennies \";nickel;\" nickels \"; dime;\" dimes \";quarter;\" quarters\"<br/>        count = count + 1 <br/>      end if<br/>      next quarter<br/>    next dime<br/>  next nickel<br/>next penny<br/>print count;\" ways to make a buck\"</pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">fn make_change(coins: &amp;[usize], cents: usize) -&gt; usize {<br/>    let size = cents + 1;<br/>    let mut ways = vec![0; size];<br/>    ways[0] = 1;<br/>    for &amp;coin in coins {<br/>        for amount in coin..size {<br/>            ways[amount] += ways[amount - coin];<br/>        }<br/>    }<br/>    ways[cents]<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", make_change(&amp;[1,5,10,25], 100));<br/>    println!(\"{}\", make_change(&amp;[1,5,10,25,50,100], 100_000));<br/>}</pre>"}, {"lang": "SAS", "loc": 21, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* call OPTMODEL procedure in SAS/OR */</span><br/><span class=\"re1\">proc optmodel</span>;<br/>   <span class=\"coMULTI\">/* declare set and names of coins */</span><br/>   <span class=\"kw4\">set</span> COINS = <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">25</span><span class=\"br0\">}</span>;<br/>   str name <span class=\"br0\">{</span>COINS<span class=\"br0\">}</span> = <span class=\"br0\">[</span><span class=\"st0\">'penny'</span>,<span class=\"st0\">'nickel'</span>,<span class=\"st0\">'dime'</span>,<span class=\"st0\">'quarter'</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* declare variables and constraint */</span><br/>   <span class=\"kw3\">var</span> NumCoins <span class=\"br0\">{</span>COINS<span class=\"br0\">}</span> &gt;= <span class=\"nu0\">0</span> integer;<br/>   con Dollar:<br/>      <span class=\"kw3\">sum</span> <span class=\"br0\">{</span>i <span class=\"kw4\">in</span> COINS<span class=\"br0\">}</span> i <span class=\"coMULTI\">* NumCoins[i] = 100;</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/* call CLP solver */</span><br/>   solve with CLP / findallsolns;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* write solutions to SAS data set */</span><br/>   <span class=\"kw4\">create</span> <span class=\"kw6\">data</span> sols<span class=\"br0\">(</span><span class=\"kw4\">drop</span>=s<span class=\"br0\">)</span> <span class=\"kw4\">from</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span>=<span class=\"br0\">(</span><span class=\"nu0\">1</span>.._NSOL_<span class=\"br0\">)</span> <span class=\"br0\">{</span>i <span class=\"kw4\">in</span> COINS<span class=\"br0\">}</span> &lt;col<span class=\"br0\">(</span>name<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>=NumCoins<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.sol<span class=\"br0\">[</span>s<span class=\"br0\">]</span>&gt;;<br/><span class=\"kw6\">quit</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/* print all solutions */</span><br/><span class=\"re1\">proc print</span> <span class=\"kw6\">data</span>=sols;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> countChange<span class=\"br0\">(</span>amount<span class=\"sy0\">:</span> Int, coins<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ways <span class=\"sy0\">=</span> Array.<span class=\"me1\">fill</span><span class=\"br0\">(</span>amount + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t  ways<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t  coins.<span class=\"me1\">foreach</span> <span class=\"br0\">(</span>coin <span class=\"sy0\">=&gt;</span><br/>\t  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j<span class=\"sy0\">&lt;</span>-coin to amount<span class=\"br0\">)</span><br/>\t\t  ways<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span>  ways<span class=\"br0\">(</span>j<span class=\"br0\">)</span> + ways<span class=\"br0\">(</span>j - coin<span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">)</span><br/>\tways<span class=\"br0\">(</span>amount<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span>       <br/>\u00a0<br/>countChange <span class=\"br0\">(</span><span class=\"nu0\">15</span>, List<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> ways<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>make<span class=\"sy0\">-</span>change<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x coins<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> coins<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> x<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>ways<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>make<span class=\"sy0\">-</span>change x <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ways<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>make<span class=\"sy0\">-</span>change <span class=\"br0\">(</span><span class=\"sy0\">-</span> x <span class=\"br0\">(</span><span class=\"kw1\">car</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span> coins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>ways<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>make<span class=\"sy0\">-</span>change <span class=\"nu0\">100</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 22, "block": "<pre class=\"text highlighted_source\">amount=100;<br/>coins=[25 10 5 1];<br/>n_coins=zeros(coins);<br/>ways=0;<br/>\u00a0<br/>for a=0:4<br/>    for b=0:10<br/>        for c=0:20<br/>            for d=0:100<br/>                n_coins=[a b c d];<br/>                change=sum(n_coins.*coins);<br/>                if change==amount then<br/>                    ways=ways+1;<br/>                elseif change&gt;amount<br/>                    break<br/>                end<br/>            end<br/>        end<br/>    end<br/>end<br/>\u00a0<br/>disp(ways);</pre>"}, {"lang": "Seed7", "loc": 41, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func bigInteger: changeCount (in integer: amountCents, in array integer: coins) is func<br/>  result<br/>    var bigInteger: waysToChange is 0_;<br/>  local<br/>    var array bigInteger: t is 0 times 0_;<br/>    var integer: pos is 0;<br/>    var integer: s is 0;<br/>    var integer: i is 0;<br/>  begin<br/>    t\u00a0:= length(coins) times 1_ &amp; (length(coins) * amountCents) times 0_;<br/>    pos\u00a0:= length(coins) + 1;<br/>    for s range 1 to amountCents do<br/>      if coins[1] &lt;= s then<br/>        t[pos]\u00a0:= t[pos - (length(coins) * coins[1])];<br/>      end if;<br/>      incr(pos);<br/>      for i range 2 to length(coins) do<br/>        if coins[i] &lt;= s then<br/>          t[pos]\u00a0:= t[pos - (length(coins) * coins[i])];<br/>        end if;<br/>        t[pos] +:= t[pos - 1];<br/>        incr(pos);<br/>      end for;<br/>    end for;<br/>    waysToChange\u00a0:= t[pos - 1];<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array integer: usCoins is [] (1, 5, 10, 25, 50, 100);<br/>    const array integer: euCoins is [] (1, 2, 5, 10, 20, 50, 100, 200);<br/>  begin<br/>    writeln(changeCount(    100, usCoins[.. 4]));<br/>    writeln(changeCount( 100000, usCoins));<br/>    writeln(changeCount(1000000, usCoins));<br/>    writeln(changeCount( 100000, euCoins));<br/>    writeln(changeCount(1000000, euCoins));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 17, "block": "<pre class=\"ruby highlighted_source\">func cc<span class=\"br0\">(</span>_<span class=\"br0\">)</span>                <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>func cc<span class=\"br0\">(</span><span class=\"br0\">{</span> .<span class=\"me1\">is_neg</span>  <span class=\"br0\">}</span>, <span class=\"sy0\">*</span>_<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>func cc<span class=\"br0\">(</span><span class=\"br0\">{</span> .<span class=\"me1\">is_zero</span> <span class=\"br0\">}</span>, <span class=\"sy0\">*</span>_<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>func cc<span class=\"br0\">(</span>amount, first, <span class=\"sy0\">*</span>rest<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    cc<span class=\"br0\">(</span>amount, rest...<span class=\"br0\">)</span> <span class=\"sy0\">+</span> cc<span class=\"br0\">(</span>amount <span class=\"sy0\">-</span> first, first, rest...<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func cc_optimized<span class=\"br0\">(</span>amount, <span class=\"sy0\">*</span>rest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cc<span class=\"br0\">(</span>amount, rest.<span class=\"me1\">sort_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> <span class=\"sy0\">-</span>v <span class=\"br0\">}</span>...<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = cc_optimized<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">25</span><span class=\"br0\">)</span>;<br/>say <span class=\"st0\">\"Ways to change $1 with common coins: #{x}\"</span>;<br/>\u00a0<br/>var y = cc_optimized<span class=\"br0\">(</span><span class=\"nu0\">1000</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>say <span class=\"st0\">\"Ways to change $1000 with addition of less common coins: #{y}\"</span>;</pre>"}, {"lang": "Tcl", "loc": 22, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> makeChange <span class=\"br0\">{</span>amount coins<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> table <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$amount</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$coins</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> table <span class=\"nu0\">0</span> <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$coins</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$amount</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$coins</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> k <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> - <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$coins</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">lset</span> table <span class=\"re0\">$i</span> <span class=\"re0\">$j</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$table</span> <span class=\"re0\">$k</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span> +<br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$table</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$table</span> end end<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>makeChange <span class=\"nu0\">100</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>makeChange <span class=\"nu0\">100000</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span> <span class=\"nu0\">50</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Making change with the EU coin set:</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>makeChange <span class=\"nu0\">100</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">50</span> <span class=\"nu0\">100</span> <span class=\"nu0\">200</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>makeChange <span class=\"nu0\">100000</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">50</span> <span class=\"nu0\">100</span> <span class=\"nu0\">200</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "uBasic/4tH", "loc": 14, "block": "<pre class=\"text highlighted_source\">c = 0<br/>for p       = 0 to 100<br/>  for n     = 0 to 20<br/>    for d   = 0 to 10<br/>      for q = 0 to 4<br/>       if p + n * 5 + d * 10 + q * 25 = 100 then<br/>         print p;\" pennies \";n;\" nickels \"; d;\" dimes \";q;\" quarters\"<br/>         c = c + 1<br/>       endif<br/>      next q<br/>    next d<br/>  next n<br/>next p<br/>print c;\" ways to make a buck\"</pre>"}, {"lang": "UNIX Shell", "loc": 13, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> count_change <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">amount</span>=<span class=\"re4\">$1</span> coin j<br/>  <span class=\"kw3\">local</span> <span class=\"re2\">ways</span>=<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">shift</span><br/>  <span class=\"kw1\">for</span> coin; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">j</span>=coin; j <span class=\"sy0\">&lt;</span>= amount; j++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">let</span> ways<span class=\"br0\">[</span>j<span class=\"br0\">]</span>=<span class=\"co1\">${ways[j]:-0}</span>+<span class=\"co1\">${ways[j-coin]:-0}</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${ways[amount]}</span>\"</span><br/><span class=\"br0\">}</span><br/>count_change <span class=\"nu0\">100</span> <span class=\"nu0\">25</span> <span class=\"nu0\">10</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span><br/>count_change <span class=\"nu0\">100000</span> <span class=\"nu0\">100</span> <span class=\"nu0\">50</span> <span class=\"nu0\">25</span> <span class=\"nu0\">10</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "VBScript", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> count(coins,m,n)<br/>\t<span class=\"kw4\">ReDim</span> table(n+1)<br/>\ttable(0) = 1<br/>\ti = 0<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> i &lt; m<br/>\t\tj = coins(i)<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> j &lt;= n<br/>\t\t\ttable(j) = table(j) + table(j - coins(i))<br/>\t\t\tj = j + 1<br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\ti = i + 1<br/>\t<span class=\"kw3\">Loop</span><br/>\tcount = table(n)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing<br/></span>arr = Array(1,5,10,25)<br/>m = <span class=\"kw4\">UBound</span>(arr) + 1<br/>n = 100<br/>WScript.StdOut.WriteLine count(arr,m,n)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn ways_to_make_change(x, coins=T(25,10,5,1)){<br/>   if(not coins) return(0);<br/>   if(x&lt;0)  return(0);<br/>   if(x==0) return(1);<br/>   ways_to_make_change(x, coins[1,*]) + ways_to_make_change(x - coins[0], coins)<br/>}<br/>ways_to_make_change(100).println();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 20, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> amount=<span class=\"nu0\">100</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">30</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"kw1\">LET</span> nPennies=amount<br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> nNickles=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>amount/<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> nDimes=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>amount/<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">LET</span> nQuarters=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>amount/<span class=\"nu0\">25</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> count=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1050</span> <span class=\"kw1\">FOR</span> p=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> nPennies<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> nNickles<br/><span class=\"nu0\">1070</span> <span class=\"kw1\">FOR</span> d=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> nDimes<br/><span class=\"nu0\">1080</span> <span class=\"kw1\">FOR</span> q=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> nQuarters<br/><span class=\"nu0\">1090</span> <span class=\"kw1\">LET</span> s=p+n*<span class=\"nu0\">5</span>+d*<span class=\"nu0\">10</span>+q*<span class=\"nu0\">25</span><br/><span class=\"nu0\">1100</span> <span class=\"kw1\">IF</span> s=<span class=\"nu0\">100</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> count=count+<span class=\"nu0\">1</span><br/><span class=\"nu0\">1110</span> <span class=\"kw1\">NEXT</span> q<br/><span class=\"nu0\">1120</span> <span class=\"kw1\">NEXT</span> d<br/><span class=\"nu0\">1130</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">1140</span> <span class=\"kw1\">NEXT</span> p<br/><span class=\"nu0\">1150</span> <span class=\"kw1\">PRINT</span> count<br/><span class=\"nu0\">1160</span> <span class=\"kw1\">RETURN</span> </pre>"}]}