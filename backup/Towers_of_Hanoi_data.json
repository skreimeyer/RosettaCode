{"task": "Towers_of_Hanoi", "blocks": [{"lang": "360 Assembly", "loc": 72, "block": "<pre class=\"text highlighted_source\">*        Towers of Hanoi           08/09/2015<br/>HANOITOW CSECT<br/>         USING  HANOITOW,R12       r12\u00a0: base register<br/>         LR     R12,R15            establish base register<br/>         ST     R14,SAVE14         save r14<br/>BEGIN    LH     R2,=H'4'           n &lt;===<br/>         L      R3,=C'123 '        stating position<br/>         BAL    R14,MOVE           r1=move(m,n)<br/>RETURN   L      R14,SAVE14         restore r14<br/>         BR     R14                return to caller<br/>SAVE14   DS     F                  static save r14<br/>PG       DC     CL44'xxxxxxxxxxxx Move disc from pole X to pole Y' <br/>NN       DC     F'0'<br/>POLEX    DS     F                  current poles<br/>POLEN    DS     F                  new poles<br/>*        ....   recursive          subroutine move(n, poles)  [r2,r3]<br/>MOVE     LR     R10,R11            save stackptr (r11) in r10 temp<br/>         LA     R1,STACKLEN        amount of storage required<br/>         GETMAIN RU,LV=(R1)        allocate storage for stack<br/>         USING  STACKDS,R11        make storage addressable<br/>         LR     R11,R1             establish stack addressability<br/>         ST     R14,SAVE14M        save previous r14<br/>         ST     R10,SAVE11M        save previous r11<br/>         LR     R1,R5              restore saved argument r5<br/>BEGINM   STM    R2,R3,STACK        push arguments to stack<br/>         ST     R3,POLEX<br/>         CH     R2,=H'1'           if n&lt;&gt;1<br/>         BNE    RECURSE            then goto recurse<br/>         L      R1,NN<br/>         LA     R1,1(R1)           nn=nn+1<br/>         ST     R1,NN<br/>         XDECO  R1,PG              nn<br/>         MVC    PG+33(1),POLEX+0   from<br/>         MVC    PG+43(1),POLEX+1   to<br/>         XPRNT  PG,44              print \"move disk from to\"<br/>         B      RETURNM<br/>RECURSE  L      R2,N               n<br/>         BCTR   R2,0               n=n-1<br/>         MVC    POLEN+0(1),POLES+0 from<br/>         MVC    POLEN+1(1),POLES+2 via<br/>         MVC    POLEN+2(1),POLES+1 to<br/>         L      R3,POLEN           new poles<br/>         BAL    R14,MOVE           call move(n-1,from,via,to)<br/>         LA     R2,1               n=1<br/>         MVC    POLEN,POLES <br/>         L      R3,POLEN           new poles<br/>         BAL    R14,MOVE           call move(1,from,to,via)<br/>         L      R2,N               n<br/>         BCTR   R2,0               n=n-1<br/>         MVC    POLEN+0(1),POLES+2 via<br/>         MVC    POLEN+1(1),POLES+1 to<br/>         MVC    POLEN+2(1),POLES+0 from<br/>         L      R3,POLEN           new poles<br/>         BAL    R14,MOVE           call move(n-1,via,to,from)<br/>RETURNM  LM     R2,R3,STACK        pull arguments from stack<br/>         LR     R1,R11             current stack<br/>         L      R14,SAVE14M        restore r14<br/>         L      R11,SAVE11M        restore r11<br/>         LA     R0,STACKLEN        amount of storage to free<br/>         FREEMAIN A=(R1),LV=(R0)   free allocated storage<br/>         BR     R14                return to caller<br/>         LTORG<br/>         DROP   R12                base no longer needed<br/>STACKDS  DSECT                     dynamic area<br/>SAVE14M  DS     F                  saved r14<br/>SAVE11M  DS     F                  saved r11<br/>STACK    DS     0F                 stack<br/>N        DS     F                  r2 n<br/>POLES    DS     F                  r3 poles<br/>STACKLEN EQU    *-STACKDS<br/>         YREGS  <br/>         END    HANOITOW</pre>"}, {"lang": "8th", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>5 var, disks<br/>var sa<br/>var sb<br/>var sc<br/>\u00a0<br/>: save sc\u00a0! sb\u00a0! sa\u00a0! disks\u00a0!\u00a0;<br/>: get sa @ sb @ sc @\u00a0;<br/>: get2 get swap\u00a0;<br/>: hanoi<br/>\tsave disks @ not if\u00a0;; then<br/>\tdisks @ get<br/>\tdisks @ n:1- get2 hanoi save<br/>\tcr <br/>\t\" move a ring from \" .  sa @ . \" to \" . sb @ .<br/>\tdisks @ n:1- get2 rot hanoi<br/>;<br/>\u00a0<br/>\" Tower of Hanoi, with \" . disks @ . \" rings: \" . <br/>disks @ 1 2 3 hanoi cr bye<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 9, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">public</span> <span class=\"kw2\">function</span> move<span class=\"br0\">(</span>n:<span class=\"kw3\">int</span>, from:<span class=\"kw3\">int</span>, to:<span class=\"kw3\">int</span>, via:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span> + from + <span class=\"st0\">\" to pole \"</span> + to<span class=\"br0\">)</span>;<br/>        move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Towers <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Pegs <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Left, Center, Right<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Hanoi <span class=\"br0\">(</span>Ndisks\u00a0: Natural; Start_Peg\u00a0: Pegs\u00a0:= Left; End_Peg\u00a0: Pegs\u00a0:= Right; Via_Peg\u00a0: Pegs\u00a0:= Center<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Ndisks &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Hanoi<span class=\"br0\">(</span>Ndisks - <span class=\"nu0\">1</span>, Start_Peg, Via_Peg, End_Peg<span class=\"br0\">)</span>;<br/>         Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Move disk\"</span> &amp; Natural'Image<span class=\"br0\">(</span>Ndisks<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" from \"</span> &amp; Pegs'Image<span class=\"br0\">(</span>Start_Peg<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" to \"</span> &amp; Pegs'Image<span class=\"br0\">(</span>End_Peg<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Hanoi<span class=\"br0\">(</span>Ndisks - <span class=\"nu0\">1</span>, Via_Peg, End_Peg, Start_Peg<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Hanoi;<br/><span class=\"kw1\">begin</span><br/>   Hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Towers;</pre>"}, {"lang": "Agena", "loc": 9, "block": "<pre class=\"text highlighted_source\">move\u00a0:= proc(n::number, src::number, dst::number, via::number) is<br/>   if n &gt; 0 then<br/>      move(n - 1, src, via, dst)<br/>      print(src &amp; ' to ' &amp; dst)<br/>      move(n - 1, via, dst, src)<br/>   fi<br/>end<br/>\u00a0<br/>move(4, 1, 2, 3)</pre>"}, {"lang": "ALGOL 68", "loc": 11, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> move <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> to<span class=\"sy1\">,</span> via<span class=\"br0\">)</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">IF</span> n <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> via<span class=\"sy1\">,</span> to<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Move disk from pole \"</span>g<span class=\"st0\">\" to pole \"</span>gl$<span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> to<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> via<span class=\"sy1\">,</span> to<span class=\"sy1\">,</span> from<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  move<span class=\"br0\">(</span>4<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span>2<span class=\"sy1\">,</span>3<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 10, "block": "<pre class=\"text highlighted_source\">begin<br/>    procedure move ( integer value n, from, to, via )\u00a0;<br/>        if n &gt; 0 then begin<br/>            move( n - 1, from, via, to );<br/>            write( i_w\u00a0:= 1, s_w\u00a0:= 0, \"Move disk from peg: \", from, \" to peg: \", to );<br/>            move( n - 1, via, to, from )<br/>        end move\u00a0;<br/>\u00a0<br/>    move( 4, 1, 2, 3 )<br/>end.</pre>"}, {"lang": "AmigaE", "loc": 11, "block": "<pre class=\"text highlighted_source\">PROC move(n, from, to, via)<br/>  IF n &gt; 0<br/>    move(n-1, from, via, to)<br/>    WriteF('Move disk from pole \\d to pole \\d\\n', from, to)<br/>    move(n-1, via, to, from)<br/>  ENDIF<br/>ENDPROC<br/>\u00a0<br/>PROC main()<br/>  move(4, 1,2,3)<br/>ENDPROC</pre>"}, {"lang": "AppleScript", "loc": 62, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- hanoi\u00a0:: Int -&gt; (String, String, String) -&gt; [(String, String)]</span><br/><span class=\"kw3\">on</span> hanoi<span class=\"br0\">(</span>n, abc<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> go<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n, <span class=\"br0\">{</span>x, y, z<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                |\u03bb|<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"br0\">{</span>x, z, y<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    <span class=\"br0\">{</span><span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> |\u03bb|<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"br0\">{</span>z, y, x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    go<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>n, abc<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> hanoi<br/>\u00a0<br/><span class=\"co1\">-- TEST ---------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> arrow<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>abc<span class=\"br0\">)</span><br/>            <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> abc <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> abc<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>arrow, \u00ac<br/>        hanoi<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"br0\">{</span><span class=\"st0\">\"left\"</span>, <span class=\"st0\">\"right\"</span>, <span class=\"st0\">\"mid\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS --------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: First-class m =&gt; (a -&gt; b) -&gt; m (a -&gt; b)</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> \u00ac<br/>        <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, linefeed<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> str <span class=\"kw3\">to</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    str<br/><span class=\"kw3\">end</span> unlines</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> via<span class=\"br0\">)</span>  <span class=\"co1\">;n = # of disks, from = start pole, to = end pole, via = remaining pole </span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a> <span class=\"sy0\">,</span> Move disk from pole <span class=\"re0\">%from%</span> to pole <span class=\"re0\">%to%</span> <br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>    move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><br/>    move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> via<span class=\"br0\">)</span><br/>    move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> from<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>move<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoIt", "loc": 11, "block": "<pre class=\"autoit highlighted_source\"><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> move<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$from</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\" To pole \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$to</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\tmove<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"br0\">)</span><br/>\t\tmove<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"br0\">)</span><br/>\t\tmove<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/>move<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\">$ awk 'func hanoi<span class=\"br0\">(</span>n,f,t,v<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy2\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span>hanoi<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span>,f,v,t<span class=\"br0\">)</span>;<span class=\"kw5\">print</span><span class=\"br0\">(</span>f,<span class=\"st0\">\"-&gt;\"</span>,t<span class=\"br0\">)</span>;hanoi<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span>,v,t,f<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span>hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"st0\">\"left\"</span>,<span class=\"st0\">\"middle\"</span>,<span class=\"st0\">\"right\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'</pre>"}, {"lang": "BASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">SUB</span> move <span class=\"br0\">(</span>n <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, fromPeg <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, toPeg <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, viaPeg <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        move n-<span class=\"nu0\">1</span>, fromPeg, viaPeg, toPeg<br/>        <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Move disk from \"</span>; fromPeg; <span class=\"st0\">\" to \"</span>; toPeg<br/>        move n-<span class=\"nu0\">1</span>, viaPeg, toPeg, fromPeg<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">SUB</span><br/>\u00a0<br/>move <span class=\"nu0\">4</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span></pre>"}, {"lang": "BASIC256", "loc": 11, "block": "<pre class=\"text highlighted_source\">call move(4,1,2,3)<br/>print \"Towers of Hanoi puzzle completed!\"<br/>end<br/>\u00a0<br/>subroutine move (n, fromPeg, toPeg, viaPeg)<br/>    if n&gt;0 then<br/>        call move(n-1, fromPeg, viaPeg, toPeg)<br/>        print \"Move disk from \"+fromPeg+\" to \"+toPeg<br/>        call move(n-1, viaPeg, toPeg, fromPeg)<br/>    end if<br/>end subroutine</pre>"}, {"lang": "Batch File", "loc": 28, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==The main thing==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==First param - Number of disks==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==Second param - Start pole==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==Third param - End pole==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==Fourth param - Helper pole==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\"><a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">move</span></a></span> 4 START END HELPER<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==The \"function\"==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\"><a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">move</span></a></span><br/>\t<a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> from=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> to=<span class=\"sy0\">%</span><span class=\"re3\">3</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> via=<span class=\"sy0\">%</span><span class=\"re3\">4</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a x=<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span>-1<br/>\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\"><a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">move</span></a></span> <span class=\"sy0\">!</span><span class=\"re2\">x</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"re3\">from</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">via</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">to</span><span class=\"sy0\">%</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">Move</span></a> top disk from pole <span class=\"sy0\">%</span><span class=\"re3\">from</span><span class=\"sy0\">%</span> to pole <span class=\"sy0\">%</span><span class=\"re3\">to</span><span class=\"sy0\">%</span>.<br/>\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\"><a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">move</span></a></span> <span class=\"sy0\">!</span><span class=\"re2\">x</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"re3\">via</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">to</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">from</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">)</span> <br/>\t<a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0</pre>"}, {"lang": "BBC BASIC", "loc": 36, "block": "<pre class=\"text highlighted_source\">      DIM Disc$(13),Size%(3)<br/>      FOR disc% = 1 TO 13<br/>        Disc$(disc%) = STRING$(disc%,\" \")+STR$disc%+STRING$(disc%,\" \")<br/>        IF disc%&gt;=10 Disc$(disc%) = MID$(Disc$(disc%),2)<br/>        Disc$(disc%) = CHR$17+CHR$(128+disc%-(disc%&gt;7))+Disc$(disc%)+CHR$17+CHR$128<br/>      NEXT disc%<br/>\u00a0<br/>      MODE 3<br/>      OFF<br/>      ndiscs% = 13<br/>      FOR n% = ndiscs% TO 1 STEP -1<br/>        PROCput(n%,1)<br/>      NEXT<br/>      INPUT TAB(0,0) \"Press Enter to start\" dummy$<br/>      PRINT TAB(0,0) SPC(20);<br/>      PROChanoi(ndiscs%,1,2,3)<br/>      VDU 30<br/>      END<br/>\u00a0<br/>      DEF PROChanoi(a%,b%,c%,d%)<br/>      IF a%=0 ENDPROC<br/>      PROChanoi(a%-1,b%,d%,c%)<br/>      PROCtake(a%,b%)<br/>      PROCput(a%,c%)<br/>      PROChanoi(a%-1,d%,c%,b%)<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCput(disc%,peg%)<br/>      PRINTTAB(13+26*(peg%-1)-disc%,20-Size%(peg%))Disc$(disc%);<br/>      Size%(peg%) = Size%(peg%)+1<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCtake(disc%,peg%)<br/>      Size%(peg%) = Size%(peg%)-1<br/>      PRINTTAB(13+26*(peg%-1)-disc%,20-Size%(peg%))STRING$(2*disc%+1,\" \");<br/>      ENDPROC</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">48*2+1&gt;#v_:!#@_0\" ksid evoM\"&gt;:#,_$:8/:.v<br/>&gt;8v8:&lt;$#&lt;+9-+*2%3\\*3/3:,+55.+1%3:$_,#!&gt;#:&lt;<br/>: &gt;/!#^_:0\\:8/1-8vv,_$8%:3/1+.&gt;0\" gep ot\"^<br/>^++3-%3\\*2/3:%8\\*&lt;&gt;:^:\"from peg \"0\\*8-1&lt;</pre>"}, {"lang": "Bracmat", "loc": 12, "block": "<pre class=\"text highlighted_source\">( ( move<br/>  =   n from to via<br/>    .  \u00a0!arg:(?n,?from,?to,?via)<br/>      &amp; (  \u00a0!n:&gt;0<br/>          &amp; move$(!n+-1,!from,!via,!to)<br/>          &amp; out$(\"Move disk from pole \"\u00a0!from \" to pole \"\u00a0!to)<br/>          &amp; move$(!n+-1,!via,!to,!from)<br/>        | <br/>        )<br/>  )<br/>&amp; move$(4,1,2,3)<br/>);</pre>"}, {"lang": "Brainf***", "loc": 153, "block": "<pre class=\"text highlighted_source\">[<br/>This implementation is recursive and uses<br/>a stack, consisting of frames that are 8<br/>bytes long. The layout is as follows:<br/>\u00a0<br/>Byte   Description<br/>   0   recursion flag<br/>       (the program stops if the flag is<br/>        zero)<br/>   1   the step which is currently<br/>       executed<br/>       4 means a call to<br/>               move(a, c, b, n - 1)<br/>       3 means a call to<br/>               move(a, b, c, 1)<br/>       2 means a call to<br/>               move(b, a, c, n - 1)<br/>       1 prints the source and dest pile<br/>   2   flag to check whether the current<br/>       step has already been done or if<br/>       it still must be executed<br/>   3   the step which will be executed<br/>       in the next loop<br/>   4   the source pile<br/>   5   the helper pile<br/>   6   the destination pile<br/>   7   the number of disks to move<br/>\u00a0<br/>The first stack frame (0 0 0 0 0 0 0 0)<br/>is used to abort the recursion.<br/>]<br/>\u00a0<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>\u00a0<br/>These are the parameters for the program<br/>(1 4 1 0 'a 'b 'c 5)<br/>+&gt;++++&gt;+&gt;&gt;<br/>&gt;&gt;&gt;&gt;++++++++[&lt;++++++++++++&gt;-]&lt;<br/>[&lt;&lt;&lt;+&gt;+&gt;+&gt;-]&lt;&lt;&lt;+&gt;++&gt;+++&gt;+++++&gt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>\u00a0<br/>[&gt; while (recurse)<br/>  [- if (step gt 0)<br/>    &gt;[-]+&lt; todo = 1<br/>    [- if (step gt 1)<br/>      [- if (step gt 2)<br/>        [- if (step gt 3)<br/>          &gt;&gt;+++&lt;&lt; next = 3<br/>          &gt;-&lt; todo = 0<br/>          &gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;+&lt;&lt;-]&gt;[&lt;+&gt;-]&gt; n dup<br/>          -<br/>          [[-] if (sub(n 1) gt 0)<br/>            &lt;+&gt;&gt;&gt;++++&gt; push (1 0 0 4)<br/>\u00a0<br/>            copy and push a<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>            &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>            copy and push c<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>            &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>            copy and push b<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>            &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>            copy n and push sub(n 1)<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>            &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; -<br/>            &gt;&gt;<br/>          ]<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>        ]<br/>        &gt;[-&lt; if ((step gt 2) and todo)<br/>          &gt;&gt;++&lt;&lt; next = 2<br/>          &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          +&gt;&gt;&gt;+&gt; push 1 0 0 1 a b c 1<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt; a<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt; b<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt; c<br/>          + &gt;&gt;<br/>        &gt;]&lt;<br/>      ]<br/>      &gt;[-&lt; if ((step gt 1) and todo)<br/>        &gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;+&lt;&lt;-]&gt;[&lt;+&gt;-]&gt; n dup<br/>        -<br/>        [[-] if (n sub 1 gt 0)<br/>          &lt;+&gt;&gt;&gt;++++&gt; push (1 0 0 4)<br/>\u00a0<br/>          copy and push b<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>          copy and push a<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>          copy and push c<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; &gt;<br/>\u00a0<br/>          copy n and push sub(n 1)<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+<br/>          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>          &gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt; -<br/>          &gt;&gt;<br/>        ]<br/>        &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>      &gt;]&lt;<br/>    ]<br/>    &gt;[-&lt; if ((step gt 0) and todo)<br/>      &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>      &gt;++++[&lt;++++++++&gt;-]&lt;<br/>      &gt;&gt;++++++++[&lt;+++++++++&gt;-]&lt;++++<br/>      &gt;&gt;++++++++[&lt;++++++++++++&gt;-]&lt;+++++<br/>      &gt;&gt;+++++++++[&lt;++++++++++++&gt;-]&lt;+++<br/>      &lt;&lt;&lt;<br/>      &gt;.+++++++&gt;.++.--.&lt;&lt;.<br/>      &gt;&gt;-.+++++.----.&lt;&lt;.<br/>      &gt;&gt;&gt;.&lt;---.+++.&gt;+++.+.+.&lt;.&lt;&lt;.<br/>      &gt;.&gt;--.+++++.---.++++.<br/>        -------.+++.&lt;&lt;.<br/>      &gt;&gt;&gt;++.-------.-.&lt;&lt;&lt;.<br/>      &gt;+.&gt;&gt;+++++++.---.-----.&lt;&lt;&lt;.<br/>      &lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;.<br/>      &gt;&gt;----.&gt;++++++++.&lt;+++++.&lt;&lt;.<br/>      &gt;.&gt;&gt;.---.-----.&lt;&lt;&lt;.<br/>      &lt;&lt;.&gt;&gt;++++++++++++++.<br/>      &gt;&gt;&gt;[-]&lt;[-]&lt;[-]&lt;[-]<br/>      +++++++++++++.---.[-]<br/>      &lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>    &gt;]&lt;<br/>    &gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt; step = next<br/>  ]<br/>  return with clear stack frame<br/>  &lt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;<br/>  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>  &gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt; step = next<br/>  &lt;<br/>]</pre>"}, {"lang": "C", "loc": 15, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> via<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole\u00a0%d to pole\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> from<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  move<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span>  <span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> <span class=\"kw1\">from</span>, <span class=\"kw4\">int</span> to, <span class=\"kw4\">int</span> via<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">from</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" to pole \"</span> <span class=\"sy0\">+</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>     move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"kw1\">from</span>, via, to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw1\">from</span>, to, via<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, via, to, <span class=\"kw1\">from</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> from, <span class=\"kw4\">int</span> to, <span class=\"kw4\">int</span> via<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Move disk from pole \"</span> <span class=\"sy1\">&lt;&lt;</span> from <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" to pole \"</span> <span class=\"sy1\">&lt;&lt;</span> to <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, from, to, via<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn towers-of-hanoi <span class=\"br0\">[</span>n from to via<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"Move from\u00a0%s to\u00a0%s\"</span> from to<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>towers-of-hanoi <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span> from via to<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"Move from\u00a0%s to\u00a0%s\"</span> from to<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span> via to from<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 28, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> towers-of-hanoi<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">CALL</span> <span class=\"st0\">\"move-disk\"</span> <span class=\"kw3\">USING</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> towers-of-hanoi<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> move-disk RECURSIVE<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  n                         <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  from-pole                 <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  to-pole                   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  via-pole                  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> n<span class=\"sy0\">,</span> from-pole<span class=\"sy0\">,</span> to-pole<span class=\"sy0\">,</span> via-pole<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">0</span><br/>       <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">1</span> <span class=\"kw3\">FROM</span> n<br/>       <span class=\"kw2\">CALL</span> <span class=\"st0\">\"move-disk\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> n<span class=\"sy0\">,</span> from-pole<span class=\"sy0\">,</span> via-pole<span class=\"sy0\">,</span> to-pole<br/>       <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Move disk from pole \"</span> from-pole <span class=\"st0\">\" to pole \"</span> to-pole<br/>       <span class=\"kw2\">CALL</span> <span class=\"st0\">\"move-disk\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> n<span class=\"sy0\">,</span> via-pole<span class=\"sy0\">,</span> to-pole<span class=\"sy0\">,</span> from-pole<br/>    END-<span class=\"kw1\">IF</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> move-disk<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 8, "block": "<pre class=\"coffeescript highlighted_source\">hanoi = <span class=\"br0\">(</span>ndisks<span class=\"sy0\">,</span> start_peg=<span class=\"nu0\">1</span><span class=\"sy0\">,</span> end_peg=<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">if</span> ndisks<br/>    staging_peg = <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span> start_peg <span class=\"sy0\">-</span> end_peg<br/>    hanoi<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> start_peg<span class=\"sy0\">,</span> staging_peg<span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"Move disk #{ndisks} from peg #{start_peg} to #{end_peg}\"</span><br/>    hanoi<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> staging_peg<span class=\"sy0\">,</span> end_peg<span class=\"br0\">)</span><br/>\u00a0<br/>hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> move <span class=\"br0\">(</span>n from to via<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>format t <span class=\"st0\">\"Move from ~A to ~A.~%\"</span> from to<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t<br/>         <span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> from via to<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>format t <span class=\"st0\">\"Move from ~A to ~A.~%\"</span> from to<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> via to from<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> hanoi<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">char</span> from<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">char</span> to<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">char</span> via<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hanoi<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Move disk\u00a0%d from\u00a0%s to\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        hanoi<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> from<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hanoi<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'L'</span><span class=\"sy0\">,</span> <span class=\"st0\">'M'</span><span class=\"sy0\">,</span> <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 15, "block": "<pre class=\"text highlighted_source\">main() { <br/>  moveit(from,to) {<br/>    print(\"move ${from} ---&gt; ${to}\");<br/>  }<br/>\u00a0<br/>  hanoi(height,toPole,fromPole,usePole) {<br/>    if (height&gt;0) {<br/>      hanoi(height-1,usePole,fromPole,toPole);  <br/>      moveit(fromPole,toPole);<br/>      hanoi(height-1,toPole,usePole,fromPole);<br/>    }<br/>  }<br/>\u00a0<br/>  hanoi(3,3,1,2);<br/>}</pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre> [ # move(from, to)\n    n           # print from\n    [ --&gt; ]n    # print \" --&gt; \"\n    p           # print to\\n\n    sw          # p doesn't pop, so get rid of the value\n ]sm\n \n [ # init(n)\n    sw          # tuck n away temporarily\n    9           # sentinel as bottom of stack\n    lw          # bring n back\n    1           # \"from\" tower's label\n    3           # \"to\" tower's label\n    0           # processed marker\n ]si\n \n [ # Move()\n    lt          # push to\n    lf          # push from\n    lmx         # call move(from, to)\n ]sM\n \n [ # code block &lt;d&gt;\n    ln          # push n\n    lf          # push from\n    lt          # push to\n    1           # push processed marker 1\n    ln          # push n\n    1           # push 1\n    -           # n - 1\n    lf          # push from\n    ll          # push left\n    0           # push processed marker 0\n ]sd\n \n [ # code block &lt;e&gt;\n    ln          # push n\n    1           # push 1\n    -           # n - 1\n    ll          # push left\n    lt          # push to\n    0           # push processed marker 0\n ]se\n \n [ # code block &lt;x&gt;\n    ln 1 =M\n    ln 1\u00a0!=d\n ]sx\n \n [ # code block &lt;y&gt;\n    lMx\n    lex\n ]sy\n \n [ # quit()\n    q           # exit the program\n ]sq\n \n [ # run()\n    d 9 =q      # if stack empty, quit()\n    sp          # processed\n    st          # to\n    sf          # from\n    sn          # n\n    6           #\n    lf          #\n    -           #\n    lt          #\n    -           # 6 - from - to\n    sl          #\n    lp 0 =x     #\n    lp 0\u00a0!=y    #\n    lrx         # loop\n ]sr\n \n 5lix # init(n)\n lrx # run()\n</pre>"}, {"lang": "E", "loc": 9, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> move<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> fromPeg<span class=\"sy0\">,</span> toPeg<span class=\"sy0\">,</span> viaPeg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">aboveZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        move<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> n.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> fromPeg<span class=\"sy0\">,</span> viaPeg<span class=\"sy0\">,</span> toPeg<span class=\"br0\">)</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`Move disk $n from $fromPeg to $toPeg.`</span><span class=\"br0\">)</span><br/>        move<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> n.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> viaPeg<span class=\"sy0\">,</span> toPeg<span class=\"sy0\">,</span> fromPeg<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>move<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/stdout\"><span class=\"kw7\">stdout</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> left <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> right <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> middle <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 28, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tmove <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Towers of Hanoi</span><br/>\u00a0<br/>\tmove <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a>; frm, to, via<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t    <span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>    \t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span> <span class=\"sy0\">+</span> frm <span class=\"sy0\">+</span> <span class=\"st0\">\" to pole \"</span> <span class=\"sy0\">+</span> to <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>    \t\t<span class=\"kw2\">else</span><br/>    \t\t\tmove <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, frm, via, to<span class=\"br0\">)</span><br/>    \t\t\tmove <span class=\"br0\">(</span><span class=\"nu0\">1</span>, frm, to, via<span class=\"br0\">)</span><br/>    \t\t\tmove <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, via, to, frm<span class=\"br0\">)</span><br/>\t        <span class=\"kw2\">end</span><br/>\t    <span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 17, "block": "<pre class=\"text highlighted_source\">open monad io<br/>:::IO<br/>\u00a0<br/>//Functional approach<br/>hanoi 0 _ _ _ = []<br/>hanoi n a b c = hanoi (n - 1) a c b ++ [(a,b)] ++ hanoi (n - 1) c b a<br/>\u00a0<br/>hanoiIO n = mapM_ f $ hanoi n 1 2 3 where<br/>  f (x,y) = putStrLn $ \"Move \" ++ show x ++ \" to \" ++ show y<br/>\u00a0<br/>//Imperative approach using IO monad<br/>hanoiM n = hanoiM' n 1 2 3 where<br/>  hanoiM' 0 _ _ _ = return ()<br/>  hanoiM' n a b c = do<br/>    hanoiM' (n - 1) a c b<br/>    putStrLn $ \"Move \" ++ show a ++ \" to \" ++ show b<br/>    hanoiM' (n - 1) c b a</pre>"}, {"lang": "Elena", "loc": 12, "block": "<pre class=\"text highlighted_source\">move = (:n:from:to:via)<br/>[<br/>    if (n == 1)<br/>    [<br/>        console printLine(\"Move disk from pole \",from,\" to pole \",to).<br/>    ];<br/>    [<br/>        move(n-1,from,via,to).<br/>        move(1,from,to,via).<br/>        move(n-1,via,to,from)<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def hanoi(n) when 0&lt;n and n&lt;10, do: hanoi(n, 1, 2, 3)<br/>\u00a0<br/>  defp hanoi(1, f, _, t), do: move(f, t)<br/>  defp hanoi(n, f, u, t) do<br/>    hanoi(n-1, f, t, u)<br/>    move(f, t)<br/>    hanoi(n-1, u, f, t)<br/>  end<br/>\u00a0<br/>  defp move(f, t), do: IO.puts \"Move disk from #{f} to #{t}\"<br/>end<br/>\u00a0<br/>RC.hanoi(3)</pre>"}, {"lang": "Emacs Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> move <span class=\"br0\">(</span>n from to via<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"Move from\u00a0%S to\u00a0%S\"</span> from to<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t<br/>\t <span class=\"br0\">(</span><span class=\"kw1\">progn</span><br/>\t   <span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> from via to<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"Move from\u00a0%S to\u00a0%S\"</span> from to<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> via to from<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">_V</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Move from ~p to ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">move</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re3\">move</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>  <span class=\"re3\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>  <span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">move</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>!-----------------------------------------------------------<br/>! HANOI.R\u00a0: solve tower of Hanoi puzzle using a recursive <br/>! modified algorithm.<br/>!-----------------------------------------------------------<br/>\u00a0<br/>PROGRAM HANOI<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>!VAR I,J,MOSSE,NUMBER<br/>\u00a0<br/>PROCEDURE PRINTMOVE<br/>  LOCAL SOURCE$,DEST$<br/>  MOSSE=MOSSE+1<br/>  CASE I OF<br/>     1-&gt; SOURCE$=\"Left\" END -&gt;<br/>     2-&gt; SOURCE$=\"Center\" END -&gt;<br/>     3-&gt; SOURCE$=\"Right\" END -&gt;<br/>  END CASE<br/>  CASE J OF<br/>     1-&gt; DEST$=\"Left\" END -&gt;<br/>     2-&gt; DEST$=\"Center\" END -&gt;<br/>     3-&gt; DEST$=\"Right\" END -&gt;<br/>  END CASE<br/>  PRINT(\"I move a disk from \";SOURCE$;\" to \";DEST$)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE MOVE<br/>  IF NUMBER&lt;&gt;0 THEN<br/>     NUMBER=NUMBER-1<br/>     J=6-I-J<br/>     MOVE<br/>     J=6-I-J<br/>     PRINTMOVE<br/>     I=6-I-J<br/>     MOVE<br/>     I=6-I-J<br/>     NUMBER=NUMBER+1<br/>  END IF<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  MAXNUM=12<br/>  MOSSE=0<br/>  PRINT(CHR$(12);TAB(25);\"--- TOWERS OF HANOI ---\")<br/>  REPEAT<br/>     PRINT(\"Number of disks \";)<br/>     INPUT(NUMBER)<br/>  UNTIL NUMBER&gt;1 AND NUMBER&lt;=MAXNUM<br/>  PRINT<br/>  PRINT(\"For \";NUMBER;\"disks the total number of moves is\";2^NUMBER-1)<br/>  I=1 \u00a0! number of source pole<br/>  J=3 \u00a0! number of destination pole<br/>  MOVE<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Ezhil", "loc": 29, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\"># (C) 2013 Ezhil Language Project</span><br/><span class=\"co1\"># Tower of Hanoi \u2013 recursive solution</span><br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0bb9\u0bcb\u0ba9\u0bbe\u0baf\u0bcd<span class=\"br0\">(</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd<span class=\"sy0\">,</span> \u0bae\u0bc1\u0ba4\u0bb2\u0bcd\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span> \u0b87\u0bb1\u0bc1\u0ba4\u0bbf\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span><span class=\"br0\">(</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>     \u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf  \u201c\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1 \u201d + <span class=\"kw2\">str</span><span class=\"br0\">(</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1<span class=\"br0\">)</span> + \u201c\u0b90 \\t  <span class=\"br0\">(</span>\u201d + <span class=\"kw2\">str</span><span class=\"br0\">(</span>\u0bae\u0bc1\u0ba4\u0bb2\u0bcd\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"br0\">)</span> + \u201c  \u2014<span class=\"sy0\">&gt;</span> \u201d +  <span class=\"kw2\">str</span><span class=\"br0\">(</span>\u0b87\u0bb1\u0bc1\u0ba4\u0bbf\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"br0\">)</span>+ \u201c<span class=\"br0\">)</span> \u0b85\u0b9a\u0bcd\u0b9a\u0bbf\u0bb1\u0bcd\u0b95\u0bc1 \u0ba8\u0b95\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bc1\u0b95.\u201d<br/>  \u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>\u00a0<br/>  <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"st0\">\"\u0b87\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u0b85\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"\u0b86\"</span><span class=\"br0\">]</span>  \u0b87\u0bb2\u0bcd \u0b85\u0b9a\u0bcd\u0b9a\u0bc1 <span class=\"br0\">)</span> \u0b92\u0bb5\u0bcd\u0bb5\u0bca\u0ba9\u0bcd\u0bb1\u0bbe\u0b95<br/>          <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>\u0bae\u0bc1\u0ba4\u0bb2\u0bcd\u0b85\u0b9a\u0bcd\u0b9a\u0bc1 <span class=\"sy0\">!=</span> \u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"br0\">)</span>  &amp;&amp; <span class=\"br0\">(</span>\u0b87\u0bb1\u0bc1\u0ba4\u0bbf\u0b85\u0b9a\u0bcd\u0b9a\u0bc1  <span class=\"sy0\">!=</span> \u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"br0\">)</span> <span class=\"br0\">)</span> \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>              \u0ba8\u0b9f\u0bc1 <span class=\"sy0\">=</span> \u0b85\u0b9a\u0bcd\u0b9a\u0bc1<br/>          \u0bae\u0bc1\u0b9f\u0bbf<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    <span class=\"co1\"># solve problem for n-1 again between src and temp pegs                      </span><br/>    \u0bb9\u0bcb\u0ba9\u0bbe\u0baf\u0bcd<span class=\"br0\">(</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd-<span class=\"nu0\">1</span><span class=\"sy0\">,</span>   \u0bae\u0bc1\u0ba4\u0bb2\u0bcd\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span>\u0ba8\u0b9f\u0bc1<span class=\"sy0\">,</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># move largest disk from src to destination</span><br/>    \u0bb9\u0bcb\u0ba9\u0bbe\u0baf\u0bcd<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> \u0bae\u0bc1\u0ba4\u0bb2\u0bcd\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span> \u0b87\u0bb1\u0bc1\u0ba4\u0bbf\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># solve problem for n-1 again between different pegs</span><br/>    \u0bb9\u0bcb\u0ba9\u0bbe\u0baf\u0bcd<span class=\"br0\">(</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> \u0ba8\u0b9f\u0bc1<span class=\"sy0\">,</span> \u0b87\u0bb1\u0bc1\u0ba4\u0bbf\u0b85\u0b9a\u0bcd\u0b9a\u0bc1<span class=\"sy0\">,</span>\u0bb5\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0bb9\u0bcb\u0ba9\u0bbe\u0baf\u0bcd<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>\u201d\u0b85\u201d<span class=\"sy0\">,</span>\u201d\u0b86\u201d<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co2\">#light</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> hanoi num start finish <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> num <span class=\"kw1\">with</span><br/>  | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span> <span class=\"br0\">]</span><br/>  | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> temp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"sy0\">-</span> start <span class=\"sy0\">-</span> finish<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>hanoi <span class=\"br0\">(</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> start temp<span class=\"br0\">)</span> @ <span class=\"br0\">[</span> start, finish <span class=\"br0\">]</span> @ <span class=\"br0\">(</span>hanoi <span class=\"br0\">(</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> temp finish<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>hanoi <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> pair <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> pair <span class=\"kw1\">with</span><br/>                                          | a, b <span class=\"sy0\">-&gt;</span> printf <span class=\"st0\">\"Move disc from\u00a0%A to\u00a0%A<span class=\"es0\">\\n</span>\"</span> a b<span class=\"br0\">)</span><br/>  <span class=\"nu0\">0</span></pre>"}, {"lang": "FALSE", "loc": 4, "block": "<pre class=\"text highlighted_source\">[\"Move disk from \"$!\\\" to \"$!\\\"<br/>\"]p:  { to from }<br/>[n;0&gt;[n;1-n: @\\ h;! @\\ p;! \\@ h;! \\@ n;1+n:]?]h:  { via to from }<br/>4n:[\"right\"][\"middle\"][\"left\"]h;!%%%</pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: formatting kernel locals math\u00a0;<br/>IN: rosettacode.hanoi<br/>\u00a0<br/>: move ( from to -- )<br/>    \"%d-&gt;%d\\n\" printf\u00a0;<br/>:: hanoi ( n from to other -- )<br/>    n 0 &gt; [<br/>        n 1 - from other to hanoi<br/>        from to move<br/>        n 1 - other to from hanoi<br/>    ] when\u00a0;</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">CREATE peg1 ,\" left \"   <br/>CREATE peg2 ,\" middle \" <br/>CREATE peg3 ,\" right \" <br/>\u00a0<br/>: .$   COUNT TYPE\u00a0;<br/>: MOVE-DISK <br/>  LOCALS| via to from n | <br/>  n 1 =<br/>  IF   CR .\" Move disk from \" from .$ .\" to \" to .$ <br/>  ELSE n 1- from via to RECURSE <br/>       1    from to via RECURSE <br/>       n 1- via to from RECURSE <br/>  THEN\u00a0;</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> TOWER<br/>\u00a0<br/>  <span class=\"kw1\">CALL</span> Move<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">CONTAINS</span><br/>\u00a0<br/>  <span class=\"kw1\">RECURSIVE</span> <span class=\"kw1\">SUBROUTINE</span> Move<span class=\"br0\">(</span>ndisks, from, <span class=\"kw1\">to</span>, via<span class=\"br0\">)</span><br/>    <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span> <span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ndisks</span>, from, <span class=\"kw1\">to</span>, via<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ndisks <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,I1,A,I1)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Move disk from pole \"</span>, from, <span class=\"st0\">\" to pole \"</span>, <span class=\"kw1\">to</span><br/>    <span class=\"kw1\">ELSE</span><br/>       <span class=\"kw1\">CALL</span> Move<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, from, via, <span class=\"kw1\">to</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">CALL</span> Move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, from, <span class=\"kw1\">to</span>, via<span class=\"br0\">)</span><br/>       <span class=\"kw1\">CALL</span> Move<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, via, <span class=\"kw1\">to</span>, from<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Move<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> TOWER</pre>"}, {"lang": "FreeBASIC", "loc": 17, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> move<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, from <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, to_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, via <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, from, via, to_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Move disk\"</span>; n; <span class=\"st0\">\" from pole\"</span>; from; <span class=\"st0\">\" to pole\"</span>; to_<br/>    move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, via, to_, from<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Three disks\"</span>\u00a0: <span class=\"kw1\">Print</span><br/>move <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <br/><span class=\"kw1\">Print</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Four disks\"</span>\u00a0: <span class=\"kw1\">Print</span><br/>move <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FutureBasic", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>void local fn move( n as long, fromPeg as long, toPeg as long, viaPeg as long )<br/>if n &gt; 0<br/>   fn move( n-1, fromPeg, viaPeg, toPeg )<br/>   print \"Move disk from \"; fromPeg; \" to \"; toPeg<br/>   fn move( n-1, viaPeg, toPeg, fromPeg )<br/>end if<br/>end fn<br/>\u00a0<br/>fn move( 4, 1, 2, 3 )<br/>print<br/>print \"Towers of Hanoi puzzle solved.\"<br/>end<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 30, "block": "<pre class=\"text highlighted_source\">Hanoi\u00a0:= function(n)<br/>\tlocal move;<br/>\tmove\u00a0:= function(n, a, b, c) # from, through, to<br/>\t\tif n = 1 then<br/>\t\t\tPrint(a, \" -&gt; \", c, \"\\n\");<br/>\t\telse<br/>\t\t\tmove(n - 1, a, c, b);<br/>\t\t\tmove(1, a, b, c);<br/>\t\t\tmove(n - 1, b, a, c);<br/>\t\tfi;<br/>\tend;<br/>\tmove(n, \"A\", \"B\", \"C\");<br/>end;<br/>\u00a0<br/>Hanoi(1);<br/># A -&gt; C<br/>\u00a0<br/>Hanoi(2);<br/># A -&gt; B<br/># A -&gt; C<br/># B -&gt; C<br/>\u00a0<br/>Hanoi(3);<br/># A -&gt; C<br/># A -&gt; B<br/># C -&gt; B<br/># A -&gt; C<br/># B -&gt; A<br/># B -&gt; C<br/># A -&gt; C</pre>"}, {"lang": "Go", "loc": 42, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// a towers of hanoi solver just has one method, play</span><br/><span class=\"kw1\">type</span> solver <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    play<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> t solver    <span class=\"co1\">// declare variable of solver type</span><br/>    t <span class=\"sy2\">=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>towers<span class=\"sy1\">)</span> <span class=\"co1\">// type towers must satisfy solver interface</span><br/>    t<span class=\"sy3\">.</span>play<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// towers is example of type satisfying solver interface</span><br/><span class=\"kw1\">type</span> towers <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// an empty struct.  some other solver might fill this with some</span><br/>    <span class=\"co1\">// data representation, maybe for algorithm validation, or maybe for</span><br/>    <span class=\"co1\">// visualization.</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// play is sole method required to implement solver type</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>towers<span class=\"sy1\">)</span> play<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// drive recursive solution, per task description</span><br/>    t<span class=\"sy3\">.</span>moveN<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// recursive algorithm</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>towers<span class=\"sy1\">)</span> moveN<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> to<span class=\"sy1\">,</span> via <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        t<span class=\"sy3\">.</span>moveN<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> via<span class=\"sy1\">,</span> to<span class=\"sy1\">)</span><br/>        t<span class=\"sy3\">.</span>move1<span class=\"sy1\">(</span>from<span class=\"sy1\">,</span> to<span class=\"sy1\">)</span><br/>        t<span class=\"sy3\">.</span>moveN<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> via<span class=\"sy1\">,</span> to<span class=\"sy1\">,</span> from<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// example function prints actions to screen.</span><br/><span class=\"co1\">// enhance with validation or visualization as needed.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>towers<span class=\"sy1\">)</span> move1<span class=\"sy1\">(</span>from<span class=\"sy1\">,</span> to <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"move disk from rod\"</span><span class=\"sy1\">,</span> from<span class=\"sy1\">,</span> <span class=\"st0\">\"to rod\"</span><span class=\"sy1\">,</span> to<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 17, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tail <span class=\"sy0\">=</span> <span class=\"br0\">{</span> list, n <span class=\"sy0\">-&gt;</span>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> m <span class=\"sy0\">=</span> list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> list.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"br0\">[</span>m <span class=\"sy0\">-</span> n, <span class=\"nu0\">0</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>,m<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> STACK <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A:<span class=\"br0\">[</span><span class=\"br0\">]</span>,B:<span class=\"br0\">[</span><span class=\"br0\">]</span>,C:<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20asImmutable\"><span class=\"kw5\">asImmutable</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> report <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <span class=\"sy0\">-&gt;</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> check <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <span class=\"sy0\">-&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> moveRing <span class=\"sy0\">=</span> <span class=\"br0\">{</span> from, to <span class=\"sy0\">-&gt;</span>  to <span class=\"sy0\">&lt;&lt;</span> from.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> report<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> check<span class=\"br0\">(</span>to<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> moveStack<br/>moveStack <span class=\"sy0\">=</span> <span class=\"br0\">{</span> from, to, using <span class=\"sy0\">=</span> STACK.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>it.<span class=\"me1\">is</span><span class=\"br0\">(</span>from<span class=\"br0\">)</span> <span class=\"sy0\">||</span> it.<span class=\"me1\">is</span><span class=\"br0\">(</span>to<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>from<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> from.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    moveStack<span class=\"br0\">(</span>tail<span class=\"br0\">(</span>from, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, using, to<span class=\"br0\">)</span><br/>    moveRing<span class=\"br0\">(</span>from, to<span class=\"br0\">)</span><br/>    moveStack<span class=\"br0\">(</span>tail<span class=\"br0\">(</span>using, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, to, from<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\">hanoi <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>hanoi <span class=\"nu0\">0</span> <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>hanoi n a b c <span class=\"sy0\">=</span> hanoi <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> a c b <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span> hanoi <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> c b a</pre>"}, {"lang": "HolyC", "loc": 9, "block": "<pre class=\"text highlighted_source\">U0 Move(U8 n, U8 from, U8 to, U8 via) {<br/>  if (n &gt; 0) {<br/>    Move(n - 1, from, via, to);<br/>    Print(\"Move disk from pole\u00a0%d to pole\u00a0%d\\n\", from, to);<br/>    Move(n - 1, via, to, from);<br/>  }<br/>}<br/>\u00a0<br/>Move(4, 1, 2, 3);</pre>"}, {"lang": "Icon and Unicon", "loc": 23, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>hanoi<span class=\"br0\">(</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: hanoi n<span class=\"es0\">\\n</span><span class=\"es0\">\\r</span>Where n is the number of disks to move.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#procedure hanoi(n:integer, needle1:1, needle2:2)   # unicon shorthand for icon code 1,2,3 below</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> hanoi<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> needle1<span class=\"sy1\">,</span> needle2<span class=\"br0\">)</span>   <span class=\"co1\">#: solve towers of hanoi by moving  n disks from needle 1 to needle2 via other</span><br/><span class=\"kw2\">local</span> other<br/>\u00a0<br/>n <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span><span class=\"nu0\">101</span><span class=\"br0\">)</span>       <span class=\"co1\"># 1 ensure integer (this also ensures it's positive too)</span><br/><span class=\"sy1\">/</span>needle1 <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>                             <span class=\"co1\"># 2 default</span><br/><span class=\"sy1\">/</span>needle2 <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span>                             <span class=\"co1\"># 3 default</span><br/>\u00a0<br/><span class=\"kw1\">if</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from \"</span><span class=\"sy1\">,</span> needle1<span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span> needle2<span class=\"br0\">)</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>   other <span class=\"sy1\">:=</span> <span class=\"nu0\">6</span> <span class=\"sy1\">-</span> needle1 <span class=\"sy1\">-</span> needle2         <span class=\"co1\"># clever but somewhat un-iconish way to find other</span><br/>   hanoi<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> needle1<span class=\"sy1\">,</span> other<span class=\"br0\">)</span>             <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from \"</span><span class=\"sy1\">,</span> needle1<span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span> needle2<span class=\"br0\">)</span><br/>   hanoi<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> other<span class=\"sy1\">,</span> needle2<span class=\"br0\">)</span>            <br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Inform 7", "loc": 25, "block": "<pre class=\"text highlighted_source\">Hanoi is a room.<br/>\u00a0<br/>A post is a kind of supporter. A post is always fixed in place.<br/>\u00a0<br/>The left post, the middle post, and the right post are posts in Hanoi.<br/>\u00a0<br/>A disk is a kind of supporter.<br/>The red disk is a disk on the left post.<br/>The orange disk is a disk on the red disk.<br/>The yellow disk is a disk on the orange disk.<br/>The green disk is a disk on the yellow disk.<br/>\u00a0<br/>Definition: a disk is topmost if nothing is on it.<br/>\u00a0<br/>When play begins:<br/>\tmove 4 disks from the left post to the right post via the middle post.<br/>\u00a0<br/>To move (N - number) disk/disks from (FP - post) to (TP - post) via (VP - post):<br/>\tif N &gt; 0:<br/>\t\tmove N - 1 disks from FP to VP via TP;<br/>\t\tsay \"Moving a disk from [FP] to [TP]...\";<br/>\t\tlet D be a random topmost disk enclosed by FP;<br/>\t\tif a topmost disk (called TD) is enclosed by TP, now D is on TD;<br/>\t\totherwise now D is on TP;<br/>\t\tmove N - 1 disks from VP to TP via FP.</pre>"}, {"lang": "Io", "loc": 9, "block": "<pre class=\"io highlighted_source\">hanoi\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>n, from, to, via,<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Move from \"</span>, from, <span class=\"st0\">\" to \"</span>, to<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><br/>    hanoi<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, from, via, to  <span class=\"br0\">)</span><br/>    hanoi<span class=\"br0\">(</span><span class=\"nu0\">1</span>    , from, to , via <span class=\"br0\">)</span><br/>    hanoi<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, via , to , from<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Ioke", "loc": 13, "block": "<pre class=\"text highlighted_source\"> = method(n, f, u, t,<br/>  if(n &lt; 2,<br/>    \"#{f} --&gt; #{t}\" println,<br/>\u00a0<br/>    H(n - 1, f, t, u)<br/>    \"#{f} --&gt; #{t}\" println<br/>    H(n - 1, u, f, t)<br/>  )<br/>)<br/>\u00a0<br/>hanoi = method(n,<br/>  H(n, 1, 2, 3)<br/>)</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">H =: <a class=\"__cf_email__\" data-cfemail=\"563f7816\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,&amp;<span class=\"nu0\">2</span> ` <span class=\"sy0\">((</span>{&amp;<span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">0</span> <span class=\"nu0\">2</span>,{&amp;<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"sy0\">)</span>@$:@&lt;:<span class=\"sy0\">)</span> @. *    <span class=\"co1\">NB. tacit using anonymous recursion</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> from, <span class=\"kw4\">int</span> to, <span class=\"kw4\">int</span> via<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span> <span class=\"sy0\">+</span> from <span class=\"sy0\">+</span> <span class=\"st0\">\" to pole \"</span> <span class=\"sy0\">+</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, from, to, via<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from \"</span> <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> <span class=\"st0\">\" to \"</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>move<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 7, "block": "<pre class=\"text highlighted_source\">DEFINE hanoi == [[rolldown] infra] dip <br/>                [ [ [null] [pop pop] ] <br/>                  [ [dup2 [[rotate] infra] dip pred] <br/>                    [ [dup rest put] dip <br/>                      [[swap] infra] dip pred ] <br/>                    [] ] ] <br/>                condnestrec.</pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\"># n is the number of disks to move from From to To<br/>def move(n; From; To; Via):<br/>  if n &gt; 0 then<br/>     # move all but the largest at From to Via (according to the rules):<br/>     move(n-1; From; Via; To),<br/>     # ... so the largest disk at From is now free to move to its final destination:<br/>     \"Move disk from \\(From) to \\(To)\",<br/>     # Move the remaining disks at Via to To:<br/>     move(n-1; Via; To; From)<br/>  else empty<br/>  end;</pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function solve(n::Integer, from::Integer, to::Integer, via::Integer)<br/>  if n == 1<br/>    println(\"Move disk from $from to $to\")<br/>  else<br/>    solve(n - 1, from, via, to)<br/>    solve(1, from, to, via)<br/>    solve(n - 1, via, to, from)<br/>  end<br/>end<br/>\u00a0<br/>solve(4, 1, 2, 3)<br/>\u00a0</pre>"}, {"lang": "K", "loc": 17, "block": "<pre class=\"text highlighted_source\">   h:{[n;a;b;c]if[n&gt;0;_f[n-1;a;c;b];`0:,//$($n,\":\",$a,\"-&gt;\",$b,\"\\n\");_f[n-1;c;b;a]]}<br/>   h[4;1;2;3]<br/>1:1-&gt;3<br/>2:1-&gt;2<br/>1:3-&gt;2<br/>3:1-&gt;3<br/>1:2-&gt;1<br/>2:2-&gt;3<br/>1:1-&gt;3<br/>4:1-&gt;2<br/>1:3-&gt;2<br/>2:3-&gt;1<br/>1:2-&gt;1<br/>3:3-&gt;2<br/>1:1-&gt;3<br/>2:1-&gt;2<br/>1:3-&gt;2</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Hanoi<span class=\"br0\">(</span>disks<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> moves <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Towers of Hanoi with $disks disks:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        move<span class=\"br0\">(</span>disks, <span class=\"st0\">'L'</span>, <span class=\"st0\">'C'</span>, <span class=\"st0\">'R'</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Completed in $moves moves<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun move<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, from<span class=\"sy0\">:</span> Char, to<span class=\"sy0\">:</span> Char, via<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span><br/>            moves++<br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Move disk $n from $from to $to\"</span><span class=\"br0\">)</span><br/>            move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Hanoi<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    Hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "lambdatalk", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">{</span>def move<br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n\u00a0:from\u00a0:to\u00a0:via<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;=</span>\u00a0:n <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>   then <span class=\"sy0\">&gt;</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span>move <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span>\u00a0:from\u00a0:via\u00a0:to<span class=\"br0\">}</span><br/>         move disk from\u00a0:from to\u00a0:to <span class=\"br0\">{</span>br<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>move <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span>\u00a0:via\u00a0:to\u00a0:from<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">-&gt;</span> move<br/><span class=\"br0\">{</span>move <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">3</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">2</span> to <span class=\"nu0\">1</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">2</span> to <span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">3</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">3</span> to <span class=\"nu0\">1</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">2</span> to <span class=\"nu0\">1</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">3</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">1</span> to <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> move disk from <span class=\"nu0\">3</span> to <span class=\"nu0\">2</span><br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 14, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>define towermove(<br/>\tdisks::integer,<br/>\ta,b,c<br/>) =&gt; {<br/>\tif(#disks &gt; 0) =&gt; {<br/>\t\ttowermove(#disks - 1, #a, #c, #b )<br/>\t\tstdoutnl(\"Move disk from \" + #a + \" to \" + #c)<br/>\t\ttowermove(#disks - 1, #b, #a, #c )<br/>\t}<br/>}<br/>\u00a0<br/>towermove((integer($argv -&gt; second || 3)), \"A\", \"B\", \"C\")</pre>"}, {"lang": "Liberty BASIC", "loc": 19, "block": "<pre class=\"lb highlighted_source\">   source$ <span class=\"sy0\">=</span><span class=\"st0\">\"A\"</span><br/>    via$    <span class=\"sy0\">=</span><span class=\"st0\">\"B\"</span><br/>    target$ <span class=\"sy0\">=</span><span class=\"st0\">\"C\"</span><br/>\u00a0<br/>    <span class=\"kw1\">call</span> hanoi <span class=\"nu0\">4</span><span class=\"sy0\">,</span> source$<span class=\"sy0\">,</span> target$<span class=\"sy0\">,</span> via$        <span class=\"co1\">'   ie call procedure to move legally 4 disks from peg A to peg C via peg B</span><br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">sub</span> hanoi numDisks<span class=\"sy0\">,</span> source$<span class=\"sy0\">,</span> target$<span class=\"sy0\">,</span> via$<br/>        <span class=\"kw1\">if</span> numDisks <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">call</span> hanoi numDisks <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> source$<span class=\"sy0\">,</span> via$<span class=\"sy0\">,</span> target$<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\" Move disk \"</span>; numDisks; <span class=\"st0\">\" from peg \"</span>; source$; <span class=\"st0\">\" to peg \"</span>; target$<br/>            <span class=\"kw1\">call</span> hanoi numDisks <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> via$<span class=\"sy0\">,</span> target$<span class=\"sy0\">,</span> source$<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span></pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">on hanoi (n, a, b, c)<br/>  if n &gt; 0 then<br/>    hanoi(n-1, a, c, b)<br/>    put \"Move disk from\" &amp;&amp; a &amp;&amp; \"to\" &amp;&amp; c<br/>    hanoi(n-1, b, a, c)<br/>  end if<br/>end</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to move\u00a0:n\u00a0:from\u00a0:to\u00a0:via<br/>  if\u00a0:n = 0 [stop]<br/>  move\u00a0:n-1\u00a0:from\u00a0:via\u00a0:to<br/>  (print [Move disk from]\u00a0:from [to]\u00a0:to)<br/>  move\u00a0:n-1\u00a0:via\u00a0:to\u00a0:from<br/>end<br/>move 4 \"left \"middle \"right</pre>"}, {"lang": "Logtalk", "loc": 29, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(hanoi).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(run(<span class=\"sy1\">+</span>integer), one).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">1</span>, [<br/>        comment <span class=\"kw5\">is</span> <span class=\"st0\">'Solves the towers of Hanoi problem for the specified number of disks.'</span>,<br/>        argnames <span class=\"kw5\">is</span> [<span class=\"st0\">'Disks'</span>]]).<br/>\u00a0<br/>    run(<span class=\"re0\">Disks</span>) <span class=\"sy2\">:-</span><br/>        move(<span class=\"re0\">Disks</span>, left, middle, right).<br/>\u00a0<br/>    move(<span class=\"nu0\">1</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">_</span>, <span class=\"re0\">Right</span>)<span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">!</span>,<br/>        report(<span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>).<br/>    move(<span class=\"re0\">Disks</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Aux</span>, <span class=\"re0\">Right</span>)<span class=\"sy2\">:-</span><br/>        <span class=\"re0\">Disks2</span> <span class=\"kw5\">is</span> <span class=\"re0\">Disks</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span>,<br/>        move(<span class=\"re0\">Disks2</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>, <span class=\"re0\">Aux</span>),<br/>        report(<span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>),<br/>        move(<span class=\"re0\">Disks2</span>, <span class=\"re0\">Aux</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>).<br/>\u00a0<br/>    report(<span class=\"re0\">Pole1</span>, <span class=\"re0\">Pole2</span>)<span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Move a disk from '</span>),<br/>        <span class=\"kw4\">writeq</span>(<span class=\"re0\">Pole1</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">' to '</span>),<br/>        <span class=\"kw4\">writeq</span>(<span class=\"re0\">Pole2</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'.'</span>),<br/>        <span class=\"kw5\">nl</span>.<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "LOLCODE", "loc": 22, "block": "<pre class=\"lolcode highlighted_source\">\u00a0<br/><span class=\"kw1\">HAI</span><br/>\u00a0<br/>HOW DUZ I HANOI <span class=\"kw4\">YR</span> N <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> SRC <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> DST <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> VIA<br/>    <span class=\"co1\">BTW VISIBLE SMOOSH \"HANOI N=\" N \" SRC=\" SRC \" DST=\" DST \" VIA=\" VIA MKAY</span><br/>    <span class=\"kw2\">BOTH SAEM</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>        YA RLY<br/>            <span class=\"co1\">BTW VISIBLE \"Done.\"</span><br/>            <span class=\"kw1\">GTFO</span><br/>        NO WAI<br/>            <span class=\"kw1\">I HAS A</span> LOWER <span class=\"kw1\">ITZ</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/>            HANOI DST VIA SRC LOWER<br/>            <span class=\"kw1\">VISIBLE</span> <span class=\"kw1\">SMOOSH</span> <span class=\"st0\">\"Move disc \"</span> N <span class=\"st0\">\" from \"</span> SRC <span class=\"sy0\">...</span> <br/>            <span class=\"st0\">\" to \"</span> DST <span class=\"kw2\">MKAY</span><br/>            HANOI SRC DST VIA LOWER<br/>    OIC<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HANOI <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"co1\">BTW requires reversed arguments?</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> src<span class=\"sy0\">,</span> dst<span class=\"sy0\">,</span> via<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> src<span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> dst<span class=\"br0\">)</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span>src<span class=\"sy0\">,</span> <span class=\"st0\">'to'</span><span class=\"sy0\">,</span> dst<span class=\"br0\">)</span><br/>        move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> dst<span class=\"sy0\">,</span> src<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>move<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Hanoi\u00a0:= proc(n::posint,a,b,c)<br/>   if n = 1 then<br/>       printf(\"Move disk from tower\u00a0%a to tower\u00a0%a.\\n\",a,c);<br/>   else<br/>       Hanoi(n-1,a,c,b);<br/>       Hanoi(1,a,b,c);<br/>       Hanoi(n-1,b,a,c);<br/>    fi;<br/>end:<br/>\u00a0<br/>printf(\"Moving 2 disks from tower A to tower C using tower B.\\n\");<br/>Hanoi(2,A,B,C);<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">Hanoi[0, from_, to_, via_]\u00a0:= Null  <br/>Hanoi[n_Integer, from_, to_, via_]\u00a0:=<br/>  (Hanoi[n-1, from, via, to];<br/>   Print[\"Move disk from pole \", from, \" to \", to, \".\"];<br/>   Hanoi[n-1, via, from, to])</pre>"}, {"lang": "MATLAB", "loc": 7, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> towerOfHanoi<span class=\"br0\">(</span>n,A,C,B<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n~=<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        towerOfHanoi<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span>,A,B,C<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Move plate\u00a0%d from tower\u00a0%d to tower\u00a0%d'</span>,<span class=\"br0\">[</span>n A C<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        towerOfHanoi<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span>,B,C,A<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "MIPS Assembly", "loc": 103, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Towers of Hanoi<br/># MIPS assembly implementation (tested with MARS)<br/># Source: https://stackoverflow.com/questions/50382420/hanoi-towers-recursive-solution-using-mips/50383530#50383530<br/>\u00a0<br/>.data<br/>prompt: .asciiz \"Enter a number: \"<br/>part1: .asciiz \"\\nMove disk \"<br/>part2: .asciiz \" from rod \"<br/>part3: .asciiz \" to rod \"<br/>\u00a0<br/>.text<br/>.globl main<br/>main:<br/>    li $v0,  4          # print string<br/>    la $a0,  prompt<br/>    syscall<br/>    li $v0,  5          # read integer<br/>    syscall<br/>\u00a0<br/>    # parameters for the routine<br/>    add $a0, $v0, $zero # move to $a0<br/>    li $a1, 'A'<br/>    li $a2, 'B'<br/>    li $a3, 'C'<br/>\u00a0<br/>    jal hanoi           # call hanoi routine<br/>\u00a0<br/>    li $v0, 10          # exit<br/>    syscall<br/>\u00a0<br/>hanoi:<br/>\u00a0<br/>    #save in stack<br/>    addi $sp, $sp, -20 <br/>    sw   $ra, 0($sp)<br/>    sw   $s0, 4($sp)<br/>    sw   $s1, 8($sp)<br/>    sw   $s2, 12($sp)<br/>    sw   $s3, 16($sp)<br/>\u00a0<br/>    add $s0, $a0, $zero<br/>    add $s1, $a1, $zero<br/>    add $s2, $a2, $zero<br/>    add $s3, $a3, $zero<br/>\u00a0<br/>    addi $t1, $zero, 1<br/>    beq $s0, $t1, output<br/>\u00a0<br/>    recur1:<br/>\u00a0<br/>        addi $a0, $s0, -1<br/>        add $a1, $s1, $zero<br/>        add $a2, $s3, $zero<br/>        add $a3, $s2, $zero<br/>        jal hanoi<br/>\u00a0<br/>        j output<br/>\u00a0<br/>    recur2:<br/>\u00a0<br/>        addi $a0, $s0, -1<br/>        add $a1, $s3, $zero<br/>        add $a2, $s2, $zero<br/>        add $a3, $s1, $zero<br/>        jal hanoi<br/>\u00a0<br/>    exithanoi:<br/>\u00a0<br/>        lw   $ra, 0($sp)        # restore registers from stack<br/>        lw   $s0, 4($sp)<br/>        lw   $s1, 8($sp)<br/>        lw   $s2, 12($sp)<br/>        lw   $s3, 16($sp)<br/>\u00a0<br/>        addi $sp, $sp, 20       # restore stack pointer<br/>\u00a0<br/>        jr $ra<br/>\u00a0<br/>    output:<br/>\u00a0<br/>        li $v0,  4              # print string<br/>        la $a0,  part1<br/>        syscall<br/>        li $v0,  1              # print integer<br/>        add $a0, $s0, $zero<br/>        syscall<br/>        li $v0,  4              # print string<br/>        la $a0,  part2<br/>        syscall<br/>        li $v0,  11             # print character<br/>        add $a0, $s1, $zero<br/>        syscall<br/>        li $v0,  4              # print string<br/>        la $a0,  part3<br/>        syscall<br/>        li $v0,  11             # print character<br/>        add $a0, $s2, $zero<br/>        syscall<br/>\u00a0<br/>        beq $s0, $t1, exithanoi<br/>        j recur2<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 9, "block": "<pre class=\"text highlighted_source\">^\t2\tx^y\t\u041f0\t&lt;-&gt;\t2\t/\t{x}\tx#0\t16<br/>3\t\u041f3\t2\t\u041f2\t\u0411\u041f\t20\t3\t\u041f2\t2\t\u041f3<br/>1\t\u041f1\t\u041f\u041f\t25\t\u041a\u041f\u041fB\t\u041f\u041f\t28\t\u041a\u041f\u041fA\t\u041f\u041f\t31<br/>\u041a\u041f\u041fB\t\u041f\u041f\t34\t\u041a\u041f\u041fA\t\u0418\u041f1\t\u0418\u041f3\t\u041a\u041f\u041fC\t\u0418\u041f1\t\u0418\u041f2\t\u041a\u041f\u041fC<br/>\u0418\u041f3\t\u0418\u041f2\t\u041a\u041f\u041fC\t\u0418\u041f1\t\u0418\u041f3\t\u041a\u041f\u041fC\t\u0418\u041f2\t\u0418\u041f1\t\u041a\u041f\u041fC\t\u0418\u041f2<br/>\u0418\u041f3\t\u041a\u041f\u041fC\t\u0418\u041f1\t\u0418\u041f3\t\u041a\u041f\u041fC\t\u0412/\u041e\t\u0418\u041f1\t\u0418\u041f2\t\u0411\u041f\t62<br/>\u0418\u041f2\t\u0418\u041f1\t\u041a\u041f\u041fC\t\u0418\u041f1\t\u0418\u041f2\t\u0418\u041f3\t\u041f1\t-&gt;\t\u041f3\t-&gt;<br/>\u041f2\t\u0412/\u041e\t1\t0\t/\t+\t\u0421/\u041f\t\u041a\u0418\u041f0\t\u0418\u041f0\tx=0<br/>89\t3\t3\t1\t\u0418\u041d\u0412\t^\t\u0412\u041f\t2\t\u0421/\u041f\t\u0412/\u041e</pre>"}, {"lang": "Modula-2", "loc": 20, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Towers;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>from<span class=\"sy0\">,</span>to<span class=\"sy0\">,</span>via <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        Move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"br0\">)</span>;<br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"Move disk\u00a0%i from pole\u00a0%i to pole\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>        Move<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> from<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Move;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Move<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Towers.</pre>"}, {"lang": "Modula-3", "loc": 17, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Hanoi <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> IO <span class=\"kw1\">IMPORT</span> Put;<br/><span class=\"kw1\">FROM</span> Fmt <span class=\"kw1\">IMPORT</span> Int;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> doHanoi<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> using<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      doHanoi<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> using<span class=\"sy0\">,</span> to<span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"move \"</span> &amp; Int<span class=\"br0\">(</span>from<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" --&gt; \"</span> &amp; Int<span class=\"br0\">(</span>to<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>      doHanoi<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> using<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> from<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> doHanoi;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  doHanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Hanoi.</pre>"}, {"lang": "Monte", "loc": 7, "block": "<pre class=\"text highlighted_source\">def move(n, fromPeg, toPeg, viaPeg):<br/>    if (n &gt; 0):<br/>        move(n.previous(), fromPeg, viaPeg, toPeg)<br/>        traceln(`Move disk $n from $fromPeg to $toPeg`)<br/>        move(n.previous(), viaPeg, toPeg, fromPeg)<br/>\u00a0<br/>move(3, \"left\", \"right\", \"middle\")</pre>"}, {"lang": "Nemerle", "loc": 20, "block": "<pre class=\"text highlighted_source\">using System; <br/>using System.Console;<br/>\u00a0<br/>module Towers<br/>{<br/>    Hanoi(n\u00a0: int, from = 1, to = 3, via = 2)\u00a0: void<br/>    {<br/>        when (n &gt; 0)<br/>        {<br/>            Hanoi(n - 1, from, via, to);<br/>            WriteLine(\"Move disk from peg {0} to peg {1}\", from, to);<br/>            Hanoi(n - 1, via, to, from);<br/>        }<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        Hanoi(4)<br/>    } <br/>}</pre>"}, {"lang": "NetRexx", "loc": 28, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg discs .<br/>  <span class=\"kw1\">if</span> discs = <span class=\"st0\">''</span>, discs <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> discs = <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Minimum moves to solution:'</span> <span class=\"nu0\">2</span> <span class=\"sy0\">**</span> discs - <span class=\"nu0\">1</span><br/>  moves = move<span class=\"br0\">(</span>discs<span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Solved in'</span> moves <span class=\"st0\">'moves.'</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method move<span class=\"br0\">(</span>discs = int <span class=\"nu0\">4</span>, towerFrom = int <span class=\"nu0\">1</span>, towerTo = int <span class=\"nu0\">2</span>, towerVia = int <span class=\"nu0\">3</span>, moves = int <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">if</span> discs == <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    moves = moves + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Move disc from peg'</span> towerFrom <span class=\"st0\">'to peg'</span> towerTo <span class=\"st0\">'- Move No:'</span> Rexx<span class=\"br0\">(</span>moves<span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>    moves = move<span class=\"br0\">(</span>discs - <span class=\"nu0\">1</span>, towerFrom, towerVia, towerTo, moves<span class=\"br0\">)</span><br/>    moves = move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, towerFrom, towerTo, towerVia, moves<span class=\"br0\">)</span><br/>    moves = move<span class=\"br0\">(</span>discs - <span class=\"nu0\">1</span>, towerVia, towerTo, towerFrom, moves<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> moves<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define <span class=\"br0\">(</span>move n from to via<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> from via to<br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"move disk from pole \"</span> from <span class=\"st0\">\" to pole \"</span> to <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>move <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> via to from<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>move <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"python highlighted_source\">proc hanoi<span class=\"br0\">(</span>disks: <span class=\"kw2\">int</span><span class=\"sy0\">,</span> fromTower: <span class=\"kw3\">string</span><span class=\"sy0\">,</span> toTower: <span class=\"kw3\">string</span><span class=\"sy0\">,</span> viaTower: <span class=\"kw3\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> disks <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>    hanoi<span class=\"br0\">(</span>disks - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> fromTower<span class=\"sy0\">,</span> viaTower<span class=\"sy0\">,</span> toTower<span class=\"br0\">)</span><br/>    echo<span class=\"br0\">(</span><span class=\"st0\">\"Move disk \"</span><span class=\"sy0\">,</span> disks<span class=\"sy0\">,</span> <span class=\"st0\">\" from \"</span><span class=\"sy0\">,</span> fromTower<span class=\"sy0\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy0\">,</span> toTower<span class=\"br0\">)</span><br/>    hanoi<span class=\"br0\">(</span>disks - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> viaTower<span class=\"sy0\">,</span> toTower<span class=\"sy0\">,</span> fromTower<span class=\"br0\">)</span><br/>\u00a0<br/>hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Objeck", "loc": 16, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Hanoi <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Move<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span><span class=\"sy0\">:</span> Move<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><span class=\"kw2\">Int</span><span class=\"sy0\">,</span> f<span class=\"sy0\">:</span><span class=\"kw2\">Int</span><span class=\"sy0\">,</span> t<span class=\"sy0\">:</span><span class=\"kw2\">Int</span><span class=\"sy0\">,</span> v<span class=\"sy0\">:</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"Move disk from pole {$f} to pole {$t}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      Move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Move<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 12, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/NSObject.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> TowersOfHanoi<span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> pegFrom;<br/>\t<span class=\"kw4\">int</span> pegTo;<br/>\t<span class=\"kw4\">int</span> pegVia;<br/>\t<span class=\"kw4\">int</span> numDisks;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> setPegFrom<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> from andSetPegTo<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> to andSetPegVia<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> via andSetNumDisks<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> disks;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> movePegFrom<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> from andMovePegTo<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> to andMovePegVia<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> via andWithNumDisks<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> disks;<br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 9, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> hanoi n a b c <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>    hanoi <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> a c b<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Move disk from pole\u00a0%d to pole\u00a0%d\\n\"</span> a b<span class=\"sy0\">;</span><br/>    hanoi <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> c b a<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  hanoi <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "Octave", "loc": 11, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> hanoimove<span class=\"br0\">(</span>ndisks<span class=\"sy5\">,</span> from<span class=\"sy5\">,</span> to<span class=\"sy5\">,</span> via<span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> ndisks <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"Move disk from pole\u00a0%d to pole\u00a0%d\\n\"</span><span class=\"sy5\">,</span> from<span class=\"sy5\">,</span> to<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    hanoimove<span class=\"br0\">(</span>ndisks<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> from<span class=\"sy5\">,</span> via<span class=\"sy5\">,</span> to<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    hanoimove<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> from<span class=\"sy5\">,</span> to<span class=\"sy5\">,</span> via<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    hanoimove<span class=\"br0\">(</span>ndisks<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> via<span class=\"sy5\">,</span> to<span class=\"sy5\">,</span> from<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>hanoimove<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: move(n, from, to, via)<br/>   n 0 &gt; ifTrue: [<br/>      move(n 1-, from, via, to)<br/>      System.Out \"Move disk from \" &lt;&lt; from &lt;&lt; \" to \" &lt;&lt; to &lt;&lt; cr<br/>      move(n 1-, via, to, from)<br/>      ]\u00a0;<br/>\u00a0<br/>5 $left $middle $right) move </pre>"}, {"lang": "Oz", "loc": 10, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">TowersOfHanoi</span> N From To Via<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> N <span class=\"sy0\">&gt;</span> 0 <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>TowersOfHanoi N<span class=\"sy0\">-</span>1 From Via To<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Move from \"</span><span class=\"sy0\">#</span>From<span class=\"sy0\">#</span><span class=\"st0\">\" to \"</span><span class=\"sy0\">#</span>To<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>TowersOfHanoi N<span class=\"sy0\">-</span>1 Via To From<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>TowersOfHanoi 4 left middle right<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\"><span class=\"co1\">\\\\ Towers of Hanoi</span><br/><span class=\"co1\">\\\\ 8/19/2016 aev</span><br/><span class=\"co1\">\\\\ Where: n - number of disks, sp - start pole, ep - end pole.</span><br/>HanoiTowers<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>sp<span class=\"sy0\">,</span>ep<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">!=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <br/>    HanoiTowers<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>sp<span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">-</span>sp<span class=\"sy0\">-</span>ep<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk \"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\" from pole \"</span><span class=\"sy0\">,</span> sp<span class=\"sy0\">,</span><span class=\"st0\">\" to pole \"</span><span class=\"sy0\">,</span> ep<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    HanoiTowers<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">-</span>sp<span class=\"sy0\">-</span>ep<span class=\"sy0\">,</span>ep<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ Testing n=3:</span><br/>HanoiTowers<span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 18, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Hanoi<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  TPole <span class=\"sy3\">=</span> <span class=\"br0\">(</span>tpLeft<span class=\"sy1\">,</span> tpCenter<span class=\"sy1\">,</span> tpRight<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  strPole<span class=\"sy1\">:</span><span class=\"kw4\">array</span><span class=\"br0\">[</span>TPole<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"st0\">'left'</span><span class=\"sy1\">,</span><span class=\"st0\">'center'</span><span class=\"sy1\">,</span><span class=\"st0\">'right'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">procedure</span> MoveStack <span class=\"br0\">(</span><span class=\"kw1\">const</span> Ndisks <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> <span class=\"kw1\">const</span> Origin<span class=\"sy1\">,</span>Destination<span class=\"sy1\">,</span>Auxiliary<span class=\"sy1\">:</span>TPole<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> Ndisks &gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>     MoveStack<span class=\"br0\">(</span>Ndisks <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> Origin<span class=\"sy1\">,</span>Auxiliary<span class=\"sy1\">,</span> Destination <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>     <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Move disk '</span><span class=\"sy1\">,</span>Ndisks <span class=\"sy1\">,</span><span class=\"st0\">' from '</span><span class=\"sy1\">,</span>strPole<span class=\"br0\">[</span>Origin<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">' to '</span><span class=\"sy1\">,</span>strPole<span class=\"br0\">[</span>Destination<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>     MoveStack<span class=\"br0\">(</span>Ndisks <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> Auxiliary<span class=\"sy1\">,</span> Destination<span class=\"sy1\">,</span> origin<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> MoveStack<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span>tpLeft<span class=\"sy1\">,</span>tpCenter<span class=\"sy1\">,</span>tpRight<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> hanoi <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Move disk from pole $from to pole $to.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        hanoi<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        hanoi<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        hanoi<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$via</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">subset</span> Peg <span class=\"kw1\">of</span> Int <span class=\"kw1\">where</span> <span class=\"nu0\">1</span><span class=\"sy0\">|</span><span class=\"nu0\">2</span><span class=\"sy0\">|</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> hanoi <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>      Peg <span class=\"re0\">$a</span><span class=\"sy0\">,</span>     Peg <span class=\"re0\">$b</span><span class=\"sy0\">,</span>     Peg <span class=\"re0\">$c</span><span class=\"br0\">)</span>     <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> hanoi <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> Peg <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> Peg <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> Peg <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hanoi <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Move $a to $b.\"</span><span class=\"sy0\">;</span><br/>    hanoi <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">constant poles = {\"left\",\"middle\",\"right\"}<br/>enum               left,  middle,  right<br/>\u00a0<br/>sequence disks<br/>integer moves<br/>procedure showpegs(integer src, integer dest)<br/>string desc = sprintf(\"%s to\u00a0%s:\",{poles[src],poles[dest]})<br/>    disks[dest] &amp;= disks[src][$]<br/>    disks[src] = disks[src][1..$-1]<br/>    for i=1 to length(disks) do<br/>        printf(1,\"%-16s |\u00a0%s\\n\",{desc,join(sq_add(disks[i],'0'),' ')})<br/>        desc = \"\"<br/>    end for<br/>    printf(1,\"\\n\")<br/>    moves += 1<br/>end procedure<br/>\u00a0<br/>procedure hanoir(integer n, src=left, dest=right, via=middle)<br/>    if n&gt;0 then<br/>        hanoir(n-1, src, via, dest)<br/>        showpegs(src,dest)<br/>        hanoir(n-1, via, dest, src)<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure hanoi(integer n)<br/>    disks = {reverse(tagset(n)),{},{}}<br/>    moves = 0<br/>    hanoir(n)<br/>    printf(1,\"completed in\u00a0%d moves\\n\",{moves})<br/>end procedure<br/>\u00a0<br/>hanoi(3)</pre>"}, {"lang": "PHL", "loc": 16, "block": "<pre class=\"text highlighted_source\">module hanoi;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>@Void move(@Integer n, @Integer from, @Integer to, @Integer via) [<br/>\tif (n &gt; 0) {<br/>\t\tmove(n - 1, from, via, to);<br/>\t\tprintf(\"Move disk from pole\u00a0%d to pole\u00a0%d\\n\", from, to);<br/>\t\tmove(n - 1, via, to, from);<br/>\t}<br/>]<br/>\u00a0<br/>@Integer main [<br/>\tmove(4, 1,2,3);<br/>\treturn 0;<br/>]</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> move<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$from</span><span class=\"sy0\">,</span><span class=\"re0\">$to</span><span class=\"sy0\">,</span><span class=\"re0\">$via</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole <span class=\"es4\">$from</span> to pole <span class=\"es4\">$to</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        move<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$from</span><span class=\"sy0\">,</span><span class=\"re0\">$via</span><span class=\"sy0\">,</span><span class=\"re0\">$to</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$from</span><span class=\"sy0\">,</span><span class=\"re0\">$to</span><span class=\"sy0\">,</span><span class=\"re0\">$via</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        move<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$via</span><span class=\"sy0\">,</span><span class=\"re0\">$to</span><span class=\"sy0\">,</span><span class=\"re0\">$from</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de move (N A B C)  # Use: (move 3 'left 'center 'right)<br/>   (unless (=0 N)<br/>      (move (dec N) A C B)<br/>      (println 'Move 'disk 'from A 'to B)<br/>      (move (dec N) C B A) ) )</pre>"}, {"lang": "Pop11", "loc": 9, "block": "<pre class=\"text highlighted_source\">define hanoi(n, src, dst, via);<br/>if n &gt; 0 then<br/>    hanoi(n - 1, src, via, dst);<br/>    'Move disk ' &gt;&lt; n &gt;&lt; ' from ' &gt;&lt; src &gt;&lt; ' to ' &gt;&lt; dst &gt;&lt; '.' =&gt;<br/>    hanoi(n - 1, via, dst, src);<br/>endif;<br/>enddefine;<br/>\u00a0<br/>hanoi(4, \"left\", \"middle\", \"right\");</pre>"}, {"lang": "PL/I", "loc": 19, "block": "<pre class=\"pli highlighted_source\">tower<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">call</span> Move <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Move<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>ndiscs<span class=\"sy0\">,</span> <span class=\"kw1\">from</span><span class=\"sy0\">,</span> <span class=\"kw1\">to</span><span class=\"sy0\">,</span> via<span class=\"br0\">)</span> <span class=\"kw1\">recursive</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>ndiscs<span class=\"sy0\">,</span> <span class=\"kw1\">from</span><span class=\"sy0\">,</span> <span class=\"kw1\">to</span><span class=\"sy0\">,</span> via<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> ndiscs <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">'Move disc from pole '</span><span class=\"sy0\">,</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">from</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' to pole '</span><span class=\"sy0\">,</span><br/>         <span class=\"kw1\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">to</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">call</span> Move <span class=\"br0\">(</span>ndiscs<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">from</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> <span class=\"kw1\">to</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">call</span> Move <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">from</span><span class=\"sy0\">,</span> <span class=\"kw1\">to</span><span class=\"sy0\">,</span> via<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">call</span> Move <span class=\"br0\">(</span>ndiscs<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> via<span class=\"sy0\">,</span> <span class=\"kw1\">to</span><span class=\"sy0\">,</span> <span class=\"kw1\">from</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> Move<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> tower<span class=\"sy0\">;</span></pre>"}, {"lang": "Plain TeX", "loc": 19, "block": "<pre class=\"text highlighted_source\">\\newcount\\hanoidepth<br/>\\def\\hanoi#1{%<br/>  \\hanoidepth = #1<br/>  \\move abc<br/>}%<br/>\\def\\move#1#2#3{%<br/>  \\advance \\hanoidepth by -1<br/>  \\ifnum \\hanoidepth &gt; 0<br/>    \\move #1#3#2<br/>  \\fi<br/>  Move the upper disk from pole #1 to pole #3.\\par<br/>  \\ifnum \\hanoidepth &gt; 0<br/>    \\move#2#1#3<br/>  \\fi<br/>  \\advance \\hanoidepth by 1<br/>}<br/>\u00a0<br/>\\hanoi{5}<br/>\\end</pre>"}, {"lang": "PostScript", "loc": 48, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox: 0 0 300 300<br/>\u00a0<br/>/plate {<br/>        exch 100 mul 50 add exch th mul 10 add moveto<br/>        dup s mul neg 2 div 0 rmoveto<br/>        dup s mul 0 rlineto<br/>        0 th rlineto<br/>        s neg mul 0 rlineto<br/>        closepath gsave .5 setgray fill grestore 0 setgray stroke<br/>} def<br/>\u00a0<br/>/drawtower {<br/>        0 1 2 { /x exch def /y 0 def<br/>                tower x get {<br/>                        dup 0 gt { x y plate /y y 1 add def } {pop} ifelse<br/>                } forall<br/>        } for showpage<br/>} def<br/>\u00a0<br/>/apop { [ exch aload pop /last exch def ] last } def<br/>/apush{ [ 3 1 roll aload pop counttomark -1 roll ] } def<br/>\u00a0<br/>/hanoi {<br/>        0 dict begin /from /mid /to /h 5 -1 2 { -1 roll def } for<br/>        h 1 eq {        <br/>                tower from get apop tower to get apush<br/>                tower to 3 -1 roll put<br/>                tower from 3 -1 roll put<br/>                drawtower<br/>        } {     <br/>                /h h 1 sub def<br/>                from to mid h hanoi<br/>                from mid to 1 hanoi<br/>                mid from to h hanoi<br/>        } ifelse<br/>        end<br/>} def<br/>\u00a0<br/>\u00a0<br/>/n 12 def<br/>/s 90 n div def<br/>/th 180 n div def<br/>/tower [ [n 1 add -1 2 { } for ] [] [] ] def<br/>\u00a0<br/>drawtower 0 1 2 n hanoi<br/>\u00a0<br/>%%EOF</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> hanoi<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span>  <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"$a -&gt; $c\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span><span class=\"br0\">{</span>    <br/>         hanoi <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$a</span> <span class=\"re0\">$c</span> <span class=\"re0\">$b</span><br/>         hanoi <span class=\"nu0\">1</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span> <span class=\"re0\">$c</span><br/>         hanoi <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$b</span> <span class=\"re0\">$a</span> <span class=\"re0\">$c</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>hanoi <span class=\"nu0\">3</span> <span class=\"st0\">\"A\"</span> <span class=\"st0\">\"B\"</span> <span class=\"st0\">\"C\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 10, "block": "<pre class=\"prolog highlighted_source\">hanoi<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> move<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>left<span class=\"sy4\">,</span>center<span class=\"sy4\">,</span>right<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>move<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>move<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    M <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    move<span class=\"br0\">(</span>M<span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    inform<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    move<span class=\"br0\">(</span>M<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>inform<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>move<span class=\"sy4\">,</span>a<span class=\"sy4\">,</span>disk<span class=\"sy4\">,</span>from<span class=\"sy4\">,</span>the<span class=\"sy4\">,</span>X<span class=\"sy4\">,</span>pole<span class=\"sy4\">,</span>to<span class=\"sy4\">,</span>Y<span class=\"sy4\">,</span>pole<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Hanoi<span class=\"br0\">(</span>n, A.s, C.s, B.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n<br/>    Hanoi<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, A, B, C<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Move the plate from \"</span><span class=\"sy0\">+</span>A<span class=\"sy0\">+</span><span class=\"st0\">\" to \"</span><span class=\"sy0\">+</span>C<span class=\"br0\">)</span><br/>    Hanoi<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, B, C, A<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> hanoi<span class=\"br0\">(</span>ndisks<span class=\"sy0\">,</span> startPeg<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> endPeg<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> ndisks:<br/>        hanoi<span class=\"br0\">(</span>ndisks-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> startPeg<span class=\"sy0\">,</span> <span class=\"nu0\">6</span>-startPeg-endPeg<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Move disk\u00a0%d from peg\u00a0%d to peg\u00a0%d\"</span>\u00a0% <span class=\"br0\">(</span>ndisks<span class=\"sy0\">,</span> startPeg<span class=\"sy0\">,</span> endPeg<span class=\"br0\">)</span><br/>        hanoi<span class=\"br0\">(</span>ndisks-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span>-startPeg-endPeg<span class=\"sy0\">,</span> endPeg<span class=\"br0\">)</span><br/>\u00a0<br/>hanoi<span class=\"br0\">(</span>ndisks<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"rsplus highlighted_source\">hanoimove <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>ndisks, from, to, via<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span> ndisks <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"move disk from\"</span>, from, <span class=\"st0\">\"to\"</span>, to, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    hanoimove<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span><br/>    hanoimove<span class=\"br0\">(</span><span class=\"nu0\">1</span>, from, to, via<span class=\"br0\">)</span><br/>    hanoimove<span class=\"br0\">(</span>ndisks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>hanoimove<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (hanoi n a b c)<br/>  (when (&gt; n 0)<br/>    (hanoi (- n 1) a c b)<br/>    (printf \"Move ~a to ~a\\n\" a b)<br/>    (hanoi (- n 1) c b a)))<br/>(hanoi 4 'left 'middle 'right)<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 7, "block": "<pre class=\"text highlighted_source\">public void hanoi(ndisks, startPeg, endPeg){<br/>\tif(ndisks&gt;0){<br/>\t\thanoi(ndisks-1, startPeg, 6 - startPeg - endPeg);<br/>\t\tprintln(\"Move disk &lt;ndisks&gt; from peg &lt;startPeg&gt; to peg &lt;endPeg&gt;\");<br/>\t\thanoi(ndisks-1, 6 - startPeg - endPeg, endPeg);<br/>\t}<br/>}</pre>"}, {"lang": "Raven", "loc": 13, "block": "<pre class=\"text highlighted_source\">define hanoi use ndisks, startpeg, endpeg<br/>   ndisks 0 &gt; if<br/>      6 startpeg - endpeg - startpeg ndisks 1 - hanoi<br/>      endpeg startpeg ndisks \"Move disk\u00a0%d from peg\u00a0%d to peg\u00a0%d\\n\" print <br/>      endpeg 6 startpeg - endpeg - ndisks 1 - hanoi<br/>\u00a0<br/>define dohanoi use ndisks<br/>   # startpeg=1, endpeg=3<br/>   3 1 ndisks hanoi<br/>\u00a0<br/># 4 disks<br/>4 dohanoi<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 21, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Towers of Hanoi\"<br/>\tURL: http://rosettacode.org/wiki/Towers_of_Hanoi<br/>]</span><br/>\u00a0<br/>hanoi: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"br0\">{</span>Begin moving the golden disks from one pole <span class=\"kw3\">to</span> the <span class=\"kw2\">next</span>.<br/>\t Note: when <span class=\"kw3\">last</span> disk moved\uf72b, the world will end.<span class=\"br0\">}</span><br/>\tdisks <span class=\"br0\">[</span><span class=\"kw1\">integer!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Number of discs on starting pole.\"</span><br/>\t<span class=\"sy0\">/</span>poles <span class=\"st0\">\"Name poles.\"</span>\uf72b<br/>\tfrom <span class=\"kw3\">to</span> via<br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>    <span class=\"kw2\">if</span> disks = <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw2\">return</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">if</span> <span class=\"kw3\">not</span> poles <span class=\"br0\">[</span>from: 'left  <span class=\"kw3\">to</span>: 'middle  via: 'right<span class=\"br0\">]</span><br/>\u00a0<br/>    hanoi<span class=\"sy0\">/</span>poles disks - <span class=\"nu0\">1</span> from via <span class=\"kw3\">to</span><br/>\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span>from <span class=\"st0\">\"-&gt;\"</span> <span class=\"kw3\">to</span><span class=\"br0\">]</span><br/>    hanoi<span class=\"sy0\">/</span>poles disks - <span class=\"nu0\">1</span> via <span class=\"kw3\">to</span> from<br/><span class=\"br0\">]</span><br/>\u00a0<br/>hanoi <span class=\"nu0\">4</span></pre>"}, {"lang": "Retro", "loc": 15, "block": "<pre class=\"text highlighted_source\">4 elements a b c n<br/>\u00a0<br/>: vars\u00a0!c\u00a0!b\u00a0!a\u00a0!n\u00a0;<br/>: hanoi ( num from to via -- )<br/>  vars<br/>  @n 0 &lt;&gt;<br/>  [<br/>    @n @a @b @c<br/>    @n 1- @a @c @b hanoi<br/>    vars<br/>    @b @a \"\\nMove a ring from\u00a0%d to\u00a0%d\" puts<br/>    @n 1- @c @b @a hanoi<br/>  ] ifTrue\u00a0;<br/>\u00a0<br/>4 1 3 2 hanoi</pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  displays  the  moves  to solve  the  Tower of Hanoi  (with  N  disks).  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*get optional number of disks from CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">3</span>                      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*#:  the number of disk moves (so far)*/</span><br/>z=<span class=\"nu0\">2</span><span class=\"sy0\">**</span>N - <span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*Z:   \"     \"    \" minimum # of moves.*/</span><br/><span class=\"kw1\">call</span> mov  <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, N                                <span class=\"coMULTI\">/*move the top disk,  then recurse \u00b7\u00b7\u00b7 */</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The minimum number of moves to solve a '</span>      N<span class=\"st0\">\"-disk  Tower of Hanoi is \"</span>      z<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>dsk:  #=#+<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*bump the (disk) move counter by one. */</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'step'</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>#, <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\":  move disk on tower\"</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"st0\">'\u2500\u2500\u2500\u25ba'</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>                                     <span class=\"coMULTI\">/* [\u2191]  display the move message (text)*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mov:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> # z;              <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>  @1,  @2,  @3<br/>      <span class=\"kw1\">if</span> @3==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> dsk @1,  @2<br/>                <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">call</span> mov @1,        <span class=\"nu0\">6</span><a class=\"__cf_email__\" data-cfemail=\"89a4c9b8a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@2,   @3-<span class=\"nu0\">1</span><br/>                          <span class=\"kw1\">call</span> mov @1,        @2,        <span class=\"nu0\">1</span><br/>                          <span class=\"kw1\">call</span> mov <span class=\"nu0\">6</span><a class=\"__cf_email__\" data-cfemail=\"5e731e6f73\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@2,   @2,        @3-<span class=\"nu0\">1</span><br/>                     <span class=\"kw3\">end</span><br/>      <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>move(4, 1, 2, 3)<br/>\u00a0<br/>func move n, src, dst, via<br/>     if n &gt; 0 move(n - 1, src, via, dst)<br/>        see \"\" + src + \" to \" + dst + nl<br/>        move(n - 1, via, dst, src) ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> move<span class=\"br0\">(</span>num_disks, start=<span class=\"nu0\">0</span>, target=<span class=\"nu0\">1</span>, using=<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> num_disks == <span class=\"nu0\">1</span><br/>   <span class=\"re1\">@towers</span><span class=\"br0\">[</span>target<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"re1\">@towers</span><span class=\"br0\">[</span>start<span class=\"br0\">]</span>.<span class=\"me1\">pop</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Move disk from #{start} to #{target}\u00a0: #{@towers}\"</span><br/>  <span class=\"kw1\">else</span><br/>    move<span class=\"br0\">(</span>num_disks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, start, using, target<span class=\"br0\">)</span><br/>    move<span class=\"br0\">(</span><span class=\"nu0\">1</span>,           start, target, using<span class=\"br0\">)</span><br/>    move<span class=\"br0\">(</span>num_disks<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, using, target, start<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n = <span class=\"nu0\">5</span><br/><span class=\"re1\">@towers</span> = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span>.<span class=\"me1\">reverse</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>move<span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">a = move(4, \"1\", \"2\", \"3\")<br/>function move(n, a$, b$, c$) <br/>if n &gt; 0 then<br/>\ta = move(n-1, a$, c$, b$)<br/>\tprint \"Move disk from \"\u00a0; a$\u00a0; \" to \"\u00a0; c$<br/>\ta = move(n-1, b$, a$, c$)<br/>end if<br/>end function</pre>"}, {"lang": "Quite BASIC", "loc": 1, "block": "<pre>'This is implemented on the Quite BASIC website\n'<a class=\"external free\" href=\"http://www.quitebasic.com/prj/puzzle/towers-of-hanoi/\" rel=\"nofollow\">http://www.quitebasic.com/prj/puzzle/towers-of-hanoi/</a>\n</pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">fn move_(n: i32, from: i32, to: i32, via: i32) {<br/>    if n &gt; 0 {<br/>        move_(n - 1, from, via, to);<br/>        println!(\"Move disk from pole {} to pole {}\", from, to);<br/>        move_(n - 1, via, to, from);<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    move_(4, 1,2,3);<br/>}</pre>"}, {"lang": "SASL", "loc": 7, "block": "<pre class=\"text highlighted_source\">hanoi 8 \u2018abc\"<br/>WHERE<br/>hanoi 0 (a,b,c,) = ()<br/>hanoi n ( a,b,c) = hanoi (n-1) (a,c,b) ,<br/>                   \u2018move a disc from \" , a , \u2018 to \" , b , NL ,<br/>                   hanoi (n-1) (c,b,a)<br/>?</pre>"}, {"lang": "Sather", "loc": 16, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  move(ndisks, from, to, via:INT) is<br/>    if ndisks = 1 then<br/>      #OUT + \"Move disk from pole \" + from + \" to pole \" + to + \"\\n\";<br/>    else<br/>      move(ndisks-1, from, via, to);<br/>      move(1, from, to, via);<br/>      move(ndisks-1, via, to, from);<br/>    end;<br/>  end;<br/>\u00a0<br/>  main is<br/>    move(4, 1, 2, 3);<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> move<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, from<span class=\"sy0\">:</span> Int, to<span class=\"sy0\">:</span> Int, via<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Console.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk from pole \"</span> + from + <span class=\"st0\">\" to pole \"</span> + to<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, from, via, to<span class=\"br0\">)</span><br/>      move<span class=\"br0\">(</span><span class=\"nu0\">1</span>, from, to, via<span class=\"br0\">)</span><br/>      move<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, via, to, from<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>hanoi n a b c<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/>      <span class=\"br0\">(</span>hanoi <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> a c b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Move disk from pole \"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> a<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" to pole \"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>hanoi <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> c b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>hanoi <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 8, "block": "<pre class=\"text highlighted_source\">const proc: hanoi (in integer: disk, in string: source, in string: dest, in string: via) is func<br/>  begin<br/>    if disk &gt; 0 then<br/>      hanoi(pred(disk), source, via, dest);<br/>      writeln(\"Move disk \" &lt;&amp; disk &lt;&amp; \" from \" &lt;&amp; source &lt;&amp; \" to \" &lt;&amp; dest);<br/>      hanoi(pred(disk), via, dest, source);<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func hanoi<span class=\"br0\">(</span>n, from=<span class=\"nu0\">1</span>, to=<span class=\"nu0\">2</span>, via=<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Move disk from pole #{from} to pole #{to}.\"</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        hanoi<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, from, via,   to<span class=\"br0\">)</span>;<br/>        hanoi<span class=\"br0\">(</span>  <span class=\"nu0\">1</span>, from,  to,  via<span class=\"br0\">)</span>;<br/>        hanoi<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  via,  to, from<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>hanoi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "SNOBOL4", "loc": 13, "block": "<pre class=\"text highlighted_source\">*       # Note: count is global<br/>\u00a0<br/>        define('hanoi(n,src,trg,tmp)')\u00a0:(hanoi_end)<br/>hanoi   hanoi = eq(n,0) 1\u00a0:s(return)<br/>        hanoi(n - 1, src, tmp, trg)<br/>        count  = count + 1<br/>        output = count ': Move disc from ' src ' to ' trg<br/>        hanoi(n - 1, tmp, trg, src)\u00a0:(return)<br/>hanoi_end<br/>\u00a0<br/>*       # Test with 4 discs<br/>        hanoi(4,'A','C','B')<br/>end</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre>   fun hanoi(0, a, b, c) = [] |\n       hanoi(n, a, b, c) = hanoi(n-1, a, c, b) @ [(a,b)] @ hanoi(n-1, c, b, a);\n</pre>"}, {"lang": "Stata", "loc": 17, "block": "<pre class=\"text highlighted_source\">function hanoi(n, a, b, c) {<br/>\tif (n&gt;0) {<br/>\t\thanoi(n-1, a, c, b)<br/>\t\tprintf(\"Move from\u00a0%f to\u00a0%f\\n\", a, b)<br/>\t\thanoi(n-1, c, b, a)<br/>\t}<br/>}<br/>\u00a0<br/>hanoi(3, 1, 2, 3)<br/>\u00a0<br/>Move from 1 to 2<br/>Move from 1 to 3<br/>Move from 2 to 3<br/>Move from 1 to 2<br/>Move from 3 to 1<br/>Move from 3 to 2<br/>Move from 1 to 2</pre>"}, {"lang": "Swift", "loc": 9, "block": "<pre class=\"text highlighted_source\">func hanoi(n:Int, a:String, b:String, c:String) {<br/>    if (n &gt; 0) {<br/>        hanoi(n - 1, a, c, b)<br/>        println(\"Move disk from \\(a) to \\(c)\")<br/>        hanoi(n - 1, b, a, c)<br/>    }<br/>}<br/>\u00a0<br/>hanoi(4, \"A\", \"B\", \"C\")</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> hanoi <span class=\"br0\">{</span><span class=\"br0\">}</span> do_hanoi <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> do_hanoi <span class=\"br0\">{</span>count n <span class=\"br0\">{</span>from A<span class=\"br0\">}</span> <span class=\"br0\">{</span>to C<span class=\"br0\">}</span> <span class=\"br0\">{</span>via B<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> hanoi <span class=\"br0\">{</span><span class=\"br0\">}</span> do_hanoi <span class=\"br0\">[</span><span class=\"kw2\">incr</span> count<span class=\"br0\">]</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"$count: move from $from to $to\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><br/>        hanoi <span class=\"re0\">$n</span> <span class=\"re0\">$from</span> <span class=\"re0\">$via</span> <span class=\"re0\">$to</span><br/>        hanoi <span class=\"nu0\">1</span>  <span class=\"re0\">$from</span> <span class=\"re0\">$to</span> <span class=\"re0\">$via</span><br/>        hanoi <span class=\"re0\">$n</span> <span class=\"re0\">$via</span> <span class=\"re0\">$to</span> <span class=\"re0\">$from</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>hanoi <span class=\"nu0\">4</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 82, "block": "<pre class=\"text highlighted_source\">PROGRAM:TOHSOLVE<br/>0\u2192A<br/>1\u2192B<br/>0\u2192C<br/>0\u2192D<br/>0\u2192M<br/>1\u2192R<br/>While A&lt;1 or A&gt;7<br/>Input \"No. of rings=?\",A<br/>End<br/>randM(A+1,3)\u2192[C]<br/>[[1,2][1,3][2,3]]\u2192[E]<br/>\u00a0<br/>Fill(0,[C])<br/>For(I,1,A,1)<br/>I?[C](I,1)<br/>End<br/>ClrHome<br/>While [C](1,3)\u22601 and [C](1,2)\u22601<br/>\u00a0<br/>For(J,1,3)<br/>For(I,1,A)<br/>If [C](I,J)\u22600:Then<br/>Output(I+1,3J,[C](I,J))<br/>End<br/>End<br/>End<br/>While C=0<br/>Output(1,3B,\" \")<br/>1\u2192I<br/>[E](R,2)\u2192J<br/>While [C](I,J)=0 and I\u2264A<br/>I+1\u2192I<br/>End<br/>[C](I,J)\u2192D<br/>1\u2192I<br/>[E](R,1)\u2192J<br/>While [C](I,J)=0 and I\u2264A<br/>I+1\u2192I<br/>End<br/>If (D&lt;[C](I,J) and D\u22600) or [C](I,J)=0:Then<br/>[E](R,2)\u2192B<br/>Else<br/>[E](R,1)\u2192B<br/>End<br/>\u00a0<br/>1\u2192I<br/>While [C](I,B)=0 and I\u2264A<br/>I+1\u2192I<br/>End<br/>If I\u2264A:Then<br/>[C](I,B)\u2192C<br/>0\u2192[C](I,B)<br/>Output(I+1,3B,\" \")<br/>End<br/>Output(1,3B,\"V\")<br/>End<br/>\u00a0<br/>While C\u22600<br/>Output(1,3B,\" \")<br/>If B=[E](R,2):Then<br/>[E](R,1)\u2192B<br/>Else<br/>[E](R,2)\u2192B<br/>End<br/>\u00a0<br/>1\u2192I<br/>While [C](I,B)=0 and I\u2264A<br/>I+1\u2192I<br/>End<br/>If [C](I,B)=0 or [C](I,B)&gt;C:Then<br/>C\u2192[C](I-1,B)<br/>0\u2192C<br/>M+1\u2192M<br/>End<br/>End<br/>Output(1,3B,\"V\")<br/>R+1\u2192R<br/>If R=4:Then:1\u2192R:End<br/>\u00a0<br/>End<br/>\u00a0</pre>"}, {"lang": "Toka", "loc": 13, "block": "<pre class=\"text highlighted_source\">value| sa sb sc n |<br/>[ to sc to sb to sa to n ] is vars!<br/>[ ( num from to via -- )<br/>  vars!<br/>  n 0 &lt;&gt;<br/>  [<br/>    n sa sb sc <br/>    n 1- sa sc sb recurse<br/>    vars!<br/>    .\" Move a ring from \" sa . .\" to \" sb . cr<br/>    n 1- sc sb sa recurse<br/>  ] ifTrue<br/>] is hanoi</pre>"}, {"lang": "TSE SAL", "loc": 25, "block": "<pre class=\"text highlighted_source\">// library: program: run: towersofhanoi: recursive: sub &lt;description&gt;&lt;/description&gt; &lt;version&gt;1.0.0.0.0&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=runprrsu.s) [kn, ri, tu, 07-02-2012 19:54:23]<br/>PROC PROCProgramRunTowersofhanoiRecursiveSub( INTEGER totalDiskI, STRING fromS, STRING toS, STRING viaS, INTEGER bufferI )<br/> IF ( totalDiskI == 0 )<br/>  RETURN()<br/> ENDIF<br/> PROCProgramRunTowersofhanoiRecursiveSub( totalDiskI - 1, fromS, viaS, toS, bufferI )<br/> AddLine( Format( \"Move disk\", \" \", totalDiskI, \" \", \"from peg\", \" \", \"'\", fromS, \"'\", \" \", \"to peg\", \" \", \"'\", toS, \"'\" ), bufferI )<br/> PROCProgramRunTowersofhanoiRecursiveSub( totalDiskI - 1, viaS, toS, fromS, bufferI )<br/>END<br/>\u00a0<br/>// library: program: run: towersofhanoi: recursive &lt;description&gt;&lt;/description&gt; &lt;version&gt;1.0.0.0.6&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=runprtre.s) [kn, ri, tu, 07-02-2012 19:40:45]<br/>PROC PROCProgramRunTowersofhanoiRecursive( INTEGER totalDiskI, STRING fromS, STRING toS, STRING viaS )<br/> INTEGER bufferI = 0<br/> PushPosition()<br/> bufferI = CreateTempBuffer()<br/> PopPosition()<br/> PROCProgramRunTowersofhanoiRecursiveSub( totalDiskI, fromS, toS, viaS, bufferI )<br/> GotoBufferId( bufferI )<br/>END<br/>\u00a0<br/>PROC Main()<br/>STRING s1[255] = \"4\"<br/>IF ( NOT ( Ask( \"program: run: towersofhanoi: recursive: totalDiskI = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/> PROCProgramRunTowersofhanoiRecursive( Val( s1 ), \"source\", \"target\", \"via\" )<br/>END</pre>"}, {"lang": "uBasic/4tH", "loc": 10, "block": "<pre class=\"text highlighted_source\">Proc  _Move(4, 1,2,3)                  ' 4 disks, 3 poles<br/>End<br/>\u00a0<br/>_Move Param(4)<br/>  If (<a class=\"__cf_email__\" data-cfemail=\"90f1d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 0) Then<br/>    Proc _Move (<a class=\"__cf_email__\" data-cfemail=\"8deccd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1, <a class=\"__cf_email__\" data-cfemail=\"543614\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"e084a0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"7e1d3e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>    Print \"Move disk from pole \";<a class=\"__cf_email__\" data-cfemail=\"ee8cae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;\" to pole \";<a class=\"__cf_email__\" data-cfemail=\"b1d2f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    Proc _Move (<a class=\"__cf_email__\" data-cfemail=\"ddbc9d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1, <a class=\"__cf_email__\" data-cfemail=\"ee8aae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"472407\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"432103\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>  EndIf<br/>Return</pre>"}, {"lang": "UNIX Shell", "loc": 20, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/>move<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">n</span>=<span class=\"st0\">\"$1\"</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">from</span>=<span class=\"st0\">\"$2\"</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">to</span>=<span class=\"st0\">\"$3\"</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">via</span>=<span class=\"st0\">\"$4\"</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$n</span>\"</span> == <span class=\"st0\">\"1\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"Move disk from pole <span class=\"es2\">$from</span> to pole <span class=\"es2\">$to</span>\"</span><br/>  <span class=\"kw1\">else</span><br/>    move $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re1\">$from</span> <span class=\"re1\">$via</span> <span class=\"re1\">$to</span><br/>    move <span class=\"nu0\">1</span> <span class=\"re1\">$from</span> <span class=\"re1\">$to</span> <span class=\"re1\">$via</span><br/>    move $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re1\">$via</span> <span class=\"re1\">$to</span> <span class=\"re1\">$from</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>move <span class=\"re4\">$1</span> <span class=\"re4\">$2</span> <span class=\"re4\">$3</span> <span class=\"re4\">$4</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>move = ~&amp;al^&amp; ^rlPlrrPCT/~&amp;arhthPX ^|W/~&amp; ^|G/predecessor ^/~&amp;htxPC ~&amp;zyxPC<br/>\u00a0<br/>#show+<br/>\u00a0<br/>main = ^|T(~&amp;,' -&gt; '--)* move/4 &lt;'start','end','middle'&gt;</pre>"}, {"lang": "VBScript", "loc": 11, "block": "<pre class=\"text highlighted_source\">Sub Move(n,fromPeg,toPeg,viaPeg)<br/>\tIf n &gt; 0 Then<br/>\t\tMove n-1, fromPeg, viaPeg, toPeg<br/>\t\tWScript.StdOut.Write \"Move disk from \" &amp; fromPeg &amp; \" to \" &amp; toPeg<br/>\t\tWScript.StdOut.WriteBlankLines(1)<br/>\t\tMove n-1, viaPeg, toPeg, fromPeg<br/>\tEnd If<br/>End Sub<br/>\u00a0<br/>Move 4,1,2,3<br/>WScript.StdOut.Write(\"Towers of Hanoi puzzle completed!\")</pre>"}, {"lang": "Vedit macro language", "loc": 25, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> #<span class=\"nu0\">4</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span>          <span class=\"co1\">// move 4 disks from 1 to 2</span><br/>Call<span class=\"br0\">(</span><span class=\"st0\">\"MOVE_DISKS\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">// Move disks</span><br/><span class=\"co1\">// #1 = from, #2 = to, #3 = via, #4 = number of disks</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>MOVE_DISKS<span class=\"sy0\">:</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">4</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Num_Push<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        #<span class=\"nu0\">9</span><span class=\"sy0\">=</span>#<span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span><span class=\"sy0\">=</span>#<span class=\"nu0\">3</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">=</span>#<span class=\"nu0\">9</span><span class=\"sy0\">;</span> #<span class=\"nu0\">4</span><span class=\"sy0\">--</span>       <span class=\"co1\">// #1 to #3 via #2</span><br/>        Call<span class=\"br0\">(</span><span class=\"st0\">\"MOVE_DISKS\"</span><span class=\"br0\">)</span><br/>    Num_Pop<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Move a disk from \"</span><span class=\"br0\">)</span>       <span class=\"co1\">// move one disk</span><br/>    Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">+</span>NOCR<span class=\"br0\">)</span><br/>    Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\" to \"</span><span class=\"br0\">)</span><br/>    Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">,</span> LEFT<span class=\"br0\">)</span><br/>\u00a0<br/>    Num_Push<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        #<span class=\"nu0\">9</span><span class=\"sy0\">=</span>#<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">=</span>#<span class=\"nu0\">3</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">9</span><span class=\"sy0\">;</span> #<span class=\"nu0\">4</span><span class=\"sy0\">--</span>     <span class=\"co1\">// #3 to #2 via #1</span><br/>        Call<span class=\"br0\">(</span><span class=\"st0\">\"MOVE_DISKS\"</span><span class=\"br0\">)</span><br/>    Num_Pop<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 13, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Module</span> TowersOfHanoi<br/>    <span class=\"kw1\">Sub</span> MoveTowerDisks<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> disks <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByVal</span> fromTower <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByVal</span> toTower <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByVal</span> viaTower <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> disks <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            MoveTowerDisks<span class=\"br0\">(</span>disks <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, fromTower, viaTower, toTower<span class=\"br0\">)</span><br/>            System<span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Move disk {0} from {1} to {2}\"</span>, disks, fromTower, toTower<span class=\"br0\">)</span><br/>            MoveTowerDisks<span class=\"br0\">(</span>disks <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, viaTower, toTower, fromTower<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        MoveTowerDisks<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">code Text=12;<br/>\u00a0<br/>proc MoveTower(Discs, From, To, Using);<br/>int  Discs, From, To, Using;<br/>[if Discs &gt; 0 then<br/>    [MoveTower(Discs-1, From, Using, To);<br/>    Text(0, \"Move from \");  Text(0, From);<br/>    Text(0, \" peg to \");  Text(0, To);  Text(0, \" peg.^M^J\");<br/>    MoveTower(Discs-1, Using, To, From);<br/>    ];<br/>];<br/>\u00a0<br/>MoveTower(3, \"left\", \"right\", \"center\")</pre>"}, {"lang": "XSLT", "loc": 26, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"hanoi\"</span><span class=\"re2\">&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"n\"</span><span class=\"re2\">/&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"from\"</span><span class=\"re2\">&gt;</span></span>left<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:param<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"to\"</span><span class=\"re2\">&gt;</span></span>middle<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:param<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"via\"</span><span class=\"re2\">&gt;</span></span>right<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:param<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:if</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$n &amp;gt; 0\"</span><span class=\"re2\">&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"hanoi\"</span><span class=\"re2\">&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"n\"</span>    <span class=\"re0\">select</span>=<span class=\"st0\">\"$n - 1\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"from\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$from\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"to\"</span>   <span class=\"re0\">select</span>=<span class=\"st0\">\"$via\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"via\"</span>  <span class=\"re0\">select</span>=<span class=\"st0\">\"$to\"</span><span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;fo:block<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span>Move disk from <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$from\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span> to <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$to\"</span><span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/fo:block<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"hanoi\"</span><span class=\"re2\">&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"n\"</span>    <span class=\"re0\">select</span>=<span class=\"st0\">\"$n - 1\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"from\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$via\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"to\"</span>   <span class=\"re0\">select</span>=<span class=\"st0\">\"$to\"</span><span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"via\"</span>  <span class=\"re0\">select</span>=<span class=\"st0\">\"$from\"</span><span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:if<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "XQuery", "loc": 17, "block": "<pre class=\"text highlighted_source\">declare function local:hanoi($disk as xs:integer, $from as xs:integer,<br/>    $to as xs:integer, $via as xs:integer) as element()* <br/>{<br/>  if($disk &gt; 0)<br/>  then (<br/>    local:hanoi($disk - 1, $from, $via, $to),<br/>    &lt;move disk='{$disk}'&gt;&lt;from&gt;{$from}&lt;/from&gt;&lt;to&gt;{$to}&lt;/to&gt;&lt;/move&gt;,<br/>    local:hanoi($disk - 1, $via, $to, $from)<br/>  ) <br/>  else ()<br/>};<br/>\u00a0<br/>&lt;hanoi&gt;<br/>{<br/>  local:hanoi(4, 1, 2, 3)<br/>}<br/>&lt;/hanoi&gt;</pre>"}, {"lang": "Yabasic", "loc": 30, "block": "<pre class=\"text highlighted_source\">sub hanoi(ndisks, startPeg, endPeg)<br/>    if ndisks then<br/>        hanoi(ndisks-1, startPeg, 6-startPeg-endPeg)<br/>        //print \"Move disk \", ndisks, \" from \", startPeg, \" to \", endPeg<br/>        hanoi(ndisks-1, 6-startPeg-endPeg, endPeg)<br/>    end if<br/>end sub<br/>\u00a0<br/>print \"Be patient, please.\\n\\n\"<br/>print \"Hanoi 1 ellapsed ... \";<br/>\u00a0<br/>t1 = peek(\"millisrunning\")<br/>hanoi(22, 1, 3)<br/>t2 = peek(\"millisrunning\")<br/>print t2-t1, \" ms\"<br/>\u00a0<br/>\u00a0<br/>sub hanoi2(n, from, to_, via)<br/>    if n = 1 then<br/>\t//print \"Move from \", from, \" to \", to_<br/>    else<br/>\thanoi2(n - 1, from, via , to_ )<br/>    \thanoi2(1    , from, to_ , via )<br/>    \thanoi2(n - 1, via , to_ , from)<br/>    end if<br/>end sub<br/>\u00a0<br/>print \"Hanoi 2 ellapsed ... \";<br/>hanoi2(22, 1, 3, 2)<br/>print peek(\"millisrunning\") - t2, \" ms\"</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn move(n, from,to,via){<br/>   if (n&gt;0){<br/>      move(n-1, from,via,to);<br/>      println(\"Move disk from pole\u00a0%d to pole\u00a0%d\".fmt(from, to));<br/>      move(n-1, via,to,from);<br/>   }<br/>}<br/>move(3, 1,2,3);</pre>"}]}