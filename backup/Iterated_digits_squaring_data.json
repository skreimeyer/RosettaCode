{"task": "Iterated_digits_squaring", "blocks": [{"lang": "ALGOL 68", "loc": 49, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># count the how many numbers up to 100 000 000 have squared digit sums of 89            #</span><br/>\u00a0<br/><span class=\"coMULTI\"># compute a table of the sum of the squared digits of the numbers 00 to 99              #</span><br/><span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> 99 <span class=\"br0\">]</span><span class=\"kw3\">INT</span>    digit pair square sum<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> d1 <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 9 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">FOR</span> d2 <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 9 <span class=\"kw2\">DO</span><br/>        digit pair square sum<span class=\"br0\">[</span> <span class=\"br0\">(</span> d1 <span class=\"sy1\">*</span> 10 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> d2 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> d1 <span class=\"sy1\">*</span> d1 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span> d2 <span class=\"sy1\">*</span> d2 <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the sum of the squared digits of n                                            #</span><br/><span class=\"kw4\">PROC</span> squared digit sum <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span>   result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span>   rest   <span class=\"sy1\">:=</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> rest <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">DO</span><br/>             <span class=\"kw3\">INT</span>    digit pair <span class=\"sy1\">=</span> rest <span class=\"kw12\">MOD</span> 100<span class=\"sy1\">;</span><br/>             result <span class=\"kw17\">PLUSAB</span> digit pair square sum<span class=\"br0\">[</span> digit pair <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>             rest   <span class=\"kw17\">OVERAB</span> 100<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># squared digit sum #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># for values up to 100 000 000, the largest squred digit sum will be that of 99 999 999 #</span><br/><span class=\"coMULTI\"># i.e. 81 * 8 = 648, we will cache the values of the squared digit sums                 #</span><br/><span class=\"kw3\">INT</span>   cache max <span class=\"sy1\">=</span> 81 <span class=\"sy1\">*</span> 8<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> cache max <span class=\"br0\">]</span><span class=\"kw3\">INT</span> cache<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> cache max <span class=\"kw2\">DO</span> cache<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> count 89 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># fill in the cache                                                                     #</span><br/><span class=\"kw2\">FOR</span> value <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> cache max <span class=\"kw2\">DO</span> cache<span class=\"br0\">[</span> value <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> squared digit sum<span class=\"br0\">(</span> value <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># we \"know\" that 89 and 1 are the terminal values                                       #</span><br/>cache<span class=\"br0\">[</span>  1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span>  1<span class=\"sy1\">;</span><br/>cache<span class=\"br0\">[</span> 89 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 89<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> value <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> cache max <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> cache<span class=\"br0\">[</span> value <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> sum <span class=\"sy1\">/=</span> 1 <span class=\"kw16\">AND</span> sum <span class=\"sy1\">/=</span> 89 <span class=\"kw2\">DO</span><br/>        sum <span class=\"sy1\">:=</span> cache<span class=\"br0\">[</span> sum <span class=\"br0\">]</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    cache<span class=\"br0\">[</span> value <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sum<br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> value <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> 100 000 000 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> cache<span class=\"br0\">[</span> squared digit sum<span class=\"br0\">(</span> value <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> 89 <span class=\"kw2\">THEN</span> count 89 <span class=\"sy1\">+:=</span> 1 <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Number of values whose squared digit sum is 89: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> count 89<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>10 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 58, "block": "<pre class=\"text highlighted_source\">      REM Version 1: Brute force<br/>      REM ---------------------------------------------------------<br/>      T%=TIME<br/>      N%=0<br/>      FOR I%=1 TO 100000000<br/>        J%=I%<br/>        REPEAT<br/>          K%=0:REPEAT K%+=(J%MOD10)^2:J%=J%DIV10:UNTIL J%=0<br/>          J%=K%<br/>        UNTIL J%=89 OR J%=1<br/>        IF J%&gt;1 N%+=1<br/>      NEXT<br/>      PRINT \"Version 1: \";N% \" in \";(TIME-T%)/100 \" seconds.\"<br/>\u00a0<br/>      REM Version 2: Brute force + building lookup table<br/>      REM ---------------------------------------------------------<br/>      T%=TIME<br/>      DIM B% 9*9*8,H%(9)<br/>      N%=0<br/>      FOR I%=1 TO 100000000<br/>        J%=I%<br/>        H%=0<br/>        REPEAT<br/>          K%=0:REPEAT K%+=(J%MOD10)^2:J%=J%DIV10:UNTIL J%=0<br/>          H%(H%)=K%:H%+=1<br/>          J%=K%<br/>          IF B%?J%=1 EXIT REPEAT<br/>        UNTIL J%=89 OR J%=1<br/>        IF J%&gt;1 N%+=1:WHILE H%&gt;0:H%-=1:B%?H%(H%)=1:ENDWHILE<br/>      NEXT<br/>      PRINT \"Version 2: \";N% \" in \";(TIME-T%)/100 \" seconds.\"<br/>\u00a0<br/>      REM Version 3: Calc possible combinations (translation of C)<br/>      REM ---------------------------------------------------------<br/>      T%=TIME<br/>      DIM B%(9*9*8):B%(0)=1<br/>      FOR N%=1 TO 8<br/>        FOR I%=9*9*N% TO 1 STEP -1<br/>          FOR J%=1 TO 9<br/>            S%=J%*J%<br/>            IF S%&gt;I% EXIT FOR<br/>            B%(I%)+=B%(I%-S%)<br/>          NEXT<br/>        NEXT<br/>      NEXT<br/>\u00a0<br/>      N%=0<br/>      FOR I%=1 TO 9*9*8<br/>        J%=I%<br/>        REPEAT<br/>          K%=0:REPEAT K%+=(J%MOD10)^2:J%=J%DIV10:UNTIL J%=0<br/>          J%=K%<br/>        UNTIL J%=89 OR J%=1<br/>        IF J%&gt;1 N%+=B%(I%)<br/>      NEXT<br/>      PRINT \"Version 3: \";N% \" in \";(TIME-T%)/100 \" seconds.\"<br/>\u00a0<br/>      END</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">1-1\\10v!:/+55\\&lt;&gt;::**&gt;&gt;-!|<br/>v0:\\+&lt;_:55+%:*^^\"d\":+1$&lt;:<br/>&gt;\\`!#^ _$:\"Y\"-#v_$\\1+\\:^0<br/>&gt;01-\\0^ @,+55.&lt;&gt;:1&gt;-!&gt;#^_<br/>&gt;,,,$.\" &gt;=\",,,^ &gt;&gt;\".1\"&gt;#&lt;</pre>"}, {"lang": "C", "loc": 47, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ull<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is89<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">do</span> s <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tx <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// array bounds is sort of random here, it's big enough for 64bit unsigned.</span><br/>\tull sums<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"sy0\">*</span><span class=\"nu0\">81</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">*</span><span class=\"nu0\">81</span><span class=\"sy0\">;</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\tsums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> sums<span class=\"br0\">[</span>i<span class=\"sy0\">-</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tull count89 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span><span class=\"nu0\">81</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is89<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> ~0ULL <span class=\"sy0\">-</span> count89<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"counter overflow for 10^%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tcount89 <span class=\"sy0\">+=</span> sums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1-&gt;10^%d:\u00a0%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> count89<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">// returns sum of squares of digits of n</span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> sum_square_digits<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i,num<span class=\"sy1\">=</span>n,sum<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"co1\">// process digits one at a time until there are none left</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>num <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// peal off the last digit from the number</span><br/>                <span class=\"kw4\">int</span> digit<span class=\"sy1\">=</span>num <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>                num<span class=\"sy1\">=</span><span class=\"br0\">(</span>num <span class=\"sy2\">-</span> digit<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>                <span class=\"co1\">// add it's square to the sum</span><br/>                sum<span class=\"sy2\">+</span><span class=\"sy1\">=</span>digit<span class=\"sy2\">*</span>digit<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span>,result<span class=\"sy1\">=</span><span class=\"nu0\">0</span>, count<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;=</span><span class=\"nu0\">100000000</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// if not 1 or 89, start the iteration</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        result <span class=\"sy1\">=</span> sum_square_digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"co1\">// otherwise we're done already</span><br/>                <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        result <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"co1\">// while we haven't reached 1 or 89, keep iterating</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>result <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        result <span class=\"sy1\">=</span> sum_square_digits<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy1\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        count<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> count <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 34, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> IteratedDigitsSquaring<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Count89s<span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Count89s<span class=\"br0\">(</span><span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Count89s<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> end <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>limit, <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>end<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> end<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> end<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">89</span><span class=\"sy0\">;</span> end<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> SquareDigitSum<span class=\"br0\">(</span>end<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>end<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> result<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> end<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>end<span class=\"br0\">[</span>SquareDigitSum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> result<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> SquareDigitSum<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>                sum <span class=\"sy0\">+=</span> digit <span class=\"sy0\">*</span> digit<span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 28, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tfunction digitsSquaredSum(variable Integer n) {<br/>\t\tvariable value total = 0;<br/>\t\twhile(n &gt; 0) {<br/>\t\t\ttotal += (n\u00a0% 10) ^ 2;<br/>\t\t\tn /= 10;<br/>\t\t}<br/>\t\treturn total;<br/>\t}<br/>\u00a0<br/>\tfunction lastSum(variable Integer n) {<br/>\t\twhile(true) {<br/>\t\t\tn = digitsSquaredSum(n);<br/>\t\t\tif(n == 89 || n == 1) {<br/>\t\t\t\treturn n;<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tvariable value eightyNines = 0;<br/>\tfor(i in 1..100M - 1) {<br/>\t\tif(lastSum(i) == 89) {<br/>\t\t\teightyNines++;<br/>\t\t}<br/>\t}<br/>\tprint(eightyNines);<br/>}</pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns async-example<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"br0\">[</span>criterium<span class=\"sy0\">.</span>core<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defn sum-sqr <span class=\"br0\">[</span>digits<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Square sum of list of digits \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>digits-sqr <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> + </span><span class=\"br0\">(</span>map #<span class=\"br0\">(</span>* <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>digits-sqr digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn get-digits <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Converts a digit to a list of digits (e.g. 545 -&gt; ((5) (4) (5)) (used for squaring digits) \"</span><br/>  <span class=\"br0\">(</span>map #<span class=\"br0\">(</span><span class=\"kw1\">Integer</span>/valueOf <span class=\"br0\">(</span>str <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>String/valueOf n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn -isNot89 <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Returns nil on 89 \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>sum-sqr <span class=\"br0\">(</span>get-digits x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Cached version of isNot89 (i.e. remembers prevents inputs, and returns result by looking it up when input repeated)</span><br/><span class=\"br0\">(</span>def isNot89 <span class=\"br0\">(</span>memoize -isNot89<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn direct-method <span class=\"br0\">[</span>ndigits<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Simple approach of looping through all the numbers from 0 to 10^ndigits - 1 \"</span><br/>  <span class=\"br0\">(</span>-<span class=\"sy0\">&gt;&gt;</span><br/>    <span class=\"br0\">(</span>math/<span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> ndigits<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>range <span class=\"nu0\">0</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t<span class=\"co1\">; 0 to 10^ndigits</span><br/>    <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span>isNot89 <span class=\"br0\">(</span>sum-sqr <span class=\"br0\">(</span>get-digits <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">; filters out 89</span><br/>    <span class=\"br0\">(</span>count<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; count non-89</span><br/>    <span class=\"br0\">(</span>- <span class=\"br0\">(</span>math/<span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> ndigits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; count 89 (10^ndigits - (count 89))</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>time <span class=\"br0\">(</span>println <span class=\"br0\">(</span>direct-method <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 34, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> square <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">expt</span> number <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> list-digits <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the `number' as a list of its digits.\"</span><br/>  <span class=\"br0\">(</span>loop<br/>    <span class=\"sy0\">:</span><span class=\"me1\">for</span> <span class=\"br0\">(</span>rest digit<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>multiple-value-<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> number <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"sy0\">:</span><span class=\"me1\">then</span> <span class=\"br0\">(</span>multiple-value-<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> rest <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">collect</span> digit<br/>    <span class=\"sy0\">:</span><span class=\"me1\">until</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop<br/>    <span class=\"sy0\">:</span><span class=\"me1\">for</span> digit <span class=\"sy0\">:</span><span class=\"me1\">in</span> <span class=\"br0\">(</span>list-digits number<span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">sum</span> <span class=\"br0\">(</span>square digit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> chain-end <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the ending number after summing the squaring of the digits of<br/>`number'.  Either 1 or 89.\"</span><br/>  <span class=\"br0\">(</span>loop<br/>    <span class=\"sy0\">:</span><span class=\"me1\">for</span> next <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>next number<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">then</span> <span class=\"br0\">(</span>next next<span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">until</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> next <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">eql</span> next <span class=\"nu0\">89</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">finally</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>time<br/> <span class=\"br0\">(</span>loop<br/>   <span class=\"sy0\">:</span><span class=\"me1\">with</span> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"sy0\">:</span><span class=\"me1\">for</span> candidate <span class=\"sy0\">:</span><span class=\"me1\">from</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"me1\">upto</span> <span class=\"nu0\">100000000</span><br/>   <span class=\"sy0\">:</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"nu0\">89</span> <span class=\"br0\">(</span>chain-end candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>incf count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"sy0\">:</span><span class=\"me1\">finally</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint</span> step<span class=\"br0\">(</span><span class=\"kw4\">uint</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        total <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> total<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint</span> iterate<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">89</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> x.<span class=\"me1\">step</span>.<span class=\"me1\">memoize</span><span class=\"sy0\">!</span>iterate<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x.<span class=\"me1\">iterate</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ERRE", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM ITERATION<br/>\u00a0<br/>BEGIN<br/>   PRINT(CHR$(12);)\u00a0! CLS<br/>   INPUT(N)<br/>   LOOP<br/>      N$=MID$(STR$(N),2)<br/>      S=0<br/>      FOR I=1 TO LEN(N$) DO<br/>         A=VAL(MID$(N$,I,1))<br/>         S=S+A*A<br/>      END FOR<br/>      IF S=89 OR S=1 THEN PRINT(S;)  EXIT END IF<br/>      PRINT(S;)<br/>      N=S<br/>   END LOOP<br/>   PRINT<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.ranges math.text.utils memoize<br/>prettyprint sequences tools.time\u00a0;<br/>IN: rosetta-code.iterated-digits-squaring<br/>\u00a0<br/>: sum-digit-sq ( n -- m ) 1 digit-groups [ sq ] map-sum\u00a0;<br/>\u00a0<br/>MEMO: 1or89 ( n -- m )<br/>    [ dup [ 1 = ] [ 89 = ] bi or ] [ sum-digit-sq ] until\u00a0;<br/>\u00a0<br/>[<br/>    0 1<br/>    [<br/>        dup sum-digit-sq 1or89 89 = [ [ 1 + ] dip ] when<br/>        1 + dup 100,000,000 &lt;<br/>    ] loop<br/>    drop .<br/>] time</pre>"}, {"lang": "FreeBASIC", "loc": 47, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' similar to C Language (first approach)</span><br/><span class=\"co1\">' timing for i3 @ 2.13 GHz</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> endsWith89<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> digit, sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">While</span> n &gt; <span class=\"nu0\">0</span><br/>      digit = n <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><br/>      sum += digit * digit<br/>      n \\= <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">If</span> sum = <span class=\"nu0\">89</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>    <span class=\"kw1\">If</span> sum = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    n = sum<br/>    sum  = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Loop</span>  <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> start = <span class=\"kw1\">timer</span> <br/><span class=\"kw1\">Dim</span> sums<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span> * <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> <br/>sums<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>sums<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">For</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span> <br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = n * <span class=\"nu0\">81</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>      s = j * j        <br/>      <span class=\"kw1\">If</span> s &gt; i <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      sums<span class=\"br0\">(</span>i<span class=\"br0\">)</span> += sums<span class=\"br0\">(</span>i - s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> count89 = <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n * <span class=\"nu0\">81</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> endsWith89<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>      count89 += sums<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i <br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"There are\"</span>;count89; <span class=\"st0\">\" numbers from 1 to 100 million ending with 89\"</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Elapsed milliseconds =\"</span>; <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">timer</span> - start<span class=\"br0\">)</span> * <span class=\"nu0\">1000</span> + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>total = 0<br/>d = new dict<br/>var sum<br/>\u00a0<br/>for n = 1 to 100 million - 1<br/>{<br/>   sum = n<br/>   do<br/>   {<br/>      if sum &lt; 1000 and <a class=\"__cf_email__\" data-cfemail=\"9afedae9eff7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0!= undef<br/>      {<br/>         sum = <a class=\"__cf_email__\" data-cfemail=\"5d391d2e2830\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         break<br/>      }<br/>\u00a0<br/>      c = sum<br/>\u00a0<br/>      sum = 0<br/>      for digit = integerDigits[c]<br/>         sum = sum + digit^2<br/>   } while (sum\u00a0!= 89) and (sum\u00a0!= 1) <br/>\u00a0<br/>   if (n &lt; 1000)<br/>      <a class=\"__cf_email__\" data-cfemail=\"3551755b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = sum<br/>\u00a0<br/>   if (sum == 89)<br/>      total = total + 1<br/>}<br/>\u00a0<br/>println[total]<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> d<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> o<span class=\"sy1\">,</span> u<span class=\"sy1\">,</span> u89 <span class=\"kw4\">int64</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">100000000</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\to <span class=\"sy2\">=</span> n<br/>\t\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t\tu <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t\t\td <span class=\"sy2\">=</span> o<span class=\"sy3\">%</span><span class=\"nu0\">10</span><br/>\t\t\t\to <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>o <span class=\"sy3\">-</span> d<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">10</span><br/>\t\t\t\tu <span class=\"sy2\">+=</span> d<span class=\"sy3\">*</span>d<br/>\t\t\t\t<span class=\"kw1\">if</span> o <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span> <br/>\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> u <span class=\"sy3\">==</span> <span class=\"nu0\">89</span> <span class=\"sy3\">||</span> u <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> u <span class=\"sy3\">==</span> <span class=\"nu0\">89</span> <span class=\"sy1\">{</span> u89<span class=\"sy2\">++</span> <span class=\"sy1\">}</span><br/>\t\t\t\t<span class=\"kw1\">break</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\to <span class=\"sy2\">=</span> u<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>u89<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Tuple <span class=\"br0\">(</span>swap<span class=\"br0\">)</span><br/>\u00a0<br/>step <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>step <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> unfoldr f <span class=\"kw1\">where</span><br/>    f <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>    f n <span class=\"sy0\">=</span> Just <span class=\"sy0\">.</span> swap <span class=\"sy0\">$</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">10</span><br/>\u00a0<br/>iter <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>iter <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">89</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> step<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> iter<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">99999999</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">digits=: <span class=\"nu0\">10</span>&amp;#.inv</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">function iterate(m::Integer)<br/>    while m\u00a0!= 1 &amp;&amp; m\u00a0!= 89<br/>        s = 0<br/>        while m &gt; 0 # compute sum of squares of digits<br/>            m, d = divrem(m, 10)<br/>            s += d ^ 2<br/>        end<br/>        m = s<br/>    end<br/>    return m<br/>end<br/>itercount(k::Integer) = count(x -&gt; iterate(x) == 89, 1:k)</pre>"}, {"lang": "Java", "loc": 24, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> IteratedDigitsSquaring <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> r <span class=\"sy0\">=</span> IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span><br/>                .<span class=\"me1\">parallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">filter</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> calc<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> calc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">89</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                total <span class=\"sy0\">+=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            n <span class=\"sy0\">=</span> total<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\">def factorial: reduce range(2;.+1) as $i (1; . * $i);<br/>\u00a0<br/># Pick n items (with replacement) from the input array,<br/># but only consider distinct combinations:<br/>def pick(n):<br/>  def pick(n; m):  # pick n, from m onwards<br/>    if n == 0 then []<br/>    elif m == length then empty<br/>    elif n == 1 then (.[m:][] | [.])<br/>    else ([.[m]] + pick(n-1; m)), pick(n; m+1)<br/>    end;<br/>  pick(n;0)\u00a0;<br/>\u00a0<br/># Given any array, produce an array of [item, count] pairs for each run.<br/>def runs:<br/>  reduce .[] as $item<br/>    ( [];<br/>      if . == [] then [ [ $item, 1] ] <br/>      else  .[length-1] as $last<br/>            | if $last[0] == $item then (.[0:length-1] + [ [$item, $last[1] + 1] ] )<br/>              else . + [[$item, 1]]<br/>              end<br/>      end )\u00a0;</pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun endsWith89<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> digit<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            digit <span class=\"sy0\">=</span> nn <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>            sum +<span class=\"sy0\">=</span> digit <span class=\"sy0\">*</span> digit<br/>            nn /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        nn <span class=\"sy0\">=</span> sum<br/>        sum  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sums <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">81</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    sums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    sums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">1</span> .. <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n <span class=\"sy0\">*</span> <span class=\"nu0\">81</span> downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">1</span> .. <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                s <span class=\"sy0\">=</span> j <span class=\"sy0\">*</span> j<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> break<br/>                sums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> sums<span class=\"br0\">[</span>i - s<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count89 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> .. <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>endsWith89<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> count89 +<span class=\"sy0\">=</span> sums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"There are $count89 numbers from 1 to 100 million ending with 89\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 47, "block": "<pre class=\"lua highlighted_source\">squares <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>        squares<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> j <span class=\"sy0\">*</span> j<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">99</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">99</span> <span class=\"kw1\">do</span><br/>        squares<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> squares<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> squares<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sum_squares<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9999.5</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> squares<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">local</span> m <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> squares<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span> m<span class=\"br0\">]</span> <span class=\"sy0\">+</span> sum_squares<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>memory <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> calc_1_or_89<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    n <span class=\"sy0\">=</span> memory<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw2\">or</span> n<br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">89</span> <span class=\"kw1\">do</span><br/>        n <span class=\"sy0\">=</span> memory<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw2\">or</span> sum_squares<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> i <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        memory<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100000000</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> calc_1_or_89<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span> <span class=\"kw1\">then</span><br/>        counter <span class=\"sy0\">=</span> counter <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>counter<span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 37, "block": "<pre class=\"text highlighted_source\">sumDigitsSquared[n_Integer]\u00a0:= Total[IntegerDigits[n]^2]<br/>stopValues = Join[{1}, NestList[sumDigitsSquared, 89, 7]];<br/>iterate[n_Integer]\u00a0:= <br/> NestWhile[sumDigitsSquared, n, Intersection[stopValues, {#}] == {} &amp;]<br/>\u00a0<br/>numberOfDigits = 8;<br/>maxSum = numberOfDigits 9^2;<br/>loopVariables = <br/>  <a class=\"__cf_email__\" data-cfemail=\"491d260c31393b2c3a3a202627091d282b252c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\"i\" &lt;&gt; ToString[n], {n, numberOfDigits}];<br/>iteratesToOne = Cases[<a class=\"__cf_email__\" data-cfemail=\"c496a5aaa3a184a9a5bc97b1a9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, _?(iterate[#] == 1 &amp;)];<br/>allIterators = <br/>  Flatten[{<a class=\"__cf_email__\" data-cfemail=\"520037243720213712\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, 9}] &amp; /@ Partition[loopVariables, 2, 1];<br/>maxCombinations = numberOfDigits!;<br/>\u00a0<br/>ssd = <br/>  SparseArray[Table[n^2 -&gt; numberOfDigits, {n, 9}], {maxSum}];<br/>\u00a0<br/>Do[<br/>  variables = loopVariables[[;; digitCount]];<br/>  iterators = allIterators[[;; digitCount - 1]];<br/>\u00a0<br/>  Do[ssd += <br/>    SparseArray[<br/>     Total[variables^2] -&gt; <br/>      maxCombinations/<br/>       Times @@ (Tally[PadRight[variables, numberOfDigits]][[All, <br/>            2]]!), {maxSum}], {i, 9}, Evaluate[Sequence @@ iterators]],<br/>\u00a0<br/>  {digitCount, 2, numberOfDigits}];<br/>\u00a0<br/>onesCount = <br/> Total[Cases[<br/>    ArrayRules[ssd] /. <br/>     HoldPattern[{a_} -&gt; b_]\u00a0:&gt; {a, <br/>       b}, {_?(MemberQ[iteratesToOne, #] &amp;), _}][[All, 2]]];<br/>\u00a0<br/>(10^numberOfDigits - 1) - onesCount</pre>"}, {"lang": "Oberon-2", "loc": 35, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> DigitsSquaring;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>hits89<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Squaring<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    d<span class=\"sy0\">,</span> sum<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">LOOP</span><br/>      sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">WHILE</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        d <span class=\"sy0\">:=</span> n <span class=\"kw1\">MOD</span> <span class=\"nu0\">10</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span>d <span class=\"sy0\">*</span> d<span class=\"br0\">)</span>;<br/>        n <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> <span class=\"nu0\">10</span><br/>      <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">=</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">EXIT</span> <span class=\"kw1\">END</span>;<br/>      n <span class=\"sy0\">:=</span> sum;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> sum<br/>  <span class=\"kw1\">END</span> Squaring;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  hits89 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100000000</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> Squaring<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">89</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>hits89<span class=\"br0\">)</span> <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>hits89<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> DigitsSquaring.<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: sq_digits(n) <br/>   while (n 1 &lt;&gt; n 89 &lt;&gt; and ) [ <br/>      0 while(n) [ n 10 /mod -&gt;n dup * + ] <br/>      -&gt;n <br/>      ] n\u00a0;<br/>\u00a0<br/>: iterDigits  | i | 0 100000000 loop: i [ i sq_digits 89 &amp;= + ] .\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">ssd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">=</span>digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> #n<span class=\"sy0\">,</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>happy<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span> n<span class=\"sy0\">=</span>ssd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>ct<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>f<span class=\"sy0\">=</span>n<span class=\"sy0\">!,</span>s<span class=\"sy0\">=</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">forvec</span><span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> d<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">&gt;</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>happy<span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>i<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"sy0\">-=</span>f<span class=\"sy0\">/</span><span class=\"kw1\">prod</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"sy0\">;</span><br/>ct<span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre>1E8 -&gt; runtime 0..4 ms // not really measureable \n1E12-&gt; runtime 0.22 secs\n1E14 -&gt; runtime 2,7 secs\n1E16 -&gt; runtime 31,0 secs\n1E18 -&gt; runtime  354 secs // 2GByte</pre>"}, {"lang": "Perl", "loc": 24, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@sq</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%cache</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> Euler92 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"re0\">$n</span> <span class=\"sy0\">:</span> <br/>    Euler92<span class=\"br0\">(</span> sum<span class=\"br0\">(</span> <span class=\"re0\">@sq</span><span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sum <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"kw1\">while</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"sy0\">++</span><span class=\"re0\">$cnt</span> <span class=\"kw1\">if</span> Euler92<span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$cnt</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 14, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@sq</span> <span class=\"sy0\">=</span> <span class=\"sy0\">^</span><span class=\"nu0\">10</span> <span class=\"kw1\">X</span><span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> Euler92<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">89</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!!</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">state</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> Euler92<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@sq</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span>_000_000 <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>   <span class=\"sy0\">++</span><span class=\"re0\">$cnt</span> <span class=\"kw1\">if</span> Euler92<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$cnt</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 42, "block": "<pre class=\"text highlighted_source\">constant MAXINT = iff(machine_bits()=32?9007199254740992<br/>                                      \u00a0:9223372036854775807)<br/>\u00a0<br/>procedure main(integer limit)<br/>sequence sums = repeat(0,limit*81+1)<br/>    sums[1] = 1<br/>    for n=1 to limit do<br/>        for i=n*81 to 1 by -1 do<br/>            for j=1 to 9 do<br/>                integer s = j*j<br/>                if s&gt;i then exit end if<br/>                sums[i+1] += sums[i+1-s]<br/>            end for<br/>        end for<br/>        atom count89 = 0<br/>        for i=1 to n*81 do<br/>            integer r, digit, w = i<br/>            while w!=1 do<br/>                r = 0<br/>                while w!=0 do<br/>                    digit = mod(w,10)<br/>                    r += digit*digit<br/>                    w = floor(w/10)<br/>                end while<br/>                if r=89 then<br/>                    count89 += sums[i+1]<br/>                    if count89&gt;MAXINT then<br/>                        printf(1,\"counter overflow for 10^%d\\n\",n)<br/>                        return<br/>                    end if<br/>                    exit<br/>                end if<br/>                w = r<br/>            end while<br/>        end for<br/>        printf(1,\"There are\u00a0%d numbers from 1 to 10^%d ending with 89\\n\",{count89,n})<br/>    end for<br/>end procedure<br/>\u00a0<br/>atom t0 = time()<br/>main(20)<br/>?time()-t0</pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(de *Idx1or89 (89 . 89) ((1 . 1)))<br/>\u00a0<br/>(de 1or89 (N)<br/>   (let L (mapcar format (chop N))<br/>      (if (lup *Idx1or89 (setq N (sum * L L)))<br/>         (cdr @)<br/>         (prog1<br/>            (1or89 N)<br/>            (idx '*Idx1or89 (cons N @) T) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>test: procedure options (main, reorder); /* 6 August 2015 */<br/>\u00a0<br/>   declare (m, n) fixed decimal (10);<br/>   declare (i, j, p, s, tally initial (0) ) fixed binary (31);<br/>   declare d fixed binary (7);<br/>   declare (start_time, finish_time, elapsed_time) float (15);<br/>\u00a0<br/>   start_time = secs();<br/>\u00a0<br/>   do m = 1 to 1000000;<br/>      n = m;<br/>      do until ((n = 1) | (n = 89));<br/>         p = n; s = 0;<br/>         do while (p &gt; 0);<br/>            d = mod(p, 10);<br/>            p = p/10;<br/>            s = s + d*d;<br/>         end;<br/>         n = s;<br/>      end;<br/>      if n = 89 then tally = tally + 1;<br/>   end;<br/>\u00a0<br/>   finish_time = secs();<br/>   put skip edit (Tally, ' numbers iterated to 89') (f(10), A);<br/>   elapsed_time = finish_time - start_time;<br/>   put skip edit ('Elapsed time=', elapsed_time, ' secs') (A, F(10,3));<br/>\u00a0<br/>end test;<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 38, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Procedure</span> is89<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">While</span> x\u00a0: s<span class=\"sy0\">+</span> x<span class=\"sy0\">%</span>10<span class=\"sy0\">*</span>x<span class=\"sy0\">%</span>10\u00a0: x<span class=\"sy0\">/</span><span class=\"nu0\">10</span>\u00a0: <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">If</span> s<span class=\"sy0\">=</span><span class=\"nu0\">89</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> s<span class=\"sy0\">=</span><span class=\"nu0\">1</span> \u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>    x<span class=\"sy0\">=</span>s<br/>  <span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> sums<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">*</span><span class=\"nu0\">81</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: sums<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0: sums<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">*</span><span class=\"nu0\">81</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>        s<span class=\"sy0\">=</span>j<span class=\"sy0\">*</span>j\u00a0: <span class=\"kw1\">If</span> s<span class=\"sy0\">&gt;</span>i\u00a0: <span class=\"kw1\">Break</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>        sums<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>sums<span class=\"br0\">(</span>i<span class=\"sy0\">-</span>s<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    count89<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">*</span><span class=\"nu0\">81</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> is89<span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Continue</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">If</span> sums<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">9223372036854775807</span><span class=\"sy0\">-</span>count89<br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"counter overflow for 10^\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">EndIf</span><br/>      count89<span class=\"sy0\">+</span>sums<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"1-&gt;10^\"</span><span class=\"sy0\">+</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<span class=\"nu0\">2</span>,<span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>count89<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>start<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"elapsed milliseconds= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 56, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> ceil<span class=\"sy0\">,</span> log10<span class=\"sy0\">,</span> factorial<br/>\u00a0<br/><span class=\"kw1\">def</span> next_step<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>        result +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>x\u00a0% <span class=\"nu0\">10</span><span class=\"br0\">)</span> ** <span class=\"nu0\">2</span><br/>        x /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">return</span> result<br/>\u00a0<br/><span class=\"kw1\">def</span> check<span class=\"br0\">(</span>number<span class=\"br0\">)</span>:<br/>    candidate <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> number:<br/>        candidate <span class=\"sy0\">=</span> candidate * <span class=\"nu0\">10</span> + n<br/>\u00a0<br/>    <span class=\"kw1\">while</span> candidate <span class=\"sy0\">!=</span> <span class=\"nu0\">89</span> <span class=\"kw1\">and</span> candidate <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:<br/>        candidate <span class=\"sy0\">=</span> next_step<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> candidate <span class=\"sy0\">==</span> <span class=\"nu0\">89</span>:<br/>        digits_count <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * <span class=\"nu0\">10</span><br/>        <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> number:<br/>            digits_count<span class=\"br0\">[</span>d<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>        result <span class=\"sy0\">=</span> factorial<span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> digits_count:<br/>            result /<span class=\"sy0\">=</span> factorial<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> result<br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    limit <span class=\"sy0\">=</span> <span class=\"nu0\">100000000</span><br/>    cache_size <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>ceil<span class=\"br0\">(</span>log10<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"nu0\">10</span> ** cache_size <span class=\"sy0\">==</span> limit<br/>\u00a0<br/>    number <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * cache_size<br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    i <span class=\"sy0\">=</span> cache_size - <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span>:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> cache_size - <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span>:<br/>            number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            result +<span class=\"sy0\">=</span> check<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span>:<br/>            i -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span>:<br/>            number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cache_size<span class=\"br0\">)</span>:<br/>                number<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> number<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            i <span class=\"sy0\">=</span> cache_size - <span class=\"nu0\">1</span><br/>            result +<span class=\"sy0\">=</span> check<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> result<br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 96, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Tim-brown 2014-09-11<br/>\u00a0<br/>;; The basic definition.<br/>;; It is possible to memoise this or use fixnum (native) arithmetic, but frankly iterating over a<br/>;; hundred million, billion, trillion numbers will be slow. No matter how you do it.<br/>(define (digit^2-sum n)<br/>  (let loop ((n n) (s 0))<br/>    (if (= 0 n) s (let-values ([(q r) (quotient/remainder n 10)]) (loop q (+ s (sqr r)))))))<br/>\u00a0<br/>(define (iterated-digit^2-sum n)<br/>  (match (digit^2-sum n) [0 0] [1 1] [89 89] [(app iterated-digit^2-sum rv) rv]))<br/>\u00a0<br/>;; Note that: ids(345) = ids(354) = ids(435) = ids(453) = ids(534) = ids(543) = 50 --&gt; 89<br/>;; One calculation does for 6 candidates.<br/>;; The plan:<br/>;;  - get all the ordered combinations of digits including 0's which can be used both as digits and<br/>;;    \"padding\" digits in the most significant digits. (n.b. all-zeros is not in the range to be<br/>;;    tested and should be dropped)<br/>;;  - find the digit sets that have an IDS of 89<br/>;;  - find out how many combinations there are of these digits<br/>\u00a0<br/>;; output: a list of n-digits long lists containing all of the digit combinations.<br/>;;         a smart bunny would figure out the sums of the digits as they're generated but I'll plod<br/>;;         along step-by-step. a truly smart bunny would also count the combinations. that said, I<br/>;;         don't think I do much unnecessary computation here.<br/>(define (all-digit-lists n-digits)<br/>  (define (inner remain acc least-digit)<br/>    (cond<br/>      [(zero? remain) (list (list))]<br/>      [(= least-digit 10) null]<br/>      [else<br/>       (for*/list<br/>           ((ld+ (in-range least-digit 10))<br/>            (rgt (in-list (inner (sub1 remain) empty ld+))))           <br/>         (append acc (cons ld+ rgt)))]))<br/>  (inner n-digits '() 0))<br/>\u00a0<br/>;; We calculate IDS differently since we're presented with a list of digits rather than a number<br/>(define (digit-list-IDS c)<br/>  (define (digit-combo-IDS c)<br/>    (apply + (map sqr c)))  <br/>  (iterated-digit^2-sum (digit-combo-IDS c)))<br/>\u00a0<br/>;;\u00a0! (factiorial) -- everyone's favourite combinatorial function! (that's just an exclamation mark)<br/>;; there's one in (require math/number-theory) for any heavy lifting, but we're not or I could import<br/>;; it from math/number-theory -- but this is about all I need. A lookup table is going to be faster<br/>;; than a more general function.<br/>(define (! n)<br/>  (case n [(0 1) 1] [(2) 2] [(3) 6] [(4) 24] [(5) 120] [(6) 720] [(7) 5040] [(8) 40320] [(9) 362880]<br/>    [else (* n (! (sub1 n)))]\u00a0; I expect this clause'll never be called<br/>    ))<br/>\u00a0<br/>;; We need to count the permutations -- digits are in order so we can use the tail (cdr) function for<br/>;; determining my various k's. See: https://en.wikipedia.org/wiki/Combination<br/>(define (count-digit-list-permutations c #:length (l (length c)) #:length! (l! (! l)))<br/>  (let loop ((c c) (i 0) (prev -1 #;\"never a digit\") (p l!))<br/>    (match c<br/>      [(list) (/ p (! i))]<br/>      [(cons (== prev) d) (loop d (+ i 1) prev p)]<br/>      [(cons a d) (loop d 1 a (/ p (! i)))])))<br/>\u00a0<br/>;; Wrap it all up in a neat function<br/>(define (count-89s-in-100... n)<br/>  (define n-digits (order-of-magnitude n))<br/>  (define combos (drop (all-digit-lists n-digits) 1))\u00a0; don't want first one which is \"all-zeros\"<br/>  (for/sum ((c (in-list combos)) #:when (= 89 (digit-list-IDS c)))<br/>    (count-digit-list-permutations c #:length n-digits)))<br/>\u00a0<br/>(displayln \"Testing permutations:\")<br/>(time (printf \"1000000:\\t~a~%\"        (count-89s-in-100...       1000000)))<br/>(time (printf \"100000000:\\t~a~%\"      (count-89s-in-100...     100000000)))<br/>(time (printf \"1000000000:\\t~a~%\"     (count-89s-in-100...    1000000000)))<br/>(time (printf \"1000000000000:\\t~a~%\"  (count-89s-in-100... 1000000000000)))<br/>(newline)<br/>;; Do these last, since the 10^8 takes longer than my ADHD can cope with<br/>(displayln \"Testing one number at a time (somewhat slower):\")<br/>(time (printf \"1000000:\\t~a~%\"   (for/sum ((n (in-range 1   1000000))<br/>                                           #:when (= 89 (iterated-digit^2-sum n))) 1)))<br/>(time (printf \"100000000:\\t~a~%\" (for/sum ((n (in-range 1 100000000))<br/>                                           #:when (= 89 (iterated-digit^2-sum n))) 1)))<br/>\u00a0<br/>{module+ test<br/>  (require tests/eli-tester)<br/>  [test<br/>   (iterated-digit^2-sum 15) =&gt; 89<br/>   (iterated-digit^2-sum 7) =&gt; 1<br/>   (digit-combo-perms '()) =&gt; 1<br/>   (digit-combo-perms '(1 2 3)) =&gt; 6<br/>   (digit-combo-perms '(1 1 3)) =&gt; 3<br/>   (for/sum ((n (in-range 1 1000000)) #:when (= 89 (iterated-digit^2-sum n))) 1) =&gt; 856929<br/>   (all-digit-lists 1) =&gt; '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))<br/>   (length (all-digit-lists 2)) =&gt; 55<br/>   (length (all-digit-lists 3)) =&gt; 220<br/>   (count-89s-in-100... 1000000) =&gt; 856929]<br/>  }</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs the squaring of iterated digits  (until the sum equals 1 or 89).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span>           <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">9</span>; \u00a0!<span class=\"sy0\">.</span>m=m<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span>    <span class=\"coMULTI\">/*build a short\u2500cut for the squares.   */</span><br/>a<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;                                #<span class=\"sy0\">.</span>=!<span class=\"sy0\">.</span>       <span class=\"coMULTI\">/*intermediate counts of some numbers. */</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;                  x=j         <span class=\"coMULTI\">/* [\u2193] process the numbers in the range*/</span><br/>       <span class=\"kw1\">do</span> q=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> s==<span class=\"nu0\">89</span> <span class=\"sy0\">|</span> s==<span class=\"nu0\">1</span>;   s=<span class=\"nu0\">0</span>         <span class=\"coMULTI\">/*add sum of the squared decimal digits*/</span><br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> x==<span class=\"st0\">''</span>                     <span class=\"coMULTI\">/*process each of the dec. digits in X.*/</span><br/>             <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> x _ +<span class=\"nu0\">1</span> x;     s=s +\u00a0!<span class=\"sy0\">.</span>_   <span class=\"coMULTI\">/*get a digit;  sum the fast square,   */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until x \u00b7\u00b7\u00b7 */</span>              <span class=\"coMULTI\">/* [\u2191]  S\u2261is sum of the squared digits.*/</span><br/>       z<span class=\"sy0\">.</span>q=s                                     <span class=\"coMULTI\">/*assign sum to a temporary auxiliary. */</span><br/>       <span class=\"kw1\">if</span> a<span class=\"sy0\">.</span>s<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  s=a<span class=\"sy0\">.</span>s;  <span class=\"kw1\">leave</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*Found a previous sum?  Then use that.*/</span><br/>       x=s                                       <span class=\"coMULTI\">/*substitute the sum for the \"new\"  X. */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*q*/</span>                               <span class=\"coMULTI\">/* [\u2191]  keep looping 'til   S= 1 or 89.*/</span><br/>                   <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> q;  _=a<span class=\"sy0\">.</span>f;  a<span class=\"sy0\">.</span>_=s <span class=\"coMULTI\">/*use the auxiliary arrays (for lookup)*/</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span><br/>     #<span class=\"sy0\">.</span>s=#<span class=\"sy0\">.</span>s + <span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*bump the counter for the 1's or 89's.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">88</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;   @k=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'\"'</span>k<span class=\"st0\">'\"'</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*display two results; define a literal*/</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'count of'</span>   @k   <span class=\"st0\">\" chains for all natural numbers up to \"</span>     n     <span class=\"st0\">' is:'</span>      #<span class=\"sy0\">.</span>k<br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                    <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nr = 1000<br/>num = 0<br/>for n = 1 to nr <br/>   sum = 0<br/>   for m = 1 to len(string(n))<br/>       sum += pow(number(substr(string(n),m,1)),2)<br/>       if sum = 89 num += 1 see \"\" + n + \" \" + sum + nl ok<br/>   next<br/>next   <br/>see \"Total under 1000 is\u00a0: \" + num + nl <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 30, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Count how many number chains for Natural Numbers &lt; 10**d end with a value of 1.</span><br/><span class=\"kw1\">def</span> iterated_square_digit<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>  f = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,\u00a0:<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">}</span>      <span class=\"co1\">#Some small factorials</span><br/>  g = <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> res = <span class=\"nu0\">0</span><br/>               <span class=\"kw1\">while</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>                 n, mod = n.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                 res <span class=\"sy0\">+</span>= mod<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>               <span class=\"kw1\">end</span><br/>               res==<span class=\"nu0\">89</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: res<br/>             <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">#An array: table[n]==0 means that n translates to 89 and 1 means that n translates to 1</span><br/>  table = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>d<span class=\"sy0\">*</span><span class=\"nu0\">81</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n.<span class=\"me1\">zero</span>?\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>i=g.<span class=\"me1\">call</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"nu0\">89</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: i<span class=\"br0\">}</span><br/>  table.<span class=\"me1\">collect</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n = table<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">while</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>; n<span class=\"br0\">}</span><br/>  z = <span class=\"nu0\">0</span>                                             <span class=\"co1\">#Running count of numbers translating to 1</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"nu0\">0</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">repeated_combination</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>rc<span class=\"sy0\">|</span>           <span class=\"co1\">#Iterate over unique digit combinations</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> table<span class=\"br0\">[</span>rc.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>g,n<span class=\"sy0\">|</span> g<span class=\"sy0\">+</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">}</span><span class=\"br0\">]</span>.<span class=\"me1\">zero</span>?  <span class=\"co1\">#Count only ones</span><br/>    nn = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>                                   <span class=\"co1\">#Determine how many numbers this digit combination corresponds to</span><br/>    rc.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> nn<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    z <span class=\"sy0\">+</span>= nn.<span class=\"me1\">inject</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>gn,n<span class=\"sy0\">|</span> gn <span class=\"sy0\">/</span> f<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">}</span>          <span class=\"co1\">#Add to the count of numbers terminating in 1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>d=(#{d}) in the range 1 to #{10**d-1}\"</span>,<br/>       <span class=\"st0\">\"#{z} numbers produce 1 and #{10**d-1-z} numbers produce 89\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">17</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>  t0 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>  iterated_square_digit<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"  #{Time.now - t0} sec\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">fn digit_square_sum(mut num: usize) -&gt; usize {<br/>    let mut sum = 0;<br/>    while num\u00a0!= 0 {<br/>        sum += (num\u00a0% 10).pow(2);<br/>        num /= 10;<br/>    }<br/>    sum<br/>}<br/>\u00a0<br/>fn last_in_chain(num: usize) -&gt; usize {<br/>    match num {<br/>        1 | 89 =&gt; num,<br/>        _ =&gt; last_in_chain(digit_square_sum(num)),<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let count = (1..100_000_000).filter(|&amp;n| last_in_chain(n) == 89).count();<br/>    println!(\"{}\", count);<br/>}</pre>"}, {"lang": "Scala", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Euler92 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> executionStart <span class=\"sy0\">=</span> compat.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span>tailrec<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> calcRec<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>tailrec<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter0<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, total<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rest <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        iter0<span class=\"br0\">(</span>n / <span class=\"nu0\">10</span>, total + rest <span class=\"sy0\">*</span> rest<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> total<br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">89</span> || i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> calcRec<span class=\"br0\">(</span>iter0<span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> calcConv<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> i<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">89</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        total +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><br/>        n /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>      <span class=\"br0\">}</span><br/>      n <span class=\"sy0\">=</span> total<br/>    <span class=\"br0\">}</span><br/>    n<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> until <span class=\"nu0\">100000000</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span>calcConv<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Runtime conventional loop.[total ${compat.Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> executionStart0 <span class=\"sy0\">=</span> compat.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>  println<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> until <span class=\"nu0\">100000000</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span>calcRec<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">89</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Runtime recursive loop.   [total ${compat.Platform.currentTime - executionStart0} ms]\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> ids n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">89</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lmap x <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$n</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> count <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>ids <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"nu0\">89</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$count</span></pre>"}, {"lang": "VBScript", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>start_time = Now<br/>cnt = 0<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 100000000<br/>\tn = i<br/>\tsum = 0<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> n = 1 <span class=\"kw3\">Or</span> n = 89<br/>\t\t<span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> Len(n)<br/>\t\t\tsum = sum + (CLng(Mid(n,j,1))^2)<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tn = sum<br/>\t\tsum = 0<br/>\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">If</span> n = 89 <span class=\"kw3\">Then</span><br/>\t\tcnt = cnt + 1<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span><br/>end_time = Now<br/>\u00a0<br/>WScript.Echo <span class=\"st0\">\"Elapse Time: \"</span> &amp; DateDiff(<span class=\"st0\">\"s\"</span>,start_time,end_time) &amp;_<br/>\t\t\tvbCrLf &amp; <span class=\"st0\">\"Count: \"</span> &amp; cnt<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 32, "block": "<pre class=\"text highlighted_source\">fcn check(number){  // a list of digits: 13 is L(0,0,0,0,0,0,1,3)<br/>   candidate:=number.reduce(fcn(sum,n){ sum*10 + n },0);  // digits to int<br/>\u00a0<br/>   while(candidate\u00a0!= 89 and candidate\u00a0!= 1)  // repeatedly sum squares of digits<br/>      { candidate = candidate.split().reduce(fcn(sum,c){ sum + c*c },0); }<br/>\u00a0<br/>   if(candidate == 89){ // count permutations of these digits, they all sum to 89<br/>      digitsCount:=List(0,0,0,0,0,0,0,0,0,0);<br/>      foreach d in (number){ digitsCount[d] += 1; }<br/>      return(digitsCount.reduce(fcn(r,c){ r/factorial(c) },cacheBang)); // cacheBang==number.len()!<br/>   }<br/>   0 // this number doesn't sum to 89 (ie sums to 1)<br/>}<br/>fcn factorial(n) { (1).reduce(n,fcn(N,n){ N*n },1) }<br/>\u00a0<br/>limit:=0d100_000_000;  cacheSize:=limit.toFloat().log10().ceil().toInt();<br/>number:=(0).pump(cacheSize,List().write,0); // list of zeros<br/>result:=0; i:=cacheSize - 1;<br/>var cacheBang=factorial(cacheSize);  //== number.len()!<br/>\u00a0<br/>while(True){  // create numbers s.t. no set of digits is repeated<br/>   if(i == 0 and number[i] == 9) break;<br/>   if(i == cacheSize - 1 and number[i] &lt; 9){ number[i] += 1; result += check(number); }<br/>   else if(number[i] == 9) i -= 1;<br/>   else{<br/>      number[i] += 1;<br/>      foreach j in ([i + 1 .. cacheSize - 1]){ number[j] = number[i]; }<br/>      i = cacheSize - 1;<br/>      result += check(number);<br/>   }<br/>}<br/>println(result);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 14, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">0</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> j=i<br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> k=<span class=\"nu0\">0</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> k=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>k+FN m<span class=\"br0\">(</span>j,<span class=\"nu0\">10</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> j=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>j/<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> j&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> j=k<br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> j=<span class=\"nu0\">89</span> <span class=\"kw4\">OR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">95</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">40</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> j&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=n+<span class=\"nu0\">1</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Version 1: \"</span>;n<br/><span class=\"nu0\">200</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b: <span class=\"co3\">REM modulo</span></pre>"}]}