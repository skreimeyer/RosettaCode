{"task": "Execute_a_Markov_algorithm", "blocks": [{"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>\u00a0<br/><span class=\"kw3\">package</span> Markov <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>   <span class=\"kw3\">type</span> Ruleset <span class=\"br0\">(</span>Length\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">type</span> String_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Unbounded_String;<br/>   <span class=\"kw3\">function</span> Parse <span class=\"br0\">(</span>S\u00a0: String_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Ruleset;<br/>   <span class=\"kw3\">function</span> Apply <span class=\"br0\">(</span>R\u00a0: Ruleset; S\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Entry_Kind <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Comment, Rule<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Set_Entry <span class=\"br0\">(</span>Kind\u00a0: Entry_Kind\u00a0:= Rule<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      <span class=\"kw1\">case</span> Kind <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> Rule =&gt;<br/>            Source        \u00a0: Unbounded_String;<br/>            Target        \u00a0: Unbounded_String;<br/>            Is_Terminating\u00a0: Boolean;<br/>         <span class=\"kw3\">when</span> Comment =&gt;<br/>            Text          \u00a0: Unbounded_String;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw3\">subtype</span> Rule_Entry <span class=\"kw1\">is</span> Set_Entry <span class=\"br0\">(</span>Kind =&gt; Rule<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Entry_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Set_Entry;<br/>   <span class=\"kw3\">type</span> Ruleset <span class=\"br0\">(</span>Length\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Entries\u00a0: Entry_Array <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Length</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> Markov;</pre>"}, {"lang": "AutoHotkey", "loc": 354, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"co1\">; Markov Algorithm.ahk</span><br/><span class=\"co1\">; by wolf_II</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"co1\">; interpreter for a Markov Algorithm</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">AutoExecute: </span><span class=\"co1\">; auto-execute section of the script</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force          <span class=\"co1\">; only one instance allowed</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a>                          <span class=\"co1\">; don't check empty variables</span><br/>    StartupDir <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_WorkingDir\"><span class=\"kw2\">A_WorkingDir</span></a>      <span class=\"co1\">; remember startup directory</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/SetWorkingDir.htm\"><span class=\"kw3\">SetWorkingDir</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptDir%</span>    <span class=\"co1\">; change directoy</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringCaseSense.htm\"><span class=\"kw3\">StringCaseSense</span></a><span class=\"sy0\">,</span> On             <span class=\"co1\">; case sensitive comparisons</span><br/>    <span class=\"co1\">;-----------------------------------------------------------------------</span><br/>    AppName <span class=\"sy0\">:=</span> <span class=\"st0\">\"Markov Algorithm\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> GuiCreate<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%AppName%</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">GuiCreate: </span><span class=\"co1\">; create the GUI</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <span class=\"co1\">; GUI options</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>MinimizeBox<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> y0 h0 <span class=\"co1\">; catch the focus</span><br/>\u00a0<br/>    <span class=\"co1\">; Ruleset</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> GroupBox<span class=\"sy0\">,</span> w445 h145 Section<span class=\"sy0\">,</span> Ruleset<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> xs<span class=\"sy0\">+</span><span class=\"nu0\">15</span> ys<span class=\"sy0\">+</span><span class=\"nu0\">20</span> w300 r8 vRuleset<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">15</span> w100<span class=\"sy0\">,</span> Load Ruleset<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> wp<span class=\"sy0\">,</span> Save Ruleset<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> w30<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">5</span> wp<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">5</span> wp<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> xs<span class=\"sy0\">+</span><span class=\"nu0\">330</span> y<span class=\"sy0\">+</span><span class=\"nu0\">6</span> wp<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">5</span> wp<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>\u00a0<br/>    <span class=\"co1\">; String</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> GroupBox<span class=\"sy0\">,</span> xs w445 h75 Section<span class=\"sy0\">,</span> String<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> xs<span class=\"sy0\">+</span><span class=\"nu0\">15</span> ys<span class=\"sy0\">+</span><span class=\"nu0\">20</span> w300 vString<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">15</span> w100<span class=\"sy0\">,</span> Apply Ruleset<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> xp wp Hidden<span class=\"sy0\">,</span> Stop<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Checkbox\"><span class=\"kw8\">CheckBox</span></a><span class=\"sy0\">,</span> xs<span class=\"sy0\">+</span><span class=\"nu0\">15</span> yp<span class=\"sy0\">+</span><span class=\"nu0\">30</span> vSingleStepping<span class=\"sy0\">,</span> Single Stepping?<br/>\u00a0<br/>    <span class=\"co1\">; Output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> GroupBox<span class=\"sy0\">,</span> xs w445 h235 Section<span class=\"sy0\">,</span> Output<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> xs<span class=\"sy0\">+</span><span class=\"nu0\">15</span> ys<span class=\"sy0\">+</span><span class=\"nu0\">20</span> w415 r15 ReadOnly vOutput HwndhOut<br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">ButtonLoadRuleset: </span><span class=\"co1\">; load ruleset from file</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>OwnDialogs<br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileSelectFile.htm\"><span class=\"kw3\">FileSelectFile</span></a><span class=\"sy0\">,</span> RulesetFile<span class=\"sy0\">,,,</span> Load Ruleset<span class=\"sy0\">,</span> <span class=\"sy0\">*.</span>markov<br/>    <span class=\"kw1\">If</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>RulesetFile<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".markov\"</span><br/>        RulesetFile <span class=\"sy0\">.=</span> <span class=\"st0\">\".markov\"</span><br/>    <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">FileExist</span></a><span class=\"br0\">(</span>RulesetFile<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> Ruleset<span class=\"sy0\">,</span> <span class=\"re0\">%RulesetFile%</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span> <span class=\"re0\">%Ruleset%</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">Else</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> Error <span class=\"sy0\">-</span> <span class=\"re0\">%AppName%</span><span class=\"sy0\">,</span> File not found:`n`n<span class=\"st0\">\"%RulesetFile%\"</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">ButtonSaveRuleset: </span><span class=\"co1\">; save ruleset to file</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>OwnDialogs<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileSelectFile.htm\"><span class=\"kw3\">FileSelectFile</span></a><span class=\"sy0\">,</span> RulesetFile<span class=\"sy0\">,</span> S16<span class=\"sy0\">,,</span> Save Ruleset<span class=\"sy0\">,</span> <span class=\"sy0\">*.</span>markov<br/>    <span class=\"kw1\">If</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>RulesetFile<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".markov\"</span><br/>        RulesetFile <span class=\"sy0\">.=</span> <span class=\"st0\">\".markov\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%RulesetFile%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Ruleset%</span><span class=\"sy0\">,</span> <span class=\"re0\">%RulesetFile%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>_<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Button1: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm#Ruleset_1</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> String<span class=\"sy0\">,</span> I bought a B of As from T S<span class=\"sy0\">.</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>LTrim<br/>    # This rules file is extracted from <span class=\"re2\">Wikipedia:<br/></span>    # http:<span class=\"sy0\">//</span>en<span class=\"sy0\">.</span>wikipedia<span class=\"sy0\">.</span>org<span class=\"sy0\">/</span>wiki<span class=\"sy0\">/</span>Markov_Algorithm<br/>    A <span class=\"sy0\">-&gt;</span> apple<br/>    B <span class=\"sy0\">-&gt;</span> bag<br/>    S <span class=\"sy0\">-&gt;</span> shop<br/>    T <span class=\"sy0\">-&gt;</span> the<br/>    the shop <span class=\"sy0\">-&gt;</span> my brother<br/>    a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Button2: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm#Ruleset_2</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> String<span class=\"sy0\">,</span> I bought a B of As from T S<span class=\"sy0\">.</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>LTrim<br/>    # Slightly modified from the rules on Wikipedia<br/>    A <span class=\"sy0\">-&gt;</span> apple<br/>    B <span class=\"sy0\">-&gt;</span> bag<br/>    S <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>shop<br/>    T <span class=\"sy0\">-&gt;</span> the<br/>    the shop <span class=\"sy0\">-&gt;</span> my brother<br/>    a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Button3: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm#Ruleset_3</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> String<span class=\"sy0\">,</span> I bought a B of As W my Bgage from T S<span class=\"sy0\">.</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>LTrim<br/>    # BNF Syntax testing rules<br/>    A <span class=\"sy0\">-&gt;</span> apple<br/>    WWWW <span class=\"sy0\">-&gt;</span> with<br/>    Bgage <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-&gt;.*</span><br/>    B <span class=\"sy0\">-&gt;</span> bag<br/>    <span class=\"sy0\">-&gt;.*</span> <span class=\"sy0\">-&gt;</span> money<br/>    W <span class=\"sy0\">-&gt;</span> WW<br/>    S <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>shop<br/>    T <span class=\"sy0\">-&gt;</span> the<br/>    the shop <span class=\"sy0\">-&gt;</span> my brother<br/>    a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Button4: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm#Ruleset_4</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> String<span class=\"sy0\">,</span> _1111<span class=\"sy0\">*</span><span class=\"nu0\">11111</span>_<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>LTrim<br/>    ### Unary Multiplication Engine<span class=\"sy0\">,</span> for testing Markov Algorithm implementations<br/>    ### By Donal Fellows<span class=\"sy0\">.</span><br/>    # Unary addition engine<br/>    _<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> _1<span class=\"sy0\">+</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">+</span><br/>    # Pass for converting from the splitting of multiplication into ordinary<br/>    # addition<br/>    <span class=\"nu0\">1</span>! <span class=\"sy0\">-&gt;</span>\u00a0!<span class=\"nu0\">1</span><br/>    <span class=\"sy0\">,</span>! <span class=\"sy0\">-&gt;</span>\u00a0!<span class=\"sy0\">+</span><br/>    _! <span class=\"sy0\">-&gt;</span> _<br/>    # Unary multiplication by duplicating <span class=\"kw6\">left</span> side<span class=\"sy0\">,</span> <span class=\"kw6\">right</span> side times<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">,</span>@y<br/>    1x <span class=\"sy0\">-&gt;</span> xX<br/>    X<span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><br/>    X1 <span class=\"sy0\">-&gt;</span> 1X<br/>    _x <span class=\"sy0\">-&gt;</span> _X<br/>    <span class=\"sy0\">,</span>x <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">,</span>X<br/>    y1 <span class=\"sy0\">-&gt;</span> 1y<br/>    y_ <span class=\"sy0\">-&gt;</span> _<br/>    # Next phase of applying<br/>    <span class=\"nu0\">1</span>@1 <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">,</span>@y<br/>    <span class=\"nu0\">1</span>@_ <span class=\"sy0\">-&gt;</span> @_<br/>    <span class=\"sy0\">,</span>@_ <span class=\"sy0\">-&gt;</span>\u00a0!_<br/>    <span class=\"sy0\">++</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">+</span><br/>    # Termination cleanup for addition<br/>    _1 <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">+</span>_ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>    _<span class=\"sy0\">+</span>_ <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Button5: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm#Ruleset_5</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear output</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> String<span class=\"sy0\">,</span> 000000A000000<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Ruleset<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>LTrim<br/>    # Turing <span class=\"re2\">machine: </span>three<span class=\"sy0\">-</span>state busy beaver<br/>    #<br/>    # state A<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">right</span><span class=\"sy0\">,</span> new state B<br/>    A0 <span class=\"sy0\">-&gt;</span> 1B<br/>    # state A<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">left</span><span class=\"sy0\">,</span> new state C<br/>    0A1 <span class=\"sy0\">-&gt;</span> C01<br/>    1A1 <span class=\"sy0\">-&gt;</span> C11<br/>    # state B<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">left</span><span class=\"sy0\">,</span> new state A<br/>    0B0 <span class=\"sy0\">-&gt;</span> A01<br/>    1B0 <span class=\"sy0\">-&gt;</span> A11<br/>    # state B<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">right</span><span class=\"sy0\">,</span> new state B<br/>    B1 <span class=\"sy0\">-&gt;</span> 1B<br/>    # state C<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">left</span><span class=\"sy0\">,</span> new state B<br/>    0C0 <span class=\"sy0\">-&gt;</span> B01<br/>    1C0 <span class=\"sy0\">-&gt;</span> B11<br/>    # state C<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> write <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move <span class=\"kw6\">left</span><span class=\"sy0\">,</span> halt<br/>    0C1 <span class=\"sy0\">-&gt;</span> H01<br/>    1C1 <span class=\"sy0\">-&gt;</span> H11<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">ButtonApplyRuleset: </span><span class=\"co1\">; flow control for Algorithm</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <span class=\"co1\">; prepare</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Output <span class=\"co1\">; clear</span><br/>    Controls<span class=\"br0\">(</span>False<span class=\"br0\">)</span> <span class=\"co1\">; disable</span><br/>    Count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    Subst <span class=\"sy0\">:=</span> True<br/>    Stop  <span class=\"sy0\">:=</span> False<br/>\u00a0<br/>    <span class=\"co1\">; keep substituting for as long as necessary</span><br/>    <span class=\"kw1\">While</span><span class=\"sy0\">,</span> Subst <span class=\"br0\">{</span><br/>        Subst <span class=\"sy0\">:=</span> False <span class=\"co1\">; reset control variable</span><br/>        IfEqual<span class=\"sy0\">,</span> Stop<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> Algorithm<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">; clean up</span><br/>    Output<span class=\"br0\">(</span><span class=\"st0\">\"Substitution count: \"</span> Count<span class=\"br0\">)</span><br/>    Controls<span class=\"br0\">(</span>True<span class=\"br0\">)</span> <span class=\"co1\">; re-enable</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">ButtonStop: </span><span class=\"co1\">; this button is initially hidden</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    Stop <span class=\"sy0\">:=</span> True<br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Algorithm: </span><span class=\"co1\">; http://rosettacode.org/wiki/Execute_a_Markov_algorithm</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <span class=\"co1\">; Parse the ruleset and apply each rule to the string. Whenever a rule</span><br/>    <span class=\"co1\">; has changed the string goto first rule. Continue until a encountering</span><br/>    <span class=\"co1\">; a terminating rule, or until no further changes to the strings are</span><br/>    <span class=\"co1\">; made.</span><br/>    <span class=\"co1\">;-----------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Ruleset<span class=\"sy0\">,</span> `n<span class=\"sy0\">,</span> `r <span class=\"co1\">; always start from the beginning</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">; check for comment</span><br/>        <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a> <span class=\"co1\">; get next line</span><br/>\u00a0<br/>        <span class=\"co1\">; split a rule into $Search, $Terminator and $Replace</span><br/>        LookFor <span class=\"sy0\">:=</span> <span class=\"st0\">\"(?P&lt;Search&gt;.+) -&gt; (?P&lt;Terminator&gt;\\.?)(?P&lt;Replace&gt;.+)\"</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> LookFor<span class=\"sy0\">,</span> $<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">; single stepping through possible substitutions</span><br/>        <span class=\"kw1\">If</span> SingleStepping<br/>            <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%AppName%</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"\"</span><br/>            <span class=\"sy0\">.</span> <span class=\"st0\">\"Rule = \"</span><span class=\"st0\">\"\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"\"</span><span class=\"st0\">\"`n`n\"</span><br/>            <span class=\"sy0\">.</span> <span class=\"st0\">\"Search`t= \"</span><span class=\"st0\">\"\"</span> $Search <span class=\"st0\">\"\"</span><span class=\"st0\">\"`n\"</span><br/>            <span class=\"sy0\">.</span> <span class=\"st0\">\"Replace`t= \"</span><span class=\"st0\">\"\"</span> $Replace <span class=\"st0\">\"\"</span><span class=\"st0\">\"`n\"</span><br/>            <span class=\"sy0\">.</span> <span class=\"st0\">\"Termintor`t= \"</span><span class=\"st0\">\"\"</span> <span class=\"br0\">(</span>$Terminator\u00a0? <span class=\"st0\">\"True\"</span>\u00a0: <span class=\"st0\">\"False\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"`n\"</span><br/>\u00a0<br/>        <span class=\"co1\">; try to substitute</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> String<span class=\"sy0\">,</span> String<span class=\"sy0\">,</span>\u00a0%$Search%<span class=\"sy0\">,</span>\u00a0%$Replace%<span class=\"sy0\">,</span> UseErrorLevel<br/>\u00a0<br/>        <span class=\"co1\">; any success?</span><br/>        <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a> <span class=\"br0\">{</span>     <span class=\"co1\">; yes, substitution done</span><br/>            Count<span class=\"sy0\">++</span>         <span class=\"co1\">; keep count</span><br/>            Subst <span class=\"sy0\">:=</span> True   <span class=\"co1\">; set control variable</span><br/>            Output<span class=\"br0\">(</span>String<span class=\"br0\">)</span>  <span class=\"co1\">; write new string to output</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">; terminate?</span><br/>        <span class=\"kw1\">If</span> $Terminator <span class=\"br0\">{</span>    <span class=\"co1\">; yes, terminate</span><br/>            Stop <span class=\"sy0\">:=</span> True    <span class=\"co1\">; set control variable</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a>           <span class=\"co1\">; back to flow control</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">; we are not yet terminated ...</span><br/>        <span class=\"kw1\">If</span> Subst            <span class=\"co1\">; but we just did a substitution</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a>           <span class=\"co1\">; back to flow control</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>Controls<span class=\"br0\">(</span>Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; [en|dis]able controls</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    Enable  <span class=\"sy0\">:=</span> Bool\u00a0? <span class=\"st0\">\"+\"</span>\u00a0: <span class=\"st0\">\"-\"</span><br/>    Disable <span class=\"sy0\">:=</span> Bool\u00a0? <span class=\"st0\">\"-\"</span>\u00a0: <span class=\"st0\">\"+\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Disable%</span>ReadOnly<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Edit\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Disable%</span>Disabled<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Button\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Disable%</span>Disabled<span class=\"sy0\">,</span> Edit4<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Disable%</span>Hidden<span class=\"sy0\">,</span> Button10<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Enable%</span>Hidden<span class=\"sy0\">,</span> Button11<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Disable%</span>Disabled<span class=\"sy0\">,</span> Button12<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>Output<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; append text to output</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    static EM_REPLACESEL <span class=\"sy0\">=</span> 0xC2<br/>    global hOut<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a> <span class=\"sy0\">.=</span> <span class=\"st0\">\"`r`n\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/SendMessage.htm\"><span class=\"kw3\">SendMessage</span></a><span class=\"sy0\">,</span> EM_REPLACESEL<span class=\"sy0\">,,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,,</span> ahk_id <span class=\"re0\">%hOut%</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------- end of file ----------------------------------------------------</span></pre>"}, {"lang": "BBC BASIC", "loc": 35, "block": "<pre class=\"text highlighted_source\">      PRINT FNmarkov(\"ruleset1.txt\", \"I bought a B of As from T S.\")<br/>      PRINT FNmarkov(\"ruleset2.txt\", \"I bought a B of As from T S.\")<br/>      PRINT FNmarkov(\"ruleset3.txt\", \"I bought a B of As W my Bgage from T S.\")<br/>      PRINT FNmarkov(\"ruleset4.txt\", \"_1111*11111_\")<br/>      PRINT FNmarkov(\"ruleset5.txt\", \"000000A000000\")<br/>      END<br/>\u00a0<br/>      DEF FNmarkov(rulefile$, text$)<br/>      LOCAL i%, done%, rules%, rule$, old$, new$<br/>      rules% = OPENIN(rulefile$)<br/>      IF rules%=0 ERROR 100, \"Cannot open rules file\"<br/>      REPEAT<br/>        rule$ = GET$#rules%<br/>        IF ASC(rule$)&lt;&gt;35 THEN<br/>          REPEAT<br/>            i% = INSTR(rule$, CHR$(9))<br/>            IF i% MID$(rule$,i%,1) = \" \"<br/>          UNTIL i%=0<br/>          i% = INSTR(rule$, \" -&gt; \")<br/>          IF i% THEN<br/>            old$ = LEFT$(rule$,i%-1)<br/>            WHILE RIGHT$(old$)=\" \" old$ = LEFT$(old$)\u00a0: ENDWHILE<br/>            new$ = MID$(rule$,i%+4)<br/>            WHILE ASC(new$)=32 new$ = MID$(new$,2)\u00a0: ENDWHILE<br/>            IF ASC(new$)=46 new$ = MID$(new$,2)\u00a0: done% = TRUE<br/>            i% = INSTR(text$,old$)<br/>            IF i% THEN<br/>              text$ = LEFT$(text$,i%-1) + new$ + MID$(text$,i%+LEN(old$))<br/>              PTR#rules% = 0<br/>            ENDIF<br/>          ENDIF<br/>        ENDIF<br/>      UNTIL EOF#rules% OR done%<br/>      CLOSE #rules%<br/>      = text$</pre>"}, {"lang": "Bracmat", "loc": 216, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>markov=<br/>{<br/>First the patterns that describe the rules syntax.<br/>This is a naive and not very efficient way to parse the rules, but it closely<br/>matches the problem description, which is nice.<br/>}<br/>    ( ruleset<br/>    =     &gt;%@\" \"\u00a0?   { Added: assume that a rule cannot start with whitespace.<br/>                       The\u00a0%@ say that the thing to match must be exactly one<br/>                       byte.\u00a0% means 'one or more'. @ means 'zero or one'.<br/>                     }<br/>       \u00a0: ((!comment|!rule)\u00a0!newlines)\u00a0!ruleset<br/>      |         { Recursion terminates here: match empty string. }<br/>    )<br/>  &amp; (comment=\"#\"\u00a0?com)<br/>  &amp; ( rule<br/>    =  \u00a0%?pattern<br/>       \u00a0!whitespace<br/>        \"-&gt;\"<br/>       \u00a0!whitespace<br/>        ( \".\"\u00a0%?replacement&amp;stop:?stop<br/>        |\u00a0%?replacement<br/>        )<br/>    )<br/>  &amp; ( whitespace<br/>    = (\\t|\" \") (!whitespace|)<br/>    )<br/>  &amp; ( newlines<br/>    =   ( (\\n|\\r)<br/>        &amp; (\u00a0:!pattern:!replacement {Do nothing. We matched an empty line.}<br/>          |   (!pattern.!replacement.!stop)\u00a0!rules:?rules<br/>                { <br/>                Add pattern, replacement and the stop (empty string or \"stop\")<br/>                to a list of triplets. This list will contain the rules in<br/>                reverse order.<br/>                Then, reset these variables, so they are not added once more<br/>                if an empty line follows. <br/>                }<br/>            &amp;\u00a0:?stop:?pattern:?replacement<br/>          )<br/>        )<br/>        (!newlines|)<br/>    )<br/>{<br/>Compile the textual rules to a single Bracmat pattern.<br/>}<br/>  &amp; ( compileRules<br/>    =   stop pattern replacement rules,pat rep stp<br/>      .  \u00a0:?stop:?pattern:?replacement:?rules<br/>                {<br/>                Important! Initialise these variables.<br/>                }<br/>        &amp; @(!arg:!ruleset)<br/>                {<br/>                That's all. The textual rules are parsed and converted to a<br/>                list of triplets. The rules in the list are in reversed order.<br/>                }<br/>        &amp;\u00a0!rules:(?pat.?rep.?stp)\u00a0?rules<br/>                {<br/>                The head of the list is the last rule. Use it to initialise<br/>                the pattern \"ruleSetAsPattern\".<br/>                The single quote introduces a macro substition. All symbols<br/>                preceded with a $ are substituted.<br/>                }<br/>        &amp;     <br/>            ' (\u00a0?A ()$pat\u00a0?Z<br/>              &amp; $stp:?stop<br/>              &amp; $rep:?replacement<br/>              )<br/>         \u00a0: (=?ruleSetAsPattern)<br/>                {<br/>                Add all remaining rules as new subpatterns to<br/>                \"ruleSetAsPattern\". Separate with the OR symbol.<br/>                }<br/>        &amp;   whl<br/>          ' (\u00a0!rules:(?pat.?rep.?stp)\u00a0?rules<br/>            &amp;     <br/>                ' (  \u00a0?A ()$pat\u00a0?Z<br/>                    &amp; $stp:?stop<br/>                    &amp; $rep:?replacement<br/>                  | $ruleSetAsPattern<br/>                  )<br/>             \u00a0: (=?ruleSetAsPattern)<br/>            )<br/>        &amp; '$ruleSetAsPattern<br/>    )<br/>        {<br/>        Function that takes two arguments: a rule set (as text)<br/>        and a subject string.<br/>        The function returns the transformed string.<br/>        }<br/>  &amp; ( applyRules<br/>    =     rulesSetAsText subject ruleSetAsPattern<br/>        , A Z replacement stop<br/>      .  \u00a0!arg:(?rulesSetAsText.?subject)<br/>        &amp; compileRules$!rulesSetAsText:(=?ruleSetAsPattern)<br/>                {<br/>                Apply rule until no match <br/>                or until variable \"stop\" has been set to the value \"stop\".<br/>                }<br/>        &amp;   whl<br/>          ' ( @(!subject:!ruleSetAsPattern)<br/>            &amp; str$(!A\u00a0!replacement\u00a0!Z):?subject<br/>            &amp;\u00a0!stop:~stop<br/>            )<br/>        &amp;\u00a0!subject<br/>    )<br/>{<br/>Tests:<br/>}<br/>  &amp;   out<br/>    $ ( applyRules<br/>      $ ( \"# This rules file is extracted from Wikipedia:<br/># http://en.wikipedia.org/wiki/Markov_Algorithm<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>\"<br/>        . \"I bought a B of As from T S.\"<br/>        )<br/>      )<br/>  &amp;   out<br/>    $ ( applyRules<br/>      $ ( \"# Slightly modified from the rules on Wikipedia<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>\"<br/>        . \"I bought a B of As from T S.\"<br/>        )<br/>      )<br/>  &amp;   out<br/>    $ ( applyRules<br/>      $ ( \"# BNF Syntax testing rules<br/>A -&gt; apple<br/>WWWW -&gt; with<br/>Bgage -&gt; -&gt;.*<br/>B -&gt; bag<br/>-&gt;.* -&gt; money<br/>W -&gt; WW<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>\"<br/>        . \"I bought a B of As W my Bgage from T S.\"<br/>        )<br/>      )<br/>  &amp;   out<br/>    $ ( applyRules<br/>      $ ( \"### Unary Multiplication Engine, for testing Markov Algorithm implementations<br/>### By Donal Fellows.<br/># Unary addition engine<br/>_+1 -&gt; _1+<br/>1+1 -&gt; 11+<br/># Pass for converting from the splitting of multiplication into ordinary<br/># addition<br/>1! -&gt;\u00a0!1<br/>,! -&gt;\u00a0!+<br/>_! -&gt; _<br/># Unary multiplication by duplicating left side, right side times<br/>1*1 -&gt; x,@y<br/>1x -&gt; xX<br/>X, -&gt; 1,1<br/>X1 -&gt; 1X<br/>_x -&gt; _X<br/>,x -&gt; ,X<br/>y1 -&gt; 1y<br/>y_ -&gt; _<br/># Next phase of applying<br/><a class=\"__cf_email__\" data-cfemail=\"a594e594\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y<br/><a class=\"__cf_email__\" data-cfemail=\"ceff8e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_<br/>,@_ -&gt;\u00a0!_<br/>++ -&gt; +<br/># Termination cleanup for addition<br/>_1 -&gt; 1<br/>1+_ -&gt; 1<br/>_+_ -&gt; <br/>\"<br/>        . \"_1111*11111_\"<br/>        )<br/>      )<br/>  &amp;   out<br/>    $ ( applyRules<br/>      $ ( \"# Turing machine: three-state busy beaver<br/>#<br/># state A, symbol 0 =&gt; write 1, move right, new state B<br/>A0 -&gt; 1B<br/># state A, symbol 1 =&gt; write 1, move left, new state C<br/>0A1 -&gt; C01<br/>1A1 -&gt; C11<br/># state B, symbol 0 =&gt; write 1, move left, new state A<br/>0B0 -&gt; A01<br/>1B0 -&gt; A11<br/># state B, symbol 1 =&gt; write 1, move right, new state B<br/>B1 -&gt; 1B<br/># state C, symbol 0 =&gt; write 1, move left, new state B<br/>0C0 -&gt; B01<br/>1C0 -&gt; B11<br/># state C, symbol 1 =&gt; write 1, move left, halt<br/>0C1 -&gt; H01<br/>1C1 -&gt; H11<br/>\"<br/>        . 000000A000000<br/>        )<br/>      )<br/>  &amp; ok<br/>| failure;<br/>\u00a0</pre>"}, {"lang": "C", "loc": 203, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;fcntl.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/stat.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> s<span class=\"sy0\">;</span> <span class=\"kw4\">size_t</span> alloc_len<span class=\"sy0\">;</span> <span class=\"br0\">}</span> string<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pat<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>repl<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> terminate<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> rule_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\trule_t <span class=\"sy0\">*</span>rules<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> ruleset_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ruleset_del<span class=\"br0\">(</span>ruleset_t <span class=\"sy0\">*</span>r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>buf<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>string <span class=\"sy0\">*</span> str_new<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring <span class=\"sy0\">*</span>str <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstr<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstr<span class=\"sy0\">-&gt;</span>alloc_len <span class=\"sy0\">=</span> l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> str<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> str_append<span class=\"br0\">(</span>string <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>alloc_len <span class=\"sy0\">&lt;</span> l <span class=\"sy0\">+</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tstr<span class=\"sy0\">-&gt;</span>alloc_len <span class=\"sy0\">=</span> l <span class=\"sy0\">+</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tstr<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s<span class=\"sy0\">,</span> str<span class=\"sy0\">-&gt;</span>alloc_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">+</span> l<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstr<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">[</span>l <span class=\"sy0\">+</span> len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* swap content of dest and src, and truncate src string */</span><br/><span class=\"kw4\">void</span> str_transfer<span class=\"br0\">(</span>string <span class=\"sy0\">*</span>dest<span class=\"sy0\">,</span> string <span class=\"sy0\">*</span>src<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> tlen <span class=\"sy0\">=</span> dest<span class=\"sy0\">-&gt;</span>alloc_len<span class=\"sy0\">;</span><br/>\tdest<span class=\"sy0\">-&gt;</span>alloc_len <span class=\"sy0\">=</span> src<span class=\"sy0\">-&gt;</span>alloc_len<span class=\"sy0\">;</span><br/>\tsrc<span class=\"sy0\">-&gt;</span>alloc_len <span class=\"sy0\">=</span> tlen<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ts <span class=\"sy0\">=</span> dest<span class=\"sy0\">-&gt;</span>s<span class=\"sy0\">;</span><br/>\tdest<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">=</span> src<span class=\"sy0\">-&gt;</span>s<span class=\"sy0\">;</span><br/>\tsrc<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">=</span> ts<span class=\"sy0\">;</span><br/>\tsrc<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> str_del<span class=\"br0\">(</span>string <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> str_markov<span class=\"br0\">(</span>string <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> ruleset_t <span class=\"sy0\">*</span>r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> sl<span class=\"sy0\">,</span> pl<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> changed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> done <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tstring <span class=\"sy0\">*</span>tmp <span class=\"sy0\">=</span> str_new<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>done<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tchanged <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>done <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>changed <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> r<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tpl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">pat</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tsl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sl<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">pat</span><span class=\"sy0\">,</span> pl<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t\tstr_append<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> str<span class=\"sy0\">-&gt;</span>s<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tstr_append<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">repl</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tstr_append<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> str<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">+</span> j <span class=\"sy0\">+</span> pl<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tstr_transfer<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tchanged <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">-&gt;</span>rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">terminate</span><span class=\"br0\">)</span><br/>\t\t\t\t\tdone <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>changed<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tstr_del<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ruleset_t<span class=\"sy0\">*</span> read_rules<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> stat s<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> tmp<span class=\"sy0\">;</span><br/>\trule_t <span class=\"sy0\">*</span>rules <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* number of rules */</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> fd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> O_RDONLY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tfstat<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tbuf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>s.<span class=\"me1\">st_size</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tread<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> s.<span class=\"me1\">st_size</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tbuf<span class=\"br0\">[</span>s.<span class=\"me1\">st_size</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\tbuf<span class=\"br0\">[</span>s.<span class=\"me1\">st_size</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\tclose<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* skip comments */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tj <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* find the '-&gt;' */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>buf <span class=\"sy0\">+</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-&gt;\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"parse error: no -&gt; in\u00a0%.*s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> j<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* left side: backtrack through whitespaces */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>tmp <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span> tmp <span class=\"sy0\">&gt;</span> j <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span><span class=\"sy0\">--</span>tmp<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"left side blank?\u00a0%.*s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> j<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tbuf<span class=\"br0\">[</span><span class=\"sy0\">++</span>tmp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* right side */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> i <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span><span class=\"sy0\">++</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tbuf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\trules <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>rules<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>rule_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trules<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">pat</span> <span class=\"sy0\">=</span> buf <span class=\"sy0\">+</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\trules<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">terminate</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\trules<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">repl</span> <span class=\"sy0\">=</span> buf <span class=\"sy0\">+</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\trules<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">terminate</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\trules<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">repl</span> <span class=\"sy0\">=</span> buf <span class=\"sy0\">+</span> k<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tn<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\tj <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\truleset_t <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>ruleset_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tr<span class=\"sy0\">-&gt;</span>buf <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\tr<span class=\"sy0\">-&gt;</span>rules <span class=\"sy0\">=</span> rules<span class=\"sy0\">;</span><br/>\tr<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> test_rules<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>file<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\truleset_t <span class=\"sy0\">*</span> r <span class=\"sy0\">=</span> read_rules<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Rules from '%s' ok<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstring <span class=\"sy0\">*</span>ss <span class=\"sy0\">=</span> str_new<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"text:    \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ss<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstr_markov<span class=\"br0\">(</span>ss<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"markoved:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ss<span class=\"sy0\">-&gt;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstr_del<span class=\"br0\">(</span>ss<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\truleset_del<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"coMULTI\">/* rule 1-5 are files containing rules from page top */</span><br/>\ttest_rules<span class=\"br0\">(</span><span class=\"st0\">\"I bought a B of As from T S.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rule1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttest_rules<span class=\"br0\">(</span><span class=\"st0\">\"I bought a B of As from T S.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rule2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttest_rules<span class=\"br0\">(</span><span class=\"st0\">\"I bought a B of As W my Bgage from T S.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rule3\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttest_rules<span class=\"br0\">(</span><span class=\"st0\">\"_1111*11111_\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rule4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttest_rules<span class=\"br0\">(</span><span class=\"st0\">\"000000A000000\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rule5\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 114, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> rule<br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> pattern<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> replacement<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">bool</span> terminal<span class=\"sy4\">;</span><br/>  rule<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> pat, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> rep, <span class=\"kw4\">bool</span> term<span class=\"br0\">)</span><span class=\"sy4\">:</span><br/>    pattern<span class=\"br0\">(</span>pat<span class=\"br0\">)</span>,<br/>    replacement<span class=\"br0\">(</span>rep<span class=\"br0\">)</span>,<br/>    terminal<span class=\"br0\">(</span>term<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span> whitespace <span class=\"sy1\">=</span> <span class=\"st0\">\" <span class=\"es1\">\\t</span>\"</span><span class=\"sy4\">;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">size_type</span> <span class=\"kw4\">const</span> npos <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> is_whitespace<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> whitespace.<span class=\"me1\">find</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> npos<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>rule<span class=\"sy1\">&gt;</span> read_rules<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span><span class=\"sy3\">&amp;</span> rulefile<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>rule<span class=\"sy1\">&gt;</span> rules<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>rulefile, line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">size_type</span> pos<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// remove comments</span><br/>    pos <span class=\"sy1\">=</span> line.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> npos<span class=\"br0\">)</span><br/>      line.<span class=\"me1\">resize</span><span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// ignore lines consisting only of whitespace</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">find_first_not_of</span><span class=\"br0\">(</span>whitespace<span class=\"br0\">)</span> <span class=\"sy1\">==</span> npos<span class=\"br0\">)</span><br/>      <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// find \"-&gt;\" surrounded by whitespace</span><br/>    pos <span class=\"sy1\">=</span> line.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"-&gt;\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> npos <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>is_whitespace<span class=\"br0\">(</span>line<span class=\"br0\">[</span>pos<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      pos <span class=\"sy1\">=</span> line.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"-&gt;\"</span>, pos<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">==</span> npos <span class=\"sy3\">||</span> line.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> pos<span class=\"sy2\">+</span><span class=\"nu0\">3</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>is_whitespace<span class=\"br0\">(</span>line<span class=\"br0\">[</span>pos<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"invalid rule: \"</span> <span class=\"sy1\">&lt;&lt;</span> line <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"kw2\">EXIT_FAILURE</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> pattern <span class=\"sy1\">=</span> line.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, pos<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> replacement <span class=\"sy1\">=</span> line.<span class=\"me1\">substr</span><span class=\"br0\">(</span>pos<span class=\"sy2\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// remove additional separating whitespace</span><br/>    pattern.<span class=\"me1\">erase</span><span class=\"br0\">(</span>pattern.<span class=\"me1\">find_last_not_of</span><span class=\"br0\">(</span>whitespace<span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    replacement.<span class=\"me1\">erase</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, replacement.<span class=\"me1\">find_first_not_of</span><span class=\"br0\">(</span>whitespace<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// test for terminal rule</span><br/>    <span class=\"kw4\">bool</span> terminal <span class=\"sy1\">=</span> <span class=\"sy3\">!</span>replacement.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> replacement<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'.'</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>terminal<span class=\"br0\">)</span><br/>      replacement.<span class=\"me1\">erase</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    rules.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>rule<span class=\"br0\">(</span>pattern, replacement, terminal<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> rules<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> markov<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>rule<span class=\"sy1\">&gt;</span> rules, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> output <span class=\"sy1\">=</span> input<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>rule<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iter <span class=\"sy1\">=</span> rules.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Loop through each rule, transforming our current version</span><br/>  <span class=\"co1\">// with each rule.</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> rules.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">size_type</span> pos <span class=\"sy1\">=</span> output.<span class=\"me1\">find</span><span class=\"br0\">(</span>iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>pattern<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> npos<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      output.<span class=\"me1\">replace</span><span class=\"br0\">(</span>pos, iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>pattern.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>replacement<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iter<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>terminal<span class=\"br0\">)</span><br/>        <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>      iter <span class=\"sy1\">=</span> rules.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"sy2\">++</span>iter<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> output<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"usage:<span class=\"es1\">\\n</span> \"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" rulefile text<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">EXIT_FAILURE</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> rulefile<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>rule<span class=\"sy1\">&gt;</span> rules <span class=\"sy1\">=</span> read_rules<span class=\"br0\">(</span>rulefile<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> output <span class=\"sy1\">=</span> markov<span class=\"br0\">(</span>rules, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> output <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 68, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; Keeps track of all our rules</span><br/><span class=\"br0\">(</span>defclass markov <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>rules <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">rules</span> <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> rules<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Definition of a rule</span><br/><span class=\"br0\">(</span>defclass rule <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>pattern <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">pattern</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> pattern<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>replacement <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">replacement</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> replacement<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>terminal <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">terminal</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> terminal<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Parse a rule with this regular expression</span><br/><span class=\"br0\">(</span>defparameter *rex-<span class=\"sy0\">&gt;</span>* <span class=\"br0\">(</span>compile-re <span class=\"st0\">\"^(.+)(?: |<span class=\"es0\">\\\\</span>t)-&gt;(?: |<span class=\"es0\">\\\\</span>t)(<span class=\"es0\">\\\\</span>.?)(.*)$\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Create a rule and add it to the markov object</span><br/><span class=\"br0\">(</span>defmethod update-markov <span class=\"br0\">(</span><span class=\"br0\">(</span>mkv markov<span class=\"br0\">)</span> lhs terminating rhs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>rules mkv<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <br/>                     <span class=\"br0\">(</span>make-instance 'rule <span class=\"sy0\">:</span><span class=\"me1\">pattern</span> lhs <span class=\"sy0\">:</span><span class=\"me1\">replacement</span> rhs <span class=\"sy0\">:</span><span class=\"me1\">terminal</span> terminating<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>rules mkv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Parse a line and add it to the markov object</span><br/><span class=\"br0\">(</span>defmethod parse-line <span class=\"br0\">(</span><span class=\"br0\">(</span>mkv markov<span class=\"br0\">)</span> line<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>trimmed <span class=\"br0\">(</span>string-trim #<span class=\"br0\">(</span>#\\Space #\\Tab<span class=\"br0\">)</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">eql</span> #\\# <span class=\"br0\">(</span><span class=\"kw1\">aref</span> trimmed <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"st0\">\"\"</span> trimmed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>vals <span class=\"br0\">(</span>multiple-value-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>match-re *rex-<span class=\"sy0\">&gt;</span>* line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <br/>                <span class=\"br0\">(</span>format t <span class=\"st0\">\"syntax error in ~A\"</span> line<span class=\"br0\">)</span> <br/>                <span class=\"br0\">(</span><span class=\"kw1\">throw</span> 'fail t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>update-markov mkv <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"nu0\">2</span> vals<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"nu0\">3</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"nu0\">4</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Make a markov object from the string of rules</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-markov <span class=\"br0\">(</span>rules-text<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">catch</span> 'fail<br/>         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mkv <span class=\"br0\">(</span>make-instance 'markov<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>with-input-from-string <span class=\"br0\">(</span>s rules-text<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line s <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                 while line <span class=\"kw1\">do</span><br/>                   <span class=\"br0\">(</span>parse-line mkv line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>rules mkv<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>rules mkv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           mkv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Given a rule and bounds where it applies, apply it to the input text</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> adjust <span class=\"br0\">(</span>rule-info text<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>rule <span class=\"br0\">(</span><span class=\"kw1\">car</span> rule-info<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>index-start <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> rule-info<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>index-end <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> rule-info<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>prefix <span class=\"br0\">(</span>subseq text <span class=\"nu0\">0</span> index-start<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>suffix <span class=\"br0\">(</span>subseq text index-end<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>replace <span class=\"br0\">(</span>replacement rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>concatenate 'string prefix replace suffix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Get the next applicable rule or nil if none</span><br/><span class=\"br0\">(</span>defmethod get-rule <span class=\"br0\">(</span><span class=\"br0\">(</span>markov markov<span class=\"br0\">)</span> text<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>rule <span class=\"br0\">(</span>rules markov<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>index <span class=\"br0\">(</span>search <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span> text<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> index<br/>          <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> rule index <span class=\"br0\">(</span>+ index <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Interpret text using a markov object</span><br/><span class=\"br0\">(</span>defmethod interpret <span class=\"br0\">(</span><span class=\"br0\">(</span>markov markov<span class=\"br0\">)</span> text<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rule-info <span class=\"br0\">(</span>get-rule markov text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>ret text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> rule-info<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">setf</span> ret <span class=\"br0\">(</span>adjust rule-info ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>terminal <span class=\"br0\">(</span><span class=\"kw1\">car</span> rule-info<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">setf</span> rule-info <span class=\"br0\">(</span>get-rule markov ret<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 33, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span><br/>           std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> rules <span class=\"sy0\">=</span> <span class=\"st0\">\"markov_rules.txt\"</span>.<span class=\"me1\">readText</span>.<span class=\"me1\">splitLines</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> tests <span class=\"sy0\">=</span> <span class=\"st0\">\"markov_tests.txt\"</span>.<span class=\"me1\">readText</span>.<span class=\"me1\">splitLines</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> re <span class=\"sy0\">=</span> ctRegex<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"co4\">r\"^([^#]*?)\\s+-&gt;\\s+(\\.?)(.*)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 160 MB RAM.</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> slZip <span class=\"sy0\">=</span> curry<span class=\"sy0\">!</span><span class=\"br0\">(</span>zip<span class=\"sy0\">,</span> StoppingPolicy.<span class=\"me1\">requireSameLength</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>test<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> rule<span class=\"sy0\">;</span> slZip<span class=\"br0\">(</span>tests<span class=\"sy0\">,</span> rules<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> origTest <span class=\"sy0\">=</span> test.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> capt<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> line<span class=\"sy0\">;</span> rule<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> m <span class=\"sy0\">=</span> line.<span class=\"me1\">match</span><span class=\"br0\">(</span>re<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>m.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">//capt.put(m.captures.dropOne);</span><br/>                capt <span class=\"sy0\">~=</span> m.<span class=\"me1\">captures</span>.<span class=\"me1\">dropOne</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    REDO<span class=\"sy0\">:</span><br/>        <span class=\"kw4\">const</span> copy <span class=\"sy0\">=</span> test<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> c<span class=\"sy0\">;</span> capt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            test <span class=\"sy0\">=</span> test.<span class=\"me1\">replace</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>test <span class=\"sy0\">!=</span> copy<span class=\"br0\">)</span><br/>                <span class=\"kw1\">goto</span> REDO<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> origTest<span class=\"sy0\">,</span> test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 43, "block": "<pre class=\"text highlighted_source\">(remove-comments) text:<br/>\t]<br/>\tfor line in text:<br/>\t\tif and line not starts-with line \"#\":<br/>\t\t\tline<br/>\t[<br/>\u00a0<br/>(markov-parse) text:<br/>\t]<br/>\tfor line in text:<br/>\t\tlocal\u00a0:index find line \" -&gt; \"<br/>\t\tlocal\u00a0:pat slice line 0 index<br/>\t\tlocal\u00a0:rep slice line + index 4 len line<br/>\t\tlocal\u00a0:term starts-with rep \".\"<br/>\t\tif term:<br/>\t\t\tset\u00a0:rep slice rep 1 len rep<br/>\t\t&amp; pat &amp; term rep<br/>\t[<br/>\u00a0<br/>markov-parse:<br/>\t(markov-parse) (remove-comments) split\u00a0!decode!utf-8\u00a0!read!stdin \"\\n\"<br/>\u00a0<br/>(markov-tick) rules start:<br/>\tfor rule in copy rules:<br/>\t\tlocal\u00a0:pat &amp;&lt; rule<br/>\t\tlocal\u00a0:rep &amp;&gt; dup &amp;&gt; rule<br/>\t\tlocal\u00a0:term &amp;&lt;<br/>\t\tlocal\u00a0:index find start pat<br/>\t\tif &lt; -1 index:<br/>\t\t\t)<br/>\t\t\tslice start + index len pat len start<br/>\t\t\trep<br/>\t\t\tslice start 0 index<br/>\t\t\tconcat(<br/>\t\t\treturn term<br/>\ttrue start<br/>\u00a0<br/>markov rules:<br/>\ttrue<br/>\twhile:<br/>\t\tnot (markov-tick) rules<br/>\u00a0<br/>!. markov markov-parse get-from\u00a0!args 1</pre>"}, {"lang": "EchoLisp", "loc": 35, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; rule\u00a0:= (pattern replacement [#t terminal])</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule  <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span> <span class=\"br0\">(</span>first rule<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule  <span class=\"br0\">(</span>repl sule<span class=\"br0\">)</span> <span class=\"br0\">(</span>second rule<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule  <span class=\"br0\">(</span>term? rule<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>empty? <span class=\"br0\">(</span>cddr rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; (alpha   .beta )--&gt; (alpha beta #t)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>term<span class=\"sy0\">-</span>rule rule<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>first <span class=\"br0\">(</span>repl rule<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>rest <span class=\"br0\">(</span>repl rule<span class=\"br0\">)</span><span class=\"br0\">)</span> #t<span class=\"br0\">)</span><br/>            rule <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; returns list of rules</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>rules lines<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span> term<span class=\"sy0\">-</span>rule<br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>line <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split lines <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        #:continue <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>first line<span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">map</span> string<span class=\"sy0\">-</span>trim <br/>        <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>replace line <span class=\"st0\">\"/<span class=\"es0\">\\\\</span>t/g\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; markov machine</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>markov i<span class=\"sy0\">-</span><span class=\"kw1\">string</span> rules<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <br/>        <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>run #f<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rule rules<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        #:when <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>index <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span> i<span class=\"sy0\">-</span><span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">set!</span> i<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>replace i<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>pattern rule<span class=\"br0\">)</span> <span class=\"br0\">(</span>repl rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"co1\">;;(writeln rule i-string)\u00a0;; uncomment for trace</span><br/>            #:break <span class=\"br0\">(</span>term? rule<span class=\"br0\">)</span>  <span class=\"sy0\">=&gt;</span> #f<br/>            #:break #t  <span class=\"sy0\">=&gt;</span> #t <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    i<span class=\"sy0\">-</span><span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task i<span class=\"sy0\">-</span><span class=\"kw1\">string</span>  RS<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>markov i<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>rules RS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 53, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Rule <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    matches\u00a0: Regex<br/>    replacement\u00a0: <span class=\"kw4\">string</span><br/>    terminate\u00a0: <span class=\"kw4\">bool</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>|RegexMatch|_|<span class=\"br0\">)</span> regexStr input <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> Regex.<span class=\"me1\">Match</span><span class=\"br0\">(</span>input, regexStr, RegexOptions.<span class=\"me1\">ExplicitCapture</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> m.<span class=\"me1\">Success</span> <span class=\"kw1\">then</span> Some <span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"kw1\">else</span> None<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>|RuleReplace|_|<span class=\"br0\">)</span> rule input <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> replaced <span class=\"sy0\">=</span> rule.<span class=\"me1\">matches</span>.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>input, rule.<span class=\"me1\">replacement</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> input <span class=\"sy0\">=</span> replaced <span class=\"kw1\">then</span> None<br/>    <span class=\"kw1\">else</span> Some <span class=\"br0\">(</span>replaced, rule.<span class=\"me1\">terminate</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> parseRules line <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> line <span class=\"kw1\">with</span><br/>    | RegexMatch <span class=\"st0\">\"^#\"</span> _ <span class=\"sy0\">-&gt;</span> None<br/>    | RegexMatch <span class=\"st0\">\"(?&lt;pattern&gt;.*?)<span class=\"es0\">\\s</span>+-&gt;<span class=\"es0\">\\s</span>+(?&lt;replacement&gt;.*)$\"</span> m <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> replacement <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m.<span class=\"me1\">Groups</span>.<span class=\"me1\">Item</span> <span class=\"st0\">\"replacement\"</span><span class=\"br0\">)</span>.<span class=\"me1\">Value</span><br/>        <span class=\"kw1\">let</span> terminate <span class=\"sy0\">=</span> replacement.<span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> &amp;&amp; replacement.<span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><br/>        <span class=\"kw1\">let</span> pattern <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m.<span class=\"me1\">Groups</span>.<span class=\"me1\">Item</span> <span class=\"st0\">\"pattern\"</span><span class=\"br0\">)</span>.<span class=\"me1\">Value</span><br/>        Some <span class=\"br0\">{</span><br/>            matches <span class=\"sy0\">=</span> pattern <span class=\"sy0\">|&gt;</span> Regex.<span class=\"me1\">Escape</span> <span class=\"sy0\">|&gt;</span> Regex<span class=\"sy0\">;</span><br/>            replacement <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> terminate <span class=\"kw1\">then</span> replacement.<span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> replacement<span class=\"sy0\">;</span><br/>            terminate <span class=\"sy0\">=</span> terminate<br/>        <span class=\"br0\">}</span><br/>    | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"illegal rule definition\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> applyRules input <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>| <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>input, <span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>| rule::rules <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">match</span> input <span class=\"kw1\">with</span><br/>    | RuleReplace rule <span class=\"br0\">(</span>withReplacement, terminate<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"br0\">(</span>withReplacement, terminate<span class=\"br0\">)</span><br/>    | _ <span class=\"sy0\">-&gt;</span> applyRules input rules<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> rules <span class=\"sy0\">=</span> File.<span class=\"me1\">ReadAllLines</span> argv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">toList</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span> parseRules<br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> run input <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> output, terminate <span class=\"sy0\">=</span> applyRules input rules<br/>        <span class=\"kw1\">if</span> terminate <span class=\"kw1\">then</span> output<br/>        <span class=\"kw1\">else</span> run output<br/>\u00a0<br/>    Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> run<br/>    <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%s\"</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Go", "loc": 176, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"regexp\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> testCase <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    ruleSet<span class=\"sy1\">,</span> sample<span class=\"sy1\">,</span> output <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"validating\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>testSet<span class=\"sy1\">),</span> <span class=\"st0\">\"test cases\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> failures <span class=\"kw4\">bool</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testSet <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> r<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> interpret<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span>ruleSet<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>sample<span class=\"sy1\">);</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"test\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"st0\">\"invalid ruleset\"</span><span class=\"sy1\">)</span><br/>            failures <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> r <span class=\"sy2\">!=</span> tc<span class=\"sy3\">.</span>output <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"test\u00a0%d: got\u00a0%q, want\u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>output<span class=\"sy1\">)</span><br/>            failures <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>failures <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"no failures\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> interpret<span class=\"sy1\">(</span>ruleset<span class=\"sy1\">,</span> input <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> rules<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> parse<span class=\"sy1\">(</span>ruleset<span class=\"sy1\">);</span> ok <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> run<span class=\"sy1\">(</span>rules<span class=\"sy1\">,</span> input<span class=\"sy1\">),</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> rule <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    pat  <span class=\"kw4\">string</span><br/>    rep  <span class=\"kw4\">string</span><br/>    term <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    rxSet   <span class=\"sy2\">=</span> regexp<span class=\"sy3\">.</span>MustCompile<span class=\"sy1\">(</span>ruleSet<span class=\"sy1\">)</span><br/>    rxEle   <span class=\"sy2\">=</span> regexp<span class=\"sy3\">.</span>MustCompile<span class=\"sy1\">(</span>ruleEle<span class=\"sy1\">)</span><br/>    ruleSet <span class=\"sy2\">=</span> <span class=\"co2\">`(?m:^(?:`</span> <span class=\"sy3\">+</span> ruleEle <span class=\"sy3\">+</span> <span class=\"co2\">`)*$)`</span><br/>    ruleEle <span class=\"sy2\">=</span> <span class=\"co2\">`(?:`</span> <span class=\"sy3\">+</span> comment <span class=\"sy3\">+</span> <span class=\"co2\">`|`</span> <span class=\"sy3\">+</span> ruleRe <span class=\"sy3\">+</span> <span class=\"co2\">`)\\n+`</span><br/>    comment <span class=\"sy2\">=</span> <span class=\"co2\">`#.*`</span><br/>    ruleRe  <span class=\"sy2\">=</span> <span class=\"co2\">`(.*)`</span> <span class=\"sy3\">+</span> ws <span class=\"sy3\">+</span> <span class=\"co2\">`-&gt;`</span> <span class=\"sy3\">+</span> ws <span class=\"sy3\">+</span> <span class=\"co2\">`([.])?(.*)`</span><br/>    ws      <span class=\"sy2\">=</span> <span class=\"co2\">`[\\t ]+`</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> parse<span class=\"sy1\">(</span>rs <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">([]</span>rule<span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>rxSet<span class=\"sy3\">.</span>MatchString<span class=\"sy1\">(</span>rs<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    x <span class=\"sy2\">:=</span> rxEle<span class=\"sy3\">.</span>FindAllStringSubmatchIndex<span class=\"sy1\">(</span>rs<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> rules <span class=\"sy1\">[]</span>rule<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> x <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> x<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            rules <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>rules<span class=\"sy1\">,</span><br/>                rule<span class=\"sy1\">{</span>pat<span class=\"sy1\">:</span> rs<span class=\"sy1\">[</span>x<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]:</span>x<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]],</span> term<span class=\"sy1\">:</span> x<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">,</span> rep<span class=\"sy1\">:</span> rs<span class=\"sy1\">[</span>x<span class=\"sy1\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">]:</span>x<span class=\"sy1\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">]]})</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> rules<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> run<span class=\"sy1\">(</span>rules <span class=\"sy1\">[]</span>rule<span class=\"sy1\">,</span> s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>step1<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rules <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> f <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> r<span class=\"sy3\">.</span>pat<span class=\"sy1\">);</span> f &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            s <span class=\"sy2\">=</span> s<span class=\"sy1\">[:</span>f<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> r<span class=\"sy3\">.</span>rep <span class=\"sy3\">+</span> s<span class=\"sy1\">[</span>f<span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>pat<span class=\"sy1\">):]</span><br/>            <span class=\"kw1\">if</span> r<span class=\"sy3\">.</span>term <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> s<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">goto</span> step1<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// text all cut and paste from RC task page</span><br/><span class=\"kw1\">var</span> testSet <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>testCase<span class=\"sy1\">{</span><br/>    <span class=\"sy1\">{</span><span class=\"co2\">`# This rules file is extracted from Wikipedia:<br/># http://en.wikipedia.org/wiki/Markov_Algorithm<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a B of As from T S.`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a bag of apples from my brother.`</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"co2\">`# Slightly modified from the rules on Wikipedia<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a B of As from T S.`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a bag of apples from T shop.`</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"co2\">`# BNF Syntax testing rules<br/>A -&gt; apple<br/>WWWW -&gt; with<br/>Bgage -&gt; -&gt;.*<br/>B -&gt; bag<br/>-&gt;.* -&gt; money<br/>W -&gt; WW<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a B of As W my Bgage from T S.`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`I bought a bag of apples with my money from T shop.`</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"co2\">`### Unary Multiplication Engine, for testing Markov Algorithm implementations<br/>### By Donal Fellows.<br/># Unary addition engine<br/>_+1 -&gt; _1+<br/>1+1 -&gt; 11+<br/># Pass for converting from the splitting of multiplication into ordinary<br/># addition<br/>1! -&gt;\u00a0!1<br/>,! -&gt;\u00a0!+<br/>_! -&gt; _<br/># Unary multiplication by duplicating left side, right side times<br/>1*1 -&gt; x,@y<br/>1x -&gt; xX<br/>X, -&gt; 1,1<br/>X1 -&gt; 1X<br/>_x -&gt; _X<br/>,x -&gt; ,X<br/>y1 -&gt; 1y<br/>y_ -&gt; _<br/># Next phase of applying<br/><a class=\"__cf_email__\" data-cfemail=\"71403140\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y<br/><a class=\"__cf_email__\" data-cfemail=\"300170\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_<br/>,@_ -&gt;\u00a0!_<br/>++ -&gt; +<br/># Termination cleanup for addition<br/>_1 -&gt; 1<br/>1+_ -&gt; 1<br/>_+_ -&gt; <br/>`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`_1111*11111_`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`11111111111111111111`</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"co2\">`# Turing machine: three-state busy beaver<br/>#<br/># state A, symbol 0 =&gt; write 1, move right, new state B<br/>A0 -&gt; 1B<br/># state A, symbol 1 =&gt; write 1, move left, new state C<br/>0A1 -&gt; C01<br/>1A1 -&gt; C11<br/># state B, symbol 0 =&gt; write 1, move left, new state A<br/>0B0 -&gt; A01<br/>1B0 -&gt; A11<br/># state B, symbol 1 =&gt; write 1, move right, new state B<br/>B1 -&gt; 1B<br/># state C, symbol 0 =&gt; write 1, move left, new state B<br/>0C0 -&gt; B01<br/>1C0 -&gt; B11<br/># state C, symbol 1 =&gt; write 1, move left, halt<br/>0C1 -&gt; H01<br/>1C1 -&gt; H11<br/>`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`000000A000000`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`00011H1111000`</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 25, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> markovInterpreterFor <span class=\"sy0\">=</span> <span class=\"br0\">{</span> rules <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> ruleMap <span class=\"sy0\">=</span> <span class=\"br0\">[</span>:<span class=\"br0\">]</span><br/>    rules.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachLine\"><span class=\"kw7\">eachLine</span></a> <span class=\"br0\">{</span> line <span class=\"sy0\">-&gt;</span><br/>        <span class=\"br0\">(</span>line <span class=\"sy0\">=</span>~ /\\s<span class=\"sy0\">*</span><span class=\"br0\">(</span>.<span class=\"sy0\">+</span><span class=\"br0\">)</span>\\s<span class=\"sy0\">-&gt;</span>\\s<span class=\"br0\">(</span><span class=\"br0\">[</span>.<span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"br0\">(</span>.<span class=\"sy0\">+</span><span class=\"br0\">)</span>\\s<span class=\"sy0\">*</span>/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> text, key, terminating, value <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>key.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">}</span><br/>            ruleMap<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>text: value, terminating: terminating<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span>interpret: <span class=\"br0\">{</span> text <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> originalText <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>originalText <span class=\"sy0\">!=</span> text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            originalText <span class=\"sy0\">=</span> text<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Map.Entry&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map.<span class=\"me1\">Entry</span></span></a> e\u00a0: ruleMap.<span class=\"me1\">entrySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>text.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>e.<span class=\"me1\">key</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    text <span class=\"sy0\">=</span> text.<span class=\"me1\">replace</span><span class=\"br0\">(</span>e.<span class=\"me1\">key</span>, e.<span class=\"me1\">value</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e.<span class=\"me1\">value</span>.<span class=\"me1\">terminating</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> text<br/>                    <span class=\"br0\">}</span><br/>                    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        text<br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 43, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>isPrefixOf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>catMaybes<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>ParserCombinators<span class=\"sy0\">.</span>Parsec<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>   args <span class=\"sy0\">&lt;-</span> getArgs<br/>   unless <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> args <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fail\"><span class=\"kw3\">fail</span></a> <span class=\"st0\">\"Please provide exactly one source file as an argument.\"</span><br/>   <span class=\"kw1\">let</span> sourcePath <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> args<br/>   source <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> sourcePath<br/>   input <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getContents\"><span class=\"kw3\">getContents</span></a><br/>   <span class=\"kw1\">case</span> parse markovParser sourcePath source <span class=\"kw1\">of</span><br/>       Right rules <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> runMarkov rules input<br/>       Left  err   <span class=\"sy0\">-&gt;</span> hPutStrLn stderr <span class=\"sy0\">$</span> <span class=\"st0\">\"Parse error at \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> err<br/>\u00a0<br/><span class=\"kw1\">data</span> Rule <span class=\"sy0\">=</span> Rule<br/>   <span class=\"br0\">{</span>from <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> terminating <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"sy0\">,</span> to <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>markovParser <span class=\"sy0\">::</span> Parser <span class=\"br0\">[</span>Rule<span class=\"br0\">]</span><br/>markovParser <span class=\"sy0\">=</span> liftM catMaybes <span class=\"sy0\">$</span><br/>    <span class=\"br0\">(</span>comment <span class=\"sy0\">&lt;|&gt;</span> rule<span class=\"br0\">)</span> `sepEndBy` many1 newline<br/>  <span class=\"kw1\">where</span> comment <span class=\"sy0\">=</span> char <span class=\"st0\">'#'</span> <span class=\"sy0\">&gt;&gt;</span> skipMany nonnl <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> Nothing<br/>        rule <span class=\"sy0\">=</span> liftM Just <span class=\"sy0\">$</span> liftM3 Rule<br/>            <span class=\"br0\">(</span>manyTill <span class=\"br0\">(</span>nonnl <span class=\"sy0\">&lt;?&gt;</span> <span class=\"st0\">\"pattern character\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> try arrow<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>succeeds <span class=\"sy0\">$</span> char <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>many nonnl<span class=\"br0\">)</span><br/>        arrow <span class=\"sy0\">=</span> ws <span class=\"sy0\">&gt;&gt;</span> string <span class=\"st0\">\"-&gt;\"</span> <span class=\"sy0\">&gt;&gt;</span> ws <span class=\"sy0\">&lt;?&gt;</span> <span class=\"st0\">\"whitespace-delimited arrow\"</span><br/>        nonnl <span class=\"sy0\">=</span> noneOf <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>        ws <span class=\"sy0\">=</span> many1 <span class=\"sy0\">$</span> oneOf <span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><br/>        succeeds p <span class=\"sy0\">=</span> option False <span class=\"sy0\">$</span> p <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> True<br/>\u00a0<br/>runMarkov <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Rule<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>runMarkov rules s <span class=\"sy0\">=</span> f rules s<br/>  <span class=\"kw1\">where</span> f <span class=\"br0\">[</span><span class=\"br0\">]</span>                              s <span class=\"sy0\">=</span> s<br/>        f <span class=\"br0\">(</span>Rule from terminating to\u00a0: rs<span class=\"br0\">)</span> s <span class=\"sy0\">=</span> g <span class=\"st0\">\"\"</span> s<br/>          <span class=\"kw1\">where</span> g <span class=\"sy0\">_</span>      <span class=\"st0\">\"\"</span>    <span class=\"sy0\">=</span> f rs s<br/>                g before ahead<span class=\"sy0\">@</span><span class=\"br0\">(</span>a\u00a0: <span class=\"kw1\">as</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> from `isPrefixOf` ahead<br/>                  <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> new <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> before <span class=\"sy0\">++</span> to <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> from<span class=\"br0\">)</span> ahead<br/>                       <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> terminating <span class=\"kw1\">then</span> new <span class=\"kw1\">else</span> f rules new<br/>                  <span class=\"kw1\">else</span> g <span class=\"br0\">(</span>a\u00a0: before<span class=\"br0\">)</span> <span class=\"kw1\">as</span></pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    rules <span class=\"sy0\">:=</span> loadRules<span class=\"br0\">(</span><span class=\"kw4\">open</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><span class=\"sy0\">,</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span>apply<span class=\"br0\">(</span>rules<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> rule<span class=\"br0\">(</span>pat<span class=\"sy0\">,</span> term<span class=\"sy0\">,</span> rep<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> loadRules<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    rules <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>f <span class=\"sy0\">?</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"sy0\">=</span><span class=\"st0\">\"#\"</span> <span class=\"kw1\">then</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>rules<span class=\"sy0\">,</span><br/>                    rule<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"-&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         <span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"st0\">\".\"</span><span class=\"sy0\">|&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> rules<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> apply<span class=\"br0\">(</span>rules<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> line<br/>    <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>       s <span class=\"sy0\">?:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>rules<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pat</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> r<span class=\"sy0\">.</span><span class=\"me1\">rep</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>r<span class=\"sy0\">.</span><span class=\"me1\">pat</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> line<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">\\</span>r<span class=\"sy0\">.</span><span class=\"me1\">term</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> s <span class=\"kw1\">else</span> line <span class=\"sy0\">:=</span> s<br/>       <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 30, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings regex'</span><br/>\u00a0<br/>markovLexer =:  verb define<br/>  rules =.  LF cut TAB&amp;=`<span class=\"sy0\">(</span>,:&amp;<span class=\"st_h\">' '</span><span class=\"sy0\">)</span>}<span class=\"kw2\">y</span><br/>  rules =.  a: -.~ <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"a9cdc5ddcbe9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:{.~ i:&amp;<span class=\"st_h\">'#'</span><span class=\"sy0\">)</span>&amp;.&gt; rules<br/>  rules =.  <span class=\"nu0\">0</span> <span class=\"nu0\">_1</span> {\"<span class=\"nu0\">1</span> <span class=\"st_h\">'\\s+-&gt;\\s+'</span> <span class=\"sy0\">(</span>rxmatch rxcut ]<span class=\"sy0\">)</span>S:<span class=\"nu0\">0</span> rules<br/>  <span class=\"sy0\">(</span>,. ] <span class=\"sy0\">(</span>}.&amp;.&gt;~ ,. ]<span class=\"sy0\">)</span> <span class=\"sy0\">(</span><span class=\"st_h\">'.'</span>={.<span class=\"sy0\">)</span>&amp;.&gt;<span class=\"sy0\">)</span>/ |: rules<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>\u00a0<br/>replace     =:  dyad define<br/>  <span class=\"st_h\">'index patternLength replacement'</span>=.  <span class=\"kw2\">x</span><br/>  <span class=\"st_h\">'head tail'</span> =.  index split <span class=\"kw2\">y</span><br/>  head, replacement, patternLength }. tail<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>matches     =:  E. i. 1:<br/>\u00a0<br/>markov      =:  dyad define<br/>  ruleIdx =. <span class=\"nu0\">0</span> [ rules =.  markovLexer <span class=\"kw2\">x</span><br/>  <span class=\"kw1\">while.</span> ruleIdx &lt; #rules <span class=\"kw1\">do.</span><br/>    <span class=\"st_h\">'pattern replacement terminating'</span> =. ruleIdx { rules<br/>    ruleIdx =. <span class=\"nu0\">1</span> + ruleIdx<br/>    <span class=\"kw1\">if.</span> <span class=\"sy0\">(</span>#<span class=\"kw2\">y</span><span class=\"sy0\">)</span> &gt; index =. pattern matches <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>      <span class=\"kw2\">y</span> =. <span class=\"sy0\">(</span>index\u00a0; <span class=\"sy0\">(</span>#pattern<span class=\"sy0\">)</span>\u00a0; replacement<span class=\"sy0\">)</span> replace <span class=\"kw2\">y</span><br/>      ruleIdx =. <span class=\"nu0\">_</span> * terminating<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 63, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.charset.StandardCharsets</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.file.Files</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.file.Paths</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.Matcher</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.Pattern</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Markov <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> rules <span class=\"sy0\">=</span> readRules<span class=\"br0\">(</span><span class=\"st0\">\"markov_rules.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> tests <span class=\"sy0\">=</span> readTests<span class=\"br0\">(</span><span class=\"st0\">\"markov_tests.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Pattern pattern <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"^([^#]*?)<span class=\"es0\">\\\\</span>s+-&gt;<span class=\"es0\">\\\\</span>s+(<span class=\"es0\">\\\\</span>.?)(.*)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> tests.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> origTest <span class=\"sy0\">=</span> tests.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> captures <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> rule <span class=\"sy0\">:</span> rules.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Matcher m <span class=\"sy0\">=</span> pattern.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>rule<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> groups <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>m.<span class=\"me1\">groupCount</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> groups.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        groups<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m.<span class=\"me1\">group</span><span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    captures.<span class=\"me1\">add</span><span class=\"br0\">(</span>groups<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> test <span class=\"sy0\">=</span> origTest<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> copy <span class=\"sy0\">=</span> test<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> captures.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> captures.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                test <span class=\"sy0\">=</span> test.<span class=\"me1\">replace</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>test.<span class=\"me1\">equals</span><span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    j <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// redo loop</span><br/>                    copy <span class=\"sy0\">=</span> test<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>, origTest, test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> readTests<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> path<span class=\"br0\">)</span><br/>            <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Files.<span class=\"me1\">readAllLines</span><span class=\"br0\">(</span>Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span>, StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> readRules<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> path<span class=\"br0\">)</span><br/>            <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ls <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">lineSeparator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> lines <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>Files.<span class=\"me1\">readAllBytes</span><span class=\"br0\">(</span>Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> rules <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">:</span> lines.<span class=\"me1\">split</span><span class=\"br0\">(</span>ls <span class=\"sy0\">+</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            rules.<span class=\"me1\">add</span><span class=\"br0\">(</span>line.<span class=\"me1\">split</span><span class=\"br0\">(</span>ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> rules<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 48, "block": "<pre class=\"text highlighted_source\">module MarkovAlgos<br/>\u00a0<br/>struct MarkovRule{F,T}<br/>    patt::F<br/>    repl::T<br/>    term::Bool<br/>end<br/>\u00a0<br/>isterminating(r::MarkovRule) = r.term<br/>Base.show(io::IO, rule::MarkovRule) =<br/>    print(io, rule.patt, \" \u2192 \", isterminating(rule)\u00a0? \".\"\u00a0: \"\", rule.repl)<br/>function Base.convert(::Type{MarkovRule}, s::AbstractString)<br/>    rmatch = match(r\"^(.+)\\s+-&gt;\\s*(\\.)?(.*)?$\", s)<br/>    if rmatch \u2261 nothing || isempty(rmatch.captures)<br/>        throw(ParseError(\"not valid rule: \" * s))<br/>    end<br/>    patt, term, repl = rmatch.captures<br/>    return MarkovRule(patt, repl \u2262 nothing\u00a0? repl\u00a0: \"\", term \u2262 nothing)<br/>end<br/>\u00a0<br/>function ruleset(file::Union{AbstractString,IO})<br/>    ruleset = Vector{MarkovRule}(0)<br/>    for line in eachline(file)<br/>        ismatch(r\"(^#|^\\s*$)\", line) || push!(ruleset, MarkovRule(line))<br/>    end<br/>    return ruleset<br/>end<br/>\u00a0<br/>apply(text::AbstractString, rule::MarkovRule) = replace(text, rule.patt, rule.repl)<br/>function apply(file::Union{AbstractString,IO}, ruleset::AbstractVector{&lt;:MarkovRule})<br/>    text = readstring(file)<br/>    redo =\u00a0!isempty(text)<br/>    while redo<br/>        matchrule = false<br/>        for rule in ruleset<br/>            if contains(text, rule.patt)<br/>                matchrule = true<br/>                text = apply(text, rule)<br/>                redo =\u00a0!isterminating(rule)<br/>                break<br/>            end<br/>        end<br/>        redo = redo &amp;&amp; matchrule<br/>    end<br/>    return text<br/>end<br/>\u00a0<br/>end  # module MarkovAlgos</pre>"}, {"lang": "Kotlin", "loc": 44, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">regex</span>.<span class=\"me1\">Pattern</span><br/>\u00a0<br/><span class=\"coMULTI\">/* rulesets assumed to be separated by a blank line in file */</span><br/>fun readRules<span class=\"br0\">(</span>path<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ls <span class=\"sy0\">=</span> System.<span class=\"me1\">lineSeparator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> File<span class=\"br0\">(</span>path<span class=\"br0\">)</span>.<span class=\"me1\">readText</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"$ls$ls\"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">split</span><span class=\"br0\">(</span>ls<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* tests assumed to be on consecutive lines */</span><br/>fun readTests<span class=\"br0\">(</span>path<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> File<span class=\"br0\">(</span>path<span class=\"br0\">)</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rules <span class=\"sy0\">=</span> readRules<span class=\"br0\">(</span><span class=\"st0\">\"markov_rules.txt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tests <span class=\"sy0\">=</span> readTests<span class=\"br0\">(</span><span class=\"st0\">\"markov_tests.txt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pattern <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"^([^#]*?)<span class=\"es1\">\\\\</span>s+-&gt;<span class=\"es1\">\\\\</span>s+(<span class=\"es1\">\\\\</span>.?)(.*)\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, origTest<span class=\"br0\">)</span> in tests.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> captures <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>rule in rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> pattern.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>rule<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> groups <span class=\"sy0\">=</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>m.<span class=\"me1\">groupCount</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> m.<span class=\"me1\">group</span><span class=\"br0\">(</span>it + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                captures.<span class=\"me1\">add</span><span class=\"br0\">(</span>groups<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> test <span class=\"sy0\">=</span> origTest<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> copy <span class=\"sy0\">=</span> test<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> redo <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in captures<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                test <span class=\"sy0\">=</span> test.<span class=\"me1\">replace</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> break<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>test <span class=\"sy0\">!=</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span> redo <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"sy0\">;</span> break <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>redo<span class=\"br0\">)</span><br/>\u00a0<br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$origTest<span class=\"es1\">\\n</span>$test<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 185, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- utility method to escape punctuation</span><br/><span class=\"kw1\">function</span> normalize<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> str<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">\"(%p)\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"%%%1\"</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">-- print(result)</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- utility method to split string into lines</span><br/><span class=\"kw1\">function</span> get_lines<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> str<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"([^<span class=\"es1\">\\n</span><span class=\"es1\">\\r</span>]*)[<span class=\"es1\">\\n</span><span class=\"es1\">\\r</span>]*\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> markov <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> MARKOV_RULE_PATTERN <span class=\"sy0\">=</span> <span class=\"st0\">\"(.+)%s%-%&gt;%s(%.?)(.*)\"</span><br/>\u00a0<br/><span class=\"kw1\">function</span> markov<span class=\"sy0\">.</span>rule<span class=\"br0\">(</span>pattern<span class=\"sy0\">,</span>replacement<span class=\"sy0\">,</span>terminating<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>\t\tpattern <span class=\"sy0\">=</span> pattern<span class=\"sy0\">,</span><br/>\t\treplacement <span class=\"sy0\">=</span> replacement<span class=\"sy0\">,</span><br/>\t\tterminating <span class=\"sy0\">=</span> <span class=\"br0\">(</span>terminating <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">,</span> normalize<span class=\"br0\">(</span>pattern<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> markov<span class=\"sy0\">.</span>make_rules<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> lines <span class=\"sy0\">=</span> get_lines<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> rules <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> finders <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>line <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> line<span class=\"sy0\">:</span>find<span class=\"br0\">(</span><span class=\"st0\">\"^#\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\ts<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span>term<span class=\"sy0\">,</span>rep <span class=\"sy0\">=</span> line<span class=\"sy0\">:</span>find<span class=\"br0\">(</span>MARKOV_RULE_PATTERN<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> s <span class=\"kw1\">then</span><br/>\t\t\tr<span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> markov<span class=\"sy0\">.</span>rule<span class=\"br0\">(</span>pat<span class=\"sy0\">,</span>rep<span class=\"sy0\">,</span>term<span class=\"br0\">)</span><br/>\t\t\trules<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r<br/>\t\t\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>finders<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>\t\trules <span class=\"sy0\">=</span> rules<span class=\"sy0\">,</span><br/>\t\tfinders <span class=\"sy0\">=</span> finders<br/>\t<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> markov<span class=\"sy0\">.</span><span class=\"kw3\">execute</span><span class=\"br0\">(</span>state<span class=\"sy0\">,</span> sample_input<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> rules<span class=\"sy0\">,</span> finders <span class=\"sy0\">=</span> state<span class=\"sy0\">.</span>rules<span class=\"sy0\">,</span> state<span class=\"sy0\">.</span>finders<br/><span class=\"kw1\">local</span> found <span class=\"sy0\">=</span> <span class=\"kw4\">false</span> <span class=\"co1\">-- did we find any rule?</span><br/><span class=\"kw1\">local</span> terminate <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\u00a0<br/><span class=\"kw1\">repeat</span><br/>found <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>finders<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">local</span> found_now <span class=\"sy0\">=</span> <span class=\"kw4\">false</span> <span class=\"co1\">-- did we find this rule?</span><br/>\t<span class=\"kw1\">if</span> sample_input<span class=\"sy0\">:</span>find<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>\t\tfound <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t\tfound_now <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t<span class=\"kw1\">end</span><br/>\tsample_input <span class=\"sy0\">=</span> sample_input<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> rules<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">.</span>replacement<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">-- handle terminating rules</span><br/>\t<span class=\"kw1\">if</span> found_now <span class=\"kw1\">then</span> <br/>\t\t<span class=\"kw1\">if</span> rules<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">.</span>terminating <span class=\"kw1\">then</span> terminate <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">until</span> <span class=\"kw2\">not</span> found <span class=\"kw2\">or</span> terminate<br/>\u00a0<br/><span class=\"kw1\">return</span> sample_input<br/><span class=\"kw1\">end</span><br/><span class=\"co1\">------------------------------------------</span><br/><span class=\"co1\">------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">local</span> grammar1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"sy0\">#</span> This rules file is extracted from Wikipedia<span class=\"sy0\">:</span><br/><span class=\"sy0\">#</span> http<span class=\"sy0\">://</span>en<span class=\"sy0\">.</span>wikipedia<span class=\"sy0\">.</span>org<span class=\"sy0\">/</span>wiki<span class=\"sy0\">/</span>Markov_Algorithm<br/>A <span class=\"sy0\">-&gt;</span> apple<br/>B <span class=\"sy0\">-&gt;</span> bag<br/>S <span class=\"sy0\">-&gt;</span> shop<br/>T <span class=\"sy0\">-&gt;</span> the<br/>the shop <span class=\"sy0\">-&gt;</span> my brother<br/>a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> grammar2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"sy0\">#</span> Slightly modified from the rules on Wikipedia<br/>A <span class=\"sy0\">-&gt;</span> apple<br/>B <span class=\"sy0\">-&gt;</span> bag<br/>S <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>shop<br/>T <span class=\"sy0\">-&gt;</span> the<br/>the shop <span class=\"sy0\">-&gt;</span> my brother<br/>a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> grammar3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"sy0\">#</span> BNF Syntax testing rules<br/>A <span class=\"sy0\">-&gt;</span> apple<br/>WWWW <span class=\"sy0\">-&gt;</span> with<br/>Bgage <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-&gt;.*</span><br/>B <span class=\"sy0\">-&gt;</span> bag<br/><span class=\"sy0\">-&gt;.*</span> <span class=\"sy0\">-&gt;</span> money<br/>W <span class=\"sy0\">-&gt;</span> WW<br/>S <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>shop<br/>T <span class=\"sy0\">-&gt;</span> the<br/>the shop <span class=\"sy0\">-&gt;</span> my brother<br/>a never used <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">.</span>terminating rule<br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> grammar4 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"sy0\">###</span> Unary Multiplication Engine<span class=\"sy0\">,</span> <span class=\"kw1\">for</span> testing Markov Algorithm implementations<br/><span class=\"sy0\">###</span> By Donal Fellows<span class=\"sy0\">.</span><br/><span class=\"sy0\">#</span> Unary addition engine<br/>_<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> _1<span class=\"sy0\">+</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">+</span><br/><span class=\"sy0\">#</span> Pass <span class=\"kw1\">for</span> converting from the splitting of multiplication into ordinary<br/><span class=\"sy0\">#</span> addition<br/><span class=\"nu0\">1</span>! <span class=\"sy0\">-&gt;</span>\u00a0!<span class=\"nu0\">1</span><br/><span class=\"sy0\">,</span>! <span class=\"sy0\">-&gt;</span>\u00a0!<span class=\"sy0\">+</span><br/>_! <span class=\"sy0\">-&gt;</span> _<br/><span class=\"sy0\">#</span> Unary multiplication by duplicating left side<span class=\"sy0\">,</span> right side times<br/><span class=\"nu0\">1</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">,</span>@y<br/>1x <span class=\"sy0\">-&gt;</span> xX<br/>X<span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><br/>X1 <span class=\"sy0\">-&gt;</span> 1X<br/>_x <span class=\"sy0\">-&gt;</span> _X<br/><span class=\"sy0\">,</span>x <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">,</span>X<br/>y1 <span class=\"sy0\">-&gt;</span> 1y<br/>y_ <span class=\"sy0\">-&gt;</span> _<br/><span class=\"sy0\">#</span> Next phase of applying<br/><span class=\"nu0\">1</span>@<span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">,</span>@y<br/><span class=\"nu0\">1</span>@_ <span class=\"sy0\">-&gt;</span> @_<br/><span class=\"sy0\">,</span>@_ <span class=\"sy0\">-&gt;</span>\u00a0!_<br/><span class=\"sy0\">++</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">+</span><br/><span class=\"sy0\">#</span> Termination cleanup <span class=\"kw1\">for</span> addition<br/>_1 <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">+</span>_ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>_<span class=\"sy0\">+</span>_ <span class=\"sy0\">-&gt;</span> <br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> grammar5 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"sy0\">#</span> Turing machine<span class=\"sy0\">:</span> three<span class=\"sy0\">-</span>state busy beaver<br/><span class=\"sy0\">#</span><br/><span class=\"sy0\">#</span> state A<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move right<span class=\"sy0\">,</span> new state B<br/>A0 <span class=\"sy0\">-&gt;</span> 1B<br/><span class=\"sy0\">#</span> state A<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move left<span class=\"sy0\">,</span> new state C<br/>0A1 <span class=\"sy0\">-&gt;</span> C01<br/>1A1 <span class=\"sy0\">-&gt;</span> C11<br/><span class=\"sy0\">#</span> state B<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move left<span class=\"sy0\">,</span> new state A<br/>0B0 <span class=\"sy0\">-&gt;</span> A01<br/>1B0 <span class=\"sy0\">-&gt;</span> A11<br/><span class=\"sy0\">#</span> state B<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move right<span class=\"sy0\">,</span> new state B<br/>B1 <span class=\"sy0\">-&gt;</span> 1B<br/><span class=\"sy0\">#</span> state C<span class=\"sy0\">,</span> symbol <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move left<span class=\"sy0\">,</span> new state B<br/>0C0 <span class=\"sy0\">-&gt;</span> B01<br/>1C0 <span class=\"sy0\">-&gt;</span> B11<br/><span class=\"sy0\">#</span> state C<span class=\"sy0\">,</span> symbol <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">write</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> move left<span class=\"sy0\">,</span> halt<br/>0C1 <span class=\"sy0\">-&gt;</span> H01<br/>1C1 <span class=\"sy0\">-&gt;</span> H11<br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> text1 <span class=\"sy0\">=</span> <span class=\"st0\">\"I bought a B of As from T S.\"</span><br/><span class=\"kw1\">local</span> text2 <span class=\"sy0\">=</span> <span class=\"st0\">\"I bought a B of As W my Bgage from T S.\"</span><br/><span class=\"kw1\">local</span> text3 <span class=\"sy0\">=</span> <span class=\"st0\">'_1111*11111_'</span><br/><span class=\"kw1\">local</span> text4 <span class=\"sy0\">=</span> <span class=\"st0\">'000000A000000'</span><br/>\u00a0<br/><span class=\"co1\">------------------------------------------</span><br/><span class=\"co1\">------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">function</span> do_markov<span class=\"br0\">(</span>rules<span class=\"sy0\">,</span> input<span class=\"sy0\">,</span> output<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> m <span class=\"sy0\">=</span> markov<span class=\"sy0\">.</span>make_rules<span class=\"br0\">(</span>rules<span class=\"br0\">)</span><br/>\tinput <span class=\"sy0\">=</span> markov<span class=\"sy0\">.</span><span class=\"kw3\">execute</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> input<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span>input <span class=\"sy0\">==</span> output<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>do_markov<span class=\"br0\">(</span>grammar1<span class=\"sy0\">,</span> text1<span class=\"sy0\">,</span> <span class=\"st0\">'I bought a bag of apples from my brother.'</span><span class=\"br0\">)</span><br/>do_markov<span class=\"br0\">(</span>grammar2<span class=\"sy0\">,</span> text1<span class=\"sy0\">,</span> <span class=\"st0\">'I bought a bag of apples from T shop.'</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- stretch goals</span><br/>do_markov<span class=\"br0\">(</span>grammar3<span class=\"sy0\">,</span> text2<span class=\"sy0\">,</span> <span class=\"st0\">'I bought a bag of apples with my money from T shop.'</span><span class=\"br0\">)</span><br/>do_markov<span class=\"br0\">(</span>grammar4<span class=\"sy0\">,</span> text3<span class=\"sy0\">,</span> <span class=\"st0\">'11111111111111111111'</span><span class=\"br0\">)</span><br/>do_markov<span class=\"br0\">(</span>grammar5<span class=\"sy0\">,</span> text4<span class=\"sy0\">,</span> <span class=\"st0\">'00011H1111000'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 12, "block": "<pre class=\"text highlighted_source\">markov[ruleset_, text_]\u00a0:= <br/>  Module[{terminating = False, output = text, <br/>    rules = StringCases[<br/>      ruleset, {StartOfLine ~~ pattern\u00a0: Except[\"\\n\"] .. ~~ <br/>         \" \" | \"\\t\" .. ~~ \"-&gt;\" ~~ \" \" | \"\\t\" .. ~~ dot\u00a0: \"\" | \".\" ~~ <br/>         replacement\u00a0: Except[\"\\n\"] .. ~~ EndOfLine\u00a0:&gt; {pattern, <br/>         replacement, dot == \".\"}}]}, <br/>   While[! terminating, terminating = True; <br/>    Do[If[! StringFreeQ[output, rule[[1]]], <br/>      output = StringReplace[output, rule[[1]] -&gt; rule[[2]]]; <br/>      If[! rule[[3]], terminating = False]; Break[]], {rule, rules}]];<br/>    output];</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 21, "block": "<pre class=\"text highlighted_source\">\t9\t\u041f4<br/>\t\u041a\u0418\u041f4\t[x]\t\u041f7\t\u0412x\t{x}\t\u041f8<br/>\t\u0418\u041f8\t\u0418\u041fE\t*\t\u041f8\t{x}\tx=0\t08<br/>\t\u041f5\t\u0418\u041f9\t\u041f1\tlg\t[x]\t10^x\t\u041f3<br/>\t\t\u0418\u041f1\t\u041f2<br/>\t\t\u0421x\t\u041f6<br/>\t\t\t\u0418\u041f2\t\u0418\u041f7\t-\tx=0\t70<br/>\t\t\t\t\u0418\u041f9\t^\tlg\t[x]\t1\t+\t\u0418\u041f5\t-\t10^x\t/\t[x]<br/>\t\t\t\t\u0418\u041f6\t\u0418\u041f8\tx#0\t50\tlg\t[x]\t1\t+\t+\t10^x\t*<br/>\t\t\t\t\u0418\u041f9\t\u0418\u041f6\t10^x\t\u041f7\t/\t{x}\t\u0418\u041f7\t*\t+<br/>\t\t\t\t\u0418\u041f8\t\u0418\u041f7\t*\t+\t\u041f9<br/>\t\t\t\u0421/\u041f\t\u0411\u041f\t00<br/>\t\t\tx&gt;=0\t80<br/>\t\t\t\u041a\u0418\u041f6<br/>\t\t\t\u0418\u041f2\t\u0418\u041fE\t/\t[x]\t\u041f2<br/>\t\tx=0\t26<br/>\t\t\u041a\u0418\u041f5<br/>\t\t\u0418\u041f1\t\u0418\u041f3\t/\t{x}\t\u0418\u041f3\t*\t\u041f1<br/>\t\t\u0418\u041f3\t\u0418\u041fE\t/\t[x]\t\u041f3<br/>\tx=0\t22<br/>\t\u0418\u041f4\t\u0418\u041f0\t-\t9\t-\tx=0\t02\t\u0421/\u041f</pre>"}, {"lang": "OCaml", "loc": 48, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* Useful for resource cleanup (such as filehandles) *)</span><br/><span class=\"kw1\">let</span> try_finally x f g <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> f x <span class=\"kw1\">in</span> g x<span class=\"sy0\">;</span> res<br/>  <span class=\"kw1\">with</span> e <span class=\"sy0\">-&gt;</span> g x<span class=\"sy0\">;</span> <span class=\"kw1\">raise</span> e<br/>\u00a0<br/><span class=\"co1\">(* Substitute string 'b' for first occurance of regexp 'a' in 's';<br/> * Raise Not_found if there was no occurance of 'a'. *)</span><br/><span class=\"kw1\">let</span> subst a b s <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>search_forward a s <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* to generate Not_found *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>replace_first a b s<br/>\u00a0<br/><span class=\"kw1\">let</span> parse_rules cin <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> rule <span class=\"sy0\">=</span> <span class=\"kw1\">regexp</span> <span class=\"st0\">\"\\\\(.+\\\\)[ \\t]+-&gt;[ \\t]+\\\\(.*\\\\)\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> leader s c <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> parse_b s <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> leader s <span class=\"sy0\">'.'</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>string_after s <span class=\"nu0\">1</span>,<span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>s,<span class=\"kw1\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> parse_line rules <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">try</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> cin <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> leader s <span class=\"sy0\">'#'</span> <span class=\"kw1\">then</span> parse_line rules<br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> string_match rule s <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> regexp_string <span class=\"br0\">(</span>matched_group <span class=\"nu0\">1</span> s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">let</span> b,terminate <span class=\"sy0\">=</span> parse_b <span class=\"br0\">(</span>matched_group <span class=\"nu0\">2</span> s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>        parse_line <span class=\"br0\">(</span><span class=\"br0\">(</span>a,b,terminate<span class=\"br0\">)</span><span class=\"sy0\">::</span>rules<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">failwith</span> <span class=\"br0\">(</span><span class=\"st0\">\"parse error: \"</span><span class=\"sy0\">^</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> rules<br/>  <span class=\"kw1\">in</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev <span class=\"br0\">(</span>parse_line <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> run rules text <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> apply s <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> s<br/>    <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a,b,term<span class=\"br0\">)</span><span class=\"sy0\">::</span>next <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">try</span><br/>          <span class=\"kw1\">let</span> s<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> subst a b s <span class=\"kw1\">in</span><br/>          <span class=\"kw1\">if</span> term <span class=\"kw1\">then</span> s<span class=\"sy0\">'</span> <span class=\"kw1\">else</span> run rules s<span class=\"sy0\">'</span><br/>        <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> apply s next<br/>  <span class=\"kw1\">in</span> apply text rules<br/>\u00a0<br/><span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Expecting one argument: a filename where rules can be found.\"</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">let</span> rules <span class=\"sy0\">=</span> try_finally <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> parse_rules <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> <span class=\"kw1\">in</span><br/>    <span class=\"co1\">(* Translate lines read from stdin, until EOF *)</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> translate <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>run rules <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> <span class=\"kw1\">stdin</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      translate <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">in</span> <span class=\"kw1\">try</span> translate <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 18, "block": "<pre class=\"perl highlighted_source\"><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Please provide exactly one source file as an argument.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> <span class=\"kw1\">my</span> <span class=\"re0\">$source</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;'</span><span class=\"sy0\">,</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"I couldn't open <span class=\"es0\">\\\"</span>$ARGV[0]<span class=\"es0\">\\\"</span> for reading. ($!.)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@rules</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$source</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><span class=\"sy0\">/</span><span class=\"re0\">\\A</span><span class=\"co1\">#/ and next;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"co2\">/(.*?)\\s+-&gt;\\s+(\\.?)(.*)/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Syntax error: $_\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rules</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@a</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$source</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$input</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"co5\">$/</span><span class=\"sy0\">;</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>OUTER<span class=\"sy0\">:</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">@rules</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$terminating</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$input</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/\\Q$from\\E/$to/</span><br/>            <span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"re0\">$terminating</span> <span class=\"sy0\">?</span> <span class=\"kw1\">last</span> OUTER <span class=\"sy0\">:</span> <span class=\"kw1\">redo</span> OUTER<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$input</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 65, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">grammar</span> Markov <span class=\"br0\">{</span><br/>    <span class=\"kw2\">token</span> TOP <span class=\"br0\">{</span><br/>        <span class=\"sy0\">^</span> <span class=\"br0\">[</span><span class=\"sy0\">^^</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>rule<span class=\"sy0\">&gt;</span> <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>comment<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> $$ <span class=\"br0\">[</span>\\n<span class=\"sy0\">|</span>$<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">*</span> $<br/>        <span class=\"br0\">{</span> make <span class=\"re0\">$&lt;rule</span><span class=\"sy0\">&gt;&gt;&gt;.</span><span class=\"me1\">ast</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> comment <span class=\"br0\">{</span><br/>        <span class=\"sy0\">&lt;</span>before <span class=\"sy0\">^^&gt;</span> <span class=\"st_h\">'#'</span> \\N<span class=\"sy0\">*</span><br/>        <span class=\"br0\">{</span> make Nil <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> ws <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy0\">|</span>\\t<span class=\"br0\">]</span><span class=\"sy0\">*</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">rule</span> <span class=\"kw2\">rule</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">&lt;</span>before <span class=\"sy0\">^^&gt;</span><span class=\"re0\">$&lt;pattern</span><span class=\"sy0\">&gt;=</span><span class=\"br0\">[</span>\\N<span class=\"sy0\">+?</span><span class=\"br0\">]</span> <span class=\"st_h\">'-&gt;'</span><br/>        <span class=\"re0\">$&lt;terminal</span><span class=\"sy0\">&gt;=</span><span class=\"br0\">[</span>\\<span class=\"sy0\">.</span><span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"re0\">$&lt;replacement</span><span class=\"sy0\">&gt;=</span><span class=\"br0\">[</span>\\N<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">{</span> make <span class=\"br0\">{</span><span class=\"sy0\">:</span>pattern<span class=\"br0\">(</span><span class=\"re0\">$&lt;pattern</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">:</span>replacement<span class=\"br0\">(</span><span class=\"re0\">$&lt;replacement</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">:</span>terminal<span class=\"br0\">(</span><span class=\"re0\">$&lt;terminal</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Str</span> <span class=\"kw1\">eq</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> run<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$ruleset</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$start_value</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$start_value</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rules</span> <span class=\"sy0\">=</span> Markov<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"re0\">$ruleset</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ast</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$beginning</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@rules</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$prev</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"sy0\">.&lt;</span>pattern<span class=\"sy0\">&gt;,</span> <span class=\"sy0\">.&lt;</span>replacement<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw3\">say</span> <span class=\"re0\">$value</span> <span class=\"kw1\">if</span> <span class=\"re0\">$verbose</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$value</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$prev</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$value</span> <span class=\"kw1\">if</span> <span class=\"sy0\">.&lt;</span>terminal<span class=\"sy0\">&gt;;</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$value</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$prev</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$value</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$beginning</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Bool <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rulefiles</span> <span class=\"sy0\">=</span> dir<span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"co2\">/rules.+/</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@rulefiles</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$rulefile</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$testfile</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rulefile</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"st0\">\"rules\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"test\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$start_value</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>try slurp<span class=\"br0\">(</span><span class=\"re0\">$testfile</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">trim</span><span class=\"sy0\">-</span>trailing<span class=\"br0\">)</span><br/>                          <span class=\"sy0\">//</span> prompt<span class=\"br0\">(</span><span class=\"st0\">\"please give a start value: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$ruleset</span> <span class=\"sy0\">=</span> slurp<span class=\"br0\">(</span><span class=\"re0\">$rulefile</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"re0\">$start_value</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> run<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$ruleset</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$start_value</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Str <span class=\"re0\">$rulefile</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*.</span><span class=\"me1\">IO</span><span class=\"sy0\">.</span><span class=\"me1\">f</span><span class=\"sy0\">,</span> Str <span class=\"re0\">$input</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*.</span><span class=\"me1\">IO</span><span class=\"sy0\">.</span><span class=\"me1\">f</span><span class=\"sy0\">,</span> Bool <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ruleset</span> <span class=\"sy0\">=</span> slurp<span class=\"br0\">(</span><span class=\"re0\">$rulefile</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start_value</span> <span class=\"sy0\">=</span> slurp<span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">trim</span><span class=\"sy0\">-</span>trailing<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"starting with $start_value.perl()\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> run<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$ruleset</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$start_value</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Str <span class=\"re0\">$rulefile</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*.</span><span class=\"me1\">IO</span><span class=\"sy0\">.</span><span class=\"me1\">f</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@pieces</span><span class=\"sy0\">,</span> Bool <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ruleset</span> <span class=\"sy0\">=</span> slurp<span class=\"br0\">(</span><span class=\"re0\">$rulefile</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start_value</span> <span class=\"sy0\">=</span> <span class=\"re0\">@pieces</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"starting with $start_value.perl()\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> run<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$ruleset</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$start_value</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$verbose</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 125, "block": "<pre class=\"text highlighted_source\">procedure markov(string rules, input, expected)<br/>    sequence subs = {}, reps = {}<br/>    sequence lines = split(substitute(rules,\"\\t\",\" \"),'\\n')<br/>    for i=1 to length(lines) do<br/>        string li = lines[i]<br/>        if length(li) and li[1]!='#' then<br/>            integer k = match(\" -&gt; \",li)<br/>            if k then<br/>                subs = append(subs,trim(li[1..k-1]))<br/>                reps = append(reps,trim(li[k+4..$]))<br/>            end if<br/>        end if<br/>    end for<br/>    string res = input<br/>    bool term = false<br/>    while 1 do<br/>        bool found = false<br/>        for i=1 to length(subs) do<br/>            string sub = subs[i]<br/>            integer k = match(sub,res)<br/>            if k then<br/>                found = true<br/>                string rep = reps[i]<br/>                if length(rep) and rep[1]='.' then<br/>                    rep = rep[2..$]<br/>                    term = true<br/>                end if<br/>                res[k..k+length(sub)-1] = rep<br/>                exit<br/>            end if<br/>            if term then exit end if<br/>        end for<br/>        if term or not found then exit end if<br/>    end while<br/>   \u00a0?{input,res,iff(res=expected?\"ok\":\"**ERROR**\")}<br/>end procedure<br/>\u00a0<br/>constant ruleset1 = \"\"\"<br/># This rules file is extracted from Wikipedia:<br/># http://en.wikipedia.org/wiki/Markov_Algorithm<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule\"\"\"<br/>markov(ruleset1,\"I bought a B of As from T S.\",\"I bought a bag of apples from my brother.\")<br/>\u00a0<br/>constant ruleset2 = \"\"\"<br/># Slightly modified from the rules on Wikipedia<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule\"\"\"<br/>markov(ruleset2,\"I bought a B of As from T S.\",\"I bought a bag of apples from T shop.\")<br/>\u00a0<br/>constant ruleset3 = \"\"\"<br/># BNF Syntax testing rules<br/>A -&gt; apple<br/>WWWW -&gt; with<br/>Bgage -&gt; -&gt;.*<br/>B -&gt; bag<br/>-&gt;.* -&gt; money<br/>W -&gt; WW<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule\"\"\"<br/>markov(ruleset3,\"I bought a B of As W my Bgage from T S.\",\"I bought a bag of apples with my money from T shop.\")<br/>\u00a0<br/>constant ruleset4 = \"\"\"<br/>### Unary Multiplication Engine, for testing Markov Algorithm implementations<br/>### By Donal Fellows.<br/># Unary addition engine<br/>_+1 -&gt; _1+<br/>1+1 -&gt; 11+<br/># Pass for converting from the splitting of multiplication into ordinary<br/># addition<br/>1! -&gt;\u00a0!1<br/>,! -&gt;\u00a0!+<br/>_! -&gt; _<br/># Unary multiplication by duplicating left side, right side times<br/>1*1 -&gt; x,@y<br/>1x -&gt; xX<br/>X, -&gt; 1,1<br/>X1 -&gt; 1X<br/>_x -&gt; _X<br/>,x -&gt; ,X<br/>y1 -&gt; 1y<br/>y_ -&gt; _<br/># Next phase of applying<br/><a class=\"__cf_email__\" data-cfemail=\"ebdaabda\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y<br/><a class=\"__cf_email__\" data-cfemail=\"211061\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_<br/>,@_ -&gt;\u00a0!_<br/>++ -&gt; +<br/># Termination cleanup for addition<br/>_1 -&gt; 1<br/>1+_ -&gt; 1<br/>_+_ -&gt; <br/>\"\"\"<br/>markov(ruleset4,\"_1111*11111_\",\"11111111111111111111\")<br/>\u00a0<br/>constant ruleset5 = \"\"\"<br/># Turing machine: three-state busy beaver<br/>#<br/># state A, symbol 0 =&gt; write 1, move right, new state B<br/>A0 -&gt; 1B<br/># state A, symbol 1 =&gt; write 1, move left, new state C<br/>0A1 -&gt; C01<br/>1A1 -&gt; C11<br/># state B, symbol 0 =&gt; write 1, move left, new state A<br/>0B0 -&gt; A01<br/>1B0 -&gt; A11<br/># state B, symbol 1 =&gt; write 1, move right, new state B<br/>B1 -&gt; 1B<br/># state C, symbol 0 =&gt; write 1, move left, new state B<br/>0C0 -&gt; B01<br/>1C0 -&gt; B11<br/># state C, symbol 1 =&gt; write 1, move left, halt<br/>0C1 -&gt; H01<br/>1C1 -&gt; H11<br/>\"\"\"<br/>markov(ruleset5,\"000000A000000\",\"00011H1111000\")</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(de markov (File Text)<br/>   (use (@A @Z R)<br/>      (let Rules<br/>         (make<br/>            (in File<br/>               (while (skip \"#\")<br/>                  (when (match '(@A \" \" \"-\" \"&gt;\" \" \" @Z) (replace (line) \"@\" \"#\"))<br/>                     (link (cons (clip @A) (clip @Z))) ) ) ) )<br/>         (setq Text (chop Text))<br/>         (pack<br/>            (loop<br/>               (NIL<br/>                  (find<br/>                     '((R) (match (append '(@A) (car R) '(@Z)) Text))<br/>                     Rules )<br/>                  Text )<br/>               (T (= \".\" (cadr (setq R @)))<br/>                  (append @A (cddr R) @Z) )<br/>               (setq Text (append @A (cdr R) @Z)) ) ) ) ) )</pre>"}, {"lang": "Prolog", "loc": 89, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> module<span class=\"br0\">(</span><span class=\"st_h\">'markov.pl'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>markov<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span> apply_markov<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>apply_markov<span class=\"br0\">(</span>Rules<span class=\"sy4\">,</span> Sentence<span class=\"sy4\">,</span> Replacement<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>\\X^Y^<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Ch<span class=\"br0\">)</span><span class=\"sy4\">,</span> phrase<span class=\"br0\">(</span>markov<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> Ch<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> TmpRules<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% comments produce empty rules</span><br/>\texclude<span class=\"br0\">(</span><span class=\"sy6\">=</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> TmpRules<span class=\"sy4\">,</span> LstRules<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>Sentence<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tapply_rules<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> LstRules<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>Replacement<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>apply_rules<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> Out <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tapply_one_rule<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> Out1<span class=\"sy4\">,</span> Keep_On<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   Keep_On <span class=\"sy6\">=</span> false<br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  Out <span class=\"sy6\">=</span> Out1<br/>\t<span class=\"sy4\">;</span>   apply_rules<span class=\"br0\">(</span>Out1<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>apply_one_rule<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Rule <span class=\"sy5\">|</span> Rules<span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"sy4\">,</span> Keep_On<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\textract<span class=\"br0\">(</span>Rule<span class=\"sy4\">,</span> In<span class=\"sy4\">,</span> Out1<span class=\"sy4\">,</span> KeepOn<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   KeepOn <span class=\"sy6\">=</span> false<br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  Out <span class=\"sy6\">=</span> Out1<span class=\"sy4\">,</span> Keep_On <span class=\"sy6\">=</span> KeepOn<br/>\t<span class=\"sy4\">;</span>   <span class=\"br0\">(</span>KeepOn <span class=\"sy6\">=</span> stop<br/>\t    <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>\tOut <span class=\"sy6\">=</span> Out1<span class=\"sy4\">,</span><br/>\t\tKeep_On <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>\t    <span class=\"sy4\">;</span>\tapply_one_rule<span class=\"br0\">(</span>Out1<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> Out<span class=\"sy4\">,</span> Keep_On<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>apply_one_rule<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> In<span class=\"sy4\">,</span> false<span class=\"br0\">)</span> <span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>extract<span class=\"br0\">(</span><span class=\"br0\">[</span>Pattern<span class=\"sy4\">,</span> Replace<span class=\"br0\">]</span><span class=\"sy4\">,</span> In<span class=\"sy4\">,</span> Out<span class=\"sy4\">,</span> Keep_On<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   Replace <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"sy4\">.</span><span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  R <span class=\"sy6\">=</span> Rest<br/>\t<span class=\"sy4\">;</span>   R <span class=\"sy6\">=</span> Replace<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">(</span>append<span class=\"br0\">(</span>Pattern<span class=\"sy4\">,</span> End<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span> append<span class=\"br0\">(</span>Deb<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> In<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  extract<span class=\"br0\">(</span><span class=\"br0\">[</span>Pattern<span class=\"sy4\">,</span> Replace<span class=\"br0\">]</span><span class=\"sy4\">,</span> End<span class=\"sy4\">,</span> NewEnd<span class=\"sy4\">,</span> _Keep_On<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    append_3<span class=\"br0\">(</span>Deb<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> NewEnd<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    Keep_On <span class=\"sy6\">=</span> stop<br/>\t<span class=\"sy4\">;</span>   Out <span class=\"sy6\">=</span> In<span class=\"sy4\">,</span><br/>\t    <span class=\"br0\">(</span>   R <span class=\"sy6\">=</span> Replace<br/>\t    <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  Keep_On <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>\t    <span class=\"sy4\">;</span>   Keep_On <span class=\"sy6\">=</span> false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>append_3<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t       append<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       append<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% creation of the rules</span><br/>markov<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> line<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>line<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> text<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span> newline<span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>newline <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'\\n'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> newline<span class=\"sy4\">.</span><br/>newline <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>text<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> comment<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>text<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> rule<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>comment<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'#'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> anything<span class=\"sy4\">.</span><br/>\u00a0<br/>anything <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>X \\<span class=\"sy6\">=</span> <span class=\"st_h\">'\\n'</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> anything<span class=\"sy4\">.</span><br/>anything <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'\\n'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>anything <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rule<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\tpattern<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span> whitespaces<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'-'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'&gt;'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> whitespaces<span class=\"sy4\">,</span> end_rule<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pattern<span class=\"br0\">(</span><span class=\"br0\">[</span>X <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>X \\<span class=\"sy6\">=</span> <span class=\"st_h\">'\\n'</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> pattern<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>pattern<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>whitespaces <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'\\t'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> whitespace<span class=\"sy4\">.</span><br/>whitespaces <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> whitespace<span class=\"sy4\">.</span><br/>\u00a0<br/>whitespace <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> whitespaces<span class=\"sy4\">.</span><br/>whitespace <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>end_rule<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy4\">.</span><span class=\"sy5\">|</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"sy4\">.</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> rest_of_rule<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>end_rule<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> rest_of_rule<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>end_rule<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rest_of_rule<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> replacement<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>replacement<span class=\"br0\">(</span><span class=\"br0\">[</span>X <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>X \\<span class=\"sy6\">=</span> <span class=\"st_h\">'\\n'</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> replacement<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>replacement<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 114, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> mRule<br/>  pattern.s<br/>  replacement.s<br/>  isTerminal.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> parseRule<span class=\"br0\">(</span>text.s, List rules.mRule<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  #tab <span class=\"sy0\">=</span> <span class=\"nu0\">9</span>: #space <span class=\"sy0\">=</span> <span class=\"nu0\">32</span>: #whiteSpace$ <span class=\"sy0\">=</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>#space<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>#tab<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> tLen, cPtr, nChar.c, pEnd, pLast, pattern.s<br/>\u00a0<br/>  cPtr <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>#whiteSpace$, <span class=\"kw2\">Left</span><span class=\"br0\">(</span>text, cPtr<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;parse error</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>text, cPtr<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">2</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;comment skipped</span><br/>\u00a0<br/>  tLen <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    cPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> cPtr <span class=\"sy0\">&gt;</span> tLen: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;parse error</span><br/>    nChar <span class=\"sy0\">=</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>text, cPtr, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Select</span> nChar<br/>      <span class=\"kw1\">Case</span> #space, #tab<br/>        <span class=\"kw1\">Select</span> pEnd<br/>          <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><br/>            pEnd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            pLast <span class=\"sy0\">=</span> cPtr <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">Case</span> <span class=\"nu0\">3</span><br/>            pattern <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>text, pLast<span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndSelect</span><br/>      <span class=\"kw1\">Case</span> '<span class=\"sy0\">-</span>'<br/>        <span class=\"kw1\">If</span> pEnd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: pEnd <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>: <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">Case</span> '<span class=\"sy0\">&gt;</span>'<br/>        <span class=\"kw1\">If</span> pEnd <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>: pEnd <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>: <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndSelect</span><br/>  <span class=\"kw1\">Until</span> pattern <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span><br/>    cPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Until</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>#whiteSpace$, <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>text, cPtr, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> isTerminal<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>text, cPtr, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><br/>    isTerminal <span class=\"sy0\">=</span> #True: cPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>pattern <span class=\"sy0\">=</span> pattern<br/>  rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>replacement <span class=\"sy0\">=</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>text, tLen <span class=\"sy0\">-</span> cPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isTerminal <span class=\"sy0\">=</span> isTerminal<br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span> <span class=\"co1\">;processed rule</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s interpretMarkov<span class=\"br0\">(</span>text.s, List rules.mRule<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    madeReplacement <span class=\"sy0\">=</span> #False<br/>    <span class=\"kw1\">ForEach</span> rules<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>text, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>pattern, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        text <span class=\"sy0\">=</span> <span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span>text, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>pattern, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>replacement<span class=\"br0\">)</span><br/>        madeReplacement <span class=\"sy0\">=</span> #True: isFinished <span class=\"sy0\">=</span> rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isTerminal<br/>        <span class=\"kw1\">Break</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Until</span> <span class=\"kw1\">Not</span> madeReplacement <span class=\"kw1\">Or</span> isFinished<br/>  <span class=\"kw1\">ProcedureReturn</span> text<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> addRule<span class=\"br0\">(</span>text.s, List rules.mRule<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> result <span class=\"sy0\">=</span> parseRule<span class=\"br0\">(</span>text, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span> result<br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Invalid rule: \"</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> text <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Added: \"</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> text <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Comment: \"</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> text <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndSelect</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">350</span>, <span class=\"nu0\">300</span>, <span class=\"st0\">\"Markov Algorithm Interpreter\"</span>, #PB_Window_SystemMenu<span class=\"br0\">)</span><br/><span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">75</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Load Ruleset\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">163</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">65</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Add Rule\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">280</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">65</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Interpret\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">TextGadget</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Input:\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">StringGadget</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">300</span>, <span class=\"nu0\">20</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">TextGadget</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">35</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Output:\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">160</span>, <span class=\"nu0\">70</span>, <span class=\"nu0\">70</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Clear Output\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">EditorGadget</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">300</span>, <span class=\"nu0\">195</span>, #PB_Editor_ReadOnly<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> rules.mRule<span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">Define</span> event, isDone, text.s, result, file.s<br/><span class=\"kw1\">Repeat</span><br/>  event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span> event<br/>    <span class=\"kw1\">Case</span> #PB_Event_Gadget<br/>      <span class=\"kw1\">Select</span> <span class=\"kw2\">EventGadget</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span><br/>          <span class=\"kw1\">Define</span> file.s, rule.s<br/>          file <span class=\"sy0\">=</span> <span class=\"kw2\">OpenFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Select rule set\"</span>, <span class=\"st0\">\"*.txt\"</span>, <span class=\"st0\">\"Text (*.txt)|*.txt\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> file<br/>            <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, file<span class=\"br0\">)</span><br/>            <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span><span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              addRule<span class=\"br0\">(</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Wend</span><br/>            <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Loaded \"</span> <span class=\"sy0\">+</span>  <span class=\"kw2\">Str</span><span class=\"br0\">(</span>ListSize<span class=\"br0\">(</span>rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" rules.\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span><br/>          addRule<span class=\"br0\">(</span><span class=\"kw2\">GetGadgetText</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span><br/>          text <span class=\"sy0\">=</span> <span class=\"kw2\">GetGadgetText</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Interpret: \"</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> text <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>          <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Result: \"</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> interpretMarkov<span class=\"br0\">(</span>text, rules<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span>: <span class=\"kw2\">AddGadgetItem</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">6</span><br/>          ClearGadgetItems<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndSelect</span><br/>    <span class=\"kw1\">Case</span> #PB_Event_CloseWindow<br/>      isDone <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">EndSelect</span><br/><span class=\"kw1\">Until</span> isDone<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 134, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">re</span><br/>\u00a0<br/><span class=\"kw1\">def</span> extractreplacements<span class=\"br0\">(</span>grammar<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span>matchobj.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"st0\">'pat'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> matchobj.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"st0\">'repl'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">bool</span><span class=\"br0\">(</span>matchobj.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"st0\">'term'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> matchobj <span class=\"kw1\">in</span> <span class=\"kw3\">re</span>.<span class=\"me1\">finditer</span><span class=\"br0\">(</span>syntaxre<span class=\"sy0\">,</span> grammar<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> matchobj.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"st0\">'rule'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> replace<span class=\"br0\">(</span>text<span class=\"sy0\">,</span> replacements<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">for</span> pat<span class=\"sy0\">,</span> repl<span class=\"sy0\">,</span> term <span class=\"kw1\">in</span> replacements:<br/>            <span class=\"kw1\">if</span> pat <span class=\"kw1\">in</span> text:<br/>                text <span class=\"sy0\">=</span> text.<span class=\"me1\">replace</span><span class=\"br0\">(</span>pat<span class=\"sy0\">,</span> repl<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> term:<br/>                    <span class=\"kw1\">return</span> text<br/>                <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">return</span> text<br/>\u00a0<br/>syntaxre <span class=\"sy0\">=</span> r<span class=\"st0\">\"\"\"(?mx)<br/>^(?: <br/>  (?: (?P&lt;comment&gt; <span class=\"es0\">\\#</span> .* ) ) |<br/>  (?: (?P&lt;blank&gt;   <span class=\"es0\">\\s</span>*  ) (?: <span class=\"es0\">\\n</span> | $ )  ) |<br/>  (?: (?P&lt;rule&gt;    (?P&lt;pat&gt; .+? ) <span class=\"es0\">\\s</span>+ -&gt; <span class=\"es0\">\\s</span>+ (?P&lt;term&gt; <span class=\"es0\">\\.</span>)? (?P&lt;repl&gt; .+) ) )<br/>)$<br/>\"\"\"</span><br/>\u00a0<br/>grammar1 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"\"<span class=\"es0\">\\</span><br/># This rules file is extracted from Wikipedia:<br/># http://en.wikipedia.org/wiki/Markov_Algorithm<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>\"\"\"</span><br/>\u00a0<br/>grammar2 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/># Slightly modified from the rules on Wikipedia<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>'''</span><br/>\u00a0<br/>grammar3 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/># BNF Syntax testing rules<br/>A -&gt; apple<br/>WWWW -&gt; with<br/>Bgage -&gt; -&gt;.*<br/>B -&gt; bag<br/>-&gt;.* -&gt; money<br/>W -&gt; WW<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>'''</span><br/>\u00a0<br/>grammar4 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>### Unary Multiplication Engine, for testing Markov Algorithm implementations<br/>### By Donal Fellows.<br/># Unary addition engine<br/>_+1 -&gt; _1+<br/>1+1 -&gt; 11+<br/># Pass for converting from the splitting of multiplication into ordinary<br/># addition<br/>1! -&gt;\u00a0!1<br/>,! -&gt;\u00a0!+<br/>_! -&gt; _<br/># Unary multiplication by duplicating left side, right side times<br/>1*1 -&gt; x,@y<br/>1x -&gt; xX<br/>X, -&gt; 1,1<br/>X1 -&gt; 1X<br/>_x -&gt; _X<br/>,x -&gt; ,X<br/>y1 -&gt; 1y<br/>y_ -&gt; _<br/># Next phase of applying<br/><a class=\"__cf_email__\" data-cfemail=\"50611061\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y<br/><a class=\"__cf_email__\" data-cfemail=\"506110\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_<br/>,@_ -&gt;\u00a0!_<br/>++ -&gt; +<br/># Termination cleanup for addition<br/>_1 -&gt; 1<br/>1+_ -&gt; 1<br/>_+_ -&gt; <br/>'''</span><br/>\u00a0<br/>grammar5 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/># Turing machine: three-state busy beaver<br/>#<br/># state A, symbol 0 =&gt; write 1, move right, new state B<br/>A0 -&gt; 1B<br/># state A, symbol 1 =&gt; write 1, move left, new state C<br/>0A1 -&gt; C01<br/>1A1 -&gt; C11<br/># state B, symbol 0 =&gt; write 1, move left, new state A<br/>0B0 -&gt; A01<br/>1B0 -&gt; A11<br/># state B, symbol 1 =&gt; write 1, move right, new state B<br/>B1 -&gt; 1B<br/># state C, symbol 0 =&gt; write 1, move left, new state B<br/>0C0 -&gt; B01<br/>1C0 -&gt; B11<br/># state C, symbol 1 =&gt; write 1, move left, halt<br/>0C1 -&gt; H01<br/>1C1 -&gt; H11<br/>'''</span><br/>\u00a0<br/>text1 <span class=\"sy0\">=</span> <span class=\"st0\">\"I bought a B of As from T S.\"</span><br/>\u00a0<br/>text2 <span class=\"sy0\">=</span> <span class=\"st0\">\"I bought a B of As W my Bgage from T S.\"</span><br/>\u00a0<br/>text3 <span class=\"sy0\">=</span> <span class=\"st0\">'_1111*11111_'</span><br/>\u00a0<br/>text4 <span class=\"sy0\">=</span> <span class=\"st0\">'000000A000000'</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">assert</span> replace<span class=\"br0\">(</span>text1<span class=\"sy0\">,</span> extractreplacements<span class=\"br0\">(</span>grammar1<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>           <span class=\"sy0\">==</span> <span class=\"st0\">'I bought a bag of apples from my brother.'</span><br/>    <span class=\"kw1\">assert</span> replace<span class=\"br0\">(</span>text1<span class=\"sy0\">,</span> extractreplacements<span class=\"br0\">(</span>grammar2<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>           <span class=\"sy0\">==</span> <span class=\"st0\">'I bought a bag of apples from T shop.'</span><br/>    <span class=\"co1\"># Stretch goals</span><br/>    <span class=\"kw1\">assert</span> replace<span class=\"br0\">(</span>text2<span class=\"sy0\">,</span> extractreplacements<span class=\"br0\">(</span>grammar3<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>           <span class=\"sy0\">==</span> <span class=\"st0\">'I bought a bag of apples with my money from T shop.'</span><br/>    <span class=\"kw1\">assert</span> replace<span class=\"br0\">(</span>text3<span class=\"sy0\">,</span> extractreplacements<span class=\"br0\">(</span>grammar4<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>           <span class=\"sy0\">==</span> <span class=\"st0\">'11111111111111111111'</span><br/>    <span class=\"kw1\">assert</span> replace<span class=\"br0\">(</span>text4<span class=\"sy0\">,</span> extractreplacements<span class=\"br0\">(</span>grammar5<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>           <span class=\"sy0\">==</span> <span class=\"st0\">'00011H1111000'</span></pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(struct -&gt;  (A B))<br/>(struct -&gt;. (A B))<br/>\u00a0<br/>(define ((Markov-algorithm . rules) initial-string)<br/>  (let/cc stop <br/>   \u00a0; rewriting rules<br/>    (define (rewrite rule str)<br/>      (match rule<br/>        [(-&gt;  a b) (cond [(replace a str b) =&gt; apply-rules]<br/>                         [else str])]<br/>        [(-&gt;. a b) (cond [(replace a str b) =&gt; stop]<br/>                         [else str])]))<br/>   \u00a0; the cycle through rewriting rules<br/>    (define (apply-rules s) (foldl rewrite s rules))<br/>   \u00a0; the result is a fixed point of rewriting procedure<br/>    (fixed-point apply-rules initial-string)))<br/>\u00a0<br/>;; replaces the first substring A to B in a string s<br/>(define (replace A s B)<br/>  (and (regexp-match? (regexp-quote A) s)<br/>       (regexp-replace (regexp-quote A) s B)))<br/>\u00a0<br/>;; Finds the least fixed-point of a function<br/>(define (fixed-point f x0)<br/>  (let loop ([x x0] [fx (f x0)])<br/>    (if (equal? x fx) fx (loop fx (f fx)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 42, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program executes a  Markov  algorithm(s)  against  specified entries.            */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> low high <span class=\"sy0\">.</span>                             <span class=\"coMULTI\">/*allows which  ruleset  to process.   */</span><br/><span class=\"kw1\">if</span>  low==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  low==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  low=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> high==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> high==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> high=<span class=\"nu0\">6</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>tellE= low<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>;          tellR= high<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*flags: used to display file contents.*/</span><br/><span class=\"kw1\">call</span> readEntry<br/>               <span class=\"kw1\">do</span> j=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>low<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*process each of these  rulesets.     */</span><br/>               <span class=\"kw1\">call</span> readRules j                  <span class=\"coMULTI\">/*read    a particular   ruleset.      */</span><br/>               <span class=\"kw1\">call</span> execRules j                  <span class=\"coMULTI\">/*execute \"     \"            \"         */</span><br/>               <span class=\"kw1\">say</span> <span class=\"st0\">'result for ruleset'</span>      j      <span class=\"st0\">\"\u2500\u2500\u2500\u25ba\"</span>     \u00a0!<span class=\"sy0\">.</span>j<br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>execRules: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> q <span class=\"sy0\">.</span>;           <span class=\"kw1\">if</span> tellE <span class=\"sy0\">|</span> tellR  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>      <span class=\"coMULTI\">/*show a blank line?*/</span><br/>             <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span><br/>                <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;      <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>k, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'#'</span> <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>k=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>k   a   <span class=\"st0\">' -&gt;'</span>    b  <span class=\"coMULTI\">/*obtain the  A  &amp;  B  parts from rule.*/</span><br/>                a=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;      b=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*strip leading and/or trailing blanks.*/</span><br/>                fullstop= <span class=\"kw6\">left</span><span class=\"br0\">(</span>b, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"sy0\">.</span>          <span class=\"coMULTI\">/*is this a  \"fullstop\"  rule?   1\u2261yes */</span><br/>                <span class=\"kw1\">if</span> fullstop  <span class=\"kw3\">then</span> b=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>b, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*purify the  B  part of the rule.     */</span><br/>                old=!<span class=\"sy0\">.</span>q                          <span class=\"coMULTI\">/*remember the value before the change.*/</span><br/>               \u00a0!<span class=\"sy0\">.</span>q=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>a,\u00a0!<span class=\"sy0\">.</span>q, b<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*implement the  ruleset  change.      */</span><br/>                <span class=\"kw1\">if</span> fullstop   <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> old<span class=\"sy0\">\\</span>==!<span class=\"sy0\">.</span>q  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>          <span class=\"coMULTI\">/*should we stop? */</span><br/>                <span class=\"kw1\">if</span> old<span class=\"sy0\">\\</span>==!<span class=\"sy0\">.</span>q  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> f     <span class=\"coMULTI\">/*Has Entry changed?   Then start over.*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>              <span class=\"kw1\">return</span><br/>              <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*f*/</span><br/>           <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>readEntry: eFID= <span class=\"st0\">'MARKOV.ENT'</span>;     <span class=\"kw1\">if</span> tellE  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>               <span class=\"coMULTI\">/*show a blank line?*/</span><br/>          \u00a0!<span class=\"sy0\">.</span>=                                   <span class=\"coMULTI\">/*placeholder for all the test entries.*/</span><br/>                  <span class=\"kw1\">do</span> e=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>eFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*read the input file until End-Of-File*/</span><br/>                 \u00a0!<span class=\"sy0\">.</span>e=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>eFID<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> tellE  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'test entry'</span>    e    <span class=\"st0\">\"\u2500\u2500\u2500\u25ba\"</span>   \u00a0!<span class=\"sy0\">.</span>e<br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*e*/</span>                    <span class=\"coMULTI\">/* [\u2191]  read and maybe echo the entry. */</span><br/>           <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>readRules: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0? <span class=\"sy0\">.</span>;  rFID= <span class=\"st0\">'MARKOV_R.'</span>?;  <span class=\"kw1\">if</span> tellR  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"coMULTI\">/*show a blank line?*/</span><br/>           @<span class=\"sy0\">.</span>=                                   <span class=\"coMULTI\">/*placeholder for all the Markov rules.*/</span><br/>                  <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>rFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*read the input file until End-Of-File*/</span><br/>                  @<span class=\"sy0\">.</span>r=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>rFID<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> tellR  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'ruleSet'</span>\u00a0?<span class=\"st0\">\".\"</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>r,<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"st0\">'\u2500\u2500\u2500\u25ba'</span> @<span class=\"sy0\">.</span>r<br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span>                    <span class=\"coMULTI\">/* [\u2191]  read and maybe echo the rule.  */</span><br/>           <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 20, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> setup<span class=\"br0\">(</span>ruleset<span class=\"br0\">)</span><br/>  ruleset.<span class=\"me1\">each_line</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>rules, line<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> line =~ <span class=\"sy0\">/</span>^\\s<span class=\"sy0\">*</span><span class=\"co1\">#/</span><br/>      rules<br/>    <span class=\"kw1\">elsif</span> line =~ <span class=\"sy0\">/</span>^<span class=\"br0\">(</span>.<span class=\"sy0\">+</span><span class=\"br0\">)</span>\\s<span class=\"sy0\">+-&gt;</span>\\s<span class=\"sy0\">+</span><span class=\"br0\">(</span>\\.?<span class=\"br0\">)</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span><span class=\"br0\">)</span>$<span class=\"sy0\">/</span><br/>      rules <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>$1, $3, $2\u00a0!= <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">raise</span> <span class=\"st0\">\"Syntax error: #{line}\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> morcov<span class=\"br0\">(</span>ruleset, input_data<span class=\"br0\">)</span><br/>  rules = setup<span class=\"br0\">(</span>ruleset<span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>matched = rules.<span class=\"me1\">find</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>match, replace, term<span class=\"sy0\">|</span><br/>    input_data<span class=\"br0\">[</span>match<span class=\"br0\">]</span> <span class=\"kw1\">and</span> input_data.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>match, replace<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span>\u00a0!matched<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>  input_data<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MarkovAlgorithm <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> RulePattern <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"(.*?)<span class=\"es0\">\\s</span>+-&gt;<span class=\"es0\">\\s</span>+(<span class=\"es0\">\\.</span>?)(.*)\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> CommentPattern <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"#.*|<span class=\"es0\">\\s</span>*\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rule<span class=\"br0\">(</span>line<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> line <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> CommentPattern<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> None<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> RulePattern<span class=\"br0\">(</span>pattern, terminal, replacement<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>pattern, replacement, terminal <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> error<span class=\"br0\">(</span><span class=\"st0\">\"Syntax error on line \"</span>+line<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Syntax: MarkovAlgorithm inputFile inputPattern\"</span><span class=\"br0\">)</span><br/>      exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rules <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Source fromPath args<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> getLines <span class=\"br0\">(</span><span class=\"br0\">)</span> map rule<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">flatten</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> algorithm<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> rules find <span class=\"br0\">(</span>input contains <span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span><span class=\"br0\">(</span>pattern, replacement, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> input replaceFirst <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\\\</span>Q\"</span>+pattern+<span class=\"st0\">\"<span class=\"es1\">\\\\</span>E\"</span>, replacement<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span><span class=\"br0\">(</span>pattern, replacement, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> algorithm<span class=\"br0\">(</span>input replaceFirst <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\\\</span>Q\"</span>+pattern+<span class=\"st0\">\"<span class=\"es1\">\\\\</span>E\"</span>, replacement<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> input<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>algorithm<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 49, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> split<span class=\"sy0\">-</span>into<span class=\"sy0\">-</span>lines<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>index <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>next<span class=\"sy0\">-</span>index <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>index str #\\<span class=\"kw1\">newline</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> next<span class=\"sy0\">-</span>index<br/>            <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> next<span class=\"sy0\">-</span>index <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> str index next<span class=\"sy0\">-</span>index<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> str index<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> parse<span class=\"sy0\">-</span>rules<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>rules <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>into<span class=\"sy0\">-</span>lines str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> rules<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> result<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rule <span class=\"br0\">(</span><span class=\"kw1\">car</span> rules<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rules<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> rule <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> rule <span class=\"nu0\">0</span><span class=\"br0\">)</span> #\\#<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      result<br/>                      <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>index <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>contains rule <span class=\"st0\">\"-&gt;\"</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>trim<span class=\"sy0\">-</span>right <span class=\"br0\">(</span><span class=\"kw1\">substring</span> rule <span class=\"nu0\">0</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>trim <span class=\"br0\">(</span><span class=\"kw1\">substring</span> rule <span class=\"br0\">(</span><span class=\"sy0\">+</span> index <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> apply<span class=\"sy0\">-</span>rules<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str rules<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>remaining rules<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>result str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> remaining<span class=\"br0\">)</span><br/>          result<br/>          <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rule <span class=\"br0\">(</span><span class=\"kw1\">car</span> remaining<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>pattern <span class=\"br0\">(</span><span class=\"kw1\">car</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>replacement <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>start <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>contains result pattern<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> start<br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> #\\. <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> replacement <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>replace result replacement start<br/>                                    <span class=\"br0\">(</span><span class=\"sy0\">+</span> start <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> pattern<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>apply<span class=\"sy0\">-</span>rules<br/>                     <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>replace result replacement start<br/>                                     <span class=\"br0\">(</span><span class=\"sy0\">+</span> start <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> pattern<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     rules<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> remaining<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "SequenceL", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>Rule\u00a0::= ( pattern\u00a0: char(1), <br/>\t\t   replacement\u00a0: char(1),<br/>\t\t   terminal\u00a0: bool);<br/>\u00a0<br/>ReplaceResult\u00a0::= (newString\u00a0: char(1), wasReplaced\u00a0: bool);<br/>\u00a0<br/>main(args(2))\u00a0:= markov(createRule(split(args[1], '\\n')), 1, args[2]);<br/>\u00a0<br/>createRule(line(1))\u00a0:=<br/>\tlet<br/>\t\tcontainsComments\u00a0:= firstIndexOf(line, '#');<br/>\t\tremovedComments\u00a0:= line when containsComments = 0 else<br/>\t\t\t\t\t\t   line[1 ... containsComments - 1];<br/>\u00a0<br/>\t\tarrowLocation\u00a0:= startOfArrow(removedComments, 1);<br/>\t\tlhs\u00a0:= removedComments[1 ... arrowLocation-1];<br/>\t\trhs\u00a0:= removedComments[arrowLocation + 4 ... size(removedComments)];<br/>\t\tisTerminal\u00a0:= size(rhs) &gt; 0 and rhs[1] = '.';<br/>\tin<br/>\t\t(pattern\u00a0: lhs,<br/>\t\t replacement\u00a0: rhs[2 ... size(rhs)] when isTerminal else rhs,<br/>\t\t terminal\u00a0: isTerminal) when size(removedComments) &gt; 0 and arrowLocation /= -1;<br/>\u00a0<br/>startOfArrow(line(1), n)\u00a0:=<br/>\t-1 when n &gt; size(line) - 3 else<br/>\tn when (line[n]=' ' or line[n]='\\t') and<br/>\t       line[n+1] = '-' and line[n+2] = '&gt;' and<br/>\t       (line[n+3]=' ' or line[n+3]='\\t') else<br/>\tstartOfArrow(line, n+1);<br/>\u00a0<br/>markov(rules(1), n, input(1))\u00a0:=<br/>\tlet<br/>\t\treplaced\u00a0:= replaceSubString(input, rules[n].pattern, rules[n].replacement, 1);<br/>\tin<br/>\tinput when n &gt; size(rules) else<br/>\treplaced.newString when replaced.wasReplaced and rules[n].terminal else<br/>\tmarkov(rules, 1, replaced.newString) when replaced.wasReplaced else<br/>\tmarkov(rules, n+1, input);<br/>\u00a0<br/>replaceSubString(str(1), original(1), new(1), n)\u00a0:=<br/>\t(newString\u00a0: str, wasReplaced\u00a0: false)<br/>\t\twhen n &gt; size(str) - size(original) + 1 else<br/>\t(newString\u00a0: str[1 ... n - 1] ++ new ++ str[n + size(original) ... size(str)], wasReplaced\u00a0: true)<br/>\t\twhen equalList(str[n ... n + size(original) - 1], original) else<br/>\treplaceSubString(str, original, new, n + 1);<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "SNOBOL4", "loc": 130, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#!/bin/sh<br/>         exec \"snobol4\" \"-r\" \"$0\" \"<a class=\"__cf_email__\" data-cfemail=\"9abeda\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"<br/>*<br/>* http://rosettacode.org/wiki/Execute_a_Markov_algorithm<br/>*<br/>         define('repl(s1,s2,s3)c,t,findc')\u00a0:(repl_end)<br/>repl     s2 len(1) . c =\u00a0:f(freturn)<br/>         findc = break(c) . t len(1)<br/>         s2 = pos(0) s2<br/>repl_1   s1 findc =\u00a0:f(repl_2)<br/>         s1 s2 =\u00a0:f(repl_3)<br/>         repl = repl t s3\u00a0:(repl_1)<br/>repl_3   repl = repl t c\u00a0:(repl_1)<br/>repl_2   repl = repl s1\u00a0:(return)<br/>repl_end<br/>*<br/>         define('quote(s)q,qq')\u00a0:(quote_end)<br/>quote    q = \"'\"; qq = '\"'<br/>         quote = q repl(s, q, q ' ' qq q qq ' ' q) q\u00a0:(return)<br/>quote_end<br/>*<br/>         whitespace = span(' ' char(9))<br/>top      r = 0<br/>read     s = input\u00a0:f(end)<br/>         s pos(0) 'ENDRULE' rpos(0)\u00a0:s(interp)<br/>         s pos(0) '#'\u00a0:s(read)<br/>         pattern =; replacement =; term =<br/>         s arb . pattern whitespace '-&gt;' whitespace<br/>+           ('.' | '') . term arb . replacement rpos(0)\u00a0:f(syntax)<br/>         r = r + 1<br/>         f = ident(term, '.') '\u00a0:(done)'<br/>         f = ident(term) '\u00a0:f(rule' r + 1 ')s(rule1)'<br/>         c = 'rule' r ' s ' quote(pattern) ' = ' quote(replacement) f<br/>         code(c)\u00a0:s(read)<br/>         output = 'rule: ' s ' generates code ' c ' in error'\u00a0:(end)<br/>syntax   output = 'rule: ' s ' in error'\u00a0:(read)<br/>interp   code('rule' r + 1 '\u00a0:(done)')<br/>go       s = input\u00a0:f(end)<br/>         s pos(0) 'END' rpos(0)\u00a0:s(top)f(rule1)<br/>done     output = s\u00a0:(go)<br/>end<br/># This rules file is extracted from Wikipedia:<br/># http://en.wikipedia.org/wiki/Markov_Algorithm<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>ENDRULE<br/>I bought a B of As from T S.<br/>END<br/># Slightly modified from the rules on Wikipedia<br/>A -&gt; apple<br/>B -&gt; bag<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>ENDRULE<br/>I bought a B of As from T S.<br/>END<br/># BNF Syntax testing rules<br/>A -&gt; apple<br/>WWWW -&gt; with<br/>Bgage -&gt; -&gt;.*<br/>B -&gt; bag<br/>-&gt;.* -&gt; money<br/>W -&gt; WW<br/>S -&gt; .shop<br/>T -&gt; the<br/>the shop -&gt; my brother<br/>a never used -&gt; .terminating rule<br/>ENDRULE<br/>I bought a B of As W my Bgage from T S.<br/>END<br/>### Unary Multiplication Engine, for testing Markov Algorithm implementations<br/>### By Donal Fellows.<br/># Unary addition engine<br/>_+1 -&gt; _1+<br/>1+1 -&gt; 11+<br/># Pass for converting from the splitting of multiplication into ordinary<br/># addition<br/>1! -&gt;\u00a0!1<br/>,! -&gt;\u00a0!+<br/>_! -&gt; _<br/># Unary multiplication by duplicating left side, right side times<br/>1*1 -&gt; x,@y<br/>1x -&gt; xX<br/>X, -&gt; 1,1<br/>X1 -&gt; 1X<br/>_x -&gt; _X<br/>,x -&gt; ,X<br/>y1 -&gt; 1y<br/>y_ -&gt; _<br/># Next phase of applying<br/><a class=\"__cf_email__\" data-cfemail=\"e3d2a3d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y<br/><a class=\"__cf_email__\" data-cfemail=\"271667\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_<br/>,@_ -&gt;\u00a0!_<br/>++ -&gt; +<br/># Termination cleanup for addition<br/>_1 -&gt; 1<br/>1+_ -&gt; 1<br/>_+_ -&gt; <br/>ENDRULE<br/>_1111*11111_<br/>END<br/># Turing machine: three-state busy beaver<br/>#<br/># state A, symbol 0 =&gt; write 1, move right, new state B<br/>A0 -&gt; 1B<br/># state A, symbol 1 =&gt; write 1, move left, new state C<br/>0A1 -&gt; C01<br/>1A1 -&gt; C11<br/># state B, symbol 0 =&gt; write 1, move left, new state A<br/>0B0 -&gt; A01<br/>1B0 -&gt; A11<br/># state B, symbol 1 =&gt; write 1, move right, new state B<br/>B1 -&gt; 1B<br/># state C, symbol 0 =&gt; write 1, move left, new state B<br/>0C0 -&gt; B01<br/>1C0 -&gt; B11<br/># state C, symbol 1 =&gt; write 1, move left, halt<br/>0C1 -&gt; H01<br/>1C1 -&gt; H11<br/>ENDRULE<br/>000000A000000<br/>END<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 46, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func setup(ruleset: String) -&gt; [(String, String, Bool)] {<br/>    return ruleset.componentsSeparatedByCharactersInSet(NSCharacterSet.newlineCharacterSet())<br/>        .filter { $0.rangeOfString(\"^s*#\", options: .RegularExpressionSearch) == nil }<br/>        .reduce([(String, String, Bool)]()) { rules, line in<br/>            let regex = try! NSRegularExpression(pattern: \"^(.+)\\\\s+-&gt;\\\\s+(\\\\.?)(.*)$\", options: .CaseInsensitive)<br/>            guard let match = regex.firstMatchInString(line, options: .Anchored, range: NSMakeRange(0, line.characters.count)) else { return rules }<br/>            return rules + [(<br/>                (line as NSString).substringWithRange(match.rangeAtIndex(1)),<br/>                (line as NSString).substringWithRange(match.rangeAtIndex(3)),<br/>                (line as NSString).substringWithRange(match.rangeAtIndex(2))\u00a0!= \"\"<br/>            )]<br/>        }<br/>}<br/>\u00a0<br/>func markov(ruleset: String, var input: String) -&gt; String {<br/>    let rules = setup(ruleset)<br/>    var terminate = false<br/>    while\u00a0!terminate {<br/>        guard let i = rules.indexOf ({<br/>            if let range = input.rangeOfString($0.0) {<br/>                input.replaceRange(range, with: $0.1)<br/>                return true<br/>            }<br/>            return false<br/>        }) else { break }<br/>        terminate = rules[i].2<br/>    }<br/>    return input<br/>}<br/>\u00a0<br/>\u00a0<br/>let tests: [(ruleset: String, input: String)] = [<br/>    (\"# This rules file is extracted from Wikipedia:\\n# http://en.wikipedia.org/wiki/Markov_Algorithm\\nA -&gt; apple\\nB -&gt; bag\\nS -&gt; shop\\nT -&gt; the\\nthe shop -&gt; my brother\\na never used -&gt; .terminating rule\", \"I bought a B of As from T S.\"),<br/>    (\"# Slightly modified from the rules on Wikipedia\\nA -&gt; apple\\nB -&gt; bag\\nS -&gt; .shop\\nT -&gt; the\\nthe shop -&gt; my brother\\na never used -&gt; .terminating rule\", \"I bought a B of As from T S.\"),<br/>    (\"# BNF Syntax testing rules\\nA -&gt; apple\\nWWWW -&gt; with\\nBgage -&gt; -&gt;.*\\nB -&gt; bag\\n-&gt;.* -&gt; money\\nW -&gt; WW\\nS -&gt; .shop\\nT -&gt; the\\nthe shop -&gt; my brother\\na never used -&gt; .terminating rule\", \"I bought a B of As W my Bgage from T S.\"),<br/>    (\"### Unary Multiplication Engine, for testing Markov Algorithm implementations\\n### By Donal Fellows.\\n# Unary addition engine\\n_+1 -&gt; _1+\\n1+1 -&gt; 11+\\n# Pass for converting from the splitting of multiplication into ordinary\\n# addition\\n1! -&gt;\u00a0!1\\n,! -&gt;\u00a0!+\\n_! -&gt; _\\n# Unary multiplication by duplicating left side, right side times\\n1*1 -&gt; x,@y\\n1x -&gt; xX\\nX, -&gt; 1,1\\nX1 -&gt; 1X\\n_x -&gt; _X\\n,x -&gt; ,X\\ny1 -&gt; 1y\\ny_ -&gt; _\\n# Next phase of applying\\<a class=\"__cf_email__\" data-cfemail=\"95fba4d5a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt; x,@y\\<a class=\"__cf_email__\" data-cfemail=\"d3bde293\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_ -&gt; @_\\n,@_ -&gt;\u00a0!_\\n++ -&gt; +\\n# Termination cleanup for addition\\n_1 -&gt; 1\\n1+_ -&gt; 1\\n_+_ -&gt;\", \"_1111*11111_\"),<br/>    (\"# Turing machine: three-state busy beaver\\n#\\n# state A, symbol 0 =&gt; write 1, move right, new state B\\nA0 -&gt; 1B\\n# state A, symbol 1 =&gt; write 1, move left, new state C\\n0A1 -&gt; C01\\n1A1 -&gt; C11\\n# state B, symbol 0 =&gt; write 1, move left, new state A\\n0B0 -&gt; A01\\n1B0 -&gt; A11\\n# state B, symbol 1 =&gt; write 1, move right, new state B\\nB1 -&gt; 1B\\n# state C, symbol 0 =&gt; write 1, move left, new state B\\n0C0 -&gt; B01\\n1C0 -&gt; B11\\n# state C, symbol 1 =&gt; write 1, move left, halt\\n0C1 -&gt; H01\\n1C1 -&gt; H11\", \"000000A000000\")<br/>]<br/>\u00a0<br/>for (index, test) in tests.enumerate() {<br/>    print(\"\\(index + 1):\", markov(test.ruleset, input: test.input))<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 41, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"kw2\"><span class=\"re0\">$argc</span></span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"usage: $argv0 ruleFile inputFile outputFile\"</span><span class=\"br0\">}</span><br/>lassign <span class=\"kw2\"><span class=\"re0\">$argv</span></span> ruleFile inputFile outputFile<br/>\u00a0<br/><span class=\"co1\"># Read the file of rules</span><br/><span class=\"kw1\">set</span> rules <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$ruleFile</span><span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span> \\n<span class=\"br0\">[</span><span class=\"kw2\">close</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> match <span class=\"st0\">\"#*\"</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span> || <span class=\"re0\">$line</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>^<span class=\"br0\">(</span>.+<span class=\"br0\">)</span>\\s+-<span class=\"sy0\">&gt;</span>\\s+<span class=\"br0\">(</span>\\.<span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">$</span><span class=\"br0\">}</span> <span class=\"re0\">$line</span> -<span class=\"sy0\">&gt;</span> from final to<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> rules <span class=\"re0\">$from</span> <span class=\"re0\">$to</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> compare <span class=\"st0\">\".\"</span> <span class=\"re0\">$final</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$from</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"Syntax error: <span class=\"es0\">\\\"</span>$line<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Apply the rules</span><br/><span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$inputFile</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$outputFile</span> w<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span> \\n<span class=\"br0\">[</span><span class=\"kw2\">close</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> any <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$any</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> any <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>from to more fl<span class=\"br0\">}</span> <span class=\"re0\">$rules</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># If we match the 'from' pattern...</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw2\">string</span> first <span class=\"re0\">$from</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># Change for the 'to' replacement</span><br/>\t\t<span class=\"kw1\">set</span> line <span class=\"br0\">[</span><span class=\"kw2\">string</span> replace <span class=\"re0\">$line</span> <span class=\"re0\">$idx</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span>+<span class=\"re0\">$fl</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$to</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t\t<span class=\"co1\"># Stop if we terminate, otherwise note that we've more work to do</span><br/>        \t<span class=\"kw1\">set</span> any <span class=\"re0\">$more</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># Restart search for rules to apply</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>        <span class=\"co1\">#DEBUG# puts $line</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Output the processed line</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$out</span> <span class=\"re0\">$line</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$out</span></pre>"}, {"lang": "VBScript", "loc": 75, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>class markovparser<br/>\u00a0<br/>\t<span class=\"kw4\">dim</span> aRules<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">let</span> ruleset( sBlock )<br/>\t\t<span class=\"kw4\">dim</span> i<br/>\t\taRules = split( sBlock, vbNewLine )<br/>\t\t<span class=\"co1\">'~ remove blank lines from end of array<br/></span>\t\t<span class=\"kw3\">do</span> <span class=\"kw3\">while</span> aRules( <span class=\"kw4\">ubound</span>( aRules ) ) = vbnullstring <br/>\t\t\t<span class=\"kw4\">redim</span> <span class=\"kw4\">preserve</span> aRules( <span class=\"kw4\">ubound</span>( aRules ) - 1 )<br/>\t\t<span class=\"kw3\">loop</span><br/>\t\t<span class=\"co1\">'~ parse array<br/></span>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( aRules ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( aRules ) <br/>\t\t\t<span class=\"kw3\">if</span> left( aRules( i ), 1 ) = <span class=\"st0\">\"#\"</span> <span class=\"kw3\">then</span><br/>\t\t\t\taRules( i ) = Array( vbnullstring, aRules(i))<br/>\t\t\t<span class=\"kw3\">else</span><br/>\t\t\t\taRules( i ) = Split( aRules( i ), <span class=\"st0\">\" -&gt; \"</span>, 2 )<br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">next</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> apply( sArg )<br/>\t\t<span class=\"kw4\">dim</span> ruleapplied<br/>\t\t<span class=\"kw4\">dim</span> terminator<br/>\t\t<span class=\"kw4\">dim</span> was<br/>\t\t<span class=\"kw4\">dim</span> i<br/>\t\t<span class=\"kw4\">dim</span> repl<br/>\t\t<span class=\"kw4\">dim</span> changes<br/>\u00a0<br/>\t\truleapplied = <span class=\"kw5\">true</span><br/>\t\tterminator = <span class=\"kw5\">false</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">do</span> <span class=\"kw3\">while</span> ruleapplied <span class=\"kw3\">and</span> (<span class=\"kw3\">not</span> terminator)<br/>\t\t\tchanges = 0<br/>\t\t\twas = sArg<br/>\t\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( aRules ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( aRules )<br/>\t\t\t\trepl = aRules(i)(1)<br/>\t\t\t\t<span class=\"kw3\">if</span> left( repl, 1 ) = <span class=\"st0\">\".\"</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\tterminator = <span class=\"kw5\">true</span><br/>\t\t\t\t\trepl = mid( repl, 2 )<br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t\tsArg = replace( sArg, aRules(i)(0), repl)<br/>\t\t\t\t<span class=\"kw3\">if</span> was &lt;&gt; sArg <span class=\"kw3\">then</span><br/>\t\t\t\t\tchanges = changes + 1<br/>\t\t\t\t\t<span class=\"kw3\">if</span> changes = 1 <span class=\"kw3\">then</span><br/>\t\t\t\t\t\t<span class=\"kw2\">exit</span> <span class=\"kw3\">for</span><br/>\t\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t\t<span class=\"kw3\">if</span> terminator <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw2\">exit</span> <span class=\"kw3\">for</span><br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">next</span><br/>\t\t\t<span class=\"kw3\">if</span> changes = 0 <span class=\"kw3\">then</span><br/>\t\t\t\truleapplied = <span class=\"kw5\">false</span><br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">loop</span><br/>\t\tapply = sArg<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> dump<br/>\t\t<span class=\"kw4\">dim</span> i<br/>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( aRules ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( aRules )<br/>\t\t\twscript.echo eef(aRules(i)(0)=vbnullstring,aRules(i)(1),aRules(i)(0)&amp; <span class=\"st0\">\" -&gt; \"</span> &amp; aRules(i)(1))  &amp; eef( left( aRules(i)(1), 1 ) = <span class=\"st0\">\".\"</span>, <span class=\"st0\">\" #terminator\"</span>, <span class=\"st0\">\"\"</span> )<br/>\t\t<span class=\"kw3\">next</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> eef( bCond, sExp1, sExp2 )<br/>\t\t<span class=\"kw3\">if</span> bCond <span class=\"kw3\">then</span><br/>\t\t\teef = sExp1<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\teef = sExp2<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 26, "block": "<pre class=\"text highlighted_source\">fcn parseRuleSet(lines){<br/>   if(vm.numArgs&gt;1) lines=vm.arglist;  // lines or object<br/>   ks:=L(); vs:=L();<br/>   foreach line in (lines){<br/>      if(line[0]==\"#\") continue;\t// nuke &lt;comment&gt;<br/>      pattern,replacement:=line.replace(\"\\t\",\" \")<br/>         .split(\" -&gt; \",1).apply(\"strip\");<br/>      ks.append(pattern); vs.append(replacement);<br/>   }<br/>   return(ks,vs);<br/>}<br/>\u00a0<br/>fcn markov(text,rules){<br/>   ks,vs:=rules; eks:=ks.enumerate();<br/>   do{ go:=False;<br/>      foreach n,k in (eks){<br/>\t if (Void!=text.find(k)){<br/>\t    if (Void==(v:=vs[n])) return(text);<br/>\t    if (v[0,1]==\".\") v=v[1,*] else go=True;<br/>\t    text=text.replace(k,v,1);<br/>\t    break;  // restart after every rule application, unless terminating<br/>\t }<br/>      }<br/>   }while(go);<br/>   text<br/>}</pre>"}]}