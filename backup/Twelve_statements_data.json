{"task": "Twelve_statements", "blocks": [{"lang": "Ada", "loc": 79, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Logic; <br/>\u00a0<br/><span class=\"kw3\">procedure</span> Twelve_Statements <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> L <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Logic<span class=\"br0\">(</span>Number_Of_Statements =&gt; <span class=\"nu0\">12</span><span class=\"br0\">)</span>; <span class=\"kw3\">use</span> L;<br/>\u00a0<br/>   <span class=\"co1\">-- formally define the 12 statements as expression function predicates</span><br/>   <span class=\"kw3\">function</span> P01<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>T'Length = <span class=\"nu0\">12</span><span class=\"br0\">)</span>;              <span class=\"co1\">-- list of 12 statements</span><br/>   <span class=\"kw3\">function</span> P02<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">7</span> .. <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span><span class=\"br0\">)</span>;        <span class=\"co1\">-- three of last six </span><br/>   <span class=\"kw3\">function</span> P03<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>Half<span class=\"br0\">(</span>T, Even<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">2</span><span class=\"br0\">)</span>;     <span class=\"co1\">-- two of the even</span><br/>   <span class=\"kw3\">function</span> P04<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> T<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> T<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> T<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- if 5 is true, then ...</span><br/>   <span class=\"kw3\">function</span> P05<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <br/>      <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> T<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> T<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> T<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;                       <span class=\"co1\">-- none of preceding three</span><br/>   <span class=\"kw3\">function</span> P06<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>Half<span class=\"br0\">(</span>T, Odd<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">4</span><span class=\"br0\">)</span>;      <span class=\"co1\">-- four of the odd </span><br/>   <span class=\"kw3\">function</span> P07<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">xor</span> T<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;              <span class=\"co1\">-- either 2 or 3, not both</span><br/>   <span class=\"kw3\">function</span> P08<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> T<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> T<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> T<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- if 7 is true, then ...</span><br/>   <span class=\"kw3\">function</span> P09<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span><span class=\"br0\">)</span>;         <span class=\"co1\">-- three of first six </span><br/>   <span class=\"kw3\">function</span> P10<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> T<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;            <span class=\"co1\">-- next two </span><br/>   <span class=\"kw3\">function</span> P11<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">7</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><span class=\"br0\">)</span>;           <span class=\"co1\">-- one of 7, 8, 9</span><br/>   <span class=\"kw3\">function</span> P12<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">4</span><span class=\"br0\">)</span>;        <span class=\"co1\">-- four of the preding</span><br/>\u00a0<br/>   <span class=\"co1\">-- define a global list of statements</span><br/>   Statement_List: <span class=\"kw3\">constant</span> Statements\u00a0:=<br/>     <span class=\"br0\">(</span>P01'<span class=\"kw3\">Access</span>, P02'<span class=\"kw3\">Access</span>, P03'<span class=\"kw3\">Access</span>, P04'<span class=\"kw3\">Access</span>, P05'<span class=\"kw3\">Access</span>, P06'<span class=\"kw3\">Access</span>, <br/>      P07'<span class=\"kw3\">Access</span>, P08'<span class=\"kw3\">Access</span>, P09'<span class=\"kw3\">Access</span>, P10'<span class=\"kw3\">Access</span>, P11'<span class=\"kw3\">Access</span>, P12'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- try out all 2^12 possible choices for the table</span><br/>   <span class=\"kw3\">procedure</span> Try<span class=\"br0\">(</span>T: Table; Fail: Natural; Idx: Indices'Base\u00a0:= Indices'First<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>\u00a0<br/>      <span class=\"kw3\">procedure</span> Print_Table<span class=\"br0\">(</span>T: Table<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>\t <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t Put<span class=\"br0\">(</span><span class=\"st0\">\"    \"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">if</span> Fail &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t    Put<span class=\"br0\">(</span><span class=\"st0\">\"(wrong at\"</span><span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> T'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t       <span class=\"kw1\">if</span> Statement_List<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span> /= T<span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t  Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>J<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span><span class=\"kw1\">if</span> J &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">then</span> <span class=\"st0\">\")  \"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\") \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t <span class=\"kw1\">if</span> T = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span> =&gt; False<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"All false!\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">else</span><br/>\t    Put<span class=\"br0\">(</span><span class=\"st0\">\"True are\"</span><span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> T'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t       <span class=\"kw1\">if</span> T<span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>\t\t  Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t    New_Line;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Print_Table;<br/>\u00a0<br/>      Wrong_Entries: Natural\u00a0:= <span class=\"nu0\">0</span>; <br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Idx &lt;= T'Last <span class=\"kw1\">then</span> <br/>\t Try<span class=\"br0\">(</span>T<span class=\"br0\">(</span>T'First .. <span class=\"me1\">Idx</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; False &amp; T<span class=\"br0\">(</span>Idx+<span class=\"nu0\">1</span> .. <span class=\"me1\">T</span>'Last<span class=\"br0\">)</span>, Fail, Idx+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\t Try<span class=\"br0\">(</span>T<span class=\"br0\">(</span>T'First .. <span class=\"me1\">Idx</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; True  &amp; T<span class=\"br0\">(</span>Idx+<span class=\"nu0\">1</span> .. <span class=\"me1\">T</span>'Last<span class=\"br0\">)</span>, Fail, Idx+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span> <span class=\"co1\">-- now Index &gt; T'Last and we have one of the 2^12 choices to test</span><br/>\t <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> T'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> \t <br/>\t    <span class=\"kw1\">if</span> Statement_List<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span> /= T<span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>\t       Wrong_Entries\u00a0:= Wrong_Entries + <span class=\"nu0\">1</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">if</span> Wrong_Entries = Fail <span class=\"kw1\">then</span> <br/>\t    Print_Table<span class=\"br0\">(</span>T<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Try;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Exact hits:\"</span><span class=\"br0\">)</span>;<br/>   Try<span class=\"br0\">(</span>T =&gt; <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span> =&gt; False<span class=\"br0\">)</span>, Fail =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Near Misses:\"</span><span class=\"br0\">)</span>;<br/>   Try<span class=\"br0\">(</span>T =&gt; <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span> =&gt; False<span class=\"br0\">)</span>, Fail =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Twelve_Statements;</pre>"}, {"lang": "ALGOL W", "loc": 96, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% we have 12 statements to determine the truth/falsehood of (see task) \u00a0%<br/>\u00a0<br/>    logical array stmt, expected( 1\u00a0:: 12 );<br/>\u00a0<br/>   \u00a0% logical (boolean) to integer utility procedure                       \u00a0%<br/>    integer procedure toInteger ( logical value v )\u00a0; if v then 1 else 0;<br/>\u00a0<br/>   \u00a0% procedure to determine whether the statements are true or not        \u00a0%<br/>    procedure findExpectedValues\u00a0;<br/>    begin<br/>        expected(  1 )\u00a0:= true;<br/>        expected(  2 )\u00a0:= 3 = ( toInteger( stmt(  7 ) ) + toInteger( stmt(  8 ) )<br/>                              + toInteger( stmt(  9 ) ) + toInteger( stmt( 10 ) )<br/>                              + toInteger( stmt( 11 ) ) + toInteger( stmt( 12 ) )<br/>                              );<br/>        expected(  3 )\u00a0:= 2 = ( toInteger( stmt(  2 ) ) + toInteger( stmt(  4 ) )<br/>                              + toInteger( stmt(  6 ) ) + toInteger( stmt(  8 ) )<br/>                              + toInteger( stmt( 10 ) ) + toInteger( stmt( 12 ) )<br/>                              );<br/>        expected(  4 )\u00a0:= ( not stmt( 5 ) ) or ( stmt( 6 ) and stmt( 7 ) );<br/>        expected(  5 )\u00a0:= not ( stmt( 2 ) or stmt( 3 ) or stmt( 4 ) );<br/>        expected(  6 )\u00a0:= 4 = ( toInteger( stmt(  1 ) ) + toInteger( stmt(  3 ) )<br/>                              + toInteger( stmt(  5 ) ) + toInteger( stmt(  7 ) )<br/>                              + toInteger( stmt(  9 ) ) + toInteger( stmt( 11 ) )<br/>                              );<br/>        expected(  7 )\u00a0:= stmt( 2 ) not = stmt( 3 );<br/>        expected(  8 )\u00a0:= ( not stmt( 7 ) ) or ( stmt( 5 ) and stmt( 6 ) );<br/>        expected(  9 )\u00a0:= 3 = ( toInteger( stmt(  1 ) ) + toInteger( stmt(  2 ) )<br/>                              + toInteger( stmt(  3 ) ) + toInteger( stmt(  4 ) )<br/>                              + toInteger( stmt(  5 ) ) + toInteger( stmt(  6 ) )<br/>                              );<br/>        expected( 10 )\u00a0:= stmt( 11 ) and stmt( 12 );<br/>        expected( 11 )\u00a0:= 1 = ( toInteger( stmt(  7 ) )<br/>                              + toInteger( stmt(  8 ) )<br/>                              + toInteger( stmt(  9 ) )<br/>                              );<br/>        expected( 12 )\u00a0:= 4 = ( toInteger( stmt(  1 ) ) + toInteger( stmt(  2 ) )<br/>                              + toInteger( stmt(  3 ) ) + toInteger( stmt(  4 ) )<br/>                              + toInteger( stmt(  5 ) ) + toInteger( stmt(  6 ) )<br/>                              + toInteger( stmt(  7 ) ) + toInteger( stmt(  8 ) )<br/>                              + toInteger( stmt(  9 ) ) + toInteger( stmt( 10 ) )<br/>                              + toInteger( stmt( 11 ) )<br/>                              );<br/>    end expected\u00a0;<br/>\u00a0<br/>   \u00a0% clearly, statement 1 is true, however to enumerate the near          \u00a0%<br/>   \u00a0% solutions, we need to consider \"solutions\" where statement 1 is false\u00a0%<br/>   \u00a0% we iterate through the possibilities for the statements,             \u00a0%<br/>   \u00a0% looking for a non-contradictory set of values                        \u00a0%<br/>   \u00a0% we print the solutions with allowedContradictions contradictions     \u00a0%<br/>    procedure printSolutions ( integer    value allowedContradictions<br/>                            \u00a0; string(60) value heading<br/>                             )\u00a0;<br/>    begin<br/>        logical array wrong( 1\u00a0:: 12 );<br/>        write( heading );<br/>        write( \"     1  2  3  4  5  6  7  8  9 10 11 12\"  );<br/>        write( \"    ====================================\" );<br/>       \u00a0% there are 12 statements, so we have 2^12 possible combinations   \u00a0%<br/>        for solution\u00a0:= 1 until 4096 do begin<br/>            integer n, incorrect;<br/>           \u00a0% convert the number to the set of true/false values           \u00a0%<br/>            n\u00a0:= solution;<br/>            for dPos\u00a0:= 1 until 12 do begin<br/>                stmt( dPos )\u00a0:= odd( n );<br/>                n\u00a0:= n div 2;<br/>            end for_dPos\u00a0;<br/>           \u00a0% get the expected values of the statements, based on the      \u00a0%<br/>           \u00a0% suggested values                                             \u00a0%<br/>            findExpectedValues;<br/>           \u00a0% count the contradictions, if we have the required number,    \u00a0%<br/>           \u00a0% print the solution                                           \u00a0%<br/>            incorrect\u00a0:= 0;<br/>            for dPos\u00a0:= 1 until 12 do begin<br/>                wrong( dPos )\u00a0:= expected( dPos ) not = stmt( dPos );<br/>                incorrect    \u00a0:= incorrect + toInteger( wrong( dPos ) );<br/>            end for_dPos\u00a0;<br/>            if incorrect = allowedContradictions then begin<br/>               \u00a0% have a solution                                           \u00a0%<br/>                write( \"    \" );<br/>                for s\u00a0:= 1 until 12 do writeon( s_w\u00a0:= 0<br/>                                              , \" \"<br/>                                              , if stmt(  s ) then \"T\" else \"-\"<br/>                                              , if wrong( s ) then \"*\" else \" \"<br/>                                              );<br/>            end\u00a0;<br/>        end for_solution\u00a0;<br/>    end printSolutions\u00a0;<br/>\u00a0<br/>   \u00a0% find complete solutions                                               \u00a0%<br/>    printSolutions( 0, \"Solutions\" );<br/>   \u00a0% find near solutions                                                   \u00a0%<br/>    printSolutions( 1, \"Near solutions (incorrect values marked \"\"*\"\")\" );<br/>\u00a0<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 76, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Note: the original puzzle provides 12 statements and starts with</span><br/><span class=\"co1\">; \"Given the following twelve statements...\", so the first statement</span><br/><span class=\"co1\">; should ignore the F1 flag and always be true (see \"( N == 1 )\").</span><br/>\u00a0<br/>S <span class=\"sy0\">:=</span> <span class=\"nu0\">12</span> <span class=\"co1\">; number of statements</span><br/>Output <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"nu0\">2</span><span class=\"sy0\">**</span>S <span class=\"br0\">{</span><br/>\t<span class=\"co1\">;;If\u00a0!Mod(A_Index,100)\u00a0;; optional 'if' to show the loop progress</span><br/>\t<span class=\"co1\">;;\tToolTip, Index:\u00a0%A_Index%</span><br/>\tSetFlags<span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Current <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> Count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%S%</span><br/>\t\tR <span class=\"sy0\">:=</span> TestStatement<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> Current <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span> R<span class=\"sy0\">,</span> Count <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>R <span class=\"sy0\">==</span> F<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> Count <span class=\"sy0\">&gt;=</span> S<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\tOutput <span class=\"sy0\">.=</span> Count <span class=\"st0\">\" -&gt;\"</span> Current <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> Count <span class=\"sy0\">=</span> S <span class=\"br0\">)</span><br/>\t\tSolution <span class=\"sy0\">:=</span> <span class=\"st0\">\"`nSolution = \"</span> Current<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">ToolTip</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Output <span class=\"sy0\">.</span> Solution<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">;-------------------------------------------------------------------------------------</span><br/>\u00a0<br/>SetFlags<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tLocal I<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%S%</span><br/>\t\tI <span class=\"sy0\">:=</span> S<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> F<span class=\"re0\">%I%</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>D <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>S<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;-------------------------------------------------------------------------------------</span><br/>\u00a0<br/>TestStatement<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tLocal I<span class=\"sy0\">,</span> C <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"co1\">; This is a numbered list of twelve statements.</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> S <span class=\"sy0\">==</span> <span class=\"nu0\">12</span> <span class=\"br0\">)</span> <span class=\"co1\">; should always be true</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Exactly 3 of the last 6 statements are true.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><br/>\t\t\tI <span class=\"sy0\">:=</span> S<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> C <span class=\"sy0\">+=</span> F<span class=\"re0\">%I%</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Exactly 2 of the even-numbered statements are true.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%S%</span><br/>\t\t\tC <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> F<span class=\"re0\">%A_Index%</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"co1\">; If statement 5 is true, then statements 6 and 7 are both true.</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> <span class=\"kw6\">F5</span>\u00a0? <span class=\"kw6\">F6</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">F7</span>\u00a0: <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; The 3 preceding statements are all false.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t\tI <span class=\"sy0\">:=</span> N<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">,</span> C <span class=\"sy0\">+=</span> F<span class=\"re0\">%I%</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Exactly 4 of the odd-numbered statements are true.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%S%</span><br/>\t\t\tC <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>\u00a0!!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> F<span class=\"re0\">%A_Index%</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">7</span> <span class=\"br0\">)</span> <span class=\"co1\">; Either statement 2 or 3 is true, but not both.</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> <span class=\"kw6\">F2</span> <span class=\"sy0\">^</span> <span class=\"kw6\">F3</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"co1\">; If statement 7 is true, then 5 and 6 are both true.</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> <span class=\"kw6\">F7</span>\u00a0? <span class=\"kw6\">F5</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">F6</span>\u00a0: <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Exactly 3 of the first 6 statements are true.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><br/>\t\t\tC <span class=\"sy0\">+=</span> F<span class=\"re0\">%A_Index%</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"co1\">; The next two statements are both true.</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> <span class=\"kw6\">F11</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">F12</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">11</span> <span class=\"br0\">)</span> <span class=\"co1\">; Exactly 1 of statements 7, 8 and 9 are true</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> <span class=\"kw6\">F7</span><span class=\"sy0\">+</span><span class=\"kw6\">F8</span><span class=\"sy0\">+</span><span class=\"kw6\">F9</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> <span class=\"nu0\">12</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Exactly 4 of the preceding statements are true</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\tC <span class=\"sy0\">+=</span> F<span class=\"re0\">%A_Index%</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span> C <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\">      nStatements% = 12<br/>      DIM Pass%(nStatements%), T%(nStatements%)<br/>\u00a0<br/>      FOR try% = 0 TO 2^nStatements%-1<br/>\u00a0<br/>        REM Postulate answer:<br/>        FOR stmt% = 1 TO 12<br/>          T%(stmt%) = (try% AND 2^(stmt%-1)) &lt;&gt; 0<br/>        NEXT<br/>\u00a0<br/>        REM Test consistency:<br/>        Pass%(1)  = T%(1) = (nStatements% = 12)<br/>        Pass%(2)  = T%(2) = ((T%(7)+T%(8)+T%(9)+T%(10)+T%(11)+T%(12)) = -3)<br/>        Pass%(3)  = T%(3) = ((T%(2)+T%(4)+T%(6)+T%(8)+T%(10)+T%(12)) = -2)<br/>        Pass%(4)  = T%(4) = ((NOT T%(5) OR (T%(6) AND T%(7))))<br/>        Pass%(5)  = T%(5) = (NOT T%(2) AND NOT T%(3) AND NOT T%(4))<br/>        Pass%(6)  = T%(6) = ((T%(1)+T%(3)+T%(5)+T%(7)+T%(9)+T%(11)) = -4)<br/>        Pass%(7)  = T%(7) = ((T%(2) EOR T%(3)))<br/>        Pass%(8)  = T%(8) = ((NOT T%(7) OR (T%(5) AND T%(6))))<br/>        Pass%(9)  = T%(9) = ((T%(1)+T%(2)+T%(3)+T%(4)+T%(5)+T%(6)) = -3)<br/>        Pass%(10) = T%(10) = (T%(11) AND T%(12))<br/>        Pass%(11) = T%(11) = ((T%(7)+T%(8)+T%(9)) = -1)<br/>        Pass%(12) = T%(12) = ((T%(1)+T%(2)+T%(3)+T%(4)+T%(5)+T%(6) + \\<br/>        \\                      T%(7)+T%(8)+T%(9)+T%(10)+T%(11)) = -4)<br/>\u00a0<br/>        CASE SUM(Pass%()) OF<br/>          WHEN -11:<br/>            PRINT \"Near miss with statements \";<br/>            FOR stmt% = 1 TO 12<br/>              IF T%(stmt%) PRINT\u00a0; stmt% \" \";<br/>              IF NOT Pass%(stmt%) miss% = stmt%<br/>            NEXT<br/>            PRINT \"true (failed \"\u00a0;miss% \").\"<br/>          WHEN -12:<br/>            PRINT \"Solution! with statements \";<br/>            FOR stmt% = 1 TO 12<br/>              IF T%(stmt%) PRINT\u00a0; stmt% \" \";<br/>            NEXT<br/>            PRINT \"true.\"<br/>        ENDCASE<br/>\u00a0<br/>      NEXT try%<br/>      END</pre>"}, {"lang": "Bracmat", "loc": 265, "block": "<pre class=\"text highlighted_source\">(<br/>    ( number<br/>    =   n done ntest oldFT<br/>      .  \u00a0!arg:(?done.(=?ntest).?oldFT)<br/>        &amp; 0:?n<br/>        &amp; (  \u00a0!done<br/>           \u00a0:  \u00a0?<br/>                (\u00a0!ntest<br/>                .\u00a0!oldFT&amp;1+!n:?n&amp;~<br/>                )<br/>               \u00a0?<br/>          |\u00a0!n<br/>          )<br/>    )<br/>  &amp; ( STATEMENTS<br/>    =   ( (1.\"This is a numbered list of twelve statements.\")<br/>        . 1<br/>        . ( <br/>          =   n nr done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; 0:?n<br/>              &amp;   whl<br/>                ' (\u00a0!done:(?nr.?)\u00a0?done<br/>                  &amp; 1+!n:!nr:?n<br/>                  )<br/>              &amp;   whl<br/>                ' (\u00a0!toDo:((?nr.?).?)\u00a0?toDo<br/>                  &amp; 1+!n:!nr:?n<br/>                  )<br/>              &amp; (!n:12&amp;true|false)<br/>          )<br/>        )<br/>        ( (2.\"Exactly 3 of the last 6 statements are true.\")<br/>        . end<br/>        . ( <br/>          =   done toDo lastSix<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp;\u00a0!done:? [-7\u00a0?lastSix<br/>              &amp; (   number$(!lastSix.(=?).true):3<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (3.\"Exactly 2 of the even-numbered statements are true.\")<br/>        . end<br/>        . ( <br/>          =   done toDo ii<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (       number<br/>                      $ (\u00a0!done<br/>                        . (=?ii&amp;!ii*1/2:~/)<br/>                        . true<br/>                        )<br/>                   \u00a0: 2<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (4.\"If statement 5 is true, then statements 6 and 7 are both true.\")<br/>        . 7<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (    \u00a0!done<br/>                   \u00a0: (\u00a0? (5.false)\u00a0?<br/>                      |  \u00a0? (6.true)\u00a0?<br/>                       \u00a0:\u00a0? (7.true)\u00a0?<br/>                      )<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (5.\"The 3 preceding statements are all false.\")<br/>        . 5<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (    \u00a0!done<br/>                   \u00a0:  \u00a0?<br/>                        (?.false)<br/>                        (?.false)<br/>                        (?.false)<br/>                        (?.?)<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (6.\"Exactly 4 of the odd-numbered statements are true.\")<br/>        . end<br/>        . ( <br/>          =   done toDo i<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (       number<br/>                      $ (\u00a0!done<br/>                        . (=?i&amp;!i*1/2:/)<br/>                        . true<br/>                        )<br/>                   \u00a0: 4<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (7.\"Either statement 2 or 3 is true, but not both.\")<br/>        . 7<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (       number<br/>                      $ (!done.(=2|3).true)<br/>                   \u00a0: 1<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (8.\"If statement 7 is true, then 5 and 6 are both true.\")<br/>        . 8<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (    \u00a0!done<br/>                   \u00a0: (\u00a0? (7.false)\u00a0?<br/>                      |  \u00a0? (5.true)\u00a0?<br/>                       \u00a0:\u00a0? (6.true)\u00a0?<br/>                      )<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (9.\"Exactly 3 of the first 6 statements are true.\")<br/>        . 9<br/>        . ( <br/>          =   done toDo firstSix<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp;\u00a0!done:?firstSix [6\u00a0?<br/>              &amp; (   number$(!firstSix.(=?).true):3<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (10.\"The next two statements are both true.\")<br/>        . 12<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (  \u00a0!done:? (?.true) (?.true)<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (11.\"Exactly 1 of statements 7, 8 and 9 are true.\")<br/>        . 11<br/>        . ( <br/>          =   done toDo<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp; (       number<br/>                      $ (\u00a0!done<br/>                        . (=7|8|9)<br/>                        . true<br/>                        )<br/>                   \u00a0: 1<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>        ( (12.\"Exactly 4 of the preceding statements are true.\")<br/>        . 12<br/>        . ( <br/>          =   done toDo preceding<br/>            .  \u00a0!arg:(?done.?toDo)<br/>              &amp;\u00a0!done:?preceding (?.?)<br/>              &amp; (   number$(!preceding.(=?).true):4<br/>                  &amp; true<br/>                | false<br/>                )<br/>          )<br/>        )<br/>    )<br/>  &amp; ( TestTruth<br/>    =     done toDo postponedTests testToBePostponed<br/>        , n when test FT oldFT A Z text<br/>        , postponedTest testNow<br/>      .  \u00a0!arg:(?done.?toDo.?postponedTests)<br/>        &amp; (  \u00a0!toDo:<br/>            &amp; \"We have come to the end of the list of tests.<br/>               Perform any tests that had to be postponed until now.\"<br/>            &amp;   whl<br/>              ' (  \u00a0!postponedTests<br/>                 \u00a0: (?.?oldFT.(=?postponedTest))\u00a0?A<br/>                &amp; postponedTest$(!done.):!oldFT<br/>                &amp;\u00a0!A:?postponedTests<br/>                )<br/>            &amp;\u00a0!postponedTests:<br/>            &amp; out$(\"Solution:\"\u00a0!done)<br/>            &amp; ~<br/>          |    \u00a0!toDo<br/>             \u00a0: ((?n.?text).?when.(=?test))\u00a0?toDo<br/>            &amp; \"'false' and 'true' are just two symbols, not 'boolean values'.<br/>                You can choose other symbols if you like.<br/>                The program first guesses the first symbol and assigns it to the variable FT. <br/>                After backtracking, the second symbol is guessed and assigned to FT.<br/>                This is done for each statement.\"<br/>            &amp;   false true<br/>             \u00a0:  \u00a0?<br/>                 \u00a0%@?FT<br/>                  (\u00a0?<br/>                  &amp; 1+!guesses:?guesses<br/>                  &amp; (!n.!FT):?testNow<br/>                  &amp; \"Do all tests that had to be postponed until now, unless one of those tests<br/>                    fails. Remove the successful tests from the list of postponed tests.\"<br/>                  &amp;   whl<br/>                    ' (  \u00a0!postponedTests<br/>                       \u00a0:  \u00a0?A<br/>                            (!n.?oldFT.(=?postponedTest))<br/>                           \u00a0?Z<br/>                      &amp;   postponedTest$(!done\u00a0!testNow.!toDo)<br/>                       \u00a0:\u00a0!oldFT<br/>                      &amp;\u00a0!A\u00a0!Z:?postponedTests<br/>                      )<br/>                  &amp; \"Check that all tests that had to be postponed until now are removed from <br/>                     the list of postponed tests. Only then go on with looking at testing<br/>                     the current statement. Backtrack if a test failed.\"<br/>                  &amp;\u00a0!postponedTests:~(? (!n.?)\u00a0?)<br/>                  &amp; (  \u00a0!when:&gt;!n<br/>                      &amp; \"The current statement cannot be tested right now. Postpone it to<br/>                         the earliest coming statement where the current statement can be<br/>                         tested.<br/>                         (The earliest statement, denoted by 'when', is computed manually.)\"<br/>                      &amp; (!when.!FT.'$test):?testToBePostponed<br/>                    |   \"No need to postpone. Test the current statement now.\"<br/>                      &amp;\u00a0:?testToBePostponed<br/>                      &amp; \"If the test fails, backtrack. If it succeeds, go on to the next <br/>                         statement.\"<br/>                      &amp; test$(!done\u00a0!testNow.!toDo):!FT<br/>                    )<br/>                  &amp; \"So far so good. Test the next statements. (recursively)\"<br/>                  &amp;   TestTruth<br/>                    $ (\u00a0!done\u00a0!testNow<br/>                      .\u00a0!toDo<br/>                      .\u00a0!testToBePostponed\u00a0!postponedTests<br/>                      )<br/>                  )<br/>          )<br/>    )<br/>  &amp; 0:?guesses<br/>  &amp; TestTruth$(.!STATEMENTS.)<br/>|   out<br/>  $ ( str<br/>    $ ( \"That's it. I made \"<br/>       \u00a0!guesses<br/>        \" true/false guesses in all. (A brute force method needs 2^12=\"<br/>        2^12<br/>        \" guesses.\"<br/>      )<br/>    )<br/>);</pre>"}, {"lang": "Clojure", "loc": 20, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>combinatorics<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> xor? <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>odd? <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> identity args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> twelve<span class=\"sy0\">-</span>statements <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a b c d e f g h i j k l<span class=\"br0\">]</span> <span class=\"br0\">(</span>selections <span class=\"br0\">[</span>true false<span class=\"br0\">]</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span>true? a<span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>g h i j k l<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? b<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>b d f h j l<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? c<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>false? e<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> true? <span class=\"br0\">[</span>e f g<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? d<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> false? <span class=\"br0\">[</span>b c d<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? e<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>a c e g i k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? f<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>xor? <span class=\"br0\">(</span>true? b<span class=\"br0\">)</span> <span class=\"br0\">(</span>true? c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? g<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>false? g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> true? <span class=\"br0\">[</span>e f g<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? h<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>a b c d e f<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? i<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> true? <span class=\"br0\">[</span>k l<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? j<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>g h i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? k<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> true? <span class=\"br0\">[</span>a b c d e f g h i j k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>true? l<span class=\"br0\">)</span> <span class=\"br0\">(</span>false? l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>a b c d e f g h i j k l<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 45, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defparameter *state* <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *statements* '<span class=\"br0\">(</span>t                                                    <span class=\"co1\">; 1</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>                 <span class=\"co1\">; 2</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>                  <span class=\"co1\">; 3</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>p <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>p <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                   <span class=\"co1\">; 4</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>            <span class=\"co1\">; 5</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>                   <span class=\"co1\">; 6</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>p <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; 7</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>p <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>p <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>p <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                   <span class=\"co1\">; 8</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>                    <span class=\"co1\">; 9</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>p <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>p <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                                  <span class=\"co1\">;10</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>                          <span class=\"co1\">;11</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count-true '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">;12</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> *state* '<span class=\"br0\">(</span>t t t t t t t t t t t t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>true-stats <span class=\"br0\">(</span>check<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> true-stats <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>result <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> true-stats <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>result t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span>new-state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> check <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for el in *state*<br/>        for stat in *statements*<br/>        counting <span class=\"br0\">(</span><span class=\"kw1\">eq</span> el <span class=\"br0\">(</span><span class=\"kw1\">eval</span> stat<span class=\"br0\">)</span><span class=\"br0\">)</span> into true-stats<br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> true-stats<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-true <span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i in lst<br/>    counting <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span>- i <span class=\"nu0\">1</span><span class=\"br0\">)</span> *state*<span class=\"br0\">)</span> into total<br/>    finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> total<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> p <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> *state*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> new-state <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>contr t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"nu0\">11</span><br/>         <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i *state*<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i *state*<span class=\"br0\">)</span> contr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">setq</span> contr <span class=\"br0\">(</span><span class=\"kw1\">and</span> contr <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i *state*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> result <span class=\"br0\">(</span>?<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~:[Missed by one~;Solution:~] ~%~{~:[F~;T~] ~}~%\"</span>\u00a0? *state*<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 63, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> TwelveStatements<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Func<span class=\"sy0\">&lt;</span>Statements, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> checks <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"kw1\">by</span><span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Implies</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>st<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>st<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"kw1\">by</span><span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> st<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> st<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Implies</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>            st <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> st<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Statements statements <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Statements<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> statements<span class=\"sy0\">.</span><span class=\"kw1\">Value</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4096</span><span class=\"sy0\">;</span> statements<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> falseIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> checks<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span>statements<span class=\"br0\">)</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">else</span> falseIndex <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{\"</span>All wrong<span class=\"sy0\">:</span><span class=\"st0\">\", -13}{statements}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{$\"</span>Wrong at <span class=\"br0\">{</span>falseIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">:</span><span class=\"st0\">\", -13}{statements}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{\"</span>All correct<span class=\"sy0\">:</span><span class=\"st0\">\", -13}{statements}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">struct</span> Statements<br/>    <span class=\"br0\">{</span>    <br/>        <span class=\"kw1\">public</span> Statements<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> <span class=\"kw1\">Value</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> <span class=\"kw1\">this</span><span class=\"br0\">[</span><span class=\"kw4\">int</span> index<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">Value</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Statements <span class=\"kw1\">operator</span> <span class=\"sy0\">++</span><span class=\"br0\">(</span>Statements statements<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Statements<span class=\"br0\">(</span>statements<span class=\"sy0\">.</span><span class=\"kw1\">Value</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Statements copy <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span> <span class=\"co1\">//Cannot access 'this' in anonymous method...</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"kw1\">from</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">select</span> copy<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"T\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">//Extension methods</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Implies<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">bool</span> x, <span class=\"kw4\">bool</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>x <span class=\"sy0\">||</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> To<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> start, <span class=\"kw4\">int</span> end, <span class=\"kw4\">int</span> <span class=\"kw1\">by</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&lt;=</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> start<span class=\"sy0\">;</span><br/>            start <span class=\"sy0\">+=</span> <span class=\"kw1\">by</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 117, "block": "<pre class=\"text highlighted_source\">#include &lt;iostream&gt;<br/>#include &lt;vector&gt;<br/>#include &lt;string&gt;<br/>#include &lt;cmath&gt;<br/>\u00a0<br/>using namespace std;<br/>\u00a0<br/>// convert int (0 or 1) to string (F or T)<br/>inline<br/>string str(int n)<br/>{<br/>    return  n\u00a0? \"T\": \"F\";<br/>}<br/>\u00a0<br/>int main(void)<br/>{<br/>    int solution_list_number = 1;<br/>    vector&lt;string&gt; st;<br/>    st = {<br/>        \" 1. This is a numbered list of twelve statements.\",<br/>        \" 2. Exactly 3 of the last 6 statements are true.\",<br/>        \" 3. Exactly 2 of the even-numbered statements are true.\",<br/>        \" 4. If statement 5 is true, then statements 6 and 7 are both true.\",<br/>        \" 5. The 3 preceding statements are all false.\",<br/>        \" 6. Exactly 4 of the odd-numbered statements are true.\",   <br/>        \" 7. Either statement 2 or 3 is true, but not both.\",<br/>        \" 8. If statement 7 is true, then 5 and 6 are both true.\",<br/>        \" 9. Exactly 3 of the first 6 statements are true.\",<br/>        \" 10. The next two statements are both true.\",<br/>        \" 11. Exactly 1 of statements 7, 8 and 9 are true.\",<br/>        \" 12. Exactly 4 of the preceding statements are true.\"<br/>    };  //  Good solution is: 1 3 4 6 7 11 are true<br/>\u00a0<br/>    int n = 12; // Number of statements.<br/>    int nTemp = (int)pow(2, n); // Number of solutions to check.<br/>    for (int counter = 0; counter &lt; nTemp; counter++)<br/>    {   <br/>        vector&lt;int&gt; s;<br/>        for (int k = 0; k &lt; n; k++)<br/>        {<br/>            s.push_back((counter &gt;&gt; k) &amp; 0x1);<br/>        }<br/>        vector&lt;int&gt; test(12);<br/>        int sum = 0;<br/>        // check each of the nTemp solutions for match. <br/>        // 1. This is a numbered list of twelve statements.<br/>        test[0] = s[0];<br/>\u00a0<br/>        // 2. Exactly 3 of the last 6 statements are true.<br/>        sum = s[6]+ s[7]+s[8]+s[9]+s[10]+s[11];<br/>        test[1] = ((sum == 3) == s[1]);<br/>\u00a0<br/>        // 3. Exactly 2 of the even-numbered statements are true.<br/>        sum = s[1]+s[3]+s[5]+s[7]+s[9]+s[11];<br/>        test[2] = ((sum == 2) == s[2]);<br/>\u00a0<br/>        // 4. If statement 5 is true, then statements 6 and 7 are both true.<br/>        test[3] = ((s[4]\u00a0? (s[5] &amp;&amp; s[6])\u00a0: true) == s[3]);<br/>\u00a0<br/>        // 5. The 3 preceding statements are all false.<br/>        test[4] = (((s[1] + s[2] + s[3]) == 0) == s[4]);<br/>\u00a0<br/>        // 6. Exactly 4 of the odd-numbered statements are true.<br/>        sum = s[0] + s[2] + s[4] + s[6] + s[8] + s[10];<br/>        test[5] = ((sum == 4) == s[5]);<br/>\u00a0<br/>        // 7. Either statement 2 or 3 is true, but not both.<br/>        test[6] = (((s[1] + s[2]) == 1) == s[6]);<br/>\u00a0<br/>        // 8. If statement 7 is true, then 5 and 6 are both true.<br/>        test[7] = ((s[6]\u00a0? (s[4] &amp;&amp; s[5])\u00a0: true) == s[7]);<br/>\u00a0<br/>        // 9. Exactly 3 of the first 6 statements are true.<br/>        sum = s[0]+s[1]+s[2]+s[3]+s[4]+s[5];<br/>        test[8] = ((sum == 3) == s[8]);<br/>\u00a0<br/>        // 10. The next two statements are both true.<br/>        test[9] = ((s[10] &amp;&amp; s[11]) == s[9]); <br/>\u00a0<br/>        // 11. Exactly 1 of statements 7, 8 and 9 are true.<br/>        sum = s[6]+ s[7] + s[8]; <br/>        test[10] = ((sum == 1) == s[10]);<br/>\u00a0<br/>        // 12. Exactly 4 of the preceding statements are true.<br/>        sum = s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6]+s[7]+s[8]+s[9]+s[10];<br/>        test[11] = ((sum == 4) == s[11]);<br/>\u00a0<br/>        // Check test results and print solution if 11 or 12 are true <br/>        int resultsTrue = 0;<br/>        for(unsigned int i = 0; i &lt; test.size(); i++){<br/>            resultsTrue += test[i];<br/>        }<br/>        if(resultsTrue == 11 || resultsTrue == 12){ <br/>            cout &lt;&lt; solution_list_number++ &lt;&lt; \". \"\u00a0;<br/>            string output = \"1:\"+str(s[0])+\"  2:\"+str(s[1])+\"  3:\"+str(s[2])<br/>                        +\"  4:\"+str(s[3])+\"  5:\"+str(s[4])+\"  6:\"+ str(s[5])<br/>                        +\"  7:\"+str(s[6])+\"  8:\"+str(s[7])+\"  9:\"+str(s[8])<br/>                        +\"  10:\"+str(s[9])+\"  11:\"+str(s[10])+\"  12:\"+ str(s[11]);               <br/>\u00a0<br/>            if (resultsTrue == 12) {<br/>                cout &lt;&lt; \"Full Match, good solution!\" &lt;&lt; endl;               <br/>                cout &lt;&lt; \"\\t\" &lt;&lt; output &lt;&lt; endl;<br/>            } <br/>            else if(resultsTrue == 11){<br/>                int i;<br/>                for(i = 0; i &lt; 12; i++){<br/>                    if(test[i] == 0){<br/>                        break;<br/>                    }<br/>                }   <br/>                cout &lt;&lt; \"Missed by one statement: \" &lt;&lt; st[i] &lt;&lt; endl;<br/>                cout &lt;&lt; \"\\t\" &lt;&lt; output &lt;&lt; endl;<br/>            }<br/>        }<br/>    }<br/>}   <br/>\u00a0</pre>"}, {"lang": "D", "loc": 48, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> texts <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"this is a numbered list of twelve statements\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 3 of the last 6 statements are true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 2 of the even-numbered statements are true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"if statement 5 is true, then statements 6 and 7 are both true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"the 3 preceding statements are all false\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 4 of the odd-numbered statements are true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"either statement 2 or 3 is true, but not both\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"if statement 7 is true, then 5 and 6 are both true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 3 of the first 6 statements are true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"the next two statements are both true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 1 of statements 7, 8 and 9 are true\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"exactly 4 of the preceding statements are true\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"kw4\">bool</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> predicates <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">6</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">dropOne</span>.<span class=\"me1\">stride</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">stride</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">6</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    s <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> nStats <span class=\"sy0\">=</span> predicates.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> nStats<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">bool</span><span class=\"br0\">[</span>nStats<span class=\"br0\">]</span> st<span class=\"sy0\">,</span> matches<span class=\"sy0\">;</span><br/>        nStats.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!!</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">copy</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        st<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>predicates<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>st<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s_t <span class=\"sy0\">=&gt;</span> s_t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> s_t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">copy</span><span class=\"br0\">(</span>matches<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">&gt;=</span> nStats <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">all</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">\"&gt;&gt;&gt; Solution:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                writefln<span class=\"br0\">(</span><span class=\"st0\">\"Missed by statement:\u00a0%d\"</span><span class=\"sy0\">,</span><br/>                         matches<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s\u00a0%)\"</span><span class=\"sy0\">,</span> st<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"st0\">\"FT\"</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 181, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Possible solutions.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> s.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"kw3\">False</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>\t\t\ts <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\trecurseAll <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>counter.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" solution found. \"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\ts<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\tcheck2<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 2 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">7</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">12</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck3<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 3 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount, i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck4<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 4 fulfilled?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">not</span> s <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck5<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 5 fulfilled?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">not</span> s <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> s <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> s <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck6<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 6 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount, i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> <span class=\"nu0\">11</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck7<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 7 fulfilled?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw2\">or</span> s <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck8<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 8 fulfilled?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> s <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck9<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 9 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">6</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck10<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 10 fulfilled?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck11<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 11 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">7</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">9</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcheck12<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is statement 12 fulfilled?</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">11</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcounter<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\u00a0<br/>\tcheckit<br/>\t\t\t<span class=\"co1\">-- Check if all statements are correctly solved.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> check2 <span class=\"kw2\">and</span> check3 <span class=\"kw2\">and</span> check4 <span class=\"kw2\">and</span> check5 <span class=\"kw2\">and</span> check6 <span class=\"kw2\">and</span> check7 <span class=\"kw2\">and</span> check8 <span class=\"kw2\">and</span> check9 <span class=\"kw2\">and</span> check10 <span class=\"kw2\">and</span> check11 <span class=\"kw2\">and</span> check12 <span class=\"kw2\">then</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">12</span> <span class=\"kw2\">as</span> c<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t\tcounter <span class=\"sy0\">:=</span> counter <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\trecurseAll <span class=\"br0\">(</span>k<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- All possible True and False combinations to check for a solution.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">13</span> <span class=\"kw2\">then</span><br/>\t\t\t\tcheckit<br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\ts <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\trecurseAll <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\ts <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\trecurseAll <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 61, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>extension op<br/>{<br/>    printSolution\u00a0: bits<br/>        = self zip:bits by<br/>            (:s:b)( s iif(\"T\",\"F\") + (s xor:b) iif(\"* \",\"  \") ); summarize(String new).<br/>\u00a0<br/>    toBit<br/>        = self iif(1,0).<br/>}<br/>\u00a0<br/>puzzle =<br/>(<br/>    (:bits)( bits length == 12 ),<br/>\u00a0<br/>    (:bits)( bits last:6; selectBy(:x)( x toBit ); summarize == 3 ),<br/>\u00a0<br/>    (:bits)( bits zip(RangeEnumerator new from:1 to:12) <br/>                        by(:x:i)( (i int; isEven)and:x; toBit ); summarize == 2 ),<br/>\u00a0<br/>    (:bits)( bits[4] iif(bits[5] &amp;&amp; bits[6],true) ),<br/>\u00a0<br/>    (:bits)( (bits[1] || bits[2] || bits[3]) not ),<br/>\u00a0<br/>    (:bits)( bits zip(RangeEnumerator new from:1 to:12) <br/>                        by(:x:i)( (i int; isOdd)and:x; toBit ); summarize == 4 ),<br/>\u00a0<br/>    (:bits)( bits[1] xor(bits[2]) ),<br/>\u00a0<br/>    (:bits)( bits[6] iif(bits[5] &amp;&amp; bits[4],true) ),<br/>\u00a0<br/>    (:bits)( bits top:6; selectBy(:x)( x toBit ); summarize == 3 ),<br/>\u00a0<br/>    (:bits)( bits[10] &amp;&amp; bits[11] ),<br/>\u00a0<br/>    (:bits)( (bits[6] toBit + bits[7] toBit + bits[8] toBit)==1 ),<br/>\u00a0<br/>    (:bits)( bits top:11; selectBy(:x)( x toBit ); summarize == 4 )<br/>).<br/>\u00a0<br/>program =<br/>[<br/>    console writeLine:\"\".<br/>\u00a0<br/>    0 till(2 power int:12) do(:n)<br/>    [<br/>        var bits\u00a0:= BitArray32 new:n; top:12; toArray.<br/>        var results\u00a0:= puzzle selectBy(:r)( r(bits) ); toArray.<br/>\u00a0<br/>        var counts\u00a0:= bits zip:results by(:b:r)( b xor:r; toBit ); summarize.<br/>\u00a0<br/>        counts =&gt;<br/>            0  [ console printLine(\"Total hit\u00a0:\",results printSolution:bits) ];<br/>            1  [ console printLine(\"Near miss\u00a0:\",results printSolution:bits) ];<br/>            12 [ console printLine(\"Total miss:\",results printSolution:bits) ].<br/>    ].<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "ERRE", "loc": 60, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM TWELVE_STMS<br/>\u00a0<br/>!$DYNAMIC<br/>DIM PASS%[0],T%[0]<br/>\u00a0<br/>FUNCTION EOR(X,Y)<br/>    EOR=(X AND NOT(Y)) OR (NOT(X) AND Y)<br/>END FUNCTION<br/>\u00a0<br/>BEGIN<br/>      NSTATEMENTS%=12<br/>     \u00a0!$DIM PASS%[NSTATEMENTS%],T%[NSTATEMENTS%]<br/>\u00a0<br/>      FOR TRY%=0 TO 2^NSTATEMENTS%-1 DO<br/>\u00a0<br/>       \u00a0! Postulate answer:<br/>        FOR STMT%=1 TO 12 DO<br/>          T%[STMT%]=(TRY% AND 2^(STMT%-1))&lt;&gt;0<br/>        END FOR<br/>\u00a0<br/>       \u00a0! Test consistency:<br/>        PASS%[1]=T%[1]=(NSTATEMENTS%=12)<br/>        PASS%[2]=T%[2]=((T%[7]+T%[8]+T%[9]+T%[10]+T%[11]+T%[12])=-3)<br/>        PASS%[3]=T%[3]=((T%[2]+T%[4]+T%[6]+T%[8]+T%[10]+T%[12])=-2)<br/>        PASS%[4]=T%[4]=((NOT T%[5] OR (T%[6] AND T%[7])))<br/>        PASS%[5]=T%[5]=(NOT T%[2] AND NOT T%[3] AND NOT T%[4])<br/>        PASS%[6]=T%[6]=((T%[1]+T%[3]+T%[5]+T%[7]+T%[9]+T%[11])=-4)<br/>        PASS%[7]=T%[7]=(EOR(T%[2],T%[3]))<br/>        PASS%[8]=T%[8]=((NOT T%[7] OR (T%[5] AND T%[6])))<br/>        PASS%[9]=T%[9]=((T%[1]+T%[2]+T%[3]+T%[4]+T%[5]+T%[6])=-3)<br/>        PASS%[10]=T%[10]=(T%[11] AND T%[12])<br/>        PASS%[11]=T%[11]=((T%[7]+T%[8]+T%[9])=-1)<br/>        PASS%[12]=T%[12]=((T%[1]+T%[2]+T%[3]+T%[4]+T%[5]+T%[6]+T%[7]+T%[8]+T%[9]+T%[10]+T%[11])=-4)<br/>\u00a0<br/>        SUM=0<br/>        FOR I%=1 TO 12 DO<br/>           SUM=SUM+PASS%[I%]<br/>        END FOR<br/>\u00a0<br/>        CASE SUM OF<br/>          -11-&gt;<br/>            PRINT(\"Near miss with statements \";)<br/>            FOR STMT%=1 TO 12 DO<br/>              IF T%[STMT%] THEN PRINT(STMT%;) END IF<br/>              IF NOT PASS%[STMT%] THEN MISS%=STMT% END IF<br/>            END FOR<br/>            PRINT(\"true (failed \";MISS%;\").\")<br/>          END -&gt;<br/>          -12-&gt;<br/>            PRINT(\"Solution! with statements \";)<br/>            FOR STMT%=1 TO 12 DO<br/>              IF T%[STMT%] THEN PRINT(STMT%;) END IF<br/>            END FOR<br/>            PRINT(\"true.\")<br/>          END -&gt;<br/>        END CASE<br/>\u00a0<br/>      END FOR\u00a0! TRY%<br/>END PROGRAM</pre>"}, {"lang": "Forth", "loc": 43, "block": "<pre class=\"text highlighted_source\">: lastbit                              ( n1 -- n2)<br/>  dup if 1 swap begin dup 1 &lt;&gt; while swap 1+ swap 1 rshift repeat drop then<br/>;<br/>\u00a0<br/>: bit 1 swap lshift and 0&lt;&gt;\u00a0;          ( n1 n2 -- f)<br/>: bitcount 0 swap begin dup while dup 1- and swap 1+ swap repeat drop\u00a0;<br/>\u00a0<br/>12 constant #stat                      \\ number of statements<br/>                                       \\ encoding of the statements<br/>: s1 &gt;r #stat 12 = r&gt; 0 bit =\u00a0;        \\ heavy use of binary<br/>: s2 &gt;r <a class=\"__cf_email__\" data-cfemail=\"126052\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 4032 and bitcount 3 = r&gt; 1 bit =\u00a0;<br/>: s3 &gt;r <a class=\"__cf_email__\" data-cfemail=\"a7d5e7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2730 and bitcount 2 = r&gt; 2 bit =\u00a0;<br/>: s4 &gt;r <a class=\"__cf_email__\" data-cfemail=\"e597a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 4 bit 0= 96 <a class=\"__cf_email__\" data-cfemail=\"92e0d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over and = or r&gt; 3 bit =\u00a0;<br/>: s5 &gt;r <a class=\"__cf_email__\" data-cfemail=\"106250\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 14 and 0= r&gt; 4 bit =\u00a0;<br/>: s6 &gt;r <a class=\"__cf_email__\" data-cfemail=\"96e4d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1365 and bitcount 4 = r&gt; 5 bit =\u00a0;<br/>: s7 &gt;r <a class=\"__cf_email__\" data-cfemail=\"bdcffd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1 bit <a class=\"__cf_email__\" data-cfemail=\"c9bb89\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2 bit xor r&gt; 6 bit =\u00a0;<br/>: s8 &gt;r <a class=\"__cf_email__\" data-cfemail=\"f486b4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 6 bit 0= 48 <a class=\"__cf_email__\" data-cfemail=\"3a487a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over and = or r&gt; 7 bit =\u00a0;<br/>: s9 &gt;r <a class=\"__cf_email__\" data-cfemail=\"afddef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 63 and bitcount 3 = r&gt; 8 bit =\u00a0;<br/>: s10 &gt;r 3072 <a class=\"__cf_email__\" data-cfemail=\"fb89bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over and = r&gt; 9 bit =\u00a0;<br/>: s11 &gt;r <a class=\"__cf_email__\" data-cfemail=\"e496a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 448 and bitcount 1 = r&gt; 10 bit =\u00a0;<br/>: s12 &gt;r <a class=\"__cf_email__\" data-cfemail=\"e496a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2047 and bitcount 4 = r&gt; 11 bit =\u00a0;<br/>: list #stat 0 do dup i bit if i 1+ . then loop drop\u00a0;<br/>\u00a0<br/>: nearmiss?                            \\ do we have a near miss?<br/>  over #stat 1- = if                   ( true-pattern #true stat-pattern)<br/>    .\" Near miss with statements \" dup list .\" true (failed \"<br/>    &gt;r over invert 1 #stat lshift 1- and lastbit 0 .r .\" )\" cr r&gt;<br/>  then                                 \\ extract the failed statement<br/>;<br/>                                       \\ have we found a solution?<br/>: solution?                            ( true-pattern #true stat-pattern)<br/>  over #stat = if .\" Solution! with statements \" dup list .\" true.\" cr then<br/>;<br/>\u00a0<br/>: 12statements                         \\ test the twelve patterns<br/>  1 #stat lshift 0 do                  \\ create another bit pattern<br/>    i s12   2* i s11 + 2* i s10 + 2* i s9 + 2* i s8 + 2* i s7 + 2*<br/>    i s6  + 2* i s5  + 2* i s4  + 2* i s3 + 2* i s2 + 2* i s1 +<br/>    abs dup bitcount i solution? nearmiss? drop drop drop<br/>  loop                                 \\ count number of bytes and evaluate<br/>;<br/>\u00a0<br/>12statements</pre>"}, {"lang": "Go", "loc": 127, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// its' not too much more work to check all the permutations concurrently</span><br/><span class=\"kw1\">var</span> solution <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> nearMiss <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> done <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// iterate and use the bits as the permutation</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">4096</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">go</span> checkPerm<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// collect the misses and list them after the complete solution(s)</span><br/>    <span class=\"kw1\">var</span> ms <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">4096</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">select</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> &lt;<span class=\"sy3\">-</span>done<span class=\"sy1\">:</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"kw1\">case</span> s <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>solution<span class=\"sy1\">:</span><br/>            print12<span class=\"sy1\">(</span><span class=\"st0\">\"solution\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> m <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>nearMiss<span class=\"sy1\">:</span><br/>            ms <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>ms<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ms <span class=\"sy1\">{</span><br/>        print12<span class=\"sy1\">(</span><span class=\"st0\">\"near miss\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> print12<span class=\"sy1\">(</span>label <span class=\"kw4\">string</span><span class=\"sy1\">,</span> bits <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>label<span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">12</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> bits&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        bits &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> checkPerm<span class=\"sy1\">(</span>tz <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// closure returns true if tz bit corresponding to</span><br/>    <span class=\"co1\">// 1-based statement number is 1.</span><br/>    ts <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> tz&gt;&gt;<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span>&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// variadic closure returns number of statements listed as arguments</span><br/>    <span class=\"co1\">// which have corresponding tz bit == 1.</span><br/>    ntrue <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>xs <span class=\"sy4\">...</span><span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        nt <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> xs <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> ts<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                nt<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> nt<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// a flag used on repeated calls to test.</span><br/>    <span class=\"co1\">// set to true when first contradiction is found.</span><br/>    <span class=\"co1\">// if another is found, this function (checkPerm) can \"short circuit\"</span><br/>    <span class=\"co1\">// and return immediately without checking additional statements.</span><br/>    <span class=\"kw1\">var</span> con <span class=\"kw4\">bool</span><br/>    <span class=\"co1\">// closure called to test each statement</span><br/>    test <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>statement <span class=\"kw4\">uint</span><span class=\"sy1\">,</span> b <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> ts<span class=\"sy1\">(</span>statement<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> b<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">case</span> con<span class=\"sy1\">:</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"bail\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            con <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// short circuit mechanism</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> x <span class=\"sy2\">:=</span> <span class=\"kw3\">recover</span><span class=\"sy1\">();</span> x <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> msg<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> x<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">);</span> <span class=\"sy3\">!</span>ok &amp;&amp; msg <span class=\"sy2\">!=</span> <span class=\"st0\">\"bail\"</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        done &lt;<span class=\"sy3\">-</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}()</span><br/>\u00a0<br/>    <span class=\"co1\">// 1. This is a numbered list of twelve statements.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 2. Exactly 3 of the last 6 statements are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 3. Exactly 2 of the even-numbered statements are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 4. If statement 5 is true, then statements 6 and 7 are both true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy3\">!</span>ts<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span> ts<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">)</span> &amp;&amp; ts<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// 5. The 3 preceding statements are all false.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"sy3\">!</span>ts<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span> &amp;&amp; <span class=\"sy3\">!</span>ts<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span> &amp;&amp; <span class=\"sy3\">!</span>ts<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// 6. Exactly 4 of the odd-numbered statements are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 7. Either statement 2 or 3 is true, but not both.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> ts<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> ts<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// 8. If statement 7 is true, then 5 and 6 are both true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"sy3\">!</span>ts<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span> ts<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span> &amp;&amp; ts<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// 9. Exactly 3 of the first 6 statements are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 10. The next two statements are both true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> ts<span class=\"sy1\">(</span><span class=\"nu0\">11</span><span class=\"sy1\">)</span> &amp;&amp; ts<span class=\"sy1\">(</span><span class=\"nu0\">12</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// 11. Exactly 1 of statements 7, 8 and 9 are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// 12. Exactly 4 of the preceding statements are true.</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> ntrue<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// no short circuit? send permutation as either near miss or solution</span><br/>    <span class=\"kw1\">if</span> con <span class=\"sy1\">{</span><br/>        nearMiss &lt;<span class=\"sy3\">-</span> tz<br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        solution &lt;<span class=\"sy3\">-</span> tz<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 55, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Rule <span class=\"br0\">{</span><br/>    r01<span class=\"br0\">(</span> <span class=\"nu0\">1</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>.<span class=\"me1\">num</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r02<span class=\"br0\">(</span> <span class=\"nu0\">2</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">7</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r03<span class=\"br0\">(</span> <span class=\"nu0\">3</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">12</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r04<span class=\"br0\">(</span> <span class=\"nu0\">4</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">?</span> r<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">&amp;&amp;</span> r<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span>\u00a0: <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r05<span class=\"br0\">(</span> <span class=\"nu0\">5</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r06<span class=\"br0\">(</span> <span class=\"nu0\">6</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r07<span class=\"br0\">(</span> <span class=\"nu0\">7</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">!=</span> r<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r08<span class=\"br0\">(</span> <span class=\"nu0\">8</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">?</span> r<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">&amp;&amp;</span> r<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span>\u00a0: <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r09<span class=\"br0\">(</span> <span class=\"nu0\">9</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r10<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">&amp;&amp;</span> r<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r11<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">7</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>    r12<span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"br0\">{</span> r<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> num<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> Closure statement<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> truth<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span> rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a>, r01, r02, r03, r04, r05, r06, r07, r08, r09, r10, r11, r12<span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> Rule<span class=\"br0\">(</span>num, statement<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">num</span> <span class=\"sy0\">=</span> num<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">statement</span> <span class=\"sy0\">=</span> statement<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> Rule       r<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> index<span class=\"br0\">)</span> <span class=\"br0\">{</span> rules<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> rules<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span> r<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> indices<span class=\"br0\">)</span> <span class=\"br0\">{</span> rules<span class=\"br0\">[</span>indices<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span> r<span class=\"br0\">(</span>IntRange indices<span class=\"br0\">)</span> <span class=\"br0\">{</span> rules<span class=\"br0\">[</span>indices<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span> r<span class=\"br0\">(</span>IntRange indices, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> r<span class=\"br0\">(</span>indices.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> setAllTruth<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> bits<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> r<span class=\"br0\">(</span>it<span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">12</span> <span class=\"sy0\">-</span> it<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nearMisses <span class=\"sy0\">=</span> <span class=\"br0\">[</span>:<span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>            setAllTruth<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> truthCandidates <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> truthMatchCount <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">statement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> it.<span class=\"me1\">truth</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>truthMatchCount <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"&gt;Solution&lt; ${truthCandidates*.num}\"</span><br/>            <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>truthMatchCount <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> miss <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> r<span class=\"br0\">(</span>it<span class=\"br0\">)</span>.<span class=\"me1\">statement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> r<span class=\"br0\">(</span>it<span class=\"br0\">)</span>.<span class=\"me1\">truth</span> <span class=\"br0\">}</span><br/>                nearMisses <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>truthCandidates<span class=\"br0\">)</span>: miss<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        nearMisses.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> truths, miss <span class=\"sy0\">-&gt;</span><br/>            printf <span class=\"br0\">(</span><span class=\"st0\">\"Near Miss:\u00a0%-21s (failed\u00a0%2d)<span class=\"es0\">\\n</span>\"</span>, <span class=\"st0\">\"${truths*.num}\"</span>, miss<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Rule.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 29, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>findIndices<span class=\"br0\">)</span><br/>\u00a0<br/>tf <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>wrongness b <span class=\"sy0\">=</span> findIndices <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/=</span><span class=\"br0\">)</span> b <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">$</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>statements <span class=\"sy0\">=</span> <span class=\"br0\">[</span>\t<span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">3</span> \u2282 <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> statements<span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">2</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">4</span> \u2192 <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">0</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">4</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">1</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">6</span> \u2192 <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">3</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">2</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">1</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">4</span> \u2282 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span> <span class=\"kw1\">where</span> <br/>\t<span class=\"br0\">(</span>s \u2282 x<span class=\"br0\">)</span> b <span class=\"sy0\">=</span> s <span class=\"sy0\">==</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>b<span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> b<span class=\"br0\">)</span><span class=\"br0\">)</span> x<br/>\t<span class=\"br0\">(</span>a \u2192 x<span class=\"br0\">)</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b<span class=\"sy0\">!!</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>b<span class=\"sy0\">!!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x<br/>\u00a0<br/>testall s n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> w<span class=\"br0\">)</span> <span class=\"sy0\">|</span> b <span class=\"sy0\">&lt;-</span> tf s<span class=\"sy0\">,</span> w <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>wrongness b s<span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> w <span class=\"sy0\">==</span> n<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> testall statements <span class=\"kw1\">in</span> <span class=\"kw1\">do</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Answer\"</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> t <span class=\"nu0\">0</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Near misses\"</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> t <span class=\"nu0\">1</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   apply<br/><span class=\"nu0\">128</span>!:<span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">NB. example</span><br/>   <span class=\"st_h\">'*:'</span> apply <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span></pre>"}, {"lang": "Java", "loc": 115, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LogicPuzzle<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">boolean</span> S<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> Count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check2 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check3 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check4 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>S<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> S<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check5 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>S<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>S<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>S<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check6 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check7 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>S<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> S<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>S<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check8 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>S<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> S<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check9 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check10 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check11 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> check12 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> S<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> check <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>check2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check3<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check4<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check6<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">&amp;&amp;</span> check7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check8<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check9<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check10<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> check11<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">&amp;&amp;</span> check12<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Count<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> recurseAll <span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>            check<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>            S<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            recurseAll<span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            S<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            recurseAll<span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        LogicPuzzle P <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LogicPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        P.<span class=\"me1\">S</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        P.<span class=\"me1\">recurseAll</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>P.<span class=\"me1\">Count</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" Solutions found.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 51, "block": "<pre class=\"text highlighted_source\">def indexed(filter):<br/>  . as $in<br/>  | reduce range(0;length) as $i ([]; if ($i | filter) then . + [$in[$i]] else . end);<br/>\u00a0<br/>def count(value): map(select(. == value)) | length;<br/>\u00a0<br/># The truth or falsity of the 12 statements can be captured in an array of size 12:<br/>def generate(k):<br/>  if k == 1 then [true], [false]<br/>  else generate(1) + generate(k-1)<br/>  end;<br/>\u00a0<br/># Input: a boolean array<br/>def evaluate:<br/>  [ (length == 12),                                          #1<br/>    ((.[6:] | count(true)) == 3),                            #2<br/>    ((indexed(.\u00a0% 2 == 1) | count(true)) == 2),              #3<br/>    (if .[4] then .[5] and .[6] else true end),              #4<br/>    ((.[1:4] | count(false)) == 3),                          #5<br/>    ((indexed(.\u00a0% 2 == 0) | count(true)) == 4),              #6<br/>    (([.[1], .[2]] | count(true)) == 1),                     #7<br/>    (if .[6] then .[4] and .[5] else true end),              #8<br/>    ((.[0:6] | count(true)) == 3),                           #9<br/>    (.[10] and .[11]),                                      #10<br/>    ((.[6:9] | count(true)) == 1),                          #11<br/>    ((.[0:11] | count(true)) == 4)                          #12<br/>  ];<br/>\u00a0<br/># The following query generates the solution to the problem:<br/># generate(12) | . as $vector | if evaluate == $vector then $vector else empty end<br/>\u00a0<br/># Running \"task\" as defined next would generate <br/># both the general solution as well as the off-by-one solutions:<br/>\u00a0<br/>def task:<br/>\u00a0<br/>  # count agreements<br/>  def agreed(x;y): reduce range(0;x|length) as $i (0; if x[$i] == y[$i] then .+1 else . end);<br/>\u00a0<br/>  reduce generate(12) as $vector<br/>    ([]; ($vector | evaluate) as $e<br/>         | agreed($vector; $e) as $agreed<br/>         | if $agreed == 12 then [[12,$vector]] + .<br/>           elif $agreed == 11 then . +  [[11, $vector]]<br/>           else .<br/>           end);<br/>\u00a0<br/># Since the solutions have been given elsewhere, we simply count the<br/># number of exact and off-by-one solutions:<br/>\u00a0<br/>task | length</pre>"}, {"lang": "Julia", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function showflaggedbits{T&lt;:BitArray{1}}(a::T, f::T)<br/>    tf = map(x-&gt;x\u00a0? \"T\"\u00a0: \"F\", a)<br/>    flg = map(x-&gt;x\u00a0? \"*\"\u00a0: \" \", f)<br/>    join(tf .* flg, \" \")<br/>end<br/>\u00a0<br/>const props = [s -&gt; length(s) == 12,<br/>               s -&gt; sum(s[7:12]) == 3,<br/>               s -&gt; sum(s[2:2:end]) == 2,<br/>               s -&gt;\u00a0!s[5] || (s[6] &amp; s[7]),<br/>               s -&gt;\u00a0!any(s[2:4]),<br/>               s -&gt; sum(s[1:2:end]) == 4,<br/>               s -&gt; s[2] $ s[3],<br/>               s -&gt;\u00a0!s[7] || (s[5] &amp; s[6]),<br/>               s -&gt; sum(s[1:6]) == 3,<br/>               s -&gt; s[11] &amp; s[12],<br/>               s -&gt; sum(s[7:9]) == 1,<br/>               s -&gt; sum(s[1:end-1]) == 4]<br/>\u00a0<br/>const NDIG = length(props)<br/>NDIG &lt; WORD_SIZE || println(\"WARNING, too many propositions!\")<br/>\u00a0<br/>mhist = zeros(Int, NDIG+1)<br/>\u00a0<br/>println(\"Checking the \", NDIG, \" statements against all possibilities.\\n\")<br/>print(\" \"^15)<br/>for i in 1:NDIG<br/>    print(@sprintf \"%3d\" i)<br/>end<br/>println()<br/>\u00a0<br/>for i in 0:(2^NDIG-1)<br/>    s = bitpack(digits(i, 2, NDIG))<br/>    t = bitpack([p(s) for p in props])<br/>    misses = s$t<br/>    mcnt = sum(misses)<br/>    mhist[NDIG-mcnt+1] += 1<br/>    mcnt &lt; 2 || mcnt == NDIG || continue<br/>    if mcnt == 0<br/>        print(\"    Exact Match: \")<br/>    elseif mcnt == NDIG<br/>        print(\"     Total Miss: \")<br/>    else<br/>        print(\"      Near Miss: \")<br/>    end<br/>    println(showflaggedbits(t, misses))<br/>end<br/>\u00a0<br/>println()<br/>println(\"Distribution of matches\")<br/>println(\" Matches  Cases\")<br/>for i in (NDIG+1):-1:1<br/>    println(@sprintf \"   \u00a0%2d =&gt;\u00a0%4d\" i-1 mhist[i])<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Predicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>String<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Boolean<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> predicates <span class=\"sy0\">=</span> listOf<span class=\"sy0\">&lt;</span>Predicate<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span> <br/>    <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">13</span> <span class=\"br0\">}</span>,  <span class=\"co1\">// indexing starts at 0 but first bit ignored</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">12</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> || <span class=\"br0\">(</span>it<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">&amp;&amp;</span> it<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>, <br/>    <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> it<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>  <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> it<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span>it<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> xor <span class=\"br0\">(</span>it<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> || <span class=\"br0\">(</span>it<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">&amp;&amp;</span> it<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">&amp;&amp;</span> it<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> it<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>fun show<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, indent<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>indent<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"    \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in s.<span class=\"me1\">indices</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Exact hits:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4095</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">13</span>, <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>predicates.<span class=\"me1\">all</span> <span class=\"br0\">{</span> it<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>j++<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> show<span class=\"br0\">(</span>s, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Near misses:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4095</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">13</span>, <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>predicates.<span class=\"me1\">count</span> <span class=\"br0\">{</span> it<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>j++<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> iof <span class=\"sy0\">=</span> predicates.<span class=\"me1\">indexOfFirst</span> <span class=\"br0\">{</span> it<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>k++<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> + <span class=\"nu0\">1</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"    (Fails at statement ${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(iof)})  \"</span><span class=\"br0\">)</span><br/>            show<span class=\"br0\">(</span>s, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">Print[\"Answer:\\n\", <a class=\"__cf_email__\" data-cfemail=\"44072b2831292a040725372137\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[#, {s_, 0}\u00a0:&gt; s], \"\\nNear misses:\\n\", <br/>   <a class=\"__cf_email__\" data-cfemail=\"a0e3cfccd5cdcee0e3c1d3c5d3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[#, {s_, 1}\u00a0:&gt; s]] &amp;[{#, <br/>    Count[Boole /@ {<a class=\"__cf_email__\" data-cfemail=\"773b121910031f37\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># == 12, <a class=\"__cf_email__\" data-cfemail=\"bbefd4cfdad7fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[7\u00a0;;]] == 3, <br/>        <a class=\"__cf_email__\" data-cfemail=\"81d5eef5e0edc1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[2\u00a0;; 12\u00a0;; 2]] == 2, #[[5]] (#[[6]] + #[[7]] - 2) == <br/>         0, <a class=\"__cf_email__\" data-cfemail=\"85d1eaf1e4e9c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[2\u00a0;; 4]] == 0, <br/>        <a class=\"__cf_email__\" data-cfemail=\"590d362d383519\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[1\u00a0;; 11\u00a0;; 2]] == 4, #[[2]] + #[[3]] == <br/>         1, #[[7]] (#[[5]] + #[[6]] - 2) == 0, <br/>        <a class=\"__cf_email__\" data-cfemail=\"46122932272a06\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[;; 6]] == 3, #[[11]] + #[[12]] == 2, <br/>        <a class=\"__cf_email__\" data-cfemail=\"7f2b100b1e133f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[7\u00a0;; 9]] == 1, <a class=\"__cf_email__\" data-cfemail=\"e7b38893868ba7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#[[;; 11]] == 4} - #, <br/>     Except[0]]} &amp; /@ Tuples[{1, 0}, 12]]</pre>"}, {"lang": "Pascal", "loc": 132, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">PROGRAM</span> TwelveStatements<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{<br/>  This program searches through the 4095 possible sets<br/>  of 12 statements for any which may be self-consistent.<br/>}</span><br/>\u00a0<br/><span class=\"kw1\">CONST</span><br/>    max12b <span class=\"sy3\">=</span> <span class=\"nu0\">4095</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ Largest 12 byte number. }</span><br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>    statnum <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">12</span><span class=\"sy1\">;</span>  <span class=\"coMULTI\">{ statement numbers }</span><br/>    statset <span class=\"sy3\">=</span> <span class=\"kw4\">set</span> <span class=\"kw1\">of</span> statnum<span class=\"sy1\">;</span> <span class=\"coMULTI\">{ sets of statements }</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span> <span class=\"coMULTI\">{ global variables for use in main algorithm }</span><br/>    trialNumber<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    trialSet<span class=\"sy1\">,</span> testResults<span class=\"sy1\">:</span> statset<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Convert<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> statset<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{<br/>  Converts an integer into a set of statements.<br/>  For each \"1\" in the last 12 bits of<br/>  the integer's binary representation,<br/>  a statement number is put into the set.<br/>}</span><br/><span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> statnum<span class=\"sy1\">;</span><br/>    s<span class=\"sy1\">:</span> statset<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ Empty set. }</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">12</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s <span class=\"sy3\">+</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Convert <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Express<span class=\"br0\">(</span>truths<span class=\"sy1\">:</span> statset<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{<br/>  Writes the statement number of each \"truth\",<br/>  with at least one space in front,<br/>  all on one line.<br/>}</span><br/><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span> statnum<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">12</span> <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">if</span> n <span class=\"kw1\">in</span> truths <span class=\"kw1\">then</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>n<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Count<span class=\"br0\">(</span>truths<span class=\"sy1\">:</span> statset<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{ Counts the statement numbers in the set. }</span><br/><span class=\"kw1\">var</span><br/>    s<span class=\"sy1\">:</span> statnum<span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">12</span> <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> s <span class=\"kw1\">in</span> truths <span class=\"kw1\">then</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    Count <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Test<span class=\"br0\">(</span>truths<span class=\"sy1\">:</span> statset<span class=\"br0\">)</span><span class=\"sy1\">:</span> statset<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{<br/>  Starts with a set of supposedly true statements<br/>  and checks which of the 12 statements can actually<br/>  be confirmed about the set itself.<br/>}</span><br/><span class=\"kw1\">var</span><br/>    evens<span class=\"sy1\">,</span> odds<span class=\"sy1\">,</span> confirmations<span class=\"sy1\">:</span> statset<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    evens <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    odds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 1 is necessarily true. }</span><br/>    confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 2 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">*</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 3 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">*</span> evens<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 4 is true if 6 and 7 are true, or if 5 is false. }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span> &lt;<span class=\"sy3\">=</span> truths<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"kw1\">in</span> truths<span class=\"br0\">)</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 5 }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> &lt;<span class=\"sy3\">=</span> truths<br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 6 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">*</span> odds<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 7 }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">in</span> truths<span class=\"br0\">)</span> <span class=\"kw1\">xor</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">in</span> truths<span class=\"br0\">)</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 8 is true if 5 and 6 are true, or if 7 is false. }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> &lt;<span class=\"sy3\">=</span> truths<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"kw1\">in</span> truths<span class=\"br0\">)</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 9 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">*</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 10 }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span> &lt;<span class=\"sy3\">=</span> truths<br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 11 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">*</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Statement 12 }</span><br/>    <span class=\"kw1\">if</span> Count<span class=\"br0\">(</span>truths <span class=\"sy3\">-</span> <span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><br/>     <span class=\"kw1\">then</span> confirmations <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations <span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    Test <span class=\"sy1\">:</span><span class=\"sy3\">=</span> confirmations<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span>  <span class=\"coMULTI\">{ Main algorithm. }</span><br/>    <span class=\"kw1\">for</span> trialNumber <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> max12b <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        trialSet <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Convert<span class=\"br0\">(</span>trialNumber<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        testResults <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Test<span class=\"br0\">(</span>trialSet<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> testResults <span class=\"sy3\">=</span> trialSet <span class=\"kw1\">then</span> Express<span class=\"br0\">(</span>trialSet<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Done. Press ENTER.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">readln</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 29, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'sum'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@condition</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co1\"># dummy sub for index 0</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">13</span><span class=\"sy0\">==</span><span class=\"co5\">@_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"sy0\">!</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"sy0\">!</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">==</span>sum <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> miss <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$condition</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">12</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@truth</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"0%012b\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> <span class=\"sy0\">=</span> miss <span class=\"re0\">@truth</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Solution: true statements are \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$truth</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"1 miss (\"</span><span class=\"sy0\">,</span><span class=\"re0\">$no</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"): true statements are \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$truth</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 35, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>\u2192<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$protasis</span><span class=\"sy0\">,</span> <span class=\"re0\">$apodosis</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"re0\">$protasis</span> <span class=\"kw1\">or</span> <span class=\"re0\">$apodosis</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@tests</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">end</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span> <span class=\"kw1\">and</span> <span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"sy0\">,</span> <span class=\"kw1\">False</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">...</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> \u2192 <span class=\"kw3\">all</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"kw3\">none</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">...</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"kw3\">one</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> \u2192 <span class=\"kw3\">all</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"kw3\">all</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"kw3\">one</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@solutions</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@misses</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"sy0\">,</span> <span class=\"kw1\">False</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">12</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@assert</span> <span class=\"sy0\">=</span> Nil<span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@result</span> <span class=\"sy0\">=</span> Nil<span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">@tests</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">?.</span><span class=\"br0\">(</span><span class=\"re0\">@assert</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@true</span> <span class=\"sy0\">=</span> <span class=\"re0\">@assert</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">?*,</span> <span class=\"sy0\">:</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@cons</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">@assert</span> <span class=\"kw1\">Z</span><span class=\"sy0\">===</span> <span class=\"re0\">@result</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">!*,</span> <span class=\"sy0\">:</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">given</span> <span class=\"re0\">@cons</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@solutions</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;{@true}&gt; is consistent.\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@misses</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;{@true}&gt; implies { \"</span>\u00ac<span class=\"st0\">\" if\u00a0<a class=\"__cf_email__\" data-cfemail=\"022342706771776e76\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[~$_] }$_.\"</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@solutions</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Near misses:\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@misses</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 27, "block": "<pre class=\"text highlighted_source\">string s    -- (eg \"101101100010\")<br/>integer t   -- scratch<br/>\u00a0<br/>function s1() return length(s)=12 end function<br/>function s2() t=0 for i=7 to 12 do t+=s[i]='1' end for return t=3 end function<br/>function s3() t=0 for i=2 to 12 by 2 do t+=s[i]='1' end for return t=2 end function<br/>function s4() return s[5]='0' or (s[6]='1' and s[7]='1') end function<br/>function s5() return s[2]='0' and s[3]='0' and s[4]='0' end function<br/>function s6() t=0 for i=1 to 12 by 2 do t+=s[i]='1' end for return t=4 end function<br/>function s7() return s[2]!=s[3] end function<br/>function s8() return s[7]='0' or (s[5]='1' and s[6]='1') end function<br/>function s9() t=0 for i=1 to 6 do t+=s[i]='1' end for return t=3 end function<br/>function s10() return s[11]='1' and s[12]='1' end function<br/>function s11() t=0 for i=7 to 9 do t+=s[i]='1' end for return t=1 end function<br/>function s12() t=0 for i=1 to 11 do t+=s[i]='1' end for return t=4 end function<br/>\u00a0<br/>sequence r = repeat(0,12)<br/>for b=1 to 12 do<br/>    r[b] = routine_id(sprintf(\"s%d\",b))<br/>end for<br/>for i=0 to power(2,12)-1 do<br/>    s = sprintf(\"%012b\",i)<br/>    for b=1 to 12 do<br/>        if call_func(r[b],{})!=(s[b]='1') then exit end if<br/>        if b=12 then\u00a0?s end if<br/>    end for<br/>end for</pre>"}, {"lang": "Prolog", "loc": 52, "block": "<pre class=\"prolog highlighted_source\">puzzle <span class=\"sy1\">:-</span><br/>        <span class=\"co1\">% 1. This is a numbered list of twelve statements.</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span> A2<span class=\"sy4\">,</span> A3<span class=\"sy4\">,</span> A4<span class=\"sy4\">,</span> A5<span class=\"sy4\">,</span> A6<span class=\"sy4\">,</span> A7<span class=\"sy4\">,</span> A8<span class=\"sy4\">,</span> A9<span class=\"sy4\">,</span> A10<span class=\"sy4\">,</span> A11<span class=\"sy4\">,</span> A12<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tL ins <span class=\"nu0\">0</span><span class=\"sy4\">..</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\telement<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% 2.  Exactly 3 of the last 6 statements are true.</span><br/>\tA2 #<span class=\"sy6\">&lt;==&gt;</span>  A7 <span class=\"sy3\">+</span> A8 <span class=\"sy3\">+</span> A9 <span class=\"sy3\">+</span> A10 <span class=\"sy3\">+</span> A11 <span class=\"sy3\">+</span> A12 #<span class=\"sy6\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% 3.  Exactly 2 of the even-numbered statements are true.</span><br/>\tA3 #<span class=\"sy6\">&lt;==&gt;</span> A2 <span class=\"sy3\">+</span> A4 <span class=\"sy3\">+</span> A6 <span class=\"sy3\">+</span> A8 <span class=\"sy3\">+</span> A10 <span class=\"sy3\">+</span> A12 #<span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% 4.  If statement 5 is true, then statements 6 and 7 are both true.</span><br/>\tA4 #<span class=\"sy6\">&lt;==&gt;</span> <span class=\"br0\">(</span>A5 #<span class=\"sy6\">==&gt;</span> <span class=\"br0\">(</span>A6 #<span class=\"sy3\">/</span>\\ A7<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% 5.  The 3 preceding statements are all false.</span><br/>\tA5 #<span class=\"sy6\">&lt;==&gt;</span> A2 <span class=\"sy3\">+</span> A3 <span class=\"sy3\">+</span> A4 #<span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% 6.  Exactly 4 of the odd-numbered statements are true.</span><br/>\tA6 #<span class=\"sy6\">==&gt;</span> A1 <span class=\"sy3\">+</span> A3 <span class=\"sy3\">+</span> A5 <span class=\"sy3\">+</span> A7 <span class=\"sy3\">+</span> A9 <span class=\"sy3\">+</span> A11 #<span class=\"sy6\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% 7.  Either statement 2 or 3 is true, but not both.</span><br/>\tA7 #<span class=\"sy6\">&lt;==&gt;</span> A2 <span class=\"sy3\">+</span> A3 #<span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% 8.  If statement 7 is true, then 5 and 6 are both true.</span><br/>\tA8 #<span class=\"sy6\">&lt;==&gt;</span> <span class=\"br0\">(</span>A7 #<span class=\"sy6\">==&gt;</span>  A5 #<span class=\"sy3\">/</span>\\ A6<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"co1\">% 9.  Exactly 3 of the first 6 statements are true.</span><br/>\tA9 #<span class=\"sy6\">&lt;==&gt;</span> A1 <span class=\"sy3\">+</span> A2 <span class=\"sy3\">+</span> A3 <span class=\"sy3\">+</span> A4 <span class=\"sy3\">+</span> A5 <span class=\"sy3\">+</span> A6 #<span class=\"sy6\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% 10.  The next two statements are both true.</span><br/>\tA10 #<span class=\"sy6\">&lt;==&gt;</span> A11 #<span class=\"sy3\">/</span>\\ A12<span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% 11.  Exactly 1 of statements 7, 8 and 9 are true.</span><br/>\tA11 #<span class=\"sy6\">&lt;==&gt;</span> A7 <span class=\"sy3\">+</span> A8 <span class=\"sy3\">+</span> A9 #<span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% 12.  Exactly 4 of the preceding statements are true.</span><br/>\tA12 #<span class=\"sy6\">&lt;==&gt;</span> A1 <span class=\"sy3\">+</span> A2 <span class=\"sy3\">+</span> A3 <span class=\"sy3\">+</span> A4 <span class=\"sy3\">+</span> A5 <span class=\"sy3\">+</span> A6 <span class=\"sy3\">+</span> A7 <span class=\"sy3\">+</span>A8 <span class=\"sy3\">+</span> A9 <span class=\"sy3\">+</span> A10 <span class=\"sy3\">+</span> A11 #<span class=\"sy6\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tlabel<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        numlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">12</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Statements '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span><span class=\"st_h\">'are true'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>my_write<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span>_N<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 41, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/><span class=\"co1\">#from pprint import pprint as pp</span><br/>\u00a0<br/>constraintinfo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>  <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">len</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span>                 <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'This is a numbered list of twelve statements'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span>-<span class=\"nu0\">6</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>             <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 3 of the last 6 statements are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">1</span>::<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>            <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 2 of the even-numbered statements are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>&amp;st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'If statement 5 is true, then statements 6 and 7 are both true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>             <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">'The 3 preceding statements are all false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">0</span>::<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span>            <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 4 of the odd-numbered statements are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>             <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"st0\">'Either statement 2 or 3 is true, but not both'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>&amp;st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"st0\">'If statement 7 is true, then 5 and 6 are both true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span>:<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>              <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 3 of the first 6 statements are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>&amp;st<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">)</span>               <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">'The next two statements are both true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">6</span>:<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>             <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 1 of statements 7, 8 and 9 are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> st: <span class=\"kw2\">sum</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">0</span>:<span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span>            <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exactly 4 of the preceding statements are true'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"kw1\">def</span> printer<span class=\"br0\">(</span>st<span class=\"sy0\">,</span> matches<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">False</span> <span class=\"kw1\">in</span> matches:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Missed by one statement:\u00a0%i,\u00a0%s'</span>\u00a0% docs<span class=\"br0\">[</span>matches.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Full match:'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span> + <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%i:%s'</span>\u00a0% <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">'T'</span> <span class=\"kw1\">if</span> t <span class=\"kw1\">else</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> t <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>funcs<span class=\"sy0\">,</span> docs <span class=\"sy0\">=</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*constraintinfo<span class=\"br0\">)</span><br/>\u00a0<br/>full<span class=\"sy0\">,</span> partial <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> product<span class=\"br0\">(</span> *<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">]</span> * <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>:<br/>    truths <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span>func<span class=\"br0\">(</span>st<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> func <span class=\"kw1\">in</span> funcs<span class=\"br0\">]</span><br/>    matches <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s <span class=\"sy0\">==</span> t <span class=\"kw1\">for</span> s<span class=\"sy0\">,</span>t <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> truths<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    mcount <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>matches<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> mcount <span class=\"sy0\">==</span> <span class=\"nu0\">12</span>:<br/>        full.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elif</span> mcount <span class=\"sy0\">==</span> <span class=\"nu0\">11</span>:<br/>        partial.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> stm <span class=\"kw1\">in</span> full + partial:<br/>    printer<span class=\"br0\">(</span>*stm<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; A quick `amb' implementation<br/>(define failures null)<br/>(define (fail)<br/>  (if (pair? failures) ((first failures)) (error \"no more choices!\")))<br/>(define (amb/thunks choices)<br/>  (let/cc k (set! failures (cons k failures)))<br/>  (if (pair? choices)<br/>    (let ([choice (first choices)]) (set! choices (rest choices)) (choice))<br/>    (begin (set! failures (rest failures)) (fail))))<br/>(define-syntax-rule (amb E ...) (amb/thunks (list (lambda () E) ...)))<br/>(define (assert condition) (unless condition (fail)))<br/>\u00a0<br/>;; just to make things more fun<br/>(define (\u21d4 x y) (assert (eq? x y)))<br/>(require (only-in racket [and \u2227] [or \u2228] [implies \u21d2] [xor \u22bb] [not \u00ac]))<br/>(define (count xs)<br/>  (let loop ([n 0] [xs xs])<br/>    (if (null? xs) n (loop (if (car xs) (add1 n) n) (cdr xs)))))<br/>;; even more fun, make []s infix<br/>(require (only-in racket [#%app r:app]))<br/>(define-syntax (#%app stx)<br/>  (if (not (eq? #\\[ (syntax-property stx 'paren-shape)))<br/>    (syntax-case stx () [(_ x ...) #'(r:app x ...)])<br/>    (syntax-case stx ()<br/>     \u00a0;; extreme hack on next two cases, so it works for macros too.<br/>      [(_ x op y) (syntax-property #'(op x y) 'paren-shape #f)]<br/>      [(_ x op y op1 z) (free-identifier=? #'op #'op1)<br/>       (syntax-property #'(op x y z) 'paren-shape #f)])))<br/>;; might as well do more<br/>(define-syntax-rule (define-booleans all x ...)<br/>  (begin (define x (amb #t #f)) ...<br/>         (define all (list x ...))))<br/>\u00a0<br/>(define (puzzle)<br/>  (define-booleans all q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12)<br/> \u00a0;; 1.  This is a numbered list of twelve statements.<br/>  [q1 \u21d4 [12 = (length all)]]<br/> \u00a0;; 2.  Exactly 3 of the last 6 statements are true.<br/>  [q2 \u21d4 [3 = (count (take-right all 6))]]<br/> \u00a0;; 3.  Exactly 2 of the even-numbered statements are true.<br/>  [q3 \u21d4 [2 = (count (list q2 q4 q6 q8 q10 q12))]]<br/> \u00a0;; 4.  If statement 5 is true, then statements 6 and 7 are both true.<br/>  [q4 \u21d4 [q5 \u21d2 [q6 \u2227 q7]]]<br/> \u00a0;; 5.  The 3 preceding statements are all false.<br/>  [q5 \u21d4 (\u00ac [q2 \u2228 q3 \u2228 q4])]<br/> \u00a0;; 6.  Exactly 4 of the odd-numbered statements are true.<br/>  [q6 \u21d4 [4 = (count (list q1 q3 q5 q7 q9 q11))]]<br/> \u00a0;; 7.  Either statement 2 or 3 is true, but not both.<br/>  [q7 \u21d4 [q2 \u22bb q3]]<br/> \u00a0;; 8.  If statement 7 is true, then 5 and 6 are both true.<br/>  [q8 \u21d4 [q7 \u21d2 (and q5 q6)]]<br/> \u00a0;; 9.  Exactly 3 of the first 6 statements are true.<br/>  [q9 \u21d4 [3 = (count (take all 3))]]<br/> \u00a0;; 10. The next two statements are both true.<br/>  [q10 \u21d4 [q11 \u2227 q12]]<br/> \u00a0;; 11. Exactly 1 of statements 7, 8 and 9 are true.<br/>  [q11 \u21d4 [1 = (count (list q7 q8 q9))]]<br/> \u00a0;; 12. Exactly 4 of the preceding statements are true.<br/>  [q12 \u21d4 [4 = (count (drop-right all 1))]]<br/> \u00a0;; done<br/>  (for/list ([i (in-naturals 1)] [q all] #:when q) i))<br/>\u00a0<br/>(puzzle)<br/>;; -&gt; '(1 3 4 6 7 11)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves the  \"Twelve Statement Puzzle\".                                   */</span><br/>q=<span class=\"nu0\">12</span>;      @stmt=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'statement'</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*number of statements in the puzzle.  */</span><br/>m=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*[\u2193]  statement one is  TRUE  by fiat.*/</span><br/>      <span class=\"kw1\">do</span> pass=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>                           <span class=\"coMULTI\">/*find the maximum number of  \"trues\". */</span><br/>        <span class=\"kw1\">do</span> e=<span class=\"nu0\">0</span>   <span class=\"kw2\">for</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>q-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;    n = <span class=\"st0\">'1'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span> e <span class=\"br0\">)</span> <span class=\"br0\">)</span>,  q-<span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">do</span> b=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> q                      <span class=\"coMULTI\">/*define various bits in the number  Q.*/</span><br/>              @<span class=\"sy0\">.</span>b=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>n, b, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*define a particular  @  bit  (in  Q).*/</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*b*/</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>1  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>2  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>3  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">12</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>                      <span class=\"sy0\">\\</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>4  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">5</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>5  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">4</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>6  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">12</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>                      <span class=\"sy0\">\\</span>==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>7  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>8  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">7</span>,  <span class=\"nu0\">7</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span>  <span class=\"sy0\">\\</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>9  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">6</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>10 <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">11</span>,<span class=\"nu0\">12</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>11 <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">7</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>12 <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> yeses<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span>                        <span class=\"sy0\">\\</span>==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>        g=yeses<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> pass==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  m=<span class=\"kw6\">max</span><span class=\"br0\">(</span>m,g<span class=\"br0\">)</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>                    <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> g<span class=\"sy0\">\\</span>==m     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> q;             z=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>n, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> z  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span> @stmt <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, <span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"st0\">\" is \"</span>    <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'false true'</span>, <span class=\"nu0\">1</span> + z<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*tell*/</span><br/>        <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*e*/</span><br/>      <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*pass*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>yeses: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L,H,B;  #=<span class=\"nu0\">0</span>;    <span class=\"kw1\">do</span> i=L  <span class=\"kw2\">to</span> H  <span class=\"kw2\">by</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>B <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;  #=#<a class=\"__cf_email__\" data-cfemail=\"b992f9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>i;  <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> #</pre>"}, {"lang": "Ruby", "loc": 29, "block": "<pre class=\"ruby highlighted_source\">constraints = <span class=\"br0\">[</span><br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st.<span class=\"me1\">size</span> == <span class=\"nu0\">12</span> <span class=\"br0\">}</span>, <br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:last<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>\u00a0? <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">true</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">none</span>? <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:first<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> ^ st<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>\u00a0? <span class=\"br0\">(</span>st<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">true</span>  <span class=\"br0\">}</span>, <br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> st<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">6</span>..<span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">one</span>? <span class=\"br0\">}</span>,<br/>  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span> <span class=\"br0\">{</span> st<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">11</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>Result = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:truths</span>, <span class=\"re3\">:consistency</span><span class=\"br0\">)</span><br/>\u00a0<br/>results = <span class=\"br0\">[</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span>.<span class=\"me1\">repeated_permutation</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>truths<span class=\"sy0\">|</span><br/>  Result.<span class=\"me1\">new</span><span class=\"br0\">(</span>truths, constraints.<span class=\"me1\">zip</span><span class=\"br0\">(</span>truths<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>cn,truth<span class=\"sy0\">|</span> cn<span class=\"br0\">[</span>truths<span class=\"br0\">]</span> == truth <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"solution:\"</span>, <br/>  results.<span class=\"me1\">find</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> r.<span class=\"me1\">consistency</span>.<span class=\"me1\">all</span>? <span class=\"br0\">}</span>.<span class=\"me1\">truths</span>.<span class=\"me1\">to_s</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>near misses: \"</span><br/>near_misses = results.<span class=\"kw3\">select</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> r.<span class=\"me1\">consistency</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>near_misses.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"missed by statement #{r.consistency.index(false) + 1}\"</span>, r.<span class=\"me1\">truths</span>.<span class=\"me1\">to_s</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 81, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> LogicPuzzle <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check2<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">7</span> to <span class=\"nu0\">12</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check3<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> to <span class=\"nu0\">12</span> by <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check4<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> || s<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check5<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>s<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check6<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">11</span> by <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    s<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check7<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> || s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check8<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> || s<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check9<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">6</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    s<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check10<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check11<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">7</span> to <span class=\"nu0\">9</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    s<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check12<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">11</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    s<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>check2 <span class=\"sy0\">&amp;&amp;</span> check3 <span class=\"sy0\">&amp;&amp;</span> check4 <span class=\"sy0\">&amp;&amp;</span> check5 <span class=\"sy0\">&amp;&amp;</span> check6 <span class=\"sy0\">&amp;&amp;</span> check7 <span class=\"sy0\">&amp;&amp;</span> check8 <span class=\"sy0\">&amp;&amp;</span> check9 <span class=\"sy0\">&amp;&amp;</span> check10 <span class=\"sy0\">&amp;&amp;</span> check11 <span class=\"sy0\">&amp;&amp;</span> check12<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">12</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span>k + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> recurseAll<span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> check<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      s<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>      recurseAll<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      s<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>      recurseAll<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LogicPuzzle <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> LogicPuzzle<br/>  p.<span class=\"me1\">s</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>  p.<span class=\"me1\">recurseAll</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"${p.count} Solutions found.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 26, "block": "<pre class=\"ruby highlighted_source\">var conditions = <span class=\"br0\">[</span><br/>    <span class=\"br0\">{</span> <span class=\"kw2\">false</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a.<span class=\"me1\">len</span> == <span class=\"nu0\">13</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">7</span>..<span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"nu0\">12</span> <span class=\"st0\">`by`</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>\u00a0? <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">true</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span>\u00a0!a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!a<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span> <span class=\"st0\">`by`</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> == <span class=\"kw2\">true</span>^a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>\u00a0? <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">true</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>  == <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">11</span>,<span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">7</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>  == <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>func miss<span class=\"br0\">(</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span>..<span class=\"nu0\">12</span> <span class=\"sy0\">-&gt;</span> grep <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> conditions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span>args<span class=\"br0\">)</span>\u00a0!= args<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var t  = <span class=\"br0\">(</span><span class=\"st0\">\"0%012b\"</span> <span class=\"sy0\">%</span> k <span class=\"sy0\">-&gt;</span> chars.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>bit<span class=\"sy0\">|</span> bit == <span class=\"st0\">'1'</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  var no = miss<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  no.<span class=\"me1\">len</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"Solution: true statements are #{1..12-&gt;grep{t[_]}.join(' ')}\"</span><br/>  no.<span class=\"me1\">len</span> == <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"1 miss (#{no[0]}): true statements are #{1..12-&gt;grep{t[_]}.join(' ')}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 113, "block": "<pre class=\"text highlighted_source\">var statements = Array(count: 13, repeatedValue: false)<br/>statements[1] = true<br/>var count = 0<br/>\u00a0<br/>func check2() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 7; k &lt;= 12; k++) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>    return statements[2] == (count == 3)<br/>}<br/>\u00a0<br/>func check3() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 2; k &lt;= 12; k += 2) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>    return statements[3] == (count == 2)<br/>}<br/>\u00a0<br/>func check4() -&gt; Bool {<br/>    return statements[4] == (!statements[5] || statements[6] &amp;&amp; statements[7])<br/>}<br/>\u00a0<br/>func check5() -&gt; Bool {<br/>    return statements[5] == (!statements[2] &amp;&amp;\u00a0!statements[3] &amp;&amp;\u00a0!statements[4])<br/>}<br/>\u00a0<br/>func check6() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 1; k &lt;= 11; k += 2) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>    return statements[6] == (count == 4)<br/>}<br/>\u00a0<br/>func check7() -&gt; Bool {<br/>    return statements[7] == ((statements[2] || statements[3]) &amp;&amp;\u00a0!(statements[2] &amp;&amp; statements[3]))<br/>}<br/>\u00a0<br/>func check8() -&gt; Bool {<br/>    return statements[8] == (\u00a0!statements[7] || statements[5] &amp;&amp; statements[6])<br/>}<br/>\u00a0<br/>func check9() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 1; k &lt;= 6; k++) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>    return statements[9] == (count == 3)<br/>}<br/>\u00a0<br/>func check10() -&gt; Bool {<br/>    return statements[10] == (statements[11] &amp;&amp; statements[12])<br/>}<br/>\u00a0<br/>func check11() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 7; k &lt;= 9; k++) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>\u00a0<br/>    return statements[11] == (count == 1)<br/>}<br/>\u00a0<br/>func check12() -&gt; Bool {<br/>    var count = 0<br/>    for (var k = 1; k &lt;= 11; k++) {<br/>        if (statements[k]) {<br/>            count++<br/>        }<br/>    }<br/>    return statements[12] == (count == 4)<br/>}<br/>\u00a0<br/>func check() {<br/>    if (check2() &amp;&amp; check3() &amp;&amp; check4() &amp;&amp; check5() &amp;&amp; check6()<br/>        &amp;&amp; check7() &amp;&amp; check8() &amp;&amp; check9() &amp;&amp; check10() &amp;&amp; check11()<br/>        &amp;&amp; check12()) {<br/>            for (var k = 1; k &lt;= 12; k++) {<br/>                if (statements[k]) {<br/>                    print(\"\\(k) \")<br/>                }<br/>            }<br/>            println()<br/>            count++<br/>    }<br/>}<br/>\u00a0<br/>func checkAll(k:Int) {<br/>    if (k == 13) {<br/>        check()<br/>    } else {<br/>        statements[k] = false<br/>        checkAll(k + 1)<br/>        statements[k] = true<br/>        checkAll(k + 1)<br/>    }<br/>}<br/>\u00a0<br/>checkAll(2)<br/>println()<br/>println(\"\\(count) solutions found\")</pre>"}, {"lang": "Tcl", "loc": 73, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># Function to evaluate the truth of a statement</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">S</span> <span class=\"br0\">{</span>idx<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> state s<br/>    apply <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$s</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Procedure to count the number of statements which are true</span><br/><span class=\"kw1\">proc</span> S+ args <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> state state<br/>    tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lmap i <span class=\"re0\">$args</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>S<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Turn a list of expressions into a list of lambda terms</span><br/><span class=\"kw1\">proc</span> lambdas items <span class=\"br0\">{</span>lmap x <span class=\"re0\">$items</span> <span class=\"br0\">{</span><span class=\"kw2\">list</span> state <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Find the truth assignment that produces consistency. And those that are</span><br/><span class=\"co1\"># near misses too.</span><br/><span class=\"kw1\">proc</span> findTruthMatch <span class=\"br0\">{</span>statements<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$statements</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> state <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>0.<span class=\"sy0\">*</span>b <span class=\"re0\">$n</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> truths <span class=\"br0\">[</span>lmap f <span class=\"re0\">$statements</span> <span class=\"br0\">{</span>apply <span class=\"re0\">$f</span> <span class=\"br0\">[</span>lambdas <span class=\"re0\">$state</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> counteq <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lmap s <span class=\"re0\">$state</span> t <span class=\"re0\">$truths</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$s</span> == <span class=\"re0\">$t</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$counteq</span> == <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> exact <span class=\"re0\">$state</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$counteq</span> == <span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">foreach</span> s <span class=\"re0\">$state</span> t <span class=\"re0\">$truths</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">incr</span> j<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$t</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> differ <span class=\"re0\">$state</span> <span class=\"re0\">$j</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$exact</span> <span class=\"re0\">$differ</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Rendering code</span><br/><span class=\"kw1\">proc</span> renderstate state <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap s <span class=\"re0\">$state</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> i<br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"S($i)\"</span>\u00a0: <span class=\"st0\">\"<span class=\"es0\">\\u</span>00acS($i)\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>22c0\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The statements, encoded as expressions</span><br/><span class=\"kw1\">set</span> statements <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$state</span><span class=\"br0\">]</span> == <span class=\"nu0\">12</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span> == <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>S<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> S<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span> == <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>S<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= S<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>S<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> S<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> == <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>S<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> S<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">[</span>S+ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span> == <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Find the truth assignment(s) that give consistency</span><br/>lassign <span class=\"br0\">[</span>findTruthMatch <span class=\"br0\">[</span>lambdas <span class=\"re0\">$statements</span><span class=\"br0\">]</span><span class=\"br0\">]</span> exact differ<br/><span class=\"co1\"># Print the results</span><br/><span class=\"kw1\">foreach</span> state <span class=\"re0\">$exact</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"exact match<span class=\"es0\">\\t</span>[renderstate $state ]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>state j<span class=\"br0\">}</span> <span class=\"re0\">$differ</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"almost found<span class=\"es0\">\\t</span>[renderstate $state] <span class=\"es0\">\\u</span>21d2 [expr {[lindex $state $j-1]?\"</span>\\u00ac<span class=\"st0\">\":{}}]S($j)\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 36, "block": "<pre class=\"text highlighted_source\">(defmacro defconstraints (name size-name (var) . forms)<br/>  ^(progn (defvar ,size-name ,(length forms))<br/>          (defun ,name (,var)<br/>            (list ,*forms))))<br/>\u00a0<br/>(defconstraints con con-count (s)<br/>  (= (length s) con-count)\u00a0;; tautology<br/>  (= (countq t [s -6..t]) 3)<br/>  (= (countq t (mapcar (op if (evenp @1) @2) (range 1) s)) 2)<br/>  (if [s 4] (and [s 5] [s 6]) t)<br/>  (none [s 1..3])<br/>  (= (countq t (mapcar (op if (oddp @1) @2) (range 1) s)) 4)<br/>  (and (or [s 1] [s 2]) (not (and [s 1] [s 2])))<br/>  (if [s 6] (and [s 4] [s 5]) t)<br/>  (= (countq t [s 0..6]) 3)<br/>  (and [s 10] [s 11])<br/>  (= (countq t [s 6..9]) 1)<br/>  (= (countq t [s 0..con-count]) 4))<br/>\u00a0<br/>(defun true-indices (truths)<br/>  (mappend (do if @1 ^(,@2)) truths (range 1)))<br/>\u00a0<br/>(defvar results<br/>  (append-each ((truths (rperm '(nil t) con-count)))<br/>    (let* ((vals (con truths))<br/>           (consist [mapcar eq truths vals])<br/>           (wrong-count (countq nil consist))<br/>           (pos-wrong (+ 1 (or (posq nil consist) -2))))<br/>      (cond<br/>        ((zerop wrong-count)<br/>         ^((:----&gt; ,*(true-indices truths))))<br/>        ((= 1 wrong-count)<br/>         ^((:close ,*(true-indices truths) (:wrong ,pos-wrong))))))))<br/>\u00a0<br/>(each ((r results))<br/>  (put-line `@r`))</pre>"}, {"lang": "uBasic/4tH", "loc": 64, "block": "<pre class=\"text highlighted_source\">S = 12<br/>For T = 0 To (2^S)-1<br/>\u00a0<br/>  For I = 1 To 12<br/>      Push T, 2^(I-1)\u00a0: Gosub 100<br/>      @(I) = Pop() # 0<br/>  Next<br/>\u00a0<br/>  REM Test consistency:<br/>\u00a0<br/>  @(101) = @(1)  = (S = 12)<br/>  @(102) = @(2)  = ((@(7)<a class=\"__cf_email__\" data-cfemail=\"9ab1da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(8)<a class=\"__cf_email__\" data-cfemail=\"fad1ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(9)<a class=\"__cf_email__\" data-cfemail=\"e4cfa4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(10)<a class=\"__cf_email__\" data-cfemail=\"c3e883\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(11)<a class=\"__cf_email__\" data-cfemail=\"efc4af\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(12)) = 3)<br/>  @(103) = @(3)  = ((@(2)<a class=\"__cf_email__\" data-cfemail=\"3a117a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(4)<a class=\"__cf_email__\" data-cfemail=\"a58ee5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(6)<a class=\"__cf_email__\" data-cfemail=\"ddf69d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(8)<a class=\"__cf_email__\" data-cfemail=\"391279\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(10)<a class=\"__cf_email__\" data-cfemail=\"270c67\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(12)) = 2)<br/>  @(104) = @(4)  = ((@(5)=0) + (@(6) * @(7)) # 0)<br/>  @(105) = @(5)  = ((@(2)=0) * (@(3)=0) * (@(4)=0))<br/>  @(106) = @(6)  = ((@(1)<a class=\"__cf_email__\" data-cfemail=\"567d16\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(3)<a class=\"__cf_email__\" data-cfemail=\"f3d8b3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(5)<a class=\"__cf_email__\" data-cfemail=\"def59e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(7)<a class=\"__cf_email__\" data-cfemail=\"173c57\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(9)<a class=\"__cf_email__\" data-cfemail=\"311a71\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(11)) = 4)<br/>  @(107) = @(7)  = ((@(2) + @(3)) = 1)<br/>  @(108) = @(8)  = ((@(7)=0) + (@(5) * @(6)) # 0)<br/>  @(109) = @(9)  = ((@(1)<a class=\"__cf_email__\" data-cfemail=\"be95fe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(2)<a class=\"__cf_email__\" data-cfemail=\"5a711a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(3)<a class=\"__cf_email__\" data-cfemail=\"a388e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(4)<a class=\"__cf_email__\" data-cfemail=\"c3e883\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(5)<a class=\"__cf_email__\" data-cfemail=\"052e45\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(6)) = 3)<br/>  @(110) = @(10) = (@(11) * @(12))<br/>  @(111) = @(11) = ((@(7)<a class=\"__cf_email__\" data-cfemail=\"2c076c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(8)<a class=\"__cf_email__\" data-cfemail=\"d0fb90\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(9)) = 1)<br/>  @(112) = @(12) = ((@(1)<a class=\"__cf_email__\" data-cfemail=\"240f64\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(2)<a class=\"__cf_email__\" data-cfemail=\"6a412a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(3)<a class=\"__cf_email__\" data-cfemail=\"c9e289\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(4)<a class=\"__cf_email__\" data-cfemail=\"f1dab1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(5)<a class=\"__cf_email__\" data-cfemail=\"a18ae1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(6)<a class=\"__cf_email__\" data-cfemail=\"4d660d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(7)<a class=\"__cf_email__\" data-cfemail=\"e1caa1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(8)<a class=\"__cf_email__\" data-cfemail=\"8da6cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(9)<a class=\"__cf_email__\" data-cfemail=\"dff49f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(10)<a class=\"__cf_email__\" data-cfemail=\"7b503b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(11)) = 4)<br/>\u00a0<br/>  Q = 0<br/>  For I = 101 To 112<br/>      Q = Q + @(I)<br/>  Next<br/>\u00a0<br/>  If (Q = 11) Then<br/>     Print \"Near miss with statements \";<br/>     For I = 1 To 12<br/>       If @(I) Then<br/>          Print I; \" \";<br/>       Endif<br/>       If (@(I+100) = 0) Then<br/>          M = I<br/>       Endif<br/>     Next<br/>     Print \"true (failed \"\u00a0;M; \").\"<br/>  Endif<br/>\u00a0<br/>  If (Q = 12) Then<br/>     Print \"Solution! with statements \";<br/>     For I = 1 TO 12<br/>       If @(I) Then<br/>          Print I; \" \";<br/>       Endif<br/>     Next<br/>     Print \"true.\"<br/>  Endif<br/>\u00a0<br/>Next<br/>End<br/>\u00a0<br/>100 Rem a hard way to do a binary AND<br/>    q = Pop()\u00a0: p = Pop()\u00a0: Push 0<br/>\u00a0<br/>    Do While (p * q) * (Tos() = 0)<br/>       Push Pop() + (p\u00a0% 2) * (q\u00a0% 2)<br/>       p = p / 2<br/>       q = q / 2<br/>    Loop<br/>\u00a0<br/>    Return</pre>"}, {"lang": "zkl", "loc": 30, "block": "<pre class=\"text highlighted_source\">var statements; // list of 13 Bools, statements[0] is garbage to make 1 based<br/>fcn s0 { False }  // dummy for padding<br/>fcn s1 { True }<br/>fcn s2 { statements[-6,*].filter().len()==3 }<br/>fcn s3 { [2..12,2].apply(statements.get).filter().len()==2 }<br/>fcn s4 { if(statements[5]) statements[6]==statements[7]==True else True }<br/>fcn s5 { statements[2,3].filter().len()==0 }<br/>fcn s6 { [1..12,2].apply(statements.get).filter().len()==4 }<br/>fcn s7 { statements[2]!=statements[3] }<br/>fcn s8 { if(statements[7]) statements[5]==statements[6]==True else True }<br/>fcn s9 { statements[1,6].filter().len()==3 }<br/>fcn s10{ statements[11]==statements[12]==True }<br/>fcn s11{ statements[7,3].filter().len()==1 }<br/>fcn s12{ statements[1,11].filter().len()==4 }<br/>\u00a0<br/>filters:=T(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12);<br/>foreach n in ((2).pow(12)){  // 4k<br/>   // 5--&gt;\"0000000000101\"--&gt;(\"0\",\"0\"...\"1\")--&gt;(F,F,...T)<br/>   statements=\"%013.2B\".fmt(n).split(\"\").apply('==(\"1\"));<br/>   r:=filters.run(True);  // and return list of results<br/>   if(r==statements) print(\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Solution\");<br/>   else{<br/>      diff:=r.zipWith('!=,statements);<br/>      if(diff.sum(0)==1) print(\"Diff @\",diff.filter1n());<br/>   }<br/>}<br/>fcn print(msg){<br/>   (12).pump(List,'wrap(n){ statements[n] and n or Void.Skip })<br/>   .concat(\",\").println(\"\u00a0: \",vm.pasteArgs());<br/>}</pre>"}]}