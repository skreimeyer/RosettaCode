{"task": "Flipping_bits_game", "blocks": [{"lang": "Ada", "loc": 104, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Flip_Bits <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Letter <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'a' .. 'z';<br/>\u00a0<br/>   Last_Col: <span class=\"kw3\">constant</span> letter\u00a0:= Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Last_Row: <span class=\"kw3\">constant</span> Positive\u00a0:= Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Boolean_Rand <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>Boolean<span class=\"br0\">)</span>;<br/>   Gen: Boolean_Rand.<span class=\"me1\">Generator</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Matrix <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><br/>     <span class=\"br0\">(</span>Letter <span class=\"kw3\">range</span> 'a' .. <span class=\"me1\">Last_Col</span>, Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Last_Row</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Rand_Mat <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>      M: Matrix;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t    M<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0:= Boolean_Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> M;<br/>   <span class=\"kw1\">end</span> Rand_Mat;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Rand_Mat<span class=\"br0\">(</span>Start: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>      M: Matrix\u00a0:= Start;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t <span class=\"kw1\">if</span>  Boolean_Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t       M<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0:= <span class=\"kw2\">not</span> M<span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t <span class=\"kw1\">if</span>  Boolean_Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t       M<span class=\"br0\">(</span>J,I<span class=\"br0\">)</span>\u00a0:= <span class=\"kw2\">not</span> M<span class=\"br0\">(</span>J, I<span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> M;<br/>   <span class=\"kw1\">end</span> Rand_Mat;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Message: String; Mat: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> NIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span><span class=\"br0\">(</span>Natural<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Message<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> Ch <span class=\"kw3\">in</span> Matrix'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> &amp; Ch<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Matrix'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t NIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>I, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">for</span> Ch <span class=\"kw3\">in</span> Matrix'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t    Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> Mat<span class=\"br0\">(</span>Ch, I<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" 1\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" 0\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   Current, Target: Matrix;<br/>   Moves: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- choose random Target and start (\"Current\") matrices</span><br/>   Boolean_Rand.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>   Target\u00a0:= Rand_Mat;<br/>   <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Rand_Mat<span class=\"br0\">(</span>Target<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Current /= Target;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Print<span class=\"br0\">(</span><span class=\"st0\">\"Target:\"</span>, Target<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- print and modify Current matrix, until it is identical to Target</span><br/>   <span class=\"kw1\">while</span> Current /= Target <span class=\"kw1\">loop</span><br/>     Moves\u00a0:= Moves + <span class=\"nu0\">1</span>;<br/>     Print<span class=\"br0\">(</span><span class=\"st0\">\"Current move #\"</span> &amp; Natural'Image<span class=\"br0\">(</span>Moves<span class=\"br0\">)</span>, Current<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Flip row 1 ..\"</span> &amp; Positive'Image<span class=\"br0\">(</span>Last_Row<span class=\"br0\">)</span> &amp;<br/>\t\t\t     <span class=\"st0\">\" or column 'a' .. '\"</span> &amp; Last_Col &amp; <span class=\"st0\">\"'\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">declare</span><br/>\t S: String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span>;<br/>\t <span class=\"kw3\">function</span> Let<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Character <span class=\"kw1\">is</span> <span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw3\">function</span> Val<span class=\"br0\">(</span>Str: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Positive'Value<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw1\">if</span> Let<span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"kw3\">in</span> 'a' .. <span class=\"me1\">Last_Col</span> <span class=\"kw1\">then</span><br/>\t    <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Current'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t       Current<span class=\"br0\">(</span>Let<span class=\"br0\">(</span>S<span class=\"br0\">)</span>, I<span class=\"br0\">)</span>\u00a0:= <span class=\"kw2\">not</span> Current<span class=\"br0\">(</span>Let<span class=\"br0\">(</span>S<span class=\"br0\">)</span>, I<span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">else</span> <br/>\t    <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Current'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t       Current<span class=\"br0\">(</span>I, Val<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= <span class=\"kw2\">not</span> Current<span class=\"br0\">(</span>I, Val<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- summarize the outcome</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Done after\"</span> &amp; Natural'Image<span class=\"br0\">(</span>Moves<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" Moves.\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Flip_Bits;</pre>"}, {"lang": "AutoHotkey", "loc": 83, "block": "<pre class=\"ahk highlighted_source\">size <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span> <span class=\"co1\">; max 26</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> O<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> x <span class=\"sy0\">=</span> A<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> y<span class=\"sy0\">+</span><span class=\"nu0\">4</span> gFlip<span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> ym gFlip<span class=\"sy0\">,</span>\u00a0% x<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t<span class=\"br0\">{</span><br/>\t\ty <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%x%</span><span class=\"re0\">%y%</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> v<span class=\"re0\">%x%</span><span class=\"re0\">%y%</span> ReadOnly<span class=\"sy0\">,</span>\u00a0% <span class=\"re0\">%x%</span><span class=\"re0\">%y%</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> ym<span class=\"sy0\">,</span> Moves:`<span class=\"re2\">nTarget:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t<span class=\"br0\">{</span><br/>\t\ty <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span>\u00a0% y<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0? x<span class=\"sy0\">=</span><span class=\"st0\">\"A\"</span>\u00a0? <span class=\"st0\">\"xp+0 ym+30\"</span>\u00a0: <span class=\"st0\">\"x+14 ym+30\"</span>\u00a0: <span class=\"st0\">\"\"</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"ReadOnly vt\"</span> x y<span class=\"sy0\">,</span>\u00a0% t<span class=\"re0\">%x%</span><span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> <span class=\"re0\">%x%</span><span class=\"re0\">%y%</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> xp<span class=\"sy0\">-</span><span class=\"nu0\">18</span> ym w30 <span class=\"kw6\">Right</span> vMoves<span class=\"sy0\">,</span>\u00a0% Moves<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">; randomize</span><br/><span class=\"kw1\">While</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> z<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\tz <span class=\"sy0\">:=</span> x\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">(</span>z<span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span>\u00a0: z<br/>\tSolution <span class=\"sy0\">.=</span> z <span class=\"co1\">; to cheat</span><br/>\t<span class=\"kw1\">If</span> Flip<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">; ensure we are not at the solution</span><br/>\t<span class=\"kw1\">Else</span><br/>\t\ti<span class=\"sy0\">++</span> <span class=\"co1\">; count</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> NA<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>Flip<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">If</span> z is alpha<br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> <span class=\"re0\">%z%</span><span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span>\u00a0% <span class=\"re0\">%z%</span><span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span>\u00a0!<span class=\"re0\">%z%</span><span class=\"re0\">%A_Index%</span><br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tAIndex <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> <span class=\"re0\">%AIndex%</span><span class=\"re0\">%z%</span><span class=\"sy0\">,</span>\u00a0% <span class=\"re0\">%AIndex%</span><span class=\"re0\">%z%</span> <span class=\"sy0\">:=</span>\u00a0!<span class=\"re0\">%AIndex%</span><span class=\"re0\">%z%</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t<span class=\"br0\">{</span><br/>\t\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%size%</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\ty <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%x%</span><span class=\"re0\">%y%</span>\u00a0!<span class=\"sy0\">=</span> t<span class=\"re0\">%x%</span><span class=\"re0\">%y%</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">Flip:<br/></span>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Moves<span class=\"sy0\">,</span>\u00a0% Moves<span class=\"sy0\">++</span><br/>\t<span class=\"kw1\">If</span> Flip<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_GuiControl\"><span class=\"kw2\">A_GuiControl</span></a><span class=\"sy0\">,</span> size<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> Success in <span class=\"re0\">%Moves%</span> moves!<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">Reload</span></a><br/>\t<span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">ButtonO:<br/></span>\t<a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">Reload</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape\"><span class=\"kw7\">GuiEscape</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "C", "loc": 117, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fliprow<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tb<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>b<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> flipcol<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> initt<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> initb<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tfliprow<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>sz<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tflipcol<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printb<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> eq<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sz<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sz<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sz <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> eql <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> mov <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">**</span>t <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>sz<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tt<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>sz<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">**</span>b <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>sz<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sz<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>sz<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> roc<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\tinitt<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tinitb<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>eq<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tinitb<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>eql<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Target: <span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintb<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Board: <span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintb<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"What to flip: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>roc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>roc<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'r'</span><span class=\"sy0\">:</span><br/>\t\t\t\tfliprow<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'c'</span><span class=\"sy0\">:</span><br/>\t\t\t\tflipcol<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Please specify r or c and an number\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Moves Taken:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>mov<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>eq<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"You win!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\teql <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 94, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> byte<span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> flip<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    flip<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> field <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> target <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> play<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span> wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> hei <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span> createField<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> gameLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> gameLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> moves <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>solved<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    display<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> string r<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter rows letters and/or column numbers: \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> r<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> string<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> r.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> r.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tbyte ii <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> ii <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> ii <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'9'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> flipCol<span class=\"br0\">(</span> ii <span class=\"sy2\">-</span> <span class=\"st0\">'1'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> moves<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> ii <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> ii <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> flipRow<span class=\"br0\">(</span> ii <span class=\"sy2\">-</span> <span class=\"st0\">'a'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> moves<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"** Well done! **\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Used \"</span> <span class=\"sy1\">&lt;&lt;</span> moves <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" moves.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> output<span class=\"br0\">(</span> <span class=\"st0\">\"TARGET:\"</span>, target <span class=\"br0\">)</span><span class=\"sy4\">;</span> output<span class=\"br0\">(</span> <span class=\"st0\">\"YOU:\"</span>, field <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> output<span class=\"br0\">(</span> string t, byte<span class=\"sy2\">*</span> f <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> t <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> x <span class=\"sy2\">+</span> <span class=\"st0\">'1'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> y <span class=\"sy2\">+</span> <span class=\"st0\">'a'</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> f<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"nu0\">48</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> solved<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> target<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> field<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> createTarget<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> frnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu17\">.5f</span> <span class=\"br0\">)</span> target<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t        <span class=\"kw1\">else</span> target<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">memcpy</span><span class=\"br0\">(</span> field, target, wid <span class=\"sy2\">*</span> hei <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> flipCol<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> field<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> x <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">!</span>field<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> x <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> flipRow<span class=\"br0\">(</span> <span class=\"kw4\">int</span> r <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> field<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> r <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">!</span>field<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> r <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> calcStartPos<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> flips <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> wid <span class=\"sy2\">+</span> wid <span class=\"sy2\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> hei <span class=\"sy2\">+</span> hei <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> flips<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> frnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu17\">.5f</span> <span class=\"br0\">)</span> flipCol<span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> wid <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> flipRow<span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> hei <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> createField<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> field <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> field<span class=\"sy4\">;</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> target<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">int</span> t <span class=\"sy1\">=</span> wid <span class=\"sy2\">*</span> hei<span class=\"sy4\">;</span> field <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> byte<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy4\">;</span> target <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> byte<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">memset</span><span class=\"br0\">(</span> field, <span class=\"nu0\">0</span>, t <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> target, <span class=\"nu0\">0</span>, t <span class=\"br0\">)</span><span class=\"sy4\">;</span> createTarget<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> calcStartPos<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>solved<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">float</span> frnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw2\">RAND_MAX</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    byte<span class=\"sy2\">*</span> field, <span class=\"sy2\">*</span>target<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> wid, hei<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> flip g<span class=\"sy4\">;</span> g.<span class=\"me1\">play</span><span class=\"br0\">(</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 65, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cols <span class=\"br0\">[</span>board<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>mapv <span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">map</span> list board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flipv <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>mapv #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">%</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flip<span class=\"sy0\">-</span>row <span class=\"br0\">[</span>board n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> board n <span class=\"br0\">(</span>flipv <span class=\"br0\">(</span>get board n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flip<span class=\"sy0\">-</span>col <span class=\"br0\">[</span>board n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>cols <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>row <span class=\"br0\">(</span>cols board<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> play<span class=\"sy0\">-</span>rand <span class=\"br0\">[</span>board n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    board<br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> flip<span class=\"sy0\">-</span>row flip<span class=\"sy0\">-</span>col<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>f board <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"br0\">(</span><span class=\"kw1\">count</span> board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rand<span class=\"sy0\">-</span>binary<span class=\"sy0\">-</span><span class=\"kw1\">vec</span> <span class=\"br0\">[</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> size <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> #<span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rand<span class=\"sy0\">-</span>binary<span class=\"sy0\">-</span>board <span class=\"br0\">[</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> size <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> #<span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>binary<span class=\"sy0\">-</span><span class=\"kw1\">vec</span> size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> numbers<span class=\"sy0\">-&gt;</span>letters <span class=\"br0\">[</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>char <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">97</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> coll<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> column<span class=\"sy0\">-</span>labels <span class=\"br0\">[</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span>numbers<span class=\"sy0\">-&gt;</span>letters <span class=\"br0\">(</span><span class=\"kw1\">range</span> size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> print<span class=\"sy0\">-</span>board <span class=\"br0\">[</span>board<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>size <span class=\"br0\">(</span><span class=\"kw1\">count</span> board<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"st0\">\"<span class=\"es0\">\\t</span> \"</span> <span class=\"br0\">(</span>column<span class=\"sy0\">-</span>labels size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">[</span>n size<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"br0\">(</span>board n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> key<span class=\"sy0\">-&gt;</span>move <span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>start <span class=\"br0\">(</span>int <span class=\"br0\">(</span><span class=\"kw1\">first</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        row<span class=\"sy0\">-</span>value <span class=\"br0\">(</span><span class=\"kw1\">try</span> <span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>valueOf key<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">catch</span> NumberFormatException e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">97</span> start <span class=\"nu0\">122</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>:<span class=\"me1\">col</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> start <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">65</span> start <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>:<span class=\"me1\">col</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> start <span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> row<span class=\"sy0\">-</span>value <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>:<span class=\"me1\">row</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> row<span class=\"sy0\">-</span>value<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     \u00a0:<span class=\"me1\">else</span> nil<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> play<span class=\"sy0\">-</span>game <span class=\"br0\">[</span>target<span class=\"sy0\">-</span>board current<span class=\"sy0\">-</span>board n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"<span class=\"es0\">\\n</span>Turn \"</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print<span class=\"sy0\">-</span>board current<span class=\"sy0\">-</span>board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> target<span class=\"sy0\">-</span>board current<span class=\"sy0\">-</span>board<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"st0\">\"You win!\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>move <span class=\"br0\">(</span>key<span class=\"sy0\">-&gt;</span>move <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          axis <span class=\"br0\">(</span><span class=\"kw1\">first</span> move<span class=\"br0\">)</span><br/>          idx <span class=\"br0\">(</span>second move<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">=</span> axis\u00a0:<span class=\"me1\">row</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game target<span class=\"sy0\">-</span>board <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>row current<span class=\"sy0\">-</span>board idx<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">=</span> axis\u00a0:<span class=\"me1\">col</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game target<span class=\"sy0\">-</span>board <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>col current<span class=\"sy0\">-</span>board idx<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u00a0:<span class=\"me1\">else</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"Quitting!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">-</span>main<br/>  <span class=\"st0\">\"Flip the Bits Game!\"</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if-not</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>target<span class=\"sy0\">-</span>board <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>binary<span class=\"sy0\">-</span>board <span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>valueOf <span class=\"br0\">(</span><span class=\"kw1\">first</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>println <span class=\"st0\">\"Target\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>print<span class=\"sy0\">-</span>board target<span class=\"sy0\">-</span>board<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game target<span class=\"sy0\">-</span>board <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>rand target<span class=\"sy0\">-</span>board <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 70, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"co1\">// Board side.</span><br/><span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>N <span class=\"sy0\">&lt;=</span> lowercase.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> columnIDs <span class=\"sy0\">=</span> lowercase<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">N</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> Board <span class=\"sy0\">=</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> flipBits<span class=\"br0\">(</span><span class=\"kw2\">ref</span> Board board<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> count<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">count</span><span class=\"br0\">)</span><br/>        board<span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> notRow<span class=\"br0\">(</span><span class=\"kw2\">ref</span> Board board<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> i<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    board<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> notColumn<span class=\"br0\">(</span><span class=\"kw2\">ref</span> Board board<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> i<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span><br/>        row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Board generateGameBoard<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> Board target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// board is generated with many flips, to keep parity unchanged.</span><br/>    Board board <span class=\"sy0\">=</span> target<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>board <span class=\"sy0\">==</span> target<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> N<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span>notRow<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>notColumn<span class=\"br0\">]</span><span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">(</span>board<span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> board<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> Board board<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> comment<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    comment.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"    \u00a0%-(%c\u00a0%)\"</span><span class=\"sy0\">,</span> columnIDs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%2d\u00a0%-(%d\u00a0%)\"</span><span class=\"sy0\">,</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"T prints the target, and Q exits.<span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Create target and flip some of its bits randomly.</span><br/>    Board target<span class=\"sy0\">;</span><br/>    flipBits<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> N<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    show<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <span class=\"st0\">\"Target configuration is:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> board <span class=\"sy0\">=</span> generateGameBoard<span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> prompt <span class=\"sy0\">=</span> format<span class=\"br0\">(</span><span class=\"st0\">\"  1-%d /\u00a0%s-%s to flip, or T, Q: \"</span><span class=\"sy0\">,</span><br/>                              N<span class=\"sy0\">,</span> columnIDs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> columnIDs.<span class=\"me1\">back</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> move <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>board <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        show<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> format<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Move\u00a0%d:\"</span><span class=\"sy0\">,</span> move<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        prompt.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> ans <span class=\"sy0\">=</span> readln.<span class=\"me1\">strip</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ans.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> columnIDs.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board.<span class=\"me1\">notColumn</span><span class=\"br0\">(</span>columnIDs.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            move<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>text.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board.<span class=\"me1\">notRow</span><span class=\"br0\">(</span>ans.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">uint</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            move<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ans <span class=\"sy0\">==</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            show<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <span class=\"st0\">\"Target configuration is:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ans <span class=\"sy0\">==</span> <span class=\"st0\">\"Q\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"Game stopped.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"  Wrong input '%s'. Try again.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ans.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"st0\">\"<span class=\"es1\">\\n</span>Well done!\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 67, "block": "<pre class=\"text highlighted_source\">defmodule Flip_game do<br/>  @az  Enum.map(?a..?z, &amp;List.to_string([&amp;1]))<br/>  @in2i Enum.concat(Enum.map(1..26, fn i -&gt; {to_string(i), i} end),<br/>                    Enum.with_index(@az) |&gt; Enum.map(fn {c,i} -&gt; {c,-i-1} end))<br/>        |&gt; Enum.into(Map.new)<br/>\u00a0<br/>  def play(n) when n&gt;2 do<br/>    target = generate_target(n)<br/>    display(n, \"Target: \", target)<br/>    board = starting_config(n, target)<br/>    play(n, target, board, 1)<br/>  end<br/>\u00a0<br/>  def play(n, target, board, moves) do<br/>    display(n, \"Board: \", board)<br/>    ans = IO.gets(\"row/column to flip: \") |&gt; String.strip |&gt; String.downcase<br/>    new_board = case @in2i[ans] do<br/>                  i when i in 1..n   -&gt; flip_row(n, board, i)<br/>                  i when i in -1..-n -&gt; flip_column(n, board, -i)<br/>                  _ -&gt; IO.puts \"invalid input: #{ans}\"<br/>                       board<br/>                end<br/>    if target == new_board do<br/>      display(n, \"Board: \", new_board)<br/>      IO.puts \"You solved the game in #{moves} moves\"<br/>    else<br/>      IO.puts \"\"<br/>      play(n, target, new_board, moves+1)<br/>    end<br/>  end<br/>\u00a0<br/>  defp generate_target(n) do<br/>    for i &lt;- 1..n, j &lt;- 1..n, into: Map.new, do: {{i, j},\u00a0:rand.uniform(2)-1}<br/>  end<br/>\u00a0<br/>  defp starting_config(n, target) do<br/>    Enum.concat(1..n, -1..-n)<br/>    |&gt; Enum.take_random(n)<br/>    |&gt; Enum.reduce(target, fn x,acc -&gt;<br/>         if x&gt;0, do: flip_row(n, acc, x),<br/>               else: flip_column(n, acc, -x)<br/>       end)<br/>  end<br/>\u00a0<br/>  defp flip_row(n, board, row) do<br/>    Enum.reduce(1..n, board, fn col,acc -&gt;<br/>      Map.update!(acc, {row,col}, fn bit -&gt; 1 - bit end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp flip_column(n, board, col) do<br/>    Enum.reduce(1..n, board, fn row,acc -&gt;<br/>      Map.update!(acc, {row,col}, fn bit -&gt; 1 - bit end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp display(n, title, board) do<br/>    IO.puts title<br/>    IO.puts \"   #{Enum.join(Enum.take(@az,n), \" \")}\"<br/>    Enum.each(1..n, fn row -&gt;<br/>     \u00a0:io.fwrite \"~2w \", [row]<br/>      IO.puts Enum.map_join(1..n, \" \", fn col -&gt; board[{row, col}] end)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Flip_game.play(3)</pre>"}, {"lang": "Fortran", "loc": 199, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!Implemented by Anant Dixit (October 2014)</span><br/><span class=\"kw1\">program</span> flipping_bits<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"co1\">character(len=*), parameter\u00a0:: cfmt = \"(A3)\", ifmt = \"(I3)\"</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">N</span>, i, j, io, seed<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, moves, input<br/><span class=\"kw3\">logical</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">Brd</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, Trgt<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">solved</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Enter the number of squares (between 1 and 10) you would like: '</span><br/>  read<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>io<span class=\"br0\">)</span> N<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>N.<span class=\"me1\">gt</span>.0 <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> N.<span class=\"me1\">le</span>.10 <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> io.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Please, an integer between 1 and 10'</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">allocate</span><span class=\"br0\">(</span>Brd<span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>,Trgt<span class=\"br0\">(</span>N,N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">call date_and_time(values=seed)</span><br/><span class=\"co1\">call srand(1000*seed(7)+seed(8)+60000*seed(6))</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>  <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>    r <span class=\"sy0\">=</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>r.<span class=\"me1\">gt</span>.0.5D0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Brd<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/>      Trgt<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/>    <span class=\"kw1\">else</span><br/>      Brd<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>      Trgt<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"co1\">! Random moves taken by the program to `create' a target</span><br/>moves <span class=\"sy0\">=</span> N<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,moves<br/>  r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>2.0D0<span class=\"sy0\">*</span><span class=\"kw4\">dble</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> 1.0D<span class=\"sy0\">-</span><span class=\"nu0\">17</span> <span class=\"co1\">!Only to make sure that the number is between 1 and 2N (less than 2N-1)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">le</span>.<span class=\"me1\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>      Trgt<span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>,j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">else</span><br/>    r <span class=\"sy0\">=</span> r<span class=\"sy0\">-</span>N<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>      Trgt<span class=\"br0\">(</span>j,<span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span>j,<span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">!This part checks if the target and the starting configurations are same or not.</span><br/><span class=\"kw1\">do</span><br/>  input <span class=\"sy0\">=</span> N<br/>  <span class=\"kw1\">call</span> next_move<span class=\"br0\">(</span>Brd,Trgt,N,input,solved<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> next_move<span class=\"br0\">(</span>Brd,Trgt,N,input,solved<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>2.0D0<span class=\"sy0\">*</span><span class=\"kw4\">dble</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> 1.0D<span class=\"sy0\">-</span><span class=\"nu0\">17</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">le</span>.<span class=\"me1\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>        Trgt<span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>,j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">else</span><br/>      r <span class=\"sy0\">=</span> r<span class=\"sy0\">-</span>N<br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>        Trgt<span class=\"br0\">(</span>j,<span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span>j,<span class=\"kw4\">floor</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Welcome to the Flipping Bits game!'</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'You have the current position'</span><br/>\u00a0<br/>moves <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co1\">call display(Brd,Trgt,N)</span><br/>input <span class=\"sy0\">=</span> N<br/><span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Number of moves so far:'</span>, moves<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Select the column or row you wish to flip: '</span><br/>  read<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>io<span class=\"br0\">)</span> input<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>io.<span class=\"me1\">eq</span>.0 <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> input.<span class=\"me1\">gt</span>.0 <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> input.<span class=\"me1\">le</span>.<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    moves <span class=\"sy0\">=</span> moves<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Flipping '</span>, input<br/>    <span class=\"kw1\">call</span> next_move<span class=\"br0\">(</span>Brd,Trgt,N,input,solved<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> display<span class=\"br0\">(</span>Brd,Trgt,N<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Please enter a valid column or row number. To quit, press Ctrl+C!'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Congratulations! You finished the game!'</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> moves<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">' moves were taken by you!!'</span><br/><span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>Brd,Trgt<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> display<span class=\"br0\">(</span>Brd,Trgt,N<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"co1\">!arguments</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">N</span><br/><span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">Brd</span><span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>, Trgt<span class=\"br0\">(</span>N,N<span class=\"br0\">)</span><br/><span class=\"co1\">!local</span><br/><span class=\"co1\">character(len=*), parameter\u00a0:: cfmt = \"(A3)\", ifmt = \"(I3)\"</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Current Configuration: '</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'R/C'</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">' | '</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'---'</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> i<span class=\"sy0\">+</span>N<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">' | '</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>Brd<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Target Configuration'</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'R/C'</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">' | '</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'---'</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> i<span class=\"sy0\">+</span>N<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,cfmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">' | '</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>Trgt<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,ifmt,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> next_move<span class=\"br0\">(</span>Brd,Trgt,N,input,solved<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"co1\">!arguments</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">N</span>, input<br/><span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">Brd</span><span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>, Trgt<span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>, solved<br/><span class=\"co1\">!others</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,j<br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>input.<span class=\"me1\">gt</span>.<span class=\"me1\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  input <span class=\"sy0\">=</span> input<span class=\"sy0\">-</span>N<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>    Brd<span class=\"br0\">(</span>input,i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">not</span>.<span class=\"me1\">Brd</span><span class=\"br0\">(</span>input,i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>    Brd<span class=\"br0\">(</span>i,input<span class=\"br0\">)</span> <span class=\"sy0\">=</span> .<span class=\"kw4\">not</span>.<span class=\"me1\">Brd</span><span class=\"br0\">(</span>i,input<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>solved <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>  <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>.<span class=\"kw4\">not</span>.<span class=\"me1\">Brd</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>.<span class=\"me1\">and</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span>Brd<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">and</span>.</span>.<span class=\"kw4\">not</span>.<span class=\"me1\">Trgt</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      solved <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>.<span class=\"kw4\">not</span>.<span class=\"me1\">solved</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 122, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math/rand\"</span><br/>\t<span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\u00a0<br/>\trand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> n <span class=\"kw4\">int</span> <span class=\"sy2\">=</span> <span class=\"nu0\">3</span> <span class=\"co1\">// Change to define board size</span><br/>\t<span class=\"kw1\">var</span> moves <span class=\"kw4\">int</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\ta <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>\t\ta<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>\t\t\ta<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>    b <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>\t\tb<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]))</span><br/>\t\t<span class=\"kw3\">copy</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">100</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> compareSlices<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\tb <span class=\"sy2\">=</span> flipCol<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\tb <span class=\"sy2\">=</span> flipRow<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Target:\"</span><span class=\"sy1\">)</span><br/>\tdrawBoard<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Board:\"</span><span class=\"sy1\">)</span><br/>\tdrawBoard<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> rc rune<br/>\t<span class=\"kw1\">var</span> num <span class=\"kw4\">int</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Flip row (r) or column (c)  1 ..\u00a0%d (c1, ...): \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t\t\t_<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Scanf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c%d\"</span><span class=\"sy1\">,</span> &amp;rc<span class=\"sy1\">,</span> &amp;num<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> num &lt; <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> num &gt; n <span class=\"sy1\">{</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Wrong command!\"</span><span class=\"sy1\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span> rc <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'c'</span><span class=\"sy1\">:</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Column\u00a0%v will be flipped<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> num<span class=\"sy1\">)</span><br/>\t\t\t\tflipCol<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> num<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'r'</span><span class=\"sy1\">:</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Row\u00a0%v will be flipped<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> num<span class=\"sy1\">)</span><br/>\t\t\t\tflipRow<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> num<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Wrong command!\"</span><span class=\"sy1\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t\tmoves<span class=\"sy2\">++</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Moves taken: \"</span><span class=\"sy1\">,</span> moves<span class=\"sy1\">)</span><br/>\u00a0<br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Target:\"</span><span class=\"sy1\">)</span><br/>\t\tdrawBoard<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Board:\"</span><span class=\"sy1\">)</span><br/>\t\tdrawBoard<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> compareSlices<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Finished. You win with\u00a0%d moves!<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> moves<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> drawBoard <span class=\"sy1\">(</span>m <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"   \"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span>\t<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> val <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> flipRow<span class=\"sy1\">(</span>m <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> row <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>row<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">^=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> flipCol<span class=\"sy1\">(</span>m <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> col <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span>col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">^=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> compareSlices<span class=\"sy1\">(</span>m <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\to <span class=\"sy2\">:=</span> <span class=\"kw2\">true</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">{</span> o <span class=\"sy2\">=</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> o <br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 115, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intersperse<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRIO<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array <span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">//</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> array<span class=\"sy0\">,</span> bounds<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>zipWithM<span class=\"sy0\">_,</span> replicateM<span class=\"sy0\">,</span> foldM<span class=\"sy0\">,</span> when<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Board <span class=\"sy0\">=</span> Array <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>\u00a0<br/>flp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>flp <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>flp <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>numRows<span class=\"sy0\">,</span> numCols <span class=\"sy0\">::</span> Board <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>numRows t <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds t<br/>  <span class=\"kw1\">in</span> <span class=\"br0\">[</span>a <span class=\"sy0\">..</span> b<span class=\"br0\">]</span><br/>\u00a0<br/>numCols t <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">_,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds t<br/>  <span class=\"kw1\">in</span> <span class=\"br0\">[</span>a <span class=\"sy0\">..</span> b<span class=\"br0\">]</span><br/>\u00a0<br/>flipRow<span class=\"sy0\">,</span> flipCol <span class=\"sy0\">::</span> Board <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> Board<br/>flipRow t r <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> e <span class=\"sy0\">=</span><br/>        <span class=\"br0\">[</span> <span class=\"br0\">(</span>ix<span class=\"sy0\">,</span> flp <span class=\"br0\">(</span>t <span class=\"sy0\">!</span> ix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> ix <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> r<span class=\"br0\">)</span> <span class=\"br0\">(</span>numCols t<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">in</span> t <span class=\"sy0\">//</span> e<br/>\u00a0<br/>flipCol t c <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> e <span class=\"sy0\">=</span><br/>        <span class=\"br0\">[</span> <span class=\"br0\">(</span>ix<span class=\"sy0\">,</span> flp <span class=\"br0\">(</span>t <span class=\"sy0\">!</span> ix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> ix <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span>numRows t<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> c<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">in</span> t <span class=\"sy0\">//</span> e<br/>\u00a0<br/>printBoard <span class=\"sy0\">::</span> Board <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printBoard t <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> rows <span class=\"sy0\">=</span> numRows t<br/>      cols <span class=\"sy0\">=</span> numCols t<br/>      f <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><br/>      f <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><br/>      p r xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">[</span>r<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span> intersperse <span class=\"st0\">' '</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> f xs<span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">++</span> intersperse <span class=\"st0\">' '</span> cols<br/>  zipWithM<span class=\"sy0\">_</span><br/>    p<br/>    rows<br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> t <span class=\"sy0\">!</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> cols <span class=\"br0\">]</span><br/>    <span class=\"sy0\">|</span> y <span class=\"sy0\">&lt;-</span> rows <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- create a random goal board, and flip rows and columns randomly</span><br/><span class=\"co1\">-- to get a starting board</span><br/>setupGame <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>Board<span class=\"sy0\">,</span> Board<span class=\"br0\">)</span><br/>setupGame sizey sizex<br/>                <span class=\"co1\">-- random cell value at (row, col)</span><br/> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> mk rc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\\v <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>rc<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      rows <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span> sizey<span class=\"br0\">]</span><br/>      cols <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'1'</span> <span class=\"sy0\">..</span> sizex<span class=\"br0\">]</span><br/>  goal <span class=\"sy0\">&lt;-</span><br/>    array <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>sizey<span class=\"sy0\">,</span> sizex<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a><br/>      mk<br/>      <span class=\"br0\">[</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> r <span class=\"sy0\">&lt;-</span> rows <br/>      <span class=\"sy0\">,</span> c <span class=\"sy0\">&lt;-</span> cols <span class=\"br0\">]</span><br/>  start <span class=\"sy0\">&lt;-</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">let</span> change <span class=\"sy0\">::</span> Board <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> Board<br/>           <span class=\"co1\">-- flip random row</span><br/>           change t <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> flipRow t <span class=\"sy0\">&lt;$&gt;</span> randomRIO <span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> sizey<span class=\"br0\">)</span><br/>           <span class=\"co1\">-- flip random col</span><br/>           change t <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> flipCol t <span class=\"sy0\">&lt;$&gt;</span> randomRIO <span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> sizex<span class=\"br0\">)</span><br/>       numMoves <span class=\"sy0\">&lt;-</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"co1\">-- how many flips (3 - 15)</span><br/>       <span class=\"co1\">-- determine if rows or cols are flipped</span><br/>       moves <span class=\"sy0\">&lt;-</span> replicateM numMoves <span class=\"sy0\">$</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"co1\">-- make changes and get a starting board</span><br/>       foldM change goal moves<br/>  <span class=\"kw1\">if</span> goal <span class=\"sy0\">/=</span> start <span class=\"co1\">-- check if boards are different</span><br/>    <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>goal<span class=\"sy0\">,</span> start<span class=\"br0\">)</span> <span class=\"co1\">-- all ok, return both boards</span><br/>    <span class=\"kw1\">else</span> setupGame sizey sizex <span class=\"co1\">-- try again</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Select a board size (1 - 9).<span class=\"es0\">\\n</span>Press any other key to exit.\"</span><br/>  sizec <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getChar\"><span class=\"kw3\">getChar</span></a><br/>  when <span class=\"br0\">(</span>sizec `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"br0\">[</span><span class=\"st0\">'1'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'9'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">let</span> size <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"br0\">[</span>sizec<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"br0\">(</span>g<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> setupGame <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">!!</span> size<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'1'</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">!!</span> size<span class=\"br0\">)</span><br/>       turns g s <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">where</span><br/>    turns goal current moves <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Goal:\"</span><br/>      printBoard goal<br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Board:\"</span><br/>      printBoard current<br/>      when <span class=\"br0\">(</span>moves <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>You've made \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> moves <span class=\"sy0\">++</span> <span class=\"st0\">\" moves so far.\"</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span>Flip a row (\"</span> <span class=\"sy0\">++</span><br/>        numRows current <span class=\"sy0\">++</span> <span class=\"st0\">\") or a column (\"</span> <span class=\"sy0\">++</span> numCols current <span class=\"sy0\">++</span> <span class=\"st0\">\")\"</span><br/>      v <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getChar\"><span class=\"kw3\">getChar</span></a><br/>      <span class=\"kw1\">if</span> v `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` numRows current<br/>        <span class=\"kw1\">then</span> check <span class=\"sy0\">$</span> flipRow current v<br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> v `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` numCols current<br/>               <span class=\"kw1\">then</span> check <span class=\"sy0\">$</span> flipCol current v<br/>               <span class=\"kw1\">else</span> tryAgain<br/>      <span class=\"kw1\">where</span><br/>        check t <span class=\"sy0\">=</span><br/>          <span class=\"kw1\">if</span> t <span class=\"sy0\">==</span> goal<br/>            <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>You've won in \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>moves <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" moves!\"</span><br/>            <span class=\"kw1\">else</span> turns goal t <span class=\"br0\">(</span>moves <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        tryAgain <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\": Invalid row or column.\"</span><br/>          turns goal current moves</pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">start=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  Moves=:<span class=\"nu0\">0</span><br/>  N=:i.<span class=\"kw2\">y</span><br/>  Board=:\u00a0?<span class=\"nu0\">2</span>$~,~<span class=\"kw2\">y</span><br/>  <span class=\"st_h\">'fr fc'</span>=. <span class=\"sy0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw2\">y</span><span class=\"sy0\">)</span>$}.#:<span class=\"sy0\">(</span>+?&amp;.&lt;:@&lt;:<span class=\"sy0\">)</span><span class=\"nu0\">2x</span>^<span class=\"nu0\">2</span>*<span class=\"kw2\">y</span><br/>  End=: fr~:fc~:\"<span class=\"nu0\">1</span> Board<br/>  Board;End<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>abc=:<span class=\"st_h\">'abcdefghij'</span><br/>move=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  fc=. N e.abc i. <span class=\"kw2\">y</span> <span class=\"sy0\">(</span>[-.-.<span class=\"sy0\">)</span>abc<br/>  fr=. N e.<span class=\"nu0\">_</span>-.~<span class=\"nu0\">_</span> \".\"<span class=\"nu0\">0</span> abc-.~\":<span class=\"kw2\">y</span><br/>  Board=: fr~:fc~:\"<span class=\"nu0\">1</span> Board<br/>  smoutput <span class=\"sy0\">(</span>\":Moves=:Moves++/fr,fc<span class=\"sy0\">)</span>,<span class=\"st_h\">' moves'</span><br/>  <span class=\"kw1\">if.</span> Board-:End <span class=\"kw1\">do.</span><br/>    <span class=\"st_h\">'yes'</span><br/>  <span class=\"kw1\">else.</span><br/>    Board;End<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 155, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FlippingBitsGame <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> maxLevel <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> minLevel <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid, target<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arectangle+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Rectangle</span></a> box<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> maxLevel<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> solved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    FlippingBitsGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setFont<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">PLAIN</span>, <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        box <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arectangle+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Rectangle</span></a><span class=\"br0\">(</span><span class=\"nu0\">120</span>, <span class=\"nu0\">90</span>, <span class=\"nu0\">400</span>, <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        startNewGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        addMouseListener<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseadapter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseAdapter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> mousePressed<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseEvent</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    startNewGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> e.<span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> e.<span class=\"me1\">getY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>box.<span class=\"me1\">contains</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> box.<span class=\"me1\">x</span> <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> box.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> box.<span class=\"me1\">width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        flipCol<span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">-</span> box.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>box.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> box.<span class=\"me1\">y</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&lt;</span> box.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> box.<span class=\"me1\">height</span><span class=\"br0\">)</span><br/>                        flipRow<span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"sy0\">-</span> box.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>box.<span class=\"me1\">height</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solved<span class=\"br0\">(</span>grid, target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        solved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    printGrid<span class=\"br0\">(</span>solved <span class=\"sy0\">?</span> <span class=\"st0\">\"Solved!\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"The board\"</span>, grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> startNewGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> maxLevel<span class=\"br0\">)</span> <span class=\"sy0\">?</span> minLevel <span class=\"sy0\">:</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            target <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    target<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>solved<span class=\"br0\">(</span>grid, target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            solved <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            printGrid<span class=\"br0\">(</span><span class=\"st0\">\"The target\"</span>, target<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            printGrid<span class=\"br0\">(</span><span class=\"st0\">\"The board\"</span>, grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> printGrid<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> msg, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> g<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> solved<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rand.<span class=\"me1\">nextBoolean</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                flipRow<span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                flipCol<span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> flipRow<span class=\"br0\">(</span><span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> flipCol<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            row<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawGrid<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>getForeground<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"Solved! Click here to play again.\"</span>, <span class=\"nu0\">180</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"Click next to a row or a column to flip.\"</span>, <span class=\"nu0\">170</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> box.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">blue</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">orange</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>box.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> size, box.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> size, size, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>getBackground<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">drawRect</span><span class=\"br0\">(</span>box.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> size, box.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> size, size, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>target<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">blue</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">orange</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"sy0\">+</span> box.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> size, <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> box.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> size, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Flipping Bits Game\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> FlippingBitsGame<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 96, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> numOfRows<span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> board.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> numOfCols<span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> boardToString<span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// First the top-header</span><br/>    <span class=\"kw1\">var</span> header <span class=\"sy0\">=</span> <span class=\"st0\">'   '</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> numOfCols<span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        header <span class=\"sy0\">+=</span> c <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Then the side-header + board</span><br/>    <span class=\"kw1\">var</span> sideboard <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> numOfRows<span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sideboard.<span class=\"me1\">push</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> <span class=\"st0\">' ['</span> <span class=\"sy0\">+</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">']'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> header <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> sideboard.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> flipRow<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> numOfCols<span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> flipCol<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> col<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> numOfRows<span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> playFlippingBitsGame<span class=\"br0\">(</span>rows<span class=\"sy0\">,</span> cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    rows <span class=\"sy0\">=</span> rows <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    cols <span class=\"sy0\">=</span> cols <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> targetBoard <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> manipulatedBoard <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Randomly generate two identical boards.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        targetBoard.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        manipulatedBoard.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> cols<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            targetBoard<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            manipulatedBoard<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>targetBoard<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// Naive-scramble one of the boards.</span><br/>    while <span class=\"br0\">(</span>boardToString<span class=\"br0\">(</span>targetBoard<span class=\"br0\">)</span> <span class=\"sy0\">==</span> boardToString<span class=\"br0\">(</span>manipulatedBoard<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> scrambles <span class=\"sy0\">=</span> rows <span class=\"sy0\">*</span> cols<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>scrambles<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                flipRow<span class=\"br0\">(</span>manipulatedBoard<span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> rows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                flipCol<span class=\"br0\">(</span>manipulatedBoard<span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// Get the user to solve.</span><br/>    alert<span class=\"br0\">(</span><br/>        <span class=\"st0\">'Try to match both boards.<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>        <span class=\"st0\">'Enter `r&lt;num&gt;` or `c&lt;num&gt;` to manipulate a row or col or enter `q` to quit.'</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> input <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> letter<span class=\"sy0\">,</span> num<span class=\"sy0\">,</span> moves <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>boardToString<span class=\"br0\">(</span>targetBoard<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> boardToString<span class=\"br0\">(</span>manipulatedBoard<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> input <span class=\"sy0\">!=</span> <span class=\"st0\">'q'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        input <span class=\"sy0\">=</span> prompt<span class=\"br0\">(</span><br/>            <span class=\"st0\">'Target:<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> boardToString<span class=\"br0\">(</span>targetBoard<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            <span class=\"st0\">'Board:<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> boardToString<span class=\"br0\">(</span>manipulatedBoard<span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            letter <span class=\"sy0\">=</span> input.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            num <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>input.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isNaN<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>                <span class=\"sy0\">||</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">!=</span> <span class=\"st0\">'r'</span> <span class=\"sy0\">&amp;&amp;</span> letter <span class=\"sy0\">!=</span> <span class=\"st0\">'c'</span><span class=\"br0\">)</span><br/>                <span class=\"sy0\">||</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">==</span> <span class=\"st0\">'r'</span> <span class=\"sy0\">&amp;&amp;</span> num <span class=\"sy0\">&gt;=</span> rows<span class=\"br0\">)</span><br/>                <span class=\"sy0\">||</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">==</span> <span class=\"st0\">'c'</span> <span class=\"sy0\">&amp;&amp;</span> num <span class=\"sy0\">&gt;=</span> cols<span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> Error<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">==</span> <span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                flipRow<span class=\"br0\">(</span>manipulatedBoard<span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                flipCol<span class=\"br0\">(</span>manipulatedBoard<span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            moves<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">catch</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            alert<span class=\"br0\">(</span><span class=\"st0\">'Uh-oh, there seems to have been an input error'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        alert<span class=\"br0\">(</span><span class=\"st0\">'~~ Thanks for playing ~~'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        alert<span class=\"br0\">(</span><span class=\"st0\">'Completed in '</span> <span class=\"sy0\">+</span> moves <span class=\"sy0\">+</span> <span class=\"st0\">' moves.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 97, "block": "<pre class=\"text highlighted_source\">module FlippingBitsGame<br/>\u00a0<br/>using Compat<br/>using Compat.Printf<br/>using Compat.Random<br/>\u00a0<br/>struct Configuration<br/>    M::BitMatrix<br/>end<br/>\u00a0<br/>Base.size(c::Configuration) = size(c.M)<br/>function Base.show(io::IO, conf::Configuration)<br/>    M = conf.M<br/>    nrow, ncol = size(M)<br/>    print(io, \" \" ^ 3)<br/>    for c in 1:ncol<br/>        @printf(io, \"%3i\", c)<br/>    end<br/>    println(io, \"\\n\", \" \" ^ 4, \"-\" ^ 3ncol)<br/>    for r in 1:nrow<br/>        @printf(io, \"%2i |\", r)<br/>        for c in 1:ncol<br/>            @printf(io, \"%2c \", ifelse(M[r, c], 'T', 'F'))<br/>        end<br/>        println(io)<br/>    end<br/>    return nothing<br/>end<br/>Base.:(==)(a::Configuration, b::Configuration) = a.M == b.M<br/>\u00a0<br/>struct Index{D}<br/>    i::Int<br/>end<br/>const ColIndex = Index{:C}<br/>const RowIndex = Index{:R}<br/>\u00a0<br/>function Base.flipbits!(conf::Configuration, c::ColIndex)<br/>    col = @view conf.M[:, c.i]<br/>    @. col =\u00a0!col<br/>    return conf<br/>end<br/>function Base.flipbits!(conf::Configuration, r::RowIndex)<br/>    row = @view conf.M[r.i,\u00a0:]<br/>    @. row =\u00a0!row<br/>    return conf<br/>end<br/>\u00a0<br/>randomconfig(nrow::Integer, ncol::Integer) = Configuration(bitrand(nrow, ncol))<br/>function randommoves!(conf::Configuration, nflips::Integer)<br/>    nrow, ncol = size(conf)<br/>    for _ in Base.OneTo(nflips)<br/>        if rand() &lt; 0.5<br/>            flipbits!(conf, ColIndex(rand(1:ncol)))<br/>        else<br/>            flipbits!(conf, RowIndex(rand(1:nrow)))<br/>        end<br/>    end<br/>    return conf<br/>end<br/>\u00a0<br/>function play()<br/>    nrow::Int, ncol::Int = 0, 0<br/>    while nrow &lt; 2 || ncol &lt; 2<br/>        print(\"Insert the size of the matrix (nrow [&gt; 1] *space* ncol [&gt; 1]):\")<br/>        nrow, ncol = parse.(Int, split(readline()))<br/>    end<br/>    mat = randomconfig(nrow, ncol)<br/>    obj = deepcopy(mat)<br/>    randommoves!(obj, 100)<br/>    nflips = 0<br/>    while mat\u00a0!= obj<br/>        println(\"\\n\", nflips, \" flips until now.\")<br/>        println(\"Current configuration:\")<br/>        println(mat)<br/>        println(\"Objective configuration:\")<br/>        println(obj)<br/>        print(\"Insert R[ind] to flip row, C[ind] to flip a column, Q to quit: \")<br/>        line  = readline()<br/>        input = match(r\"([qrc])(\\d+)\"i, line)<br/>        if input \u2262 nothing &amp;&amp; all(input.captures .\u2262 nothing)<br/>            dim = Symbol(uppercase(input.captures[1]))<br/>            ind = Index{dim}(parse(Int, input.captures[2]))<br/>            flipbits!(mat, ind)<br/>            nflips += 1<br/>        elseif occursin(\"q\", line)<br/>            println(\"\\nSEE YOU SOON!\")<br/>            return<br/>        else<br/>            println(\"\\nINPUT NOT VALID, RETRY!\\n\")<br/>        end<br/>    end<br/>    println(\"\\nSUCCED! In \", nflips, \" flips.\")<br/>    println(mat)<br/>    return<br/>end<br/>\u00a0<br/>end  # module FlippingBitsGame</pre>"}, {"lang": "Kotlin", "loc": 92, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> target <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> board  <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun flipRow<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun flipCol<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** starting from the target we make 9 random row or column flips */</span><br/>fun initBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> board<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> target<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    repeat<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rc <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rc <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            flipRow<span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            flipCol<span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printBoard<span class=\"br0\">(</span>label<span class=\"sy0\">:</span> String, isTarget<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isTarget<span class=\"br0\">)</span> target <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> board<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$label:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"  | a b c\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"---------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${r + 1} |\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\" ${a[r][c]}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun gameOver<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> target<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"co1\">// initialize board and ensure it differs from the target i.e. game not already over!</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        initBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>gameOver<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    printBoard<span class=\"br0\">(</span><span class=\"st0\">\"TARGET\"</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    printBoard<span class=\"br0\">(</span><span class=\"st0\">\"OPENING BOARD\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> flips <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> isRow <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"Enter row number or column letter to be flipped: \"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ch <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> input<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">'0'</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">!</span>in <span class=\"st0\">\"123abc\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"Must be 1, 2, 3, a, b or c\"</span><span class=\"br0\">)</span><br/>                continue<br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch in <span class=\"st0\">'1'</span>..<span class=\"st0\">'3'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                n <span class=\"sy0\">=</span> ch.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">49</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                isRow <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>                n <span class=\"sy0\">=</span> ch.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">97</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        flips++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isRow<span class=\"br0\">)</span> flipRow<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> flipCol<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> plural <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>flips <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"S\"</span><br/>        printBoard<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>BOARD AFTER $flips FLIP$plural\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>gameOver<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> plural <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>flips <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"s\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"You've succeeded in $flips flip$plural\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 97, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>target<span class=\"sy0\">,</span> board<span class=\"sy0\">,</span> moves<span class=\"sy0\">,</span> W<span class=\"sy0\">,</span> H <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">function</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span> <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> j <span class=\"sy0\">*</span> W <span class=\"sy0\">-</span> W <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> flip<span class=\"br0\">(</span> d<span class=\"sy0\">,</span> r <span class=\"br0\">)</span><br/>    <span class=\"kw1\">function</span> invert<span class=\"br0\">(</span> a <span class=\"br0\">)</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> idx<br/>    <span class=\"kw1\">if</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> r <span class=\"br0\">)</span><br/>            board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> invert<span class=\"br0\">(</span> board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> H <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> r<span class=\"sy0\">,</span> i <span class=\"br0\">)</span><br/>            board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> invert<span class=\"br0\">(</span> board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    moves <span class=\"sy0\">=</span> moves <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> createTarget<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    target<span class=\"sy0\">,</span> board <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> idx<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> H <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">.5</span> <span class=\"kw1\">then</span> target<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">else</span> target<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>            board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> target<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">103</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">.5</span> <span class=\"kw1\">then</span> flip<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span> H <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> flip<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span> W <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    moves <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> getUserInput<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"Input row and/or column: \"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> a<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>r <span class=\"kw1\">do</span><br/>        a <span class=\"sy0\">=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span> r<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> i <span class=\"br0\">)</span><span class=\"sy0\">:</span>lower<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">48</span> <span class=\"kw2\">and</span> a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">57</span> <span class=\"kw1\">then</span> flip<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> a <span class=\"sy0\">-</span> <span class=\"nu0\">48</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">97</span> <span class=\"kw2\">and</span> a <span class=\"sy0\">&lt;=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span> <span class=\"st0\">'z'</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> flip<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> a <span class=\"sy0\">-</span> <span class=\"nu0\">96</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> solved<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> idx<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> H <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> target<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> idx<br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>TARGET<span class=\"es1\">\\n</span>   \"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d  \"</span><span class=\"sy0\">,</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> H <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%s  \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span> <span class=\"nu0\">96</span> <span class=\"sy0\">+</span> j <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d  \"</span><span class=\"sy0\">,</span> target<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><span class=\"sy0\">;</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>BOARD<span class=\"es1\">\\n</span>   \"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d  \"</span><span class=\"sy0\">,</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> H <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%s  \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span> <span class=\"nu0\">96</span> <span class=\"sy0\">+</span> j <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> W <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d  \"</span><span class=\"sy0\">,</span> board<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><span class=\"sy0\">;</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"Moves:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> moves <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>        createTarget<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">repeat</span><br/>            display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            getUserInput<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">until</span> solved<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"Very well!<span class=\"es1\">\\n</span>Play again(Y/N)? \"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>lower<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\"y\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"coMULTI\">--[[entry point]]</span><span class=\"co1\">--</span><br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>play<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 107, "block": "<pre class=\"text highlighted_source\">FlippingBits\u00a0:= module()<br/>\texport ModuleApply;<br/>\tlocal gameSetup, flip, printGrid, checkInput;<br/>\tlocal board;<br/>\u00a0<br/>\tgameSetup\u00a0:= proc(n)<br/>\t\tlocal r, c, i, toFlip, target;<br/>\t\trandomize():<br/>\t\ttarget\u00a0:= Array( 1..n, 1..n, rand(0..1) );<br/>\t\tboard\u00a0:= copy(target);<br/>\t\tfor i to rand(3..9)() do<br/>\t\t\ttoFlip\u00a0:= [0, 0];<br/>\t\t\ttoFlip[1]\u00a0:= StringTools[Random](1, \"rc\");<br/>\t\t\ttoFlip[2]\u00a0:= convert(rand(1..n)(), string);<br/>\t\t\tflip(toFlip);<br/>\t\tend do;<br/>\t\treturn target;<br/>\tend proc;<br/>\u00a0<br/>\tflip\u00a0:= proc(line)<br/>\t\tlocal i, lineNum;<br/>\t\tlineNum\u00a0:= parse(op(line[2..-1]));<br/>\t\tfor i to upperbound(board)[1] do<br/>\t\t\tif line[1] = \"R\" then<br/>\t\t\t\tboard[lineNum, i]\u00a0:= `if`(board[lineNum, i] = 0, 1, 0);<br/>\t\t\telse<br/>\t\t\t\tboard[i, lineNum]\u00a0:= `if`(board[i, lineNum] = 0, 1, 0);<br/>\t\t\tend if;<br/>\t\tend do;<br/>\t\treturn NULL;<br/>\tend proc;<br/>\u00a0<br/>\tprintGrid\u00a0:= proc(grid)<br/>\t\tlocal r, c;<br/>\t\tfor r to upperbound(board)[1] do<br/>\t\t\tfor c to upperbound(board)[1] do<br/>\t\t\t\tprintf(\"%a \", grid[r, c]);<br/>\t\t\tend do;<br/>\t\t\tprintf(\"\\n\");<br/>\t\tend do;<br/>\t\tprintf(\"\\n\");<br/>\t\treturn NULL;<br/>\tend proc;<br/>\u00a0<br/>\tcheckInput\u00a0:= proc(input)<br/>\t\ttry<br/>\t\t\tif input[1] = \"\" then<br/>\t\t\t\treturn false, \"\";<br/>\t\t\telif not input[1] = \"R\" and not input[1] = \"C\" then<br/>\t\t\t\treturn false, \"Please start with 'r' or 'c'.\";<br/>\t\t\telif not type(parse(op(input[2..-1])), posint) then<br/>\t\t\t\terror;<br/>\t\t\telif parse(op(input[2..-1])) &lt; 1 or parse(op(input[2..-1])) &gt; upperbound(board)[1] then<br/>\t\t\t\treturn false, \"Row or column number too large or too small.\";<br/>\t\t\tend if;<br/>\t\tcatch:<br/>\t\t\treturn false, \"Please indicate a row or column number.\"<br/>\t\tend try;<br/>\t\treturn true, \"\";<br/>\tend proc;<br/>\u00a0<br/>\tModuleApply\u00a0:= proc(n)<br/>\t\tlocal gameOver, toFlip, target, answer, restart;<br/>\t\trestart\u00a0:= true;<br/>\t\twhile restart do<br/>\t\t\ttarget\u00a0:= gameSetup(n);<br/>\t\t\twhile ArrayTools[IsEqual](target, board) do<br/>\t\t\t\ttarget\u00a0:= gameSetup(n);<br/>\t\t\tend do;<br/>\t\t\tgameOver\u00a0:= false;<br/>\t\t\twhile not gameOver do<br/>\t\t\t\tprintf(\"The Target:\\n\");<br/>\t\t\t\tprintGrid(target);<br/>\t\t\t\tprintf(\"The Board:\\n\");<br/>\t\t\t\tprintGrid(board);<br/>\t\t\t\tif ArrayTools[IsEqual](target, board) then<br/>\t\t\t\t\tprintf(\"You win!! Press enter to play again or type END to quit.\\n\\n\");<br/>\t\t\t\t\tanswer\u00a0:= StringTools[UpperCase](readline());<br/>\t\t\t\t\tgameOver\u00a0:= true;<br/>\t\t\t\t\tif answer = \"END\" then<br/>\t\t\t\t\t\trestart\u00a0:= false<br/>\t\t\t\t\tend if;<br/>\t\t\t\telse<br/>\t\t\t\t\ttoFlip\u00a0:= [\"\", \"\"];<br/>\t\t\t\t\twhile not checkInput(toFlip)[1]  and not gameOver do<br/>\t\t\t\t\t\tifelse (not op(checkInput(toFlip)[2..-1]) = \"\", printf(\"%s\\n\\n\", op(checkInput(toFlip)[2..-1])), NULL);<br/>\t\t\t\t\t\tprintf(\"Please enter a row or column to flip. (ex: r1 or c2) Press enter for a new game or type END to quit.\\n\\n\");<br/>\t\t\t\t\t\tanswer\u00a0:= StringTools[UpperCase](readline());<br/>\t\t\t\t\t\tif answer = \"END\" or answer = \"\" then<br/>\t\t\t\t\t\t\tgameOver\u00a0:= true;<br/>\t\t\t\t\t\t\tif answer = \"END\" then<br/>\t\t\t\t\t\t\t\trestart\u00a0:= false;<br/>\t\t\t\t\t\t\tend if;<br/>\t\t\t\t\t\tend if;<br/>\t\t\t\t\t\ttoFlip\u00a0:= [substring(answer, 1), substring(answer, 2..-1)];<br/>\t\t\t\t\tend do;<br/>\t\t\t\t\tif not gameOver then<br/>\t\t\t\t\t\tflip(toFlip);<br/>\t\t\t\t\tend if;<br/>\t\t\t\tend if;<br/>\t\t\tend do;<br/>\t\tend do;<br/>\t\tprintf(\"Game Over!\\n\");<br/>\tend proc;<br/>end module:<br/>\u00a0<br/>FlippingBits(3);</pre>"}, {"lang": "MATLAB", "loc": 87, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> FlippingBitsGame<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"co1\">% Play the flipping bits game on an n x n array</span><br/>\u00a0<br/>    <span class=\"co1\">% Generate random target array</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Welcome to the Flipping Bits Game!\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> &lt; <span class=\"nu0\">1</span><br/>        n = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'What dimension array should we use? '</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>    Tar = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/logical.html\"><span class=\"kw2\">logical</span></a><span class=\"br0\">(</span>randi<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Generate starting array by randomly flipping rows or columns</span><br/>    Cur = Tar;<br/>    <span class=\"kw1\">while</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>Cur<span class=\"br0\">(</span>:<span class=\"br0\">)</span> == Tar<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        nFlips = randi<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>*n <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span>*n, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        randDim = randi<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>, nFlips, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        randIdx = randi<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> n<span class=\"br0\">]</span>, nFlips, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:nFlips<br/>            <span class=\"kw1\">if</span> randDim<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>                Cur<span class=\"br0\">(</span>randIdx<span class=\"br0\">(</span>k<span class=\"br0\">)</span>,\u00a0:<span class=\"br0\">)</span> = ~Cur<span class=\"br0\">(</span>randIdx<span class=\"br0\">(</span>k<span class=\"br0\">)</span>,\u00a0:<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">else</span><br/>                Cur<span class=\"br0\">(</span>:, randIdx<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> = ~Cur<span class=\"br0\">(</span>:, randIdx<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">% Print rules</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Given a\u00a0%d x\u00a0%d logical array,\\n'</span>, n, n<span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'and a target array configuration,\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'attempt to transform the array to the target\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'by inverting the bits in a whole row or column\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'at once in as few moves as possible.\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Enter the corresponding letter to invert a column,\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'or the corresponding number to invert a row.\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'0 will reprint the target array, and no entry quits.\\n\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Target:\\n'</span><span class=\"br0\">)</span><br/>    PrintArray<span class=\"br0\">(</span>Tar<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">% Play until player wins or quits</span><br/>    move = true;<br/>    nMoves = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">while</span> ~isempty<span class=\"br0\">(</span>move<span class=\"br0\">)</span> &amp;&amp; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span>Cur<span class=\"br0\">(</span>:<span class=\"br0\">)</span> ~= Tar<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Move\u00a0%d:\\n'</span>, nMoves<span class=\"br0\">)</span><br/>        PrintArray<span class=\"br0\">(</span>Cur<span class=\"br0\">)</span><br/>        move = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Enter move: '</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>move<span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Invalid move, try again\\n'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elseif</span> move<br/>            r = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2double.html\"><span class=\"kw2\">str2double</span></a><span class=\"br0\">(</span>move<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>                c = move-<span class=\"nu0\">96</span>;<br/>                <span class=\"kw1\">if</span> c &gt; n || c &lt; <span class=\"nu0\">1</span><br/>                    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Invalid move, try again\\n'</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span><br/>                    Cur<span class=\"br0\">(</span>:, c<span class=\"br0\">)</span> = ~Cur<span class=\"br0\">(</span>:, c<span class=\"br0\">)</span>;<br/>                    nMoves = nMoves+<span class=\"nu0\">1</span>;<br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">if</span> r &gt; n || r &lt; <span class=\"nu0\">0</span><br/>                    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Invalid move, try again\\n'</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">elseif</span> r == <span class=\"nu0\">0</span><br/>                    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Target:\\n'</span><span class=\"br0\">)</span><br/>                    PrintArray<span class=\"br0\">(</span>Tar<span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span><br/>                    Cur<span class=\"br0\">(</span>r,\u00a0:<span class=\"br0\">)</span> = ~Cur<span class=\"br0\">(</span>r,\u00a0:<span class=\"br0\">)</span>;<br/>                    nMoves = nMoves+<span class=\"nu0\">1</span>;<br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>Cur<span class=\"br0\">(</span>:<span class=\"br0\">)</span> == Tar<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'You win in\u00a0%d moves! Try not to flip out!\\n'</span>, nMoves<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Quitting? The challenge a bit much for you?\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> PrintArray<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>nRows, nCols<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'        '</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\u00a0%c'</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>:nCols<span class=\"br0\">)</span>+<span class=\"nu0\">96</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> r = <span class=\"nu0\">1</span>:nRows<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%8d%s\\n'</span>, r, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\u00a0%d'</span>, A<span class=\"br0\">(</span>r,\u00a0:<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "OCaml", "loc": 72, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">module</span> FlipGame <span class=\"sy0\">=</span><br/><span class=\"kw1\">struct</span><br/>  <span class=\"kw1\">type</span> t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a><br/>\u00a0<br/>  <span class=\"kw1\">let</span> make side <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix side side <span class=\"kw1\">false</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> flipcol b n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      b<span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">not</span> b<span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> fliprow b n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      b<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">not</span> b<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> randflip b <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">true</span> <span class=\"sy0\">-&gt;</span> fliprow b n<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">false</span> <span class=\"sy0\">-&gt;</span> flipcol b n<br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> game side steps <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> start, target <span class=\"sy0\">=</span> make side, make side <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> steps <span class=\"kw1\">do</span><br/>      randflip start<span class=\"sy0\">;</span><br/>      randflip target<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> start <span class=\"sy0\">=</span> target <span class=\"kw1\">then</span> game side steps <span class=\"co1\">(* try again *)</span> <span class=\"kw1\">else</span><br/>      <span class=\"br0\">(</span>start, target<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> print b <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d \"</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> b<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> draw_game board target <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"TARGET\"</span><span class=\"sy0\">;</span> print target<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"BOARD\"</span><span class=\"sy0\">;</span> print board<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> play <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">module</span> G <span class=\"sy0\">=</span> FlipGame <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> board, target <span class=\"sy0\">=</span> G<span class=\"sy0\">.</span>game <span class=\"nu0\">3</span> <span class=\"nu0\">10</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> steps <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">while</span> board <span class=\"sy0\">&lt;&gt;</span> target <span class=\"kw1\">do</span><br/>    G<span class=\"sy0\">.</span>draw_game board target<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"&gt; \"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALflush\"><span class=\"kw3\">flush</span></a> <span class=\"kw1\">stdout</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">incr</span> steps<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>split_on_char <span class=\"sy0\">'</span> <span class=\"sy0\">'</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_line\"><span class=\"kw3\">read_line</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"st0\">\"row\"</span><span class=\"sy0\">;</span> row<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">match</span> int_of_string_opt row <span class=\"kw1\">with</span><br/>       <span class=\"sy0\">|</span> Some n <span class=\"sy0\">-&gt;</span> G<span class=\"sy0\">.</span>fliprow board n<br/>       <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"(nothing happens)\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"st0\">\"col\"</span><span class=\"sy0\">;</span> col<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">match</span> int_of_string_opt col <span class=\"kw1\">with</span><br/>       <span class=\"sy0\">|</span> Some n <span class=\"sy0\">-&gt;</span> G<span class=\"sy0\">.</span>flipcol board n<br/>       <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"(nothing happens)\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  G<span class=\"sy0\">.</span>draw_game board target<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\\n\\nGame solved in\u00a0%d steps\\n\"</span> <span class=\"sy0\">!</span>steps<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"sy0\">!</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>interactive <span class=\"kw1\">then</span><br/>    <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      play <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 76, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>FATAL all<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">26</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"You can't play a size $n game<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"re0\">*$n</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@rows</span><span class=\"sy0\">,</span> <span class=\"re0\">@cols</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\x</span>00\"</span> x <span class=\"re0\">$n2</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$col</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rows</span><span class=\"sy0\">,</span> <span class=\"re0\">$row</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@cols</span><span class=\"sy0\">,</span> <span class=\"re0\">$col</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$goal</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> x <span class=\"re0\">$n2</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"re0\">$goal</span><span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">@rows</span><span class=\"sy0\">,</span> <span class=\"re0\">@cols</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$start</span> <span class=\"sy0\">^=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">redo</span> <span class=\"kw1\">if</span> <span class=\"re0\">$start</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$goal</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@letters</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"sy0\">..</span><span class=\"st_h\">'z'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> to_strings <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$board</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@result</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"  \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@letters</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$res</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span><span class=\"sy0\">,</span><span class=\"co5\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$res</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"re0\">$board</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"re0\">*$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@result</span><span class=\"sy0\">,</span> <span class=\"re0\">$res</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">\\@result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$fmt</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$stext</span><span class=\"sy0\">,</span> <span class=\"re0\">$etext</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Starting board\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ending board\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$re</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"|\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@letters</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$moves_so_far</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$from</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to_strings<span class=\"br0\">(</span><span class=\"re0\">$start</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> to_strings<span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">unless</span><span class=\"br0\">(</span> <span class=\"re0\">$fmt</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$stext</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$len</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$stext</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$fmt</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"re0\">$len</span><span class=\"sy0\">,</span> <span class=\"st0\">\"%\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"s%\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"s<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"re0\">$stext</span><span class=\"sy0\">,</span> <span class=\"re0\">$etext</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$start</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$goal</span><span class=\"sy0\">;</span><br/>\tINPUT_LOOP<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Move #%s: Type one or more row numbers and/or column letters: \"</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"re0\">$moves_so_far</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$input</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&gt;;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$input</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$did_one</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"re0\">$input</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/($re)/gi</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$did_one</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"co2\">/\\d/</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$start</span> <span class=\"sy0\">^=</span> <span class=\"re0\">$rows</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$start</span> <span class=\"sy0\">^=</span> <span class=\"re0\">$cols</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"sy0\">++</span><span class=\"re0\">$moves_so_far</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">redo</span> INPUT_LOOP <span class=\"kw1\">unless</span> <span class=\"re0\">$did_one</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"You won after $moves_so_far moves.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 54, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$square</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"{$square}? Seriously?\"</span> <span class=\"kw1\">and</span> exit <span class=\"kw1\">if</span> <span class=\"re0\">$square</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"re0\">$square</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%bits</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">%</span><span class=\"br0\">(</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st_h\">'A'</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span> <span class=\"re0\">$square</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span> <span class=\"re0\">$square</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    scramble <span class=\"re0\">%bits</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$target</span> <span class=\"sy0\">=</span> build <span class=\"re0\">%bits</span><span class=\"sy0\">;</span><br/>    scramble <span class=\"re0\">%bits</span> <span class=\"kw1\">until</span> build<span class=\"br0\">(</span><span class=\"re0\">%bits</span><span class=\"br0\">)</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$target</span><span class=\"sy0\">;</span><br/>    display<span class=\"br0\">(</span><span class=\"re0\">$target</span><span class=\"sy0\">,</span> <span class=\"re0\">%bits</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$turns</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">my</span> <span class=\"re0\">$flip</span> <span class=\"sy0\">=</span> prompt <span class=\"st0\">\"Turn {++$turns}: Flip which row / column? \"</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">flip</span> <span class=\"re0\">$flip</span><span class=\"sy0\">.</span><span class=\"kw3\">match</span><span class=\"br0\">(</span><span class=\"co2\">/\\w/</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">uc</span><span class=\"sy0\">,</span> <span class=\"re0\">%bits</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> display<span class=\"br0\">(</span><span class=\"re0\">$target</span><span class=\"sy0\">,</span> <span class=\"re0\">%bits</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"st0\">\"Hurray! You solved it in $turns turns.\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> display<span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"re0\">%hash</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    shell<span class=\"br0\">(</span><span class=\"st_h\">'clear'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Goal<span class=\"es0\">\\n</span>$goal<span class=\"es0\">\\n</span>You\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> build <span class=\"re0\">%hash</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$goal</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw3\">flip</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">%hash</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">given</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">+^</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">when</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span> <span class=\"sy0\">+^</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"re0\">%hash</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> build <span class=\"br0\">(</span><span class=\"re0\">%hash</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'   '</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$string</span> <span class=\"sy0\">~=</span> <span class=\"kw3\">sprintf</span> <span class=\"st0\">\"%2s \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"kw3\">sort</span> <span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$string</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">%hash</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"sy0\">+*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$key</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$string</span> <span class=\"sy0\">~=</span> <span class=\"kw3\">sprintf</span> <span class=\"st0\">\"%2s \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$string</span> <span class=\"sy0\">~=</span> <span class=\"kw3\">sprintf</span> <span class=\"st0\">\"%2s \"</span><span class=\"sy0\">,</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <span class=\"kw3\">sort</span> <span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$string</span> <span class=\"sy0\">~=</span>  <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$string</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> scramble<span class=\"br0\">(</span><span class=\"re0\">%hash</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">keys</span> <span class=\"sy0\">=</span> <span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span> <span class=\"kw3\">keys</span> <span class=\"re0\">%hash</span><span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">flip</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span>  <span class=\"re0\">%hash</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"kw3\">keys</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 49, "block": "<pre class=\"text highlighted_source\">(subscriptrange, stringrange, stringsize):<br/>flip: procedure options (main);<br/>   declare n fixed binary;<br/>\u00a0<br/>   put skip list ('This is the bit-flipping game.  What size of board do you want?');<br/>   get list (n);<br/>   put skip list<br/>      ('Your task is to change your board so as match the board on the right (the objective)');<br/>\u00a0<br/>   begin;<br/>      declare initial(n,n) bit (1), objective(n,n) bit (1);<br/>      declare (i, j, k, move) fixed binary;<br/>      declare ch character(1);<br/>      declare alphabet character (26) initial ('abcdefghijklmnopqrstuvwxyz');<br/>\u00a0<br/>      on subrg<br/>         begin; put skip list ('Your row or column ' || trim(ch) || ' is out of range'); stop; end;<br/>\u00a0<br/>      initial, objective = iand(random()*99, 1) = 1;<br/>\u00a0<br/>      /* Set up the objective array: */<br/>      do i = 1 to n-1;<br/>         j = random()*n+1;  objective(j,*) = ^objective(j,*);<br/>         j = random()*n+1;  objective(*,j) = ^objective(*,j);<br/>      end;<br/>\u00a0<br/>      do move = 0 by 1;<br/>         put skip edit ( center('You', n*3), center('The objective', 3*n+4) ) (x(3), a);<br/>         put skip edit ( (substr(alphabet, i, 1) do i = 1 to n) ) (x(5), (n) a(3));<br/>         put      edit ( (substr(alphabet, i, 1) do i = 1 to n) ) (x(3), (n) a(3));<br/>         do i = 1 to n;<br/>            put skip edit (i, initial(i,*), objective(i,*)) ((n+1) f(3), x(3), (n) F(3));<br/>         end;<br/>\u00a0<br/>         if all(initial = objective) then leave;<br/>\u00a0<br/>         put skip(2) list<br/>            ('Please type a row number or column letter whose bits you want to flip: ');<br/>         get edit (ch) (L); put edit (ch) (a);<br/>         k = index(alphabet, ch);<br/>         if k &gt; 0 then<br/>            initial(*, k) = ^initial(*,k); /* Flip column k */<br/>         else<br/>            initial(ch,*) = ^initial(ch,*); /* Flip row ch */<br/>      end;<br/>      put skip(2) list ('Congratulations. You solved it in ' || trim(move) || ' moves.');<br/>   end;<br/>\u00a0<br/>end flip;</pre>"}, {"lang": "Python", "loc": 85, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">\"\"\"<br/>Given a\u00a0%i by\u00a0%i sqare array of zeroes or ones in an initial<br/>configuration, and a target configuration of zeroes and ones<br/>The task is to transform one to the other in as few moves as <br/>possible by inverting whole numbered rows or whole lettered <br/>columns at once.<br/>In an inversion any 1 becomes 0 and any 0 becomes 1 for that<br/>whole row or column.<br/>\u00a0<br/>\"\"\"</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange<br/><span class=\"kw1\">from</span> <span class=\"kw3\">copy</span> <span class=\"kw1\">import</span> deepcopy<br/><span class=\"kw1\">from</span> <span class=\"kw3\">string</span> <span class=\"kw1\">import</span> ascii_lowercase<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">try</span>:    <span class=\"co1\"># 2to3 fix</span><br/>    <span class=\"kw2\">input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/>N <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>   <span class=\"co1\"># N x N Square arrray</span><br/>\u00a0<br/>board  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>* N <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> setbits<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> count<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>:<br/>        board<span class=\"br0\">[</span>randrange<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>randrange<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">]</span> ^<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">def</span> shuffle<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> count<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> randrange<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>            fliprow<span class=\"br0\">(</span>randrange<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            flipcol<span class=\"br0\">(</span>randrange<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> pr<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> comment<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>comment<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'     '</span> + <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>ascii_lowercase<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span> + <span class=\"st0\">'<span class=\"es0\">\\n</span>  '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'%2s'</span>\u00a0% j<span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> line<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                             <span class=\"kw1\">for</span> j<span class=\"sy0\">,</span> line <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>board<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> init<span class=\"br0\">(</span>board<span class=\"br0\">)</span>:<br/>    setbits<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> count<span class=\"sy0\">=</span>randrange<span class=\"br0\">(</span>N<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    target <span class=\"sy0\">=</span> deepcopy<span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> board <span class=\"sy0\">==</span> target:<br/>        shuffle<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> count<span class=\"sy0\">=</span><span class=\"nu0\">2</span> * N<span class=\"br0\">)</span><br/>    prompt <span class=\"sy0\">=</span> <span class=\"st0\">'  X, T, or 1-%i /\u00a0%s-%s to flip: '</span>\u00a0% <span class=\"br0\">(</span>N<span class=\"sy0\">,</span> ascii_lowercase<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>                                                    ascii_lowercase<span class=\"br0\">[</span>N-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> target<span class=\"sy0\">,</span> prompt<br/>\u00a0<br/><span class=\"kw1\">def</span> fliprow<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:<br/>    board<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>:<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x ^ <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> board<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> flipcol<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> board:<br/>        row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> ^<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>__doc__\u00a0% <span class=\"br0\">(</span>N<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    target<span class=\"sy0\">,</span> prompt <span class=\"sy0\">=</span> init<span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>    pr<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <span class=\"st0\">'Target configuration is:'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    turns <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> board <span class=\"sy0\">!=</span> target:<br/>        turns +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        pr<span class=\"br0\">(</span>board<span class=\"sy0\">,</span> <span class=\"st0\">'%i:'</span>\u00a0% turns<span class=\"br0\">)</span><br/>        ans <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span>prompt<span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <br/>            <span class=\"kw1\">and</span> ans <span class=\"kw1\">in</span> ascii_lowercase <span class=\"kw1\">and</span> ascii_lowercase.<span class=\"me1\">index</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> N<span class=\"br0\">)</span>:<br/>            flipcol<span class=\"br0\">(</span>ascii_lowercase.<span class=\"me1\">index</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> ans <span class=\"kw1\">and</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>ch <span class=\"kw1\">in</span> <span class=\"st0\">'0123456789'</span> <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> ans<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> N:<br/>            fliprow<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> ans <span class=\"sy0\">==</span> <span class=\"st0\">'T'</span>:<br/>            pr<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <span class=\"st0\">'Target configuration is:'</span><span class=\"br0\">)</span><br/>            turns -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">elif</span> ans <span class=\"sy0\">==</span> <span class=\"st0\">'X'</span>:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  I don't understand\u00a0%r... Try again. \"</span><br/>                  <span class=\"st0\">\"(X to exit or T to show target)<span class=\"es0\">\\n</span>\"</span>\u00a0% ans<span class=\"br0\">[</span>:<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            turns -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Well done!<span class=\"es0\">\\n</span>Bye.'</span><span class=\"br0\">)</span></pre>"}, {"lang": "QB64", "loc": 181, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>RANDOMIZE TIMER<br/>DIM SHARED cellsPerSide, legalMoves$, startB$, currentB$, targetB$, moveCount<br/>\u00a0<br/>restart<br/>DO<br/>    displayStatus<br/>    IF currentB$ = targetB$ THEN 'game done!<br/>        PRINT \" Congratulations, done in\"; moveCount; \" moves.\"<br/>        PRINT \"\": PRINT \" Press y for yes, if you want to start over &gt; \";<br/>        yes$ = getKey$: PRINT yes$: _DELAY .4: vcls<br/>        IF yes$ = \"y\" THEN restart ELSE nomore = -1<br/>    ELSE 'get next move<br/>        m$ = \" \": PRINT<br/>        WHILE INSTR(legalMoves$, m$) = 0<br/>            PRINT \" Press a lettered column or a numbered row to flip (or 0,q,?,!) &gt; \";<br/>            m$ = getKey$: PRINT m$: _DELAY .4<br/>            IF m$ = \"!\" THEN<br/>                showSolution = -1: m$ = \" \": EXIT WHILE<br/>            ELSEIF m$ = \"?\" THEN: m$ = \" \": cp CSRLIN, \"Hint: \" + hint$<br/>            ELSEIF m$ = \"0\" OR m$ = \"q\" THEN: vcls: CLOSE: END<br/>            ELSEIF m$ = \"\" THEN: m$ = \" \"<br/>            END IF<br/>        WEND<br/>        IF showSolution THEN 'run the solution from hints function<br/>            showSolution = 0: mv$ = hint$<br/>            cp CSRLIN + 1, \"For the next move, the AI has chosen: \" + mv$<br/>            cp CSRLIN + 1, \"Running the solution with 4 sec screen delays...\"<br/>            _DELAY 4: vcls<br/>            WHILE mv$ &lt;&gt; \"Done?\"<br/>                moveCount = moveCount + 1: makeMove mv$: displayStatus: mv$ = hint$<br/>                cp CSRLIN + 1, \"For the next move, the AI has chosen: \" + mv$<br/>                cp CSRLIN + 1, \"Running the solution with 4 sec screen delays...\"<br/>                _DELAY 4: vcls<br/>            WEND<br/>            displayStatus<br/>            cp CSRLIN + 1, \"Done! Current board matches Target\"<br/>            cp CSRLIN + 1, \"Press y for yes, if you want to start over: &gt; \"<br/>            yes$ = getKey$: PRINT yes$: _DELAY .4: vcls<br/>            IF yes$ = \"y\" THEN restart ELSE nomore = -1<br/>        ELSE<br/>            vcls: moveCount = moveCount + 1: makeMove m$<br/>        END IF<br/>    END IF<br/>LOOP UNTIL nomore<br/>CLOSE<br/>\u00a0<br/>SUB displayStatus<br/>    COLOR 9: showBoard 2, 2, currentB$, \"Current:\"<br/>    COLOR 12: showBoard 2, 2 + 2 * cellsPerSide + 6, targetB$, \"Target:\"<br/>    COLOR 13: PRINT: PRINT \" Number of moves taken so far is\" + STR$(moveCount)<br/>    COLOR 14<br/>END SUB<br/>\u00a0<br/>\u00a0<br/>FUNCTION hint$ 'compare the currentB to targetB and suggest letter or digit or done<br/>    FOR i = 1 TO 2 * cellsPerSide 'check cols first then rows as listed in legalMoves$<br/>        r$ = MID$(legalMoves$, i, 1)<br/>        IF i &lt;= cellsPerSide THEN<br/>            currentbit$ = MID$(currentB$, i, 1): targetBit$ = MID$(targetB$, i, 1)<br/>            IF currentbit$ &lt;&gt; targetBit$ THEN flag = -1: EXIT FOR<br/>        ELSE<br/>            j = i - cellsPerSide<br/>            currentbit$ = MID$(currentB$, (j - 1) * cellsPerSide + 1, 1)<br/>            targetBit$ = MID$(targetB$, (j - 1) * cellsPerSide + 1, 1)<br/>            IF currentbit$ &lt;&gt; targetBit$ THEN flag = -1: EXIT FOR<br/>        END IF<br/>    NEXT<br/>    IF flag THEN hint$ = r$ ELSE hint$ = \"Done?\"<br/>END FUNCTION<br/>\u00a0<br/>SUB restart<br/>    CLOSE<br/>    OPEN \"Copy Flipping Bits Game.txt\" FOR OUTPUT AS #3<br/>    cellsPerSide = 0: legalMoves$ = \"\": moveCount = 0<br/>    COLOR 9: cp 3, \"Flipping Bits Game, now with AI!  b+ 2017-12-18\"<br/>    COLOR 5<br/>    cp 5, \"You will be presented with a square board marked Current and\"<br/>    cp 6, \"another marked Target. The object of the game is to match\"<br/>    cp 7, \"the Current board to Target in the least amount of moves.\"<br/>    cp 9, \"To make a move, enter a letter for a column to flip or\"<br/>    cp 10, \"a digit for a row to flip. In a flip, all 1's are\"<br/>    cp 11, \"changed to 0's and all 0's changed to 1's.\"<br/>    cp 13, \"You may enter 0 or q at any time to quit.\"<br/>    cp 14, \"You may press\u00a0? when prompted for move to get a hint.\"<br/>    cp 15, \"You may press\u00a0! to have the program solve the puzzle.\"<br/>    COLOR 14: PRINT: PRINT<br/>    WHILE cellsPerSide &lt; 2 OR cellsPerSide &gt; 9<br/>        LOCATE CSRLIN, 13: PRINT \"Please press how many cells you want per side 2 to 9 &gt; \";<br/>        in$ = getKey$: PRINT in$: _DELAY .4<br/>        IF in$ = \"0\" OR in$ = \"q\" THEN END ELSE cellsPerSide = VAL(in$)<br/>    WEND<br/>    vcls<br/>    FOR i = 1 TO cellsPerSide: legalMoves$ = legalMoves$ + CHR$(96 + i): NEXT<br/>    FOR i = 1 TO cellsPerSide: legalMoves$ = legalMoves$ + LTRIM$(STR$(i)): NEXT<br/>    startB$ = startBoard$: currentB$ = startB$: targetB$ = makeTarget$: currentB$ = startB$<br/>END SUB<br/>\u00a0<br/>FUNCTION startBoard$<br/>    FOR i = 1 TO cellsPerSide ^ 2: r$ = r$ + LTRIM$(STR$(INT(RND * 2))): NEXT<br/>    startBoard$ = r$<br/>END FUNCTION<br/>\u00a0<br/>SUB showBoard (row, col, board$, title$)<br/>    LOCATE row - 1, col: PRINT title$<br/>    FOR i = 1 TO cellsPerSide<br/>        LOCATE row, col + 2 * (i - 1) + 3: PRINT MID$(legalMoves$, i, 1);<br/>    NEXT<br/>    PRINT<br/>    FOR i = 1 TO cellsPerSide<br/>        LOCATE row + i, col - 1: PRINT STR$(i);<br/>        FOR j = 1 TO cellsPerSide<br/>            LOCATE row + i, col + 2 * j: PRINT \" \" + MID$(board$, (i - 1) * cellsPerSide + j, 1);<br/>        NEXT<br/>        PRINT<br/>    NEXT<br/>END SUB<br/>\u00a0<br/>SUB makeMove (move$)<br/>    ac = ASC(move$)<br/>    IF ac &gt; 96 THEN 'letter<br/>        col = ac - 96<br/>        FOR i = 1 TO cellsPerSide<br/>            bit$ = MID$(currentB$, (i - 1) * cellsPerSide + col, 1)<br/>            IF bit$ = \"0\" THEN<br/>                MID$(currentB$, (i - 1) * cellsPerSide + col, 1) = \"1\"<br/>            ELSE<br/>                MID$(currentB$, (i - 1) * cellsPerSide + col, 1) = \"0\"<br/>            END IF<br/>        NEXT<br/>    ELSE 'number<br/>        row = ac - 48<br/>        FOR i = 1 TO cellsPerSide<br/>            bit$ = MID$(currentB$, (row - 1) * cellsPerSide + i, 1)<br/>            IF bit$ = \"0\" THEN<br/>                MID$(currentB$, (row - 1) * cellsPerSide + i, 1) = \"1\"<br/>            ELSE<br/>                MID$(currentB$, (row - 1) * cellsPerSide + i, 1) = \"0\"<br/>            END IF<br/>        NEXT<br/>    END IF<br/>END SUB<br/>\u00a0<br/>FUNCTION makeTarget$<br/>    WHILE currentB$ = startB$<br/>        FOR i = 1 TO cellsPerSide * cellsPerSide<br/>            m$ = MID$(legalMoves$, INT(RND * LEN(legalMoves$)) + 1, 1): makeMove m$<br/>        NEXT<br/>    WEND<br/>    makeTarget$ = currentB$<br/>END FUNCTION<br/>\u00a0<br/>SUB cp (row, text$) 'center print at row<br/>    LOCATE row, (80 - LEN(text$)) / 2: PRINT text$;<br/>END SUB<br/>\u00a0<br/>SUB vcls 'print the screen to file then clear it<br/>    DIM s$(23)<br/>    FOR lines = 1 TO 23<br/>        FOR t = 1 TO 80: scan$ = scan$ + CHR$(SCREEN(lines, t)): NEXT<br/>        s$(lines) = RTRIM$(scan$): scan$ = \"\"<br/>    NEXT<br/>    FOR fini = 23 TO 1 STEP -1<br/>        IF s$(fini) &lt;&gt; \"\" THEN EXIT FOR<br/>    NEXT<br/>    PRINT #3, \"\"<br/>    FOR i = 1 TO fini: PRINT #3, s$(i): NEXT<br/>    PRINT #3, \"\": PRINT #3, STRING$(80, \"-\"): CLS<br/>END SUB<br/>\u00a0<br/>FUNCTION getKey$ 'just want printable characters<br/>    k$ = \"\"<br/>    WHILE LEN(k$) = 0<br/>        k$ = INKEY$<br/>        IF LEN(k$) THEN 'press something so respond<br/>            IF LEN(k$) = 2 OR ASC(k$) &gt; 126 OR ASC(k$) &lt; 32 THEN k$ = \"*\": BEEP<br/>        END IF<br/>    WEND<br/>    getKey$ = k$<br/>END FUNCTION<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 71, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (flip-row! pzzl r)<br/>  (define N (integer-sqrt (bytes-length pzzl)))<br/>  (for* ((c (in-range N)))<br/>    (define idx (+ c (* N r)))<br/>    (bytes-set! pzzl idx (- 1 (bytes-ref pzzl idx)))))<br/>\u00a0<br/>(define (flip-col! pzzl c)<br/>  (define N (integer-sqrt (bytes-length pzzl)))<br/>  (for* ((r (in-range N)))<br/>    (define idx (+ c (* N r)))<br/>    (bytes-set! pzzl idx (- 1 (bytes-ref pzzl idx)))))<br/>\u00a0<br/>(define (new-game N (flips 10))<br/>  (define N2 (sqr N))<br/>  (define targ (list-&gt;bytes (for/list ((_ N2)) (random 2))))<br/>  (define strt (bytes-copy targ))<br/>  (for ((_ flips))<br/>    (case (random 2)<br/>      ((0) (flip-col! strt (random N)))<br/>      ((1) (flip-row! strt (random N)))))<br/>  (if (equal? strt targ) (new-game N) (values targ strt)))<br/>\u00a0<br/>(define (show-games #:sep (pzl-sep \" | \") . pzzls)<br/>  (define N (integer-sqrt (bytes-length (first pzzls))))<br/>  (define caption (string-join (for/list ((c (in-range N))) (~a (add1 c))) \"\"))<br/>  (define ruler   (string-join (for/list ((c (in-range N))) \"-\") \"\"))<br/>\u00a0<br/>  (define ((pzzle-row r) p)<br/>    (string-join (for/list ((c (in-range N))) (~a (bytes-ref p (+ c (* N r))))) \"\"))<br/>\u00a0<br/>  (displayln<br/>   (string-join<br/>    (list*<br/>     (format \"  ~a\" (string-join (for/list ((_ pzzls)) caption) pzl-sep))<br/>     (format \"  ~a\" (string-join (for/list ((_ pzzls)) ruler) pzl-sep))<br/>     (for/list ((r (in-range N)) (R (in-naturals (char-&gt;integer #\\a))))<br/>       (format \"~a ~a\" (integer-&gt;char R) (string-join (map (pzzle-row r) pzzls) pzl-sep))))<br/>    \"\\n\")))<br/>\u00a0<br/>(define (play N)<br/>  (define-values (end start) (new-game N))<br/>  (define (turn n (show? #t))<br/>    (cond<br/>      [(equal? end start) (printf \"you won on turn #~a~%\" n)]<br/>      [else<br/>       (when show?\u00a0;; don't show after whitespace<br/>         (printf \"turn #~a~%\" n)       <br/>         (show-games start end))<br/>       (match (read-char)<br/>         [(? eof-object?) (printf \"sad to see you go\u00a0:-(~%\")]<br/>         [(? char-whitespace?) (turn n #f)]<br/>         [(? char-numeric? c)<br/>          (define cnum (- (char-&gt;integer c) (char-&gt;integer #\\1)))<br/>          (cond [(&lt; -1 cnum N)<br/>                 (printf \"flipping col ~a~%\" (add1 cnum))<br/>                 (flip-col! start cnum)<br/>                 (turn (add1 n))]<br/>                [else (printf \"column number out of range ~a &gt; ~a~%\" (add1 cnum) N)<br/>                      (turn n)])]<br/>         [(? char-lower-case? c)<br/>          (define rnum (- (char-&gt;integer c) (char-&gt;integer #\\a)))<br/>          (cond [(&lt; -1 rnum N)<br/>                 (printf \"flipping row ~a~%\" (add1 rnum))<br/>                 (flip-row! start rnum)<br/>                 (turn (add1 n))]<br/>                [else (printf \"row number out of range ~a &gt; ~a~%\" (add1 rnum) (sub1 N))<br/>                      (turn n)])]<br/>         [else (printf \"unrecognised character in input: ~s~%\" else)<br/>               (turn n)])]))  <br/>  (turn 0))</pre>"}, {"lang": "REXX", "loc": 69, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program presents a  \"flipping bit\"  puzzle.  The user can solve via it via  C.L. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>  N u seed <span class=\"sy0\">.</span>                            <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  N==<span class=\"st0\">\",\"</span>     <span class=\"kw3\">then</span> N=<span class=\"nu0\">3</span>                 <span class=\"coMULTI\">/*Size given?   Then use default of  3.*/</span><br/><span class=\"kw1\">if</span> u==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  u==<span class=\"st0\">\",\"</span>     <span class=\"kw3\">then</span> u=N                 <span class=\"coMULTI\">/*the number of bits initialized to ON.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed  <span class=\"coMULTI\">/*is there a seed (for repeatability?) */</span><br/><a class=\"__cf_email__\" data-cfemail=\"51323e3d11\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>= <span class=\"st0\">'a b c d e f g h i j k l m n o p q r s t u v w x y z'</span>     <span class=\"coMULTI\">/*literal for column id.*/</span><br/>cols=<span class=\"kw6\">space</span><span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"197a767559\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;        <span class=\"kw2\">upper</span> cols           <span class=\"coMULTI\">/*letters to be used for the columns.  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>; \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                      <span class=\"coMULTI\">/*set both arrays to  \"off\" characters.*/</span><br/>tries=<span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*number of player's attempts (so far).*/</span><br/>         <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  show<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> u                  <span class=\"coMULTI\">/* [\u2193]   turn  \"on\"  U  number of bits.*/</span><br/>         r=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, N<span class=\"br0\">)</span>;      c=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, N<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*get a random  row  and  column.      */</span><br/>         @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=<span class=\"nu0\">1</span>      \u00a0;     \u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*set (both)  row and column  to ON.   */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                         <span class=\"coMULTI\">/* [\u2191]  keep going 'til   U   bits set.*/</span><br/>oz=z                                             <span class=\"coMULTI\">/*save the original array string.      */</span><br/><span class=\"kw1\">call</span> show <span class=\"nu0\">1</span>, <span class=\"st0\">'   \u25c4\u2550\u2550\u2550target\u2550\u2550\u2550\u2563'</span>, , <span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*display the target for user to attain*/</span><br/>       <span class=\"kw1\">do</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"kw1\">call</span> flip <span class=\"st0\">'R'</span>,<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span> <span class=\"coMULTI\">/*flip a   row    of  bits.            */</span><br/>                       <span class=\"kw1\">call</span> flip <span class=\"st0\">'C'</span>,<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span> <span class=\"coMULTI\">/*  \"  \"  column   \"    \"              */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*random*/</span>                          <span class=\"coMULTI\">/* [\u2191]  just perform  1  or  2  times. */</span><br/><span class=\"kw1\">if</span> z==oz  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> flip <span class=\"st0\">'R'</span>, <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, N<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*ensure it's not target we're flipping*/</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  z==oz;      <span class=\"kw1\">call</span> prompt        <span class=\"coMULTI\">/*prompt until they get it right.      */</span><br/>       <span class=\"kw1\">call</span> flip <span class=\"kw6\">left</span><span class=\"br0\">(</span>?, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>?, <span class=\"nu0\">2</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*flip a user selected row or column.  */</span><br/>       <span class=\"kw1\">call</span> show <span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/*get image (Z) of the updated array.  */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/><span class=\"kw1\">call</span> show <span class=\"nu0\">1</span>, <span class=\"st0\">'   \u25c4\u2500\u2500\u2500your array'</span>                 <span class=\"coMULTI\">/*display the array to the terminal.   */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Congrats!    You did it in'</span>     tries     <span class=\"st0\">\"tries.\"</span><br/><span class=\"kw1\">exit</span> tries                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw2\">halt</span>:  <span class=\"kw1\">say</span> <span class=\"st0\">'program was halted by user.'</span>;  <span class=\"kw1\">exit</span>  <span class=\"coMULTI\">/*the REXX program was halted by user. */</span><br/>hdr:   aaa=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> oo==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> aaa=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>aaa, <span class=\"st0\">\"\u2554\u2550\u2551\"</span>, <span class=\"st0\">'\u250c\u2500\u2502'</span><span class=\"br0\">)</span>;    <span class=\"kw1\">say</span> aaa;    <span class=\"kw1\">return</span><br/>isInt: <span class=\"kw1\">return</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*returns   1   if  arg  is an integer.*/</span><br/>isLet: <span class=\"kw1\">return</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">'M'</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*returns   1   if  arg  is a letter.  */</span><br/>terr:  <span class=\"kw1\">if</span> ok  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ***error***:  illegal'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;        ok=<span class=\"nu0\">0</span>;     <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>flip: <span class=\"kw1\">arg</span> x,#;   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N  <span class=\"kw2\">while</span> x==<span class=\"st0\">'R'</span>;  @<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>c = <span class=\"sy0\">\\</span>@<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>c;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N  <span class=\"kw2\">while</span> x==<span class=\"st0\">'C'</span>;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span># = <span class=\"sy0\">\\</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>#;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*r*/</span>;         <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>prompt: <span class=\"kw1\">if</span> tries<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500bit array after play: '</span>         tries<br/>        <span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">halt</span>                           <span class=\"coMULTI\">/*another method for the player to quit*/</span><br/>       \u00a0!=<span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Please enter a    row number    or a    column letter,      or  Quit:'</span><br/>        <span class=\"kw1\">call</span> show <span class=\"nu0\">1</span>, <span class=\"st0\">'   \u25c4\u2500\u2500\u2500your array'</span>         <span class=\"coMULTI\">/*display the array to the terminal.   */</span><br/>           <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>  <span class=\"kw2\">until</span> ok;       ok=<span class=\"nu0\">1</span>;     <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span>\u00a0!;     <span class=\"kw1\">pull</span>\u00a0?  _  <span class=\"sy0\">.</span>  <span class=\"nu0\">1</span>  aa<br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'QUIT'</span>,\u00a0?, <span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500quitting\u00b7\u00b7\u00b7'</span>;  <span class=\"kw1\">exit</span> <span class=\"nu0\">0</span>;  <span class=\"kw3\">end</span><br/>           <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">''</span>                    <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">call</span> show <span class=\"nu0\">1</span>,<span class=\"st0\">\"   \u25c4\u2550\u2550\u2550target\u2550\u2550\u2550\u2563\"</span>,<span class=\"sy0\">.</span>,<span class=\"nu0\">1</span>; ok=<span class=\"nu0\">0</span><br/>                                                 <span class=\"kw1\">call</span> show <span class=\"nu0\">1</span>,<span class=\"st0\">\"   \u25c4\u2500\u2500\u2500your array\"</span><br/>                                            <span class=\"kw3\">end</span>                       <span class=\"coMULTI\">/* [\u2191] reshow targ*/</span><br/>           <span class=\"kw1\">if</span> _ <span class=\"sy0\">\\</span>== <span class=\"st0\">''</span>                 <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">'too many args entered:'</span>   aa<br/>           <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isInt<span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>isLet<span class=\"br0\">(</span>?<span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">'row/column: '</span>            \u00a0?<br/>           <span class=\"kw1\">if</span>  isLet<span class=\"br0\">(</span>?<span class=\"br0\">)</span>                <span class=\"kw3\">then</span> a=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>?, cols<span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span>  isLet<span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> a<span class=\"sy0\">&gt;</span>N <span class=\"sy0\">|</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">'column: '</span>  \u00a0?<br/>           <span class=\"kw1\">if</span>  isLet<span class=\"br0\">(</span>?<span class=\"br0\">)</span>                <span class=\"kw3\">then</span>\u00a0?=<span class=\"st0\">'C'</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span>?, cols<span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span>  isInt<span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span>\u00a0?<span class=\"sy0\">&gt;</span>N<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">'row: '</span>                   \u00a0?<br/>           <span class=\"kw1\">if</span>  isInt<span class=\"br0\">(</span>?<span class=\"br0\">)</span>                <span class=\"kw3\">then</span>\u00a0?=<span class=\"st0\">'R'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>?<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*normalize number*/</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span>                                          <span class=\"coMULTI\">/*end of da checks*/</span><br/>        tries= tries + <span class=\"nu0\">1</span>                                              <span class=\"coMULTI\">/*bump da counter.*/</span><br/>        <span class=\"kw1\">return</span>\u00a0?                                                      <span class=\"coMULTI\">/*return response.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show: $=<span class=\"nu0\">0</span>;              _=;            <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> tell,tx,o,oo         <span class=\"coMULTI\">/*$\u2261num of ON bits*/</span><br/>      <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span> <span class=\"st0\">'     '</span>   <span class=\"kw6\">subword</span><span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"791a161539\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <span class=\"nu0\">1</span>, N<span class=\"br0\">)</span>   <span class=\"st0\">\"  column letter\"</span><br/>                        <span class=\"kw1\">call</span> hdr <span class=\"st0\">'row \u250c'</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, N+N+<span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*prepend col hdrs*/</span><br/>                    <span class=\"kw3\">end</span>                                               <span class=\"coMULTI\">/* [\u2191]  grid hdrs.*/</span><br/>      z=                                                              <span class=\"coMULTI\">/* [\u2193] build grid.*/</span><br/>        <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                                               <span class=\"coMULTI\">/*show  grid rows.*/</span><br/>          <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">if</span> o==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=z <span class=\"sy0\">||</span>\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;  _=_\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;  $=$ +\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;   <span class=\"kw3\">end</span><br/>                                   <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  z=z <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;  _=_ @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;  $=$ + @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;   <span class=\"kw3\">end</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                                 <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7 and sum ONs.*/</span><br/>        <span class=\"kw1\">if</span> tx<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> tar<span class=\"sy0\">.</span>r=_ tx                                   <span class=\"coMULTI\">/*build da target?*/</span><br/>        <span class=\"kw1\">if</span> tell     <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> hdr <span class=\"kw6\">right</span><span class=\"br0\">(</span>r, <span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"st0\">' \u2502'</span>_   tx; _=        <span class=\"coMULTI\">/*show the grid?  */</span><br/>        <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span>                                                 <span class=\"coMULTI\">/*show a grid row.*/</span><br/>      <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>;                     <span class=\"kw1\">return</span> $                 <span class=\"coMULTI\">/*show blank line?*/</span></pre>"}, {"lang": "Ring", "loc": 111, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>\u00a0<br/>size = 3<br/>flip = newlist(size,size)<br/>board = newlist(size,size)<br/>colflip = list(size)<br/>rowflip = list(size)<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Flipping bits game\")<br/>                  setgeometry(465,115,800,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(285,60,120,40)<br/>                              settext(\"Target\")<br/>                  }<br/>                  label2 = new qlabel(win1) {<br/>                              setgeometry(285,220,120,40)<br/>                              settext(\"Board\")<br/>                  }<br/>                  for n = 1 to size<br/>                       for m = 1 to size<br/>                            flip[n][m] = new qpushbutton(win1) {<br/>                                             setgeometry(200+n*40,60+m*40,40,40)<br/>                                             settext(string(random(1)))<br/>                                             }<br/>                       next<br/>                  next<br/>                  for n = 1 to size<br/>                       for m = 1 to size<br/>                            board[n][m] = new qpushbutton(win1) {<br/>                                                 setgeometry(200+n*40,260+m*40,40,40)<br/>                                                 setclickevent(\"draw(\" + n + \",\" + m +\")\")<br/>                                                 }<br/>                       next<br/>                  next<br/>                  for n = 1 to size<br/>                       colflip[n]= new qpushbutton(win1) {<br/>                                              setgeometry(200+n*40,260,40,40)<br/>                                              settext(\"Go\")<br/>                                              setclickevent(\"coldraw(\" + n + \")\")<br/>                                              }<br/>                  next<br/>                  for n = 1 to size<br/>                       rowflip[n]= new qpushbutton(win1) {<br/>                                               setgeometry(200,260+n*40,40,40)<br/>                                               settext(\"Go\")<br/>                                               setclickevent(\"rowdraw(\" + n + \")\")<br/>                                               }<br/>                  next<br/>                  scramblebutton = new qpushbutton(win1) {<br/>                                                   setgeometry(240,460,120,40)<br/>                                                   settext(\"Scramble Board\")<br/>                                                   setclickevent(\"scramble(flip)\")<br/>                                                   }<br/>        scramblebegin(flip)<br/>        show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func coldraw(n)<br/>        for row = 1 to size<br/>             board[n][row] {temp = text()}<br/>             if temp = \"0\"<br/>                board[n][row].settext(\"1\")<br/>             else<br/>                board[n][row].settext(\"0\")<br/>             ok<br/>         next<br/>\u00a0<br/>func rowdraw(n)<br/>        for col = 1 to size<br/>             board[col][n] {temp = text()}<br/>             if temp = \"0\"<br/>                board[col][n].settext(\"1\")<br/>             else<br/>                board[col][n].settext(\"0\")<br/>             ok<br/>         next<br/>\u00a0<br/>func scramble(flip)<br/>        for col = 1 to size<br/>             for row = 1 to size<br/>                  flip[col][row]{temp = text()}<br/>                  board[col][row].settext(temp)<br/>             next<br/>        next<br/>        for mix = 1 to size*10<br/>             colorrow = random(1) + 1<br/>             colrow = random(size-1) + 1<br/>             if colorrow = 1<br/>                rc = \"coldraw\"<br/>             else<br/>                rc = \"rowdraw\"<br/>             ok<br/>             go = rc + \"(\" + colrow + \")\"<br/>             eval(go)<br/>        next<br/>\u00a0<br/>func scramblebegin(flip)<br/>        for col = 1 to size<br/>             for row = 1 to size<br/>                  flip[col][row]{temp = text()}<br/>                  board[col][row].settext(temp)<br/>             next<br/>        next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 104, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> FlipBoard<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid board size: #{size}\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> size <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"re1\">@size</span> = size<br/>    <span class=\"re1\">@board</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"sy0\">**</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    randomize_board<br/>    <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>      <span class=\"re1\">@target</span> = generate_target<br/>      <span class=\"kw1\">break</span> <span class=\"kw1\">unless</span> solved?<br/>    <span class=\"kw1\">end</span> <br/>\u00a0<br/>    <span class=\"co1\"># these are used for validating user input</span><br/>    <span class=\"re1\">@columns</span> = <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"st0\">'a'</span>...<span class=\"br0\">(</span><span class=\"st0\">'a'</span>.<span class=\"me1\">ord</span><span class=\"sy0\">+</span>@size<span class=\"br0\">)</span>.<span class=\"me1\">chr</span><span class=\"br0\">]</span><br/>    <span class=\"re1\">@rows</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span><a class=\"__cf_email__\" data-cfemail=\"b49a9af4c7ddced1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">############################################################</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> play<br/>    moves = <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"your target:\"</span>, target<br/>\u00a0<br/>    <span class=\"kw1\">until</span> solved? <br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"move #{moves}:\"</span>, <span class=\"kw2\">self</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">\"Row/column to flip: \"</span><br/>      ans = <span class=\"re0\">$stdin</span>.<span class=\"kw3\">gets</span>.<span class=\"me1\">strip</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"re1\">@columns</span>.<span class=\"kw1\">include</span>? ans<br/>        flip_column <span class=\"re1\">@columns</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/>        moves <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">elsif</span> <span class=\"re1\">@rows</span>.<span class=\"kw1\">include</span>? ans<br/>        flip_row <span class=\"re1\">@rows</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/>        moves <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"invalid input: \"</span> <span class=\"sy0\">+</span> ans<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"you solved the game in #{moves} moves\"</span>, <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># the target formation as a string</span><br/>  <span class=\"kw1\">def</span> target<br/>    format_array <span class=\"re1\">@target</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># the current formation as a string</span><br/>  <span class=\"kw1\">def</span> to_s<br/>    format_array <span class=\"re1\">@board</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">############################################################</span><br/>  private<br/>\u00a0<br/>  <span class=\"kw1\">def</span> solved?<br/>    <span class=\"re1\">@board</span> == <span class=\"re1\">@target</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># flip a random number of bits on the board</span><br/>  <span class=\"kw1\">def</span> randomize_board<br/>    <span class=\"br0\">(</span>@size <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>      flip_bit <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># generate a random number of flip_row/flip_column calls</span><br/>  <span class=\"kw1\">def</span> generate_target<br/>    orig_board = <span class=\"re1\">@board</span>.<span class=\"me1\">clone</span><br/>    <span class=\"br0\">(</span>@size <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">zero</span>?\u00a0? flip_row<span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span> <span class=\"br0\">)</span>\u00a0: flip_column<span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>@size<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    target, <span class=\"re1\">@board</span> = <span class=\"re1\">@board</span>, orig_board<br/>    target<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> flip_row<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>    <span class=\"re1\">@size</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>col<span class=\"sy0\">|</span> flip_bit<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> flip_column<span class=\"br0\">(</span>col<span class=\"br0\">)</span><br/>    <span class=\"re1\">@size</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> flip_bit<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> flip_bit<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span><br/>    <span class=\"re1\">@board</span><span class=\"br0\">[</span>@size <span class=\"sy0\">*</span> row <span class=\"sy0\">+</span> col<span class=\"br0\">]</span> ^= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> format_array<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><br/>    str = <span class=\"st0\">\"   \"</span> <span class=\"sy0\">+</span> <span class=\"re1\">@columns</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"re1\">@size</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>      str <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"%2s \"</span> <span class=\"sy0\">%</span> <span class=\"re1\">@rows</span><span class=\"br0\">[</span>row<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ary<span class=\"br0\">[</span>@size<span class=\"sy0\">*</span>row, <span class=\"re1\">@size</span><span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"kw1\">end</span><br/>    str<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">######################################################################</span><br/><span class=\"kw1\">begin</span><br/>  FlipBoard.<span class=\"me1\">new</span><span class=\"br0\">(</span>ARGV.<span class=\"me1\">shift</span>.<span class=\"me1\">to_i</span><span class=\"br0\">)</span>.<span class=\"me1\">play</span><br/><span class=\"kw1\">rescue</span> <span class=\"sy0\">=&gt;</span> e<br/>  <span class=\"kw3\">puts</span> e.<span class=\"me1\">message</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Swift", "loc": 135, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>struct Board: Equatable, CustomStringConvertible {<br/>    let size: Int<br/>    private var tiles: [Bool]<br/>\u00a0<br/>    init(size: Int) {<br/>        self.size = size<br/>        tiles = Array(count: size * size, repeatedValue: false)<br/>    }<br/>\u00a0<br/>    subscript(x: Int, y: Int) -&gt; Bool {<br/>        get {<br/>            return tiles[y * size + x]<br/>        }<br/>        set {<br/>            tiles[y * size + x] = newValue<br/>        }<br/>    }<br/>\u00a0<br/>    mutating func randomize() {<br/>        for i in 0..&lt;tiles.count {<br/>            tiles[i] = Bool(random()\u00a0% 2)<br/>        }<br/>    }<br/>\u00a0<br/>    mutating func flipRow(row: Int) {<br/>        for i in 0..&lt;size {<br/>            self[row, i] =\u00a0!self[row, i]<br/>        }<br/>    }<br/>\u00a0<br/>    mutating func flipColumn(column: Int) {<br/>        for i in 0..&lt;size {<br/>            self[i, column] =\u00a0!self[i, column]<br/>        }<br/>    }<br/>\u00a0<br/>    var description: String {<br/>        var desc = \"\\n\\ta\\tb\\tc\\n\"<br/>        for i in 0..&lt;size {<br/>            desc += \"\\(i+1):\\t\"<br/>            for j in 0..&lt;size {<br/>                desc += \"\\(Int(self[i, j]))\\t\"<br/>            }<br/>            desc += \"\\n\"<br/>        }<br/>\u00a0<br/>        return desc<br/>    }<br/>}<br/>\u00a0<br/>func ==(lhs: Board, rhs: Board) -&gt; Bool {<br/>    return lhs.tiles == rhs.tiles<br/>}<br/>\u00a0<br/>class FlippingGame: CustomStringConvertible {<br/>\u00a0<br/>    var board: Board<br/>    var target: Board<br/>    var solved: Bool { return board == target }<br/>\u00a0<br/>    init(boardSize: Int) {<br/>        target = Board(size: 3)<br/>        board = Board(size: 3)<br/>        generateTarget()<br/>    }<br/>\u00a0<br/>    func generateTarget() {<br/>        target.randomize()<br/>        board = target<br/>        let size = board.size<br/>        while solved {<br/>            for _ in 0..&lt;size + (random()\u00a0% size + 1) {<br/>                if random()\u00a0% 2 == 0 {<br/>                    board.flipColumn(random()\u00a0% size)<br/>                }<br/>                else {<br/>                    board.flipRow(random()\u00a0% size)<br/>                }<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    func getMove() -&gt; Bool {<br/>        print(self)<br/>        print(\"Flip what? \", terminator: \"\")<br/>\u00a0<br/>        guard<br/>            let move = readLine(stripNewline: true)<br/>            where move.characters.count == 1<br/>            else { return false }<br/>\u00a0<br/>        var moveValid = true<br/>\u00a0<br/>        if let row = Int(move) {<br/>            board.flipRow(row - 1)<br/>        }<br/>        else if let column = move.lowercaseString.utf8.first where column &lt; 100 &amp;&amp; column &gt; 96  {<br/>            board.flipColumn(numericCast(column) - 97)<br/>        }<br/>        else {<br/>            moveValid = false<br/>        }<br/>\u00a0<br/>        return moveValid<br/>    }<br/>\u00a0<br/>    var description: String {<br/>        var str = \"\"<br/>        print(\"Target: \\n \\(target)\", toStream: &amp;str)<br/>        print(\"Board: \\n \\(board)\", toStream: &amp;str)<br/>\u00a0<br/>        return str<br/>    }<br/>}<br/>\u00a0<br/>func playGame(game: FlippingGame) -&gt; String {<br/>    game.generateTarget()<br/>    var numMoves = 0<br/>    while\u00a0!game.solved {<br/>        numMoves++<br/>        print(\"Move #\\(numMoves)\")<br/>        while\u00a0!game.getMove() {}<br/>    }<br/>    print(\"You win!\")<br/>    print(\"Number of moves: \\(numMoves)\")<br/>    print(\"\\n\\nPlay Again? \", terminator: \"\")<br/>\u00a0<br/>    return readLine(stripNewline: true)!.lowercaseString<br/>}<br/>\u00a0<br/>let game = FlippingGame(boardSize: 3)<br/>repeat { } while playGame(game) == \"y\"<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 93, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create Flip <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> board target s<br/>    constructor <span class=\"br0\">{</span>size<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> s <span class=\"re0\">$size</span><br/>\t<span class=\"kw1\">set</span> target <span class=\"br0\">[</span>my RandomConfiguration<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> board <span class=\"re0\">$target</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$board</span> eq <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>.5<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    my SwapRow <span class=\"re0\">$i</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>.5<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    my SwapColumn <span class=\"re0\">$i</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> RandomConfiguration <span class=\"br0\">{</span><span class=\"br0\">{</span>p <span class=\"nu0\">0.5</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> row <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$row</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> row<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> r <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> col <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$col</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> col<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"re0\">$r</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> SwapRow <span class=\"br0\">{</span>rowId<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> board <span class=\"re0\">$rowId</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$board</span> <span class=\"re0\">$rowId</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> SwapColumn <span class=\"br0\">{</span>columnId<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> board <span class=\"re0\">$i</span> <span class=\"re0\">$columnId</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$board</span> <span class=\"re0\">$i</span> <span class=\"re0\">$columnId</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> Render <span class=\"br0\">{</span>configuration <span class=\"br0\">{</span>prefixes <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap r <span class=\"re0\">$configuration</span> p <span class=\"re0\">$prefixes</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">format</span> <span class=\"sy0\">%</span>s<span class=\"sy0\">%</span>s <span class=\"re0\">$p</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap c <span class=\"re0\">$r</span> <span class=\"br0\">{</span><span class=\"kw2\">string</span> index <span class=\"st0\">\".X\"</span> <span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> GetInput <span class=\"br0\">{</span>prompt<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"${prompt}: \"</span><br/>\t<span class=\"kw2\">flush</span> stdout<br/>\t<span class=\"kw2\">gets</span> stdin<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> play <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> p0 <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> p <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> top <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*s \"</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> j <span class=\"nu0\">97</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"sy0\">;</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">append</span> top <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">lappend</span> p <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*d \"</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">lappend</span> p0 <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*s \"</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">set</span> moves <span class=\"nu0\">0</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"You are trying to get to:<span class=\"es0\">\\n</span>[my Render $target $p0]<span class=\"es0\">\\n</span>\"</span><br/>\t<span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Current configuration (#$moves):<span class=\"es0\">\\n</span>$top<span class=\"es0\">\\n</span>[my Render $board $p]\"</span><br/>\u00a0<br/>\t    <span class=\"co1\"># Test for if we've won</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$board</span> eq <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\u00a0<br/>\t    <span class=\"co1\"># Ask the user for a move</span><br/>\t    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span>my GetInput <span class=\"st0\">\"Pick a column (letter) or row (number) to flip\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t    <span class=\"co1\"># Parse the move and apply it</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is lower -strict <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$i</span> <span class=\"st0\">\"%c\"</span><span class=\"br0\">]</span> - <span class=\"nu0\">97</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tmy SwapColumn <span class=\"re0\">$c</span><br/>\t\t<span class=\"kw2\">incr</span> moves<br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is integer -strict <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tmy SwapRow <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">incr</span> moves<br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"Error: bad selection\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>You win! (You took $moves moves.)\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Flip create flip <span class=\"nu0\">3</span><br/>flip play<br/>\u00a0</pre>"}]}