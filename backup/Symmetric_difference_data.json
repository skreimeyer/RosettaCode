{"task": "Symmetric_difference", "blocks": [{"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_XOR <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Person <span class=\"kw1\">is</span> <span class=\"br0\">(</span>John, Bob, Mary, Serena, Jim<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Group <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Person<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Set\u00a0: Group<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      First\u00a0: Boolean\u00a0:= True;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Set'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Set <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> First <span class=\"kw1\">then</span><br/>               First\u00a0:= False;<br/>            <span class=\"kw1\">else</span><br/>               Put <span class=\"br0\">(</span>','<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            Put <span class=\"br0\">(</span>Person'Image <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   A\u00a0: Group\u00a0:= <span class=\"br0\">(</span>John | Bob | Mary | Serena =&gt; True, <span class=\"kw3\">others</span> =&gt; False<span class=\"br0\">)</span>;<br/>   B\u00a0: Group\u00a0:= <span class=\"br0\">(</span>Jim | Mary | John | Bob    =&gt; True, <span class=\"kw3\">others</span> =&gt; False<span class=\"br0\">)</span>;   <br/><span class=\"kw1\">begin</span><br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"A xor B = \"</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span>A <span class=\"kw2\">xor</span> B<span class=\"br0\">)</span>;     New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"A - B   = \"</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span>A <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> B<span class=\"br0\">)</span>; New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"B - A   = \"</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span>B <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> A<span class=\"br0\">)</span>; New_Line;<br/><span class=\"kw1\">end</span> Test_XOR;</pre>"}, {"lang": "Aime", "loc": 37, "block": "<pre class=\"text highlighted_source\">void<br/>show_sdiff(record u, record x)<br/>{<br/>    record r;<br/>    text s;<br/>\u00a0<br/>    r.copy(u);<br/>\u00a0<br/>    for (s in x) {<br/>        if (r.key(s)) {<br/>            r.delete(s);<br/>        } else {<br/>            r.p_integer(s, 0);<br/>        }<br/>    }<br/>\u00a0<br/>    r.vcall(o_, 0, \"\\n\");<br/>}<br/>\u00a0<br/>record<br/>new_set(...)<br/>{<br/>    record r;<br/>\u00a0<br/>    ucall(r_p_integer, 1, r, 0);<br/>\u00a0<br/>    r;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    show_sdiff(new_set(\"John\", \"Bob\", \"Mary\", \"Serena\"),<br/>               new_set(\"Jim\", \"Mary\", \"John\", \"Bob\"));<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "Apex", "loc": 28, "block": "<pre class=\"java highlighted_source\">Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> setA <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><span class=\"st0\">'John'</span>, <span class=\"st0\">'Bob'</span>, <span class=\"st0\">'Mary'</span>, <span class=\"st0\">'Serena'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> setB <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><span class=\"st0\">'Jim'</span>, <span class=\"st0\">'Mary'</span>, <span class=\"st0\">'John'</span>, <span class=\"st0\">'Bob'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Option 1</span><br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> notInSetA <span class=\"sy0\">=</span> setB.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>notInSetA.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> notInSetB <span class=\"sy0\">=</span> setA.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>notInSetB.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> symmetricDifference <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>symmetricDifference.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>notInSetA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>symmetricDifference.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>notInSetB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Option 2</span><br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> union <span class=\"sy0\">=</span> setA.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>union.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> intersection <span class=\"sy0\">=</span> setA.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>intersection.<span class=\"me1\">retainAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> symmetricDifference2 <span class=\"sy0\">=</span> union.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>symmetricDifference2.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>intersection<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span><span class=\"st0\">'Not in set A: '</span> <span class=\"sy0\">+</span> notInSetA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span><span class=\"st0\">'Not in set B: '</span> <span class=\"sy0\">+</span> notInSetB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span><span class=\"st0\">'Symmetric Difference: '</span> <span class=\"sy0\">+</span> symmetricDifference<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span><span class=\"st0\">'Symmetric Difference 2: '</span> <span class=\"sy0\">+</span> symmetricDifference2<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "AppleScript", "loc": 112, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- SYMMETRIC DIFFERENCE -------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- symmetricDifference\u00a0:: [a] -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> symmetricDifference<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    union<span class=\"br0\">(</span>difference<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span>, difference<span class=\"br0\">(</span>ys, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> symmetricDifference<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> a <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">set</span> b <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    symmetricDifference<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt;  {\"Serena\", \"Jim\"}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- delete\u00a0:: Eq a =&gt; a -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mbIndex <span class=\"kw3\">to</span> elemIndex<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>\u00a0<br/>    <span class=\"kw3\">if</span> mbIndex <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> lng &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">if</span> mbIndex <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> mbIndex <span class=\"sy0\">=</span> lng <span class=\"kw3\">then</span><br/>                <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">tell</span> xs <span class=\"kw3\">to</span> <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"br0\">(</span>mbIndex <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    <span class=\"kw1\">items</span> <span class=\"br0\">(</span>mbIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |<span class=\"kw1\">delete</span>|<br/>\u00a0<br/><span class=\"co1\">-- difference\u00a0:: [a] -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> difference<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, y<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> a <span class=\"kw2\">contains</span> y <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">my</span> |<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>y, a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs, ys<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> difference<br/>\u00a0<br/><span class=\"co1\">-- elemIndex\u00a0:: a -&gt; [a] -&gt; Maybe Int</span><br/><span class=\"kw3\">on</span> elemIndex<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>        <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> <span class=\"kw1\">missing value</span><br/><span class=\"kw3\">end</span> elemIndex<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- nub\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> nub<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> x <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>        <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> nub<span class=\"br0\">(</span>|<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> nub<br/>\u00a0<br/><span class=\"co1\">-- union\u00a0:: [a] -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> union<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> flipDelete<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">my</span> |<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> sx <span class=\"kw3\">to</span> nub<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    sx <span class=\"sy0\">&amp;</span> foldl<span class=\"br0\">(</span>flipDelete, nub<span class=\"br0\">(</span>ys<span class=\"br0\">)</span>, sx<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> union</pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">setA <span class=\"sy0\">=</span> John<span class=\"sy0\">,</span> Bob<span class=\"sy0\">,</span> Mary<span class=\"sy0\">,</span> Serena<br/>setB <span class=\"sy0\">=</span> Jim<span class=\"sy0\">,</span> Mary<span class=\"sy0\">,</span> John<span class=\"sy0\">,</span> Bob<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> Singles<span class=\"sy0\">,</span>\u00a0% SymmetricDifference<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\u00a0<br/>setA <span class=\"sy0\">=</span> John<span class=\"sy0\">,</span> Serena<span class=\"sy0\">,</span> Bob<span class=\"sy0\">,</span> Mary<span class=\"sy0\">,</span> Serena<br/>setB <span class=\"sy0\">=</span> Jim<span class=\"sy0\">,</span> Mary<span class=\"sy0\">,</span> John<span class=\"sy0\">,</span> Jim<span class=\"sy0\">,</span> Bob<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> Duplicates<span class=\"sy0\">,</span>\u00a0% SymmetricDifference<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>SymmetricDifference<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; returns the symmetric difference of A and B</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> A_<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_0%</span><br/>        <span class=\"kw1\">If</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>B<span class=\"sy0\">,</span> A_<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">And</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Result<span class=\"sy0\">,</span> A_<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span><br/>            Result <span class=\"sy0\">.=</span> A_<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\", \"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> B_<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%B_0%</span><br/>        <span class=\"kw1\">If</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B_<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">And</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Result<span class=\"sy0\">,</span> B_<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span><br/>            Result <span class=\"sy0\">.=</span> B_<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\", \"</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Result<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 33, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SYMMETRIC_DIFFERENCE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    load<span class=\"br0\">(</span><span class=\"st0\">\"John,Bob,Mary,Serena\"</span>,A<span class=\"br0\">)</span><br/>    load<span class=\"br0\">(</span><span class=\"st0\">\"Jim,Mary,John,Bob\"</span>,B<span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span><span class=\"st0\">\"A <span class=\"es0\">\\\\</span> B\"</span>,A,B<span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span><span class=\"st0\">\"B <span class=\"es0\">\\\\</span> A\"</span>,B,A<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"symmetric difference: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> C<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> A <span class=\"sy1\">&amp;&amp;</span> i <span class=\"kw1\">in</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> load<span class=\"br0\">(</span>str,arr,  i,n,temp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>str,temp,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      arr<span class=\"br0\">[</span>temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      C<span class=\"br0\">[</span>temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> show<span class=\"br0\">(</span>str,a,b,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s: \"</span>,str<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">      DIM list$(4)<br/>      list$() = \"Bob\", \"Jim\", \"John\", \"Mary\", \"Serena\"<br/>\u00a0<br/>      setA% =\u00a0%11101<br/>      PRINT \"Set A: \" FNlistset(list$(), setA%)<br/>      setB% =\u00a0%01111<br/>      PRINT \"Set B: \" FNlistset(list$(), setB%)<br/>\u00a0<br/>      REM Compute symmetric difference:<br/>      setC% = setA% EOR setB%<br/>      PRINT '\"Symmetric difference: \" FNlistset(list$(), setC%)<br/>\u00a0<br/>      REM Optional:<br/>      PRINT \"Set A \\ Set B: \" FNlistset(list$(), setA% AND NOT setB%)<br/>      PRINT \"Set B \\ Set A: \" FNlistset(list$(), setB% AND NOT setA%)<br/>      END<br/>\u00a0<br/>      DEF FNlistset(list$(), set%)<br/>      LOCAL i%, o$<br/>      FOR i% = 0 TO 31<br/>        IF set% AND 1 &lt;&lt; i% o$ += list$(i%) + \", \"<br/>      NEXT<br/>      = LEFT$(LEFT$(o$))</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">(SymmetricDifference=<br/>  A B x symdiff<br/>.  \u00a0!arg:(?A.?B)<br/>  &amp;\u00a0:?symdiff<br/>  &amp; (  \u00a0!A\u00a0!B<br/>     \u00a0:  \u00a0?<br/>          (\u00a0%@?x<br/>          &amp; (\u00a0!A:?\u00a0!x\u00a0?&amp;!B:?\u00a0!x\u00a0?<br/>            |\u00a0!symdiff:?\u00a0!x\u00a0?<br/>            |\u00a0!symdiff\u00a0!x:?symdiff<br/>            )<br/>          &amp; ~<br/>          )<br/>         \u00a0?<br/>    |\u00a0!symdiff<br/>    ));</pre>"}, {"lang": "C", "loc": 52, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>A<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>B<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define LEN(x) sizeof(x)/sizeof(x[0])</span><br/>\u00a0<br/><span class=\"coMULTI\">/* null duplicate items */</span><br/><span class=\"kw4\">void</span> uniq<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> in_set<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>match<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> match<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* x - y */</span><br/><span class=\"kw4\">void</span> show_diff<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> lenx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> leny<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> lenx<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>in_set<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> leny<span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* X ^ Y */</span><br/><span class=\"kw4\">void</span> show_sym_diff<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> lenx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> leny<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tshow_diff<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lenx<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> leny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_diff<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> leny<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> lenx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tuniq<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tuniq<span class=\"br0\">(</span>B<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"A <span class=\"es1\">\\\\</span> B:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_diff<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>B <span class=\"es1\">\\\\</span> A:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_diff<span class=\"br0\">(</span>B<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>A ^ B:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  show_sym_diff<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 28, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">SymmetricDifference</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> IEnumerableExtension<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> SymmetricDifference<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> @<span class=\"kw1\">this</span>, IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> that<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> @<span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">Except</span><span class=\"br0\">(</span>that<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>that<span class=\"sy0\">.</span><span class=\"me1\">Except</span><span class=\"br0\">(</span>@<span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> element <span class=\"kw1\">in</span> a<span class=\"sy0\">.</span><span class=\"me1\">SymmetricDifference</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>element<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   string setA<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span> , <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   string setB<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Jim\"</span> , <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   set<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <br/>       firstSet<span class=\"br0\">(</span> setA , setA <span class=\"sy2\">+</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span>,<br/>       secondSet<span class=\"br0\">(</span> setB , setB <span class=\"sy2\">+</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span>,<br/>       symdiff<span class=\"sy4\">;</span><br/>\u00a0<br/>   set_symmetric_difference<span class=\"br0\">(</span> firstSet.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, firstSet.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                             secondSet.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, secondSet.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                             inserter<span class=\"br0\">(</span> symdiff, symdiff.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   copy<span class=\"br0\">(</span> symdiff.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, symdiff.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, ostream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">cout</span> , <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> symmetric<span class=\"sy0\">-</span>difference <span class=\"br0\">[</span>s1 s2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>union <span class=\"br0\">(</span>difference s1 s2<span class=\"br0\">)</span> <span class=\"br0\">(</span>difference s2 s1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>symmetric<span class=\"sy0\">-</span>difference #<span class=\"br0\">{</span>:<span class=\"me1\">john</span>\u00a0:<span class=\"me1\">bob</span>\u00a0:<span class=\"me1\">mary</span>\u00a0:<span class=\"me1\">serena</span><span class=\"br0\">}</span> #<span class=\"br0\">{</span>:<span class=\"me1\">jim</span>\u00a0:<span class=\"me1\">mary</span>\u00a0:<span class=\"me1\">john</span>\u00a0:<span class=\"me1\">bob</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>set-exclusive-<span class=\"kw1\">or</span><br/>  <span class=\"br0\">(</span>remove-duplicates '<span class=\"br0\">(</span>John Serena Bob Mary Serena<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>remove-duplicates '<span class=\"br0\">(</span>Jim Mary John Jim Bob<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Set<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">;</span><br/>\u00a0<br/>    Set opSub<span class=\"br0\">(</span><span class=\"kw2\">in</span> Set other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> items.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>other.<span class=\"me1\">items</span>.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span>.<span class=\"me1\">Set</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Set opAdd<span class=\"br0\">(</span><span class=\"kw2\">in</span> Set other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Set<span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">items</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span>other <span class=\"sy0\">-</span> <span class=\"kw2\">this</span><span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Set<span class=\"sy0\">!</span>T symmetricDifference<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Set<span class=\"sy0\">!</span>T left<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Set<span class=\"sy0\">!</span>T right<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>left <span class=\"sy0\">-</span> right<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>right <span class=\"sy0\">-</span> left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> A <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span>.<span class=\"me1\">Set</span><span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> B <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span>.<span class=\"me1\">Set</span><span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"        A<span class=\"es1\">\\\\</span>B: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>A <span class=\"sy0\">-</span> B<span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"        B<span class=\"es1\">\\\\</span>A: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>B <span class=\"sy0\">-</span> A<span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"A symdiff B: \"</span><span class=\"sy0\">,</span> symmetricDifference<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 14, "block": "<pre class=\"text highlighted_source\">set\u00a0:setA set{\u00a0:John\u00a0:Bob\u00a0:Mary\u00a0:Serena }<br/>set\u00a0:setB set{\u00a0:Jim\u00a0:Mary\u00a0:John\u00a0:Bob }<br/>\u00a0<br/>symmetric-difference A B:<br/>\t}<br/>\tfor a in keys A:<br/>\t\tif not has B a:<br/>\t\t\ta<br/>\tfor b in keys B:<br/>\t\tif not has A b:<br/>\t\t\tb<br/>\tset{<br/>\u00a0<br/>!. symmetric-difference setA setB</pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> symmDiff<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;!</span> b<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;!</span> a<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"co1\"># value: &lt;symmDiff&gt;</span><br/>\u00a0<br/><span class=\"sy0\">?</span> symmDiff<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [\"Jim\", \"Serena\"].asSet()</span></pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; a = ~w[John Bob Mary Serena] |&gt; MapSet.new<br/>#MapSet&lt;[\"Bob\", \"John\", \"Mary\", \"Serena\"]&gt;<br/>iex(2)&gt; b = ~w[Jim Mary John Bob] |&gt; MapSet.new<br/>#MapSet&lt;[\"Bob\", \"Jim\", \"John\", \"Mary\"]&gt;<br/>iex(3)&gt; sym_dif = fn(a,b) -&gt; MapSet.difference(MapSet.union(a,b), MapSet.intersection(a,b)) end<br/>#Function&lt;12.54118792/2 in\u00a0:erl_eval.expr/5&gt;<br/>iex(4)&gt; sym_dif.(a,b)<br/>#MapSet&lt;[\"Jim\", \"Serena\"]&gt;</pre>"}, {"lang": "Erlang", "loc": 12, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>symdiff<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">SetA</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Bob\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Mary\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">SetB</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Mary\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"John\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">AUnionB</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">union</span><span class=\"br0\">(</span><span class=\"re5\">SetA</span><span class=\"sy1\">,</span><span class=\"re5\">SetB</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">AIntersectionB</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">intersection</span><span class=\"br0\">(</span><span class=\"re5\">SetA</span><span class=\"sy1\">,</span><span class=\"re5\">SetB</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">SymmDiffAB</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">subtract</span><span class=\"br0\">(</span><span class=\"re5\">AUnionB</span><span class=\"sy1\">,</span><span class=\"re5\">AIntersectionB</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span><span class=\"re5\">SymmDiffAB</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> set <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> set <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">val</span> a\u00a0: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> set <span class=\"br0\">[</span><span class=\"st0\">\"Bob\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">val</span> b\u00a0: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> set <span class=\"br0\">[</span><span class=\"st0\">\"Bob\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Mary\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> set <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "Eiffel", "loc": 45, "block": "<pre class=\"eiffel highlighted_source\">note<br/>\tdescription<span class=\"sy0\">:</span> <span class=\"st0\">\"Summary description for {SYMETRIC_DIFFERENCE_EXAMPLE}.\"</span><br/>\tURI<span class=\"sy0\">:</span> <span class=\"st0\">\"http://rosettacode.org/wiki/Symmetric_difference\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tSYMETRIC_DIFFERENCE_EXAMPLE<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ta,a1,b,b1<span class=\"sy0\">:</span> ARRAYED_SET <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> a.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">create</span> b.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\ta.<span class=\"me1\">compare_objects</span><br/>\t\t\tb.<span class=\"me1\">compare_objects</span><br/>\t\t\ta.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"John\"</span><span class=\"br0\">)</span><br/>\t\t\ta.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><br/>\t\t\ta.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Mary\"</span><span class=\"br0\">)</span><br/>\t\t\ta.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Serena\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">create</span> a1.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\ta1.<span class=\"me1\">copy</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\tb.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Jim\"</span><span class=\"br0\">)</span><br/>\t\t\tb.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Mary\"</span><span class=\"br0\">)</span><br/>\t\t\tb.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"John\"</span><span class=\"br0\">)</span><br/>\t\t\tb.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">create</span> b1.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\tb1.<span class=\"me1\">copy</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t    a1.<span class=\"me1\">subtract</span> <span class=\"br0\">(</span>b1<span class=\"br0\">)</span><br/>\t\t    b.<span class=\"me1\">subtract</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t\t    a1.<span class=\"me1\">merge</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\t\t    across a1 <span class=\"kw2\">as</span> c <span class=\"kw2\">loop</span><br/>\t\t    \tprint <span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">: symmetric-diff ( a b -- c )<br/>    [ diff ] [ swap diff ] 2bi append\u00a0;<br/>\u00a0<br/>{ \"John\" \"Bob\" \"Mary\" \"Serena\" } { \"Jim\" \"Mary\" \"John\" \"Bob\" } symmetric-diff .</pre>"}, {"lang": "Forth", "loc": 24, "block": "<pre class=\"text highlighted_source\">: elm\t( n --\u00a0; one cell per set )<br/>\t[ cell 8 * 1- ] literal umin CREATE 1 swap lshift , <br/>DOES&gt; \t( -- 2^n ) @\u00a0;<br/>\u00a0<br/>: universe\t( u \"name\" -- )<br/>\tdup 0 DO I elm latest swap LOOP<br/>\tCREATE dup , 0 DO , LOOP<br/>\tDOES&gt;  ( n a -- )  dup @ tuck cells +<br/>\t\tswap 0 <br/>\t\tDO\t( n a' )<br/>\t\t\tover I rshift 1 AND <br/>\t\t\tIF dup @ name&gt;string space type THEN<br/>\t\t\t1 cells -<br/>\t\tLOOP\t2drop\u00a0;<br/>\u00a0<br/>5 universe john bob mary serena jim\tpersons<br/>john bob mary serena or or or<br/>jim mary john bob    or or or<br/>\u00a0<br/>2dup xor           persons<br/>2dup -1 xor and cr persons<br/>swap -1 xor and cr persons<br/>cr bye<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 22, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Symmetric_difference<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">\"John  \"</span>, <span class=\"st0\">\"Bob   \"</span>, <span class=\"st0\">\"Mary  \"</span>, <span class=\"st0\">\"Serena\"</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">\"Jim   \"</span>, <span class=\"st0\">\"Mary  \"</span>, <span class=\"st0\">\"John  \"</span>, <span class=\"st0\">\"Bob   \"</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>outer1<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span> outer1   <span class=\"co1\">! Do not check duplicate items</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span>b <span class=\"sy0\">==</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> outer1<br/>\u00a0<br/>outer2<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span> outer2   <span class=\"co1\">! Do not check duplicate items</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> outer2<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "GAP", "loc": 8, "block": "<pre class=\"text highlighted_source\">SymmetricDifference\u00a0:= function(a, b)<br/>  return Union(Difference(a, b), Difference(b, a));<br/>end;<br/>\u00a0<br/>a\u00a0:= [\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"];<br/>b\u00a0:= [\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"];<br/>SymmetricDifference(a,b);<br/>[ \"Jim\", \"Serena\" ]</pre>"}, {"lang": "Go", "loc": 21, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a <span class=\"sy2\">=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">{</span><span class=\"st0\">\"John\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> b <span class=\"sy2\">=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">{</span><span class=\"st0\">\"Jim\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    sd <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>b<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            sd<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>a<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            sd<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>sd<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> symDiff <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a> s1, <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a> s2 <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> s1 <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> s2 <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><br/>    <span class=\"br0\">(</span>s1 <span class=\"sy0\">+</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>s1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20intersect\"><span class=\"kw5\">intersect</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Set<br/>\u00a0<br/>a <span class=\"sy0\">=</span> fromList <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><br/>b <span class=\"sy0\">=</span> fromList <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">-|-</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> Set a <span class=\"sy0\">-&gt;</span> Set a <span class=\"sy0\">-&gt;</span> Set a<br/>x <span class=\"sy0\">-|-</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x \\\\ y<span class=\"br0\">)</span> `union` <span class=\"br0\">(</span>y \\\\ x<span class=\"br0\">)</span><br/>  <span class=\"co1\">-- Equivalently: (x `union` y) \\\\ (x `intersect` y)</span></pre>"}, {"lang": "HicEst", "loc": 19, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CALL</span> SymmDiff<span class=\"br0\">(</span><span class=\"st0\">\"John,Serena,Bob,Mary,Serena,\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jim,Mary,John,Jim,Bob,\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> SymmDiff<span class=\"br0\">(</span><span class=\"st0\">\"John,Bob,Mary,Serena,\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jim,Mary,John,Bob,\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> SymmDiff<span class=\"br0\">(</span>set1<span class=\"sy1\">,</span> set2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">CHARACTER</span> set1<span class=\"sy1\">,</span> set2<span class=\"sy1\">,</span> answer<span class=\"sy1\">*</span><span class=\"nu0\">50</span><br/>  answer <span class=\"sy1\">=</span> <span class=\"st0\">\" \"</span><br/>  <span class=\"kw1\">CALL</span> setA_setB<span class=\"br0\">(</span> set1<span class=\"sy1\">,</span> set2<span class=\"sy1\">,</span> answer <span class=\"br0\">)</span><br/>  <span class=\"kw1\">CALL</span> setA_setB<span class=\"br0\">(</span> set2<span class=\"sy1\">,</span> set1<span class=\"sy1\">,</span> answer <span class=\"br0\">)</span><br/>  <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">,</span>Name<span class=\"br0\">)</span> answer          <span class=\"co1\">! answer = \"Serena,Jim,\" in both cases</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> setA_setB<span class=\"br0\">(</span> set1<span class=\"sy1\">,</span> set2<span class=\"sy1\">,</span> differences <span class=\"br0\">)</span><br/>  <span class=\"kw1\">CHARACTER</span> set1<span class=\"sy1\">,</span> set2<span class=\"sy1\">,</span> differences<span class=\"sy1\">,</span> a<span class=\"sy1\">*</span><span class=\"nu0\">100</span><br/>  a <span class=\"sy1\">=</span> set1<br/>  <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>a<span class=\"sy1\">,</span> <span class=\"sy2\">$</span>inLeXicon<span class=\"sy1\">=</span>set2<span class=\"br0\">)</span>     <span class=\"co1\">! eg   a &lt;= $John,Serena,$Bob,$Mary,Serena,</span><br/>  <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>a<span class=\"sy1\">,</span> Right<span class=\"sy1\">=</span><span class=\"st0\">\"$\"</span><span class=\"sy1\">,</span> Mark1<span class=\"sy1\">,</span> Right<span class=\"sy1\">=</span><span class=\"st0\">\",\"</span><span class=\"sy1\">,</span> Mark2<span class=\"sy1\">,</span> Delete<span class=\"sy1\">,</span> <span class=\"kw1\">DO</span><span class=\"br0\">)</span> <span class=\"co1\">! Serena,Serena,</span><br/>  <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>a<span class=\"sy1\">,</span> Option<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> SortDelDbls<span class=\"sy1\">=</span>a<span class=\"br0\">)</span> <span class=\"co1\">! Option=1: keep case;          Serena,</span><br/>  differences <span class=\"sy1\">=</span> TRIM<span class=\"br0\">(</span> differences <span class=\"br0\">)</span> <span class=\"sy1\">//</span> a<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 19, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>a <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>b <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>showset<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><br/>showset<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"sy1\">,</span>b<span class=\"br0\">)</span><br/>showset<span class=\"br0\">(</span><span class=\"st0\">\"(a<span class=\"es0\">\\\\</span>b) <span class=\"es0\">\\x</span>ef (b<span class=\"es0\">\\\\</span>a)\"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span>a <span class=\"sy1\">--</span> b<span class=\"br0\">)</span> <span class=\"sy1\">++</span> <span class=\"br0\">(</span>b <span class=\"sy1\">--</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>showset<span class=\"br0\">(</span><span class=\"st0\">\"(a<span class=\"es0\">\\\\</span>b)\"</span><span class=\"sy1\">,</span>a <span class=\"sy1\">--</span> b<span class=\"br0\">)</span><br/>showset<span class=\"br0\">(</span><span class=\"st0\">\"(b<span class=\"es0\">\\\\</span>a)\"</span><span class=\"sy1\">,</span>b <span class=\"sy1\">--</span> a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>  <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">procedure</span> showset<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">writes</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span><span class=\"st0\">\" = { \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>x<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">   A=: ~.;:<span class=\"st_h\">'John Serena Bob Mary Serena'</span><br/>   B=: ~.\u00a0;:<span class=\"st_h\">'Jim Mary John Jim Bob'</span><br/>\u00a0<br/>   <span class=\"sy0\">(</span>A-.B<span class=\"sy0\">)</span> , <span class=\"sy0\">(</span>B-.A<span class=\"sy0\">)</span>   <span class=\"co1\">NB. Symmetric Difference</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510<br/>\u2502Serena\u2502Jim\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518<br/>   A <span class=\"sy0\">(</span>-. , -.~<span class=\"sy0\">)</span> B    <span class=\"co1\">NB. Tacit equivalent</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510<br/>\u2502Serena\u2502Jim\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518</pre>"}, {"lang": "Java", "loc": 44, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SymmetricDifference <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> setA <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> setB <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Present our initial data set</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"In set A: \"</span> <span class=\"sy0\">+</span> setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"In set B: \"</span> <span class=\"sy0\">+</span> setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Option 1: union of differences</span><br/>        <span class=\"co1\">// Get our individual differences.</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> notInSetA <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        notInSetA.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> notInSetB <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        notInSetB.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// The symmetric difference is the concatenation of the two individual differences</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> symmetricDifference <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>notInSetA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        symmetricDifference.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>notInSetB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Option 2: union minus intersection</span><br/>        <span class=\"co1\">// Combine both sets</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> union <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        union.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Get the intersection</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> intersection <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        intersection.<span class=\"me1\">retainAll</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// The symmetric difference is the union of the 2 sets minus the intersection</span><br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> symmetricDifference2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>union<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        symmetricDifference2.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>intersection<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Present our results</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Not in set A: \"</span> <span class=\"sy0\">+</span> notInSetA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Not in set B: \"</span> <span class=\"sy0\">+</span> notInSetB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Symmetric Difference: \"</span> <span class=\"sy0\">+</span> symmetricDifference<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Symmetric Difference 2: \"</span> <span class=\"sy0\">+</span> symmetricDifference2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// in A but not in B</span><br/><span class=\"kw1\">function</span> relative_complement<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> A.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> B.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// in A or in B but not in both</span><br/><span class=\"kw1\">function</span> symmetric_difference<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> relative_complement<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>relative_complement<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span>.<span class=\"me1\">unique</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span>.<span class=\"me1\">unique</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>print<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>symmetric_difference<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\"># The following implementation of intersection (but not symmetric_difference) assumes that the<br/># elements of a (and of b) are unique and do not include null:<br/>def intersection(a; b): <br/>  reduce ((a + b) | sort)[] as $i<br/>    ([null, []]; if .[0] == $i then [null, .[1] + [$i]] else [$i, .[1]] end)<br/>  | .[1]\u00a0;<br/>\u00a0<br/>def symmetric_difference(a;b):<br/>  (a|unique) as $a | (b|unique) as $b <br/>  | (($a + $b) | unique) - (intersection($a;$b));<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">A = [\"John\", \"Bob\", \"Mary\", \"Serena\"]<br/>B = [\"Jim\", \"Mary\", \"John\", \"Bob\"]<br/>@show A B symdiff(A, B)</pre>"}, {"lang": "K", "loc": 10, "block": "<pre class=\"text highlighted_source\">  A:\u00a0?(\"John\";\"Bob\";\"Mary\";\"Serena\")<br/>  B:\u00a0?(\"Jim\";\"Mary\";\"John\";\"Bob\")<br/>\u00a0<br/>  A _dvl B               / in A but not in B<br/>\"Serena\"<br/>  B _dvl A               / in B but not in A<br/>\"Jim\"<br/>  (A _dvl B;B _dvl A)    / Symmetric difference<br/>(\"Serena\"<br/> \"Jim\")</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"A     = $a\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"B     = $b\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span>  a - b<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"A <span class=\"es1\">\\\\</span> B = $c\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> b - a<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"B <span class=\"es1\">\\\\</span> A = $d\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> c.<span class=\"me1\">union</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"A \u0394 B = $e\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[<br/>var(<br/>    'a'  = array(<br/>       'John'<br/>      ,'Bob'<br/>      ,'Mary'<br/>      ,'Serena'<br/>    )<br/>\u00a0<br/>   ,'b'  = array<br/>\u00a0<br/>);<br/>\u00a0<br/>$b-&gt;insert( 'Jim' ); // Alternate method of populating array<br/>$b-&gt;insert( 'Mary' );<br/>$b-&gt;insert( 'John' );<br/>$b-&gt;insert( 'Bob' );<br/>\u00a0<br/>$a-&gt;sort( true ); // arrays must be sorted (true = ascending) for difference to work<br/>$b-&gt;sort( true );<br/>\u00a0<br/>$a-&gt;difference( $b )-&gt;union( $b-&gt;difference( $a ) );<br/>\u00a0<br/>]<br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to diff\u00a0:a\u00a0:b [:acc []]<br/>  if empty?\u00a0:a [output sentence\u00a0:acc\u00a0:b]<br/>  ifelse member? first\u00a0:a\u00a0:b ~<br/>    [output (diff butfirst\u00a0:a  remove first\u00a0:a\u00a0:b \u00a0:acc)] ~<br/>    [output (diff butfirst\u00a0:a \u00a0:b    lput first\u00a0:a\u00a0:acc)]<br/>end<br/>\u00a0<br/>make \"a [John Bob Mary Serena]<br/>make \"b [Jim Mary John Bob]<br/>\u00a0<br/>show diff\u00a0:a\u00a0:b  \u00a0; [Serena Jim]</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\">A <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Mary\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"br0\">}</span><br/>B <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Mary\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"br0\">}</span><br/>\u00a0<br/>A_B <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> a <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> B<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"kw1\">then</span> A_B<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>B_A <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> b <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> A<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"kw1\">then</span> B_A<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> a_b <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>A_B<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> a_b <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> b_a <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>B_A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> b_a <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">A\u00a0:= {John, Bob, Mary, Serena};<br/>B\u00a0:= {Jim, Mary, John, Bob};</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">SymmetricDifference[x_List,y_List]\u00a0:= Join[Complement[x,Intersection[x,y]],Complement[y,Intersection[x,y]]]</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/setdiff.html\"><span class=\"kw2\">setdiff</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/setdiff.html\"><span class=\"kw2\">setdiff</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">4</span></pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">/* builtin */<br/>symmdifference({\"John\", \"Bob\", \"Mary\", \"Serena\"},<br/>               {\"Jim\", \"Mary\", \"John\", \"Bob\"});<br/>{\"Jim\", \"Serena\"}</pre>"}, {"lang": "Mercury", "loc": 21, "block": "<pre class=\"text highlighted_source\">:- module symdiff.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module list, set, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    A = set([\"John\", \"Bob\", \"Mary\", \"Serena\"]),<br/>    B = set([\"Jim\", \"Mary\", \"John\", \"Bob\"]),<br/>    print_set(\"A\\\\B\", DiffAB @ (A `difference` B),\u00a0!IO),<br/>    print_set(\"B\\\\A\", DiffBA @ (B `difference` A),\u00a0!IO),<br/>    print_set(\"A symdiff B\", DiffAB `union` DiffBA,\u00a0!IO).<br/>\u00a0<br/>:- pred print_set(string::in, set(T)::in, io::di, io::uo) is det.<br/>\u00a0<br/>print_set(Desc, Set,\u00a0!IO)\u00a0:-<br/>   to_sorted_list(Set, Elems),<br/>   io.format(\"%11s:\u00a0%s\\n\", [s(Desc), s(string(Elems))],\u00a0!IO).</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">import sets<br/>\u00a0<br/>var setA = [\"John\", \"Bob\", \"Mary\", \"Serena\"].toSet<br/>var setB = [\"Jim\", \"Mary\", \"John\", \"Bob\"].toSet<br/>echo setA -+- setB # Symmetric difference<br/>echo setA - setB # Difference<br/>echo setB - setA # Difference</pre>"}, {"lang": "Objective-C", "loc": 30, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a><span class=\"sy0\">*</span> setA <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"John\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Serena\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Bob\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Mary\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Serena\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a><span class=\"sy0\">*</span> setB <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Jim\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Mary\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"John\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Jim\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Bob\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Present our initial data set</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"In set A:\u00a0%@\"</span>, setA<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"In set B:\u00a0%@\"</span>, setB<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Get our individual differences.</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a><span class=\"sy0\">*</span> notInSetA <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>setB<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>notInSetA minusSet<span class=\"sy0\">:</span>setA<span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a><span class=\"sy0\">*</span> notInSetB <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>setA<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>notInSetB minusSet<span class=\"sy0\">:</span>setB<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// The symmetric difference is the concatenation of the two individual differences</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a><span class=\"sy0\">*</span> symmetricDifference <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>notInSetA<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>symmetricDifference unionSet<span class=\"sy0\">:</span>notInSetB<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Present our results</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Not in set A:\u00a0%@\"</span>, notInSetA<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Not in set B:\u00a0%@\"</span>, notInSetB<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Symmetric Difference:\u00a0%@\"</span>, symmetricDifference<span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> unique lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f lst x <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem x lst <span class=\"kw1\">then</span> lst <span class=\"kw1\">else</span> x<span class=\"sy0\">::</span>lst <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left f <span class=\"br0\">[</span><span class=\"br0\">]</span> lst<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span> <span class=\"sy0\">-|</span> <span class=\"br0\">)</span> a b <span class=\"sy0\">=</span><br/>  unique <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem v b<span class=\"br0\">)</span><span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span> <span class=\"sy0\">-|-</span> <span class=\"br0\">)</span> a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-|</span> a<span class=\"br0\">)</span> @ <span class=\"br0\">(</span>a <span class=\"sy0\">-|</span> b<span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 6, "block": "<pre class=\"oorexx highlighted_source\">a = <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">)</span><br/>b = <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- the xor operation is a symmetric difference</span><br/><span class=\"kw1\">do</span> item <span class=\"kw2\">over</span> a~xor<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">say</span> item<br/><span class=\"kw3\">end</span></pre>"}, {"lang": "Oz", "loc": 32, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SymDiff</span> A B<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Union <span class=\"br0\">{</span>Diff A B<span class=\"br0\">}</span> <span class=\"br0\">{</span>Diff B A<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% implement sets in terms of lists</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">MakeSet</span> Xs<span class=\"br0\">}</span><br/>     set<span class=\"br0\">(</span><span class=\"br0\">{</span>Nub2 Xs nil<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Diff</span> set<span class=\"br0\">(</span>A<span class=\"br0\">)</span> set<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     set<span class=\"br0\">(</span><span class=\"br0\">{</span>FoldL B List<span class=\"sy0\">.</span>subtract A<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Union</span> set<span class=\"br0\">(</span>A<span class=\"br0\">)</span> set<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     set<span class=\"br0\">(</span><span class=\"br0\">{</span>Append A B<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% --</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Nub2</span> Xs Ls<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> Xs <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> nil<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> X<span class=\"sy0\">|</span>Xr <span class=\"kw1\">andthen</span> <span class=\"br0\">{</span>Member X Ls<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Nub2 Xr Ls<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> X<span class=\"sy0\">|</span>Xr <span class=\"kw1\">then</span> X<span class=\"sy0\">|</span><span class=\"br0\">{</span>Nub2 Xr X<span class=\"sy0\">|</span>Ls<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>SymDiff<br/>\t <span class=\"br0\">{</span>MakeSet <span class=\"br0\">[</span>john bob mary serena<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t <span class=\"br0\">{</span>MakeSet <span class=\"br0\">[</span>jim mary john bob<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>SymDiff<br/>\t <span class=\"br0\">{</span>MakeSet <span class=\"br0\">[</span>john serena bob mary serena<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t <span class=\"br0\">{</span>MakeSet <span class=\"br0\">[</span>jim mary john jim bob<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 28, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">PROGRAM</span> Symmetric_difference<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  TName <span class=\"sy3\">=</span> <span class=\"br0\">(</span>Bob<span class=\"sy1\">,</span> Jim<span class=\"sy1\">,</span> John<span class=\"sy1\">,</span> Mary<span class=\"sy1\">,</span> Serena<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  TList <span class=\"sy3\">=</span> <span class=\"kw4\">SET</span> <span class=\"kw1\">OF</span> TName<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Put<span class=\"br0\">(</span>txt <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span> ResSet <span class=\"sy1\">:</span> TList<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">VAR</span><br/>  I <span class=\"sy1\">:</span> TName<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">Write</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">FOR</span> I <span class=\"kw1\">IN</span> ResSet <span class=\"kw1\">DO</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span>I<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  ListA <span class=\"sy1\">:</span> TList <span class=\"sy3\">=</span> <span class=\"br0\">[</span>John<span class=\"sy1\">,</span> Bob<span class=\"sy1\">,</span> Mary<span class=\"sy1\">,</span> Serena<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  ListB <span class=\"sy1\">:</span> TList <span class=\"sy3\">=</span> <span class=\"br0\">[</span>Jim<span class=\"sy1\">,</span> Mary<span class=\"sy1\">,</span> John<span class=\"sy1\">,</span> Bob<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Put<span class=\"br0\">(</span><span class=\"st0\">'ListA          -&gt; '</span><span class=\"sy1\">,</span> ListA<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Put<span class=\"br0\">(</span><span class=\"st0\">'ListB          -&gt; '</span><span class=\"sy1\">,</span> ListB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Put<span class=\"br0\">(</span><span class=\"st0\">'ListA &gt;&lt; ListB -&gt; '</span><span class=\"sy1\">,</span> ListA &gt;&lt; ListB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Put<span class=\"br0\">(</span><span class=\"st0\">'ListA -  ListB -&gt; '</span><span class=\"sy1\">,</span> ListA <span class=\"sy3\">-</span>  ListB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Put<span class=\"br0\">(</span><span class=\"st0\">'ListB -  ListA -&gt; '</span><span class=\"sy1\">,</span> ListB <span class=\"sy3\">-</span>  ListA<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">ReadLn</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">sd<span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  u<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>u<span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#u<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Vec</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>sd<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> symm_diff <span class=\"br0\">{</span><br/>        <span class=\"co1\"># two lists passed in as references</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">%in_a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">=&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">%in_b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">=&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"re0\">$in_b</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%in_a</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"re0\">$in_a</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%in_b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\"># return A-B, B-A, A xor B as ref to lists</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">\\@a</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@b</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>John Serena Bob  Mary Serena<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Jim  Mary   John Jim  Bob   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> symm_diff<span class=\"br0\">(</span><span class=\"re0\">\\@a</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"A<span class=\"es0\">\\\\</span>B: @$a<span class=\"es0\">\\n</span>B<span class=\"es0\">\\\\</span>A: @$b<span class=\"es0\">\\n</span>Symm: @$s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> \\A <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>John Serena Bob Mary Serena<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> \\B <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>Jim Mary John Jim Bob<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw3\">say</span>  A \u2216 B<span class=\"sy0\">;</span> <span class=\"co1\"># Set subtraction</span><br/><span class=\"kw3\">say</span>  B \u2216 A<span class=\"sy0\">;</span> <span class=\"co1\"># Set subtraction</span><br/><span class=\"kw3\">say</span>  A \u2296 B<span class=\"sy0\">;</span> <span class=\"co1\"># Symmetric difference</span></pre>"}, {"lang": "Phix", "loc": 30, "block": "<pre class=\"text highlighted_source\">function Union(sequence a, sequence b)<br/>    for i=1 to length(a) do<br/>        if not find(a[i],b) then<br/>            b = append(b,a[i])<br/>        end if<br/>    end for<br/>    return b<br/>end function<br/>\u00a0<br/>function Difference(sequence a, sequence b)<br/>sequence res = {}<br/>    for i=1 to length(a) do<br/>        if not find(a[i],b)<br/>        and not find(a[i],res) then<br/>            res = append(res,a[i])<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function Symmetric_Difference(sequence a, sequence b)<br/>    return Union(Difference(a, b), Difference(b, a))<br/>end function<br/>\u00a0<br/>sequence a = {\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"},<br/>         b = {\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"}<br/>?Symmetric_Difference(a,a)<br/>?Symmetric_Difference(a,b)<br/>?Symmetric_Difference(b,a)<br/>?Symmetric_Difference(b,b)</pre>"}, {"lang": "PHP", "loc": 22, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'John'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Bob'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Mary'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Serena'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Jim'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Mary'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'John'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Bob'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Remove any duplicates</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_unique\"><span class=\"kw3\">array_unique</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_unique\"><span class=\"kw3\">array_unique</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Get the individual differences, using array_diff()</span><br/><span class=\"re0\">$a_minus_b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_diff\"><span class=\"kw3\">array_diff</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b_minus_a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_diff\"><span class=\"kw3\">array_diff</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Simply merge them together to get the symmetric difference</span><br/><span class=\"re0\">$symmetric_difference</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_merge\"><span class=\"kw3\">array_merge</span></a><span class=\"br0\">(</span><span class=\"re0\">$a_minus_b</span><span class=\"sy0\">,</span> <span class=\"re0\">$b_minus_a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Present our results.</span><br/><span class=\"kw1\">echo</span> <span class=\"st_h\">'List A:               '</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"<span class=\"es1\">\\n</span>List B:               \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"<span class=\"es1\">\\n</span>A <span class=\"es1\">\\\\</span> B:                \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$a_minus_b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"<span class=\"es1\">\\n</span>B <span class=\"es1\">\\\\</span> A:                \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$b_minus_a</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"<span class=\"es1\">\\n</span>Symmetric difference: \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$symmetric_difference</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de symdiff (A B)<br/>   (uniq (conc (diff A B) (diff B A))) )</pre>"}, {"lang": "Pike", "loc": 5, "block": "<pre class=\"pike highlighted_source\">&gt; multiset<span class=\"br0\">(</span>string<span class=\"br0\">)</span> A <span class=\"sy0\">=</span> <span class=\"br0\">(</span>&lt; <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Serena\"</span> &gt;<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>&gt; multiset<span class=\"br0\">(</span>string<span class=\"br0\">)</span> B <span class=\"sy0\">=</span> <span class=\"br0\">(</span>&lt; <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Jim\"</span> &gt;<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>&gt; A^B<span class=\"sy0\">;</span>                                                               <br/>Result: <span class=\"br0\">(</span>&lt; <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Jim\"</span> &gt;<span class=\"br0\">)</span></pre>"}, {"lang": "PL/I", "loc": 21, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* PL/I ***************************************************************<br/>* 17.08.2013 Walter Pachl<br/>**********************************************************************/</span><br/><span class=\"sy0\">*</span>process source attributes xref<span class=\"sy0\">;</span><br/> sd<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'John'</span><span class=\"sy0\">,</span><span class=\"st0\">'Bob'</span><span class=\"sy0\">,</span><span class=\"st0\">'Mary'</span><span class=\"sy0\">,</span><span class=\"st0\">'Serena'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> b<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'Jim'</span><span class=\"sy0\">,</span><span class=\"st0\">'Mary'</span><span class=\"sy0\">,</span><span class=\"st0\">'John'</span><span class=\"sy0\">,</span><span class=\"st0\">'Bob'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> match<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> match<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> match<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>y<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>y<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> j<span class=\"sy0\">&gt;</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 21, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"st0\">\"John\"</span><br/>        <span class=\"st0\">\"Bob\"</span><br/>        <span class=\"st0\">\"Mary\"</span><br/>        <span class=\"st0\">\"Serena\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"st0\">\"Jim\"</span><br/>        <span class=\"st0\">\"Mary\"</span><br/>        <span class=\"st0\">\"John\"</span><br/>        <span class=\"st0\">\"Bob\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#  Full commandlet name and full parameter names</span><br/><span class=\"kw1\">Compare-Object</span> <span class=\"kw5\">-ReferenceObject</span> <span class=\"re0\">$A</span> <span class=\"kw5\">-DifferenceObject</span> <span class=\"re0\">$B</span><br/>\u00a0<br/><span class=\"co1\">#  Same commandlet using an alias and positional parameters</span><br/>Compare <span class=\"re0\">$A</span> <span class=\"re0\">$B</span><br/>\u00a0<br/><span class=\"co1\">#  A - B</span><br/>Compare <span class=\"re0\">$A</span> <span class=\"re0\">$B</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> SideIndicator <span class=\"kw4\">-eq</span> <span class=\"st0\">\"&lt;=\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-ExpandProperty</span> InputObject<br/>\u00a0<br/><span class=\"co1\">#  B - A</span><br/>Compare <span class=\"re0\">$A</span> <span class=\"re0\">$B</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> SideIndicator <span class=\"kw4\">-eq</span> <span class=\"st0\">\"=&gt;\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-ExpandProperty</span> InputObject</pre>"}, {"lang": "Prolog", "loc": 15, "block": "<pre class=\"prolog highlighted_source\">sym_diff <span class=\"sy1\">:-</span><br/>    A <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"st_h\">'John'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Serena'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Bob'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Mary'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Serena'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    B <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"st_h\">'Jim'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Mary'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'John'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Jim'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Bob'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'A\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'B\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    list_to_set<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> SA<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    list_to_set<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> SB<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'set from A\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>SA<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'set from B\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>SB<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    subtract<span class=\"br0\">(</span>SA<span class=\"sy4\">,</span> SB<span class=\"sy4\">,</span> DAB<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'difference A\\\\B\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>DAB<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    subtract<span class=\"br0\">(</span>SB<span class=\"sy4\">,</span> SA<span class=\"sy4\">,</span> DBA<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'difference B\\\\A\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>DBA<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    union<span class=\"br0\">(</span>DAB<span class=\"sy4\">,</span> DBA<span class=\"sy4\">,</span> Diff<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span><span class=\"st_h\">'symetric difference\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Diff<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 25, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Dim</span> A.s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> B.s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>A<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"John\"</span>: A<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Bob\"</span>: A<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Mary\"</span>: A<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Serena\"</span><br/>B<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Jim\"</span>:  B<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Mary\"</span>:B<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"John\"</span>: B<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Bob\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> a<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">; A-B</span><br/>  <span class=\"kw1\">For</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>B<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> A<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">=</span>B<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Break</span> <br/>    <span class=\"kw1\">ElseIf</span> b<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>B<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Debug</span> A<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> b<br/><span class=\"kw1\">Next</span> a<br/>\u00a0<br/><span class=\"kw1\">For</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>B<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; B-A</span><br/>  <span class=\"kw1\">For</span> a<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> A<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">=</span>B<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Break</span> <br/>    <span class=\"kw1\">ElseIf</span> a<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Debug</span> B<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> a<br/><span class=\"kw1\">Next</span> b</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> setA <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Serena\"</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setB <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"Jim\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bob\"</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setA ^ setB <span class=\"co1\"># symmetric difference of A and B</span><br/><span class=\"br0\">{</span><span class=\"st0\">'Jim'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Serena'</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setA - setB <span class=\"co1\"># elements in A that are not in B</span><br/><span class=\"br0\">{</span><span class=\"st0\">'Serena'</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setB - setA <span class=\"co1\"># elements in B that are not in A</span><br/><span class=\"br0\">{</span><span class=\"st0\">'Jim'</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setA | setB <span class=\"co1\"># elements in A or B (union)</span><br/><span class=\"br0\">{</span><span class=\"st0\">'John'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Bob'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Jim'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Serena'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Mary'</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> setA &amp; setB <span class=\"co1\"># elements in both A and B (intersection)</span><br/><span class=\"br0\">{</span><span class=\"st0\">'Bob'</span><span class=\"sy0\">,</span> <span class=\"st0\">'John'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Mary'</span><span class=\"br0\">}</span></pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">a &lt;- c( \"John\", \"Bob\", \"Mary\", \"Serena\" )<br/>b &lt;- c( \"Jim\", \"Mary\", \"John\", \"Bob\" )<br/>c(setdiff(b, a), setdiff(a, b))<br/>\u00a0<br/>a &lt;- c(\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\")<br/>b &lt;- c(\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\")<br/>c(setdiff(b, a), setdiff(a, b)) </pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define A (set \"John\" \"Bob\" \"Mary\" \"Serena\"))<br/>(define B (set \"Jim\" \"Mary\" \"John\" \"Bob\"))<br/>\u00a0<br/>(set-symmetric-difference A B)<br/>(set-subtract A B)<br/>(set-subtract B A)<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\">a: <span class=\"br0\">[</span>John Serena Bob Mary Serena<span class=\"br0\">]</span><br/>b: <span class=\"br0\">[</span>Jim Mary John Jim Bob<span class=\"br0\">]</span><br/><span class=\"kw3\">difference</span> a b</pre>"}, {"lang": "REXX", "loc": 37, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds  symmetric difference  and  symmetric AND  (between two lists).    */</span><br/>a= <span class=\"st0\">'[\"John\", \"Serena\", \"Bob\", \"Mary\", \"Serena\"]'</span> <span class=\"coMULTI\">/*note the duplicate element:  Serena  */</span><br/>b= <span class=\"st0\">'[\"Jim\", \"Mary\", \"John\", \"Jim\", \"Bob\"]'</span>       <span class=\"coMULTI\">/*  \"   \"       \"       \"      Jim     */</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   SD<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   SA<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;    SD=;     SA=          <span class=\"coMULTI\">/*falsify booleans; zero &amp; nullify vars*/</span><br/>a<span class=\"sy0\">.</span>1=a;         <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500list A ='</span>  a   <span class=\"coMULTI\">/*assign a list and display it to term.*/</span><br/>a<span class=\"sy0\">.</span>2=b;         <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500list B ='</span>  b   <span class=\"coMULTI\">/*   \"   \"   \"   \"     \"     \"  \"   \"  */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  parse the two lists.           */</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>                                <span class=\"coMULTI\">/*process both lists  (stemmed array). */</span><br/>    a<span class=\"sy0\">.</span>k=<span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>k, , <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>, ,<span class=\"st0\">']'</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*strip leading and trailing brackets. */</span><br/>               <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> a<span class=\"sy0\">.</span>k=<span class=\"st0\">''</span>              <span class=\"coMULTI\">/*parse names  [they may have blanks]. */</span><br/>               a<span class=\"sy0\">.</span>k=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>k, , <span class=\"st0\">','</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*strip all commas (if there are any). */</span><br/>               <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  a<span class=\"sy0\">.</span>k   <span class=\"st0\">'\"'</span>  _  <span class=\"st0\">'\"'</span>  a<span class=\"sy0\">.</span>k <span class=\"coMULTI\">/*obtain the name of the list.         */</span><br/>               a<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j=_                           <span class=\"coMULTI\">/*store the name of the list.          */</span><br/>               a<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/*make a boolean value.                */</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>    a<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0=j-<span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*the number of this list  (of names). */</span><br/>    <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  find the symmetric difference. */</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;             ko=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span>, k<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*process both lists;   KO=other list. */</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> a<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0;       _=a<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j           <span class=\"coMULTI\">/*process the list names.              */</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>a<span class=\"sy0\">.</span>ko<span class=\"sy0\">.</span>_ <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>SD<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   SD<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>      <span class=\"coMULTI\">/*if not in both, then  \u00b7\u00b7\u00b7            */</span><br/>                               SD=SD  <span class=\"st0\">'\"'</span>_<span class=\"st0\">'\",'</span>   <span class=\"coMULTI\">/*add to symmetric difference list.    */</span><br/>                               <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>    <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*k*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  SD \u2261  symmetric difference.    */</span><br/>SD= <span class=\"st0\">\"[\"</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>SD<span class=\"br0\">)</span>, <span class=\"st0\">'T'</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"st0\">']'</span>            <span class=\"coMULTI\">/*clean up and add brackets [ ]  to it.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'symmetric difference ='</span>   SD                <span class=\"coMULTI\">/*display the symmetric difference.    */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  locate the symmetric AND.      */</span><br/>   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> a<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>0;     _=a<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>j                <span class=\"coMULTI\">/*process the   A   list names.        */</span><br/>   <span class=\"kw1\">if</span> a<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>_ <span class=\"sy0\">&amp;</span> a<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>_ <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>SA<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   SA<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*if it's common to both, then  \u00b7\u00b7\u00b7    */</span><br/>                                  SA=SA <span class=\"st0\">'\"'</span>_<span class=\"st0\">'\",'</span> <span class=\"coMULTI\">/*add to symmetric AND  list.          */</span><br/>                                  <span class=\"kw3\">end</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  SA \u2261  symmetric AND.           */</span><br/>SA= <span class=\"st0\">\"[\"</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>SA<span class=\"br0\">)</span>, <span class=\"st0\">'T'</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"st0\">']'</span>            <span class=\"coMULTI\">/*clean up and add brackets [ ]  to it.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'       symmetric AND ='</span>   SA                <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>alist = []<br/>blist = []<br/>alist = [\"john\", \"bob\", \"mary\", \"serena\"]<br/>blist = [\"jim\", \"mary\", \"john\", \"bob\"]<br/>\u00a0<br/>alist2 = []<br/>for i = 1 to len(alist) <br/>    flag = 0    <br/>    for j = 1 to len(blist)<br/>        if alist[i] = blist[j]  flag = 1 ok<br/>    next<br/>    if (flag = 0) add(alist2, alist[i]) ok<br/>next<br/>\u00a0<br/>blist2 = []<br/>for j = 1 to len(alist) <br/>    flag = 0    <br/>    for i = 1 to len(blist)<br/>        if alist[i] = blist[j]  flag = 1 ok<br/>    next<br/>    if (flag = 0) add(blist2, blist[j]) ok<br/>next<br/>see \"a xor b\u00a0:\" see nl<br/>see alist2<br/>see blist2 see nl<br/>see \"a-b\u00a0:\" see nl <br/>see alist2 see nl <br/>see \"b-a\u00a0:\" see nl<br/>see blist2 see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">a = <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span><br/>b = <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span><br/><span class=\"co1\"># the union minus the intersection:</span><br/><span class=\"kw3\">p</span> sym_diff = <span class=\"br0\">(</span>a <span class=\"sy0\">|</span> b<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> b<span class=\"br0\">)</span>  <span class=\"co1\"># =&gt; [\"Serena\", \"Jim\"]</span></pre>"}, {"lang": "Run BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>setA$ = \"John,Bob,Mary,Serena\"<br/>setB$ = \"Jim,Mary,John,Bob\"<br/>\u00a0<br/>x$ = b$(setA$,setB$)<br/>print word$(x$,1,\",\")<br/>c$ = c$ + x$<br/>\u00a0<br/>x$ = b$(setB$,setA$)<br/>print word$(x$,1,\",\")<br/>print c$;x$<br/>end<br/>function b$(a$,b$)<br/> i = 1<br/> while word$(a$,i,\",\") &lt;&gt; \"\"<br/>  a1$ = word$(a$,i,\",\")<br/>  j   = instr(b$,a1$)<br/>  if j &lt;&gt; 0 then b$ = left$(b$,j-1) + mid$(b$,j+len(a1$)+1)<br/>  i   = i + 1<br/>wend<br/>end function</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">)</span><br/>s1<span class=\"sy0\">:</span> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">Set</span><span class=\"br0\">[</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">String</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span>John, Serena, Bob, Mary<span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2 <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">)</span><br/>s2<span class=\"sy0\">:</span> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">Set</span><span class=\"br0\">[</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">String</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span>Jim, Mary, John, Bob<span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>s1 diff s2<span class=\"br0\">)</span> union <span class=\"br0\">(</span>s2 diff s1<span class=\"br0\">)</span><br/>res46<span class=\"sy0\">:</span> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">Set</span><span class=\"br0\">[</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">String</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span>Serena, Jim<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 32, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; -- given two sets represented as lists, return (A \\ B)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> a<span class=\"br0\">)</span> <br/>         '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; drop head of a if it's a duplicate</span><br/>         <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span> <span class=\"co1\">; head of a is in b so drop it</span><br/>         <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"co1\">; head of a not in b, so keep it</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; -- given two sets represented as lists, return symmetric difference</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>symmetric<span class=\"sy0\">-</span>difference a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b a b<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; -- test case</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> A '<span class=\"br0\">(</span>John Bob Mary Serena<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> B '<span class=\"br0\">(</span>Jim Mary John Bob<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"A<span class=\"es0\">\\\\</span>B: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b A B<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"B<span class=\"es0\">\\\\</span>A: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>b B A<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Symmetric difference: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>symmetric<span class=\"sy0\">-</span>difference A B<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; -- extra test as we are using lists</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Symmetric difference 2: \"</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>symmetric<span class=\"sy0\">-</span>difference '<span class=\"br0\">(</span>John Serena Bob Mary Serena<span class=\"br0\">)</span><br/>                               '<span class=\"br0\">(</span>Jim Mary John Jim Bob<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: striSet is set of string;<br/>\u00a0<br/>enable_output(striSet);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const striSet: setA is {\"John\", \"Bob\" , \"Mary\", \"Serena\"};<br/>    const striSet: setB is {\"Jim\" , \"Mary\", \"John\", \"Bob\"   };<br/>  begin<br/>    writeln(setA &gt;&lt; setB);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var a = <span class=\"br0\">[</span><span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Serena\"</span>, <span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"Serena\"</span><span class=\"br0\">]</span>;<br/>var b = <span class=\"br0\">[</span><span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Mary\"</span>, <span class=\"st0\">\"John\"</span>, <span class=\"st0\">\"Jim\"</span>, <span class=\"st0\">\"Bob\"</span><span class=\"br0\">]</span>;<br/>a ^ b <span class=\"sy0\">-&gt;</span> unique.<span class=\"me1\">dump</span>.<span class=\"me1\">say</span>;</pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re0\">A</span> <span class=\"re0\">B</span>|<br/><span class=\"re0\">A</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Set</span> new.<br/><span class=\"re0\">B</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Set</span> new.<br/><span class=\"re0\">A</span> addAll: <span class=\"sy0\">#</span><span class=\"br0\">(</span> <span class=\"st0\">'John'</span> <span class=\"st0\">'Bob'</span> <span class=\"st0\">'Mary'</span> <span class=\"st0\">'Serena'</span> <span class=\"br0\">)</span>.<br/><span class=\"re0\">B</span> addAll: <span class=\"sy0\">#</span><span class=\"br0\">(</span> <span class=\"st0\">'Jim'</span> <span class=\"st0\">'Mary'</span> <span class=\"st0\">'John'</span> <span class=\"st0\">'Bob'</span> <span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re0\">A</span> - <span class=\"re0\">B</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re0\">B</span> - <span class=\"re0\">A</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "SQL/PostgreSQL", "loc": 14, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">OR</span> <span class=\"kw1\">REPLACE</span> <span class=\"kw1\">FUNCTION</span> arrxor<span class=\"br0\">(</span>anyarray<span class=\"sy0\">,</span>anyarray<span class=\"br0\">)</span> <span class=\"kw1\">RETURNS</span> anyarray <span class=\"kw1\">AS</span> $$<br/><span class=\"kw1\">SELECT</span> ARRAY<span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span><br/>        <span class=\"kw1\">SELECT</span> r<span class=\"sy0\">.</span>elements<br/>        <span class=\"kw1\">FROM</span>    <span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>unnest<span class=\"br0\">(</span>$1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">UNION</span> <span class=\"kw1\">ALL</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span>unnest<span class=\"br0\">(</span>$2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span> <span class=\"kw1\">AS</span> r <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> elements<span class=\"br0\">)</span><br/>        <span class=\"kw1\">GROUP</span> <span class=\"kw1\">BY</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">HAVING</span> <span class=\"kw1\">MIN</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">MAX</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>$$ <span class=\"kw1\">LANGUAGE</span> <span class=\"kw1\">SQL</span> strict immutable;</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let setA\u00a0: Set&lt;String&gt; = [\"John\", \"Bob\", \"Mary\", \"Serena\"]<br/>let setB\u00a0: Set&lt;String&gt; = [\"Jim\", \"Mary\", \"John\", \"Bob\"]<br/>println(setA.exclusiveOr(setB)) // symmetric difference of A and B<br/>println(setA.subtract(setB)) // elements in A that are not in B</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw1\">set</span><br/>\u00a0<br/><span class=\"kw1\">set</span> A <span class=\"br0\">{</span>John Bob Mary Serena<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> B <span class=\"br0\">{</span>Jim Mary John Bob<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> AnotB   <span class=\"br0\">[</span>struct::<span class=\"kw1\">set</span> difference <span class=\"re0\">$A</span> <span class=\"re0\">$B</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> BnotA   <span class=\"br0\">[</span>struct::<span class=\"kw1\">set</span> difference <span class=\"re0\">$B</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> SymDiff <span class=\"br0\">[</span>struct::<span class=\"kw1\">set</span> union <span class=\"re0\">$AnotB</span> <span class=\"re0\">$BnotA</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"A<span class=\"es0\">\\\\</span>B = $AnotB\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"B<span class=\"es0\">\\\\</span>A = $BnotA\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"A<span class=\"es0\">\\u</span>2296B = $SymDiff\"</span><br/>\u00a0<br/><span class=\"co1\"># Of course, the library already has this operation directly...</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Direct Check: [struct::set symdiff $A $B]\"</span></pre>"}, {"lang": "TUSCRIPT", "loc": 22, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>a=\"John'Bob'Mary'Serena\"<br/>b=\"Jim'Mary'John'Bob\"<br/>\u00a0<br/>DICT names CREATE<br/>\u00a0<br/>SUBMACRO checknames<br/>!var,val<br/>PRINT val,\": \",var<br/> LOOP n=var<br/>  DICT names APPEND/QUIET n,num,cnt,val;\" \"<br/> ENDLOOP<br/>ENDSUBMACRO<br/>\u00a0<br/>CALL checknames (a,\"a\")<br/>CALL checknames (b,\"b\")<br/>\u00a0<br/>DICT names UNLOAD names,num,cnt,val<br/>\u00a0<br/>LOOP n=names,v=val<br/>PRINT n,\" in: \",v<br/>ENDLOOP</pre>"}, {"lang": "UNIX Shell", "loc": 43, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">uniq</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">u</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"644024\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span><span class=\"co1\">${#u[@]}</span>;i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">j</span>=i+<span class=\"nu0\">1</span>;j<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#u[@]}</span>;j++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>      <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${u[$i]}</span>\"</span> = <span class=\"st0\">\"<span class=\"es3\">${u[$j]}</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">unset</span> u<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"re2\">u</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${u[@]}</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">a</span>=<span class=\"br0\">(</span>John Serena Bob Mary Serena<span class=\"br0\">)</span><br/><span class=\"re2\">b</span>=<span class=\"br0\">(</span>Jim Mary John Jim Bob<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">uniq</span> <span class=\"st0\">\"<span class=\"es3\">${a[@]}</span>\"</span><br/><span class=\"re2\">au</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${u[@]}</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">uniq</span> <span class=\"st0\">\"<span class=\"es3\">${b[@]}</span>\"</span><br/><span class=\"re2\">bu</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${u[@]}</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re2\">ab</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${au[@]}</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#au[@]}</span>;i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">j</span>=<span class=\"nu0\">0</span>;j<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#bu[@]}</span>;j++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${ab[$i]}</span>\"</span> = <span class=\"st0\">\"<span class=\"es3\">${bu[$j]}</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">unset</span> ab<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span><br/><span class=\"re2\">ab</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${ab[@]}</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re2\">ba</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${bu[@]}</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#bu[@]}</span>;i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">j</span>=<span class=\"nu0\">0</span>;j<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#au[@]}</span>;j++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${ba[$i]}</span>\"</span> = <span class=\"st0\">\"<span class=\"es3\">${au[$j]}</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">unset</span> ba<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span><br/><span class=\"re2\">ba</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${ba[@]}</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re2\">sd</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${ab[@]}</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${ba[@]}</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Set A = <span class=\"es3\">${a[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"      = <span class=\"es3\">${au[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Set B = <span class=\"es3\">${b[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"      = <span class=\"es3\">${bu[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"A - B = <span class=\"es3\">${ab[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"B - A = <span class=\"es3\">${ba[@]}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Symmetric difference = <span class=\"es3\">${sd[@]}</span>\"</span></pre>"}, {"lang": "Ursala", "loc": 13, "block": "<pre class=\"text highlighted_source\">a = &lt;'John','Bob','Mary','Serena'&gt;<br/>b = &lt;'Jim','Mary','John','Bob'&gt;<br/>\u00a0<br/>#cast\u00a0%sLm<br/>\u00a0<br/>main =<br/>\u00a0<br/>&lt;<br/>   'a': a,<br/>   'b': b,<br/>   'a not b': ~&amp;j/a b,<br/>   'b not a': ~&amp;j/b a,<br/>   'symmetric difference': ~&amp;jrljTs/a b&gt;</pre>"}, {"lang": "Yabasic", "loc": 45, "block": "<pre class=\"text highlighted_source\">lista1$ = \"John Serena Bob Mary Serena\"<br/>lista2$ = \"Jim Mary John Jim Bob\"<br/>\u00a0<br/>lista1$ = quitadup$(lista1$)<br/>lista2$ = quitadup$(lista2$)<br/>res$ = quitacomun$(lista1$, lista2$)<br/>res$ = res$ + quitacomun$(lista2$, lista1$)<br/>print res$<br/>\u00a0<br/>\u00a0<br/>sub quitadup$(l$)<br/>\tl$ = l$ + \" \"<br/>\treturn quitarep$(l$)<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub quitacomun$(l1$, l2$)<br/>\tl1$ = l1$ + \" \"<br/>\tl2$ = l2$ + \" \"<br/>\treturn quitarep$(l1$, l2$)<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub quitarep$(l1$, l2$)<br/>\tlocal pos, n, x, listar$, nombre$, largo<br/>\u00a0<br/>\tlargo = len(l1$)<br/>\tpos = 1<br/>\twhile(true)<br/>\t\tn = instr(l1$, \" \", pos)<br/>\t\tif n &gt; 0 then<br/>\t\t\tnombre$ = mid$(l1$, pos, n-pos)<br/>\t\t\tif numparams = 1 then<br/>\t\t\t\tx = instr(listar$, nombre$)<br/>\t\t\telse<br/>\t\t\t\tx = instr(l2$, nombre$)<br/>\t\t\tend if<br/>\t\t\tif x = 0 listar$ = listar$ + nombre$ + \" \"<br/>\t\t\tpos = n + 1<br/>\t\telse<br/>\t\t\treturn listar$<br/>\t\tend if<br/>\twend<br/>end sub<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fcn setCommon(list1,list2){ list1.filter(list2.holds); }<br/>fcn sdiff(list1,list2)<br/>   { list1.extend(list2).copy().removeEach(setCommon(list1,list2)) }</pre>"}]}