{"task": "Circles_of_given_radius_through_two_points", "blocks": [{"lang": "ALGOL 68", "loc": 107, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># represents a point                                                 #</span><br/><span class=\"kw4\">MODE</span> POINT <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> y <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns TRUE if p1 is the same point as p2, FALSE otherwise        #</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> POINT p2 <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">=</span> x <span class=\"kw6\">OF</span> p2 <span class=\"kw16\">AND</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">=</span> y <span class=\"kw6\">OF</span> p2<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># represents a circle with centre c and radius r                     #</span><br/><span class=\"kw4\">MODE</span> CIRCLE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> POINT c<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns the difference in x-coordinate of two points               #</span><br/><span class=\"kw4\">PRIO</span> XDIFF <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   XDIFF <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> POINT p2 <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> x <span class=\"kw6\">OF</span> p2<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns the difference in y-coordinate of two points               #</span><br/><span class=\"kw4\">PRIO</span> YDIFF <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   YDIFF <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> POINT p2 <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> y <span class=\"kw6\">OF</span> p2<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns the distance between two points                            #</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">-</span>     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> POINT p2 <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> <br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">REAL</span> x diff   <span class=\"sy1\">=</span> p1 XDIFF p2<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">REAL</span> y diff   <span class=\"sy1\">=</span> p1 YDIFF p2<span class=\"sy1\">;</span><br/>        <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> x diff <span class=\"sy1\">*</span> xdiff <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span> y diff <span class=\"sy1\">*</span> y diff <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># - #</span><br/><span class=\"coMULTI\"># generate a human-readable version of the circle c                  #</span><br/><span class=\"kw4\">OP</span> TOSTRING <span class=\"sy1\">=</span> <span class=\"br0\">(</span> CIRCLE c <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>       <span class=\"br0\">(</span> <span class=\"st0\">\"radius:\"</span><br/>       <span class=\"sy1\">+</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span>      r <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">+</span> <span class=\"st0\">\" @(\"</span><br/>       <span class=\"sy1\">+</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> c <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">+</span> <span class=\"st0\">\", \"</span><br/>       <span class=\"sy1\">+</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> c <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">+</span> <span class=\"st0\">\")\"</span><br/>       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># modes to represent the results of the circles procedure ...        #</span><br/><span class=\"coMULTI\"># infinite number of circles                                         #</span><br/><span class=\"kw4\">MODE</span> INFINITECIRCLES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> t<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># two possible circles                                               #</span><br/><span class=\"kw4\">MODE</span> TWOCIRCLES      <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> CIRCLE a<span class=\"sy1\">,</span> CIRCLE b <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># one possible circle results in a CIRCLE                            #</span><br/><span class=\"coMULTI\"># no possible circles                                                #</span><br/><span class=\"kw4\">MODE</span> NOCIRCLES       <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> reason<span class=\"sy1\">,</span> POINT p1<span class=\"sy1\">,</span> POINT p2<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># mode returned by the circles procedure                             #</span><br/><span class=\"kw4\">MODE</span> POSSIBLECIRCLES <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span> INFINITECIRCLES<span class=\"sy1\">,</span> TWOCIRCLES<span class=\"sy1\">,</span> CIRCLE<span class=\"sy1\">,</span> NOCIRCLES <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the circles of radius r that can be drawn through          #</span><br/><span class=\"coMULTI\">#         points p1 and p2                                           #</span><br/><span class=\"kw4\">PROC</span> circles <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> POINT p2<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span>POSSIBLECIRCLES<span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> r <span class=\"sy1\">&lt;</span> 0 <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># negative radius - there are no circles          #</span><br/>         NOCIRCLES<span class=\"br0\">(</span> <span class=\"st0\">\"negative radius\"</span><span class=\"sy1\">,</span> p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>     <span class=\"kw2\">ELIF</span> p1 <span class=\"sy1\">=</span> p2 <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># coincident points                           #</span><br/>         <span class=\"kw2\">IF</span> r <span class=\"sy1\">=</span> <span class=\"re1\">0.0</span> <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># only one circle of radius 0 is possible               #</span><br/>             CIRCLE<span class=\"br0\">(</span> p1<span class=\"sy1\">,</span> <span class=\"re1\">0.0</span> <span class=\"br0\">)</span><br/>         <span class=\"kw2\">ELSE</span><br/>             <span class=\"coMULTI\"># an infinite number of circles can be drawn through    #</span><br/>             <span class=\"coMULTI\"># the point                                             #</span><br/>             INFINITECIRCLES<span class=\"br0\">(</span> <span class=\"st0\">\"infinite\"</span><span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>         <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\"># two possible circles                                     #</span><br/>         <span class=\"kw3\">REAL</span> distance <span class=\"sy1\">=</span> p1 <span class=\"sy1\">-</span> p2<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">IF</span>   distance <span class=\"sy1\">&gt;</span> 2 <span class=\"sy1\">*</span> r <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># the points are too far apart                          #</span><br/>             NOCIRCLES<span class=\"br0\">(</span> <span class=\"st0\">\"points too far apart\"</span><span class=\"sy1\">,</span> p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>         <span class=\"kw2\">ELIF</span> distance <span class=\"sy1\">=</span> 2 <span class=\"sy1\">*</span> r <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># the points are on the diameter of the circle          #</span><br/>             CIRCLE<span class=\"br0\">(</span> POINT<span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> p2 XDIFF p1 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2 <span class=\"br0\">)</span><br/>                          <span class=\"sy1\">,</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> p2 YDIFF p1 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2 <span class=\"br0\">)</span><br/>                          <span class=\"br0\">)</span><br/>                   <span class=\"sy1\">,</span> r<br/>                   <span class=\"br0\">)</span><br/>         <span class=\"kw2\">ELSE</span><br/>             <span class=\"coMULTI\"># it is possible to draw two circles through the points #</span><br/>             <span class=\"kw3\">REAL</span> half x sum      <span class=\"sy1\">=</span> <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">+</span> x <span class=\"kw6\">OF</span> p2 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2<span class=\"sy1\">;</span><br/>             <span class=\"kw3\">REAL</span> half y sum      <span class=\"sy1\">=</span> <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">+</span> y <span class=\"kw6\">OF</span> p2 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2<span class=\"sy1\">;</span><br/>             <span class=\"kw3\">REAL</span> mirror distance <span class=\"sy1\">=</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> r <span class=\"sy1\">*</span> r <span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> distance <span class=\"sy1\">*</span> distance <span class=\"br0\">)</span> <span class=\"sy1\">/</span> 4 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             <span class=\"kw3\">REAL</span> x mirror        <span class=\"sy1\">=</span> <span class=\"br0\">(</span> mirror distance <span class=\"sy1\">*</span> <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> y <span class=\"kw6\">OF</span> p2 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">/</span> distance<span class=\"sy1\">;</span><br/>             <span class=\"kw3\">REAL</span> y mirror        <span class=\"sy1\">=</span> <span class=\"br0\">(</span> mirror distance <span class=\"sy1\">*</span> <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p2 <span class=\"sy1\">-</span> x <span class=\"kw6\">OF</span> p1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">/</span> distance<span class=\"sy1\">;</span><br/>             TWOCIRCLES<span class=\"br0\">(</span> CIRCLE<span class=\"br0\">(</span> POINT<span class=\"br0\">(</span> half x sum <span class=\"sy1\">+</span> y mirror<span class=\"sy1\">,</span> half y sum <span class=\"sy1\">+</span> x mirror <span class=\"br0\">)</span><span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>                       <span class=\"sy1\">,</span> CIRCLE<span class=\"br0\">(</span> POINT<span class=\"br0\">(</span> half x sum <span class=\"sy1\">-</span> y mirror<span class=\"sy1\">,</span> half y sum <span class=\"sy1\">-</span> x mirror <span class=\"br0\">)</span><span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>                       <span class=\"br0\">)</span><br/>         <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># circles #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the circles procedure with the examples from the task    #</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> circles <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> x1<span class=\"sy1\">,</span> y1<span class=\"sy1\">,</span> x2<span class=\"sy1\">,</span> y2<span class=\"sy1\">,</span> r <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw2\">CASE</span> circles<span class=\"br0\">(</span> POINT<span class=\"br0\">(</span> x1<span class=\"sy1\">,</span> y1 <span class=\"br0\">)</span><span class=\"sy1\">,</span> POINT<span class=\"br0\">(</span> x2<span class=\"sy1\">,</span> y2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> r <span class=\"br0\">)</span><br/>          <span class=\"kw2\">IN</span> <span class=\"br0\">(</span> NOCIRCLES       n <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"No circles\u00a0: \"</span><span class=\"sy1\">,</span> reason <span class=\"kw6\">OF</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"br0\">(</span> TWOCIRCLES      t <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Two circles: \"</span><br/>                                           <span class=\"sy1\">,</span> TOSTRING a <span class=\"kw6\">OF</span> t<br/>                                           <span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><br/>                                           <span class=\"sy1\">,</span> TOSTRING b <span class=\"kw6\">OF</span> t<br/>                                           <span class=\"br0\">)</span><br/>                                         <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"br0\">(</span> CIRCLE          c <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"One circle\u00a0: \"</span><span class=\"sy1\">,</span> TOSTRING c <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"br0\">(</span> INFINITECIRCLES i <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Infinite circles\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>         <span class=\"kw2\">OUT</span> <span class=\"kw2\">BEGIN</span><br/>                 <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Unexpected circles result\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                 stop<br/>             <span class=\"kw2\">END</span><br/>        <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print circles #</span><br/><span class=\"kw22\">print</span> circles<span class=\"br0\">(</span> <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.8765</span><span class=\"sy1\">,</span> <span class=\"re1\">0.2345</span><span class=\"sy1\">,</span>    <span class=\"re1\">2.0</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> circles<span class=\"br0\">(</span> <span class=\"re1\">0.0000</span><span class=\"sy1\">,</span> <span class=\"re1\">2.0000</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.0000</span><span class=\"sy1\">,</span> <span class=\"re1\">0.0000</span><span class=\"sy1\">,</span>    <span class=\"re1\">1.0</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> circles<span class=\"br0\">(</span> <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">2.0</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> circles<span class=\"br0\">(</span> <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.8765</span><span class=\"sy1\">,</span> <span class=\"re1\">0.2345</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.5</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> circles<span class=\"br0\">(</span> <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.1234</span><span class=\"sy1\">,</span> <span class=\"re1\">0.9876</span><span class=\"sy1\">,</span>    <span class=\"re1\">0.0</span> <span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">CircleCenter<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\td <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\tx3 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">+</span>x2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> y3 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>y1<span class=\"sy0\">+</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>\tcx1 <span class=\"sy0\">:=</span> x3 <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span>d <span class=\"sy0\">,</span> \tcy1<span class=\"sy0\">:=</span> y3 <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<br/>\tcx2 <span class=\"sy0\">:=</span> x3 <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span>d <span class=\"sy0\">,</span> \tcy2<span class=\"sy0\">:=</span> y3 <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"No circles can be drawn, points are identical\"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> r<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"points are opposite ends of a diameter center = \"</span> cx1 <span class=\"st0\">\",\"</span> cy1<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> r<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"points are too far\"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"radius is not valid\"</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<span class=\"br0\">(</span>cx1 <span class=\"sy0\">&amp;&amp;</span> cy1 <span class=\"sy0\">&amp;&amp;</span> cx2 <span class=\"sy0\">&amp;&amp;</span> cy2<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"no solution\"</span><br/>\t<span class=\"kw1\">return</span> cx1 <span class=\"st0\">\",\"</span> cy1 <span class=\"st0\">\" &amp; \"</span> cx2 <span class=\"st0\">\",\"</span> cy2<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">Type</span> <span class=\"kw1\">Point</span><br/>    <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x,y<br/>    <span class=\"kw1\">Declare</span> Property length <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/>Property <span class=\"kw1\">point</span>.<span class=\"me1\">length</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">Return</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>x*x+y*y<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/><span class=\"kw1\">Sub</span> circles<span class=\"br0\">(</span>p1 <span class=\"kw1\">As</span> <span class=\"kw1\">Point</span>,p2 <span class=\"kw1\">As</span> <span class=\"kw1\">Point</span>,radius <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Points \"</span>;<span class=\"st0\">\"(\"</span>&amp;p1.<span class=\"me1\">x</span>;<span class=\"st0\">\",\"</span>&amp;p1.<span class=\"me1\">y</span>;<span class=\"st0\">\"),(\"</span>&amp;p2.<span class=\"me1\">x</span>;<span class=\"st0\">\",\"</span>&amp;p2.<span class=\"me1\">y</span>;<span class=\"st0\">\")\"</span>;<span class=\"st0\">\", Rad \"</span>;radius<br/>    Var ctr=Type&lt;Point&gt;<span class=\"br0\">(</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span>+p2.<span class=\"me1\">x</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>,<span class=\"br0\">(</span>p1.<span class=\"me1\">y</span>+p2.<span class=\"me1\">y</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    Var half=Type&lt;Point&gt;<span class=\"br0\">(</span>p1.<span class=\"me1\">x</span>-ctr.<span class=\"me1\">x</span>,p1.<span class=\"me1\">y</span>-ctr.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    Var lenhalf=half.<span class=\"me1\">length</span><br/>    <span class=\"kw1\">If</span> radius&lt;lenhalf <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"Can't solve\"</span>:<span class=\"kw1\">Print</span>:<span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">If</span> lenhalf=<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"Points are the same\"</span>:<span class=\"kw1\">Print</span>:<span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    Var dist=<span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>radius^<span class=\"nu0\">2</span>-lenhalf^<span class=\"nu0\">2</span><span class=\"br0\">)</span>/lenhalf<br/>    Var rot= Type&lt;Point&gt;<span class=\"br0\">(</span>-dist*<span class=\"br0\">(</span>p1.<span class=\"me1\">y</span>-ctr.<span class=\"me1\">y</span><span class=\"br0\">)</span> +ctr.<span class=\"me1\">x</span>,dist*<span class=\"br0\">(</span>p1.<span class=\"me1\">x</span>-ctr.<span class=\"me1\">x</span><span class=\"br0\">)</span> +ctr.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" -&gt; Circle 1 (\"</span>&amp;rot.<span class=\"me1\">x</span>;<span class=\"st0\">\",\"</span>&amp;rot.<span class=\"me1\">y</span>;<span class=\"st0\">\")\"</span><br/>    rot= Type&lt;Point&gt;<span class=\"br0\">(</span>-<span class=\"br0\">(</span>rot.<span class=\"me1\">x</span>-ctr.<span class=\"me1\">x</span><span class=\"br0\">)</span> +ctr.<span class=\"me1\">x</span>,-<span class=\"br0\">(</span><span class=\"br0\">(</span>rot.<span class=\"me1\">y</span>-ctr.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> +ctr.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span><span class=\"st0\">\" -&gt; Circle 2 (\"</span>&amp;rot.<span class=\"me1\">x</span>;<span class=\"st0\">\",\"</span>&amp;rot.<span class=\"me1\">y</span>;<span class=\"st0\">\")\"</span><br/>    <span class=\"kw1\">Print</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Point</span> p1=<span class=\"br0\">(</span>.1234,.9876<span class=\"br0\">)</span>,p2=<span class=\"br0\">(</span>.8765,.2345<span class=\"br0\">)</span><br/>circles<span class=\"br0\">(</span>p1,p2,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>p1=Type&lt;Point&gt;<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>:p2=Type&lt;Point&gt;<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>circles<span class=\"br0\">(</span>p1,p2,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p1=Type&lt;Point&gt;<span class=\"br0\">(</span>.1234,.9876<span class=\"br0\">)</span>:p2=p1<br/>circles<span class=\"br0\">(</span>p1,p2,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>p1=Type&lt;Point&gt;<span class=\"br0\">(</span>.1234,.9876<span class=\"br0\">)</span>:p2=Type&lt;Point&gt;<span class=\"br0\">(</span>.8765,.2345<span class=\"br0\">)</span><br/>circles<span class=\"br0\">(</span>p1,p2,.5<span class=\"br0\">)</span><br/>p1=Type&lt;Point&gt;<span class=\"br0\">(</span>.1234,.9876<span class=\"br0\">)</span>:p2=p1<br/>circles<span class=\"br0\">(</span>p1,p2,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "C", "loc": 66, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span>point<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> distance<span class=\"br0\">(</span>point p1<span class=\"sy0\">,</span>point p2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> findCircles<span class=\"br0\">(</span>point p1<span class=\"sy0\">,</span>point p2<span class=\"sy0\">,</span><span class=\"kw4\">double</span> radius<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> separation <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">)</span><span class=\"sy0\">,</span>mirrorDistance<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>separation <span class=\"sy0\">==</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tradius <span class=\"sy0\">==</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">?</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>No circles can be drawn through (%.4f,%.4f)\"</span><span class=\"sy0\">,</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">,</span>p1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\t\t\t\t\t\t\t <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Infinitely many circles can be drawn through (%.4f,%.4f)\"</span><span class=\"sy0\">,</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">,</span>p1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>separation <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>radius<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Given points are opposite ends of a diameter of the circle with center (%.4f,%.4f) and radius\u00a0%.4f\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>radius<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>separation <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>radius<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Given points are farther away from each other than a diameter of a circle with radius\u00a0%.4f\"</span><span class=\"sy0\">,</span>radius<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span>   <br/>\u00a0<br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tmirrorDistance <span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>radius<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>separation<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Two circles are possible.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Circle C1 with center (%.4f,%.4f), radius\u00a0%.4f and Circle C2 with center (%.4f,%.4f), radius\u00a0%.4f\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> mirrorDistance<span class=\"sy0\">*</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>separation<span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> mirrorDistance<span class=\"sy0\">*</span><span class=\"br0\">(</span>p2.<span class=\"me1\">x</span><span class=\"sy0\">-</span>p1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>separation<span class=\"sy0\">,</span>radius<span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> mirrorDistance<span class=\"sy0\">*</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>separation<span class=\"sy0\">,</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">+</span>p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> mirrorDistance<span class=\"sy0\">*</span><span class=\"br0\">(</span>p2.<span class=\"me1\">x</span><span class=\"sy0\">-</span>p1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>separation<span class=\"sy0\">,</span>radius<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>point cases<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> \t<br/><span class=\"br0\">{</span>\t<span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <span class=\"br0\">{</span><span class=\"nu16\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.2345</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>  <br/>\t<span class=\"br0\">{</span><span class=\"nu16\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <span class=\"br0\">{</span><span class=\"nu16\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>   <br/>\t<span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>   <br/>\t<span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <span class=\"br0\">{</span><span class=\"nu16\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.2345</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <br/>\t<span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>    <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> radii<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span><span class=\"nu16\">0.5</span><span class=\"sy0\">,</span><span class=\"nu16\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span>\t<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Case\u00a0%d)\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfindCircles<span class=\"br0\">(</span>cases<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>cases<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>radii<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 72, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> CirclesOfGivenRadiusThroughTwoPoints<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> values <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>, <span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span>,   <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.0</span>,       <span class=\"nu0\">2.0</span>,    <span class=\"nu0\">0.0</span>,    <span class=\"nu0\">0.0</span>,   <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>, <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>,   <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>, <span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span>, <span class=\"nu0\">0.5</span> <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>, <span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span>,   <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a <span class=\"kw1\">in</span> values<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> q <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Points {p} and {q} with radius {a[4]}:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> centers <span class=\"sy0\">=</span> FindCircles<span class=\"br0\">(</span>p, q, a<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" and \"</span>, centers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>Exception ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> ex<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> Point<span class=\"br0\">[</span><span class=\"br0\">]</span> FindCircles<span class=\"br0\">(</span>Point p, Point q, <span class=\"kw4\">double</span> radius<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>radius <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Negative radius.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>radius <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>p <span class=\"sy0\">==</span> q<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> p <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"No circles.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">==</span> q<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"Infinite number of circles.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> sqDistance <span class=\"sy0\">=</span> Point<span class=\"sy0\">.</span><span class=\"me1\">SquaredDistance</span><span class=\"br0\">(</span>p, q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sqDiameter <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> radius <span class=\"sy0\">*</span> radius<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sqDistance <span class=\"sy0\">&gt;</span> sqDiameter<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"Points are too far apart.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Point midPoint <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> q<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> q<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sqDistance <span class=\"sy0\">==</span> sqDiameter<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> midPoint <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>radius <span class=\"sy0\">*</span> radius <span class=\"sy0\">-</span> sqDistance <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>sqDistance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> ox <span class=\"sy0\">=</span> d <span class=\"sy0\">*</span> <span class=\"br0\">(</span>q<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> p<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> distance, oy <span class=\"sy0\">=</span> d <span class=\"sy0\">*</span> <span class=\"br0\">(</span>q<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> p<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> distance<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>midPoint<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> oy, midPoint<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> ox<span class=\"br0\">)</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>midPoint<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> oy, midPoint<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> ox<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> Point<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> Point<span class=\"br0\">(</span><span class=\"kw4\">double</span> x, <span class=\"kw4\">double</span> y<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            X <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            Y <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> X <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Y <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> <span class=\"kw1\">operator</span> <span class=\"sy0\">==</span><span class=\"br0\">(</span>Point p, Point q<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">==</span> q<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">==</span> q<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> <span class=\"kw1\">operator</span> <span class=\"sy0\">!=</span><span class=\"br0\">(</span>Point p, Point q<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">!=</span> q<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">||</span> p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">!=</span> q<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> SquaredDistance<span class=\"br0\">(</span>Point p, Point q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> dx <span class=\"sy0\">=</span> q<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> p<span class=\"sy0\">.</span><span class=\"me1\">X</span>, dy <span class=\"sy0\">=</span> q<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> p<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> dx <span class=\"sy0\">*</span> dx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> dy<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> $<span class=\"st0\">\"({X}, {Y})\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span>\t<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 65, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;tuple&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> point <span class=\"br0\">{</span> <span class=\"kw4\">double</span> x, y<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> operator<span class=\"sy1\">==</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point<span class=\"sy3\">&amp;</span> lhs, <span class=\"kw4\">const</span> point<span class=\"sy3\">&amp;</span> rhs<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>lhs.<span class=\"me1\">x</span>, lhs.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">x</span>, rhs.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> result_category <span class=\"br0\">{</span> NONE, ONE_COINCEDENT, ONE_DIAMETER, TWO, INFINITE <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> result_t <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">tuple</span><span class=\"sy1\">&lt;</span>result_category, point, point<span class=\"sy1\">&gt;</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> distance<span class=\"br0\">(</span>point l, point r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">hypot</span><span class=\"br0\">(</span>l.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> r.<span class=\"me1\">x</span>, l.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> r.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>result_t find_circles<span class=\"br0\">(</span>point p1, point p2, <span class=\"kw4\">double</span> r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    point ans1 <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">0</span>., <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">0</span>.<span class=\"br0\">}</span>, ans2 <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">0</span>., <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">0</span>.<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p1 <span class=\"sy1\">==</span> p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>r <span class=\"sy1\">==</span> <span class=\"nu0\">0</span>.<span class=\"br0\">)</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span>ONE_COINCEDENT, p1,   p2  <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">else</span>        <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span>INFINITE,       ans1, ans2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    point center <span class=\"br0\">{</span> p1.<span class=\"me1\">x</span><span class=\"sy2\">/</span><span class=\"nu0\">2</span> <span class=\"sy2\">+</span> p2.<span class=\"me1\">x</span><span class=\"sy2\">/</span><span class=\"nu0\">2</span>, p1.<span class=\"me1\">y</span><span class=\"sy2\">/</span><span class=\"nu0\">2</span> <span class=\"sy2\">+</span> p2.<span class=\"me1\">y</span><span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> half_distance <span class=\"sy1\">=</span> distance<span class=\"br0\">(</span>center, p1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>half_distance <span class=\"sy1\">&gt;</span> r<span class=\"br0\">)</span>      <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span>NONE,         ans1,   ans2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>half_distance <span class=\"sy2\">-</span> r <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span>ONE_DIAMETER, center, ans2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> root <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">hypot</span><span class=\"br0\">(</span>r, half_distance<span class=\"br0\">)</span> <span class=\"sy2\">/</span> distance<span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ans1.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> center.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> root <span class=\"sy2\">*</span> <span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ans1.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> center.<span class=\"me1\">y</span> <span class=\"sy2\">+</span> root <span class=\"sy2\">*</span> <span class=\"br0\">(</span>p2.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> p1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ans2.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> center.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> root <span class=\"sy2\">*</span> <span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ans2.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> center.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> root <span class=\"sy2\">*</span> <span class=\"br0\">(</span>p2.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> p1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span>TWO, ans1, ans2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span>result_t result, std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> out <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    point r1, r2<span class=\"sy4\">;</span> result_category res<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>res, r1, r2<span class=\"br0\">)</span> <span class=\"sy1\">=</span> result<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> NONE<span class=\"sy4\">:</span><br/>        out <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"There are no solutions, points are too far away<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">case</span> ONE_COINCEDENT<span class=\"sy4\">:</span> <span class=\"kw1\">case</span> ONE_DIAMETER<span class=\"sy4\">:</span><br/>        out <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Only one solution: \"</span> <span class=\"sy1\">&lt;&lt;</span> r1.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> r1.<span class=\"me1\">y</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">case</span> INFINITE<span class=\"sy4\">:</span><br/>        out <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Infinitely many circles can be drawn<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">case</span> TWO<span class=\"sy4\">:</span><br/>        out <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Two solutions: \"</span> <span class=\"sy1\">&lt;&lt;</span> r1.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> r1.<span class=\"me1\">y</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy1\">&lt;&lt;</span> r2.<span class=\"me1\">x</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> r2.<span class=\"me1\">y</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    constexpr <span class=\"kw4\">int</span> size <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> point points<span class=\"br0\">[</span>size<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.8765</span>, <span class=\"nu16\">0.2345</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.0000</span>, <span class=\"nu16\">2.0000</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.0000</span>, <span class=\"nu16\">0.0000</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.8765</span>, <span class=\"nu16\">0.2345</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu16\">0.1234</span>, <span class=\"nu16\">0.9876</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> radius<span class=\"br0\">[</span>size<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>., <span class=\"nu0\">1</span>., <span class=\"nu0\">2</span>., <span class=\"nu18\">.5</span>, <span class=\"nu0\">0</span>.<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span>find_circles<span class=\"br0\">(</span>points<span class=\"br0\">[</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, points<span class=\"br0\">[</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>, radius<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 62, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> ValueException <span class=\"sy0\">:</span> <span class=\"kw3\">Exception</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">string</span> msg_<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span> <span class=\"kw2\">super</span><span class=\"br0\">(</span>msg_<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> V2 <span class=\"br0\">{</span> <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">struct</span> Circle <span class=\"br0\">{</span> <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co3\">/**Following explanation at:<br/>http://mathforum.org/library/drmath/view/53027.html<br/>*/</span><br/>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>Circle<span class=\"sy0\">,</span> Circle<span class=\"br0\">)</span><br/>circlesFromTwoPointsAndRadius<span class=\"br0\">(</span><span class=\"kw2\">in</span> V2 p1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> V2 p2<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> r<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"radius can't be negative\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> nBits <span class=\"sy0\">=</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu16\">2.0</span> <span class=\"sy0\">^^</span> nBits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> ValueException<span class=\"br0\">(</span><span class=\"st0\">\"radius of zero\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>feqrel<span class=\"br0\">(</span>p1.<span class=\"me1\">x</span><span class=\"sy0\">,</span> p2.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> nBits <span class=\"sy0\">&amp;&amp;</span><br/>        feqrel<span class=\"br0\">(</span>p1.<span class=\"me1\">y</span><span class=\"sy0\">,</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> nBits<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> ValueException<span class=\"br0\">(</span><span class=\"st0\">\"coincident points give\"</span> <span class=\"sy0\">~</span><br/>                                 <span class=\"st0\">\" infinite number of Circles\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Delta between points.</span><br/>    <span class=\"kw4\">immutable</span> d <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span>p2.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">x</span><span class=\"sy0\">,</span> p2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Distance between points.</span><br/>    <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>d.<span class=\"me1\">x</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">y</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">*</span> r<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> ValueException<span class=\"br0\">(</span><span class=\"st0\">\"separation of points &gt; diameter\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Halfway point.</span><br/>    <span class=\"kw4\">immutable</span> h <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> p2.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Distance along the mirror line.</span><br/>    <span class=\"kw4\">immutable</span> dm <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>r <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>q <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span><br/>        Circle<span class=\"br0\">(</span>h.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dm <span class=\"sy0\">*</span> d.<span class=\"me1\">y</span> <span class=\"sy0\">/</span> q<span class=\"sy0\">,</span> h.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> dm <span class=\"sy0\">*</span> d.<span class=\"me1\">x</span> <span class=\"sy0\">/</span> q<span class=\"sy0\">,</span> r.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"br0\">(</span>h.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> dm <span class=\"sy0\">*</span> d.<span class=\"me1\">y</span> <span class=\"sy0\">/</span> q<span class=\"sy0\">,</span> h.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dm <span class=\"sy0\">*</span> d.<span class=\"me1\">x</span> <span class=\"sy0\">/</span> q<span class=\"sy0\">,</span> r.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> t<span class=\"sy0\">;</span> <span class=\"br0\">[</span><br/>                 tuple<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu16\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 tuple<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu16\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu16\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 tuple<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 tuple<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu16\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 tuple<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu16\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Through points:<span class=\"es1\">\\n</span> \u00a0%s  \u00a0%s  and radius\u00a0%f<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>                 <span class=\"st0\">\"You can construct the following circles:\"</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%s<span class=\"es1\">\\n</span> \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                     circlesFromTwoPointsAndRadius<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>ValueException v<span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"  ERROR:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> v.<span class=\"me1\">msg</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 38, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def circle(p, p, r) when r&gt;0.0 do<br/>    raise ArgumentError, message: \"Infinite number of circles, points coincide.\"<br/>  end<br/>  def circle(p, p, r) when r==0.0 do<br/>    {px, py} = p<br/>    [{px, py, r}]<br/>  end<br/>  def circle({p1x,p1y}, {p2x,p2y}, r) do<br/>    {dx, dy} = {p2x-p1x, p2y-p1y}<br/>    q =\u00a0:math.sqrt(dx*dx + dy*dy)<br/>    if q &gt; 2*r do<br/>      raise ArgumentError, message: \"Distance of points &gt; diameter.\"<br/>    else<br/>      {x3, y3} = {(p1x+p2x) / 2, (p1y+p2y) / 2}<br/>      d =\u00a0:math.sqrt(r*r - q*q/4)<br/>      Enum.uniq([{x3 - d*dy/q, y3 + d+dx/q, r}, {x3 + d*dy/q, y3 - d*dx/q, r}])<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>data = [{{0.1234, 0.9876}, {0.8765, 0.2345}, 2.0},<br/>        {{0.0000, 2.0000}, {0.0000, 0.0000}, 1.0},<br/>        {{0.1234, 0.9876}, {0.1234, 0.9876}, 2.0},<br/>        {{0.1234, 0.9876}, {0.8765, 0.2345}, 0.5},<br/>        {{0.1234, 0.9876}, {0.1234, 0.9876}, 0.0}]<br/>\u00a0<br/>Enum.each(data, fn {p1, p2, r} -&gt;<br/>  IO.write \"Given points:\\n  #{inspect p1},\\n  #{inspect p2}\\n  and radius #{r}\\n\"<br/>  try do<br/>    circles = RC.circle(p1, p2, r)<br/>    IO.puts \"You can construct the following circles:\"<br/>    Enum.each(circles, fn circle -&gt; IO.puts \"  #{inspect circle}\" end)<br/>  rescue<br/>    e in ArgumentError -&gt; IO.inspect e<br/>  end<br/>  IO.puts \"\"<br/>end)</pre>"}, {"lang": "ERRE", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM CIRCLES<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>PROCEDURE CIRCLE_CENTER(X1,Y1,X2,Y2,R-&gt;MSG$)<br/>  LOCAL D,W,X3,Y3<br/>\u00a0<br/>        D=SQR((X2-X1)^2+(Y2-Y1)^2)<br/>        IF D=0 THEN<br/>             MSG$=\"NO CIRCLES CAN BE DRAWN, POINTS ARE IDENTICAL\"<br/>             EXIT PROCEDURE<br/>        END IF<br/>        X3=(X1+X2)/2  Y3=(Y1+Y2)/2<br/>\u00a0<br/>        W=R^2-(D/2)^2<br/>        IF W&lt;0 THEN<br/>             MSG$=\"NO SOLUTION\"<br/>             EXIT PROCEDURE<br/>        END IF<br/>        CX1=X3+SQR(W)*(Y1-Y2)/D   CY1=Y3+SQR(W)*(X2-X1)/D<br/>        CX2=X3-SQR(W)*(Y1-Y2)/D   CY2=Y3-SQR(W)*(X2-X1)/D<br/>        IF D=R*2 THEN<br/>             MSG$=\"POINTS ARE OPPOSITE ENDS OF A DIAMETER CENTER = \"+STR$(CX1)+\",\"+STR$(CY1)<br/>             EXIT PROCEDURE<br/>        END IF<br/>        IF D&gt;R*2 THEN<br/>             MSG$=\"POINTS ARE TOO FAR\"<br/>             EXIT PROCEDURE<br/>        END IF<br/>        IF R&lt;=0 THEN<br/>             MSG$=\"RADIUS IS NOT VALID\"<br/>             EXIT PROCEDURE<br/>        END IF<br/>        MSG$=STR$(CX1)+\",\"+STR$(CY1)+\" &amp; \"+STR$(CX2)+\",\"+STR$(CY2)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>DATA(0.1234,0.9876,0.8765,0.2345,2.0)<br/>DATA(0.0000,2.0000,0.0000,0.0000,1.0)<br/>DATA(0.1234,0.9876,0.1234,0.9876,2.0)<br/>DATA(0.1234,0.9876,0.8765,0.2345,0.5)<br/>DATA(0.1234,0.9876,0.1234,0.9876,0.0)<br/>\u00a0<br/>FOR I%=1 TO 5 DO<br/>   READ(PX,PY,QX,QY,RADIUS)<br/>   CIRCLE_CENTER(PX,PY,QX,QY,RADIUS-&gt;MSG$)<br/>   PRINT(MSG$)<br/>END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 106, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! Implemented by Anant Dixit (Nov. 2014)</span><br/><span class=\"co1\">! Transpose elements in find_center to obtain correct results. R.N. McLean (Dec 2017)</span><br/><span class=\"kw1\">program</span> circles<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">P1</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, R<br/>\u00a0<br/>P1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>P2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.8765d0,0.2345d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>R <span class=\"sy0\">=</span> 2.0d0<br/><span class=\"co1\">call print_centers(P1,P2,R)</span><br/>\u00a0<br/>P1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.0d0, 2.0d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>P2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.0d0,0.0d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>R <span class=\"sy0\">=</span> 1.0d0<br/><span class=\"co1\">call print_centers(P1,P2,R)</span><br/>\u00a0<br/>P1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>P2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>R <span class=\"sy0\">=</span> 2.0d0<br/><span class=\"co1\">call print_centers(P1,P2,R)</span><br/>\u00a0<br/>P1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>P2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.8765d0, 0.2345d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>R <span class=\"sy0\">=</span> 0.5d0<br/><span class=\"co1\">call print_centers(P1,P2,R)</span><br/>\u00a0<br/>P1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>P2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>0.1234d0, 0.9876d0<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>R <span class=\"sy0\">=</span> 0.0d0<br/><span class=\"co1\">call print_centers(P1,P2,R)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> circles<br/>\u00a0<br/><span class=\"kw1\">subroutine</span> print_centers<span class=\"br0\">(</span>P1,P2,R<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">P1</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, R, Center<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">Res</span><br/><span class=\"co1\">call test_inputs(P1,P2,R,Res)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4,A1,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Point1 \u00a0: '</span>, P1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span>, P1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4,A1,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Point2 \u00a0: '</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Radius \u00a0: '</span>, R<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>Res.<span class=\"me1\">eq</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Same point because P1=P2 and r=0.'</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>Res.<span class=\"me1\">eq</span>.2<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'No circles can be drawn because r=0.'</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>Res.<span class=\"me1\">eq</span>.3<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Infinite circles because P1=P2 for non-zero radius.'</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>Res.<span class=\"me1\">eq</span>.4<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'No circles with given r can be drawn because points are far apart.'</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>Res.<span class=\"me1\">eq</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">call</span> find_center<span class=\"br0\">(</span>P1,P2,R,Center<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">Center</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">Center</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Points lie on the diameter. A single circle can be drawn.'</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4,A1,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Center \u00a0: '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Two distinct circles found.'</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4,A1,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Center1\u00a0: '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,F7.4,A1,F7.4)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Center2\u00a0: '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>Res.<span class=\"me1\">lt</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Incorrect value for r.'</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> print_centers<br/>\u00a0<br/><span class=\"kw1\">subroutine</span> test_inputs<span class=\"br0\">(</span>P1,P2,R,Res<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">P1</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, R, dist<br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">Res</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>R.<span class=\"me1\">lt</span>.0.0d0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  Res <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>R.<span class=\"me1\">eq</span>.0.0d0 <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> P1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">P2</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> P1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">P2</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  Res <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>R.<span class=\"me1\">eq</span>.0.0d0<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  Res <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"kw1\">elseif</span><span class=\"br0\">(</span>P1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">P2</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> P1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">eq</span>.<span class=\"me1\">P2</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  Res <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"kw1\">else</span><br/>  dist <span class=\"sy0\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>P1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>P2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>P1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>dist.<span class=\"me1\">gt</span>.2.0d0<span class=\"sy0\">*</span>R<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    Res <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"kw1\">else</span><br/>    Res <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> test_inputs<br/>\u00a0<br/><span class=\"kw1\">subroutine</span> find_center<span class=\"br0\">(</span>P1,P2,R,Center<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">P1</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, MP<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Center<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, R, dm, dd<br/>MP <span class=\"sy0\">=</span> <span class=\"br0\">(</span>P1 <span class=\"sy0\">+</span> P2<span class=\"br0\">)</span><span class=\"sy0\">/</span>2.0d0<br/>dm <span class=\"sy0\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>P1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> P2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>P1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> P2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>dd <span class=\"sy0\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>R<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>dm<span class=\"sy0\">/</span>2.0d0<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"co1\">Center(1,1) = MP(1) - dd*(P2(2) - P1(2))/dm</span><br/><span class=\"co1\">Center(1,2) = MP(2) + dd*(P2(1) - P1(1))/dm</span><br/>\u00a0<br/><span class=\"co1\">Center(2,1) = MP(1) + dd*(P2(2) - P1(2))/dm</span><br/><span class=\"co1\">Center(2,2) = MP(2) - dd*(P2(1) - P1(1))/dm</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> find_center</pre>"}, {"lang": "Go", "loc": 74, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    Two  <span class=\"sy2\">=</span> <span class=\"st0\">\"Two circles.\"</span><br/>    R0   <span class=\"sy2\">=</span> <span class=\"st0\">\"R==0.0 does not describe circles.\"</span><br/>    Co   <span class=\"sy2\">=</span> <span class=\"st0\">\"Coincident points describe an infinite number of circles.\"</span><br/>    CoR0 <span class=\"sy2\">=</span> <span class=\"st0\">\"Coincident points with r==0.0 describe a degenerate circle.\"</span><br/>    Diam <span class=\"sy2\">=</span> <span class=\"st0\">\"Points form a diameter and describe only a single circle.\"</span><br/>    Far  <span class=\"sy2\">=</span> <span class=\"st0\">\"Points too far apart to form circles.\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> circles<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 point<span class=\"sy1\">,</span> r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>c1<span class=\"sy1\">,</span> c2 point<span class=\"sy1\">,</span> Case <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> p1 <span class=\"sy3\">==</span> p2 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> p1<span class=\"sy1\">,</span> p1<span class=\"sy1\">,</span> CoR0<br/>        <span class=\"sy1\">}</span><br/>        Case <span class=\"sy2\">=</span> Co<br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">,</span> R0<br/>    <span class=\"sy1\">}</span><br/>    dx <span class=\"sy2\">:=</span> p2<span class=\"sy3\">.</span>x <span class=\"sy3\">-</span> p1<span class=\"sy3\">.</span>x<br/>    dy <span class=\"sy2\">:=</span> p2<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> p1<span class=\"sy3\">.</span>y<br/>    q <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Hypot<span class=\"sy1\">(</span>dx<span class=\"sy1\">,</span> dy<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> q &gt; <span class=\"nu0\">2</span><span class=\"sy3\">*</span>r <span class=\"sy1\">{</span><br/>        Case <span class=\"sy2\">=</span> Far<br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> point<span class=\"sy1\">{(</span>p1<span class=\"sy3\">.</span>x <span class=\"sy3\">+</span> p2<span class=\"sy3\">.</span>x<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>p1<span class=\"sy3\">.</span>y <span class=\"sy3\">+</span> p2<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> q <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>r <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> m<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> Diam<br/>    <span class=\"sy1\">}</span><br/>    d <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>r<span class=\"sy3\">*</span>r <span class=\"sy3\">-</span> q<span class=\"sy3\">*</span>q<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    ox <span class=\"sy2\">:=</span> d <span class=\"sy3\">*</span> dx <span class=\"sy3\">/</span> q<br/>    oy <span class=\"sy2\">:=</span> d <span class=\"sy3\">*</span> dy <span class=\"sy3\">/</span> q<br/>    <span class=\"kw1\">return</span> point<span class=\"sy1\">{</span>m<span class=\"sy3\">.</span>x <span class=\"sy3\">-</span> oy<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>y <span class=\"sy3\">+</span> ox<span class=\"sy1\">},</span> point<span class=\"sy1\">{</span>m<span class=\"sy3\">.</span>x <span class=\"sy3\">+</span> oy<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> ox<span class=\"sy1\">},</span> Two<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> td <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    p1<span class=\"sy1\">,</span> p2 point<br/>    r      <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}{</span><br/>    <span class=\"sy1\">{</span>point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">8765</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">2345</span><span class=\"sy1\">},</span> <span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span>point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0000</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">0000</span><span class=\"sy1\">},</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0000</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0000</span><span class=\"sy1\">},</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span>point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> <span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span>point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">8765</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">2345</span><span class=\"sy1\">},</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span>point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9876</span><span class=\"sy1\">},</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> td <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"p1: \"</span><span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>p1<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"p2: \"</span><span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>p2<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"r: \"</span><span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>r<span class=\"sy1\">)</span><br/>        c1<span class=\"sy1\">,</span> c2<span class=\"sy1\">,</span> Case <span class=\"sy2\">:=</span> circles<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span>p1<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>p2<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>r<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> Case<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">switch</span> Case <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> CoR0<span class=\"sy1\">,</span> Diam<span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"   Center: \"</span><span class=\"sy1\">,</span> c1<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> Two<span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"   Center 1: \"</span><span class=\"sy1\">,</span> c1<span class=\"sy1\">)</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"   Center 2: \"</span><span class=\"sy1\">,</span> c2<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 36, "block": "<pre class=\"haskell highlighted_source\">add <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><br/>sub <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><br/>magSqr <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>     <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>mag a             <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> magSqr a<br/>mul <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> c      <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> c<span class=\"sy0\">,</span> b <span class=\"sy0\">*</span> c<span class=\"br0\">)</span><br/>div2 <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> c     <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">/</span> c<span class=\"sy0\">,</span> b <span class=\"sy0\">/</span> c<span class=\"br0\">)</span><br/>perp <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>       <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> b<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>norm a            <span class=\"sy0\">=</span> a `div2` mag a<br/>\u00a0<br/>circlePoints <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>circlePoints p q radius<br/>  <span class=\"sy0\">|</span> radius <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>      <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"sy0\">|</span> p <span class=\"sy0\">==</span> q           <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"sy0\">|</span> diameter <span class=\"sy0\">&lt;</span> magPQ <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>        <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>center1<span class=\"sy0\">,</span> center2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    diameter <span class=\"sy0\">=</span> radius <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    pq       <span class=\"sy0\">=</span> p `sub` q<br/>    magPQ    <span class=\"sy0\">=</span> mag pq<br/>    midpoint <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p `add` q<span class=\"br0\">)</span> `div2` <span class=\"nu0\">2</span><br/>    halfPQ   <span class=\"sy0\">=</span> magPQ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    magMidC  <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span>radius <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>halfPQ <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    midC     <span class=\"sy0\">=</span> <span class=\"br0\">(</span>norm <span class=\"sy0\">$</span> perp pq<span class=\"br0\">)</span> `mul` magMidC<br/>    center1  <span class=\"sy0\">=</span> midpoint `add` midC<br/>    center2  <span class=\"sy0\">=</span> midpoint `sub` midC<br/>\u00a0<br/>uncurry3 f <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f a b c<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> uncurry3 circlePoints<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>     <span class=\"sy0\">,</span> <span class=\"nu0\">2</span>     <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>     <span class=\"sy0\">,</span> <span class=\"nu0\">0</span>     <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.1234</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    A <span class=\"sy0\">:=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.9765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>cCenter<span class=\"sy0\">!!</span>A<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cCenter<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Illegal radius\"</span><br/>    r2 <span class=\"sy0\">:=</span> r<span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>    d <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0.5</span><br/>    <span class=\"kw1\">if</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Identical points, infinite number of circles\"</span><br/>    <span class=\"kw1\">if</span> d <span class=\"sy0\">&gt;</span> r2 <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"No circles possible\"</span><br/>    z   <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>r<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0.5</span><br/>    x3  <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">+</span>x2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"sy0\">;</span>     y3 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>y1<span class=\"sy0\">+</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><br/>    cx1 <span class=\"sy0\">:=</span> x3<span class=\"sy0\">+</span>z<span class=\"sy0\">*</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"sy0\">;</span> cy1 <span class=\"sy0\">:=</span> y3<span class=\"sy0\">+</span>z<span class=\"sy0\">*</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<br/>    cx2 <span class=\"sy0\">:=</span> x3<span class=\"sy0\">-</span>z<span class=\"sy0\">*</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"sy0\">;</span> cy2 <span class=\"sy0\">:=</span> y3<span class=\"sy0\">-</span>z<span class=\"sy0\">*</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<br/>    <span class=\"kw1\">if</span> d <span class=\"sy0\">=</span> r2 <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Single circle at (\"</span><span class=\"sy0\">||</span>cx1<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>cy1<span class=\"sy0\">||</span><span class=\"st0\">\")\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">||</span>cx1<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>cy1<span class=\"sy0\">||</span><span class=\"st0\">\") and (\"</span><span class=\"sy0\">||</span>cx2<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>cy2<span class=\"sy0\">||</span><span class=\"st0\">\")\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 45, "block": "<pre class=\"j highlighted_source\">average =: +/\u00a0% #<br/>\u00a0<br/>circles =: verb define\"<span class=\"nu0\">1</span><br/> <span class=\"st_h\">'P0 P1 R'</span> =. <span class=\"sy0\">(</span>j./\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span><span class=\"nu0\">_2</span>[\\<span class=\"kw2\">y</span> <span class=\"co1\">NB. Use complex plane</span><br/> C =. P0 <a class=\"__cf_email__\" data-cfemail=\"274651425546404267\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:, P1<br/> BAD =: \":@:+. C<br/> SEPARATION =. P0 |@- P1<br/> <span class=\"kw1\">if.</span> <span class=\"nu0\">0</span> = SEPARATION <span class=\"kw1\">do.</span><br/>  <span class=\"kw1\">if.</span> <span class=\"nu0\">0</span> = R <span class=\"kw1\">do.</span> <span class=\"st_h\">'Degenerate point at '</span> , BAD<br/>  <span class=\"kw1\">else.</span> <span class=\"st_h\">'Any center at a distance '</span> , <span class=\"sy0\">(</span>\":R<span class=\"sy0\">)</span> , <span class=\"st_h\">' from '</span> , BAD , <span class=\"st_h\">' works.'</span><br/>  <span class=\"kw1\">end.</span><br/> <span class=\"kw1\">elseif.</span> SEPARATION <span class=\"sy0\">(</span>&gt; +:<span class=\"sy0\">)</span> R <span class=\"kw1\">do.</span> <span class=\"st_h\">'No solutions.'</span><br/> <span class=\"kw1\">elseif.</span> SEPARATION <span class=\"sy0\">(</span>= +:<span class=\"sy0\">)</span> R <span class=\"kw1\">do.</span> <span class=\"st_h\">'Duplicate solutions with center at '</span> , BAD<br/> <span class=\"kw1\">elseif.</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do.</span><br/>  ORTHOGONAL_DISTANCE =. R * <span class=\"nu0\">1</span> o. <span class=\"nu0\">_2</span> o. R\u00a0%~ | C - P0<br/>  UNIT =: P1 *@:- P0<br/>  OFFSETS =: ORTHOGONAL_DISTANCE * UNIT * j. <span class=\"nu0\">_1</span> <span class=\"nu0\">1</span><br/>  C <a class=\"__cf_email__\" data-cfemail=\"9db6b3dd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:+ OFFSETS<br/> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>INPUT=: \".;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span>   <span class=\"nu0\">2</span><br/>      <span class=\"nu0\">0</span>      <span class=\"nu0\">2</span>      <span class=\"nu0\">0</span>      <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><br/> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span>   <span class=\"nu0\">2</span><br/> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span> <span class=\"nu0\">0.5</span><br/> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span>   <span class=\"nu0\">0</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>   <span class=\"sy0\">(</span><span class=\"st_h\">'x0 y0 x1 y1 r'</span>\u00a0; <span class=\"st_h\">'center'</span><span class=\"sy0\">)</span>,<span class=\"sy0\">(</span>;circles<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> INPUT<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502x0 y0 x1 y1 r                  \u2502center                                              \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span> <span class=\"nu0\">2</span>  \u2502<span class=\"nu0\">_0.863212</span> <span class=\"nu0\">_0.752112</span>                                 \u2502<br/>\u2502                               \u2502  <span class=\"nu0\">1.86311</span>   <span class=\"nu0\">1.97421</span>                                 \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>                      \u2502Duplicate solutions with center at <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>              \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">2</span>  \u2502Any center at a distance <span class=\"nu0\">2</span> from <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> works.\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span> <span class=\"nu0\">0.5</span>\u2502No solutions.                                       \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0</span>  \u2502Degenerate point at <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span>                   \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 86, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Objects</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Circles <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> x, y<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> x, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> distanceFrom<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> dx <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> other.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> dy <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> other.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> dx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> equals<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"sy0\">==</span> other<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>other <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">||</span> getClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> other.<span class=\"me1\">getClass</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">)</span> other<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy0\">==</span> point.<span class=\"me1\">x</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">==</span> point.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"(%.4f,\u00a0%.4f)\"</span>, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> findCircles<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p2, <span class=\"kw4\">double</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"the radius can't be negative\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> <span class=\"sy0\">&amp;&amp;</span> p1 <span class=\"sy0\">!=</span> p2<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"no circles can ever be drawn\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>p1, p1<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Objects.<span class=\"me1\">equals</span><span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"an infinite number of circles can be drawn\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> p1.<span class=\"me1\">distanceFrom</span><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> diameter <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance <span class=\"sy0\">&gt;</span> diameter<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"the points are too far apart to draw a circle\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> center <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> p2.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span>, <span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance <span class=\"sy0\">==</span> diameter<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>center, center<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> mirrorDistance <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> r <span class=\"sy0\">-</span> distance <span class=\"sy0\">*</span> distance <span class=\"sy0\">/</span> <span class=\"nu0\">4.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> dx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p2.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance <span class=\"sy0\">/</span> distance<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> dy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance <span class=\"sy0\">/</span> distance<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>center.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dy, center.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> dx<span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>center.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> dy, center.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> points <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span>p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> radii <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">0.5</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> radii.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p1 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p2 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> radii<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"For points\u00a0%s and\u00a0%s with radius\u00a0%f<span class=\"es0\">\\n</span>\"</span>, p1, p2, r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> circles <span class=\"sy0\">=</span> findCircles<span class=\"br0\">(</span>p1, p2, r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> c1 <span class=\"sy0\">=</span> circles<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> c2 <span class=\"sy0\">=</span> circles<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Objects.<span class=\"me1\">equals</span><span class=\"br0\">(</span>c1, c2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"there is just one circle with center at\u00a0%s<span class=\"es0\">\\n</span>\"</span>, c1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"there are two circles with centers at\u00a0%s and\u00a0%s<span class=\"es0\">\\n</span>\"</span>, c1, c2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>ex.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 43, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> hDist <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>...<span class=\"me1\">p1</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">-</span> p2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> pAng <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">atan</span><span class=\"br0\">(</span>p1.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">-</span> p2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">/</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> solveF <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>r<span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">+</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> r<span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">+</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> diamPoints <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p1.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> e<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> findC <span class=\"sy0\">=</span> <span class=\"br0\">(</span>...<span class=\"me1\">args</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">const</span> <span class=\"br0\">[</span>p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> args<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> solve <span class=\"sy0\">=</span> solveF<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> halfDist <span class=\"sy0\">=</span> hDist<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  let msg <span class=\"sy0\">=</span> `p1<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>p1<span class=\"br0\">}</span><span class=\"sy0\">,</span> p2<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>p2<span class=\"br0\">}</span><span class=\"sy0\">,</span> r<span class=\"sy0\">:</span>$<span class=\"br0\">{</span>s<span class=\"br0\">}</span> Result<span class=\"sy0\">:</span> `<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sign</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> halfDist<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>      msg <span class=\"sy0\">+=</span> s <span class=\"sy0\">?</span> `Points on diameter. <span class=\"me1\">Circle</span> at<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>diamPoints<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span><span class=\"br0\">}</span>` <span class=\"sy0\">:</span><br/>        <span class=\"st0\">'Radius Zero'</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>halfDist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        msg <span class=\"sy0\">+=</span> <span class=\"st0\">'Coincident point. Infinite solutions'</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        let theta <span class=\"sy0\">=</span> pAng<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        let theta2 <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">acos</span><span class=\"br0\">(</span>halfDist <span class=\"sy0\">/</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> solve<span class=\"br0\">(</span>theta <span class=\"sy0\">+</span> e <span class=\"sy0\">*</span> theta2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><br/>          e <span class=\"sy0\">=&gt;</span> msg <span class=\"sy0\">+=</span> `Circle at $<span class=\"br0\">{</span>e<span class=\"br0\">}</span> `<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>      msg <span class=\"sy0\">+=</span> <span class=\"st0\">'No intersection. Points further apart than circle diameter'</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> msg<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Test<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>i<span class=\"br0\">}</span><span class=\"sy0\">:</span> $<span class=\"br0\">{</span>findC<span class=\"br0\">(</span>...<span class=\"me1\">t</span><span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 27, "block": "<pre class=\"text highlighted_source\"># circle_centers is defined here as a filter.<br/># Input should be an array [x1, y1, x2, y2, r] giving the co-ordinates<br/># of the two points and a radius.<br/># If there is one solution, the output is the circle center;<br/># if there are two solutions centered at [x1, y1] and [x2, y2],<br/># then the output is [x1, y1, x2, y2];<br/># otherwise an explanatory string is returned.<br/>\u00a0<br/>def circle_centers:<br/>  def sq: .*.;<br/>  def c(x3; y1; y2; r; d): x3 + ((r|sq - ((d/2)|sq)) | sqrt) * (y1-y2)/d;<br/>\u00a0<br/>  .[0] as $x1 | .[1] as $y1 | .[2] as $x2 | .[3] as $y2 | .[4] as $r<br/>  | ((($x2-$x1)|sq) + (($y2-$y1)|sq) | sqrt) as $d<br/>  | (($x1+$x2)/2) as $x3<br/>  | (($y1+$y2)/2) as $y3<br/>  | c($x3; $y1; $y2; $r; $d) as $cx1<br/>  | c($y3; $x2; $x2; $r; $d) as $cy1<br/>  | (- c(-$x3; $y1; $y2; $r; $d)) as $cx2<br/>  | (- c(-$y3; $x2; $x2; $r; $d)) as $cy2<br/>  | if   $d == 0 and $r == 0 then [$x1, $y1]  # special case<br/>    elif $d == 0     then \"infinitely many circles can be drawn\"<br/>    elif $d &gt;  $r*2  then \"points are too far from each other\"<br/>    elif  0 &gt;  $r    then \"radius is not valid\"<br/>    elif ($cx1 and $cy1 and $cx2 and $cy2) | not then \"no solution\"<br/>    else  [$cx1, $cy1, $cx2, $cy2 ]<br/>    end;</pre>"}, {"lang": "Julia", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>immutable Point{T&lt;:FloatingPoint}<br/>    x::T<br/>    y::T<br/>end<br/>\u00a0<br/>immutable Circle{T&lt;:FloatingPoint}<br/>    c::Point{T}<br/>    r::T<br/>end<br/>Circle{T&lt;:FloatingPoint}(a::Point{T}) = Circle(a, zero(T))<br/>\u00a0<br/>using AffineTransforms<br/>\u00a0<br/>function circlepoints{T&lt;:FloatingPoint}(a::Point{T}, b::Point{T}, r::T)<br/>    cp = Circle{T}[]<br/>    r &gt;= 0 || return (cp, \"No Solution, Negative Radius\")<br/>    if a == b<br/>        if abs(r) &lt; 2eps(zero(T))<br/>            return (push!(cp, Circle(a)), \"Point Solution, Zero Radius\")<br/>        else<br/>            return (cp, \"Infinite Solutions, Indefinite Center\")<br/>        end<br/>    end<br/>    ca = Complex(a.x, a.y)<br/>    cb = Complex(b.x, b.y)<br/>    d = (ca + cb)/2<br/>    tfd = tformtranslate([real(d), imag(d)])<br/>    tfr = tformrotate(angle(cb-ca))<br/>    tfm = tfd*tfr<br/>    u = abs(cb-ca)/2<br/>    r-u &gt; -5eps(r) || return(cp, \"No Solution, Radius Too Small\")<br/>    if r-u &lt; 5eps(r)<br/>        push!(cp, Circle(apply(Point, tfm*[0.0, 0.0]), r))<br/>        return return (cp, \"Single Solution, Degenerate Centers\")<br/>    end<br/>    v = sqrt(r^2 - u^2)<br/>    for w in [v, -v]<br/>        push!(cp, Circle(apply(Point, tfm*[0.0, w]), r))<br/>    end<br/>    return (cp, \"Two Solutions\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 64, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/>typealias IAE <span class=\"sy0\">=</span> IllegalArgumentException<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Point<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun distanceFrom<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx <span class=\"sy0\">=</span> x - other.<span class=\"me1\">x</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy <span class=\"sy0\">=</span> y - other.<span class=\"me1\">y</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> dx + dy <span class=\"sy0\">*</span> dy <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun equals<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Any<span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>other <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || other <span class=\"sy0\">!</span>is Point<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> other.<span class=\"me1\">x</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">==</span> other.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(%.4f,\u00a0%.4f)\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun findCircles<span class=\"br0\">(</span>p1<span class=\"sy0\">:</span> Point, p2<span class=\"sy0\">:</span> Point, r<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Point, Point<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"the radius can't be negative\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> <span class=\"sy0\">&amp;&amp;</span> p1 <span class=\"sy0\">!=</span> p2<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"no circles can ever be drawn\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p1 to p1<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p1 <span class=\"sy0\">==</span> p2<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"an infinite number of circles can be drawn\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> p1.<span class=\"me1\">distanceFrom</span><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diameter <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>distance <span class=\"sy0\">&gt;</span> diameter<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"the points are too far apart to draw a circle\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> center <span class=\"sy0\">=</span> Point<span class=\"br0\">(</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span> + p2.<span class=\"me1\">x</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span>, <span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> + p2.<span class=\"me1\">y</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>distance <span class=\"sy0\">==</span> diameter<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> center to center<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mirrorDistance <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> r - distance <span class=\"sy0\">*</span> distance / <span class=\"nu0\">4.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx <span class=\"sy0\">=</span>  <span class=\"br0\">(</span>p2.<span class=\"me1\">x</span> - p1.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance / distance<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy <span class=\"sy0\">=</span>  <span class=\"br0\">(</span>p2.<span class=\"me1\">y</span> - p1.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance / distance<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Point<span class=\"br0\">(</span>center.<span class=\"me1\">x</span> - dy, center.<span class=\"me1\">y</span> + dx<span class=\"br0\">)</span> to<br/>           Point<span class=\"br0\">(</span>center.<span class=\"me1\">x</span> + dy, center.<span class=\"me1\">y</span> - dx<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> radii <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">0.5</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>i<span class=\"br0\">]</span>            <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r  <span class=\"sy0\">=</span> radii<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"For points $p1 and $p2 with radius $r\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>c1, c2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> findCircles<span class=\"br0\">(</span>p1, p2, r<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c1 <span class=\"sy0\">==</span> c2<span class=\"br0\">)</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"there is just one circle with center at $c1\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"there are two circles with centers at $c1 and $c2\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a><span class=\"br0\">(</span>ex<span class=\"sy0\">:</span> IllegalArgumentException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>ex.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 47, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'[RC] Circles of given radius through two points</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">read</span> x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span>r<br/>    <span class=\"kw1\">print</span> i;<span class=\"st0\">\") \"</span>;x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span>r<br/>    <span class=\"kw1\">call</span> twoCircles x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span>r<br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">'p1                p2           r</span><br/><span class=\"kw1\">data</span> <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"sy0\">,</span>    <span class=\"nu0\">2.0</span><br/><span class=\"kw1\">data</span> <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1.0</span><br/><span class=\"kw1\">data</span> <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">2.0</span><br/><span class=\"kw1\">data</span> <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.5</span><br/><span class=\"kw1\">data</span> <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0.0</span><br/>\u00a0<br/><span class=\"kw1\">sub</span>  twoCircles  x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span>r<br/>\u00a0<br/>    <span class=\"kw1\">if</span> x1<span class=\"sy0\">=</span>x2 <span class=\"kw1\">and</span> y1<span class=\"sy0\">=</span>y2 <span class=\"kw1\">then</span> <span class=\"co1\">'2.If the points are coincident</span><br/>        <span class=\"kw1\">if</span> r<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"co1\">' unless r==0.0</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"It will be a single point (\"</span>;x1;<span class=\"st0\">\",\"</span>;y1;<span class=\"st0\">\") of radius 0\"</span><br/>            <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"There are any number of circles via single point (\"</span>;x1;<span class=\"st0\">\",\"</span>;y1;<span class=\"st0\">\") of radius \"</span>;r<br/>            <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    r2 <span class=\"sy0\">=</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x1<span class=\"sy0\">-</span>x2<span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"co1\">'half distance between points</span><br/>    <span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;</span>r2 <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Points are too far apart (\"</span>;<span class=\"nu0\">2</span><span class=\"sy0\">*</span>r2;<span class=\"st0\">\") - there are no circles of radius \"</span>;r<br/>        <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"co1\">'else, calculate two centers</span><br/>    cx<span class=\"sy0\">=</span><span class=\"br0\">(</span>x1<span class=\"sy0\">+</span>x2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"co1\">'middle point</span><br/>    cy<span class=\"sy0\">=</span><span class=\"br0\">(</span>y1<span class=\"sy0\">+</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"co1\">'should move from middle point along perpendicular by dd2</span><br/>    dd2<span class=\"sy0\">=</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span>r^<span class=\"nu0\">2</span><span class=\"sy0\">-</span>r2^<span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"co1\">'perpendicular distance</span><br/>    dx1<span class=\"sy0\">=</span>x2<span class=\"sy0\">-</span>cx   <span class=\"co1\">'vector to middle point</span><br/>    dy1<span class=\"sy0\">=</span>y2<span class=\"sy0\">-</span>cy<br/>    dx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">-</span>dy1<span class=\"sy0\">/</span>r2<span class=\"sy0\">*</span>dd2   <span class=\"co1\">'perpendicular:</span><br/>    dy <span class=\"sy0\">=</span> dx1<span class=\"sy0\">/</span>r2<span class=\"sy0\">*</span>dd2     <span class=\"co1\">'rotate and scale</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"(\"</span>;cx<span class=\"sy0\">+</span>dy;<span class=\"st0\">\",\"</span>;cy<span class=\"sy0\">+</span>dx;<span class=\"st0\">\")\"</span>   <span class=\"co1\">'two points, with (+)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"(\"</span>;cx<span class=\"sy0\">-</span>dy;<span class=\"st0\">\",\"</span>;cy<span class=\"sy0\">-</span>dx;<span class=\"st0\">\")\"</span>   <span class=\"co1\">'and (-)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 28, "block": "<pre class=\"text highlighted_source\">drawCircles\u00a0:= proc(x1, y1, x2, y2, r, $)<br/>\tlocal c1, c2, p1, p2;<br/>\tuse geometry in<br/>\t\tif x1 = x2 and y1 = y2 then<br/>\t\t\tif r = 0 then<br/>\t\t\t\tprintf(\"The circle is a point at [%a,\u00a0%a].\\n\", x1, y1);<br/>\t\t\telse<br/>\t\t\t\tprintf(\"The two points are the same. Infinite circles can be drawn.\\n\");<br/>\t\t\tend if;<br/>\t\telif evalf(distance(point(A, x1, y1), point(B, x2, y2))) &gt;r*2 then<br/>\t\t\t\tprintf(\"The two points are too far apart. No circles can be drawn.\\n\");<br/>\t\telse<br/>\t\t\tcircle(P1Cir, [A, r]);#make a circle around the first point<br/>\t\t\tcircle(P2Cir, [B, r]);#make a circle around the second point<br/>\t\t\tintersection('i', P1Cir, P2Cir);<br/>\t\t\t#the intersection of the above 2 circles should give you the centers of the two circles you need to draw<br/>\t\t\tc1\u00a0:= plottools[circle](coordinates(`if`(type(i, list), i[1], i)), r);#make the first circle <br/>\t\t\tc2\u00a0:= plottools[circle](coordinates(`if`(type(i, list), i[2], i)), r);#make the second circle<br/>\t\t\tplots[display](c1, c2, scaling = constrained);#draw<br/>\t\tend if;<br/>\tend use;<br/>end proc:<br/>\u00a0<br/>drawCircles(0.1234, 0.9876, 0.8765, 0.2345, 2.0);<br/>drawCircles(0.0000, 2.0000, 0.0000, 0.0000, 1.0);<br/>drawCircles(0.1234, 0.9876, 0.1234, 0.9876, 2.0);<br/>drawCircles(0.1234, 0.9876, 0.8765, 0.2345, 0.5);<br/>drawCircles(0.1234, 0.9876, 0.1234, 0.9876, 0.0);</pre>"}, {"lang": "Mathematica", "loc": 16, "block": "<pre class=\"text highlighted_source\">Off[Solve::ratnz];<br/>circs::invrad = \"The radius is invalid.\";<br/>circs::equpts = \"The given points (`1`, `2`) are equivalent.\";<br/>circs::dist = <br/>  \"The given points (`1`, `2`) and (`3`, `4`) are too far apart for \\<br/>radius `5`.\";<br/>circs[_, _, 0.]\u00a0:= Message[circs::invrad];<br/>circs[{p1x_, p1y_}, {p1x_, p1y_}, _]\u00a0:= <br/>  Message[circs::equpts, p1x, p1y];<br/>circs[p1\u00a0: {p1x_, p1y_}, p2\u00a0: {p2x_, p2y_}, r_] /; <br/>  EuclideanDistance[p1, p2] &gt; 2 r\u00a0:= <br/> Message[circs::dist, p1x, p1y, p2x, p2y, r]; <br/>circs[p1\u00a0: {p1x_, p1y_}, p2\u00a0: {p2x_, p2y_}, r_]\u00a0:= <br/> Values /@ <br/>  Solve[Abs[x - p1x]^2 + Abs[y - p1y]^2 == <br/>    Abs[x - p2x]^2 + Abs[y - p2y]^2 == r^2, {x, y}];</pre>"}, {"lang": "Maxima", "loc": 43, "block": "<pre class=\"text highlighted_source\">/* define helper function */<br/>vabs(a):= sqrt(a.a);<br/>realp(e):=freeof(%i, e);<br/>\u00a0<br/>/* get a general solution */<br/>sol: block(<br/>  [p1: [x1, y1], p2: [x2, y2], c:  [x0, y0], eq],<br/>  local(r),<br/>  eq: [vabs(p1-c) = r, vabs(p2-c) = r],<br/>  load(to_poly_solve),<br/>  assume(r&gt;0),<br/>  args(to_poly_solve(eq, c, use_grobner = true)))$<br/>\u00a0<br/>/* use general solution for concrete case */<br/>getsol(sol, x1, y1, x2, y2, r):=block([n, lsol],<br/>  if [x1, y1]=[x2, y2] then (<br/>    print(\"infinity many solutions\"),<br/>    return('infmany)),<br/>  lsol: sublist(''sol, 'realp),<br/>  n: length(lsol),<br/>  if n=0 then (<br/>    print(\"no solutions\"),<br/>    [])<br/>  else if n=1 then (<br/>    print(\"single solution\"),<br/>    lsol[1])<br/>  else if [assoc('x0, lsol[1]), assoc('y0, lsol[1])]=[assoc('x0, lsol[2]), assoc('y0, lsol[2])] then (<br/>    print(\"single solution\"),<br/>    lsol[1])<br/>  else (<br/>    print(\"two solutions\"),<br/>    lsol))$<br/>\u00a0<br/>/* [x1, y1, x2, y2, r] */<br/>d[1]: [0.1234, 0.9876,    0.8765, 0.2345,    2];<br/>d[2]: [0.0000, 2.0000,    0.0000, 0.0000,    1];<br/>d[3]: [0,      0,         0,      1,         0.4];<br/>d[4]: [0,      0,         0,      0,         0.4];<br/>\u00a0<br/>apply('getsol, cons(sol, d[1]));<br/>apply('getsol, cons(sol, d[2]));<br/>apply('getsol, cons(sol, d[3]));<br/>apply('getsol, cons(sol, d[4]));</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u041f0\t\u0421/\u041f\t\u041f1\t\u0421/\u041f\t\u041f2\t\u0421/\u041f\t\u041f3\t\u0421/\u041f\t\u041f4<br/>\u0418\u041f2\t\u0418\u041f0\t-\tx^2\t\u0418\u041f3\t\u0418\u041f1\t-\tx^2\t+\t\u041a\u0432\u041a\u043e\u0440\t\u041f5<br/>\u0418\u041f0\t\u0418\u041f2\t+\t2\t/\t\u041f6\t\u0418\u041f1\t\u0418\u041f3\t+\t2\t/\t\u041f7<br/>\u0418\u041f4\tx^2\t\u0418\u041f5\t2\t/\tx^2\t-\t\u041a\u0432\u041a\u043e\u0440\t\u0418\u041f5\t/\t\u041f8<br/>\u0418\u041f6\t\u0418\u041f1\t\u0418\u041f3\t-\t\u0418\u041f8\t*\t\u041f9\t+\t\u041fA<br/>\u0418\u041f6\t\u0418\u041f9\t-\t\u041fC<br/>\u0418\u041f7\t\u0418\u041f2\t\u0418\u041f0\t-\t\u0418\u041f8\t*\t\u041f9\t+\t\u041fB<br/>\u0418\u041f7\t\u0418\u041f9\t-\t\u041fD<br/>\u0418\u041f5\tx#0\t97\t8\t4\t\u0418\u041d\u0412\t\u0421/\u041f<br/>\u0418\u041f4\t2\t*\t\u0418\u041f5\t-\t\u041fE\tx#0\t97\t\u0418\u041fB\t\u0418\u041fA\t8\t5\t\u0418\u041d\u0412\t\u0421/\u041f<br/>\u0418\u041fE\tx&gt;=0\t97\t8\t3\t\u0418\u041d\u0412\t\u0421/\u041f<br/>\u0418\u041fD\t\u0418\u041fC\t\u0418\u041fB\t\u0418\u041fA\t\u0421/\u041f</pre>"}, {"lang": "Modula-2", "loc": 118, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Circles;<br/><span class=\"kw1\">FROM</span> EXCEPTIONS <span class=\"kw1\">IMPORT</span> AllocateSource<span class=\"sy0\">,</span>ExceptionSource<span class=\"sy0\">,</span>GetMessage<span class=\"sy0\">,</span>RAISE;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> LongMath <span class=\"kw1\">IMPORT</span> sqrt;<br/><span class=\"kw1\">FROM</span> LongStr <span class=\"kw1\">IMPORT</span> RealToStr;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    TextWinExSrc <span class=\"sy0\">:</span> ExceptionSource;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>    Point <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>        x<span class=\"sy0\">,</span>y <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    Pair <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>        a<span class=\"sy0\">,</span>b <span class=\"sy0\">:</span> Point;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Distance<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2 <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">VAR</span> dx<span class=\"sy0\">,</span>dy <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    dx <span class=\"sy0\">:=</span> p1.x <span class=\"sy0\">-</span> p2.x;<br/>    dy <span class=\"sy0\">:=</span> p1.y <span class=\"sy0\">-</span> p2.y;<br/>    <span class=\"kw1\">RETURN</span> sqrt<span class=\"br0\">(</span>dx<span class=\"sy0\">*</span>dx <span class=\"sy0\">+</span> dy<span class=\"sy0\">*</span>dy<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Distance;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Equal<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2 <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>p1.x<span class=\"sy0\">=</span>p2.x<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>p1.y<span class=\"sy0\">=</span>p2.y<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Equal;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WritePoint<span class=\"br0\">(</span>p <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>p.x<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>p.y<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> WritePoint;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> FindCircles<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2 <span class=\"sy0\">:</span> Point; r <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Pair;<br/><span class=\"kw1\">VAR</span><br/>    distance<span class=\"sy0\">,</span>diameter<span class=\"sy0\">,</span>mirrorDistance<span class=\"sy0\">,</span>dx<span class=\"sy0\">,</span>dy <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>    center <span class=\"sy0\">:</span> Point;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> r &lt; <span class=\"nu0\">0.0</span> <span class=\"kw1\">THEN</span> RAISE<span class=\"br0\">(</span>TextWinExSrc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"the radius can't be negative\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"kw1\">NOT</span> Equal<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> RAISE<span class=\"br0\">(</span>TextWinExSrc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"No circles can ever be drawn\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> Pair<span class=\"br0\">{</span>p1<span class=\"sy0\">,</span>p1<span class=\"br0\">}</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> Equal<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> RAISE<span class=\"br0\">(</span>TextWinExSrc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"an infinite number of circles can be drawn\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    distance <span class=\"sy0\">:=</span> Distance<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">)</span>;<br/>    diameter <span class=\"sy0\">:=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r;<br/>    <span class=\"kw1\">IF</span> distance &gt; diameter <span class=\"kw1\">THEN</span> RAISE<span class=\"br0\">(</span>TextWinExSrc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"the points are too far apart to draw a circle\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    center <span class=\"sy0\">:=</span> Point<span class=\"br0\">{</span><span class=\"br0\">(</span>p1.x <span class=\"sy0\">+</span> p2.x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>p1.y <span class=\"sy0\">+</span> p2.y<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"br0\">}</span>;<br/>    <span class=\"kw1\">IF</span> distance <span class=\"sy0\">=</span> diameter <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> Pair<span class=\"br0\">{</span>center<span class=\"sy0\">,</span> center<span class=\"br0\">}</span> <span class=\"kw1\">END</span>;<br/>    mirrorDistance <span class=\"sy0\">:=</span> sqrt<span class=\"br0\">(</span>r <span class=\"sy0\">*</span> r <span class=\"sy0\">-</span> distance <span class=\"sy0\">*</span> distance <span class=\"sy0\">/</span> <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>;<br/>    dx <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>p2.x <span class=\"sy0\">-</span> p1.x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance <span class=\"sy0\">/</span> distance;<br/>    dy <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>p2.y <span class=\"sy0\">-</span> p1.y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> mirrorDistance <span class=\"sy0\">/</span> distance;<br/>    <span class=\"kw1\">RETURN</span> Pair<span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span>center.x <span class=\"sy0\">-</span> dy<span class=\"sy0\">,</span> center.y <span class=\"sy0\">+</span> dx<span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span>center.x <span class=\"sy0\">+</span> dy<span class=\"sy0\">,</span> center.y <span class=\"sy0\">-</span> dx<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">END</span> FindCircles;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2 <span class=\"sy0\">:</span> Point; r <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    result <span class=\"sy0\">:</span> Pair;<br/><span class=\"kw1\">BEGIN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"For points \"</span><span class=\"br0\">)</span>;<br/>    WritePoint<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\" and \"</span><span class=\"br0\">)</span>;<br/>    WritePoint<span class=\"br0\">(</span>p2<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\" with radius \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    result <span class=\"sy0\">:=</span> FindCircles<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"sy0\">,</span>r<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> Equal<span class=\"br0\">(</span>result.a<span class=\"sy0\">,</span> result.b<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        WriteString<span class=\"br0\">(</span><span class=\"st0\">\"there is just one circle with the center at \"</span><span class=\"br0\">)</span>;<br/>        WritePoint<span class=\"br0\">(</span>result.a<span class=\"br0\">)</span>;<br/>        WriteLn;<br/>    <span class=\"kw1\">ELSE</span><br/>        WriteString<span class=\"br0\">(</span><span class=\"st0\">\"there are two circles with centers at \"</span><span class=\"br0\">)</span>;<br/>        WritePoint<span class=\"br0\">(</span>result.a<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span><span class=\"st0\">\" and \"</span><span class=\"br0\">)</span>;<br/>        WritePoint<span class=\"br0\">(</span>result.b<span class=\"br0\">)</span>;<br/>        WriteLn;<br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn;<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span><br/>EXCEPT<br/>    GetMessage<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    WriteLn;<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span><br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> p0<span class=\"sy0\">,</span>p1<span class=\"sy0\">,</span>p2<span class=\"sy0\">,</span>p3 <span class=\"sy0\">:</span> Point;<br/><span class=\"kw1\">BEGIN</span><br/>    AllocateSource<span class=\"br0\">(</span>TextWinExSrc<span class=\"br0\">)</span>;<br/>    p0 <span class=\"sy0\">:=</span> Point<span class=\"br0\">{</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span><span class=\"nu0\">0.9876</span><span class=\"br0\">}</span>;<br/>    p1 <span class=\"sy0\">:=</span> Point<span class=\"br0\">{</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span><span class=\"nu0\">0.2345</span><span class=\"br0\">}</span>;<br/>    p2 <span class=\"sy0\">:=</span> Point<span class=\"br0\">{</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span><span class=\"nu0\">2.0000</span><span class=\"br0\">}</span>;<br/>    p3 <span class=\"sy0\">:=</span> Point<span class=\"br0\">{</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span><span class=\"nu0\">0.0000</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>    Print<span class=\"br0\">(</span>p0<span class=\"sy0\">,</span>p1<span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span>p2<span class=\"sy0\">,</span>p3<span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span>p0<span class=\"sy0\">,</span>p0<span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span>p0<span class=\"sy0\">,</span>p1<span class=\"sy0\">,</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span>p0<span class=\"sy0\">,</span>p0<span class=\"sy0\">,</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Circles.</pre>"}, {"lang": "Nim", "loc": 48, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>type<br/>  Point = tuple[x, y: float]<br/>  Circle = tuple[x, y, r: float]<br/>\u00a0<br/>proc circles(p1, p2: Point, r: float): tuple[c1, c2: Circle] =<br/>  if r == 0: raise newException(ValueError,<br/>    \"radius of zero\")<br/>  if p1 == p2: raise newException(ValueError,<br/>    \"coincident points gives infinite number of Circles\")<br/>\u00a0<br/>  # delta x, delta y between points<br/>  let (dx, dy) = (p2.x - p1.x, p2.y - p1.y)<br/>  # dist between points<br/>  let q = sqrt(dx*dx + dy*dy)<br/>  if q &gt; 2.0*r: raise newException(ValueError,<br/>    \"separation of points &gt; diameter\")<br/>\u00a0<br/>  # halfway point<br/>  let p3: Point = ((p1.x+p2.x)/2, (p1.y+p2.y)/2)<br/>  # distance along the mirror line<br/>  let d = sqrt(r*r - (q/2)*(q/2))<br/>  # One answer<br/>  result.c1 = (p3.x - d*dy/q, p3.y + d*dx/q, abs(r))<br/>  # The other answer<br/>  result.c2 = (p3.x + d*dy/q, p3.y - d*dx/q, abs(r))<br/>\u00a0<br/>const tries: seq[tuple[p1, p2: Point, r: float]] =<br/>  @[((0.1234, 0.9876), (0.8765, 0.2345), 2.0),<br/>    ((0.0000, 2.0000), (0.0000, 0.0000), 1.0),<br/>    ((0.1234, 0.9876), (0.1234, 0.9876), 2.0),<br/>    ((0.1234, 0.9876), (0.8765, 0.2345), 0.5),<br/>    ((0.1234, 0.9876), (0.1234, 0.9876), 0.0)]<br/>\u00a0<br/>for p1, p2, r in tries.items:<br/>  echo \"Through points:\"<br/>  echo \"  \", p1<br/>  echo \"  \", p2<br/>  echo \"  and radius \", r<br/>  echo \"You can construct the following circles:\"<br/>  try:<br/>    let (c1, c2) = circles(p1, p2, r)<br/>    echo \"  \", c1<br/>    echo \"  \", c2<br/>  except ValueError:<br/>    echo \"  ERROR: \", getCurrentExceptionMsg()<br/>  echo \"\"</pre>"}, {"lang": "Oforth", "loc": 16, "block": "<pre class=\"text highlighted_source\">: circleCenter(x1, y1, x2, y2, r)<br/>| d xmid ymid r1 md | <br/>   x2 x1 - sq  y2 y1 - sq + sqrt -&gt; d<br/>   x1 x2 + 2 / -&gt; xmid<br/>   y1 y2 + 2 / -&gt; ymid   <br/>   2 r * -&gt; r1<br/>\u00a0<br/>   d 0.0 == ifTrue: [ \"Infinite number of circles\" . return ]<br/>   d r1 == ifTrue:  [ System.Out \"One circle: (\" &lt;&lt; xmid &lt;&lt; \", \" &lt;&lt; ymid &lt;&lt; \")\" &lt;&lt; cr return ]<br/>   d r1  &gt; ifTrue:  [ \"No circle\" . return ]<br/>\u00a0<br/>   r sq d 2 / sq - sqrt -&gt;md    <br/>\u00a0<br/>   System.Out \"C1\u00a0: (\" &lt;&lt; xmid y1 y2 - md * d / + &lt;&lt; \", \" &lt;&lt; ymid x2 x1 - md * d / + &lt;&lt; \")\" &lt;&lt; cr <br/>   System.Out \"C2\u00a0: (\" &lt;&lt; xmid y1 y2 - md * d / - &lt;&lt; \", \" &lt;&lt; ymid x2 x1 - md * d / - &lt;&lt; \")\" &lt;&lt; cr <br/>;</pre>"}, {"lang": "ooRexx", "loc": 39, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm finds 2 circles with a specific radius given two (X,Y) points*/</span><br/>  a<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>  a<span class=\"sy0\">.</span>1=<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span> <span class=\"nu0\">2</span><br/>  a<span class=\"sy0\">.</span>2=<span class=\"nu0\">0.0000</span> <span class=\"nu0\">2.0000</span> <span class=\"nu0\">0.0000</span> <span class=\"nu0\">0.0000</span> <span class=\"nu0\">1</span><br/>  a<span class=\"sy0\">.</span>3=<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">2</span><br/>  a<span class=\"sy0\">.</span>4=<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span> <span class=\"nu0\">0.5</span><br/>  a<span class=\"sy0\">.</span>5=<span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'     x1      y1      x2      y2  radius   cir1x   cir1y   cir2x   cir2y'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">' ------  ------  ------  ------  ------  ------  ------  ------  ------'</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">By</span> <span class=\"nu0\">1</span> <span class=\"kw2\">While</span> a<span class=\"sy0\">.</span>j<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span><br/>    <span class=\"kw1\">Do</span> k=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> <span class=\"nu0\">4</span><br/>      w<span class=\"sy0\">.</span>k=f<span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>j,k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Say</span> w<span class=\"sy0\">.</span>1 w<span class=\"sy0\">.</span>2 w<span class=\"sy0\">.</span>3 w<span class=\"sy0\">.</span>4 <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>j,<span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  twocircles<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Exit</span><br/>\u00a0<br/>twocircles: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> px py qx qy r <span class=\"sy0\">.</span><br/>  <span class=\"kw1\">If</span> r=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">' radius of zero gives no circles.'</span><br/>  x=<span class=\"br0\">(</span>qx-px<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>  y=<span class=\"br0\">(</span>qy-py<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>  bx=px+x<br/>  <span class=\"kw2\">by</span>=py+y<br/>  pb=rxCalcsqrt<span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+y<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> pb=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">' coincident points give infinite circles'</span><br/>  <span class=\"kw1\">If</span> pb<span class=\"sy0\">&gt;</span>r <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">' points are too far apart for the given radius'</span><br/>  cb=rxCalcsqrt<span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span>-pb<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  x1=y<span class=\"sy0\">*</span>cb<span class=\"sy0\">/</span>pb<br/>  y1=x<span class=\"sy0\">*</span>cb<span class=\"sy0\">/</span>pb<br/>  <span class=\"kw1\">Return</span> f<span class=\"br0\">(</span>bx-x1<span class=\"br0\">)</span> f<span class=\"br0\">(</span><span class=\"kw2\">by</span>+y1<span class=\"br0\">)</span> f<span class=\"br0\">(</span>bx+x1<span class=\"br0\">)</span> f<span class=\"br0\">(</span>by-y1<span class=\"br0\">)</span><br/>\u00a0<br/>f: <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* format a number with 4 dec dig.*/</span><br/>\u00a0<br/>::requires <span class=\"st0\">'rxMath'</span> library</pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\">circ<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">==</span>b<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"st0\">\"impossible\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  my<span class=\"br0\">(</span>h<span class=\"sy0\">=</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>r<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">-</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">*</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span>a<span class=\"sy0\">+</span>h<span class=\"sy0\">+</span>t<span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span>a<span class=\"sy0\">+</span>h<span class=\"sy0\">-</span>t<span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>circ<span class=\"br0\">(</span><span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.8765</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.2345</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span><br/>circ<span class=\"br0\">(</span><span class=\"nu2\">0.0000</span> <span class=\"sy0\">+</span> <span class=\"nu2\">2.0000</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.0000</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.0000</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><br/>circ<span class=\"br0\">(</span><span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span><br/>circ<span class=\"br0\">(</span><span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.8765</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.2345</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">.5</span><span class=\"br0\">)</span><br/>circ<span class=\"br0\">(</span><span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.1234</span> <span class=\"sy0\">+</span> <span class=\"nu2\">0.9876</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 34, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw2\">use</span> feature <span class=\"st_h\">'say'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> circles_from_p1p2r <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st_h\">'Radius is zero'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$r</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st_h\">'coincident points gives infinite number of Circles'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">==</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">==</span> <span class=\"re0\">$y2</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># delta x, delta y between points</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$dx</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st_h\">'separation of points &gt; diameter'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2.0</span><span class=\"re0\">*$r</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># halfway point</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x3</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x2</span><span class=\"br0\">)</span> <span class=\"co2\">/ 2, ($y1 + $y2) /</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># distance along the mirror line</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># One answer</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@c1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x3</span> <span class=\"sy0\">-</span> <span class=\"re0\">$d</span><span class=\"re0\">*$dy</span><span class=\"sy0\">/</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$d</span><span class=\"re0\">*$dx</span><span class=\"sy0\">/</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># The other answer</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@c2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$d</span><span class=\"re0\">*$dy</span><span class=\"sy0\">/</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span> <span class=\"sy0\">-</span> <span class=\"re0\">$d</span><span class=\"re0\">*$dx</span><span class=\"sy0\">/</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">@c1</span><span class=\"sy0\">,</span> <span class=\"re0\">@c2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@arr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t   <span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t   <span class=\"co1\"># [0.1234, 0.9876, 0.1234, 0.9876, 2.0],</span><br/>\t   <span class=\"co1\"># [0.1234, 0.9876, 0.8765, 0.2345, 0.5],</span><br/>\t   <span class=\"co1\"># [0.1234, 0.9876, 0.1234, 0.9876, 0.0]</span><br/>\t  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">@arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@res</span> <span class=\"sy0\">=</span> circles_from_p1p2r <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  say <span class=\"st0\">\"@res\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> circles <span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"sy0\">,</span> <span class=\"re0\">@B</span> <span class=\"kw1\">where</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">and</span><span class=\"br0\">]</span> <span class=\"re0\">@A</span> <span class=\"kw1\">Z</span><span class=\"sy0\">==</span> <span class=\"re0\">@B</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st_h\">'Degenerate point'</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> circles <span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"sy0\">,</span> <span class=\"re0\">@B</span> <span class=\"kw1\">where</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">and</span><span class=\"br0\">]</span> <span class=\"re0\">@A</span> <span class=\"kw1\">Z</span><span class=\"sy0\">==</span> <span class=\"re0\">@B</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'Infinitely many share a point'</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> circles <span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"sy0\">,</span> <span class=\"re0\">@B</span><span class=\"sy0\">,</span> <span class=\"re0\">$radius</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@middle</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">@A</span> <span class=\"kw1\">Z</span><span class=\"sy0\">+</span> <span class=\"re0\">@B</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span><span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@diff</span> <span class=\"sy0\">=</span> <span class=\"re0\">@A</span> Z<span class=\"sy0\">-</span> <span class=\"re0\">@B</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sqrt</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@diff</span> <span class=\"kw1\">X</span><span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'Too far apart'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@orth</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">@diff</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@diff</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">X</span><span class=\"sy0\">*</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"re0\">$radius</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"co2\">/ 2) ** 2) /</span> <span class=\"re0\">$q</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">@middle</span> <span class=\"kw1\">Z</span><span class=\"sy0\">+</span> <span class=\"re0\">@orth</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">@middle</span> Z<span class=\"sy0\">-</span> <span class=\"re0\">@orth</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@input</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">@input</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">,</span> <span class=\"st_h\">': '</span><span class=\"sy0\">,</span> circles<span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' and '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 42, "block": "<pre class=\"text highlighted_source\">twoci: Proc Options(main);<br/> Dcl 1 *(5),<br/>      2 m1x Dec Float Init(0.1234,     0,0.1234,0.1234,0.1234),<br/>      2 m1y Dec Float Init(0.9876,     2,0.9876,0.9876,0.9876),<br/>      2 m2x Dec Float Init(0.8765,     0,0.1234,0.8765,0.1234),<br/>      2 m2y Dec Float Init(0.2345,     0,0.9876,0.2345,0.9876),<br/>      2 r   Dec Float Init(     2,     1,     2,0.5   ,     0);<br/> Dcl i Bin Fixed(31);<br/> Put Edit('     x1     y1     x2     y2  r '||<br/>          '  cir1x   cir1y   cir2x   cir2y')(Skip,a);<br/> Put Edit(' ====== ====== ====== ======  = '||<br/>          ' ======  ======  ======  ======')(Skip,a);<br/> Do i=1 To 5;<br/>   Put Edit(m1x(i),m1y(i),m2x(i),m2y(i),r(i))<br/>           (Skip,4(f(7,4)),f(3));<br/>   Put Edit(twocircles(m1x(i),m1y(i),m2x(i),m2y(i),r(i)))(a);<br/>   End;<br/>\u00a0<br/> twoCircles: proc(m1x,m1y,m2x,m2y,r) Returns(Char(50) Var);<br/> Dcl (m1x,m1y,m2x,m2y,r) Dec Float;<br/> Dcl (cx,cy,bx,by,pb,x,y,x1,y1) Dec Float;<br/> Dcl res Char(50) Var;<br/> If r=0 then return(' radius of zero gives no circles.');<br/> x=(m2x-m1x)/2;<br/> y=(m2y-m1y)/2;<br/> bx=m1x+x;<br/> by=m1y+y;<br/> pb=sqrt(x**2+y**2);<br/> cx=(m2x-m1x)/2;<br/> cy=(m2y-m1y)/2;<br/> bx=m1x+x;<br/> by=m1y+y;<br/> pb=sqrt(x**2+y**2)<br/> if pb=0 then return(' coincident points give infinite circles');<br/> if pb&gt;r then return(' points are too far apart for the given radius');<br/> cb=sqrt(r**2-pb**2);<br/> x1=y*cb/pb;<br/> y1=x*cb/pb<br/> Put String(res) Edit((bx-x1),(by+y1),(bx+x1),(by-y1))(4(f(8,4)));<br/> Return(res);<br/> End;<br/> End;</pre>"}, {"lang": "Python", "loc": 45, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> namedtuple<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/>\u00a0<br/>Pt <span class=\"sy0\">=</span> namedtuple<span class=\"br0\">(</span><span class=\"st0\">'Pt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'x, y'</span><span class=\"br0\">)</span><br/>Circle <span class=\"sy0\">=</span> Cir <span class=\"sy0\">=</span> namedtuple<span class=\"br0\">(</span><span class=\"st0\">'Circle'</span><span class=\"sy0\">,</span> <span class=\"st0\">'x, y, r'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> circles_from_p1p2r<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Following explanation at http://mathforum.org/library/drmath/view/53027.html'</span><br/>    <span class=\"kw1\">if</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span>:<br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">'radius of zero'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> p1<span class=\"sy0\">,</span> p2<br/>    <span class=\"kw1\">if</span> p1 <span class=\"sy0\">==</span> p2:<br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">'coincident points gives infinite number of Circles'</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># delta x, delta y between points</span><br/>    dx<span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> x2 - x1<span class=\"sy0\">,</span> y2 - y1<br/>    <span class=\"co1\"># dist between points</span><br/>    q <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>dx**<span class=\"nu0\">2</span> + dy**<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> q <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2.0</span>*r:<br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">'separation of points &gt; diameter'</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># halfway point</span><br/>    x3<span class=\"sy0\">,</span> y3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1+x2<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>y1+y2<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/>    <span class=\"co1\"># distance along the mirror line</span><br/>    d <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>r**<span class=\"nu0\">2</span>-<span class=\"br0\">(</span>q/<span class=\"nu0\">2</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># One answer</span><br/>    c1 <span class=\"sy0\">=</span> Cir<span class=\"br0\">(</span>x <span class=\"sy0\">=</span> x3 - d*dy/q<span class=\"sy0\">,</span><br/>             y <span class=\"sy0\">=</span> y3 + d*dx/q<span class=\"sy0\">,</span><br/>             r <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># The other answer</span><br/>    c2 <span class=\"sy0\">=</span> Cir<span class=\"br0\">(</span>x <span class=\"sy0\">=</span> x3 + d*dy/q<span class=\"sy0\">,</span><br/>             y <span class=\"sy0\">=</span> y3 - d*dx/q<span class=\"sy0\">,</span><br/>             r <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> c1<span class=\"sy0\">,</span> c2<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> r <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pt<span class=\"br0\">(</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">(</span>Pt<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pt<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">(</span>Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">(</span>Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pt<span class=\"br0\">(</span><span class=\"nu0\">0.8765</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">(</span>Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pt<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Through points:<span class=\"es0\">\\n</span> \u00a0%r,<span class=\"es0\">\\n</span> \u00a0%r<span class=\"es0\">\\n</span>  and radius\u00a0%f<span class=\"es0\">\\n</span>You can construct the following circles:'</span><br/>             \u00a0% <span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">try</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' \u00a0%r<span class=\"es0\">\\n</span> \u00a0%r<span class=\"es0\">\\n</span>'</span>\u00a0% circles_from_p1p2r<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">except</span> <span class=\"kw2\">ValueError</span> <span class=\"kw1\">as</span> v:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'  ERROR:\u00a0%s<span class=\"es0\">\\n</span>'</span>\u00a0% <span class=\"br0\">(</span>v.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require plot/utils)<br/>\u00a0<br/>(define (circle-centers p1 p2 r)<br/>  (when (zero? r) (err \"zero radius.\"))<br/>  (when (equal? p1 p2) (err \"the points coinside.\"))<br/> \u00a0; the midle point<br/>  (define m (v/ (v+ p1 p2) 2))<br/> \u00a0; the vector connecting given points<br/>  (define d (v/ (v- p1 p2) 2))<br/> \u00a0; the distance between the center of the circle and the middle point<br/>  (define \u03be (- (sqr r) (vmag^2 d)))<br/>  (when (negative? \u03be) (err \"given radius is less then the distance between points.\"))<br/> \u00a0; the unit vector orthogonal to the delta<br/>  (define n (vnormalize (orth d)))<br/> \u00a0; the shift along the direction orthogonal to the delta<br/>  (define x (v* n (sqrt \u03be)))<br/>  (values (v+ m x) (v- m x)))<br/>\u00a0<br/>;; error message<br/>(define (err m) (error \"Impossible to build a circle:\" m))<br/>\u00a0<br/>;; returns a vector which is orthogonal to the geven one<br/>(define orth (match-lambda [(vector x y) (vector y (- x))]))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds  two circles  with a  specific radius  given two (X,Y)  points.    */</span><br/>@<span class=\"sy0\">.</span>=; @<span class=\"sy0\">.</span>1= <span class=\"nu0\">0.1234</span>   <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">0.8765</span>    <span class=\"nu0\">0.2345</span>    <span class=\"nu0\">2</span><br/>     @<span class=\"sy0\">.</span>2= <span class=\"nu0\">0</span>        <span class=\"nu0\">2</span>         <span class=\"nu0\">0</span>         <span class=\"nu0\">0</span>         <span class=\"nu0\">1</span><br/>     @<span class=\"sy0\">.</span>3= <span class=\"nu0\">0.1234</span>   <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">0.1234</span>    <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">2</span><br/>     @<span class=\"sy0\">.</span>4= <span class=\"nu0\">0.1234</span>   <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">0.8765</span>    <span class=\"nu0\">0.2345</span>    <span class=\"nu0\">0.5</span><br/>     @<span class=\"sy0\">.</span>5= <span class=\"nu0\">0.1234</span>   <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">0.1234</span>    <span class=\"nu0\">0.9876</span>    <span class=\"nu0\">0</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     x1        y1        x2        y2     radius          circle1x  circle1y  circle2x  circle2y'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550          \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550'</span><br/>       <span class=\"kw1\">do</span>  j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> @<span class=\"sy0\">.</span>j  p1 p2 p3 p4 r           <span class=\"coMULTI\">/*points, radii*/</span><br/>       <span class=\"kw1\">say</span> f<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>  f<span class=\"br0\">(</span>p2<span class=\"br0\">)</span>  f<span class=\"br0\">(</span>p3<span class=\"br0\">)</span>  f<span class=\"br0\">(</span>p4<span class=\"br0\">)</span>       <span class=\"kw6\">center</span><span class=\"br0\">(</span>r<span class=\"sy0\">/</span><span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>      <span class=\"st0\">\"\u2500\u2500\u2500\u25ba \"</span>        2circ<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><br/>       <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>2circ: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> px py qx qy r <span class=\"sy0\">.</span>;  x=<span class=\"br0\">(</span>qx-px<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>;   y=<span class=\"br0\">(</span>qy-py<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>                                             bx=px + x;     <span class=\"kw2\">by</span>=py + y;  pb=sqrt<span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+y<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> r = <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"st0\">'radius of zero yields no circles.'</span><br/>       <span class=\"kw1\">if</span> pb==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"st0\">'coincident points give infinite circles.'</span><br/>       <span class=\"kw1\">if</span> pb <span class=\"sy0\">&gt;</span>r  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"st0\">'points are too far apart for the specified radius.'</span><br/>       cb=sqrt<span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span> - pb<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;      x1=y <span class=\"sy0\">*</span> cb <span class=\"sy0\">/</span> pb;                  y1=x <span class=\"sy0\">*</span> cb <span class=\"sy0\">/</span> pb<br/>                      <span class=\"kw1\">return</span>  f<span class=\"br0\">(</span>bx-x1<span class=\"br0\">)</span>   f<span class=\"br0\">(</span><span class=\"kw2\">by</span>+y1<span class=\"br0\">)</span>   f<span class=\"br0\">(</span>bx+x1<span class=\"br0\">)</span>   f<span class=\"br0\">(</span>by-y1<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>f:     f=<span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, , <span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>;       _=f         <span class=\"coMULTI\">/*format # with 4 dec digits*/</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,f<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span>,f<span class=\"br0\">)</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> f=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>f,<span class=\"st0\">'T'</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*strip trailing 0s if .&amp; \u00acE*/</span><br/>       <span class=\"kw1\">return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>f,<span class=\"st0\">'T'</span>,<span class=\"sy0\">.</span><span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*strip trailing dec point. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;  h=d+<span class=\"nu0\">6</span>;  m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">\"E\"</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2+<span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>; <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Circles of given radius through two points<br/>\u00a0<br/>decimals(4)<br/>x1 = 0.1234<br/>y1 = 0.9876<br/>x2 = 0.8765<br/>y2 = 0.2345<br/>r = 2.0<br/>see \"1\u00a0: \" + x1 + \" \" + y1 + \" \" + x2 + \" \" + y2 + \" \" + r + nl<br/>twocircles(x1, y1, x2, y2, r)<br/>\u00a0<br/>x1 = 0.0000<br/>y1 = 2.0000<br/>x2 = 0.0000<br/>y2 = 0.0000<br/>r = 1.0<br/>see \"2\u00a0: \" + x1 + \" \" + y1 + \" \" + x2 + \" \" + y2 + \" \" + r + nl<br/>twocircles(x1, y1, x2, y2, r)<br/>\u00a0<br/>x1 = 0.1234<br/>y1 = 0.9876<br/>x2 = 0.1234<br/>y2 = 0.9876<br/>r = 2.0<br/>see \"3\u00a0: \" + x1 + \" \" + y1 + \" \" + x2 + \" \" + y2 + \" \" + r + nl<br/>twocircles(x1, y1, x2, y2, r)<br/>\u00a0<br/>x1 = 0.1234<br/>y1 = 0.9876<br/>x2 = 0.8765<br/>y2 = 0.2345<br/>r = 0.5<br/>see \"4\u00a0: \" + x1 + \" \" + y1 + \" \" + x2 + \" \" + y2 + \" \" + r + nl<br/>twocircles(x1, y1, x2, y2, r)<br/>\u00a0<br/>x1 = 0.1234<br/>y1 = 0.9876<br/>x2 = 0.1234<br/>y2 = 0.9876<br/>r= 0.0<br/>see \"5\u00a0: \" + x1 + \" \" + y1 + \" \" + x2 + \" \" + y2 + \" \" + r + nl<br/>twocircles(x1, y1, x2, y2, r)        <br/>\u00a0<br/>func twocircles(x1, y1, x2, y2, r)<br/>        if x1=x2 and y1=y2 <br/>           if r=0 <br/>              see \"It will be a single point (\" + x1 + \",\" + y1 + \") of radius 0\" + nl + nl<br/>              return<br/>           else<br/>              see \"There are any number of circles via single point (\" + x1 + \",\" + y1 + \") of radius \" + r + nl + nl<br/>              return<br/>           ok<br/>        ok<br/>        r2 = sqrt(pow((x1-x2),2)+pow((y1-y2),2))/2<br/>        if r&lt;r2<br/>           see \"Points are too far apart (\" + 2*r2 + \") - there are no circles of radius \" + r + nl + nl<br/>           return<br/>        ok <br/>        cx=(x1+x2)/2 <br/>        cy=(y1+y2)/2<br/>        dd2=sqrt(pow(r,2)-pow(r2,2))  <br/>        dx1=x2-cx  <br/>        dy1=y2-cy<br/>        dx = 0-dy1/r2*dd2<br/>        dy = dx1/r2*dd2  <br/>        see \"(\" + (cx+dy) + \", \" + (cy+dx) + \")\" + nl<br/>        see \"(\" + (cx-dy) + \", \" + (cy-dx) + \")\" + nl + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 37, "block": "<pre class=\"ruby highlighted_source\">Pt     = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:x</span>, <span class=\"re3\">:y</span><span class=\"br0\">)</span><br/>Circle = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:x</span>, <span class=\"re3\">:y</span>, <span class=\"re3\">:r</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> circles_from<span class=\"br0\">(</span>pt1, pt2, r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Infinite number of circles, points coincide.\"</span> <span class=\"kw1\">if</span> pt1 == pt2 <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"co1\"># handle single point and r == 0</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">[</span>Circle.<span class=\"me1\">new</span><span class=\"br0\">(</span>pt1.<span class=\"me1\">x</span>, pt1.<span class=\"me1\">y</span>, r<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> pt1 == pt2 <span class=\"sy0\">&amp;&amp;</span> r == <span class=\"nu0\">0</span><br/>  dx, dy = pt2.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> pt1.<span class=\"me1\">x</span>, pt2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> pt1.<span class=\"me1\">y</span><br/>  <span class=\"co1\"># distance between points</span><br/>  q = <span class=\"kw4\">Math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>dx, dy<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Also catches pt1\u00a0!= pt2 &amp;&amp; r == 0</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Distance of points &gt; diameter.\"</span> <span class=\"kw1\">if</span> q <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">*</span>r<br/>  <span class=\"co1\"># halfway point</span><br/>  x3, y3 = <span class=\"br0\">(</span>pt1.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> pt2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>, <span class=\"br0\">(</span>pt1.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> pt2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><br/>  d = <span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>q<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><br/>  <span class=\"br0\">[</span>Circle.<span class=\"me1\">new</span><span class=\"br0\">(</span>x3 <span class=\"sy0\">-</span> d<span class=\"sy0\">*</span>dy<span class=\"sy0\">/</span>q, y3 <span class=\"sy0\">+</span> d<span class=\"sy0\">*</span>dx<span class=\"sy0\">/</span>q, r<span class=\"br0\">)</span>,<br/>   Circle.<span class=\"me1\">new</span><span class=\"br0\">(</span>x3 <span class=\"sy0\">+</span> d<span class=\"sy0\">*</span>dy<span class=\"sy0\">/</span>q, y3 <span class=\"sy0\">-</span> d<span class=\"sy0\">*</span>dx<span class=\"sy0\">/</span>q, r<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">uniq</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Demo:</span><br/>ar = <span class=\"br0\">[</span><span class=\"br0\">[</span>Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">]</span>,<br/>      <span class=\"br0\">[</span>Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span>, Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">]</span>,<br/>      <span class=\"br0\">[</span>Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">]</span>,<br/>      <span class=\"br0\">[</span>Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span><span class=\"br0\">]</span>,<br/>      <span class=\"br0\">[</span>Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, Pt.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>ar.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>p1, p2, r<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"Given points:<span class=\"es0\">\\n</span>  #{p1.values},<span class=\"es0\">\\n</span>  #{p2.values}<span class=\"es0\">\\n</span>  and radius #{r}<span class=\"es0\">\\n</span>\"</span><br/>  <span class=\"kw1\">begin</span><br/>    circles = circles_from<span class=\"br0\">(</span>p1, p2, r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"You can construct the following circles:\"</span><br/>    circles.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"  #{c}\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">rescue</span> <span class=\"kw4\">ArgumentError</span> <span class=\"sy0\">=&gt;</span> e<br/>    <span class=\"kw3\">puts</span> e<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>html \"&lt;TABLE border=1&gt;\"<br/>html \"&lt;tr bgcolor=wheat align=center&gt;&lt;td&gt;No.&lt;/td&gt;&lt;td&gt;x1&lt;/td&gt;&lt;td&gt;y1&lt;/td&gt;&lt;td&gt;x2&lt;/td&gt;&lt;td&gt;y2&lt;/td&gt;&lt;td&gt;r&lt;/td&gt;&lt;td&gt;cir x1&lt;/td&gt;&lt;td&gt;cir y1&lt;/td&gt;&lt;td&gt;cir x2&lt;/td&gt;&lt;td&gt;cir y2&lt;/td&gt;&lt;/tr&gt;\"<br/>for i = 1 to 5<br/>    read x1, y1, x2, y2,r<br/>html \"&lt;tr align=right&gt;&lt;td&gt;\";i;\"&lt;/td&gt;&lt;td&gt;\";x1;\"&lt;/td&gt;&lt;td&gt;\";y1;\"&lt;/td&gt;&lt;td&gt;\";x2;\"&lt;/td&gt;&lt;td&gt;\";y2;\"&lt;/td&gt;&lt;td&gt;\";r;\"&lt;/td&gt;\"<br/>    gosub [twoCircles]<br/>next<br/>html \"&lt;/table&gt;\"<br/>end<br/>\u00a0<br/>'p1                p2           r<br/>data 0.1234, 0.9876,    0.8765, 0.2345,    2.0<br/>data 0.0000, 2.0000,    0.0000, 0.0000,    1.0<br/>data 0.1234, 0.9876,    0.1234, 0.9876,    2.0<br/>data 0.1234, 0.9876,    0.8765, 0.2345,    0.5<br/>data 0.1234, 0.9876,    0.1234, 0.9876,    0.0<br/>\u00a0<br/>[twoCircles]<br/>\u00a0<br/>    if x1=x2 and y1=y2 then '2.If the points are coincident<br/>        if r=0 then ' unless r==0.0<br/>            html \"&lt;td colspan=4 align=left&gt;It will be a single point (\";x1;\",\";y1;\") of radius 0&lt;/td&gt;&lt;/tr&gt;\"<br/>            RETURN<br/>        else<br/>            html \"&lt;td colspan=4 align=left&gt;There are any number of circles via single point (\";x1;\",\";y1;\") of radius \";r;\"&lt;/td&gt;&lt;/tr&gt;\"<br/>            RETURN<br/>        end if<br/>    end if<br/>    r2 = sqr((x1-x2)^2+(y1-y2)^2)/2\t\t\t'half distance between points<br/>    if r&lt;r2 then<br/>        html \"&lt;td colspan=4 align=left&gt;Points are too far apart (\";2*r2;\") - there are no circles of radius \";r<br/>        RETURN<br/>    end if<br/>\u00a0<br/>    'else, calculate two centers<br/>    cx=(x1+x2)/2 \t\t\t\t\t'middle point<br/>    cy=(y1+y2)/2<br/>    'should move from middle point along perpendicular by dd2<br/>    dd2=sqr(r^2-r2^2)\t\t\t\t\t'perpendicular distance<br/>    dx1=x2-cx   \t\t\t\t\t'vector to middle point<br/>    dy1=y2-cy<br/>    dx = 0-dy1/r2*dd2   \t\t\t\t'perpendicular:<br/>    dy = dx1/r2*dd2     \t\t\t\t'rotate and scale<br/>    html \"&lt;td&gt;\";cx+dy;\"&lt;/td&gt;&lt;td&gt;\";cy+dx;\"&lt;/td&gt;\"   \t'two points, with (+)<br/>    html \"&lt;td&gt;\";cx-dy;\"&lt;/td&gt;&lt;td&gt;\";cy-dx;\"&lt;/td&gt;&lt;/TR&gt;\" \t'and (-)<br/>RETURN</pre>"}, {"lang": "Rust", "loc": 58, "block": "<pre class=\"text highlighted_source\">use std::fmt;<br/>\u00a0<br/>#[derive(Clone,Copy)]<br/>struct Point {<br/>    x: f64,<br/>    y: f64<br/>}<br/>\u00a0<br/>fn distance (p1: Point, p2: Point) -&gt; f64 {<br/>    ((p1.x - p2.x).powi(2) + (p1.y - p2.y).powi(2)).sqrt()<br/>}<br/>\u00a0<br/>impl fmt::Display for Point {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        write!(f, \"({:.4}, {:.4})\", self.x, self.y)<br/>    }<br/>}<br/>\u00a0<br/>fn describe_circle(p1: Point, p2: Point, r: f64) {<br/>    let sep = distance(p1, p2);<br/>\u00a0<br/>    if sep == 0. {<br/>        if r == 0. {<br/>            println!(\"No circles can be drawn through {}\", p1);<br/>        } else {<br/>            println!(\"Infinitely many circles can be drawn through {}\", p1);<br/>        }<br/>    } else if sep == 2.0 * r {<br/>        println!(\"Given points are opposite ends of a diameter of the circle with center ({:.4},{:.4}) and r {:.4}\",<br/>                (p1.x+p2.x) / 2.0, (p1.y+p2.y) / 2.0, r);<br/>    } else if sep &gt; 2.0 * r {<br/>        println!(\"Given points are farther away from each other than a diameter of a circle with r {:.4}\", r);<br/>    } else {<br/>        let mirror_dist = (r.powi(2) - (sep / 2.0).powi(2)).sqrt();<br/>\u00a0<br/>        println!(\"Two circles are possible.\");<br/>        println!(\"Circle C1 with center ({:.4}, {:.4}), r {:.4} and Circle C2 with center ({:.4}, {:.4}), r {:.4}\",<br/>                ((p1.x + p2.x) / 2.0) + mirror_dist * (p1.y-p2.y)/sep, (p1.y+p2.y) / 2.0 + mirror_dist*(p2.x-p1.x)/sep,<br/>                r,<br/>                (p1.x+p2.x) / 2.0 - mirror_dist*(p1.y-p2.y)/sep, (p1.y+p2.y) / 2.0 - mirror_dist*(p2.x-p1.x)/sep, r);<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let points: Vec&lt;(Point, Point)&gt; = vec![<br/>        (Point { x: 0.1234, y: 0.9876 }, Point { x: 0.8765, y: 0.2345 }),<br/>        (Point { x: 0.0000, y: 2.0000 }, Point { x: 0.0000, y: 0.0000 }),<br/>        (Point { x: 0.1234, y: 0.9876 }, Point { x: 0.1234, y: 0.9876 }),<br/>        (Point { x: 0.1234, y: 0.9876 }, Point { x: 0.8765, y: 0.2345 }),<br/>        (Point { x: 0.1234, y: 0.9876 }, Point { x: 0.1234, y: 0.9876 })<br/>    ];<br/>    let radii: Vec&lt;f64&gt; = vec![2.0, 1.0, 2.0, 0.5, 0.0];<br/>\u00a0<br/>    for (p, r) in points.into_iter().zip(radii.into_iter()) {<br/>        println!(\"\\nPoints: ({}, {}), Radius: {:.4}\", p.0, p.1, r);<br/>        describe_circle(p.0, p.1, r);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 55, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">scalatest</span>.<span class=\"me1\">FunSuite</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> math.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> V2<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> /<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> V2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span><span class=\"br0\">(</span>x+other.<span class=\"me1\">x</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span>, <span class=\"br0\">(</span>y+other.<span class=\"me1\">y</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> -<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> V2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span>x-other.<span class=\"me1\">x</span>,y-other.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> equals<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Any<span class=\"br0\">)</span> <span class=\"sy0\">=</span> other <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> p<span class=\"sy0\">:</span> V2 <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>x-p.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">0.0001</span> <span class=\"sy0\">&amp;&amp;</span> abs<span class=\"br0\">(</span>y-p.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">0.0001</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> f<span class=\"st0\">\"($x%.4f, $y%.4f)\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Circle<span class=\"br0\">(</span>center<span class=\"sy0\">:</span> V2, radius<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PointTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> FunSuite <span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"       p1               p2         r    result\"</span><span class=\"br0\">)</span><br/>  Seq<span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, V2<span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span>, Seq<span class=\"br0\">(</span>Circle<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">1.8631</span>, <span class=\"nu0\">1.9742</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>, Circle<span class=\"br0\">(</span>V2<span class=\"br0\">(</span>-<span class=\"nu0\">0.8632</span>, -<span class=\"nu0\">0.7521</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span>, V2<span class=\"br0\">(</span><span class=\"nu0\">0.0000</span>, <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span>, <span class=\"nu0\">1.0</span>, Seq<span class=\"br0\">(</span>Circle<span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span>, <span class=\"st0\">\"coincident points yields infinite circles\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, V2<span class=\"br0\">(</span><span class=\"nu0\">0.8765</span>, <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span>, <span class=\"st0\">\"radius is less then the distance between points\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, V2<span class=\"br0\">(</span><span class=\"nu0\">0.1234</span>, <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span>, <span class=\"nu0\">0.0</span>, <span class=\"st0\">\"radius of zero yields no circles\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> v <span class=\"sy0\">=&gt;</span><br/>    print<span class=\"br0\">(</span>s<span class=\"st0\">\"${v._1} ${v._2}  ${v._3}: \"</span><span class=\"br0\">)</span><br/>    circles<span class=\"br0\">(</span>v.<span class=\"sy0\">_</span>1, v.<span class=\"sy0\">_</span>2, v.<span class=\"sy0\">_</span>3<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Right<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>list mkString <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        assert<span class=\"br0\">(</span>list <span class=\"sy0\">===</span> v.<span class=\"sy0\">_</span>4<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Left<span class=\"br0\">(</span>error<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>error<span class=\"br0\">)</span><br/>        assert<span class=\"br0\">(</span>error <span class=\"sy0\">===</span> v.<span class=\"sy0\">_</span>4<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> circles<span class=\"br0\">(</span>p1<span class=\"sy0\">:</span> V2, p2<span class=\"sy0\">:</span> V2, radius<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>radius <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Left<span class=\"br0\">(</span><span class=\"st0\">\"radius of zero yields no circles\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p1 <span class=\"sy0\">==</span> p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Left<span class=\"br0\">(</span><span class=\"st0\">\"coincident points yields infinite circles\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>radius <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>p1-p2<span class=\"br0\">)</span>.<span class=\"me1\">distance</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Left<span class=\"br0\">(</span><span class=\"st0\">\"radius is less then the distance between points\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      Right<span class=\"br0\">(</span>circlesThruPoints<span class=\"br0\">(</span>p1, p2, radius<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> ensuring <span class=\"br0\">{</span> result <span class=\"sy0\">=&gt;</span><br/>      result.<span class=\"me1\">isLeft</span> || result.<span class=\"me1\">right</span>.<span class=\"me1\">get</span>.<span class=\"me1\">nonEmpty</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> circlesThruPoints<span class=\"br0\">(</span>p1<span class=\"sy0\">:</span> V2, p2<span class=\"sy0\">:</span> V2, radius<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Circle<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> p2 - p1<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> pow<span class=\"br0\">(</span>pow<span class=\"br0\">(</span>radius, <span class=\"nu0\">2</span><span class=\"br0\">)</span> - pow<span class=\"br0\">(</span>diff.<span class=\"me1\">distance</span> / <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mid <span class=\"sy0\">=</span> p1 / p2<br/>    Seq<span class=\"br0\">(</span><br/>      Circle<span class=\"br0\">(</span>V2<span class=\"br0\">(</span>mid.<span class=\"me1\">x</span> - d <span class=\"sy0\">*</span> diff.<span class=\"me1\">y</span> / diff.<span class=\"me1\">distance</span>, mid.<span class=\"me1\">y</span> + d <span class=\"sy0\">*</span> diff.<span class=\"me1\">x</span> / diff.<span class=\"me1\">distance</span><span class=\"br0\">)</span>, abs<span class=\"br0\">(</span>radius<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>      Circle<span class=\"br0\">(</span>V2<span class=\"br0\">(</span>mid.<span class=\"me1\">x</span> + d <span class=\"sy0\">*</span> diff.<span class=\"me1\">y</span> / diff.<span class=\"me1\">distance</span>, mid.<span class=\"me1\">y</span> - d <span class=\"sy0\">*</span> diff.<span class=\"me1\">x</span> / diff.<span class=\"me1\">distance</span><span class=\"br0\">)</span>, abs<span class=\"br0\">(</span>radius<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">distinct</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 64, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme inexact<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; c1 and c2 are pairs (x y), r a positive radius</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>circles c1 c2 r<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> x<span class=\"sy0\">-</span>coord <span class=\"kw1\">car</span><span class=\"br0\">)</span> <span class=\"co1\">; for easier to read coordinate extraction from list</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> y<span class=\"sy0\">-</span>coord <span class=\"kw1\">cadr</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>approx<span class=\"sy0\">=</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> a b<span class=\"br0\">)</span> <span class=\"nu0\">0.000001</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; equal within tolerance</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>avg a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>distance pt1 pt2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>square <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord pt1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord pt2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>square <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord pt1<span class=\"br0\">)</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord pt2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>equal<span class=\"sy0\">-</span>points? pt1 pt2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>approx<span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord pt1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord pt2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>approx<span class=\"sy0\">=</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord pt1<span class=\"br0\">)</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord pt2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>delete<span class=\"sy0\">-</span>duplicate pts<span class=\"br0\">)</span> <span class=\"co1\">; assume no more than two points in list</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> pts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>equal<span class=\"sy0\">-</span>points? <span class=\"br0\">(</span><span class=\"kw1\">car</span> pts<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> pts<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pts<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; keep the first only</span><br/>      pts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"br0\">(</span>distance c1 c2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>equal<span class=\"sy0\">-</span>points? c1 c2<span class=\"br0\">)</span> <span class=\"co1\">; coincident points</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             'infinite   <span class=\"co1\">; r &gt; 0</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">list</span> c1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; else r = 0</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> r<span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> <br/>           '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; circle cannot reach both points, as too far apart</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span>approx<span class=\"sy0\">=</span> r <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"co1\">; r = 0, no circles, as points differ</span><br/>           '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"co1\">; find up to two circles meeting c1 and c2</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mid<span class=\"sy0\">-</span>pt <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>avg <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord c1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord c2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span>avg <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord c1<span class=\"br0\">)</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord c2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>offset <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>square r<span class=\"br0\">)</span> <br/>                                    <span class=\"br0\">(</span>square <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">0.5</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>delta<span class=\"sy0\">-</span>cx <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord c1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord c2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>delta<span class=\"sy0\">-</span>cy <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord c1<span class=\"br0\">)</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord c2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>delete<span class=\"sy0\">-</span>duplicate<br/>                <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord mid<span class=\"sy0\">-</span>pt<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> offset delta<span class=\"sy0\">-</span>cx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord mid<span class=\"sy0\">-</span>pt<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> offset delta<span class=\"sy0\">-</span>cy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>coord mid<span class=\"sy0\">-</span>pt<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> offset delta<span class=\"sy0\">-</span>cx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>coord mid<span class=\"sy0\">-</span>pt<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> offset delta<span class=\"sy0\">-</span>cy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; work through the input examples, outputting results</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c1 c2 r<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>circles c1 c2 r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"p1: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> c1<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" p2: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> c2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" r: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" =&gt; \"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> result 'infinite<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Infinite number of circles\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> result<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"No circles\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">display</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0000</span> <span class=\"nu0\">2.0000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0000</span> <span class=\"nu0\">0.0000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.8765</span> <span class=\"nu0\">0.2345</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.1234</span> <span class=\"nu0\">0.9876</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  '<span class=\"br0\">(</span><span class=\"nu0\">2.0</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">2.0</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 70, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const type: point is new struct<br/>    var float: x is 0.0;<br/>    var float: y is 0.0;<br/>  end struct;<br/>\u00a0<br/>const func point: point (in float: x, in float: y) is func<br/>  result<br/>    var point: aPoint is point.value;<br/>  begin<br/>    aPoint.x\u00a0:= x;<br/>    aPoint.y\u00a0:= y;<br/>  end func;<br/>\u00a0<br/>const func float: distance (in point: p1, in point: p2) is<br/>  return sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);<br/>\u00a0<br/>const proc: findCircles (in point: p1, in point: p2, in float: radius) is func<br/>  local<br/>    var float: separation is 0.0;<br/>    var float: mirrorDistance is 0.0;<br/>  begin<br/>    separation\u00a0:= distance(p1, p2);<br/>    if separation = 0.0 then<br/>      if radius = 0.0 then<br/>        write(\"Radius of zero. No circles can be drawn through (\");<br/>      else<br/>        write(\"Infinitely many circles can be drawn through (\");<br/>      end if;<br/>      writeln(p1.x digits 4 &lt;&amp; \", \" &lt;&amp; p1.y digits 4 &lt;&amp; \")\");<br/>    elsif separation = 2.0 * radius then<br/>      writeln(\"Given points are opposite ends of a diameter of the circle with center (\" &lt;&amp;<br/>              (p1.x + p2.x) / 2.0 digits 4 &lt;&amp; \", \" &lt;&amp; (p1.y + p2.y) / 2.0 digits 4 &lt;&amp; \") and radius \" &lt;&amp;<br/>              radius digits 4); <br/>    elsif separation &gt; 2.0 * radius then<br/>      writeln(\"Given points are farther away from each other than a diameter of a circle with radius \" &lt;&amp;<br/>              radius digits 4);<br/>    else<br/>      mirrorDistance\u00a0:= sqrt(radius ** 2 - (separation / 2.0) ** 2);<br/>      writeln(\"Two circles are possible.\");<br/>      writeln(\"Circle C1 with center (\" &lt;&amp;<br/>              (p1.x + p2.x) / 2.0 + mirrorDistance*(p1.y - p2.y) / separation digits 4 &lt;&amp; \", \" &lt;&amp;<br/>              (p1.y + p2.y) / 2.0 + mirrorDistance*(p2.x - p1.x) / separation digits 4 &lt;&amp; \"), radius \" &lt;&amp;<br/>              radius digits 4);<br/>      writeln(\"Circle C2 with center (\" &lt;&amp;<br/>              (p1.x + p2.x) / 2.0 - mirrorDistance*(p1.y - p2.y) / separation digits 4 &lt;&amp; \", \" &lt;&amp;<br/>              (p1.y + p2.y) / 2.0 - mirrorDistance*(p2.x - p1.x) / separation digits 4 &lt;&amp; \"), radius \" &lt;&amp;<br/>              radius digits 4);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array array float: cases is [] (<br/>        [] (0.1234, 0.9876, 0.8765, 0.2345, 2.0),<br/>        [] (0.0000, 2.0000, 0.0000, 0.0000, 1.0),<br/>        [] (0.1234, 0.9876, 0.1234, 0.9876, 2.0),<br/>        [] (0.1234, 0.9876, 0.8765, 0.2345, 0.5),<br/>        [] (0.1234, 0.9876, 0.1234, 0.9876, 0.0));<br/>    var integer: index is 0;<br/>  begin<br/>    for index range 1 to 5 do<br/>      writeln(\"Case \" &lt;&amp; index &lt;&amp; \":\");<br/>      findCircles(point(cases[index][1], cases[index][2]),<br/>                  point(cases[index][3], cases[index][4]), cases[index][5]);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 35, "block": "<pre class=\"ruby highlighted_source\">func circles<span class=\"br0\">(</span>a, b, r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a == b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"st0\">'Degenerate point'</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"st0\">'Infinitely many share a point'</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var h = <span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> h.<span class=\"me1\">norm</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"st0\">'Too far apart'</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var l = sqrt<span class=\"br0\">(</span>r<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> h.<span class=\"me1\">norm</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>1i, <span class=\"sy0\">-</span>1i<span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        a <span class=\"sy0\">+</span> h <span class=\"sy0\">+</span> <span class=\"br0\">(</span>l<span class=\"sy0\">*</span>i<span class=\"sy0\">*</span>h <span class=\"sy0\">/</span> h.<span class=\"me1\">abs</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> round<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var input = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i,  <span class=\"nu0\">0.8765</span> <span class=\"sy0\">+</span> 0.2345i, <span class=\"nu0\">2.0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">0.0000</span> <span class=\"sy0\">+</span> 2.0000i,  <span class=\"nu0\">0.0000</span> <span class=\"sy0\">+</span> 0.0000i, <span class=\"nu0\">1.0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i,  <span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i, <span class=\"nu0\">2.0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i,  <span class=\"nu0\">0.8765</span> <span class=\"sy0\">+</span> 0.2345i, <span class=\"nu0\">0.5</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i,  <span class=\"nu0\">0.1234</span> <span class=\"sy0\">+</span> 0.9876i, <span class=\"nu0\">0.0</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>input.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span>a.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span>, <span class=\"st0\">': '</span>, circles<span class=\"br0\">(</span>a...<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' and '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 19, "block": "<pre class=\"text highlighted_source\">real matrix centers(real colvector a, real colvector b, real scalar r) {<br/>\treal matrix rot<br/>\treal scalar d, u, v<br/>\td = norm(b-a)<br/>\tif (r == 0 | d == 0) {<br/>\t\tif (r == 0 &amp; d == 0) {<br/>\t\t\treturn((a,a))<br/>\t\t} else {<br/>\t\t\treturn(J(2, 2, .))<br/>\t\t}<br/>\t} else if (d &lt;= 2*r) {<br/>\t\tu = d/(2*r)<br/>\t\tv = sqrt(1-u^2)<br/>\t\trot = u,-v\\v,u<br/>\t\treturn((rot*(b-a),rot'*(b-a))*r/d:+a)<br/>\t} else {<br/>\t\treturn(J(2, 2, .))<br/>\t}<br/>}</pre>"}, {"lang": "Tcl", "loc": 32, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> findCircles <span class=\"br0\">{</span>p1 p2 r<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"re0\">$p1</span> x1 y1<br/>    lassign <span class=\"re0\">$p2</span> x2 y2<br/>    <span class=\"co1\"># Special case: coincident &amp; zero size</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> == <span class=\"re0\">$x2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y1</span> == <span class=\"re0\">$y2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$r</span> == <span class=\"nu0\">0.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x1</span> <span class=\"re0\">$y1</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"radius must be positive for sane results\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> == <span class=\"re0\">$x2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y1</span> == <span class=\"re0\">$y2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"no sane solution: points are coincident\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Calculate distance apart and separation vector</span><br/>    <span class=\"kw1\">set</span> dx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x2</span> - <span class=\"re0\">$x1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dy <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y2</span> - <span class=\"re0\">$y1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"re0\">$dx</span>, <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$r</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"no solution: points are further apart than required diameter\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Calculate midpoint</span><br/>    <span class=\"kw1\">set</span> x3 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x1</span>+<span class=\"re0\">$x2</span><span class=\"br0\">)</span>/<span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> y3 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y1</span>+<span class=\"re0\">$y2</span><span class=\"br0\">)</span>/<span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Fractional distance along the mirror line</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> - <span class=\"br0\">(</span><span class=\"re0\">$q</span>/<span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span> / <span class=\"re0\">$q</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># The two answers</span><br/>    <span class=\"kw1\">set</span> c1 <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x3</span> - <span class=\"re0\">$f</span><span class=\"sy0\">*</span><span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y3</span> + <span class=\"re0\">$f</span><span class=\"sy0\">*</span><span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> c2 <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x3</span> + <span class=\"re0\">$f</span><span class=\"sy0\">*</span><span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y3</span> - <span class=\"re0\">$f</span><span class=\"sy0\">*</span><span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$c1</span> <span class=\"re0\">$c2</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual FoxPro", "loc": 86, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL p1 As point, p2 As point, rr As Double<br/>CLOSE DATABASES ALL<br/>SET FIXED ON<br/>SET DECIMALS TO 4<br/>CLEAR<br/>CREATE CURSOR circles (xc1 B(4), yc1 B(4), xc2 B(4), yc2 B(4), rad B(4))<br/>INSERT INTO circles VALUES (0.1234, 0.9876, 0.8765, 0.2345, 2.0)<br/>INSERT INTO circles VALUES (0.0000, 2.0000, 0.0000, 0.0000, 1.0)<br/>INSERT INTO circles VALUES (0.1234, 0.9876, 0.1234, 0.9876, 2.0)<br/>INSERT INTO circles VALUES (0.1234, 0.9876, 0.8765, 0.2345, 0.5)<br/>INSERT INTO circles VALUES (0.1234, 0.9876, 0.1234, 0.9876, 0.0)<br/>GO TOP<br/>\u00a0<br/>p1 = NEWOBJECT(\"point\")<br/>p2 = NEWOBJECT(\"point\")<br/>SCAN<br/>    p1.SetPoints(xc1, yc1)<br/>    p2.SetPoints(xc2, yc2)<br/>    rr = rad<br/>    GetCircles(p1, p2, rr)<br/>   \u00a0?<br/>ENDSCAN \t<br/>\u00a0<br/>SET DECIMALS TO <br/>SET FIXED OFF<br/>\u00a0<br/>PROCEDURE GetCircles(op1 As point, op2 As point, r As Double)<br/>LOCAL ctr As point, half As point, lenhalf As Double, dist As Double, rot As point, c As String<br/>ctr = NEWOBJECT(\"point\")<br/>half = NEWOBJECT(\"point\")<br/>ctr.SetPoints((op1.xc + op2.xc)/2, (op1.yc + op2.yc)/2)<br/>half.SetPoints(op1.xc - ctr.xc, op1.yc - ctr.yc)<br/>lenhalf = half.nLength<br/>PrintPoints(op1, op2, r)<br/>IF r &lt; lenhalf<br/>   \u00a0? \"Cannot solve for these parameters.\"<br/>    RETURN<br/>ENDIF<br/>IF lenhalf = 0<br/>   \u00a0? \"Points are coincident.\"<br/>    RETURN<br/>ENDIF<br/>dist = SQRT(r^2 - lenhalf^2)/lenhalf<br/>rot = NEWOBJECT(\"point\")<br/>rot.SetPoints(-dist*(op1.yc - ctr.yc) + ctr.xc, dist*(op1.xc - ctr.xc) + ctr.yc)<br/>TEXT TO c TEXTMERGE NOSHOW PRETEXT 3<br/>    Circle 1 (&lt;&lt;rot.xc&gt;&gt;, &lt;&lt;rot.yc&gt;&gt;)<br/>ENDTEXT<br/>? c<br/>rot.SetPoints(-(rot.xc - ctr.xc) + ctr.xc, -((rot.yc - ctr.yc)) + ctr.yc)<br/>TEXT TO c TEXTMERGE NOSHOW PRETEXT 3<br/>    Circle 2 (&lt;&lt;rot.xc&gt;&gt;, &lt;&lt;rot.yc&gt;&gt;)<br/>ENDTEXT<br/>? c<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE PrintPoints(op1 As point, op2 As point, r As Double)<br/>LOCAL lcTxt As String<br/>TEXT TO lcTxt TEXTMERGE NOSHOW PRETEXT 3<br/>    Points (&lt;&lt;op1.xc&gt;&gt;,&lt;&lt;op1.yc&gt;&gt;), (&lt;&lt;op2.xc&gt;&gt;,&lt;&lt;op2.yc&gt;&gt;) Radius &lt;&lt;r&gt;&gt;.<br/>ENDTEXT<br/>? lcTxt<br/>ENDPROC\t<br/>\u00a0<br/>DEFINE CLASS point As Custom<br/>xc = 0<br/>yc = 0<br/>nLength = 0<br/>\u00a0<br/>PROCEDURE Init<br/>DODEFAULT()<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE SetPoints(tnx As Double, tny As Double)<br/>THIS.xc = tnx<br/>THIS.yc = tny<br/>THIS.nLength = THIS.GetLength()<br/>ENDPROC<br/>\u00a0<br/>FUNCTION GetLength()<br/>RETURN SQRT(THIS.xc*THIS.xc + THIS.yc*THIS.yc)<br/>ENDFUNC<br/>\u00a0<br/>ENDDEFINE<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 25, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc Circles; real Data; \\Show centers of circles, given points P &amp; Q and radius<br/>real Px, Py, Qx, Qy, R, X, Y, X1, Y1, Bx, By, PB, CB;<br/>[Px:= Data(0); Py:= Data(1); Qx:= Data(2); Qy:= Data(3); R:= Data(4);<br/>if R = 0.0 then [Text(0, \"Radius = zero gives no circles^M^J\"); return];<br/>X:= (Qx-Px)/2.0;  Y:= (Qy-Py)/2.0;<br/>Bx:= Px+X;  By:= Py+Y;<br/>PB:= sqrt(X*X + Y*Y);<br/>if PB = 0.0 then [Text(0, \"Coincident points give infinite circles^M^J\"); return];<br/>if PB &gt; R   then [Text(0, \"Points are too far apart for radius^M^J\"); return];<br/>CB:= sqrt(R*R - PB*PB);<br/>X1:= Y*CB/PB; Y1:= X*CB/PB;<br/>RlOut(0, Bx-X1); ChOut(0, ^,); RlOut(0, By+Y1); ChOut(0, 9\\tab\\);<br/>RlOut(0, Bx+X1); ChOut(0, ^,); RlOut(0, By-Y1); CrLf(0);<br/>];<br/>\u00a0<br/>real Tbl; int I;<br/>[Tbl:=[[0.1234, 0.9876,    0.8765, 0.2345,    2.0],<br/>       [0.0000, 2.0000,    0.0000, 0.0000,    1.0],<br/>       [0.1234, 0.9876,    0.1234, 0.9876,    2.0],<br/>       [0.1234, 0.9876,    0.8765, 0.2345,    0.5],<br/>       [0.1234, 0.9876,    0.1234, 0.9876,    0.0]];<br/>for I:= 0 to 4 do Circles(Tbl(I));<br/>]</pre>"}, {"lang": "zkl", "loc": 35, "block": "<pre class=\"text highlighted_source\">fcn findCircles(a,b, c,d, r){ //--&gt;T(T(x,y,r) [,T(x,y,r)]))<br/>   delta:=(a-c).hypot(b-d);<br/>   switch(delta){\t// could just catch MathError<br/>      case(0.0){\"singularity\"}  // should use epsilon test<br/>      case(r*2){T(T((a+c)/2,(b+d)/2,r))}<br/>      else{<br/>\t if(delta &gt; 2*r) \"Point delta &gt; diameter\";<br/>\t else{<br/>\t    md:=(r.pow(2) - (delta/2).pow(2)).sqrt();<br/>\t    T(T((a+c)/2 + md*(b-d)/delta,(b+d)/2 + md*(c-b)/delta,r),<br/>\t      T((a+c)/2 - md*(b-d)/delta,(b+d)/2 - md*(c-b)/delta,r));<br/>\t  }<br/>       }<br/>    }<br/>}<br/>\u00a0<br/>data:=T(<br/>   T(0.1234, 0.9876,    0.8765, 0.2345,    2.0),<br/>   T(0.0000, 2.0000,    0.0000, 0.0000,    1.0),<br/>   T(0.1234, 0.9876,    0.1234, 0.9876,    2.0),<br/>   T(0.1234, 0.9876,    0.8765, 0.2345,    0.5),<br/>   T(0.1234, 0.9876,    0.1234, 0.9876,    0.0),<br/>);<br/>\u00a0<br/>ppFmt:=\"(%2.4f,%2.4f)\";<br/>pprFmt:=ppFmt+\" r=%2.1f\";<br/>foreach a,b, c,d, r in (data){<br/>   println(\"Points: \",ppFmt.fmt(a,b),\", \",pprFmt.fmt(c,d,r));<br/>   print(\"   Circles: \");<br/>   cs:=findCircles(a,b,c,d,r);<br/>   if(List.isType(cs))<br/>       print(cs.pump(List,'wrap(c){pprFmt.fmt(c.xplode())}).concat(\", \"));<br/>   else print(cs);<br/>   println();<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 27, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">20</span> READ x1,y1,x2,y2,r<br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> i;<span class=\"st0\">\") \"</span>;x1;<span class=\"st0\">\" \"</span>;y1;<span class=\"st0\">\" \"</span>;x2;<span class=\"st0\">\" \"</span>;y2;<span class=\"st0\">\" \"</span>;r<br/><span class=\"nu0\">40</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">60</span> STOP <br/><span class=\"nu0\">70</span> DATA <span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">0.8765</span>,<span class=\"nu0\">0.2345</span>,<span class=\"nu0\">2.0</span><br/><span class=\"nu0\">80</span> DATA <span class=\"nu0\">0.0000</span>,<span class=\"nu0\">2.0000</span>,<span class=\"nu0\">0.0000</span>,<span class=\"nu0\">0.0000</span>,<span class=\"nu0\">1.0</span><br/><span class=\"nu0\">90</span> DATA <span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">2.0</span><br/><span class=\"nu0\">100</span> DATA <span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">0.8765</span>,<span class=\"nu0\">0.2345</span>,<span class=\"nu0\">0.5</span><br/><span class=\"nu0\">110</span> DATA <span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">0.1234</span>,<span class=\"nu0\">0.9876</span>,<span class=\"nu0\">0.0</span><br/><span class=\"nu0\">1000</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> <span class=\"br0\">(</span>x1=x2 <span class=\"kw4\">AND</span> y1=y2<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1090</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">IF</span> r=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"It will be a single point (\"</span>;x1;<span class=\"st0\">\",\"</span>;y1;<span class=\"st0\">\") of radius 0\"</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1020</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"There are any number of circles via single point (\"</span>;x1;<span class=\"st0\">\",\"</span>;y1;<span class=\"st0\">\") of radius \"</span>;r: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1090</span> <span class=\"kw1\">LET</span> p1=<span class=\"br0\">(</span>x1-x2<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> p2=<span class=\"br0\">(</span>y1-y2<span class=\"br0\">)</span><br/><span class=\"nu0\">1100</span> <span class=\"kw1\">LET</span> r2=<span class=\"kw3\">SQR</span> <span class=\"br0\">(</span>p1*p1+p2*p2<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/><span class=\"nu0\">1110</span> <span class=\"kw1\">IF</span> r&lt;r2 <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Points are too far apart (\"</span>;<span class=\"nu0\">2</span>*r2;<span class=\"st0\">\") - there are no circles of radius \"</span>;r: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1120</span> <span class=\"kw1\">LET</span> cx=<span class=\"br0\">(</span>x1+x2<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/><span class=\"nu0\">1130</span> <span class=\"kw1\">LET</span> cy=<span class=\"br0\">(</span>y1+y2<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/><span class=\"nu0\">1140</span> <span class=\"kw1\">LET</span> dd2=<span class=\"kw3\">SQR</span> <span class=\"br0\">(</span>r^<span class=\"nu0\">2</span>-r2^<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1150</span> <span class=\"kw1\">LET</span> dx1=x2-cx<br/><span class=\"nu0\">1160</span> <span class=\"kw1\">LET</span> dy1=y2-cy<br/><span class=\"nu0\">1170</span> <span class=\"kw1\">LET</span> dx=<span class=\"nu0\">0</span>-dy1/r2*dd2<br/><span class=\"nu0\">1180</span> <span class=\"kw1\">LET</span> dy=dx1/r2*dd2<br/><span class=\"nu0\">1190</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"(\"</span>;cx+dy;<span class=\"st0\">\",\"</span>;cy+dx;<span class=\"st0\">\")\"</span><br/><span class=\"nu0\">1200</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"(\"</span>;cx-dy;<span class=\"st0\">\",\"</span>;cy-dx;<span class=\"st0\">\")\"</span><br/><span class=\"nu0\">1210</span> <span class=\"kw1\">RETURN</span></pre>"}]}