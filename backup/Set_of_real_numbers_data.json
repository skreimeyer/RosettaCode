{"task": "Set_of_real_numbers", "blocks": [{"lang": "C#", "loc": 33, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">SetOfRealNumbers</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">Set</span><span class=\"br0\">(</span>Predicate<span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> contains<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Contains <span class=\"sy0\">=</span> contains<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Predicate<span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> Contains<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> Union<span class=\"br0\">(</span><span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">=&gt;</span> Contains<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">set</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> Intersection<span class=\"br0\">(</span><span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">=&gt;</span> Contains<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">set</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> Difference<span class=\"br0\">(</span><span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw1\">Set</span><span class=\"sy0\">&lt;</span>TValue<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">=&gt;</span> Contains<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"kw1\">set</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 34, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>real<span class=\"sy0\">-</span><span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">&gt;=|&lt;=</span> <span class=\"br0\">[</span>lo hi<span class=\"br0\">]</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> lo <span class=\"sy0\">%</span> hi<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">&gt;|&lt;</span> <span class=\"br0\">[</span>lo hi<span class=\"br0\">]</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> lo <span class=\"sy0\">%</span> hi<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">&gt;=|&lt;</span> <span class=\"br0\">[</span>lo hi<span class=\"br0\">]</span> #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> lo <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">%</span> hi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">&gt;|&lt;=</span> <span class=\"br0\">[</span>lo hi<span class=\"br0\">]</span> #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> lo <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"sy0\">%</span> hi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> \u22c3 some<span class=\"sy0\">-</span><span class=\"kw1\">fn</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> \u22c2 every<span class=\"sy0\">-</span>pred<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> \u2216<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>s1<span class=\"br0\">]</span> s1<span class=\"br0\">)</span>  <br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>s1 s2<span class=\"br0\">]</span><br/>     #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>s2 <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>s1 s2 s3<span class=\"br0\">]</span><br/>     #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>s2 <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>s3 <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>s1 s2 s3 <span class=\"sy0\">&amp;</span> ss<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>list<span class=\"sy0\">*</span> s1 s2 s3 ss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>pprint<span class=\"sy0\">/</span>pprint<br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">[</span><span class=\"br0\">(</span>\u22c3 <span class=\"br0\">(</span><span class=\"sy0\">&gt;|&lt;=</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=|&lt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>\u22c2 <span class=\"br0\">(</span><span class=\"sy0\">&gt;=|&lt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;|&lt;=</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>\u2216 <span class=\"br0\">(</span><span class=\"sy0\">&gt;=|&lt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;|&lt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>\u2216 <span class=\"br0\">(</span><span class=\"sy0\">&gt;=|&lt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=|&lt;=</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> \u2205 <span class=\"br0\">(</span>constantly false<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> R <span class=\"br0\">(</span>constantly true<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> Z integer?<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> Q ratio?<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> I #<span class=\"br0\">(</span>\u2216 R Z Q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> N #<span class=\"br0\">(</span>\u2216 Z <span class=\"kw1\">neg?</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>deftype <span class=\"kw1\">set</span><span class=\"sy0\">==</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> `<span class=\"br0\">(</span>real <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype set<span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> `<span class=\"br0\">(</span>real <span class=\"br0\">(</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype <span class=\"kw1\">set</span><span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> `<span class=\"br0\">(</span>real <span class=\"sy0\">,</span>a <span class=\"br0\">(</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype set<span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> `<span class=\"br0\">(</span>real <span class=\"br0\">(</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span> <span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftype set-union <span class=\"br0\">(</span>s1 s2<span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"sy0\">,</span>s1 <span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype set-intersection <span class=\"br0\">(</span>s1 s2<span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"sy0\">,</span>s1 <span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype set-diff <span class=\"br0\">(</span>s1 s2<span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"sy0\">,</span>s1 <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> in-set-p <span class=\"br0\">(</span>x <span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>typep x <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> test <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">set</span> '<span class=\"br0\">(</span>set-union <span class=\"br0\">(</span>set<span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">0</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">1</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">2</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">set</span> '<span class=\"br0\">(</span>set-intersection <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>set<span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">0</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">1</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">2</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">set</span> '<span class=\"br0\">(</span>set-diff <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>set<span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">0</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">1</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">2</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">set</span> '<span class=\"br0\">(</span>set-diff <span class=\"br0\">(</span>set<span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">0</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">1</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>in-set-p <span class=\"nu0\">2</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 61, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">struct</span> Set<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw4\">bool</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">)</span> contains<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> opIn_r<span class=\"br0\">(</span><span class=\"kw2\">in</span> T x<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Set opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Set set<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Set<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> set.<span class=\"me1\">contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> Set<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>set.<span class=\"me1\">contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Set intersection<span class=\"br0\">(</span><span class=\"kw2\">in</span> Set set<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Set<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> set.<span class=\"me1\">contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span> <span class=\"co1\">// Test union.</span><br/>    <span class=\"kw2\">alias</span> DSet <span class=\"sy0\">=</span> Set<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> s <span class=\"sy0\">=</span> DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>              DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span> <span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span> <span class=\"co1\">// Test difference.</span><br/>    <span class=\"kw2\">alias</span> DSet <span class=\"sy0\">=</span> Set<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> s1 <span class=\"sy0\">=</span> DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">3.0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><br/>               DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span> <span class=\"kw2\">in</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.5</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"kw2\">in</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span> <span class=\"kw2\">in</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> s2 <span class=\"sy0\">=</span> DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">3.0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><br/>               DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span> <span class=\"kw2\">in</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> s3 <span class=\"sy0\">=</span> DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">infinity</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><br/>               DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span> <span class=\"kw2\">in</span> s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">1.5</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">3.0</span> <span class=\"kw2\">in</span> s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span> <span class=\"co1\">// Test intersection.</span><br/>    <span class=\"kw2\">alias</span> DSet <span class=\"sy0\">=</span> Set<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> s <span class=\"sy0\">=</span> DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span>.<span class=\"me1\">intersection</span><span class=\"br0\">(</span><br/>              DSet<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'match<span class=\"br0\">)</span> <span class=\"co1\">;; reader-infix macros</span><br/>\u00a0<br/><span class=\"br0\">(</span>reader<span class=\"sy0\">-</span>infix '\u2208 <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>reader<span class=\"sy0\">-</span>infix '\u2229 <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>reader<span class=\"sy0\">-</span>infix '\u222a <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>reader<span class=\"sy0\">-</span>infix '\u2296 <span class=\"br0\">)</span> <span class=\"co1\">;; set difference</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>\u2208 x a<span class=\"br0\">)</span> <span class=\"br0\">(</span>a x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>\u2229 a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span> a x<span class=\"br0\">)</span> <span class=\"br0\">(</span>b x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>\u222a a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span> a x<span class=\"br0\">)</span> <span class=\"br0\">(</span>b x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>\u2296 a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span> a x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>b x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; predicates to define common sets</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u2205 x<span class=\"br0\">)</span> #f<span class=\"br0\">)</span> <span class=\"co1\">;; the empty set predicate</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>Z x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">integer?</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>N x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>Z x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>Q x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rational</span>? x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u211c x<span class=\"br0\">)</span> #t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; predicates to define convex sets</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u27e6...\u27e7 a b<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> x a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> x b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u27e6...\u27e6 a b<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> x a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u27e7...\u27e7 a b<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> x a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> x b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>\u27e7...\u27e6 a b<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> x a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 37, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>extension setOp<br/>{<br/>    union\u00a0: func<br/>        = (:val)( self eval:val || func eval:val ).<br/>\u00a0<br/>    intersection\u00a0: func<br/>        = (:val)( self eval:val &amp;&amp; func eval:val ).<br/>\u00a0<br/>    difference\u00a0: func<br/>        = (:val)( self eval:val &amp;&amp; func eval:val; not ).<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    // union<br/>    var set\u00a0:= (:x)( (x &gt;= 0.0r) &amp;&amp; (x &lt;= 1.0r) ) union(:x)( (x &gt;= 0.0r) &amp;&amp; (x &lt; 2.0r) ).<br/>\u00a0<br/>    set(0.0r) assertTrue.<br/>    set(1.0r) assertTrue.<br/>    set(2.0r) assertFalse.<br/>\u00a0<br/>    // intersection<br/>    var set2\u00a0:= (:x)( (x &gt;= 0.0r) &amp;&amp; (x &lt; 2.0r) ) intersection(:x)( (x &gt;= 1.0r) &amp;&amp; (x &lt;= 2.0r) ).<br/>\u00a0<br/>    set2(0.0r) assertFalse.<br/>    set2(1.0r) assertTrue.<br/>    set2(2.0r) assertFalse.<br/>\u00a0<br/>    // difference<br/>    var set3\u00a0:= (:x)( (x &gt;= 0.0r) &amp;&amp; (x &lt; 3.0r) ) difference(:x) ( (x &gt;= 0.0r) &amp;&amp; (x &lt;= 1.0r) ).<br/>\u00a0<br/>    set3 (0.0r) assertFalse.<br/>    set3 (1.0r) assertFalse.<br/>    set3 (2.0r) assertTrue.<br/>].</pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Set <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Union<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b Set<span class=\"sy1\">)</span> Set      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy3\">||</span> b<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> Inter<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b Set<span class=\"sy1\">)</span> Set      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> &amp;&amp; b<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> Diff<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b Set<span class=\"sy1\">)</span> Set       <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> &amp;&amp; <span class=\"sy3\">!</span>b<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> open<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Set   <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a &lt; x &amp;&amp; x &lt; b <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"kw3\">closed</span><span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Set <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a &lt;<span class=\"sy2\">=</span> x &amp;&amp; x &lt;<span class=\"sy2\">=</span> b <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> opCl<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Set   <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a &lt; x &amp;&amp; x &lt;<span class=\"sy2\">=</span> b <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> clOp<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Set   <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a &lt;<span class=\"sy2\">=</span> x &amp;&amp; x &lt; b <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\ts <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>Set<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>\ts<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> Union<span class=\"sy1\">(</span>opCl<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">),</span> clOp<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">))</span>  <span class=\"co1\">// (0,1] \u222a [0,2)</span><br/>\ts<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> Inter<span class=\"sy1\">(</span>clOp<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">),</span> opCl<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">))</span>  <span class=\"co1\">// [0,2) \u2229 (1,2]</span><br/>\ts<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> Diff<span class=\"sy1\">(</span>clOp<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">),</span> open<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span>   <span class=\"co1\">// [0,3) \u2212 (0,1)</span><br/>\ts<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> Diff<span class=\"sy1\">(</span>clOp<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">),</span> <span class=\"kw3\">closed</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span> <span class=\"co1\">// [0,3) \u2212 [0,1]</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> x &lt; <span class=\"nu0\">3</span><span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2208 s%d:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> s<span class=\"sy1\">[</span>i<span class=\"sy1\">](</span>x<span class=\"sy1\">))</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 100, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    s1 <span class=\"sy0\">:=</span> RealSet<span class=\"br0\">(</span><span class=\"st0\">\"(0,1]\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">union</span><span class=\"br0\">(</span>RealSet<span class=\"br0\">(</span><span class=\"st0\">\"[0,2)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s2 <span class=\"sy0\">:=</span> RealSet<span class=\"br0\">(</span><span class=\"st0\">\"[0,2)\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">intersect</span><span class=\"br0\">(</span>RealSet<span class=\"br0\">(</span><span class=\"st0\">\"(1,2)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s3 <span class=\"sy0\">:=</span> RealSet<span class=\"br0\">(</span><span class=\"st0\">\"[0,3)\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">difference</span><span class=\"br0\">(</span>RealSet<span class=\"br0\">(</span><span class=\"st0\">\"(0,1)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s4 <span class=\"sy0\">:=</span> RealSet<span class=\"br0\">(</span><span class=\"st0\">\"[0,3)\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">difference</span><span class=\"br0\">(</span>RealSet<span class=\"br0\">(</span><span class=\"st0\">\"[0,1]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> s <span class=\"sy0\">:=</span> s1<span class=\"sy0\">|</span>s2<span class=\"sy0\">|</span>s3<span class=\"sy0\">|</span>s4 <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw4\">write</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span> s<span class=\"sy0\">.</span><span class=\"me1\">contains</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" contains \"</span><br/>                                                <span class=\"kw1\">else</span> <span class=\"st0\">\" doesn't contain \"</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Range<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>lbnd<span class=\"sy0\">,</span>rbnd<span class=\"sy0\">,</span>ltest<span class=\"sy0\">,</span>rtest<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ltest<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span>rtest<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>self<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> lbnd<span class=\"sy0\">||</span>a<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>b<span class=\"sy0\">||</span>rbnd<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> notEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ltest<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span>rtest<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span>self<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> makeLTest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">proc</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> lbnd <span class=\"sy0\">==</span> <span class=\"st0\">\"(\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"&lt;=\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> makeRTest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">proc</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> rbnd <span class=\"sy0\">==</span> <span class=\"st0\">\"(\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"&lt;=\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> intersect<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">a</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>na <span class=\"sy0\">:=</span> r<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"sy0\">,</span> nlb <span class=\"sy0\">:=</span> r<span class=\"sy0\">.</span><span class=\"me1\">lbnd</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">a</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>na <span class=\"sy0\">:=</span> a<span class=\"sy0\">,</span> nlb <span class=\"sy0\">:=</span> lbnd<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">(</span>na <span class=\"sy0\">:=</span> a<span class=\"sy0\">,</span> nlb <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>lbnd<span class=\"sy0\">|</span>r<span class=\"sy0\">.</span><span class=\"me1\">lbnd</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"(\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> b <span class=\"sy0\">&lt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span> nb <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> nrb <span class=\"sy0\">:=</span> rbnd<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> b <span class=\"sy0\">&gt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>nb <span class=\"sy0\">:=</span> r<span class=\"sy0\">.</span><span class=\"me1\">b</span><span class=\"sy0\">,</span> nrb <span class=\"sy0\">:=</span> r<span class=\"sy0\">.</span><span class=\"me1\">rbnd</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">(</span>nb <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> nrb <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"st0\">\")\"</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>rbnd<span class=\"sy0\">|</span>r<span class=\"sy0\">.</span><span class=\"me1\">rbnd</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\")\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/>        range <span class=\"sy0\">:=</span> Range<span class=\"br0\">(</span>nlb<span class=\"sy0\">||</span>na<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>nb<span class=\"sy0\">||</span>nrb<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> range<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> difference<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>r <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> RealSet<span class=\"br0\">(</span>toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        r1 <span class=\"sy0\">:=</span> lbnd<span class=\"sy0\">||</span>a<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>min<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>r<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">lbnd</span><span class=\"sy0\">,</span><span class=\"st0\">\"([\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"])\"</span><span class=\"br0\">)</span><br/>        r2 <span class=\"sy0\">:=</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">rbnd</span><span class=\"sy0\">,</span><span class=\"st0\">\")]\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"[(\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>max<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>r<span class=\"sy0\">.</span><span class=\"me1\">b</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>b<span class=\"sy0\">||</span>rbnd<br/>        <span class=\"kw1\">return</span> RealSet<span class=\"br0\">(</span>r1<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">union</span><span class=\"br0\">(</span>RealSet<span class=\"br0\">(</span>r2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> lbnds<span class=\"sy0\">,</span> rbnds<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">(</span>lbnds <span class=\"sy0\">:=</span> <span class=\"st0\">'(['</span><span class=\"sy0\">,</span> rbnds <span class=\"sy0\">:=</span> <span class=\"st0\">'])'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>s <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">?</span> <span class=\"br0\">{</span><br/>            lbnd <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span>lbnds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            a <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            b <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span>rbnds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            rbnd <span class=\"sy0\">:=</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        ltest <span class=\"sy0\">:=</span> <span class=\"kw4\">proc</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> lbnd <span class=\"sy0\">==</span> <span class=\"st0\">\"(\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"&lt;=\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        rtest <span class=\"sy0\">:=</span> <span class=\"kw4\">proc</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> rbnd <span class=\"sy0\">==</span> <span class=\"st0\">\")\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"&lt;=\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RealSet<span class=\"br0\">(</span>ranges<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> contains<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>ranges<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> notEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>ranges<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">notEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sep <span class=\"sy0\">:=</span> s <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ranges<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> s <span class=\"sy0\">||:=</span> <span class=\"sy0\">.</span><span class=\"me1\">sep</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> sep <span class=\"sy0\">:=</span> <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> s<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        newR <span class=\"sy0\">:=</span> RealSet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">copy</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>ranges<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> newR<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> union<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>        newR <span class=\"sy0\">:=</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>B<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">notEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> newR<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> intersect<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>        newR <span class=\"sy0\">:=</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">every</span> <span class=\"br0\">(</span>r1 <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>ranges<span class=\"sy0\">,</span> r2 <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>B<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            range <span class=\"sy0\">:=</span> r1<span class=\"sy0\">.</span><span class=\"me1\">intersect</span><span class=\"br0\">(</span>r2<span class=\"br0\">)</span><br/>            <span class=\"kw4\">put</span><span class=\"br0\">(</span>newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"sy0\">,</span> range<span class=\"sy0\">.</span><span class=\"me1\">notEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> newR<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> difference<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>        newR <span class=\"sy0\">:=</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">every</span> <span class=\"br0\">(</span>r1 <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>ranges<span class=\"sy0\">,</span> r2 <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>B<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            rs <span class=\"sy0\">:=</span> r1<span class=\"sy0\">.</span><span class=\"me1\">difference</span><span class=\"br0\">(</span>r2<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> rs<span class=\"sy0\">.</span><span class=\"me1\">notEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>newR<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"sy0\">,</span> <span class=\"sy0\">!</span>rs<span class=\"sy0\">.</span><span class=\"me1\">ranges</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> newR<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw4\">put</span><span class=\"br0\">(</span>ranges <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>Range<span class=\"br0\">(</span><span class=\"sy0\">\\</span>s<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">notEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 17, "block": "<pre class=\"j highlighted_source\">has=: <span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'(interval m)`:6'</span><br/>ing=: `<span class=\"st_h\">''</span><br/>\u00a0<br/>interval=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  if.<span class=\"nu0\">0</span>&lt;L.<span class=\"kw2\">y</span> do.<span class=\"kw2\">y</span> return.<span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"nu0\">5</span>=#words=.\u00a0;:<span class=\"kw2\">y</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span><span class=\"nu0\">0</span> { words<span class=\"sy0\">)</span> e.\u00a0;:<span class=\"st_h\">'[('</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span><span class=\"nu0\">2</span> { words<span class=\"sy0\">)</span> e.\u00a0;:<span class=\"st_h\">','</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span><span class=\"nu0\">4</span> { words<span class=\"sy0\">)</span> e.\u00a0;:<span class=\"st_h\">'])'</span><br/>  <span class=\"st_h\">'lo hi'</span>=.<span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span>{<span class=\"nu0\">0</span>\".L:<span class=\"nu0\">0</span> words<span class=\"sy0\">)</span><br/>  <span class=\"st_h\">'cL cH'</span>=.<span class=\"nu0\">0</span> <span class=\"nu0\">4</span>{words e.;:<span class=\"st_h\">'[]'</span><br/>  <span class=\"sy0\">(</span>lo&amp;<span class=\"sy0\">(</span>&lt;`&lt;:@.cL<span class=\"sy0\">)</span> *. hi&amp;<span class=\"sy0\">(</span>&gt;`&gt;:@.cH<span class=\"sy0\">))</span>ing<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>union=: <span class=\"nu0\">4</span>\u00a0:<span class=\"st_h\">'(x has +. y has)ing'</span><br/>intersect=: <span class=\"nu0\">4</span>\u00a0:<span class=\"st_h\">'(x has *. y has)ing'</span><br/>without=: <span class=\"nu0\">4</span>\u00a0:<span class=\"st_h\">'(x has *. [: -. y has)ing'</span></pre>"}, {"lang": "Java", "loc": 113, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Objects</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.Predicate</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RealNumberSet <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">enum</span> RangeType <span class=\"br0\">{</span><br/>        CLOSED,<br/>        BOTH_OPEN,<br/>        LEFT_OPEN,<br/>        RIGHT_OPEN,<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> RealSet <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> low<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> high<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> Predicate<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span> predicate<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">double</span> interval <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RealSet<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> low, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> high, Predicate<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span> predicate<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">low</span> <span class=\"sy0\">=</span> low<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">high</span> <span class=\"sy0\">=</span> high<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">predicate</span> <span class=\"sy0\">=</span> predicate<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RealSet<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> start, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> end, RangeType rangeType<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span><span class=\"br0\">(</span>start, end, d <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>rangeType<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> CLOSED<span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">return</span> start <span class=\"sy0\">&lt;=</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> BOTH_OPEN<span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">return</span> start <span class=\"sy0\">&lt;</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> LEFT_OPEN<span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">return</span> start <span class=\"sy0\">&lt;</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> RIGHT_OPEN<span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">return</span> start <span class=\"sy0\">&lt;=</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalstateexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalStateException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Unhandled range type encountered.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> contains<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> predicate.<span class=\"me1\">test</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RealSet union<span class=\"br0\">(</span>RealSet other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> low2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>low, other.<span class=\"me1\">low</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> high2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>high, other.<span class=\"me1\">high</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span>low2, high2, d <span class=\"sy0\">-&gt;</span> predicate.<span class=\"me1\">or</span><span class=\"br0\">(</span>other.<span class=\"me1\">predicate</span><span class=\"br0\">)</span>.<span class=\"me1\">test</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RealSet intersect<span class=\"br0\">(</span>RealSet other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> low2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>low, other.<span class=\"me1\">low</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> high2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>high, other.<span class=\"me1\">high</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span>low2, high2, d <span class=\"sy0\">-&gt;</span> predicate.<span class=\"me1\">and</span><span class=\"br0\">(</span>other.<span class=\"me1\">predicate</span><span class=\"br0\">)</span>.<span class=\"me1\">test</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RealSet subtract<span class=\"br0\">(</span>RealSet other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span>low, high, d <span class=\"sy0\">-&gt;</span> predicate.<span class=\"me1\">and</span><span class=\"br0\">(</span>other.<span class=\"me1\">predicate</span>.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">test</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> length<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>low.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> high.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"sy0\">;</span> <span class=\"co1\">// error value</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>high <span class=\"sy0\">&lt;=</span> low<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> p <span class=\"sy0\">=</span> low<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>predicate.<span class=\"me1\">test</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> count<span class=\"sy0\">++;</span><br/>                p <span class=\"sy0\">+=</span> interval<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> high<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> count <span class=\"sy0\">*</span> interval<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Objects.<span class=\"me1\">equals</span><span class=\"br0\">(</span>high, low<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> predicate.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">test</span><span class=\"br0\">(</span>low<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> length<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        RealSet a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">LEFT_OPEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">2.0</span>, RangeType.<span class=\"me1\">RIGHT_OPEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, RangeType.<span class=\"me1\">LEFT_OPEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">3.0</span>, RangeType.<span class=\"me1\">RIGHT_OPEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet e <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">BOTH_OPEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">CLOSED</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, RangeType.<span class=\"me1\">CLOSED</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> dd <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> i<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"(0, 1] \u222a [0, 2) contains\u00a0%d is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, a.<span class=\"me1\">union</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>dd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[0, 2) \u2229 (1, 2] contains\u00a0%d is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, b.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>dd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[0, 3) \u2212 (0, 1) contains\u00a0%d is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, d.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>dd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[0, 3) \u2212 [0, 1] contains\u00a0%d is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, d.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>dd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[0, 0] is empty is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, g.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        RealSet aa <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><br/>            <span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span>,<br/>            x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet bb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RealSet<span class=\"br0\">(</span><br/>            <span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span>,<br/>            x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RealSet cc <span class=\"sy0\">=</span> aa.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>bb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Approx length of A - B is\u00a0%f<span class=\"es0\">\\n</span>\"</span>, cc.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"\"\"<br/>    struct ConvexRealSet<br/>Convex real set (similar to a line segment).<br/>Parameters: lower bound, upper bound: floating point numbers<br/>            includelower, includeupper: boolean true or false to indicate whether<br/>            the set has a closed boundary (set to true) or open (set to false).<br/>\"\"\"<br/>mutable struct ConvexRealSet<br/>    lower::Float64<br/>    includelower::Bool<br/>    upper::Float64<br/>    includeupper::Bool<br/>    function ConvexRealSet(lo, up, incllo, inclup)<br/>       this = new()<br/>       this.upper = Float64(up)<br/>       this.lower = Float64(lo)<br/>       this.includelower = incllo<br/>       this.includeupper = inclup<br/>       this<br/>    end<br/>end<br/>\u00a0<br/>\u00a0<br/>function \u2208(s, xelem)<br/>    x = Float64(xelem)<br/>    if(x == s.lower)<br/>        if(s.includelower)<br/>            return true<br/>        else<br/>            return false<br/>        end<br/>    elseif(x == s.upper)<br/>        if(s.includeupper)<br/>            return true<br/>        else<br/>            return false<br/>        end<br/>    end<br/>    s.lower &lt; x &amp;&amp; x &lt; s.upper<br/>end<br/>\u00a0<br/>\u00a0<br/>\u22c3(aset, bset, x) = (\u2208(aset, x) || \u2208(bset, x))<br/>\u00a0<br/>\u22c2(aset, bset, x) = (\u2208(aset, x) &amp;&amp; \u2208(bset, x))<br/>\u00a0<br/>-(aset, bset, x) = (\u2208(aset, x) &amp;&amp;\u00a0!\u2208(bset, x))<br/>\u00a0<br/>isempty(s::ConvexRealSet) = (s.lower &gt; s.upper) || <br/>                           ((s.lower == s.upper) &amp;&amp;\u00a0!s.includeupper &amp;&amp;\u00a0!s.includelower)<br/>\u00a0<br/>\u00a0<br/>const s1 = ConvexRealSet(0.0, 1.0, false, true)<br/>const s2 = ConvexRealSet(0.0, 2.0, true, false)<br/>const s3 = ConvexRealSet(1.0, 2.0, false, true)<br/>const s4 = ConvexRealSet(0.0, 3.0, true, false)<br/>const s5 = ConvexRealSet(0.0, 1.0, false, false)<br/>const s6 = ConvexRealSet(0.0, 1.0, true, true)<br/>const sempty = ConvexRealSet(0.0, -1.0, true, true)<br/>const testlist = [0, 1, 2]<br/>\u00a0<br/>\u00a0<br/>function testconvexrealset()<br/>    for i in testlist<br/>        println(\"Testing with x = $i.\\nResults:\")<br/>        println(\"    (0, 1] \u222a [0, 2): $(\u22c3(s1, s2, i))\")<br/>        println(\"    [0, 2) \u2229 (1, 2]: $(\u22c2(s2, s3, i))\")<br/>        println(\"    [0, 3) \u2212 (0, 1): $(-(s4, s5, i))\")<br/>        println(\"    [0, 3) \u2212 [0, 1]: $(-(s4, s6, i))\\n\")<br/>    end<br/>    print(\"The set sempty is \")<br/>    println(isempty(sempty)\u00a0? \"empty.\"\u00a0: \"not empty.\")<br/>end<br/>\u00a0<br/>\u00a0<br/>testconvexrealset()<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 77, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/>typealias RealPredicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Boolean<br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RangeType <span class=\"br0\">{</span> CLOSED, BOTH<span class=\"sy0\">_</span>OPEN, LEFT<span class=\"sy0\">_</span>OPEN, RIGHT<span class=\"sy0\">_</span>OPEN <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RealSet<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> low<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> high<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> predicate<span class=\"sy0\">:</span> RealPredicate<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    constructor <span class=\"br0\">(</span>start<span class=\"sy0\">:</span> Double, end<span class=\"sy0\">:</span> Double, rangeType<span class=\"sy0\">:</span> RangeType<span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>start, end,<br/>        when <span class=\"br0\">(</span>rangeType<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            RangeType.<span class=\"me1\">CLOSED</span>     -<span class=\"sy0\">&gt;</span> fun<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> d in start..<span class=\"me1\">end</span><br/>            RangeType.<span class=\"me1\">BOTH_OPEN</span>  -<span class=\"sy0\">&gt;</span> fun<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> start <span class=\"sy0\">&lt;</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;</span> end<br/>            RangeType.<span class=\"me1\">LEFT_OPEN</span>  -<span class=\"sy0\">&gt;</span> fun<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> start <span class=\"sy0\">&lt;</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;=</span> end       <br/>            RangeType.<span class=\"me1\">RIGHT_OPEN</span> -<span class=\"sy0\">&gt;</span> fun<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> start <span class=\"sy0\">&lt;=</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;</span> end<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    fun contains<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> predicate<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>\u00a0<br/>    infix fun union<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> RealSet<span class=\"br0\">)</span><span class=\"sy0\">:</span> RealSet <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> low2 <span class=\"sy0\">=</span> minOf<span class=\"br0\">(</span>low, other.<span class=\"me1\">low</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> high2 <span class=\"sy0\">=</span> maxOf<span class=\"br0\">(</span>high, other.<span class=\"me1\">high</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> RealSet<span class=\"br0\">(</span>low2, high2<span class=\"br0\">)</span> <span class=\"br0\">{</span> predicate<span class=\"br0\">(</span>it<span class=\"br0\">)</span> || other.<span class=\"me1\">predicate</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    infix fun intersect<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> RealSet<span class=\"br0\">)</span><span class=\"sy0\">:</span> RealSet <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> low2 <span class=\"sy0\">=</span> maxOf<span class=\"br0\">(</span>low, other.<span class=\"me1\">low</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> high2 <span class=\"sy0\">=</span> minOf<span class=\"br0\">(</span>high, other.<span class=\"me1\">high</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> RealSet<span class=\"br0\">(</span>low2, high2<span class=\"br0\">)</span> <span class=\"br0\">{</span> predicate<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> other.<span class=\"me1\">predicate</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    infix fun subtract<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> RealSet<span class=\"br0\">)</span> <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span>low, high<span class=\"br0\">)</span> <span class=\"br0\">{</span> predicate<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>other.<span class=\"me1\">predicate</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> interval <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> length<span class=\"sy0\">:</span> Double get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>low.<span class=\"me1\">isFinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span> || <span class=\"sy0\">!</span>high.<span class=\"me1\">isFinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"nu0\">1.0</span>  <span class=\"co1\">// error value</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>high <span class=\"sy0\">&lt;=</span> low<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> low<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>predicate<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> count++<br/>            p +<span class=\"sy0\">=</span> interval<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> high<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count <span class=\"sy0\">*</span> interval<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>high <span class=\"sy0\">==</span> low<span class=\"br0\">)</span> <span class=\"sy0\">!</span>predicate<span class=\"br0\">(</span>low<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> length <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">LEFT_OPEN</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">2.0</span>, RangeType.<span class=\"me1\">RIGHT_OPEN</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, RangeType.<span class=\"me1\">LEFT_OPEN</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">3.0</span>, RangeType.<span class=\"me1\">RIGHT_OPEN</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">BOTH_OPEN</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, RangeType.<span class=\"me1\">CLOSED</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, RangeType.<span class=\"me1\">CLOSED</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dd <span class=\"sy0\">=</span> i.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"(0, 1] \u222a [0, 2) contains $i is ${(a union b).contains(dd)}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"[0, 2) \u2229 (1, 2] contains $i is ${(b intersect c).contains(dd)}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"[0, 3) \u2212 (0, 1) contains $i is ${(d subtract e).contains(dd)}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"[0, 3) \u2212 [0, 1] contains $i is ${(d subtract f).contains(dd)}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"[0, 0] is empty is ${g.isEmpty()}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> aa <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                                        Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span>  <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bb <span class=\"sy0\">=</span> RealSet<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                                        Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span>  <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cc <span class=\"sy0\">=</span> aa subtract bb<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Approx length of A - B is ${cc.length}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 27, "block": "<pre class=\"text highlighted_source\">(* defining functions *)<br/>setcc[a_, b_]\u00a0:= a &lt;= x &lt;= b<br/>setoo[a_, b_]\u00a0:= a &lt; x &lt; b<br/>setco[a_, b_]\u00a0:= a &lt;= x &lt; b<br/>setoc[a_, b_]\u00a0:= a &lt; x &lt;= b<br/>setSubtract[s1_, s2_]\u00a0:= s1  &amp;&amp;  Not[s2];  (* new function; subtraction not built in *)<br/>inSetQ[y_, set_]\u00a0:= set /. x -&gt; y<br/>(* testing sets *)<br/>set1 = setoc[0, 1]  || setco[0, 2]  (* union built in as || shortcut (OR) *);<br/>Print[set1]<br/>Print[\"First trial set, (0, 1] \u222a [0, 2) , testing for {0,1,2}:\"]<br/>Print[inSetQ[#, set1] &amp; /@ {0, 1, 2}]<br/>set2 = setco[0, 2] &amp;&amp; setoc[1, 2];  (* intersection built in as &amp;&amp; shortcut (AND) *) <br/>Print[]<br/>Print[set2]<br/>Print[\"Second trial set, [0, 2) \u2229 (1, 2], testing for {0,1,2}:\"]<br/>Print[inSetQ[#, set2] &amp; /@ {0, 1, 2}]<br/>Print[]<br/>set3 = setSubtract[setco[0, 3], setoo[0, 1]];<br/>Print[set3]<br/>Print[\"Third trial set, [0, 3) \\[Minus] (0, 1), testing for {0,1,2}\"]<br/>Print[inSetQ[#, set3] &amp; /@ {0, 1, 2}]<br/>Print[]<br/>set4 = setSubtract[setco[0, 3], setcc[0, 1]];<br/>Print[set4]<br/>Print[\"Fourth trial set, [0,3)\\[Minus][0,1], testing for {0,1,2}:\"]<br/>Print[inSetQ[#, set4] &amp; /@ {0, 1, 2}]</pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"parigp highlighted_source\">set11<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>set01<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">&lt;</span>  x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>set10<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span>  b<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>set00<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">&lt;</span>  x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span>  b<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>V <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">setunion</span><span class=\"br0\">(</span>set01<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> set10<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">setintersect</span><span class=\"br0\">(</span>set10<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> set01<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">setminus</span><span class=\"br0\">(</span>set10<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> set00<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">setminus</span><span class=\"br0\">(</span>set10<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> set11<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 179, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># numbers used as boundaries to real sets.  Each has 3 components:</span><br/><span class=\"co1\">#\tthe real value x;</span><br/><span class=\"co1\">#\ta +/-1 indicating if it's x + \u03f5 or x - \u03f5</span><br/><span class=\"co1\">#\ta 0/1 indicating if it's the left border or right border</span><br/><span class=\"co1\"># e.g. \"[1.5, ...\" is written \"1.5, -1, 0\", while \"..., 2)\" is \"2, -1, 1\"</span><br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> BNum<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> overload <span class=\"br0\">(</span><br/>\t<span class=\"st_h\">'\"\"'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_str</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'&lt;=&gt;'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_cmp</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span><span class=\"co5\">@_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$self</span> <span class=\"sy0\">||</span> <span class=\"re0\">$self</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> flip <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\@a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$brackets</span> <span class=\"sy0\">=</span> <span class=\"co2\">qw/ [ ( ) ] /</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> _str <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%.2f\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\t\t<span class=\"sy0\">?</span> <span class=\"re0\">$v</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"]\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"[\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _cmp <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$swap</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\"># if one of the argument is a normal number</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$swap</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">-</span>_ncmp<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$b</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isa</span><span class=\"br0\">(</span>__PACKAGE__<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> _ncmp<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _ncmp <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># $a is a BNum, $b is something comparable to a real</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">||</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> RealSet<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Carp<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> overload <span class=\"br0\">(</span><br/>\t<span class=\"st_h\">'\"\"'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_str</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'|'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_or</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'&amp;'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_and</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'~'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_neg</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'-'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_diff</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'bool'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;not_empty</span><span class=\"sy0\">,</span> <span class=\"co1\"># set is true if not empty</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%pm</span> <span class=\"sy0\">=</span> <span class=\"co2\">qw/ [ -1 ( 1 ) -1 ] 1 /</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> range <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$cls</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$spec</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$spec</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^( \\[ | \\( )( \\) | \\] )$/x</span>\t<span class=\"kw1\">or</span> croak <span class=\"st0\">\"bad spec $spec\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"re0\">$a</span> <span class=\"sy0\">=</span> BNum<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$pm</span><span class=\"br0\">{</span><span class=\"co3\">$1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=</span> BNum<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$pm</span><span class=\"br0\">{</span><span class=\"co3\">$2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tnormalize<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> normalize <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\"># remove invalid or duplicate borders, such as \"[2, 1]\" or \"3) [3\"</span><br/>\t<span class=\"co1\"># note that \"(a\" == \"a]\" and \"a)\" == \"[a\", but \"a)\" &lt; \"(a\" and</span><br/>\t<span class=\"co1\"># \"[a\" &lt; \"a]\"</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$#a</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\@a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> not_empty <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> normalize <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _str <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span>\t\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'()'</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \u222a \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\", \"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#a</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _or <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># we may have nested ranges now; let only outmost ones survive</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tnormalize <span class=\"br0\">[</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span>\t<span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"sy0\">--</span><span class=\"re0\">$d</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">:</span> <span class=\"re0\">$d</span><span class=\"sy0\">++</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a><span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><br/>\t<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _neg <span class=\"br0\">{</span><br/>\tnormalize <span class=\"br0\">[</span><br/>\t\tBNum<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'-inf'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">flip</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\tBNum<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'inf'</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _and <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tnormalize <span class=\"br0\">[</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span>\t<span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"sy0\">--</span><span class=\"re0\">$d</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">:</span> <span class=\"re0\">$d</span><span class=\"sy0\">++</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a><span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><br/>\t<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _diff <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"sy0\">~</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> has <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"co5\">$#</span><span class=\"re0\">$a</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> len <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"co5\">$#</span><span class=\"re0\">$a</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$l</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$l</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'reduce'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> rng <span class=\"br0\">{</span> RealSet<span class=\"sy0\">-&gt;</span><span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sets</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>\trng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'(]'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'[)'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\trng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'[)'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'(]'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\trng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st_h\">'[)'</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'()'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\trng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st_h\">'[)'</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'[]'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#sets</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Set $i = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$sets</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"has $_; \"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sets</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># optional task</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>####<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> brev <span class=\"br0\">{</span> <span class=\"co1\"># show only head and tail if string too long</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$x</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\" ... \"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># \"|sin(x)| &gt; 1/2\" means (n + 1/6) pi &lt; x &lt; (n + 5/6) pi</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> reduce <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span>rng<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">./</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">./</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'()'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">101</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;=</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st_h\">'()'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"A<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">'= {x | 0 &lt; x &lt; 10 and |sin(\u03c0 x\u00b2)| &gt; 1/2 }'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>= \"</span><span class=\"sy0\">,</span> brev<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> reduce <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> rng<span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">./</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">./</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"st_h\">'()'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">&amp;=</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st_h\">'()'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"B<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">'= {x | 0 &lt; x &lt; 10 and |sin(\u03c0 x)| &gt; 1/2 }'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>= \"</span><span class=\"sy0\">,</span> brev<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"A - B<span class=\"es0\">\\t</span>= \"</span><span class=\"sy0\">,</span> brev<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>length = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">len</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$z</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"not empty<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"empty<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 148, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Iv <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">range</span> handles <span class=\"sy0\">&lt;</span><span class=\"kw3\">min</span> <span class=\"kw3\">max</span> excludes<span class=\"sy0\">-</span><span class=\"kw3\">min</span> excludes<span class=\"sy0\">-</span><span class=\"kw3\">max</span> minmax ACCEPTS<span class=\"sy0\">&gt;;</span><br/>    <span class=\"kw2\">method</span> empty <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> after <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"kw1\">or</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">===</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">||</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">method</span> Bool<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">not</span> self<span class=\"sy0\">.</span><span class=\"me1\">empty</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">-</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> gist<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">??</span> <span class=\"st_h\">'('</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">'['</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span><br/>\t<span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">~</span> <span class=\"st_h\">','</span> <span class=\"sy0\">~</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">~</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span> <span class=\"sy0\">??</span> <span class=\"st_h\">')'</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">']'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> IvSet <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Iv <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> canon <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw3\">i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw2\">new</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span><span class=\"sy0\">|@</span><span class=\"kw3\">i</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">so</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw2\">new</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">@ranges</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@iv</span> <span class=\"sy0\">=</span> canon <span class=\"re0\">@ranges</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> Iv<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>range<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\tself<span class=\"sy0\">.</span><span class=\"me1\">bless</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>intervals<span class=\"br0\">(</span><span class=\"re0\">@iv</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> complement <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@!intervals</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"re0\">@old</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> iv <span class=\"sy0\">-</span>Inf<span class=\"sy0\">..</span><span class=\"me1\">Inf</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$pre</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">push</span> <span class=\"re0\">@old</span><span class=\"sy0\">,</span> $<span class=\"br0\">(</span>Inf<span class=\"sy0\">^..</span><span class=\"me1\">Inf</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@old</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">===</span> Inf<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"re0\">@old</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">===</span> <span class=\"sy0\">-</span>Inf <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$pre</span> <span class=\"sy0\">=</span> <span class=\"re0\">@old</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$pre</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>Inf<span class=\"sy0\">..^-</span>Inf<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span> <span class=\"re0\">@old</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@old</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"re0\">$pre</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"re0\">$old</span><span class=\"sy0\">.</span><span class=\"me1\">excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw3\">push</span> <span class=\"sy0\">@</span><span class=\"kw2\">new</span><span class=\"sy0\">,</span> $<span class=\"br0\">(</span>Range<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$pre</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">,</span><span class=\"re0\">$old</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"sy0\">,:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span><span class=\"sy0\">,:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$pre</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tIvSet<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">new</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> ACCEPTS<span class=\"br0\">(</span>IvSet<span class=\"sy0\">:</span>D <span class=\"re0\">$me</span><span class=\"sy0\">:</span> <span class=\"re0\">$candidate</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tso <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span><span class=\"sy0\">.</span><span class=\"kw3\">any</span><span class=\"sy0\">.</span><span class=\"me1\">ACCEPTS</span><span class=\"br0\">(</span><span class=\"re0\">$candidate</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> empty <span class=\"br0\">{</span> so <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span><span class=\"sy0\">.</span><span class=\"kw3\">all</span><span class=\"sy0\">.</span><span class=\"me1\">empty</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">method</span> Bool<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">not</span> self<span class=\"sy0\">.</span><span class=\"me1\">empty</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">length</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> gist<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">join</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">gist</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> iv<span class=\"br0\">(</span><span class=\"sy0\">**</span><span class=\"re0\">@ranges</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IvSet<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">@ranges</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;</span>\u2229<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>Iv <span class=\"re0\">$a</span><span class=\"sy0\">,</span> Iv <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$b</span> <span class=\"kw1\">or</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$b</span> <span class=\"kw1\">or</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"kw1\">or</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$min</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"kw3\">max</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"kw3\">min</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\tIv<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>range<span class=\"br0\">(</span>Range<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$min</span><span class=\"sy0\">,</span><span class=\"re0\">$max</span><span class=\"sy0\">,:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;</span>\u222a<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>Iv <span class=\"re0\">$a</span><span class=\"sy0\">,</span> Iv <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$min</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"kw3\">min</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"kw3\">max</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    Iv<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>range<span class=\"br0\">(</span>Range<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$min</span><span class=\"sy0\">,</span><span class=\"re0\">$max</span><span class=\"sy0\">,:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;</span>\u2229<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>IvSet <span class=\"re0\">$ars</span><span class=\"sy0\">,</span> IvSet <span class=\"re0\">$brs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@overlap</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$ars</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">$brs</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$b</span> <span class=\"kw1\">or</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$b</span> <span class=\"kw1\">or</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"kw1\">or</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$min</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"kw3\">max</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"kw3\">min</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$min</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$max</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">push</span> <span class=\"re0\">@overlap</span><span class=\"sy0\">,</span> $<span class=\"br0\">(</span>Range<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$min</span><span class=\"sy0\">,</span><span class=\"re0\">$max</span><span class=\"sy0\">,:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">min</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$excludes</span><span class=\"sy0\">-</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    IvSet<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">@overlap</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;</span>\u222a<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>IvSet <span class=\"re0\">$a</span><span class=\"sy0\">,</span> IvSet <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iv <span class=\"sy0\">|</span><span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> consolidate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> consolidate<span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@those</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> consolidate <span class=\"sy0\">|</span><span class=\"re0\">@those</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$that</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$this</span> \u2229 <span class=\"re0\">$that</span> <span class=\"br0\">{</span> <span class=\"re0\">$this</span> \u222a<span class=\"sy0\">=</span> <span class=\"re0\">$that</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span>             <span class=\"br0\">{</span> take <span class=\"re0\">$that</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        take <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;</span>\u2212<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>IvSet <span class=\"re0\">$a</span><span class=\"sy0\">,</span> IvSet <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> \u2229 <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">complement</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> prefix<span class=\"sy0\">:&lt;</span>\u2212<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>IvSet <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">complement</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> \u211d <span class=\"sy0\">=</span> iv <span class=\"sy0\">-</span>Inf<span class=\"sy0\">..</span><span class=\"me1\">Inf</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$s1</span> <span class=\"sy0\">=</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^..</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \u222a iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s2</span> <span class=\"sy0\">=</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> \u2229 iv<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">^..</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s3</span> <span class=\"sy0\">=</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> \u2212 iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^..^</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s4</span> <span class=\"sy0\">=</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> \u2212 iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span><span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>0<span class=\"es0\">\\t</span>1<span class=\"es0\">\\t</span>2\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"(0, 1] \u222a [0, 2) -&gt; $s1.gist()<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s1</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s1</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s1</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"[0, 2) \u2229 (1, 2] -&gt; $s2.gist()<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s2</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s2</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"[0, 3) \u2212 (0, 1) -&gt; $s3.gist()<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s3</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s3</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s3</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"[0, 3) \u2212 [0, 1] -&gt; $s4.gist()<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s4</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s4</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">~~</span> <span class=\"re0\">$s4</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"\u211d is not empty: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">!</span>\u211d<span class=\"sy0\">.</span><span class=\"me1\">empty</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"[0,3] \u2212 \u211d is empty: \"</span><span class=\"sy0\">,</span> <span class=\"kw1\">not</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> \u2212 \u211d<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> iv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> \u2229<br/>   iv <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span> <span class=\"sy0\">..</span> <span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">cache</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> iv <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t   <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> $<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t   <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'A \u2212 A is empty: '</span><span class=\"sy0\">,</span> <span class=\"kw1\">not</span> <span class=\"re0\">$A</span> \u2212 <span class=\"re0\">$A</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$C</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span> \u2212 <span class=\"re0\">$B</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"A \u2212 B =\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"  \"</span><span class=\"sy0\">,.</span><span class=\"me1\">gist</span> <span class=\"kw1\">for</span> <span class=\"re0\">$C</span><span class=\"sy0\">.</span><span class=\"me1\">intervals</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Length A \u2212 B = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$C</span><span class=\"sy0\">.</span><span class=\"kw3\">length</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 46, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Setr<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> includelo<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span> includehi<span class=\"sy0\">=</span><span class=\"kw2\">False</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(%i&lt;%sX&lt;%s%i)\"</span>\u00a0% <span class=\"br0\">(</span>lo<span class=\"sy0\">,</span><br/>                                      <span class=\"st0\">'='</span> <span class=\"kw1\">if</span> includelo <span class=\"kw1\">else</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span><br/>                                      <span class=\"st0\">'='</span> <span class=\"kw1\">if</span> includehi <span class=\"kw1\">else</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span><br/>                                      hi<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__contains__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> X<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span><span class=\"sy0\">,</span> <span class=\"kw2\">locals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># union</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__or__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>        ans <span class=\"sy0\">=</span> Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        ans.<span class=\"me1\">eqn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(%sor%s)\"</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span><span class=\"sy0\">,</span> b.<span class=\"me1\">eqn</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> ans<br/>\u00a0<br/>    <span class=\"co1\"># intersection</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__and__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>        ans <span class=\"sy0\">=</span> Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        ans.<span class=\"me1\">eqn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(%sand%s)\"</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span><span class=\"sy0\">,</span> b.<span class=\"me1\">eqn</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> ans<br/>\u00a0<br/>    <span class=\"co1\"># difference</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__sub__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>        ans <span class=\"sy0\">=</span> Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        ans.<span class=\"me1\">eqn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(%sand not%s)\"</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span><span class=\"sy0\">,</span> b.<span class=\"me1\">eqn</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> ans<br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Setr%s\"</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">eqn</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">sets</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> | Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; Setr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> - Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> - Setr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">]</span><br/>settexts <span class=\"sy0\">=</span> <span class=\"st0\">'(0, 1] \u222a [0, 2);[0, 2) \u2229 (1, 2];[0, 3) \u2212 (0, 1);[0, 3) \u2212 [0, 1]'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">';'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> s<span class=\"sy0\">,</span>t <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw3\">sets</span><span class=\"sy0\">,</span> settexts<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Set\u00a0%s\u00a0%s.\u00a0%s\"</span>\u00a0% <span class=\"br0\">(</span>t<span class=\"sy0\">,</span><br/>                             <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"%scludes\u00a0%i\"</span><br/>                                    \u00a0% <span class=\"br0\">(</span><span class=\"st0\">'in'</span> <span class=\"kw1\">if</span> v <span class=\"kw1\">in</span> s <span class=\"kw1\">else</span> <span class=\"st0\">'ex'</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>                                     <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                             s.<span class=\"me1\">eqn</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Use a macro to allow infix operators<br/>(require (only-in racket [#%app #%%app]))<br/>(define-for-syntax infixes '())<br/>(define-syntax (definfix stx)<br/>  (syntax-case stx ()<br/>    [(_ (x . xs) body ...) #'(definfix x (\u03bb xs body ...))]<br/>    [(_ x body) (begin (set! infixes (cons #'x infixes)) #'(define x body))]))<br/>(define-syntax (#%app stx)<br/>  (syntax-case stx ()<br/>    [(_ X op Y)<br/>     (and (identifier? #'op) (ormap (\u03bb(o) (free-identifier=? #'op o)) infixes))<br/>     #'(#%%app op X Y)]<br/>    [(_ f x ...) #'(#%%app f x ...)]))<br/>\u00a0<br/>\u00a0<br/>;; Ranges: (X +-+ Y) =&gt; [X,Y]; (X --- Y) =&gt; (X,Y); and same for `+--' and `--+'<br/>;; Simple implementation as functions<br/>\u00a0<br/>;; Constructors<br/>(definfix ((+-+ X Y) n) (&lt;= X n Y))            \u00a0; [X,Y]<br/>(definfix ((--- X Y) n) (&lt; X n Y))             \u00a0; (X,Y)<br/>(definfix ((+-- X Y) n) (and (&lt;= X n) (&lt; n Y)))\u00a0; [X,Y)<br/>(definfix ((--+ X Y) n) (and (&lt; X n) (&lt;= n Y)))\u00a0; (X,Y]<br/>(definfix ((== X) n) (= X n))                  \u00a0; [X,X]<br/>;; Set operations<br/>(definfix ((\u222a . Rs) n)  (ormap  (\u03bb(p) (p n)) Rs))<br/>(definfix ((\u2229 . Rs) n)  (andmap (\u03bb(p) (p n)) Rs))<br/>(definfix ((\u2216 R1 R2) n) (and (R1 n) (not (R2 n))))\u00a0; set-minus, not backslash<br/>(define ((\u00ac R) n) (not (R n)))<br/>;; Special sets<br/>(define (\u2205 n) #f)<br/>(define (\u211c n) #t)<br/>\u00a0<br/>(define-syntax-rule (try set)<br/>  (apply printf \"~a =&gt; ~a ~a ~a\\n\" (~s #:width 23 'set)<br/>         (let ([pred set]) (for/list ([i 3]) (if (pred i) 'Y 'N)))))<br/>(try ((0 --+ 1) \u222a (0 +-- 2)))<br/>(try ((0 +-- 2) \u2229 (1 --+ 2)))<br/>(try ((0 +-- 3) \u2216 (0 --- 1)))<br/>(try ((0 +-- 3) \u2216 (0 +-+ 1)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  a way to  represent any set of real numbers  and  usage.  */</span><br/><span class=\"kw1\">call</span> quertySet <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>,  <span class=\"st0\">'[1,2)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,2)   union   (1,3)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,1)   union   (2,3]'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,2]   inter   (1,3)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'(1,2)     \u2229     (2,3]'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,2)     \\     (1,3)'</span><br/><span class=\"kw1\">say</span>;                                      <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' start of required tasks '</span>, <span class=\"nu0\">40</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'(0,1]   union   [0,2)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,2)     \u2229     (1,3)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,3]     -     (0,1)'</span><br/><span class=\"kw1\">call</span> quertySet ,   ,  <span class=\"st0\">'[0,3]     -     [0,1]'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>emptySet:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _;               nam= valSet<span class=\"br0\">(</span>_, 00<span class=\"br0\">)</span>;              <span class=\"kw1\">return</span> @<span class=\"sy0\">.</span>3<span class=\"sy0\">&gt;</span>@<span class=\"sy0\">.</span>4<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isInSet:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #,x;             <span class=\"kw1\">call</span> valSet x<br/>           <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>#, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> set_bad <span class=\"st0\">\"number isn't not numeric:\"</span> #<br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1==<span class=\"st0\">'('</span> <span class=\"sy0\">&amp;</span>  #<span class=\"sy0\">&lt;</span><a class=\"__cf_email__\" data-cfemail=\"251865\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>2<span class=\"br0\">)</span> <span class=\"sy0\">|</span>,<br/>              <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1==<span class=\"st0\">'['</span> <span class=\"sy0\">&amp;</span>  #<span class=\"sy0\">&lt;</span> @<span class=\"sy0\">.</span>2<span class=\"br0\">)</span> <span class=\"sy0\">|</span>,<br/>              <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>4==<span class=\"st0\">')'</span> <span class=\"sy0\">&amp;</span>  #<span class=\"sy0\">&gt;</span><a class=\"__cf_email__\" data-cfemail=\"4f720f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>3<span class=\"br0\">)</span> <span class=\"sy0\">|</span>,<br/>              <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>4==<span class=\"st0\">']'</span> <span class=\"sy0\">&amp;</span>  #<span class=\"sy0\">&gt;</span> @<span class=\"sy0\">.</span>3<span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>quertySet: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> lv,hv,s1 oop s2 <span class=\"sy0\">.</span>;  op=oop;   <span class=\"kw2\">upper</span> op;      cop=<br/>           <span class=\"kw1\">if</span> lv==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> lv=<span class=\"nu0\">0</span>;      <span class=\"kw1\">if</span> hv==<span class=\"st0\">\"\"</span>  <span class=\"kw3\">then</span> hv= <span class=\"nu0\">2</span>;      <span class=\"kw1\">if</span> op==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> cop=  <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>op, <span class=\"st0\">'| or UNION'</span><span class=\"br0\">)</span>                 <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"kw3\">then</span> cop= <span class=\"st0\">\"|\"</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>op, <span class=\"st0\">'&amp; \u2229 AND INTER INTERSECTION'</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"kw3\">then</span> cop= <span class=\"st0\">\"&amp;\"</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>op, <span class=\"st0\">'\\ - DIF DIFF DIFFERENCE'</span><span class=\"br0\">)</span>    <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"kw3\">then</span> cop= <span class=\"st0\">\"\\\"</span><br/>           <span class=\"kw1\">say</span><br/>                   <span class=\"kw1\">do</span> i=lv  <span class=\"kw2\">to</span> hv;  b = isInSet<span class=\"br0\">(</span>i, s1<span class=\"br0\">)</span><br/>                   <span class=\"kw1\">if</span> cop<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>                                    b2= isInSet<span class=\"br0\">(</span>i, s2<span class=\"br0\">)</span><br/>                                    <span class=\"kw1\">if</span> cop==<span class=\"st0\">'&amp;'</span>  <span class=\"kw3\">then</span> b= b <span class=\"sy0\">&amp;</span> b2<br/>                                    <span class=\"kw1\">if</span> cop==<span class=\"st0\">'|'</span>  <span class=\"kw3\">then</span> b= b <span class=\"sy0\">|</span> b2<br/>                                    <span class=\"kw1\">if</span> cop==<span class=\"st0\">'\\'</span>  <span class=\"kw3\">then</span> b= b <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>b2<br/>                                    <span class=\"kw3\">end</span><br/>                   express = s1 <span class=\"kw6\">center</span><span class=\"br0\">(</span>oop, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>oop<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>    s2<br/>                   <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>i, <span class=\"nu0\">5</span><span class=\"br0\">)</span>    <span class=\"st0\">' is in set'</span>     express<span class=\"st0\">\": \"</span>   <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>, b+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>           <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>valSet:    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> q;   q=<span class=\"kw6\">space</span><span class=\"br0\">(</span>q, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;    L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>;     @<span class=\"sy0\">.</span>0= <span class=\"st0\">','</span>;     @<span class=\"sy0\">.</span>4= <span class=\"kw6\">right</span><span class=\"br0\">(</span>q,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> q    @<span class=\"sy0\">.</span>1  <span class=\"nu0\">2</span>  @<span class=\"sy0\">.</span>2  <span class=\"st0\">','</span>  @<span class=\"sy0\">.</span>3  <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>4<span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>2<span class=\"sy0\">&gt;</span>@<span class=\"sy0\">.</span>3  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> L   <span class=\"sy0\">.</span> @<span class=\"sy0\">.</span>0  @<span class=\"sy0\">.</span>2  @<span class=\"sy0\">.</span>3<br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1 @<span class=\"sy0\">.</span>2 @<span class=\"sy0\">.</span>0 @<span class=\"sy0\">.</span>3 @<span class=\"sy0\">.</span>4, <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 171, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Rset<br/>  <span class=\"kw4\">Set</span> = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:lo</span>, <span class=\"re3\">:hi</span>, <span class=\"re3\">:inc_lo</span>, <span class=\"re3\">:inc_hi</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw1\">include</span>?<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>inc_lo\u00a0? lo<span class=\"sy0\">&lt;</span>=x\u00a0: lo<span class=\"sy0\">&lt;</span>x<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>inc_hi\u00a0? x<span class=\"sy0\">&lt;</span>=hi\u00a0: x<span class=\"sy0\">&lt;</span>hi<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">def</span> length<br/>      hi <span class=\"sy0\">-</span> lo<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">def</span> to_s<br/>      <span class=\"st0\">\"#{inc_lo\u00a0? '['\u00a0: '('}#{lo},#{hi}#{inc_hi\u00a0? ']'\u00a0: ')'}\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>lo=<span class=\"kw2\">nil</span>, hi=<span class=\"kw2\">nil</span>, inc_lo=<span class=\"kw2\">false</span>, inc_hi=<span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> lo.<span class=\"kw2\">nil</span>? <span class=\"kw1\">and</span> hi.<span class=\"kw2\">nil</span>?<br/>      <span class=\"re1\">@sets</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>            <span class=\"co1\"># empty set</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">raise</span> <span class=\"kw4\">TypeError</span>      <span class=\"kw1\">unless</span> lo.<span class=\"me1\">is_a</span>?<span class=\"br0\">(</span><span class=\"kw4\">Numeric</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> hi.<span class=\"me1\">is_a</span>?<span class=\"br0\">(</span><span class=\"kw4\">Numeric</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>  <span class=\"kw1\">unless</span> valid?<span class=\"br0\">(</span>lo, hi, inc_lo, inc_hi<span class=\"br0\">)</span><br/>      <span class=\"re1\">@sets</span> = <span class=\"br0\">[</span><span class=\"kw4\">Set</span><span class=\"br0\">[</span>lo, hi,\u00a0!!inc_lo,\u00a0!!inc_hi<span class=\"br0\">]</span><span class=\"br0\">]</span>         <span class=\"co1\">#\u00a0!! -&gt; Boolean values</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>lo, hi, inc_hi=<span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>lo, hi, <span class=\"kw2\">true</span>, inc_hi<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">parse</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>  <span class=\"kw1\">unless</span> str =~ <span class=\"sy0\">/</span><span class=\"br0\">(</span>\\<span class=\"br0\">[</span><span class=\"sy0\">|</span>\\<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>.<span class=\"sy0\">+</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>.<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">(</span>\\<span class=\"br0\">]</span><span class=\"sy0\">|</span>\\<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><br/>    b0, lo, hi, b1 = $~.<span class=\"me1\">captures</span>        <span class=\"co1\"># $~\u00a0: Regexp.last_match</span><br/>    lo = <span class=\"kw4\">Rational</span><span class=\"br0\">(</span>lo<span class=\"br0\">)</span><br/>    lo = lo.<span class=\"me1\">numerator</span>  <span class=\"kw1\">if</span> lo.<span class=\"me1\">denominator</span> == <span class=\"nu0\">1</span><br/>    hi = <span class=\"kw4\">Rational</span><span class=\"br0\">(</span>hi<span class=\"br0\">)</span><br/>    hi = hi.<span class=\"me1\">numerator</span>  <span class=\"kw1\">if</span> hi.<span class=\"me1\">denominator</span> == <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>lo, hi, b0==<span class=\"st0\">'['</span>, b1==<span class=\"st0\">']'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize_copy<span class=\"br0\">(</span>obj<span class=\"br0\">)</span><br/>    <span class=\"kw1\">super</span><br/>    <span class=\"re1\">@sets</span> = <span class=\"re1\">@sets</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:dup<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw1\">include</span>?<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"re1\">@sets</span>.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>set<span class=\"sy0\">|</span> set.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> empty?<br/>    <span class=\"re1\">@sets</span>.<span class=\"me1\">empty</span>?<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> union<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    sets = <span class=\"br0\">(</span>@sets<span class=\"sy0\">+</span>other.<span class=\"me1\">sets</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:dup<span class=\"br0\">)</span>.<span class=\"me1\">sort_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>set<span class=\"sy0\">|</span> <span class=\"br0\">[</span>set.<span class=\"me1\">lo</span>, set.<span class=\"me1\">hi</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    work = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    pre = sets.<span class=\"me1\">shift</span><br/>    sets.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>post<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> valid?<span class=\"br0\">(</span>pre.<span class=\"me1\">hi</span>, post.<span class=\"me1\">lo</span>,\u00a0!pre.<span class=\"me1\">inc_hi</span>,\u00a0!post.<span class=\"me1\">inc_lo</span><span class=\"br0\">)</span><br/>        work <span class=\"sy0\">&lt;&lt;</span> pre<br/>        pre = post<br/>      <span class=\"kw1\">else</span><br/>        pre.<span class=\"me1\">inc_lo</span> <span class=\"sy0\">|</span>= post.<span class=\"me1\">inc_lo</span>  <span class=\"kw1\">if</span> pre.<span class=\"me1\">lo</span> == post.<span class=\"me1\">lo</span><br/>        <span class=\"kw1\">if</span> pre.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> post.<span class=\"me1\">hi</span><br/>          pre.<span class=\"me1\">hi</span> = post.<span class=\"me1\">hi</span><br/>          pre.<span class=\"me1\">inc_hi</span> = post.<span class=\"me1\">inc_hi</span><br/>        <span class=\"kw1\">elsif</span> pre.<span class=\"me1\">hi</span> == post.<span class=\"me1\">hi</span><br/>          pre.<span class=\"me1\">inc_hi</span> <span class=\"sy0\">|</span>= post.<span class=\"me1\">inc_hi</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    work <span class=\"sy0\">&lt;&lt;</span> pre  <span class=\"kw1\">if</span> pre<br/>    new_Rset<span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">alias</span> <span class=\"sy0\">|</span> union<br/>\u00a0<br/>  <span class=\"kw1\">def</span> intersection<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    sets = <span class=\"re1\">@sets</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:dup<span class=\"br0\">)</span><br/>    work = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    other.<span class=\"me1\">sets</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>oset<span class=\"sy0\">|</span><br/>      sets.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>set<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> set.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">lo</span> <span class=\"kw1\">or</span> oset.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">lo</span><br/>          <span class=\"co1\"># ignore</span><br/>        <span class=\"kw1\">elsif</span> oset.<span class=\"me1\">lo</span> <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">lo</span> <span class=\"kw1\">and</span> set.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">hi</span><br/>          work <span class=\"sy0\">&lt;&lt;</span> set<br/>        <span class=\"kw1\">else</span><br/>          lo = <span class=\"br0\">[</span>set.<span class=\"me1\">lo</span>, oset.<span class=\"me1\">lo</span><span class=\"br0\">]</span>.<span class=\"me1\">max</span><br/>          <span class=\"kw1\">if</span> set.<span class=\"me1\">lo</span> == oset.<span class=\"me1\">lo</span><br/>            inc_lo = set.<span class=\"me1\">inc_lo</span> <span class=\"sy0\">&amp;&amp;</span> oset.<span class=\"me1\">inc_lo</span><br/>          <span class=\"kw1\">else</span><br/>            inc_lo = <span class=\"br0\">(</span>set.<span class=\"me1\">lo</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">lo</span><span class=\"br0\">)</span>\u00a0? oset.<span class=\"me1\">inc_lo</span>\u00a0: set.<span class=\"me1\">inc_lo</span><br/>          <span class=\"kw1\">end</span><br/>          hi = <span class=\"br0\">[</span>set.<span class=\"me1\">hi</span>, oset.<span class=\"me1\">hi</span><span class=\"br0\">]</span>.<span class=\"me1\">min</span><br/>          <span class=\"kw1\">if</span> set.<span class=\"me1\">hi</span> == oset.<span class=\"me1\">hi</span><br/>            inc_hi = set.<span class=\"me1\">inc_hi</span> <span class=\"sy0\">&amp;&amp;</span> oset.<span class=\"me1\">inc_hi</span><br/>          <span class=\"kw1\">else</span><br/>            inc_hi = <span class=\"br0\">(</span>set.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">hi</span><span class=\"br0\">)</span>\u00a0? set.<span class=\"me1\">inc_hi</span>\u00a0: oset.<span class=\"me1\">inc_hi</span><br/>          <span class=\"kw1\">end</span><br/>          work <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span>lo, hi, inc_lo, inc_hi<span class=\"br0\">]</span>  <span class=\"kw1\">if</span> valid?<span class=\"br0\">(</span>lo, hi, inc_lo, inc_hi<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    new_Rset<span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">alias</span> <span class=\"sy0\">&amp;</span> intersection<br/>\u00a0<br/>  <span class=\"kw1\">def</span> difference<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    sets = <span class=\"re1\">@sets</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:dup<span class=\"br0\">)</span><br/>    other.<span class=\"me1\">sets</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>oset<span class=\"sy0\">|</span><br/>      work = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      sets.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>set<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> set.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">lo</span> <span class=\"kw1\">or</span> oset.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">lo</span><br/>          work <span class=\"sy0\">&lt;&lt;</span> set<br/>        <span class=\"kw1\">elsif</span> oset.<span class=\"me1\">lo</span> <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">lo</span> <span class=\"kw1\">and</span> set.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">hi</span><br/>          <span class=\"co1\"># delete</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw1\">if</span> set.<span class=\"me1\">lo</span> <span class=\"sy0\">&lt;</span> oset.<span class=\"me1\">lo</span><br/>            inc_hi = <span class=\"br0\">(</span>set.<span class=\"me1\">hi</span>==oset.<span class=\"me1\">lo</span> <span class=\"kw1\">and</span>\u00a0!set.<span class=\"me1\">inc_hi</span><span class=\"br0\">)</span>\u00a0? <span class=\"kw2\">false</span>\u00a0:\u00a0!oset.<span class=\"me1\">inc_lo</span><br/>            work <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span>set.<span class=\"me1\">lo</span>, oset.<span class=\"me1\">lo</span>, set.<span class=\"me1\">inc_lo</span>, inc_hi<span class=\"br0\">]</span><br/>          <span class=\"kw1\">elsif</span> valid?<span class=\"br0\">(</span>set.<span class=\"me1\">lo</span>, oset.<span class=\"me1\">lo</span>, set.<span class=\"me1\">inc_lo</span>,\u00a0!oset.<span class=\"me1\">inc_lo</span><span class=\"br0\">)</span><br/>            work <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span>set.<span class=\"me1\">lo</span>, set.<span class=\"me1\">lo</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">true</span><span class=\"br0\">]</span><br/>          <span class=\"kw1\">end</span><br/>          <span class=\"kw1\">if</span> oset.<span class=\"me1\">hi</span> <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">hi</span><br/>            inc_lo = <span class=\"br0\">(</span>oset.<span class=\"me1\">hi</span>==set.<span class=\"me1\">lo</span> <span class=\"kw1\">and</span>\u00a0!set.<span class=\"me1\">inc_lo</span><span class=\"br0\">)</span>\u00a0? <span class=\"kw2\">false</span>\u00a0:\u00a0!oset.<span class=\"me1\">inc_hi</span><br/>            work <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span>oset.<span class=\"me1\">hi</span>, set.<span class=\"me1\">hi</span>, inc_lo, set.<span class=\"me1\">inc_hi</span><span class=\"br0\">]</span><br/>          <span class=\"kw1\">elsif</span> valid?<span class=\"br0\">(</span>oset.<span class=\"me1\">hi</span>, set.<span class=\"me1\">hi</span>,\u00a0!oset.<span class=\"me1\">inc_hi</span>, set.<span class=\"me1\">inc_hi</span><span class=\"br0\">)</span><br/>            work <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span>set.<span class=\"me1\">hi</span>, set.<span class=\"me1\">hi</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">true</span><span class=\"br0\">]</span><br/>          <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>      sets = work<br/>    <span class=\"kw1\">end</span><br/>    new_Rset<span class=\"br0\">(</span>sets<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">alias</span> <span class=\"sy0\">-</span> difference<br/>\u00a0<br/>  <span class=\"co1\"># symmetric difference</span><br/>  <span class=\"kw1\">def</span> ^<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw2\">self</span> <span class=\"sy0\">-</span> other<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>other <span class=\"sy0\">-</span> <span class=\"kw2\">self</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> ==<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span>.<span class=\"kw1\">class</span> == other.<span class=\"kw1\">class</span> <span class=\"kw1\">and</span> <span class=\"re1\">@sets</span> == other.<span class=\"me1\">sets</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> length<br/>    <span class=\"re1\">@sets</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>len, set<span class=\"sy0\">|</span> len <span class=\"sy0\">+</span> set.<span class=\"me1\">length</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"#{self.class}#{@sets.join}\"</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">alias</span> inspect to_s<br/>\u00a0<br/>  protected<br/>\u00a0<br/>  attr_accessor <span class=\"re3\">:sets</span><br/>\u00a0<br/>  private<br/>\u00a0<br/>  <span class=\"kw1\">def</span> new_Rset<span class=\"br0\">(</span>sets<span class=\"br0\">)</span><br/>    rset = <span class=\"kw2\">self</span>.<span class=\"kw1\">class</span>.<span class=\"me1\">new</span>          <span class=\"co1\"># empty set</span><br/>    rset.<span class=\"me1\">sets</span> = sets<br/>    rset<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> valid?<span class=\"br0\">(</span>lo, hi, inc_lo, inc_hi<span class=\"br0\">)</span><br/>    lo <span class=\"sy0\">&lt;</span> hi <span class=\"kw1\">or</span> <span class=\"br0\">(</span>lo==hi <span class=\"kw1\">and</span> inc_lo <span class=\"kw1\">and</span> inc_hi<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> Rset<span class=\"br0\">(</span>lo, hi, inc_hi=<span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>  Rset.<span class=\"me1\">new</span><span class=\"br0\">(</span>lo, hi, <span class=\"kw2\">false</span>, inc_hi<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Tcl", "loc": 146, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> inRange <span class=\"br0\">{</span>x range<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"re0\">$range</span> a aClosed b bClosed<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$aClosed</span> <span class=\"sy0\">?</span> <span class=\"re0\">$a</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$x</span>\u00a0: <span class=\"re0\">$a</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$bClosed</span> <span class=\"sy0\">?</span> <span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$b</span>\u00a0: <span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> normalize <span class=\"br0\">{</span>A<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> A <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -index <span class=\"nu0\">0</span> -real <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -index <span class=\"nu0\">1</span> -integer -decreasing <span class=\"re0\">$A</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> a aClosed b bClosed<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$a</span> || <span class=\"br0\">(</span><span class=\"re0\">$a</span> == <span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$aClosed</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$bClosed</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> A <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> R <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    lassign <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> a aClosed b bClosed<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>inRange <span class=\"re0\">$a</span> <span class=\"re0\">$R</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>inRange <span class=\"re0\">$b</span> <span class=\"re0\">$R</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lset</span> A <span class=\"re0\">$i</span> <span class=\"nu0\">2</span> <span class=\"re0\">$b</span><br/>\t\t    <span class=\"kw2\">lset</span> A <span class=\"re0\">$i</span> <span class=\"nu0\">3</span> <span class=\"re0\">$bClosed</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">set</span> A <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$A</span> <span class=\"re0\">$j</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">incr</span> j -<span class=\"nu0\">1</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$A</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> realset <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> RE <span class=\"br0\">{</span>^\\s<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">[</span>\\<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\\s<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">[</span>-\\d.e<span class=\"br0\">]</span>+|-inf<span class=\"br0\">)</span>\\s<span class=\"sy0\">*</span>,\\s<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">[</span>-\\d.e<span class=\"br0\">]</span>+|inf<span class=\"br0\">)</span>\\s<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">[</span>\\<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\\s<span class=\"sy0\">*$</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> s <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"re0\">$RE</span> <span class=\"re0\">$s</span> --<span class=\"sy0\">&gt;</span> left a b right<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">string</span> is double <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> is double <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t\t<span class=\"re0\">$a</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$left</span> eq <span class=\"st0\">\"<span class=\"es0\">\\[</span>\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$right</span> eq <span class=\"st0\">\"<span class=\"es0\">\\]</span>\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"st0\">\"bad range descriptor\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> elementOf <span class=\"br0\">{</span>x A<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> range <span class=\"re0\">$A</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>inRange <span class=\"re0\">$x</span> <span class=\"re0\">$range</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> union <span class=\"br0\">{</span>A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>normalize <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$A</span> <span class=\"re0\">$B</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> intersection <span class=\"br0\">{</span>A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> B <span class=\"br0\">[</span>normalize <span class=\"re0\">$B</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> RA <span class=\"br0\">[</span>normalize <span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$RA</span> Aa AaClosed Ab AbClosed<br/>\t<span class=\"kw1\">foreach</span> RB <span class=\"re0\">$B</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$RB</span> Ba BaClosed Bb BbClosed<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$Bb</span> || <span class=\"re0\">$Ba</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$Ab</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw1\">set</span> RC <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"re0\">$Aa</span>,<span class=\"re0\">$Ba</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span>==<span class=\"re0\">$Ba</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"re0\">$AaClosed</span>,<span class=\"re0\">$BaClosed</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span><span class=\"sy0\">&gt;</span><span class=\"re0\">$Ba</span> <span class=\"sy0\">?</span> <span class=\"re0\">$AaClosed</span>\u00a0: <span class=\"re0\">$BaClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"re0\">$Ab</span>,<span class=\"re0\">$Bb</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Ab</span>==<span class=\"re0\">$Bb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"re0\">$AbClosed</span>,<span class=\"re0\">$BbClosed</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> RC <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$Ab</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$Bb</span> <span class=\"sy0\">?</span> <span class=\"re0\">$AbClosed</span>\u00a0: <span class=\"re0\">$BbClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> C <span class=\"re0\">$RC</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>normalize <span class=\"re0\">$C</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> difference <span class=\"br0\">{</span>A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> B <span class=\"br0\">[</span>normalize <span class=\"re0\">$B</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> arange <span class=\"br0\">[</span>normalize <span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isEmpty <span class=\"br0\">[</span>intersection <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$arange</span><span class=\"br0\">]</span> <span class=\"re0\">$B</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> C <span class=\"re0\">$arange</span><br/>\t    <span class=\"kw1\">continue</span><br/>\t<span class=\"br0\">}</span><br/>\tlassign <span class=\"re0\">$arange</span> Aa AaClosed Ab AbClosed<br/>\t<span class=\"kw1\">foreach</span> brange <span class=\"re0\">$B</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$brange</span> Ba BaClosed Bb BbClosed<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Bb</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$Aa</span> || <span class=\"br0\">(</span><span class=\"re0\">$Bb</span>==<span class=\"re0\">$Aa</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$AaClosed</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$BbClosed</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">continue</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Ab</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$Ba</span> || <span class=\"br0\">(</span><span class=\"re0\">$Ab</span>==<span class=\"re0\">$Ba</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$BaClosed</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$AbClosed</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> C <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Aa</span> <span class=\"re0\">$AaClosed</span> <span class=\"re0\">$Ab</span> <span class=\"re0\">$AbClosed</span><span class=\"br0\">]</span><br/>\t\tunset arange<br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span>==<span class=\"re0\">$Bb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> AaClosed <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">continue</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$Ab</span>==<span class=\"re0\">$Ba</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> AbClosed <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">lappend</span> C <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Aa</span> <span class=\"re0\">$AaClosed</span> <span class=\"re0\">$Ab</span> <span class=\"re0\">$AbClosed</span><span class=\"br0\">]</span><br/>\t\tunset arange<br/>\t\t<span class=\"kw1\">continue</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$Ba</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> C <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Aa</span> <span class=\"re0\">$AaClosed</span> <span class=\"re0\">$Ba</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$BaClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Ab</span><span class=\"sy0\">&gt;</span><span class=\"re0\">$Bb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> Aa <span class=\"re0\">$Bb</span><br/>\t\t    <span class=\"kw1\">set</span> AaClosed <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$BbClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    unset arange<br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$Aa</span>==<span class=\"re0\">$Ba</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> C <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Aa</span> <span class=\"re0\">$AaClosed</span> <span class=\"re0\">$Ba</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$BaClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> Aa <span class=\"re0\">$Bb</span><br/>\t\t<span class=\"kw1\">set</span> AaClosed <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$BbClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> Aa <span class=\"re0\">$Bb</span><br/>\t\t<span class=\"kw1\">set</span> AaClosed <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$BbClosed</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist arange<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> C <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Aa</span> <span class=\"re0\">$AaClosed</span> <span class=\"re0\">$Ab</span> <span class=\"re0\">$AbClosed</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>normalize <span class=\"re0\">$C</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> isEmpty A <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span>normalize <span class=\"re0\">$A</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> length A <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> len <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">foreach</span> range <span class=\"br0\">[</span>normalize <span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$range</span> a _ b _<br/>\t<span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$len</span> + <span class=\"br0\">(</span><span class=\"re0\">$b</span>-<span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$len</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">class RealSet{<br/>   fcn init(fx){ var [const] contains=fx; }<br/>   fcn holds(x){ contains(x) }<br/>   fcn __opAdd(rs){ RealSet('wrap(x){ contains(x) or rs.contains(x) }) }<br/>   fcn __opSub(rs){ RealSet('wrap(x){ contains(x) and not rs.contains(x) }) }<br/>   fcn intersection(rs) { RealSet('wrap(x){ contains(x) and rs.contains(x) }) }<br/>}</pre>"}]}