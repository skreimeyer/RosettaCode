{"task": "Zebra_puzzle", "blocks": [{"lang": "Ada", "loc": 106, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Zebra <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Content <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Beer, Coffee, Milk, Tea, Water,<br/>      Danish, English, German, Norwegian, Swedish,<br/>      Blue, Green, Red, White, Yellow,<br/>      Blend, BlueMaster, Dunhill, PallMall, Prince,<br/>      Bird, Cat, Dog, Horse, Zebra<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Test <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Drink, Person, Color, Smoke, Pet<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> House <span class=\"kw1\">is</span> <span class=\"br0\">(</span>One, Two, Three, Four, Five<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Street <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Test'<span class=\"kw3\">Range</span>, House'<span class=\"kw3\">Range</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Content;<br/>   <span class=\"kw3\">type</span> Alley <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">all</span> Street;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print <span class=\"br0\">(</span>mat\u00a0: Alley<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> H <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Put<span class=\"br0\">(</span>H'Img&amp;<span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">for</span> T <span class=\"kw3\">in</span> Test'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            Put<span class=\"br0\">(</span>T'Img&amp;<span class=\"st0\">\"=\"</span>&amp;mat<span class=\"br0\">(</span>T,H<span class=\"br0\">)</span>'Img&amp;<span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; New_Line; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> FinalChecks <span class=\"br0\">(</span>mat\u00a0: Alley<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> Diff <span class=\"br0\">(</span>A, B\u00a0: Content; CA , CB\u00a0: Test<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> H1 <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> <span class=\"kw1\">for</span> H2 <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> mat<span class=\"br0\">(</span>CA,H1<span class=\"br0\">)</span> = A <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>CB,H2<span class=\"br0\">)</span> = B <span class=\"kw1\">then</span><br/>                  <span class=\"kw1\">return</span> House'Pos<span class=\"br0\">(</span>H1<span class=\"br0\">)</span> - House'Pos<span class=\"br0\">(</span>H2<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> Diff;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>Diff<span class=\"br0\">(</span>Norwegian, Blue, Person, Color<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">and</span> Diff<span class=\"br0\">(</span>Green, White, Color, Color<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span><br/>        <span class=\"kw2\">and</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>Diff<span class=\"br0\">(</span>Horse, Dunhill, Pet, Smoke<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">and</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>Diff<span class=\"br0\">(</span>Water, Blend, Drink, Smoke<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">and</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>Diff<span class=\"br0\">(</span>Blend, Cat, Smoke, Pet<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> True;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> False;<br/>   <span class=\"kw1\">end</span> FinalChecks;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Constrained <span class=\"br0\">(</span>mat\u00a0: Alley; atest\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">--  Tests seperated into levels for speed, not strictly necessary</span><br/>      <span class=\"co1\">--  As such, the program finishes in around ~0.02s </span><br/>      <span class=\"kw1\">case</span> Test'Val <span class=\"br0\">(</span>atest<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> Drink =&gt; <span class=\"co1\">--  Drink</span><br/>            <span class=\"kw1\">if</span> mat <span class=\"br0\">(</span>Drink, Three<span class=\"br0\">)</span> /= Milk <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw3\">when</span> Person =&gt; <span class=\"co1\">--  Drink+Person</span><br/>            <span class=\"kw1\">for</span> H <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Person,H<span class=\"br0\">)</span> = Norwegian <span class=\"kw2\">and</span> H /= One<span class=\"br0\">)</span><br/>               <span class=\"kw2\">or</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Person,H<span class=\"br0\">)</span> = Danish <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Drink,H<span class=\"br0\">)</span> /= Tea<span class=\"br0\">)</span><br/>               <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw3\">when</span> Color =&gt; <span class=\"co1\">--  Drink+People+Color</span><br/>            <span class=\"kw1\">for</span> H <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Person,H<span class=\"br0\">)</span> = English <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Color,H<span class=\"br0\">)</span> /= Red<span class=\"br0\">)</span><br/>               <span class=\"kw2\">or</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Drink,H<span class=\"br0\">)</span> = Coffee <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Color,H<span class=\"br0\">)</span> /= Green<span class=\"br0\">)</span><br/>               <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw3\">when</span> Smoke =&gt; <span class=\"co1\">--  Drink+People+Color+Smoke</span><br/>            <span class=\"kw1\">for</span> H <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Color,H<span class=\"br0\">)</span> = Yellow <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Smoke,H<span class=\"br0\">)</span> /= Dunhill<span class=\"br0\">)</span><br/>               <span class=\"kw2\">or</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Smoke,H<span class=\"br0\">)</span> = BlueMaster <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Drink,H<span class=\"br0\">)</span> /= Beer<span class=\"br0\">)</span><br/>               <span class=\"kw2\">or</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Person,H<span class=\"br0\">)</span> = German <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Smoke,H<span class=\"br0\">)</span> /= Prince<span class=\"br0\">)</span><br/>               <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw3\">when</span> Pet =&gt; <span class=\"co1\">--  Drink+People+Color+Smoke+Pet</span><br/>            <span class=\"kw1\">for</span> H <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Person,H<span class=\"br0\">)</span> = Swedish <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Pet,H<span class=\"br0\">)</span> /= Dog<span class=\"br0\">)</span><br/>               <span class=\"kw2\">or</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>Smoke,H<span class=\"br0\">)</span> = PallMall <span class=\"kw2\">and</span> mat<span class=\"br0\">(</span>Pet,H<span class=\"br0\">)</span> /= Bird<span class=\"br0\">)</span><br/>               <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">return</span> FinalChecks<span class=\"br0\">(</span>mat<span class=\"br0\">)</span>; <span class=\"co1\">--  Do the next-to checks</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span> Constrained;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Solve <span class=\"br0\">(</span>mat\u00a0: Alley; t, n\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> Swap <span class=\"br0\">(</span>I, J\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         temp\u00a0: <span class=\"kw3\">constant</span> Content\u00a0:= mat <span class=\"br0\">(</span>Test'Val <span class=\"br0\">(</span>t<span class=\"br0\">)</span>, House'Val <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         mat <span class=\"br0\">(</span>Test'Val <span class=\"br0\">(</span>t<span class=\"br0\">)</span>, House'Val <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= mat <span class=\"br0\">(</span>Test'Val <span class=\"br0\">(</span>t<span class=\"br0\">)</span>, House'Val <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         mat <span class=\"br0\">(</span>Test'Val <span class=\"br0\">(</span>t<span class=\"br0\">)</span>, House'Val <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= temp;<br/>      <span class=\"kw1\">end</span> Swap;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> n = <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> Constrained <span class=\"br0\">(</span>mat, t<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\">--  test t passed</span><br/>         <span class=\"kw1\">if</span> t &lt; <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> Solve <span class=\"br0\">(</span>mat, t + <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>; <span class=\"co1\">--  Onto next test</span><br/>         <span class=\"kw1\">else</span> Print <span class=\"br0\">(</span>mat<span class=\"br0\">)</span>; <span class=\"kw1\">return</span>; <span class=\"co1\">--  Passed and t=4 means a solution</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">n</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span> <span class=\"co1\">--  The permutations part</span><br/>         Solve <span class=\"br0\">(</span>mat, t, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Swap <span class=\"br0\">(</span><span class=\"nu0\">0</span>, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span> Swap <span class=\"br0\">(</span>i, n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Solve;<br/>\u00a0<br/>   myStreet\u00a0: <span class=\"kw3\">aliased</span> Street;<br/>   myAlley\u00a0: <span class=\"kw3\">constant</span> Alley\u00a0:= myStreet'<span class=\"kw3\">Access</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> Test'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> <span class=\"kw1\">for</span> j <span class=\"kw3\">in</span> House'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> <span class=\"co1\">--  Init Matrix</span><br/>      myStreet <span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>\u00a0:= Content'Val<span class=\"br0\">(</span>Test'Pos<span class=\"br0\">(</span>i<span class=\"br0\">)</span>*<span class=\"nu0\">5</span> + House'Pos<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Solve <span class=\"br0\">(</span>myAlley, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>; <span class=\"co1\">--  start at test 0 with 5 options</span><br/><span class=\"kw1\">end</span> Zebra;</pre>"}, {"lang": "ALGOL 68", "loc": 141, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># attempt to solve Einstein's Riddle - the Zebra puzzle                     #</span><br/>    <span class=\"kw3\">INT</span> unknown   <span class=\"sy1\">=</span> 0<span class=\"sy1\">,</span> same    <span class=\"sy1\">=</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> english   <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> swede   <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> dane  <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> norwegian   <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> german <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> dog       <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> birds   <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> cats  <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> horse       <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> zebra  <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> red       <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> green   <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> white <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> yellow      <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> blue   <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> tea       <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> coffee  <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> milk  <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> beer        <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> water  <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> pall mall <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> dunhill <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> blend <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> blue master <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> prince <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> nationality <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unknown\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"english\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"swede\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"dane\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"norwegian\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"german\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> animal      <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unknown\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"dog\"</span><span class=\"sy1\">,</span>       <span class=\"st0\">\"birds\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"cats\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"horse\"</span><span class=\"sy1\">,</span>       <span class=\"st0\">\"ZEBRA\"</span>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> colour      <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unknown\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"red\"</span><span class=\"sy1\">,</span>       <span class=\"st0\">\"green\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"white\"</span><span class=\"sy1\">,</span>  <span class=\"st0\">\"yellow\"</span><span class=\"sy1\">,</span>      <span class=\"st0\">\"blue\"</span>   <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> drink       <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unknown\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"tea\"</span><span class=\"sy1\">,</span>       <span class=\"st0\">\"coffee\"</span><span class=\"sy1\">,</span>  <span class=\"st0\">\"milk\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"beer\"</span><span class=\"sy1\">,</span>        <span class=\"st0\">\"water\"</span>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> smoke       <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unknown\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"pall mall\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"dunhill\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"blend\"</span><span class=\"sy1\">,</span>  <span class=\"st0\">\"blue master\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"prince\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">MODE</span> HOUSE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> nationality<span class=\"sy1\">,</span> animal<span class=\"sy1\">,</span> colour<span class=\"sy1\">,</span> drink<span class=\"sy1\">,</span> smoke <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if a field in a house could be set to value, FALSE otherwise #</span><br/>    <span class=\"kw4\">PROC</span> can set <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> field<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> value <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> field <span class=\"sy1\">=</span> unknown <span class=\"kw16\">OR</span> value <span class=\"sy1\">=</span> same<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if the fields of house h could be set to those of            #</span><br/>    <span class=\"coMULTI\">#              suggestion s, FALSE otherwise                                #</span><br/>    <span class=\"kw4\">OP</span>   XOR     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HOUSE h<span class=\"sy1\">,</span> HOUSE s <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>         <span class=\"br0\">(</span>   can set<span class=\"br0\">(</span> nationality <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> nationality <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span> <span class=\"kw16\">AND</span> can set<span class=\"br0\">(</span> animal <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> animal <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"kw16\">AND</span> can set<span class=\"br0\">(</span> colour      <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> colour      <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span> <span class=\"kw16\">AND</span> can set<span class=\"br0\">(</span> drink  <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> drink  <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"kw16\">AND</span> can set<span class=\"br0\">(</span> smoke       <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> smoke       <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span> <span class=\"coMULTI\"># XOR #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sets a field in a house to value if it is unknown                         #</span><br/>    <span class=\"kw4\">PROC</span> set     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> field<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> value <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> field <span class=\"sy1\">=</span> unknown <span class=\"kw16\">AND</span> value <span class=\"sy1\">/=</span> same <span class=\"kw2\">THEN</span> field <span class=\"sy1\">:=</span> value <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sets the unknown fields in house h to the non-same fields of suggestion s #</span><br/>    <span class=\"kw4\">OP</span>   <span class=\"sy1\">+:=</span>     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> HOUSE h<span class=\"sy1\">,</span> HOUSE s <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"br0\">(</span> set<span class=\"br0\">(</span> nationality <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> nationality <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><span class=\"sy1\">;</span> set<span class=\"br0\">(</span> animal <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> animal <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"sy1\">;</span> set<span class=\"br0\">(</span> colour      <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> colour      <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><span class=\"sy1\">;</span> set<span class=\"br0\">(</span> drink  <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> drink  <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"sy1\">;</span> set<span class=\"br0\">(</span> smoke       <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> smoke       <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span> <span class=\"coMULTI\"># +:= #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sets a field in a house to unknown if the value is not same               #</span><br/>    <span class=\"kw4\">PROC</span> reset   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> field<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> value <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> value <span class=\"sy1\">/=</span> same <span class=\"kw2\">THEN</span> field <span class=\"sy1\">:=</span> unknown <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sets fields in house h to unknown if the suggestion s is not same         #</span><br/>    <span class=\"kw4\">OP</span>   <span class=\"sy1\">-:=</span>     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> HOUSE h<span class=\"sy1\">,</span> HOUSE s <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"br0\">(</span> reset<span class=\"br0\">(</span> nationality <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> nationality <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><span class=\"sy1\">;</span> reset<span class=\"br0\">(</span> animal <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> animal <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"sy1\">;</span> reset<span class=\"br0\">(</span> colour      <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> colour      <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><span class=\"sy1\">;</span> reset<span class=\"br0\">(</span> drink  <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> drink  <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"sy1\">;</span> reset<span class=\"br0\">(</span> smoke       <span class=\"kw6\">OF</span> h<span class=\"sy1\">,</span> smoke       <span class=\"kw6\">OF</span> s <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span> <span class=\"coMULTI\"># -:= #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># attempts a partial solution for the house at pos                          #</span><br/>    <span class=\"kw4\">PROC</span> try <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> pos<span class=\"sy1\">,</span> HOUSE suggestion<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> continue <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">IF</span> pos <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> house <span class=\"kw16\">AND</span> pos <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> house <span class=\"kw2\">THEN</span><br/>             <span class=\"kw2\">IF</span> house<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> XOR suggestion <span class=\"kw2\">THEN</span><br/>                house<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> suggestion<span class=\"sy1\">;</span> continue<span class=\"sy1\">;</span> house<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">-:=</span> suggestion<br/>             <span class=\"kw2\">FI</span><br/>         <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># try #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># attempts a partial solution for the neighbours of a house                 #</span><br/>    <span class=\"kw4\">PROC</span> left or right <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> pos<span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> left<span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> right<span class=\"sy1\">,</span> HOUSE neighbour suggestion<br/>                         <span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> continue <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"br0\">(</span> <span class=\"kw2\">IF</span> left  <span class=\"kw2\">THEN</span> try<span class=\"br0\">(</span> pos <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> neighbour suggestion<span class=\"sy1\">,</span> continue <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>         <span class=\"sy1\">;</span> <span class=\"kw2\">IF</span> right <span class=\"kw2\">THEN</span> try<span class=\"br0\">(</span> pos <span class=\"sy1\">+</span> 1<span class=\"sy1\">,</span> neighbour suggestion<span class=\"sy1\">,</span> continue <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>         <span class=\"br0\">)</span> <span class=\"coMULTI\"># left or right #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># attempts a partial solution for all houses and possibly their neighbours  #</span><br/>    <span class=\"kw4\">PROC</span> any2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> number<span class=\"sy1\">,</span> HOUSE suggestion<br/>                <span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> left<span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> right<span class=\"sy1\">,</span> HOUSE neighbour suggestion<br/>                <span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> continue <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> house <span class=\"kw2\">DO</span><br/>             <span class=\"kw2\">IF</span> house<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> XOR suggestion <span class=\"kw2\">THEN</span><br/>                 number    <span class=\"sy1\">:=</span> pos<span class=\"sy1\">;</span><br/>                 house<span class=\"br0\">[</span> number <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> suggestion<span class=\"sy1\">;</span><br/>                 <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> left <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> right <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># neighbours not involved       #</span><br/>                     continue<br/>                 <span class=\"kw2\">ELSE</span>                           <span class=\"coMULTI\"># try one or both neighbours    #</span><br/>                     left or right<span class=\"br0\">(</span> pos<span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> neighbour suggestion<span class=\"sy1\">,</span> continue <span class=\"br0\">)</span><br/>                 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                 house<span class=\"br0\">[</span> number <span class=\"br0\">]</span> <span class=\"sy1\">-:=</span> suggestion<br/>             <span class=\"kw2\">FI</span><br/>         <span class=\"kw2\">OD</span> <span class=\"coMULTI\"># any2 #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># attempts a partial solution for all houses                                #</span><br/>    <span class=\"kw4\">PROC</span> any <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HOUSE suggestion<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> continue <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         any2<span class=\"br0\">(</span> <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span> suggestion<span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">SKIP</span><span class=\"sy1\">,</span> continue <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># find solution(s)                                                          #</span><br/>    <span class=\"kw3\">INT</span> blend pos<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> solutions <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># There are five houses.                                                    #</span><br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 5 <span class=\"br0\">]</span>HOUSE house<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> h <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> house <span class=\"kw2\">DO</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> unknown<span class=\"sy1\">,</span> unknown<span class=\"sy1\">,</span> unknown<span class=\"sy1\">,</span> unknown<span class=\"sy1\">,</span> unknown <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># In the middle house they drink milk.                                      #</span><br/>    drink       <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> 3 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> milk<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># The Norwegian lives in the first house.                                   #</span><br/>    nationality <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> norwegian<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># The Norwegian lives next to the blue house.                               #</span><br/>    colour      <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> 2 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> blue<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># They drink coffee in the green house.                                     #</span><br/>    <span class=\"coMULTI\"># The green house is immediately to the left of the white house.            #</span><br/>    any2<span class=\"br0\">(</span> <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span>     <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> green<span class=\"sy1\">,</span> coffee<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span>  <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> white<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span>   same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>      <span class=\"coMULTI\"># In a house next to the house where they have a horse,                   #</span><br/>      <span class=\"coMULTI\"># they smoke Dunhill.                                                     #</span><br/>      <span class=\"coMULTI\"># In the yellow house they smoke Dunhill.                                 #</span><br/>      any2<span class=\"br0\">(</span> <span class=\"kw4\">LOC</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span>    <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> horse<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span>   same<span class=\"sy1\">,</span> same    <span class=\"br0\">)</span><br/>          <span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span>  yellow<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> dunhill <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        <span class=\"coMULTI\"># The English man lives in the red house.                               #</span><br/>        any<span class=\"br0\">(</span> <span class=\"br0\">(</span> english<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> red<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>          <span class=\"coMULTI\"># The man who smokes Blend lives in the house next to the             #</span><br/>          <span class=\"coMULTI\"># house with cats.                                                    #</span><br/>          any2<span class=\"br0\">(</span> blend pos<span class=\"sy1\">,</span>  <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> blend <span class=\"br0\">)</span><br/>              <span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> cats<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same  <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>            <span class=\"coMULTI\"># They drink water in a house next to the house where               #</span><br/>            <span class=\"coMULTI\"># they smoke Blend.                                                 #</span><br/>            left or right<span class=\"br0\">(</span> blend pos<span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> water<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>              <span class=\"coMULTI\"># The Dane drinks tea.                                            #</span><br/>              any<span class=\"br0\">(</span> <span class=\"br0\">(</span> dane<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> tea<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                <span class=\"coMULTI\"># The man who smokes Blue Master drinks beer.                   #</span><br/>                any<span class=\"br0\">(</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> beer<span class=\"sy1\">,</span> blue master <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                  <span class=\"coMULTI\"># The Swede has a dog.                                        #</span><br/>                  any<span class=\"br0\">(</span> <span class=\"br0\">(</span> swede<span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                    <span class=\"coMULTI\"># The German smokes Prince.                                 #</span><br/>                    any<span class=\"br0\">(</span> <span class=\"br0\">(</span> german<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> prince <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                      <span class=\"coMULTI\"># The man who smokes Pall Mall has birds.                 #</span><br/>                      any<span class=\"br0\">(</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> birds<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> pall mall <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                        <span class=\"coMULTI\"># if we can place the zebra, we have a solution         #</span><br/>                        any<span class=\"br0\">(</span> <span class=\"br0\">(</span> same<span class=\"sy1\">,</span> zebra<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same<span class=\"sy1\">,</span> same <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>                             <span class=\"br0\">(</span> solutions <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span>                                             <br/>                               <span class=\"kw2\">FOR</span> h <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> house <span class=\"kw2\">DO</span><br/>                                 <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> h<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>  nationality<span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> nationality <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> animal     <span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> animal      <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> colour     <span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> colour      <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> drink      <span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> drink       <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> smoke      <span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> smoke       <span class=\"kw6\">OF</span> house<span class=\"br0\">[</span> h <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                                        <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>                                        <span class=\"br0\">)</span><br/>                                      <span class=\"br0\">)</span><br/>                               <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                               <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                             <span class=\"br0\">)</span><br/>                           <span class=\"br0\">)</span> <span class=\"coMULTI\"># zebra     #</span><br/>                         <span class=\"br0\">)</span> <span class=\"coMULTI\"># pall mall  #</span><br/>                       <span class=\"br0\">)</span> <span class=\"coMULTI\"># german      #</span><br/>                     <span class=\"br0\">)</span> <span class=\"coMULTI\"># swede        #</span><br/>                   <span class=\"br0\">)</span> <span class=\"coMULTI\"># beer          #</span><br/>                 <span class=\"br0\">)</span> <span class=\"coMULTI\"># dane           #</span><br/>               <span class=\"br0\">)</span> <span class=\"coMULTI\"># blend L/R       #</span><br/>             <span class=\"br0\">)</span> <span class=\"coMULTI\"># blend            #</span><br/>           <span class=\"br0\">)</span> <span class=\"coMULTI\"># red               #</span><br/>         <span class=\"br0\">)</span> <span class=\"coMULTI\"># horse              #</span><br/>       <span class=\"br0\">)</span> <span class=\"coMULTI\"># green               #</span> <span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"solutions: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> solutions<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 101, "block": "<pre class=\"text highlighted_source\">      REM The names (only used for printing the results):<br/>      DIM Drink$(4), Nation$(4), Colr$(4), Smoke$(4), Animal$(4)<br/>      Drink$()  = \"Beer\", \"Coffee\", \"Milk\", \"Tea\", \"Water\"<br/>      Nation$() = \"Denmark\", \"England\", \"Germany\", \"Norway\", \"Sweden\"<br/>      Colr$()   = \"Blue\", \"Green\", \"Red\", \"White\", \"Yellow\"<br/>      Smoke$()  = \"Blend\", \"BlueMaster\", \"Dunhill\", \"PallMall\", \"Prince\"<br/>      Animal$() = \"Birds\", \"Cats\", \"Dog\", \"Horse\", \"Zebra\"<br/>\u00a0<br/>      REM Some single-character tags:<br/>      a$ = \"A\"\u00a0: b$ = \"B\"\u00a0: c$ = \"C\"\u00a0: d$ = \"D\"\u00a0: e$ = \"E\"<br/>\u00a0<br/>      REM BBC BASIC Doesn't have enumerations!<br/>      Beer$=a$   \u00a0: Coffee$=b$    \u00a0: Milk$=c$   \u00a0: Tea$=d$     \u00a0: Water$=e$<br/>      Denmark$=a$\u00a0: England$=b$   \u00a0: Germany$=c$\u00a0: Norway$=d$  \u00a0: Sweden$=e$<br/>      Blue$=a$   \u00a0: Green$=b$     \u00a0: Red$=c$    \u00a0: White$=d$   \u00a0: Yellow$=e$<br/>      Blend$=a$  \u00a0: BlueMaster$=b$\u00a0: Dunhill$=c$\u00a0: PallMall$=d$\u00a0: Prince$=e$<br/>      Birds$=a$  \u00a0: Cats$=b$      \u00a0: Dog$=c$    \u00a0: Horse$=d$   \u00a0: Zebra$=e$<br/>\u00a0<br/>      REM Create the 120 permutations of 5 objects:<br/>      DIM perm$(120), x$(4)\u00a0: x$() = a$, b$, c$, d$, e$<br/>      REPEAT<br/>        p% += 1<br/>        perm$(p%) = x$(0)+x$(1)+x$(2)+x$(3)+x$(4)<br/>      UNTIL NOT FNperm(x$())<br/>\u00a0<br/>      REM Express the statements as conditional expressions:<br/>      ex2$ = \"INSTR(Nation$,England$) = INSTR(Colr$,Red$)\"<br/>      ex3$ = \"INSTR(Nation$,Sweden$) = INSTR(Animal$,Dog$)\"<br/>      ex4$ = \"INSTR(Nation$,Denmark$) = INSTR(Drink$,Tea$)\"<br/>      ex5$ = \"INSTR(Colr$,Green$+White$) &lt;&gt; 0\"<br/>      ex6$ = \"INSTR(Drink$,Coffee$) = INSTR(Colr$,Green$)\"<br/>      ex7$ = \"INSTR(Smoke$,PallMall$) = INSTR(Animal$,Birds$)\"<br/>      ex8$ = \"INSTR(Smoke$,Dunhill$) = INSTR(Colr$,Yellow$)\"<br/>      ex9$ = \"MID$(Drink$,3,1) = Milk$\"<br/>      ex10$ = \"LEFT$(Nation$,1) = Norway$\"<br/>      ex11$ = \"ABS(INSTR(Smoke$,Blend$)-INSTR(Animal$,Cats$)) = 1\"<br/>      ex12$ = \"ABS(INSTR(Smoke$,Dunhill$)-INSTR(Animal$,Horse$)) = 1\"<br/>      ex13$ = \"INSTR(Smoke$,BlueMaster$) = INSTR(Drink$,Beer$)\"<br/>      ex14$ = \"INSTR(Nation$,Germany$) = INSTR(Smoke$,Prince$)\"<br/>      ex15$ = \"ABS(INSTR(Nation$,Norway$)-INSTR(Colr$,Blue$)) = 1\"<br/>      ex16$ = \"ABS(INSTR(Smoke$,Blend$)-INSTR(Drink$,Water$)) = 1\"<br/>\u00a0<br/>      REM Solve:<br/>      solutions% = 0<br/>      TIME = 0<br/>      FOR nation% = 1 TO 120<br/>        Nation$ = perm$(nation%)<br/>        IF EVAL(ex10$) THEN<br/>          FOR colr% = 1 TO 120<br/>            Colr$ = perm$(colr%)<br/>            IF EVAL(ex5$) IF EVAL(ex2$) IF EVAL(ex15$) THEN<br/>              FOR drink% = 1 TO 120<br/>                Drink$ = perm$(drink%)<br/>                IF EVAL(ex9$) IF EVAL(ex4$) IF EVAL(ex6$) THEN<br/>                  FOR smoke% = 1 TO 120<br/>                    Smoke$ = perm$(smoke%)<br/>                    IF EVAL(ex14$) IF EVAL(ex13$) IF EVAL(ex16$) IF EVAL(ex8$) THEN<br/>                      FOR animal% = 1 TO 120<br/>                        Animal$ = perm$(animal%)<br/>                        IF EVAL(ex3$) IF EVAL(ex7$) IF EVAL(ex11$) IF EVAL(ex12$) THEN<br/>                          PRINT \"House     Drink     Nation    Colour    Smoke     Animal\"<br/>                          FOR house% = 1 TO 5<br/>                            PRINT\u00a0; house% ,;<br/>                            PRINT Drink$(ASCMID$(Drink$,house%)-65),;<br/>                            PRINT Nation$(ASCMID$(Nation$,house%)-65),;<br/>                            PRINT Colr$(ASCMID$(Colr$,house%)-65),;<br/>                            PRINT Smoke$(ASCMID$(Smoke$,house%)-65),;<br/>                            PRINT Animal$(ASCMID$(Animal$,house%)-65)<br/>                          NEXT<br/>                          solutions% += 1<br/>                        ENDIF<br/>                      NEXT animal%<br/>                    ENDIF<br/>                  NEXT smoke%<br/>                ENDIF<br/>              NEXT drink%<br/>            ENDIF<br/>          NEXT colr%<br/>        ENDIF<br/>      NEXT nation%<br/>      PRINT '\"Number of solutions = \"; solutions%<br/>      PRINT \"Solved in \"\u00a0; TIME/100 \" seconds\"<br/>      END<br/>\u00a0<br/>      DEF FNperm(x$())<br/>      LOCAL i%, j%<br/>      FOR i% = DIM(x$(),1)-1 TO 0 STEP -1<br/>        IF x$(i%) &lt; x$(i%+1) EXIT FOR<br/>      NEXT<br/>      IF i% &lt; 0 THEN = FALSE<br/>      j% = DIM(x$(),1)<br/>      WHILE x$(j%) &lt;= x$(i%) j% -= 1\u00a0: ENDWHILE<br/>      SWAP x$(i%), x$(j%)<br/>      i% += 1<br/>      j% = DIM(x$(),1)<br/>      WHILE i% &lt; j%<br/>        SWAP x$(i%), x$(j%)<br/>        i% += 1<br/>        j% -= 1<br/>      ENDWHILE<br/>      = TRUE</pre>"}, {"lang": "BBC BASIC", "loc": 101, "block": "<pre class=\"text highlighted_source\">      REM The names (only used for printing the results):<br/>      DIM Drink$(4), Nation$(4), Colr$(4), Smoke$(4), Animal$(4)<br/>      Drink$()  = \"Beer\", \"Coffee\", \"Milk\", \"Tea\", \"Water\"<br/>      Nation$() = \"Denmark\", \"England\", \"Germany\", \"Norway\", \"Sweden\"<br/>      Colr$()   = \"Blue\", \"Green\", \"Red\", \"White\", \"Yellow\"<br/>      Smoke$()  = \"Blend\", \"BlueMaster\", \"Dunhill\", \"PallMall\", \"Prince\"<br/>      Animal$() = \"Birds\", \"Cats\", \"Dog\", \"Horse\", \"Zebra\"<br/>\u00a0<br/>      REM Some single-character tags:<br/>      a$ = \"A\"\u00a0: b$ = \"B\"\u00a0: c$ = \"C\"\u00a0: d$ = \"D\"\u00a0: e$ = \"E\"<br/>\u00a0<br/>      REM BBC BASIC Doesn't have enumerations!<br/>      Beer$=a$   \u00a0: Coffee$=b$    \u00a0: Milk$=c$   \u00a0: Tea$=d$     \u00a0: Water$=e$<br/>      Denmark$=a$\u00a0: England$=b$   \u00a0: Germany$=c$\u00a0: Norway$=d$  \u00a0: Sweden$=e$<br/>      Blue$=a$   \u00a0: Green$=b$     \u00a0: Red$=c$    \u00a0: White$=d$   \u00a0: Yellow$=e$<br/>      Blend$=a$  \u00a0: BlueMaster$=b$\u00a0: Dunhill$=c$\u00a0: PallMall$=d$\u00a0: Prince$=e$<br/>      Birds$=a$  \u00a0: Cats$=b$      \u00a0: Dog$=c$    \u00a0: Horse$=d$   \u00a0: Zebra$=e$<br/>\u00a0<br/>      REM Create the 120 permutations of 5 objects:<br/>      DIM perm$(120), x$(4)\u00a0: x$() = a$, b$, c$, d$, e$<br/>      REPEAT<br/>        p% += 1<br/>        perm$(p%) = x$(0)+x$(1)+x$(2)+x$(3)+x$(4)<br/>      UNTIL NOT FNperm(x$())<br/>\u00a0<br/>      REM Express the statements as conditional expressions:<br/>      ex2$ = \"INSTR(Nation$,England$) = INSTR(Colr$,Red$)\"<br/>      ex3$ = \"INSTR(Nation$,Sweden$) = INSTR(Animal$,Dog$)\"<br/>      ex4$ = \"INSTR(Nation$,Denmark$) = INSTR(Drink$,Tea$)\"<br/>      ex5$ = \"INSTR(Colr$,Green$+White$) &lt;&gt; 0\"<br/>      ex6$ = \"INSTR(Drink$,Coffee$) = INSTR(Colr$,Green$)\"<br/>      ex7$ = \"INSTR(Smoke$,PallMall$) = INSTR(Animal$,Birds$)\"<br/>      ex8$ = \"INSTR(Smoke$,Dunhill$) = INSTR(Colr$,Yellow$)\"<br/>      ex9$ = \"MID$(Drink$,3,1) = Milk$\"<br/>      ex10$ = \"LEFT$(Nation$,1) = Norway$\"<br/>      ex11$ = \"ABS(INSTR(Smoke$,Blend$)-INSTR(Animal$,Cats$)) = 1\"<br/>      ex12$ = \"ABS(INSTR(Smoke$,Dunhill$)-INSTR(Animal$,Horse$)) = 1\"<br/>      ex13$ = \"INSTR(Smoke$,BlueMaster$) = INSTR(Drink$,Beer$)\"<br/>      ex14$ = \"INSTR(Nation$,Germany$) = INSTR(Smoke$,Prince$)\"<br/>      ex15$ = \"ABS(INSTR(Nation$,Norway$)-INSTR(Colr$,Blue$)) = 1\"<br/>      ex16$ = \"ABS(INSTR(Smoke$,Blend$)-INSTR(Drink$,Water$)) = 1\"<br/>\u00a0<br/>      REM Solve:<br/>      solutions% = 0<br/>      TIME = 0<br/>      FOR nation% = 1 TO 120<br/>        Nation$ = perm$(nation%)<br/>        IF EVAL(ex10$) THEN<br/>          FOR colr% = 1 TO 120<br/>            Colr$ = perm$(colr%)<br/>            IF EVAL(ex5$) IF EVAL(ex2$) IF EVAL(ex15$) THEN<br/>              FOR drink% = 1 TO 120<br/>                Drink$ = perm$(drink%)<br/>                IF EVAL(ex9$) IF EVAL(ex4$) IF EVAL(ex6$) THEN<br/>                  FOR smoke% = 1 TO 120<br/>                    Smoke$ = perm$(smoke%)<br/>                    IF EVAL(ex14$) IF EVAL(ex13$) IF EVAL(ex16$) IF EVAL(ex8$) THEN<br/>                      FOR animal% = 1 TO 120<br/>                        Animal$ = perm$(animal%)<br/>                        IF EVAL(ex3$) IF EVAL(ex7$) IF EVAL(ex11$) IF EVAL(ex12$) THEN<br/>                          PRINT \"House     Drink     Nation    Colour    Smoke     Animal\"<br/>                          FOR house% = 1 TO 5<br/>                            PRINT\u00a0; house% ,;<br/>                            PRINT Drink$(ASCMID$(Drink$,house%)-65),;<br/>                            PRINT Nation$(ASCMID$(Nation$,house%)-65),;<br/>                            PRINT Colr$(ASCMID$(Colr$,house%)-65),;<br/>                            PRINT Smoke$(ASCMID$(Smoke$,house%)-65),;<br/>                            PRINT Animal$(ASCMID$(Animal$,house%)-65)<br/>                          NEXT<br/>                          solutions% += 1<br/>                        ENDIF<br/>                      NEXT animal%<br/>                    ENDIF<br/>                  NEXT smoke%<br/>                ENDIF<br/>              NEXT drink%<br/>            ENDIF<br/>          NEXT colr%<br/>        ENDIF<br/>      NEXT nation%<br/>      PRINT '\"Number of solutions = \"; solutions%<br/>      PRINT \"Solved in \"\u00a0; TIME/100 \" seconds\"<br/>      END<br/>\u00a0<br/>      DEF FNperm(x$())<br/>      LOCAL i%, j%<br/>      FOR i% = DIM(x$(),1)-1 TO 0 STEP -1<br/>        IF x$(i%) &lt; x$(i%+1) EXIT FOR<br/>      NEXT<br/>      IF i% &lt; 0 THEN = FALSE<br/>      j% = DIM(x$(),1)<br/>      WHILE x$(j%) &lt;= x$(i%) j% -= 1\u00a0: ENDWHILE<br/>      SWAP x$(i%), x$(j%)<br/>      i% += 1<br/>      j% = DIM(x$(),1)<br/>      WHILE i% &lt; j%<br/>        SWAP x$(i%), x$(j%)<br/>        i% += 1<br/>        j% -= 1<br/>      ENDWHILE<br/>      = TRUE</pre>"}, {"lang": "Bracmat", "loc": 83, "block": "<pre class=\"text highlighted_source\">(     (English Swede Dane Norwegian German,)<br/>      (red green white yellow blue,(red.English.))<br/>      (dog birds cats horse zebra,(dog.?.Swede.))<br/>      ( tea coffee milk beer water<br/>      , (tea.?.?.Dane.) (coffee.?.green.?.)<br/>      )<br/>      ( \"Pall Mall\" Dunhill Blend \"Blue Master\" Prince<br/>      ,   (\"Blue Master\".beer.?.?.?.)<br/>          (\"Pall Mall\".?.birds.?.?.)<br/>          (Dunhill.?.?.yellow.?.)<br/>          (Prince.?.?.?.German.)<br/>      )<br/>      ( 1 2 3 4 5<br/>      , (3.?.milk.?.?.?.) (1.?.?.?.?.Norwegian.)<br/>      )<br/> \u00a0:\u00a0?properties<br/>&amp; ( relations<br/>  =   next leftOf<br/>    .   ( next<br/>        =   a b A B<br/>          .  \u00a0!arg:(?S,?A,?B)<br/>            &amp;\u00a0!S:? (?a.!A)\u00a0?:? (?b.!B)\u00a0?<br/>            &amp; (!a+1:!b|!b+1:!a)<br/>        )<br/>      &amp; ( leftOf<br/>        =   a b A B<br/>          .  \u00a0!arg:(?S,?A,?B)<br/>            &amp;\u00a0!S:? (?a.!A)\u00a0?:? (?b.!B)\u00a0?<br/>            &amp;\u00a0!a+1:!b<br/>        )<br/>      &amp;   leftOf<br/>        $ (!arg,(?.?.?.green.?.),(?.?.?.white.?.))<br/>      &amp; next$(!arg,(Blend.?.?.?.?.),(?.?.cats.?.?.))<br/>      &amp;   next<br/>        $ (!arg,(?.?.horse.?.?.),(Dunhill.?.?.?.?.))<br/>      &amp;   next<br/>        $ (!arg,(?.?.?.?.Norwegian.),(?.?.?.blue.?.))<br/>      &amp; next$(!arg,(?.water.?.?.?.),(Blend.?.?.?.?.))<br/>  )<br/>&amp; ( props<br/>  =     a constraint constraints house houses<br/>      , remainingToDo shavedToDo toDo value values z<br/>    .  \u00a0!arg:(?toDo.?shavedToDo.?house.?houses)<br/>      &amp; (  \u00a0!toDo:(?values,?constraints)\u00a0?remainingToDo<br/>          &amp;  \u00a0!values<br/>           \u00a0: (  \u00a0?a<br/>                  (\u00a0%@?value<br/>                  &amp;  \u00a0!constraints<br/>                   \u00a0: (  \u00a0?<br/>                          (\u00a0!value<br/>                          .  \u00a0?constraint<br/>                            &amp;\u00a0!house:!constraint<br/>                          )<br/>                         \u00a0?<br/>                      | ~(  \u00a0?<br/>                             (\u00a0?<br/>                             .  \u00a0?constraint<br/>                               &amp;\u00a0!house:!constraint<br/>                             )<br/>                            \u00a0?<br/>                         |\u00a0? (!value.?)\u00a0?<br/>                         )<br/>                      )<br/>                  )<br/>                  (\u00a0?z<br/>                  &amp;   props<br/>                    $ (\u00a0!remainingToDo<br/>                      .\u00a0!shavedToDo (!a\u00a0!z,!constraints)<br/>                      . (!value.!house)<br/>                      .\u00a0!houses<br/>                      )<br/>                  )<br/>              |   <br/>                &amp; relations$!houses<br/>                &amp; out$(Solution\u00a0!houses)<br/>              )<br/>        |  \u00a0!toDo:<br/>          &amp; props$(!shavedToDo...!house\u00a0!houses)<br/>        )<br/>  )<br/>&amp; props$(!properties...)<br/>&amp; done<br/>);</pre>"}, {"lang": "C", "loc": 238, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> HouseStatus <span class=\"br0\">{</span> Invalid<span class=\"sy0\">,</span> Underfull<span class=\"sy0\">,</span> Valid <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> Attrib <span class=\"br0\">{</span> C<span class=\"sy0\">,</span> M<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> S <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Unfilled attributes are represented by -1</span><br/><span class=\"kw2\">enum</span> Colors <span class=\"br0\">{</span> Red<span class=\"sy0\">,</span> Green<span class=\"sy0\">,</span> White<span class=\"sy0\">,</span> Yellow<span class=\"sy0\">,</span> Blue <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">enum</span> Mans <span class=\"br0\">{</span> English<span class=\"sy0\">,</span> Swede<span class=\"sy0\">,</span> Dane<span class=\"sy0\">,</span> German<span class=\"sy0\">,</span> Norwegian <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">enum</span> Drinks <span class=\"br0\">{</span> Tea<span class=\"sy0\">,</span> Coffee<span class=\"sy0\">,</span> Milk<span class=\"sy0\">,</span> Beer<span class=\"sy0\">,</span> Water <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">enum</span> Animals <span class=\"br0\">{</span> Dog<span class=\"sy0\">,</span> Birds<span class=\"sy0\">,</span> Cats<span class=\"sy0\">,</span> Horse<span class=\"sy0\">,</span> Zebra <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">enum</span> Smokes <span class=\"br0\">{</span> PallMall<span class=\"sy0\">,</span> Dunhill<span class=\"sy0\">,</span> Blend<span class=\"sy0\">,</span> BlueMaster<span class=\"sy0\">,</span> Prince <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> printHouses<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>color<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>  <span class=\"br0\">{</span> <span class=\"st0\">\"Red\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Green\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"White\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Yellow\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Blue\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>man<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>    <span class=\"br0\">{</span> <span class=\"st0\">\"English\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Swede\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Dane\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"German\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Norwegian\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>drink<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>  <span class=\"br0\">{</span> <span class=\"st0\">\"Tea\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Coffee\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Milk\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Beer\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Water\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>animal<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Dog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Birds\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Cats\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Horse\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zebra\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>smoke<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>  <span class=\"br0\">{</span> <span class=\"st0\">\"PallMall\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Dunhill\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Blend\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BlueMaster\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Prince\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>           <span class=\"st0\">\"House\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Color\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Man\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Drink\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Animal\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Smoke\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10d\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> color<span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> man<span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> drink<span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> animal<span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10.10s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> smoke<span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> checkHouses<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> c_add <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> c_or <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> m_add <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> m_or <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> d_add <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d_or <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> a_add <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a_or <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> s_add <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> s_or <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Cond 9: In the middle house they drink milk.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Milk<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Cond 10: The Norwegian lives in the first house.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Norwegian<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Uniqueness tests.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c_add <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c_or <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            m_add <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            m_or <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            d_add <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            d_or <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            a_add <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            a_or <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s_add <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            s_or <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 2: The English man lives in the red house.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">==</span> English <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Red<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// Checking both</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> English <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// to make things quicker.</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 3: The Swede has a dog.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Swede <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Dog<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Swede <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Dog<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 4: The Dane drinks tea.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Dane <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Tea<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Dane <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Tea<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 5: The green house is immediately to the left of the white house.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"coMULTI\">/*&amp;&amp; ha[i-1][C] &gt;= 0 */</span> <span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Green <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> White<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Green <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">==</span> White<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 6: drink coffee in the green house.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Green <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Coffee<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Green <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Coffee<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 7: The man who smokes Pall Mall has birds.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> PallMall <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Birds<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> PallMall <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Birds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 8: In the yellow house they smoke Dunhill.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Dunhill <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Yellow<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Dunhill <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Yellow<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 11: The man who smokes Blend lives in the house next to the house with cats.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Blend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Cats<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Cats<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Cats <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Cats<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 12: In a house next to the house where they have a horse, they smoke Dunhill.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Dunhill<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Horse<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Horse<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Horse <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Horse<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 13: The man who smokes Blue Master drinks beer.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> BlueMaster <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Beer<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> BlueMaster <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Beer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 14: The German smokes Prince</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">==</span> German <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Prince<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> German <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Prince<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 15: The Norwegian lives next to the blue house.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Norwegian <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Blue<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Blue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Cond 16: They drink water in a house next to the house where they smoke Blend.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>S<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Blend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Water<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Water<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Water <span class=\"sy0\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Water<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c_add <span class=\"sy0\">!=</span> c_or<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>m_add <span class=\"sy0\">!=</span> m_or<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>d_add <span class=\"sy0\">!=</span> d_or<span class=\"br0\">)</span><br/>        <span class=\"sy0\">||</span> <span class=\"br0\">(</span>a_add <span class=\"sy0\">!=</span> a_or<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>s_add <span class=\"sy0\">!=</span> s_or<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c_add <span class=\"sy0\">!=</span> <span class=\"nu6\">0b11111</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>m_add <span class=\"sy0\">!=</span> <span class=\"nu6\">0b11111</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>d_add <span class=\"sy0\">!=</span> <span class=\"nu6\">0b11111</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">||</span> <span class=\"br0\">(</span>a_add <span class=\"sy0\">!=</span> <span class=\"nu6\">0b11111</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>s_add <span class=\"sy0\">!=</span> <span class=\"nu6\">0b11111</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Underfull<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> Valid<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> bruteFill<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> hno<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> attr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> stat <span class=\"sy0\">=</span> checkHouses<span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>stat <span class=\"sy0\">==</span> Valid<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>stat <span class=\"sy0\">==</span> Invalid<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> stat<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> hb<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>hb<span class=\"sy0\">,</span> ha<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hb<span class=\"br0\">[</span>hno<span class=\"br0\">]</span><span class=\"br0\">[</span>attr<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        stat <span class=\"sy0\">=</span> checkHouses<span class=\"br0\">(</span>hb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stat <span class=\"sy0\">!=</span> Invalid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> nexthno<span class=\"sy0\">,</span> nextattr<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>attr <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nextattr <span class=\"sy0\">=</span> attr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                nexthno <span class=\"sy0\">=</span> hno<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                nextattr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                nexthno <span class=\"sy0\">=</span> hno <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            stat <span class=\"sy0\">=</span> bruteFill<span class=\"br0\">(</span>hb<span class=\"sy0\">,</span> nexthno<span class=\"sy0\">,</span> nextattr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stat <span class=\"sy0\">!=</span> Invalid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>ha<span class=\"sy0\">,</span> hb<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> stat<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// We only come here if none of the attr values assigned were valid.</span><br/>    <span class=\"kw1\">return</span> Invalid<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    bruteFill<span class=\"br0\">(</span>ha<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    printHouses<span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 149, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define defenum(name, val0, val1, val2, val3, val4) \\<br/>    enum name { val0, val1, val2, val3, val4 }; \\<br/>    const char *name ## _str[] = { # val0, # val1, # val2, # val3, # val4 }</span><br/>\u00a0<br/>defenum<span class=\"br0\">(</span> Attrib,    Color, Man, Drink, Animal, Smoke <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>defenum<span class=\"br0\">(</span> Colors,    Red, Green, White, Yellow, Blue <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>defenum<span class=\"br0\">(</span> Mans,      English, Swede, Dane, German, Norwegian <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>defenum<span class=\"br0\">(</span> Drinks,    Tea, Coffee, Milk, Beer, Water <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>defenum<span class=\"br0\">(</span> Animals,   Dog, Birds, Cats, Horse, Zebra <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>defenum<span class=\"br0\">(</span> Smokes,    PallMall, Dunhill, Blend, BlueMaster, Prince <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printHouses<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>attr_names<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span>Colors_str, Mans_str, Drinks_str, Animals_str, Smokes_str<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10s\"</span>, <span class=\"st0\">\"House\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>name <span class=\"sy4\">:</span> Attrib_str<span class=\"br0\">)</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10s\"</span>, name<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10d\"</span>, i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10s\"</span>, attr_names<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> HouseNoRule <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> houseno<span class=\"sy4\">;</span><br/>    Attrib a<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span> housenos<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">2</span>, Drink, Milk<span class=\"br0\">}</span>,     <span class=\"co1\">// Cond 9: In the middle house they drink milk.</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span>, Man, Norwegian<span class=\"br0\">}</span>   <span class=\"co1\">// Cond 10: The Norwegian lives in the first house.</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> AttrPairRule <span class=\"br0\">{</span><br/>    Attrib a1<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v1<span class=\"sy4\">;</span><br/>    Attrib a2<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v2<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> invalid<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v1 <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2<span class=\"br0\">)</span> <span class=\"sy3\">||</span><br/>                <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v1 <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> pairs<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>Man, English,      Color, Red<span class=\"br0\">}</span>,     <span class=\"co1\">// Cond 2: The English man lives in the red house.</span><br/>    <span class=\"br0\">{</span>Man, Swede,        Animal, Dog<span class=\"br0\">}</span>,    <span class=\"co1\">// Cond 3: The Swede has a dog.</span><br/>    <span class=\"br0\">{</span>Man, Dane,         Drink, Tea<span class=\"br0\">}</span>,     <span class=\"co1\">// Cond 4: The Dane drinks tea.</span><br/>    <span class=\"br0\">{</span>Color, Green,      Drink, Coffee<span class=\"br0\">}</span>,  <span class=\"co1\">// Cond 6: drink coffee in the green house.</span><br/>    <span class=\"br0\">{</span>Smoke, PallMall,   Animal, Birds<span class=\"br0\">}</span>,  <span class=\"co1\">// Cond 7: The man who smokes Pall Mall has birds.</span><br/>    <span class=\"br0\">{</span>Smoke, Dunhill,    Color, Yellow<span class=\"br0\">}</span>,  <span class=\"co1\">// Cond 8: In the yellow house they smoke Dunhill.</span><br/>    <span class=\"br0\">{</span>Smoke, BlueMaster, Drink, Beer<span class=\"br0\">}</span>,    <span class=\"co1\">// Cond 13: The man who smokes Blue Master drinks beer.</span><br/>    <span class=\"br0\">{</span>Man, German,       Smoke, Prince<span class=\"br0\">}</span>    <span class=\"co1\">// Cond 14: The German smokes Prince</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> NextToRule <span class=\"br0\">{</span><br/>    Attrib a1<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v1<span class=\"sy4\">;</span><br/>    Attrib a2<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v2<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> invalid<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v1<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2<span class=\"br0\">)</span> <span class=\"sy3\">||</span><br/>                <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> <span class=\"nu0\">4</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2<span class=\"br0\">)</span> <span class=\"sy3\">||</span><br/>                <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2 <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> nexttos<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>Smoke, Blend,      Animal, Cats<span class=\"br0\">}</span>,    <span class=\"co1\">// Cond 11: The man who smokes Blend lives in the house next to the house with cats.</span><br/>    <span class=\"br0\">{</span>Smoke, Dunhill,    Animal, Horse<span class=\"br0\">}</span>,   <span class=\"co1\">// Cond 12: In a house next to the house where they have a horse, they smoke Dunhill.</span><br/>    <span class=\"br0\">{</span>Man, Norwegian,    Color, Blue<span class=\"br0\">}</span>,     <span class=\"co1\">// Cond 15: The Norwegian lives next to the blue house.</span><br/>    <span class=\"br0\">{</span>Smoke, Blend,      Drink, Water<span class=\"br0\">}</span>     <span class=\"co1\">// Cond 16: They drink water in a house next to the house where they smoke Blend.</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> LeftOfRule <span class=\"br0\">{</span><br/>    Attrib a1<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v1<span class=\"sy4\">;</span><br/>    Attrib a2<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> v2<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> invalid<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v2<span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> invalid<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v1 <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v2<span class=\"br0\">)</span> <span class=\"sy3\">||</span><br/>                 <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a1<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v1 <span class=\"sy3\">&amp;&amp;</span> ha<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>a2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> leftofs<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>Color, Green,  Color, White<span class=\"br0\">}</span>     <span class=\"co1\">// Cond 5: The green house is immediately to the left of the white house.</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> invalid<span class=\"br0\">(</span><span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> <span class=\"sy3\">&amp;</span>rule <span class=\"sy4\">:</span> leftofs<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rule.<span class=\"me1\">invalid</span><span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co2\">#define eval_rules(rules) for (auto &amp;rule\u00a0: rules) if (rule.invalid(ha, i)) return true;</span><br/>        eval_rules<span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        eval_rules<span class=\"br0\">(</span>nexttos<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        eval_rules<span class=\"br0\">(</span>leftofs<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> search<span class=\"br0\">(</span><span class=\"kw4\">bool</span> used<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> hno, <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> attr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nexthno, nextattr<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>attr <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nextattr <span class=\"sy1\">=</span> attr <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        nexthno <span class=\"sy1\">=</span> hno<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        nextattr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        nexthno <span class=\"sy1\">=</span> hno <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ha<span class=\"br0\">[</span>hno<span class=\"br0\">]</span><span class=\"br0\">[</span>attr<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        search<span class=\"br0\">(</span>used, ha, nexthno, nextattr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>used<span class=\"br0\">[</span>attr<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>            used<span class=\"br0\">[</span>attr<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>            ha<span class=\"br0\">[</span>hno<span class=\"br0\">]</span><span class=\"br0\">[</span>attr<span class=\"br0\">]</span> <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>invalid<span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hno <span class=\"sy1\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>attr <span class=\"sy1\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    printHouses<span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    search<span class=\"br0\">(</span>used, ha, nexthno, nextattr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            used<span class=\"br0\">[</span>attr<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        ha<span class=\"br0\">[</span>hno<span class=\"br0\">]</span><span class=\"br0\">[</span>attr<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> used<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> ha<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span>ha, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>ha<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> <span class=\"sy3\">&amp;</span>rule <span class=\"sy4\">:</span> housenos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ha<span class=\"br0\">[</span>rule.<span class=\"me1\">houseno</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rule.<span class=\"me1\">a</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> rule.<span class=\"me1\">v</span><span class=\"sy4\">;</span><br/>        used<span class=\"br0\">[</span>rule.<span class=\"me1\">a</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rule.<span class=\"me1\">v</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    search<span class=\"br0\">(</span>used, ha, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 85, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"kw1\">static</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Colour <span class=\"br0\">{</span> Red, Green, White, Yellow, Blue <span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Nationality <span class=\"br0\">{</span> Englishman, Swede, Dane, Norwegian,German <span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Pet <span class=\"br0\">{</span> Dog, Birds, Cats, Horse, Zebra <span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Drink <span class=\"br0\">{</span> Coffee, Tea, Milk, Beer, Water <span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Smoke <span class=\"br0\">{</span> PallMall, Dunhill, Blend, BlueMaster, Prince<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> ZebraPuzzle<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"br0\">(</span>Colour<span class=\"br0\">[</span><span class=\"br0\">]</span> colours, Drink<span class=\"br0\">[</span><span class=\"br0\">]</span> drinks, Smoke<span class=\"br0\">[</span><span class=\"br0\">]</span> smokes, Pet<span class=\"br0\">[</span><span class=\"br0\">]</span> pets, Nationality<span class=\"br0\">[</span><span class=\"br0\">]</span> nations<span class=\"br0\">)</span> _solved<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> ZebraPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> solve <span class=\"sy0\">=</span> <span class=\"kw1\">from</span> colours <span class=\"kw1\">in</span> Permute<span class=\"sy0\">&lt;</span>Colour<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">//r1 5 range</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>colours,Colour<span class=\"sy0\">.</span><span class=\"me1\">White</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsRightOf</span><span class=\"br0\">(</span>colours, Colour<span class=\"sy0\">.</span><span class=\"me1\">Green</span><span class=\"br0\">)</span> <span class=\"co1\">// r5</span><br/>                    <span class=\"kw1\">from</span> nations <span class=\"kw1\">in</span> Permute<span class=\"sy0\">&lt;</span>Nationality<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">where</span> nations<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> Nationality<span class=\"sy0\">.</span><span class=\"me1\">Norwegian</span> <span class=\"co1\">// r10</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>nations, Nationality<span class=\"sy0\">.</span><span class=\"me1\">Englishman</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>colours, Colour<span class=\"sy0\">.</span><span class=\"me1\">Red</span><span class=\"br0\">)</span> <span class=\"co1\">//r2</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>nations,Nationality<span class=\"sy0\">.</span><span class=\"me1\">Norwegian</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsNextTo</span><span class=\"br0\">(</span>colours,Colour<span class=\"sy0\">.</span><span class=\"me1\">Blue</span><span class=\"br0\">)</span> <span class=\"co1\">// r15</span><br/>                    <span class=\"kw1\">from</span> drinks <span class=\"kw1\">in</span> Permute<span class=\"sy0\">&lt;</span>Drink<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">where</span> drinks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> Drink<span class=\"sy0\">.</span><span class=\"me1\">Milk</span> <span class=\"co1\">//r9</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>drinks, Drink<span class=\"sy0\">.</span><span class=\"me1\">Coffee</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>colours, Colour<span class=\"sy0\">.</span><span class=\"me1\">Green</span><span class=\"br0\">)</span> <span class=\"co1\">// r6</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>drinks, Drink<span class=\"sy0\">.</span><span class=\"me1\">Tea</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>nations, Nationality<span class=\"sy0\">.</span><span class=\"me1\">Dane</span><span class=\"br0\">)</span> <span class=\"co1\">//r4</span><br/>                    <span class=\"kw1\">from</span> pets <span class=\"kw1\">in</span> Permute<span class=\"sy0\">&lt;</span>Pet<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>pets, Pet<span class=\"sy0\">.</span><span class=\"me1\">Dog</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>nations, Nationality<span class=\"sy0\">.</span><span class=\"me1\">Swede</span><span class=\"br0\">)</span> <span class=\"co1\">// r3</span><br/>                    <span class=\"kw1\">from</span> smokes <span class=\"kw1\">in</span> Permute<span class=\"sy0\">&lt;</span>Smoke<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">PallMall</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>pets, Pet<span class=\"sy0\">.</span><span class=\"me1\">Birds</span><span class=\"br0\">)</span> <span class=\"co1\">// r7</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">Dunhill</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>colours, Colour<span class=\"sy0\">.</span><span class=\"me1\">Yellow</span><span class=\"br0\">)</span> <span class=\"co1\">// r8</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">Blend</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsNextTo</span><span class=\"br0\">(</span>pets, Pet<span class=\"sy0\">.</span><span class=\"me1\">Cats</span><span class=\"br0\">)</span> <span class=\"co1\">// r11</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">Dunhill</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsNextTo</span><span class=\"br0\">(</span>pets, Pet<span class=\"sy0\">.</span><span class=\"me1\">Horse</span><span class=\"br0\">)</span> <span class=\"co1\">//r12</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">BlueMaster</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>drinks, Drink<span class=\"sy0\">.</span><span class=\"me1\">Beer</span><span class=\"br0\">)</span> <span class=\"co1\">//r13</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>smokes, Smoke<span class=\"sy0\">.</span><span class=\"me1\">Prince</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsSameIndex</span><span class=\"br0\">(</span>nations, Nationality<span class=\"sy0\">.</span><span class=\"me1\">German</span><span class=\"br0\">)</span> <span class=\"co1\">// r14</span><br/>                    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>drinks,Drink<span class=\"sy0\">.</span><span class=\"me1\">Water</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsNextTo</span><span class=\"br0\">(</span>smokes,Smoke<span class=\"sy0\">.</span><span class=\"me1\">Blend</span><span class=\"br0\">)</span> <span class=\"co1\">// r16</span><br/>                    <span class=\"kw1\">select</span> <span class=\"br0\">(</span>colours, drinks, smokes, pets, nations<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        _solved <span class=\"sy0\">=</span> solve<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> IndexOf<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> arr, T obj<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Array<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>arr, obj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsRightOf<span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> a, T v<span class=\"br0\">)</span> right, U<span class=\"br0\">[</span><span class=\"br0\">]</span> a, U v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> right<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>right<span class=\"sy0\">.</span><span class=\"me1\">v</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> a<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsSameIndex<span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> a, T v<span class=\"br0\">)</span>x, U<span class=\"br0\">[</span><span class=\"br0\">]</span> a, U v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">v</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> a<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsNextTo<span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> a, T v<span class=\"br0\">)</span>x, U<span class=\"br0\">[</span><span class=\"br0\">]</span> a,  U v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">a</span>,x<span class=\"sy0\">.</span><span class=\"me1\">v</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsRightOf</span><span class=\"br0\">(</span>a, v<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>a,v<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsRightOf</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">a</span>,x<span class=\"sy0\">.</span><span class=\"me1\">v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// made more generic from https://codereview.stackexchange.com/questions/91808/permutations-in-c</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> Permutations<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> values<span class=\"sy0\">.</span><span class=\"me1\">ToSingleton</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> values<span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> Permutations<span class=\"br0\">(</span>values<span class=\"sy0\">.</span><span class=\"me1\">Except</span><span class=\"br0\">(</span>v<span class=\"sy0\">.</span><span class=\"me1\">ToSingleton</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>v, p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Prepend</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> Permute<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ToEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Permutations</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>p<span class=\"sy0\">=&gt;</span>p<span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> ToSingleton<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> T item<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> item<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> ToEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Enum</span><span class=\"sy0\">.</span><span class=\"me1\">GetValues</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">typeof</span></a><span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Cast</span><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">String</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sb<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"House Colour Drink    Nationality Smokes     Pet\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sb<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> <span class=\"br0\">(</span>colours, drinks, smokes, pets, nations<span class=\"br0\">)</span> <span class=\"sy0\">=</span> _solved<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sb<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{i+1,5} {colours[i],-6} {drinks[i],-8} {nations[i],-11} {smokes[i],-10} {pets[i],-10}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arguments<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> owner <span class=\"sy0\">=</span> _solved<span class=\"sy0\">.</span><span class=\"me1\">nations</span><span class=\"br0\">[</span>_solved<span class=\"sy0\">.</span><span class=\"me1\">pets</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>Pet<span class=\"sy0\">.</span><span class=\"me1\">Zebra</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span>$<span class=\"st0\">\"The zebra owner is {owner}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Write<span class=\"br0\">(</span>ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Read<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 43, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> zebra<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">refer</span><span class=\"sy0\">-</span>clojure\u00a0:<span class=\"me1\">exclude</span> <span class=\"br0\">[</span><span class=\"sy0\">==</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>core<span class=\"sy0\">.</span>logic<span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>tools<span class=\"sy0\">.</span>macro\u00a0:<span class=\"me1\">as</span> macro<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defne lefto <span class=\"br0\">[</span>x y l<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">[</span>x y <span class=\"sy0\">.</span>\u00a0?r<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span>_ _ <span class=\"br0\">[</span>_ <span class=\"sy0\">.</span>\u00a0?r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>lefto x y\u00a0?r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> nexto <span class=\"br0\">[</span>x y l<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>conde<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>lefto x y l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>lefto y x l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> zebrao <span class=\"br0\">[</span>hs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>macro<span class=\"sy0\">/</span>symbol<span class=\"sy0\">-</span>macrolet <span class=\"br0\">[</span>_ <span class=\"br0\">(</span>lvar<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>all<br/>      <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"br0\">[</span>_ _ _ _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>'englishman _ _ _ 'red<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>'swede _ _ 'dog _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>'dane _ 'tea _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>lefto <span class=\"br0\">[</span>_ _ _ _ 'green<span class=\"br0\">]</span> <span class=\"br0\">[</span>_ _ _ _ 'white<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>_ _ 'coffee _ 'green<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>_ 'pallmall _ 'birds _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>_ 'dunhill _ _ 'yellow<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"br0\">[</span>_ _ <span class=\"br0\">[</span>_ _ 'milk _ _<span class=\"br0\">]</span> _ _ <span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>firsto hs <span class=\"br0\">[</span>'norwegian _ _ _ _<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nexto <span class=\"br0\">[</span>_ 'blend _ _ _<span class=\"br0\">]</span> <span class=\"br0\">[</span>_ _ _ 'cats _ <span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nexto <span class=\"br0\">[</span>_ _ _ 'horse _<span class=\"br0\">]</span> <span class=\"br0\">[</span>_ 'dunhill _ _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>_ 'bluemaster 'beer _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>'german 'prince _ _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nexto <span class=\"br0\">[</span>'norwegian _ _ _ _<span class=\"br0\">]</span> <span class=\"br0\">[</span>_ _ _ _ 'blue<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>nexto <span class=\"br0\">[</span>_ _ 'water _ _<span class=\"br0\">]</span> <span class=\"br0\">[</span>_ 'blend _ _ _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>membero <span class=\"br0\">[</span>_ _ _ 'zebra _<span class=\"br0\">]</span> hs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>solns <span class=\"br0\">(</span>run<span class=\"sy0\">*</span> <span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"br0\">(</span>zebrao q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      soln <span class=\"br0\">(</span><span class=\"kw1\">first</span> solns<span class=\"br0\">)</span><br/>      zebra<span class=\"sy0\">-</span>owner <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> soln <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> 'zebra <span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">first</span> <span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"solution count:\"</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> solns<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"zebra owner is the\"</span> zebra<span class=\"sy0\">-</span>owner<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"full solution (in house order):\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>h soln<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"st0\">\" \"</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Curry", "loc": 43, "block": "<pre class=\"text highlighted_source\">import Constraint (allC, anyC)<br/>import Findall (findall)<br/>\u00a0<br/>\u00a0<br/>data House  =  H Color Man Pet Drink Smoke<br/>\u00a0<br/>data Color  =  Red    | Green | Blue  | Yellow | White<br/>data Man    =  Eng    | Swe   | Dan   | Nor    | Ger<br/>data Pet    =  Dog    | Birds | Cats  | Horse  | Zebra<br/>data Drink  =  Coffee | Tea   | Milk  | Beer   | Water<br/>data Smoke  =  PM     | DH    | Blend | BM     | Prince<br/>\u00a0<br/>\u00a0<br/>houses\u00a0:: [House] -&gt; Success<br/>houses <a class=\"__cf_email__\" data-cfemail=\"c3abb083\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[H1,_,H3,_,_] =                         --  1<br/>    H  _ _ _ Milk _  =:=  H3                      --  9<br/>  &amp; H  _ Nor _ _ _   =:=  H1                      -- 10<br/>  &amp; allC (`member` hs)<br/>  [ H  Red Eng _ _ _                              --  2<br/>  , H  _ Swe Dog _ _                              --  3<br/>  , H  _ Dan _ Tea _                              --  4<br/>  , H  Green _ _ Coffee _                         --  6<br/>  , H  _ _ Birds _ PM                             --  7<br/>  , H  Yellow _ _ _ DH                            --  8<br/>  , H  _ _ _ Beer BM                              -- 13<br/>  , H  _ Ger _ _ Prince                           -- 14<br/>  ]<br/>  &amp; H  Green _ _ _ _  `leftTo`  H  White _ _ _ _  --  5<br/>  &amp; H  _ _ _ _ Blend  `nextTo`  H  _ _ Cats _ _   -- 11<br/>  &amp; H  _ _ Horse _ _  `nextTo`  H  _ _ _ _ DH     -- 12<br/>  &amp; H  _ Nor _ _ _    `nextTo`  H  Blue _ _ _ _   -- 15<br/>  &amp; H  _ _ _ Water _  `nextTo`  H  _ _ _ _ Blend  -- 16<br/> where<br/>    x `leftTo` y = _ ++ [x,y] ++ _ =:= hs<br/>    x `nextTo` y = x `leftTo` y<br/>                \u00a0? y `leftTo` x<br/>\u00a0<br/>\u00a0<br/>member\u00a0:: a -&gt; [a] -&gt; Success<br/>member = anyC . (=:=)<br/>\u00a0<br/>\u00a0<br/>main = findall $ \\(hs,who) -&gt; houses hs &amp; H _ who Zebra _ _ `member` hs</pre>"}, {"lang": "D", "loc": 95, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> Content <span class=\"br0\">{</span> Beer<span class=\"sy0\">,</span> Coffee<span class=\"sy0\">,</span> Milk<span class=\"sy0\">,</span> Tea<span class=\"sy0\">,</span> Water<span class=\"sy0\">,</span><br/>               Danish<span class=\"sy0\">,</span> English<span class=\"sy0\">,</span> German<span class=\"sy0\">,</span> Norwegian<span class=\"sy0\">,</span> Swedish<span class=\"sy0\">,</span><br/>               Blue<span class=\"sy0\">,</span> Green<span class=\"sy0\">,</span> Red<span class=\"sy0\">,</span> White<span class=\"sy0\">,</span> Yellow<span class=\"sy0\">,</span><br/>               Blend<span class=\"sy0\">,</span> BlueMaster<span class=\"sy0\">,</span> Dunhill<span class=\"sy0\">,</span> PallMall<span class=\"sy0\">,</span> Prince<span class=\"sy0\">,</span><br/>               Bird<span class=\"sy0\">,</span> Cat<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> Horse<span class=\"sy0\">,</span> Zebra <span class=\"br0\">}</span><br/><span class=\"kw4\">enum</span> Test <span class=\"br0\">{</span> Drink<span class=\"sy0\">,</span> Person<span class=\"sy0\">,</span> Color<span class=\"sy0\">,</span> Smoke<span class=\"sy0\">,</span> Pet <span class=\"br0\">}</span><br/><span class=\"kw4\">enum</span> House <span class=\"br0\">{</span> One<span class=\"sy0\">,</span> Two<span class=\"sy0\">,</span> Three<span class=\"sy0\">,</span> Four<span class=\"sy0\">,</span> Five <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> TM <span class=\"sy0\">=</span> Content<span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Test.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>House.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> finalChecks<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TM M<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> diff<span class=\"br0\">(</span><span class=\"kw2\">in</span> Content a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Content b<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Test ca<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Test cb<span class=\"br0\">)</span><br/>  <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h1<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h2<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>M<span class=\"br0\">[</span>ca<span class=\"br0\">]</span><span class=\"br0\">[</span>h1<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>cb<span class=\"br0\">]</span><span class=\"br0\">[</span>h2<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> h1 <span class=\"sy0\">-</span> h2<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Useless but required.</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Content<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Test<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> abs<span class=\"br0\">(</span>diff<span class=\"br0\">(</span>Norwegian<span class=\"sy0\">,</span> Blue<span class=\"sy0\">,</span> Person<span class=\"sy0\">,</span> Color<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span><br/>           diff<span class=\"br0\">(</span>Green<span class=\"sy0\">,</span> White<span class=\"sy0\">,</span> Color<span class=\"sy0\">,</span> Color<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span><br/>           abs<span class=\"br0\">(</span>diff<span class=\"br0\">(</span>Horse<span class=\"sy0\">,</span> Dunhill<span class=\"sy0\">,</span> Pet<span class=\"sy0\">,</span> Smoke<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span><br/>           abs<span class=\"br0\">(</span>diff<span class=\"br0\">(</span>Water<span class=\"sy0\">,</span> Blend<span class=\"sy0\">,</span> Drink<span class=\"sy0\">,</span> Smoke<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span><br/>           abs<span class=\"br0\">(</span>diff<span class=\"br0\">(</span>Blend<span class=\"sy0\">,</span> Cat<span class=\"sy0\">,</span> Smoke<span class=\"sy0\">,</span> Pet<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> constrained<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TM M<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Test atest<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>  <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Content<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Test<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>House<span class=\"br0\">)</span><br/>    <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>atest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> Drink<span class=\"sy0\">:</span><br/>        <span class=\"kw1\">return</span> M<span class=\"br0\">[</span>Drink<span class=\"br0\">]</span><span class=\"br0\">[</span>Three<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Milk<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> Person<span class=\"sy0\">:</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>Person<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Norwegian <span class=\"sy0\">&amp;&amp;</span> h <span class=\"sy0\">!=</span> One<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <span class=\"br0\">(</span>M<span class=\"br0\">[</span>Person<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Danish <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Drink<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Tea<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> Color<span class=\"sy0\">:</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>Person<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> English <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Color<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Red<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <span class=\"br0\">(</span>M<span class=\"br0\">[</span>Drink<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Coffee <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Color<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Green<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> Smoke<span class=\"sy0\">:</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>Color<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Yellow <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Smoke<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Dunhill<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <span class=\"br0\">(</span>M<span class=\"br0\">[</span>Smoke<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> BlueMaster <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Drink<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Beer<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <span class=\"br0\">(</span>M<span class=\"br0\">[</span>Person<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> German <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Smoke<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Prince<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> Pet<span class=\"sy0\">:</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>Person<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Swedish <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Pet<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Dog<span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <span class=\"br0\">(</span>M<span class=\"br0\">[</span>Smoke<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">==</span> PallMall <span class=\"sy0\">&amp;&amp;</span> M<span class=\"br0\">[</span>Pet<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Bird<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> finalChecks<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TM M<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writef<span class=\"br0\">(</span><span class=\"st0\">\"%5s: \"</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> t<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>Test<span class=\"br0\">)</span><br/>      writef<span class=\"br0\">(</span><span class=\"st0\">\"%10s \"</span><span class=\"sy0\">,</span> M<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> solve<span class=\"br0\">(</span><span class=\"kw2\">ref</span> TM M<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Test t<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> constrained<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      solve<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Test<span class=\"br0\">]</span><span class=\"br0\">[</span>t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      show<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    solve<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    swap<span class=\"br0\">(</span>M<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> i<span class=\"br0\">]</span><span class=\"sy0\">,</span> M<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  TM M<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> t<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>Test<span class=\"br0\">)</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h<span class=\"sy0\">;</span> EnumMembers<span class=\"sy0\">!</span>House<span class=\"br0\">)</span><br/>      M<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span> <span class=\"sy0\">=</span> EnumMembers<span class=\"sy0\">!</span>Content<span class=\"br0\">[</span>t <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> h<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  solve<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> Test.<span class=\"me1\">Drink</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 74, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'hash<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'amb<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; return #f or house# for thing/category </span><br/><span class=\"co1\">;; houses\u00a0:= (0 1 2 3 4)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>get H  category thing houses<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i houses<span class=\"br0\">)</span><span class=\"br0\">)</span> #:continue <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">equal?</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> H i<span class=\"br0\">)</span> category<span class=\"br0\">)</span> thing<span class=\"br0\">)</span><br/>        i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"co1\">;; return house # for thing (eg cat) in category (eq animals)</span><br/> <span class=\"co1\">;; add thing if not already here</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set thing category<span class=\"br0\">)</span><br/>    \t<span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>    \t <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>get H 'category 'thing houses<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>dispatch H 'category 'thing context houses <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; we know that thing/category is in a given house</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> thing category house<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>dispatch H 'category 'thing context houses  house<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; return house# or fail if impossible</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>dispatch H category thing  context houses  <span class=\"br0\">(</span>forced #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">define</span> house <span class=\"br0\">(</span><span class=\"kw1\">or</span> forced  <span class=\"br0\">(</span>amb context houses<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; get a house number</span><br/>        <span class=\"br0\">(</span>when <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> H house<span class=\"br0\">)</span> category<span class=\"br0\">)</span> <span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>fail<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; fail if occupied</span><br/>        <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> H house<span class=\"br0\">)</span> category thing<span class=\"br0\">)</span> <span class=\"co1\">;; else remember house contents</span><br/>        house<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>next h1 h2<span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>require <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> h1 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> h2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> h1 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> h2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>zebra<span class=\"sy0\">-</span>puzzle context houses  <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> H <span class=\"br0\">(</span>build<span class=\"sy0\">-</span><span class=\"kw1\">vector</span> <span class=\"nu0\">5</span> make<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; house[i]\u00a0:=  hash(category) -&gt; thing</span><br/><span class=\"co1\">; In the middle house they drink milk.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> milk drinks <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"co1\">;The Norwegian lives in the first house.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> norvegian people <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The English man lives in the red house.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> red colors<span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set english people<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; The Swede has a dog.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> dog animals <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set swede people<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The Dane drinks tea.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> tea drinks <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set dane people<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The green house is immediately to the left of the white house.</span><br/>   <span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>require <span class=\"br0\">(</span><span class=\"sy0\">=</span>   <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set green colors<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set white colors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  They drink coffee in the green house.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> coffee drinks <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set green colors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The man who smokes Pall Mall has birds.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> birds  animals <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set pallmall smoke<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  In the yellow house they smoke Dunhill.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> dunhill smoke <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set yellow colors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The Norwegian lives next to the blue house.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>next <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set norvegian people<span class=\"br0\">)</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set blue colors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;  The man who smokes Blend lives in the house next to the house with cats.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>next <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set blend smoke<span class=\"br0\">)</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set cats  animals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; In a house next to the house where they have a horse, they smoke Dunhill.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>next <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set horse animals<span class=\"br0\">)</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set dunhill smoke<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; The man who smokes Blue Master drinks beer.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> beer drinks <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set bluemaster smoke<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; The German smokes Prince.</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span><span class=\"kw1\">force</span> prince smoke <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set german people<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; They drink water in a house next to the house where they smoke Blend. </span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>next <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set water drinks<span class=\"br0\">)</span> <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set blend smoke<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Finally .... the zebra \ud83d\udc34</span><br/>    <span class=\"br0\">(</span>house<span class=\"sy0\">-</span>set \ud83d\udc34 animals<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i houses<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln i <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> H i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln '<span class=\"sy0\">----------</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>amb<span class=\"sy0\">-</span>fail<span class=\"br0\">)</span> <span class=\"co1\">;; will ensure ALL solutions are printed</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 74, "block": "<pre class=\"text highlighted_source\">defmodule ZebraPuzzle do<br/>  defp adjacent?(n,i,g,e) do<br/>    Enum.any?(0..3, fn x -&gt;<br/>      (Enum.at(n,x)==i and Enum.at(g,x+1)==e) or (Enum.at(n,x+1)==i and Enum.at(g,x)==e)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp leftof?(n,i,g,e) do<br/>    Enum.any?(0..3, fn x -&gt; Enum.at(n,x)==i and Enum.at(g,x+1)==e end)<br/>  end<br/>\u00a0<br/>  defp coincident?(n,i,g,e) do<br/>    Enum.with_index(n) |&gt; Enum.any?(fn {x,idx} -&gt; x==i and Enum.at(g,idx)==e end)<br/>  end<br/>\u00a0<br/>  def solve(content) do<br/>    colours = permutation(content[:Colour])<br/>    pets    = permutation(content[:Pet])<br/>    drinks  = permutation(content[:Drink])<br/>    smokes  = permutation(content[:Smoke])<br/>    Enum.each(permutation(content[:Nationality]), fn nation -&gt;<br/>      if hd(nation) ==\u00a0:Norwegian, do:                                      # 10<br/>        Enum.each(colours, fn colour -&gt;<br/>          if leftof?(colour,\u00a0:Green, colour,\u00a0:White)      and               # 5<br/>             coincident?(nation,\u00a0:English, colour,\u00a0:Red)  and               # 2<br/>             adjacent?(nation,\u00a0:Norwegian, colour,\u00a0:Blue), do:              # 15<br/>            Enum.each(pets, fn pet -&gt;<br/>              if coincident?(nation,\u00a0:Swedish, pet,\u00a0:Dog), do:              # 3<br/>                Enum.each(drinks, fn drink -&gt;<br/>                  if Enum.at(drink,2) ==\u00a0:Milk                   and        # 9<br/>                     coincident?(nation,\u00a0:Danish, drink,\u00a0:Tea)   and        # 4<br/>                     coincident?(colour,\u00a0:Green, drink,\u00a0:Coffee), do:       # 6<br/>                    Enum.each(smokes, fn smoke -&gt;<br/>                      if coincident?(smoke,\u00a0:PallMall, pet,\u00a0:Birds)    and  # 7<br/>                         coincident?(smoke,\u00a0:Dunhill, colour,\u00a0:Yellow) and  # 8<br/>                         coincident?(smoke,\u00a0:BlueMaster, drink,\u00a0:Beer) and  # 13<br/>                         coincident?(smoke,\u00a0:Prince, nation,\u00a0:German)  and  # 14<br/>                         adjacent?(smoke,\u00a0:Blend, pet,\u00a0:Cats)          and  # 11<br/>                         adjacent?(smoke,\u00a0:Blend, drink,\u00a0:Water)       and  # 16<br/>                         adjacent?(smoke,\u00a0:Dunhill, pet,\u00a0:Horse), do:       # 12<br/>                        print_out(content, transpose([nation, colour, pet, drink, smoke]))<br/>    end)end)end)end)end)<br/>  end<br/>\u00a0<br/>  defp permutation([]), do: [[]]<br/>  defp permutation(list) do<br/>    for x &lt;- list, y &lt;- permutation(list -- [x]), do: [x|y]<br/>  end<br/>\u00a0<br/>  defp transpose(lists) do<br/>    List.zip(lists) |&gt; Enum.map(&amp;Tuple.to_list/1)<br/>  end<br/>\u00a0<br/>  defp print_out(content, result) do<br/>    width = for {k,v}&lt;-content, do: Enum.map([k|v], &amp;length(to_char_list &amp;1)) |&gt; Enum.max<br/>    fmt = Enum.map_join(width, \" \", fn w -&gt; \"~-#{w}s\" end) &lt;&gt; \"~n\"<br/>    nation = Enum.find(result, fn x -&gt;\u00a0:Zebra in x end) |&gt; hd<br/>    IO.puts \"The Zebra is owned by the man who is #{nation}\\n\"<br/>   \u00a0:io.format fmt, Keyword.keys(content)<br/>   \u00a0:io.format fmt, Enum.map(width, fn w -&gt; String.duplicate(\"-\", w) end)<br/>    fmt2 = String.replace(fmt, \"s\", \"w\", global: false)<br/>    Enum.with_index(result)<br/>    |&gt; Enum.each(fn {x,i} -&gt;\u00a0:io.format fmt2, [i+1 | x] end)<br/>  end<br/>end<br/>\u00a0<br/>content = [ House:       '',<br/>            Nationality: ~w[English Swedish Danish Norwegian German]a,<br/>            Colour:      ~w[Red Green White Blue Yellow]a,<br/>            Pet:         ~w[Dog Birds Cats Horse Zebra]a,<br/>            Drink:       ~w[Tea Coffee Milk Beer Water]a,<br/>            Smoke:       ~w[PallMall Dunhill BlueMaster Prince Blend]a ]<br/>\u00a0<br/>ZebraPuzzle.solve(content)</pre>"}, {"lang": "Erlang", "loc": 119, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> zebra_puzzle <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> house<span class=\"sy1\">,</span> <span class=\"br0\">{</span>colour<span class=\"sy1\">,</span> drink<span class=\"sy1\">,</span> nationality<span class=\"sy1\">,</span> <span class=\"kw4\">number</span><span class=\"sy1\">,</span> pet<span class=\"sy1\">,</span> smoke<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> sorted_houses<span class=\"sy1\">,</span> <span class=\"br0\">{</span>house_1s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> house_2s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> house_3s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> house_4s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> house_5s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Houses</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span>#<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> drink<span class=\"sy3\">=</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> nationality<span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">Nr</span><span class=\"sy1\">,</span> pet<span class=\"sy3\">=</span><span class=\"re5\">P</span><span class=\"sy1\">,</span> smoke<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">C</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_colours</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_drinks</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_nationalities</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Nr</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_numbers</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">P</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_pets</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">all_smokes</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">is_all_single_house_rules_ok</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Nr</span><span class=\"sy1\">,</span> <span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Sorted_houses</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> house_number_sort<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Houses</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Streets</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">H1</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"sy1\">.</span>house_1s<span class=\"sy1\">,</span> <span class=\"re5\">H2</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"sy1\">.</span>house_2s<span class=\"sy1\">,</span> <span class=\"re5\">H3</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"sy1\">.</span>house_3s<span class=\"sy1\">,</span> <span class=\"re5\">H4</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"sy1\">.</span>house_4s<span class=\"sy1\">,</span> <span class=\"re5\">H5</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"sy1\">.</span>house_5s<span class=\"sy1\">,</span> <span class=\"re3\">is_all_multi_house_rules_ok</span><span class=\"br0\">(</span><span class=\"re5\">H1</span><span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Nationality</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"sy3\">||</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> pet<span class=\"sy3\">=</span>zebra<span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"re5\">Streets</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p owns the zebra~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Nationality</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"All solutions ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Streets</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Number of solutions ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Streets</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">all_colours</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>blue<span class=\"sy1\">,</span> green<span class=\"sy1\">,</span> red<span class=\"sy1\">,</span> white<span class=\"sy1\">,</span> yellow<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_drinks</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>beer<span class=\"sy1\">,</span> coffe<span class=\"sy1\">,</span> milk<span class=\"sy1\">,</span> tea<span class=\"sy1\">,</span> water<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_nationalities</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>danish<span class=\"sy1\">,</span> english<span class=\"sy1\">,</span> german<span class=\"sy1\">,</span> norveigan<span class=\"sy1\">,</span> swedish<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_numbers</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_pets</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>birds<span class=\"sy1\">,</span> cats<span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span> horse<span class=\"sy1\">,</span> zebra<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_smokes</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>blend<span class=\"sy1\">,</span> <span class=\"st_h\">'blue master'</span><span class=\"sy1\">,</span> dunhill<span class=\"sy1\">,</span> <span class=\"st_h\">'pall mall'</span><span class=\"sy1\">,</span> prince<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">house_number_sort</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">House</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_1s<span class=\"sy3\">=</span><span class=\"re5\">Houses_1s</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Sorted_houses</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_1s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">House</span> | <span class=\"re5\">Houses_1s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">house_number_sort</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">House</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_2s<span class=\"sy3\">=</span><span class=\"re5\">Houses_2s</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Sorted_houses</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_2s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">House</span> | <span class=\"re5\">Houses_2s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">house_number_sort</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">House</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_3s<span class=\"sy3\">=</span><span class=\"re5\">Houses_3s</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Sorted_houses</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_3s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">House</span> | <span class=\"re5\">Houses_3s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">house_number_sort</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">House</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_4s<span class=\"sy3\">=</span><span class=\"re5\">Houses_4s</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Sorted_houses</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_4s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">House</span> | <span class=\"re5\">Houses_4s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">house_number_sort</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">House</span><span class=\"sy1\">,</span> #<span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_5s<span class=\"sy3\">=</span><span class=\"re5\">Houses_5s</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Sorted_houses</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sorted_houses</span><span class=\"re8\">#</span><span class=\"re7\">sorted_houses</span><span class=\"br0\">{</span>house_5s<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">House</span> | <span class=\"re5\">Houses_5s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">_H</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span> <span class=\"kw1\">andalso</span> <span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_all_multi_house_rules_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">is_rule_1_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">House1</span><span class=\"sy1\">,</span> <span class=\"re5\">House2</span><span class=\"sy1\">,</span> <span class=\"re5\">House3</span><span class=\"sy1\">,</span> <span class=\"re5\">House4</span><span class=\"sy1\">,</span> <span class=\"re5\">House5</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_all_single_house_rules_ok</span><span class=\"br0\">(</span> <span class=\"re5\">Colour</span><span class=\"sy1\">,</span> <span class=\"re5\">Drink</span><span class=\"sy1\">,</span> <span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> <span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"re5\">Pet</span><span class=\"sy1\">,</span> <span class=\"re5\">Smoke</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> english<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Colour</span><span class=\"sy1\">,</span> red<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> swedish<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Pet</span><span class=\"sy1\">,</span> dog<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> danish<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Drink</span><span class=\"sy1\">,</span> tea<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Drink</span><span class=\"sy1\">,</span> coffe<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Colour</span><span class=\"sy1\">,</span> green<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Smoke</span><span class=\"sy1\">,</span> <span class=\"st_h\">'pall mall'</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Pet</span><span class=\"sy1\">,</span> birds<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Colour</span><span class=\"sy1\">,</span> yellow<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Smoke</span><span class=\"sy1\">,</span> dunhill<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Drink</span><span class=\"sy1\">,</span> milk<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Smoke</span><span class=\"sy1\">,</span> <span class=\"st_h\">'blue master'</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Drink</span><span class=\"sy1\">,</span> beer<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>rule_number<span class=\"sy1\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Nationality</span><span class=\"sy1\">,</span> german<span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Smoke</span><span class=\"sy1\">,</span> prince<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_Rule_number</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_Rule_number</span><span class=\"sy1\">,</span> <span class=\"re5\">_A</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_Rule_number</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_B</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_Rule_number</span><span class=\"sy1\">,</span> <span class=\"re5\">_A</span><span class=\"sy1\">,</span> <span class=\"re5\">_B</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_1_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">H1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">H2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">H3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">H4</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">H5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>colour<span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>colour<span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>colour<span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>colour<span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>colour<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>drink<span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>drink<span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>drink<span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>drink<span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>drink<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>nationality<span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>nationality<span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>nationality<span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>nationality<span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>nationality<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>pet<span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>pet<span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>pet<span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>pet<span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>pet<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">andalso</span> <span class=\"re3\">is_all_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H1</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>smoke<span class=\"sy1\">,</span> <span class=\"re5\">H2</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>smoke<span class=\"sy1\">,</span> <span class=\"re5\">H3</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>smoke<span class=\"sy1\">,</span> <span class=\"re5\">H4</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>smoke<span class=\"sy1\">,</span> <span class=\"re5\">H5</span><span class=\"re8\">#</span><span class=\"re7\">house</span><span class=\"sy1\">.</span>smoke<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_1_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>green<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>green<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>green<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>green<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_5_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>cats<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_11_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>pet<span class=\"sy3\">=</span>horse<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>dunhill<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_12_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>blue<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>nationality<span class=\"sy3\">=</span>norveigan<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_15_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>drink<span class=\"sy3\">=</span>water<span class=\"br0\">}</span><span class=\"sy1\">,</span>  #<span class=\"re7\">house</span><span class=\"br0\">{</span>smoke<span class=\"sy3\">=</span>blend<span class=\"br0\">}</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_rule_16_ok</span><span class=\"br0\">(</span> <span class=\"re5\">_House1</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House2</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House3</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House4</span><span class=\"sy1\">,</span>  <span class=\"re5\">_House5</span>  <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 107, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM ZEBRA_PUZZLE<br/>\u00a0<br/>DIM DRINK$[4],NATION$[4],COLR$[4],SMOKE$[4],ANIMAL$[4]<br/>DIM PERM$[120],X$[4]<br/>\u00a0<br/>PROCEDURE PERMUTATION(X$[]-&gt;X$[],OK)<br/>    LOCAL I%,J%<br/>    FOR I%=UBOUND(X$,1)-1 TO 0 STEP -1 DO<br/>       EXIT IF X$[I%]&lt;X$[I%+1]<br/>    END FOR<br/>    IF I%&lt;0 THEN OK=FALSE  EXIT PROCEDURE END IF<br/>    J%=UBOUND(X$,1)<br/>    WHILE X$[J%]&lt;=X$[I%] DO<br/>         J%=J%-1<br/>    END WHILE<br/>    SWAP(X$[I%],X$[J%])<br/>    I%=I%+1<br/>    J%=UBOUND(X$,1)<br/>    WHILE I%&lt;J% DO<br/>        SWAP(X$[I%],X$[J%])<br/>        I%=I%+1<br/>        J%=J%-1<br/>    END WHILE<br/>    OK=TRUE<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>! The names (only used for printing the results)<br/>\u00a0<br/>    DATA(\"Beer\",\"Coffee\",\"Milk\",\"Tea\",\"Water\")<br/>    DATA(\"Denmark\",\"England\",\"Germany\",\"Norway\",\"Sweden\")<br/>    DATA(\"Blue\",\"Green\",\"Red\",\"White\",\"Yellow\")<br/>    DATA(\"Blend\",\"BlueMaster\",\"Dunhill\",\"PallMall\",\"Prince\")<br/>    DATA(\"Birds\",\"Cats\",\"Dog\",\"Horse\",\"Zebra\")<br/>\u00a0<br/>    FOR I%=0 TO 4 DO READ(DRINK$[I%])   END FOR<br/>    FOR I%=0 TO 4 DO READ(NATION$[I%])  END FOR<br/>    FOR I%=0 TO 4 DO READ(COLR$[I%])    END FOR<br/>    FOR I%=0 TO 4 DO READ(SMOKE$[I%])   END FOR<br/>    FOR I%=0 TO 4 DO READ(ANIMAL$[I%])  END FOR<br/>\u00a0<br/>! Some single-character tags:<br/>    A$=\"A\"  B$=\"B\"  c$=\"C\"  d$=\"D\"  e$=\"E\"<br/>\u00a0<br/>! ERRE doesn't have enumerations!<br/>    Beer$=A$  Coffee$=B$  Milk$=c$  TeA$=d$  Water$=e$<br/>    Denmark$=A$  England$=B$  Germany$=c$  Norway$=d$  Sweden$=e$<br/>    Blue$=A$  Green$=B$  Red$=c$  White$=d$  Yellow$=e$<br/>    Blend$=A$  BlueMaster$=B$  Dunhill$=c$  PallMall$=d$  Prince$=e$<br/>    Birds$=A$  Cats$=B$  Dog$=c$  Horse$=d$  ZebrA$=e$<br/>\u00a0<br/>    PRINT(CHR$(12);)<br/>\u00a0<br/>! Create the 120 permutations of 5 objects:<br/>\u00a0<br/>    X$[0]=A$  X$[1]=B$  X$[2]=C$  X$[3]=D$  X$[4]=E$<br/>\u00a0<br/>    REPEAT<br/>       P%=P%+1<br/>       PERM$[P%]=X$[0]+X$[1]+X$[2]+X$[3]+X$[4]<br/>       PERMUTATION(X$[]-&gt;X$[],OK)<br/>    UNTIL NOT OK<br/>\u00a0<br/>! Solve:<br/>    SOLUTIONS%=0<br/>    T1=TIMER<br/>    FOR NATION%=1 TO 120 DO<br/>        NATION$=PERM$[NATION%]<br/>        IF LEFT$(NATION$,1)=Norway$ THEN<br/>             FOR COLR%=1 TO 120 DO<br/>                COLR$=PERM$[COLR%]<br/>                IF INSTR(COLR$,Green$+White$)&lt;&gt;0 AND INSTR(NATION$,England$)=INSTR(COLR$,Red$) AND ABS(INSTR(NATION$,Norway$)-INSTR(COLR$,Blue$))=1 THEN<br/>                    FOR DRINK%=1 TO 120 DO<br/>                       DRINK$=PERM$[DRINK%]<br/>                       IF MID$(DRINK$,3,1)=Milk$ AND INSTR(NATION$,Denmark$)=INSTR(DRINK$,TeA$) AND INSTR(DRINK$,Coffee$)=INSTR(COLR$,Green$) THEN<br/>                           FOR SmOKe%=1 TO 120 DO<br/>                              SmOKe$=PERM$[SMOKE%]<br/>                              IF INSTR(NATION$,Germany$)=INSTR(SmOKe$,Prince$) AND INSTR(SmOKe$,BlueMaster$)=INSTR(DRINK$,Beer$) AND ABS(INSTR(SmOKe$,Blend$)-INSTR(DRINK$,Water$))=1 AND INSTR(SmOKe$,Dunhill$)=INSTR(COLR$,Yellow$) THEN<br/>                                  FOR ANIMAL%=1 TO 120 DO<br/>                                     ANIMAL$=PERM$[ANIMAL%]<br/>                                     IF INSTR(NATION$,Sweden$)=INSTR(ANIMAL$,Dog$) AND INSTR(SmOKe$,PallMall$)=INSTR(ANIMAL$,Birds$) AND ABS(INSTR(SmOKe$,Blend$)-INSTR(ANIMAL$,Cats$))=1 AND ABS(INSTR(SmOKe$,Dunhill$)-INSTR(ANIMAL$,Horse$))=1 THEN<br/>                                         PRINT(\"House    Drink  Nation Colour Smoke  Animal\")<br/>                                         PRINT(\"---------------------------------------------------------------------------\")<br/>                                         FOR house%=1 TO 5 DO<br/>                                            PRINT(house%;)<br/>                                            PRINT(TAB(10);DRINK$[ASC(MID$(DRINK$,house%))-65];)<br/>                                            PRINT(TAB(25);NATION$[ASC(MID$(NATION$,house%))-65];)<br/>                                            PRINT(TAB(40);COLR$[ASC(MID$(COLR$,house%))-65];)<br/>                                            PRINT(TAB(55);SMOKE$[ASC(MID$(SmOKe$,house%))-65];)<br/>                                            PRINT(TAB(70);ANIMAL$[ASC(MID$(ANIMAL$,house%))-65])<br/>                                         END FOR<br/>                                         SOLUTIONS%=SOLUTIONS%+1<br/>                                     END IF<br/>                                  END FOR\u00a0! ANIMAL%<br/>                              END IF<br/>                           END FOR\u00a0! SmOKe%<br/>                       END IF<br/>                    END FOR\u00a0! DRINK%<br/>                END IF<br/>             END FOR\u00a0! COLR%<br/>        END IF<br/>    END FOR\u00a0! NATION%<br/>    PRINT(\"Number of solutions=\";SOLUTIONS%)<br/>    PRINT(\"Solved in \";TIMER-T1;\" seconds\")<br/>END PROGRAM</pre>"}, {"lang": "F#", "loc": 43, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*Here I solve the Zebra puzzle using Plain Changes, definitely a challenge to some campanoligist to solve it using Grandsire Doubles.<br/>  Nigel Galloway: January 27th., 2017 *)</span><br/><span class=\"kw1\">type</span> N <span class=\"sy0\">=</span> |English |Swedish|Danish    |German|Norwegian<br/><span class=\"kw1\">type</span> I <span class=\"sy0\">=</span> |Tea     |Coffee |Milk      |Beer  |Water<br/><span class=\"kw1\">type</span> G <span class=\"sy0\">=</span> |Dog     |Birds  |Cats      |Horse |Zebra<br/><span class=\"kw1\">type</span> E <span class=\"sy0\">=</span> |Red     |Green  |White     |Blue  |Yellow<br/><span class=\"kw1\">type</span> L <span class=\"sy0\">=</span> |PallMall|Dunhill|BlueMaster|Prince|Blend<br/><span class=\"kw1\">type</span> NIGELz<span class=\"sy0\">=</span><span class=\"br0\">{</span>Nz:N<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>Iz:I<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>Gz:G<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>Ez:E<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>Lz:L<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> fn <span class=\"br0\">(</span>i:<span class=\"st0\">'n[]) g (e:'</span>g<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> l <span class=\"sy0\">=</span>                            <span class=\"co1\">//coincident?</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> _fn <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    |<span class=\"nu0\">5</span>                                <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>    |ig <span class=\"kw1\">when</span> <span class=\"br0\">(</span>i.<span class=\"br0\">[</span>ig<span class=\"br0\">]</span><span class=\"sy0\">=</span>g &amp;&amp; e.<span class=\"br0\">[</span>ig<span class=\"br0\">]</span><span class=\"sy0\">=</span>l<span class=\"br0\">)</span>   <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>    |ig                               <span class=\"sy0\">-&gt;</span> _fn <span class=\"br0\">(</span>ig<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  _fn <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> fi <span class=\"br0\">(</span>i:<span class=\"st0\">'n[]) g (e:'</span>g<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> l <span class=\"sy0\">=</span>                            <span class=\"co1\">//leftof?</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> _fn <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    |<span class=\"nu0\">4</span>                                <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>    |ig <span class=\"kw1\">when</span> <span class=\"br0\">(</span>i.<span class=\"br0\">[</span>ig<span class=\"br0\">]</span><span class=\"sy0\">=</span>g &amp;&amp; e.<span class=\"br0\">[</span>ig<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>l<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>    |ig                               <span class=\"sy0\">-&gt;</span> _fn <span class=\"br0\">(</span>ig<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  _fn <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> fg <span class=\"br0\">(</span>i:<span class=\"st0\">'n[]) g (e:'</span>g<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> l <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fi i g e l || fi e l i g<span class=\"br0\">)</span> <span class=\"co1\">//adjacent?</span><br/><span class=\"kw1\">let</span>  n <span class=\"sy0\">=</span> Ring.<span class=\"me1\">PlainChanges</span> <span class=\"br0\">[</span>|N.<span class=\"me1\">English</span><span class=\"sy0\">;</span> N.<span class=\"me1\">Swedish</span><span class=\"sy0\">;</span> N.<span class=\"me1\">Danish</span><span class=\"sy0\">;</span>    N.<span class=\"me1\">German</span><span class=\"sy0\">;</span> N.<span class=\"me1\">Norwegian</span>|<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>n.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>N.<span class=\"me1\">Norwegian</span><span class=\"br0\">)</span>   |_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"co1\">//#10</span><br/><span class=\"kw1\">let</span>  i <span class=\"sy0\">=</span> Ring.<span class=\"me1\">PlainChanges</span> <span class=\"br0\">[</span>|I.<span class=\"me1\">Tea</span><span class=\"sy0\">;</span>     I.<span class=\"me1\">Coffee</span><span class=\"sy0\">;</span>  I.<span class=\"me1\">Milk</span><span class=\"sy0\">;</span>      I.<span class=\"me1\">Beer</span><span class=\"sy0\">;</span>   I.<span class=\"me1\">Water</span>    |<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>n.<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>I.<span class=\"me1\">Milk</span><span class=\"br0\">)</span>        |_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"co1\">//# 9</span><br/><span class=\"kw1\">let</span>  g <span class=\"sy0\">=</span> Ring.<span class=\"me1\">PlainChanges</span> <span class=\"br0\">[</span>|G.<span class=\"me1\">Dog</span><span class=\"sy0\">;</span>     G.<span class=\"me1\">Birds</span><span class=\"sy0\">;</span>   G.<span class=\"me1\">Cats</span><span class=\"sy0\">;</span>      G.<span class=\"me1\">Horse</span><span class=\"sy0\">;</span>  G.<span class=\"me1\">Zebra</span>    |<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">true</span>                  |_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span>  e <span class=\"sy0\">=</span> Ring.<span class=\"me1\">PlainChanges</span> <span class=\"br0\">[</span>|E.<span class=\"me1\">Red</span><span class=\"sy0\">;</span>     E.<span class=\"me1\">Green</span><span class=\"sy0\">;</span>   E.<span class=\"me1\">White</span><span class=\"sy0\">;</span>     E.<span class=\"me1\">Blue</span><span class=\"sy0\">;</span>   E.<span class=\"me1\">Yellow</span>   |<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>fi n E.<span class=\"me1\">Green</span> n E.<span class=\"me1\">White</span>|_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"co1\">//# 5</span><br/><span class=\"kw1\">let</span>  l <span class=\"sy0\">=</span> Ring.<span class=\"me1\">PlainChanges</span> <span class=\"br0\">[</span>|L.<span class=\"me1\">PallMall</span><span class=\"sy0\">;</span>L.<span class=\"me1\">Dunhill</span><span class=\"sy0\">;</span> L.<span class=\"me1\">BlueMaster</span><span class=\"sy0\">;</span>L.<span class=\"me1\">Prince</span><span class=\"sy0\">;</span> L.<span class=\"me1\">Blend</span>    |<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">true</span>                  |_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><br/><span class=\"kw1\">match</span> n<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>Nz<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a>.<span class=\"me1\">get</span> n<span class=\"sy0\">;</span>Iz<span class=\"sy0\">=</span><span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"sy0\">;</span>Gz<span class=\"sy0\">=</span><span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"sy0\">;</span>Ez<span class=\"sy0\">=</span><span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"sy0\">;</span>Lz<span class=\"sy0\">=</span><span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>i<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>n <span class=\"kw1\">with</span> Iz<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a>.<span class=\"me1\">get</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span> fn n.<span class=\"me1\">Nz</span> N.<span class=\"me1\">Danish</span>    n.<span class=\"me1\">Iz</span> I.<span class=\"me1\">Tea</span><span class=\"br0\">)</span>                                      <span class=\"co1\">//# 4</span><br/>       <span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>g<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>n <span class=\"kw1\">with</span> Gz<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a>.<span class=\"me1\">get</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span> fn n.<span class=\"me1\">Nz</span> N.<span class=\"me1\">Swedish</span>   n.<span class=\"me1\">Gz</span> G.<span class=\"me1\">Dog</span><span class=\"br0\">)</span>                                      <span class=\"co1\">//# 3</span><br/>       <span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>e<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>n <span class=\"kw1\">with</span> Ez<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a>.<span class=\"me1\">get</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span> fn n.<span class=\"me1\">Nz</span> N.<span class=\"me1\">English</span>   n.<span class=\"me1\">Ez</span> E.<span class=\"me1\">Red</span>   &amp;&amp;                                  <span class=\"co1\">//# 2</span><br/>                                                                                             fn n.<span class=\"me1\">Ez</span> E.<span class=\"me1\">Green</span>     n.<span class=\"me1\">Iz</span> I.<span class=\"me1\">Coffee</span>&amp;&amp;                                  <span class=\"co1\">//# 6</span><br/>                                                                                             fg n.<span class=\"me1\">Nz</span> N.<span class=\"me1\">Norwegian</span> n.<span class=\"me1\">Ez</span> E.<span class=\"me1\">Blue</span><span class=\"br0\">)</span>                                     <span class=\"co1\">//#15</span><br/>       <span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>l<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>n <span class=\"kw1\">with</span> Lz<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a>.<span class=\"me1\">get</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">tryFind</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>fn n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">PallMall</span>  n.<span class=\"me1\">Gz</span> G.<span class=\"me1\">Birds</span> &amp;&amp;                                  <span class=\"co1\">//# 7</span><br/>                                                                                             fg n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">Blend</span>     n.<span class=\"me1\">Gz</span> G.<span class=\"me1\">Cats</span>  &amp;&amp;                                  <span class=\"co1\">//#11</span><br/>                                                                                             fn n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">Prince</span>    n.<span class=\"me1\">Nz</span> N.<span class=\"me1\">German</span>&amp;&amp;                                  <span class=\"co1\">//#14</span><br/>                                                                                             fg n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">Blend</span>     n.<span class=\"me1\">Iz</span> I.<span class=\"me1\">Water</span> &amp;&amp;                                  <span class=\"co1\">//#16</span><br/>                                                                                             fg n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">Dunhill</span>   n.<span class=\"me1\">Gz</span> G.<span class=\"me1\">Horse</span> &amp;&amp;                                  <span class=\"co1\">//#12</span><br/>                                                                                             fn n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">Dunhill</span>   n.<span class=\"me1\">Ez</span> E.<span class=\"me1\">Yellow</span>&amp;&amp;                                  <span class=\"co1\">//# 8</span><br/>                                                                                             fn n.<span class=\"me1\">Iz</span> I.<span class=\"me1\">Beer</span>      n.<span class=\"me1\">Lz</span> L.<span class=\"me1\">BlueMaster</span><span class=\"br0\">)</span>  <span class=\"kw1\">with</span>                         <span class=\"co1\">//#13</span><br/>|Some<span class=\"br0\">(</span>nn<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> nn.<span class=\"me1\">Gz</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">iteri</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g <span class=\"sy0\">=</span> G.<span class=\"me1\">Zebra</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"<span class=\"es0\">\\n</span>The man who owns a zebra is\u00a0%A<span class=\"es0\">\\n</span>\"</span> nn.<span class=\"me1\">Nz</span>.<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> printfn <span class=\"st0\">\"%A\"</span> nn<br/>|None    <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"No solution found\"</span><br/>\u00a0</pre>"}, {"lang": "FormulaOne", "loc": 177, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// First, let's give some variables some values:<br/>Nationality = Englishman | Swede   | Dane       | Norwegian | German <br/>Colour      = Red        | Green   | Yellow     | Blue      | White<br/>Cigarette   = PallMall   | Dunhill | BlueMaster | Blend     | Prince<br/>Domestic    = Dog        | Bird    | Cat        | Zebra     | Horse<br/>Beverage    = Tea        | Coffee  | Milk       | Beer      | Water<br/>HouseOrder  = First      | Second  | Third      | Fourth    | Fifth <br/>\u00a0<br/>{ <br/>We use injections to make the array-elements unique.<br/>Example: 'Pet' is an array of unique elements of type 'Domestic', indexed by 'Nationality'. <br/>In the predicate 'Zebra', we use this injection 'Pet' to define the array-variable 'pet'.<br/>The symbol used is the '-&gt;&gt;'. 'Nationality-&gt;&gt;Domestic' can be read as 'Domestic(Nationality)' in \"plain array-speak\";<br/>the difference being that the elements are by definition unique.<br/>\u00a0<br/>So, in FormulaOne we use a formula like: 'pet(Swede) = Dog', which simply means that the 'Swede' (type 'Nationality') <br/>has a 'pet' (type 'Pet', which is of type 'Domestic', indexed by 'Nationality'), which appears to be a 'Dog' (type 'Domestic'). <br/>Or, one could say that the 'Swede' has been mapped to the 'Dog' (Oh, well...).<br/>}<br/>\u00a0<br/>Pet          = Nationality-&gt;&gt;Domestic<br/>Drink        = Nationality-&gt;&gt;Beverage                             <br/>HouseColour  = Nationality-&gt;&gt;Colour<br/>Smoke        = Nationality-&gt;&gt;Cigarette<br/>Order        = HouseOrder-&gt;&gt;Nationality <br/>\u00a0<br/>pred Zebra(houseColour::HouseColour, pet::Pet, smoke::Smoke, drink::Drink, order::Order) iff<br/>\u00a0<br/>// For convenience sake, some temporary place_holder variables are used.<br/>// An underscore distinguishes them:<br/>\u00a0<br/>     houseColour(green_house) = Green &amp;<br/>     houseColour(white_house) = White &amp; <br/>     houseColour(yellow_house) = Yellow &amp; <br/>     smoke(pallmall_smoker) = PallMall &amp; <br/>     smoke(blend_smoker) = Blend &amp; <br/>     smoke(dunhill_smoker) = Dunhill &amp;  <br/>     smoke(bluemaster_smoker) = BlueMaster &amp; <br/>     pet(cat_keeper) = Cat &amp; <br/>     pet(neighbour_dunhill_smoker) = Horse &amp; <br/>\u00a0<br/>{ 2. The English man lives in the red house: }<br/>     houseColour(Englishman) = Red &amp;<br/>\u00a0<br/>{ 3. The Swede has a dog: }<br/>     pet(Swede) = Dog &amp;     <br/>\u00a0<br/>{ 4. The Dane drinks tea: }<br/>     drink(Dane) = Tea &amp;  <br/>\u00a0<br/>    { 'smoke' and 'drink' are both nouns, like the other variables.<br/>      One could read the formulas like: 'the colour of the Englishman's house is Red' -&gt;<br/>     'the Swede's pet is a dog' -&gt; 'the Dane's drink is tea'.<br/>    }<br/>\u00a0<br/>{ 5. The green house is immediately to the left of the white house: }<br/>     { The local predicate 'LeftOf' determines the order: }<br/>       LeftOf(green_house, white_house, order) &amp;  <br/>\u00a0<br/>{ 6. They drink coffee in the green house: }<br/>     drink(green_house) = Coffee &amp; <br/>\u00a0<br/>{ 7. The man who smokes Pall Mall has birds: }<br/>     pet(pallmall_smoker) = Bird &amp;<br/>\u00a0<br/>{ 8. In the yellow house they smoke Dunhill: }<br/>     smoke(yellow_house) = Dunhill &amp; <br/>\u00a0<br/>{ 9. In the middle house they drink milk: }<br/>     drink(order(Third)) = Milk &amp; <br/>\u00a0<br/>{10. The Norwegian lives in the first house: }<br/>     order(First) = Norwegian &amp;  <br/>\u00a0<br/>{11. The man who smokes Blend lives in the house next to the house with cats: }<br/>     { Another local predicate 'Neighbour' makes them neighbours:}<br/>       Neighbour(blend_smoker, cat_keeper, order) &amp; <br/>\u00a0<br/>{12. In a house next to the house where they have a horse, they smoke Dunhill: }<br/>     Neighbour(dunhill_smoker, neighbour_dunhill_smoker, order) &amp;<br/>\u00a0<br/>{13. The man who smokes Blue Master drinks beer: }<br/>     drink(bluemaster_smoker) = Beer &amp;<br/>\u00a0<br/>{14. The German smokes Prince: }<br/>     smoke(German) = Prince &amp;<br/>\u00a0<br/>{15. The Norwegian lives next to the blue house: }<br/>     {10. The Norwegian lives in the first house,<br/>          so the blue house is the second house }<br/>          houseColour(order(Second)) = Blue &amp; <br/>\u00a0<br/>{16. They drink water in a house next to the house where they smoke Blend: }<br/>     drink(neighbour_blend_smoker) = Water &amp; <br/>     Neighbour(blend_smoker, neighbour_blend_smoker, order)  <br/>\u00a0<br/>{  A simplified solution would number the houses 1, 2, 3, 4, 5<br/>   which makes it easier to order the houses.<br/>   'right in the center' would become 3; 'in the first house', 1<br/>   But we stick to the original puzzle and use some local predicates.<br/>}<br/>\u00a0<br/>local pred Neighbour(neighbour1::Nationality, neighbour2::Nationality, order::Order)iff<br/>   neighbour1 &lt;&gt; neighbour2 &amp;<br/>   order(house1) = neighbour1 &amp; <br/>   order(house2) = neighbour2 &amp; <br/>   ( house1 = house2 + 1 | <br/>     house1 = house2 - 1 ) <br/>\u00a0<br/>local pred LeftOf(neighbour1::Nationality, neighbour2::Nationality, order::Order) iff <br/>   neighbour1 &lt;&gt; neighbour2 &amp;<br/>   order(house1) = neighbour1 &amp; <br/>   order(house2) = neighbour2 &amp; <br/>   house1 = house2 - 1 <br/>\u00a0<br/>{ <br/>The 'all'-query in FormulaOne:<br/>     all Zebra(houseColour, pet, smokes, drinks, order) <br/>gives, of course, only one solution, so it can be replaced by:<br/>     one Zebra(houseColour, pet, smokes, drinks, order)<br/>}<br/>\u00a0<br/>// The compacted version:<br/>\u00a0<br/>Nationality = Englishman | Swede   | Dane       | Norwegian | German <br/>Colour      = Red        | Green   | Yellow     | Blue      | White<br/>Cigarette   = PallMall   | Dunhill | BlueMaster | Blend     | Prince<br/>Domestic    = Dog        | Bird    | Cat        | Zebra     | Horse<br/>Beverage    = Tea        | Coffee  | Milk       | Beer      | Water<br/>HouseOrder  = First      | Second  | Third      | Fourth    | Fifth <br/>\u00a0<br/>Pet          = Nationality-&gt;&gt;Domestic<br/>Drink        = Nationality-&gt;&gt;Beverage                             <br/>HouseColour  = Nationality-&gt;&gt;Colour<br/>Smoke        = Nationality-&gt;&gt;Cigarette<br/>Order        = HouseOrder-&gt;&gt;Nationality <br/>\u00a0<br/>pred Zebra(houseColour::HouseColour, pet::Pet, smoke::Smoke, drink::Drink, order::Order) iff<br/>\u00a0<br/>  houseColour(green_house) = Green &amp;<br/>  houseColour(white_house) = White &amp; <br/>  houseColour(yellow_house) = Yellow &amp; <br/>  smoke(pallmall_smoker) = PallMall &amp; <br/>  smoke(blend_smoker) = Blend &amp; <br/>  smoke(dunhill_smoker) = Dunhill &amp;  <br/>  smoke(bluemaster_smoker) = BlueMaster &amp; <br/>  pet(cat_keeper) = Cat &amp; <br/>  pet(neighbour_dunhill_smoker) = Horse &amp; <br/>\u00a0<br/>  houseColour(Englishman) = Red &amp;<br/>  pet(Swede) = Dog &amp;     <br/>  drink(Dane) = Tea &amp;  <br/>  LeftOf(green_house, white_house, order) &amp;  <br/>  drink(green_house) = Coffee &amp; <br/>  pet(pallmall_smoker) = Bird &amp;<br/>  smoke(yellow_house) = Dunhill &amp; <br/>  drink(order(Third)) = Milk &amp; <br/>  order(First) = Norwegian &amp;  <br/>  Neighbour(blend_smoker, cat_keeper, order) &amp; <br/>  Neighbour(dunhill_smoker, neighbour_dunhill_smoker, order) &amp;<br/>  drink(bluemaster_smoker) = Beer &amp;<br/>  smoke(German) = Prince &amp; <br/>  houseColour(order(Second)) = Blue &amp;<br/>  drink(neighbour_blend_smoker) = Water &amp; <br/>  Neighbour(blend_smoker, neighbour_blend_smoker, order)  <br/>\u00a0<br/>local pred Neighbour(neighbour1::Nationality, neighbour2::Nationality, order::Order)iff<br/>   neighbour1 &lt;&gt; neighbour2 &amp; <br/>   order(house1) = neighbour1 &amp; order(house2) = neighbour2 &amp; <br/>   ( house1 = house2 + 1 | house1 = house2 - 1 ) <br/>\u00a0<br/>local pred LeftOf(neighbour1::Nationality, neighbour2::Nationality, order::Order) iff <br/>   neighbour1 &lt;&gt; neighbour2 &amp;<br/>   order(house1) = neighbour1 &amp; order(house2) = neighbour2 &amp; <br/>   house1 = house2 - 1<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 61, "block": "<pre class=\"text highlighted_source\">leftOf \u00a0:=function(setA, vA, setB, vB)<br/>local i;<br/>for i in [1..4] do<br/>   if ( setA[i] = vA) and  (setB[i+1] = vB) then return true\u00a0;fi;<br/>od;<br/> return false;<br/>end;<br/>\u00a0<br/>nextTo \u00a0:=function(setA, vA, setB, vB)<br/>local i;<br/>for i in [1..4] do<br/>   if ( setA[i] = vA) and  (setB[i+1] = vB) then return true\u00a0;fi;<br/>   if ( setB[i] = vB) and  (setA[i+1] = vA) then return true\u00a0;fi;<br/>od;<br/>return false;<br/>end;<br/>\u00a0<br/>\u00a0<br/>requires\u00a0:= function(setA, vA, setB, vB)<br/>    local i;<br/>      for i in [1..5] do<br/>        if ( setA[i] = vA) and  (setB[i] = vB) then return true\u00a0;fi;<br/>      od;<br/> return false;<br/>end;<br/>\u00a0<br/>\u00a0<br/>pcolors\u00a0:=PermutationsList([\"white\" ,\"yellow\" ,\"blue\" ,\"red\" ,\"green\"]);<br/>pcigars\u00a0:=PermutationsList([\"blends\", \"pall_mall\", \"prince\", \"bluemasters\", \"dunhill\"]);<br/>pnats:=PermutationsList([\"german\", \"swedish\", \"british\", \"norwegian\", \"danish\"]);<br/>pdrinks\u00a0:=PermutationsList([\"beer\", \"water\", \"tea\", \"milk\", \"coffee\"]);<br/>ppets \u00a0:=PermutationsList([\"birds\", \"cats\", \"horses\", \"fish\", \"dogs\"]);<br/>\u00a0<br/>\u00a0<br/>for colors in pcolors do<br/>if not (leftOf(colors,\"green\",colors,\"white\")) then continue\u00a0;fi;<br/>for nats in pnats do<br/>if not (requires(nats,\"british\",colors,\"red\")) then  continue\u00a0;fi;<br/>if not (nats[1]=\"norwegian\") then continue\u00a0;fi;<br/>if not (nextTo(nats,\"norwegian\",colors,\"blue\")) then continue\u00a0;fi;<br/>for pets in ppets do<br/>if not (requires(nats,\"swedish\",pets,\"dogs\")) then  continue\u00a0;fi;<br/>for drinks in pdrinks do<br/>if not (drinks[3]=\"milk\") then continue\u00a0;fi;<br/>if not (requires(colors,\"green\",drinks,\"coffee\")) then continue\u00a0;fi;<br/>if not (requires(nats,\"danish\",drinks,\"tea\")) then  continue\u00a0;fi;<br/>for cigars in pcigars do<br/>if not (nextTo(pets,\"horses\",cigars,\"dunhill\")) then continue\u00a0;fi;<br/>if not (requires(cigars,\"pall_mall\",pets,\"birds\")) then  continue\u00a0;fi;<br/>if not (nextTo(cigars,\"blends\",drinks,\"water\")) then  continue\u00a0;fi;<br/>if not (nextTo(cigars,\"blends\",pets,\"cats\")) then  continue\u00a0;fi;<br/>if not (requires(nats,\"german\",cigars,\"prince\")) then  continue\u00a0;fi;<br/>if not (requires(colors,\"yellow\",cigars,\"dunhill\")) then continue\u00a0;fi;<br/>if not (requires(cigars,\"bluemasters\",drinks,\"beer\")) then  continue\u00a0;fi;<br/>Print(colors,\"\\n\");<br/>Print(nats,\"\\n\");<br/>Print(drinks,\"\\n\");<br/>Print(pets,\"\\n\");<br/>Print(cigars,\"\\n\");<br/>od;od;od;od;od;<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 294, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"fmt\"</span><br/>        <span class=\"st0\">\"log\"</span><br/>        <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Define some types</span><br/>\u00a0<br/><span class=\"kw1\">type</span> HouseSet <span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">]</span><span class=\"sy3\">*</span>House<br/><span class=\"kw1\">type</span> House <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        n Nationality<br/>        c Colour<br/>        a Animal<br/>        d Drink<br/>        s Smoke<br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> Nationality <span class=\"kw4\">int8</span><br/><span class=\"kw1\">type</span> Colour <span class=\"kw4\">int8</span><br/><span class=\"kw1\">type</span> Animal <span class=\"kw4\">int8</span><br/><span class=\"kw1\">type</span> Drink <span class=\"kw4\">int8</span><br/><span class=\"kw1\">type</span> Smoke <span class=\"kw4\">int8</span><br/>\u00a0<br/><span class=\"co1\">// Define the possible values</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        English Nationality <span class=\"sy2\">=</span> iota<br/>        Swede<br/>        Dane<br/>        Norwegian<br/>        German<br/><span class=\"sy1\">)</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        Red Colour <span class=\"sy2\">=</span> iota<br/>        Green<br/>        White<br/>        Yellow<br/>        Blue<br/><span class=\"sy1\">)</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        Dog Animal <span class=\"sy2\">=</span> iota<br/>        Birds<br/>        Cats<br/>        Horse<br/>        Zebra<br/><span class=\"sy1\">)</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        Tea Drink <span class=\"sy2\">=</span> iota<br/>        Coffee<br/>        Milk<br/>        Beer<br/>        Water<br/><span class=\"sy1\">)</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        PallMall Smoke <span class=\"sy2\">=</span> iota<br/>        Dunhill<br/>        Blend<br/>        BlueMaster<br/>        Prince<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// And how to print them</span><br/>\u00a0<br/><span class=\"kw1\">var</span> nationalities <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"English\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Swede\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Dane\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Norwegian\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"German\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> colours <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"red\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"green\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"white\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"yellow\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"blue\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> animals <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"dog\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"birds\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"cats\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"horse\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"zebra\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> drinks <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"tea\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"coffee\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"milk\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"beer\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"water\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> smokes <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Pall Mall\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Dunhill\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Blend\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Blue Master\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Prince\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>n Nationality<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> nationalities<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c Colour<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span>      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> colours<span class=\"sy1\">[</span>c<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a Animal<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span>      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> animals<span class=\"sy1\">[</span>a<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d Drink<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span>       <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> drinks<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s Smoke<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span>       <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> smokes<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h House<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%-9s \u00a0%-6s \u00a0%-5s \u00a0%-6s \u00a0%s\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>n<span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>c<span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>a<span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>d<span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>hs HouseSet<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        lines <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>hs<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hs <span class=\"sy1\">{</span><br/>                s <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \u00a0%s\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> h<span class=\"sy1\">)</span><br/>                lines <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>lines<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>lines<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Simple brute force solution</span><br/>\u00a0<br/><span class=\"kw4\">func</span> simpleBruteForce<span class=\"sy1\">()</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> HouseSet<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> v <span class=\"sy1\">[]</span>House<br/>        <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nationalities <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> colours <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> animals <span class=\"sy1\">{</span><br/>                                <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> drinks <span class=\"sy1\">{</span><br/>                                        <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> smokes <span class=\"sy1\">{</span><br/>                                                h <span class=\"sy2\">:=</span> House<span class=\"sy1\">{</span><br/>                                                        n<span class=\"sy1\">:</span> Nationality<span class=\"sy1\">(</span>n<span class=\"sy1\">),</span><br/>                                                        c<span class=\"sy1\">:</span> Colour<span class=\"sy1\">(</span>c<span class=\"sy1\">),</span><br/>                                                        a<span class=\"sy1\">:</span> Animal<span class=\"sy1\">(</span>a<span class=\"sy1\">),</span><br/>                                                        d<span class=\"sy1\">:</span> Drink<span class=\"sy1\">(</span>d<span class=\"sy1\">),</span><br/>                                                        s<span class=\"sy1\">:</span> Smoke<span class=\"sy1\">(</span>s<span class=\"sy1\">),</span><br/>                                                <span class=\"sy1\">}</span><br/>                                                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>h<span class=\"sy3\">.</span>Valid<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                                                        <span class=\"kw1\">continue</span><br/>                                                <span class=\"sy1\">}</span><br/>                                                v <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>v<span class=\"sy1\">,</span> h<span class=\"sy1\">)</span><br/>                                        <span class=\"sy1\">}</span><br/>                                <span class=\"sy1\">}</span><br/>                        <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        n <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>v<span class=\"sy1\">)</span><br/>        log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Generated\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"st0\">\"valid houses\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>        combos <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        first <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        valid <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">var</span> validSet HouseSet<br/>        <span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> a &lt; n<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>a<span class=\"sy1\">]</span><span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> Norwegian <span class=\"sy1\">{</span> <span class=\"co1\">// Condition 10:</span><br/>                        <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> b &lt; n<span class=\"sy1\">;</span> b<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">if</span> b <span class=\"sy3\">==</span> a <span class=\"sy1\">{</span><br/>                                <span class=\"kw1\">continue</span><br/>                        <span class=\"sy1\">}</span><br/>                        <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>b<span class=\"sy1\">]</span><span class=\"sy3\">.</span>anyDups<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">[</span>a<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                                <span class=\"kw1\">continue</span><br/>                        <span class=\"sy1\">}</span><br/>                        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; n<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                                <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> b <span class=\"sy3\">||</span> c <span class=\"sy3\">==</span> a <span class=\"sy1\">{</span><br/>                                        <span class=\"kw1\">continue</span><br/>                                <span class=\"sy1\">}</span><br/>                                <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>c<span class=\"sy1\">]</span><span class=\"sy3\">.</span>d <span class=\"sy2\">!=</span> Milk <span class=\"sy1\">{</span> <span class=\"co1\">// Condition 9:</span><br/>                                        <span class=\"kw1\">continue</span><br/>                                <span class=\"sy1\">}</span><br/>                                <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>c<span class=\"sy1\">]</span><span class=\"sy3\">.</span>anyDups<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">[</span>b<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>a<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                                        <span class=\"kw1\">continue</span><br/>                                <span class=\"sy1\">}</span><br/>                                <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> d &lt; n<span class=\"sy1\">;</span> d<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                                        <span class=\"kw1\">if</span> d <span class=\"sy3\">==</span> c <span class=\"sy3\">||</span> d <span class=\"sy3\">==</span> b <span class=\"sy3\">||</span> d <span class=\"sy3\">==</span> a <span class=\"sy1\">{</span><br/>                                                <span class=\"kw1\">continue</span><br/>                                        <span class=\"sy1\">}</span><br/>                                        <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span><span class=\"sy3\">.</span>anyDups<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">[</span>c<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>b<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>a<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                                                <span class=\"kw1\">continue</span><br/>                                        <span class=\"sy1\">}</span><br/>                                        <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e &lt; n<span class=\"sy1\">;</span> e<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                                                <span class=\"kw1\">if</span> e <span class=\"sy3\">==</span> d <span class=\"sy3\">||</span> e <span class=\"sy3\">==</span> c <span class=\"sy3\">||</span> e <span class=\"sy3\">==</span> b <span class=\"sy3\">||</span> e <span class=\"sy3\">==</span> a <span class=\"sy1\">{</span><br/>                                                        <span class=\"kw1\">continue</span><br/>                                                <span class=\"sy1\">}</span><br/>                                                <span class=\"kw1\">if</span> v<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span><span class=\"sy3\">.</span>anyDups<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">[</span>d<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>c<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>b<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>a<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                                                        <span class=\"kw1\">continue</span><br/>                                                <span class=\"sy1\">}</span><br/>                                                combos<span class=\"sy2\">++</span><br/>                                                set <span class=\"sy2\">:=</span> HouseSet<span class=\"sy1\">{</span>&amp;v<span class=\"sy1\">[</span>a<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>b<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>c<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>d<span class=\"sy1\">],</span> &amp;v<span class=\"sy1\">[</span>e<span class=\"sy1\">]}</span><br/>                                                <span class=\"kw1\">if</span> set<span class=\"sy3\">.</span>Valid<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                                                        valid<span class=\"sy2\">++</span><br/>                                                        <span class=\"kw1\">if</span> valid <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                                                                first <span class=\"sy2\">=</span> combos<br/>                                                        <span class=\"sy1\">}</span><br/>                                                        validSet <span class=\"sy2\">=</span> set<br/>                                                        <span class=\"co1\">//return set</span><br/>                                                <span class=\"sy1\">}</span><br/>                                        <span class=\"sy1\">}</span><br/>                                <span class=\"sy1\">}</span><br/>                        <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        log<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Tested\"</span><span class=\"sy1\">,</span> first<span class=\"sy1\">,</span> <span class=\"st0\">\"different combinations of valid houses before finding solution\"</span><span class=\"sy1\">)</span><br/>        log<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Tested\"</span><span class=\"sy1\">,</span> combos<span class=\"sy1\">,</span> <span class=\"st0\">\"different combinations of valid houses in total\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> valid<span class=\"sy1\">,</span> validSet<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// anyDups returns true if h as any duplicate attributes with any of the specified houses</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h <span class=\"sy3\">*</span>House<span class=\"sy1\">)</span> anyDups<span class=\"sy1\">(</span>list <span class=\"sy4\">...</span><span class=\"sy3\">*</span>House<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>n <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>c <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>c <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>a <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>a <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>d <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>d <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>s <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h <span class=\"sy3\">*</span>House<span class=\"sy1\">)</span> Valid<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// Condition 2:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> English &amp;&amp; h<span class=\"sy3\">.</span>c <span class=\"sy2\">!=</span> Red <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> English &amp;&amp; h<span class=\"sy3\">.</span>c <span class=\"sy3\">==</span> Red <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 3:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> Swede &amp;&amp; h<span class=\"sy3\">.</span>a <span class=\"sy2\">!=</span> Dog <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> Swede &amp;&amp; h<span class=\"sy3\">.</span>a <span class=\"sy3\">==</span> Dog <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 4:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> Dane &amp;&amp; h<span class=\"sy3\">.</span>d <span class=\"sy2\">!=</span> Tea <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> Dane &amp;&amp; h<span class=\"sy3\">.</span>d <span class=\"sy3\">==</span> Tea <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 6:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>c <span class=\"sy3\">==</span> Green &amp;&amp; h<span class=\"sy3\">.</span>d <span class=\"sy2\">!=</span> Coffee <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>c <span class=\"sy2\">!=</span> Green &amp;&amp; h<span class=\"sy3\">.</span>d <span class=\"sy3\">==</span> Coffee <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 7:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>a <span class=\"sy3\">==</span> Birds &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy2\">!=</span> PallMall <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>a <span class=\"sy2\">!=</span> Birds &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> PallMall <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 8:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>c <span class=\"sy3\">==</span> Yellow &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy2\">!=</span> Dunhill <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>c <span class=\"sy2\">!=</span> Yellow &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> Dunhill <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 11:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>a <span class=\"sy3\">==</span> Cats &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> Blend <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 12:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>a <span class=\"sy3\">==</span> Horse &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> Dunhill <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 13:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>d <span class=\"sy3\">==</span> Beer &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy2\">!=</span> BlueMaster <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>d <span class=\"sy2\">!=</span> Beer &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> BlueMaster <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 14:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> German &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy2\">!=</span> Prince <span class=\"sy3\">||</span> h<span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> German &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> Prince <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 15:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>n <span class=\"sy3\">==</span> Norwegian &amp;&amp; h<span class=\"sy3\">.</span>c <span class=\"sy3\">==</span> Blue <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 16:</span><br/>        <span class=\"kw1\">if</span> h<span class=\"sy3\">.</span>d <span class=\"sy3\">==</span> Water &amp;&amp; h<span class=\"sy3\">.</span>s <span class=\"sy3\">==</span> Blend <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>hs <span class=\"sy3\">*</span>HouseSet<span class=\"sy1\">)</span> Valid<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        ni <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>Nationality<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        ci <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>Colour<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        ai <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>Animal<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        di <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>Drink<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        si <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>Smoke<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hs <span class=\"sy1\">{</span><br/>                ni<span class=\"sy1\">[</span>h<span class=\"sy3\">.</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>                ci<span class=\"sy1\">[</span>h<span class=\"sy3\">.</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>                ai<span class=\"sy1\">[</span>h<span class=\"sy3\">.</span>a<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>                di<span class=\"sy1\">[</span>h<span class=\"sy3\">.</span>d<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>                si<span class=\"sy1\">[</span>h<span class=\"sy3\">.</span>s<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 5:</span><br/>        <span class=\"kw1\">if</span> ci<span class=\"sy1\">[</span>Green<span class=\"sy1\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy2\">!=</span> ci<span class=\"sy1\">[</span>White<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 11:</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"sy1\">(</span>ai<span class=\"sy1\">[</span>Cats<span class=\"sy1\">],</span> si<span class=\"sy1\">[</span>Blend<span class=\"sy1\">])</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 12:</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"sy1\">(</span>ai<span class=\"sy1\">[</span>Horse<span class=\"sy1\">],</span> si<span class=\"sy1\">[</span>Dunhill<span class=\"sy1\">])</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 15:</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"sy1\">(</span>ni<span class=\"sy1\">[</span>Norwegian<span class=\"sy1\">],</span> ci<span class=\"sy1\">[</span>Blue<span class=\"sy1\">])</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 16:</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"sy1\">(</span>di<span class=\"sy1\">[</span>Water<span class=\"sy1\">],</span> si<span class=\"sy1\">[</span>Blend<span class=\"sy1\">])</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Condition 9: (already tested elsewhere)</span><br/>        <span class=\"kw1\">if</span> hs<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>d <span class=\"sy2\">!=</span> Milk <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// Condition 10: (already tested elsewhere)</span><br/>        <span class=\"kw1\">if</span> hs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>n <span class=\"sy2\">!=</span> Norwegian <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dist<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> a &gt; b <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> a <span class=\"sy3\">-</span> b<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> b <span class=\"sy3\">-</span> a<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>SetFlags<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>        n<span class=\"sy1\">,</span> sol <span class=\"sy2\">:=</span> simpleBruteForce<span class=\"sy1\">()</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">\"solution found\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>sol<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 91, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Applicative <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>foldM<span class=\"sy0\">,</span> forM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><span class=\"br0\">(</span>\\\\<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- types</span><br/><span class=\"kw1\">data</span> House <span class=\"sy0\">=</span> House   <br/>    <span class=\"br0\">{</span> color <span class=\"sy0\">::</span> Color      <span class=\"co1\">-- &lt;trait&gt;\u00a0:: House -&gt; &lt;Trait&gt;</span><br/>    <span class=\"sy0\">,</span> man   <span class=\"sy0\">::</span> Man<br/>    <span class=\"sy0\">,</span> pet   <span class=\"sy0\">::</span> Pet<br/>    <span class=\"sy0\">,</span> drink <span class=\"sy0\">::</span> Drink<br/>    <span class=\"sy0\">,</span> smoke <span class=\"sy0\">::</span> Smoke<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Color <span class=\"sy0\">=</span> Red <span class=\"sy0\">|</span> Green <span class=\"sy0\">|</span> Blue <span class=\"sy0\">|</span> Yellow <span class=\"sy0\">|</span> White<br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Man <span class=\"sy0\">=</span> Eng <span class=\"sy0\">|</span> Swe <span class=\"sy0\">|</span> Dan <span class=\"sy0\">|</span> Nor <span class=\"sy0\">|</span> Ger<br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Pet <span class=\"sy0\">=</span> Dog <span class=\"sy0\">|</span> Birds <span class=\"sy0\">|</span> Cats <span class=\"sy0\">|</span> Horse <span class=\"sy0\">|</span> Zebra<br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Drink <span class=\"sy0\">=</span> Coffee <span class=\"sy0\">|</span> Tea <span class=\"sy0\">|</span> Milk <span class=\"sy0\">|</span> Beer <span class=\"sy0\">|</span> Water<br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Smoke <span class=\"sy0\">=</span> PallMall <span class=\"sy0\">|</span> Dunhill <span class=\"sy0\">|</span> Blend <span class=\"sy0\">|</span> BlueMaster <span class=\"sy0\">|</span> Prince<br/>    <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Solution <span class=\"sy0\">=</span> <span class=\"br0\">[</span>House<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  forM<span class=\"sy0\">_</span> solutions <span class=\"sy0\">$</span> \\sol <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> sol<br/>                            <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"----\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"No More Solutions\"</span><br/>\u00a0<br/>\u00a0<br/>solutions <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Solution<span class=\"br0\">]</span><br/>solutions <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> finalCheck <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> foldM next <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>      <span class=\"co1\">-- NOTE: list of houses is generated in reversed order</span><br/>      next <span class=\"sy0\">::</span> Solution <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Solution<span class=\"br0\">]</span><br/>      next sol pos <span class=\"sy0\">=</span> <span class=\"br0\">[</span>h:sol <span class=\"sy0\">|</span> h <span class=\"sy0\">&lt;-</span> newHouses sol<span class=\"sy0\">,</span> consistent h pos<span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/>newHouses <span class=\"sy0\">::</span> Solution <span class=\"sy0\">-&gt;</span> Solution<br/>newHouses sol <span class=\"sy0\">=</span>    <span class=\"co1\">-- all combinations of traits not yet used</span><br/>    House <span class=\"sy0\">&lt;$&gt;</span> new color <span class=\"sy0\">&lt;*&gt;</span> new man <span class=\"sy0\">&lt;*&gt;</span> new pet <span class=\"sy0\">&lt;*&gt;</span> new drink <span class=\"sy0\">&lt;*&gt;</span> new smoke<br/>    <span class=\"kw1\">where</span><br/>      new trait <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a> <span class=\"sy0\">..</span><span class=\"br0\">]</span> \\\\ <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> trait sol  <span class=\"co1\">--\u00a0:: [&lt;Trait&gt;]</span><br/>\u00a0<br/>\u00a0<br/>consistent <span class=\"sy0\">::</span> House <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>consistent house pos <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a>                  <span class=\"co1\">-- consistent with the rules:</span><br/>    <span class=\"br0\">[</span> man   `is` Eng     <span class=\"sy0\">&lt;=&gt;</span>   color `is` Red              <span class=\"co1\">--  2</span><br/>    <span class=\"sy0\">,</span> man   `is` Swe     <span class=\"sy0\">&lt;=&gt;</span>   pet   `is` Dog              <span class=\"co1\">--  3</span><br/>    <span class=\"sy0\">,</span> man   `is` Dan     <span class=\"sy0\">&lt;=&gt;</span>   drink `is` Tea              <span class=\"co1\">--  4</span><br/>    <span class=\"sy0\">,</span> color `is` Green   <span class=\"sy0\">&lt;=&gt;</span>   drink `is` Coffee           <span class=\"co1\">--  6</span><br/>    <span class=\"sy0\">,</span> pet   `is` Birds   <span class=\"sy0\">&lt;=&gt;</span>   smoke `is` PallMall         <span class=\"co1\">--  7</span><br/>    <span class=\"sy0\">,</span> color `is` Yellow  <span class=\"sy0\">&lt;=&gt;</span>   smoke `is` Dunhill          <span class=\"co1\">--  8</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"sy0\">&lt;=&gt;</span>   drink `is` Milk             <span class=\"co1\">--  9</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"sy0\">&lt;=&gt;</span>   man   `is` Nor              <span class=\"co1\">-- 10</span><br/>    <span class=\"sy0\">,</span> drink `is` Beer    <span class=\"sy0\">&lt;=&gt;</span>   smoke `is` BlueMaster       <span class=\"co1\">-- 13</span><br/>    <span class=\"sy0\">,</span> man   `is` Ger     <span class=\"sy0\">&lt;=&gt;</span>   smoke `is` Prince           <span class=\"co1\">-- 14</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>      <span class=\"kw1\">infix</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&lt;=&gt;</span><br/>      p <span class=\"sy0\">&lt;=&gt;</span> q  <span class=\"sy0\">=</span>  p house <span class=\"sy0\">==</span> q house   <span class=\"co1\">-- both True or both False</span><br/>\u00a0<br/>\u00a0<br/>is <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>House <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> House <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/><span class=\"br0\">(</span>trait `is` value<span class=\"br0\">)</span> house  <span class=\"sy0\">=</span>  trait house <span class=\"sy0\">==</span> value<br/>\u00a0<br/>\u00a0<br/>finalCheck <span class=\"sy0\">::</span> <span class=\"br0\">[</span>House<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>finalCheck solution <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a>                    <span class=\"co1\">-- fulfills the rules:</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span>color `is` Green<span class=\"br0\">)</span>   `leftOf` <span class=\"br0\">(</span>color `is` White<span class=\"br0\">)</span>  <span class=\"co1\">--  5</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span>smoke `is` Blend  <span class=\"br0\">)</span> `nextTo` <span class=\"br0\">(</span>pet   `is` Cats <span class=\"br0\">)</span>  <span class=\"co1\">-- 11</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span>smoke `is` Dunhill<span class=\"br0\">)</span> `nextTo` <span class=\"br0\">(</span>pet   `is` Horse<span class=\"br0\">)</span>  <span class=\"co1\">-- 12</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span>color `is` Blue   <span class=\"br0\">)</span> `nextTo` <span class=\"br0\">(</span>man   `is` Nor  <span class=\"br0\">)</span>  <span class=\"co1\">-- 15</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span>smoke `is` Blend  <span class=\"br0\">)</span> `nextTo` <span class=\"br0\">(</span>drink `is` Water<span class=\"br0\">)</span>  <span class=\"co1\">-- 16</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>      nextTo <span class=\"sy0\">::</span> <span class=\"br0\">(</span>House <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>House <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>      nextTo p q <span class=\"sy0\">=</span> leftOf p q <span class=\"sy0\">||</span> leftOf q p<br/>      leftOf p q <br/>          <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span>:h:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> p<span class=\"br0\">)</span> solution <span class=\"sy0\">=</span> q h<br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>                               <span class=\"sy0\">=</span> False</pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\">ehs=: <span class=\"nu0\">5</span>$a:<br/>\u00a0<br/>cr=: <span class=\"sy0\">((</span><span class=\"st_h\">'English'</span>;<span class=\"st_h\">'red'</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>} ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span><span class=\"st_h\">'Dane'</span>;<span class=\"st_h\">'tea'</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span>}ehs<br/>cr=: cr, <span class=\"sy0\">((</span><span class=\"st_h\">'German'</span>;<span class=\"st_h\">'Prince'</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">4</span>}ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span><span class=\"st_h\">'Swede'</span>;<span class=\"st_h\">'dog'</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> }ehs<br/>\u00a0<br/>cs=: &lt;<span class=\"sy0\">(</span><span class=\"st_h\">'PallMall'</span>;<span class=\"st_h\">'birds'</span><span class=\"sy0\">)</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span>}ehs<br/>cs=: cs, <span class=\"sy0\">((</span><span class=\"st_h\">'yellow'</span>;<span class=\"st_h\">'Dunhill'</span><span class=\"sy0\">)</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span>}ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span><span class=\"st_h\">'BlueMaster'</span>;<span class=\"st_h\">'beer'</span><span class=\"sy0\">)</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span>}ehs<br/>\u00a0<br/>lof=: <span class=\"sy0\">((</span><span class=\"st_h\">'coffee'</span>;<span class=\"st_h\">'green'</span><span class=\"sy0\">)</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span>}ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'white'</span><span class=\"sy0\">)</span><span class=\"nu0\">3</span>}ehs<br/>\u00a0<br/>next=: &lt;<span class=\"sy0\">((</span>&lt;<span class=\"st_h\">'Blend'</span><span class=\"sy0\">)</span> <span class=\"nu0\">4</span> }ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'water'</span><span class=\"sy0\">)</span><span class=\"nu0\">2</span>}ehs<br/>next=: next,&lt;<span class=\"sy0\">((</span>&lt;<span class=\"st_h\">'Blend'</span><span class=\"sy0\">)</span> <span class=\"nu0\">4</span> }ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'cats'</span><span class=\"sy0\">)</span><span class=\"nu0\">1</span>}ehs<br/>next=: next,&lt;<span class=\"sy0\">((</span>&lt;<span class=\"st_h\">'Dunhill'</span><span class=\"sy0\">)</span> <span class=\"nu0\">4</span>}ehs<span class=\"sy0\">)</span>;&lt;<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'horse'</span><span class=\"sy0\">)</span><span class=\"nu0\">1</span>}ehs</pre>"}, {"lang": "Java", "loc": 222, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">zebra</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LineOfPuzzle <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acloneable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Cloneable</span></a><span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> order<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> nation<span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> color<span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> animal<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> drink<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cigarette<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> LineOfPuzzle rightNeighbor<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> LineOfPuzzle leftNeighbor<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> PuzzleSet<span class=\"sy0\">&lt;</span>LineOfPuzzle<span class=\"sy0\">&gt;</span> undefNeighbors<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> LineOfPuzzle <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> order, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> nation, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> color, <br/>                         <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> animal, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> drink, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cigarette<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span><span class=\"sy0\">=</span>animal<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span><span class=\"sy0\">=</span>cigarette<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">color</span><span class=\"sy0\">=</span>color<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span><span class=\"sy0\">=</span>drink<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span><span class=\"sy0\">=</span>nation<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">order</span><span class=\"sy0\">=</span>order<span class=\"sy0\">;</span>                <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> getOrder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> order<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setOrder<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">=</span> order<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getNation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> nation<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setNation<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> nation<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span> <span class=\"sy0\">=</span> nation<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getColor<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> color<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setColor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> color<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getAnimal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> animal<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setAnimal<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> animal<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span> <span class=\"sy0\">=</span> animal<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getDrink<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> drink<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setDrink<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> drink<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span> <span class=\"sy0\">=</span> drink<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getCigarette<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> cigarette<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setCigarette<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cigarette<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span> <span class=\"sy0\">=</span> cigarette<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Overrides object equal method<br/>     * @param obj<br/>     * @return<br/>     */</span><br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> equals<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>obj <span class=\"kw1\">instanceof</span> LineOfPuzzle<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            LineOfPuzzle searchLine <span class=\"sy0\">=</span> <span class=\"br0\">(</span>LineOfPuzzle<span class=\"br0\">)</span>obj<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span>  <span class=\"kw1\">this</span>.<span class=\"me1\">getWholeLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>searchLine.<span class=\"me1\">getWholeLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getFactsCount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> facts <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getNation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getColor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getAnimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getCigarette</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        facts<span class=\"sy0\">+=</span><span class=\"kw1\">this</span>.<span class=\"me1\">getDrink</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> facts<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getCommonFactsCount<span class=\"br0\">(</span>LineOfPuzzle lineOfFacts<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> ordrCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">order</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> lineOfFacts.<span class=\"me1\">getOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span><br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">order</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">==</span> lineOfFacts.<span class=\"me1\">getOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>        <br/>\u00a0<br/>        <span class=\"kw4\">int</span> natnCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">nation</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> lineOfFacts.<span class=\"me1\">getNation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getNation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> colrCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">color</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> lineOfFacts.<span class=\"me1\">getColor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">color</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getColor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> petsCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">animal</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getAnimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getAnimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> cigrCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> lineOfFacts.<span class=\"me1\">getCigarette</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getCigarette</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> drnkCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">drink</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> lineOfFacts.<span class=\"me1\">getDrink</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span>.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>lineOfFacts.<span class=\"me1\">getDrink</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ordrCmp <span class=\"sy0\">+</span> natnCmp <span class=\"sy0\">+</span> colrCmp <span class=\"sy0\">+</span> petsCmp <span class=\"sy0\">+</span> cigrCmp <span class=\"sy0\">+</span> drnkCmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> addUndefindedNeighbor<span class=\"br0\">(</span>LineOfPuzzle newNeighbor<span class=\"br0\">)</span><span class=\"br0\">{</span>        <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">undefNeighbors</span><span class=\"sy0\">==</span><span class=\"kw2\">null</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">undefNeighbors</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PuzzleSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">undefNeighbors</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>newNeighbor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasUndefNeighbors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">undefNeighbors</span><span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"kw1\">public</span> PuzzleSet<span class=\"sy0\">&lt;</span>LineOfPuzzle<span class=\"sy0\">&gt;</span> getUndefNeighbors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">undefNeighbors</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setLeftNeighbor<span class=\"br0\">(</span>LineOfPuzzle leftNeighbor<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">leftNeighbor</span> <span class=\"sy0\">=</span> leftNeighbor<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">leftNeighbor</span>.<span class=\"me1\">setOrder</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setRightNeighbor<span class=\"br0\">(</span>LineOfPuzzle rightNeighbor<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">rightNeighbor</span><span class=\"sy0\">=</span>rightNeighbor<span class=\"sy0\">;</span>                    <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">rightNeighbor</span>.<span class=\"me1\">setOrder</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasLeftNeighbor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>leftNeighbor<span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> LineOfPuzzle getLeftNeighbor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">leftNeighbor</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasNeighbor<span class=\"br0\">(</span><span class=\"kw4\">int</span> direction<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>leftNeighbor<span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>rightNeighbor<span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasRightNeighbor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>rightNeighbor<span class=\"sy0\">!=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"kw1\">public</span> LineOfPuzzle getRightNeighbor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">rightNeighbor</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> LineOfPuzzle getNeighbor<span class=\"br0\">(</span><span class=\"kw4\">int</span> direction<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">leftNeighbor</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">rightNeighbor</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getWholeLine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sLine <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">color</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span> <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span>                       <br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                       <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> sLine<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>    <br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> hashCode<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> sLine <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                     <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                     <span class=\"kw1\">this</span>.<span class=\"me1\">color</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span> <br/>                     <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                     <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span><br/>                     <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span><br/>                <span class=\"br0\">)</span>.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sLine<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>    <br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> merge<span class=\"br0\">(</span>LineOfPuzzle mergedLine<span class=\"br0\">)</span><span class=\"br0\">{</span>        <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">order</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">order</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">nation</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">nation</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">nation</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">color</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">color</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">animal</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">animal</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">drink</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">drink</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">drink</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">cigarette</span> <span class=\"sy0\">=</span> mergedLine.<span class=\"me1\">cigarette</span><span class=\"sy0\">;</span>            <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">public</span> LineOfPuzzle clone<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>LineOfPuzzle<span class=\"br0\">)</span> <span class=\"kw1\">super</span>.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aclonenotsupportedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">CloneNotSupportedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>            e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntimeexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RuntimeException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Attempt to unify the input object with the specified object<br/>def unify( object ):<br/>  # Attempt to unify the input object with the specified tag:value<br/>  def unify2(tag; value): <br/>    if . == null then null<br/>    elif .[tag] == value then .<br/>    elif .[tag] == null then .[tag] = value<br/>    else null <br/>    end;<br/>  reduce (object|keys[]) as $key<br/>    (.; unify2($key; object[$key]) );<br/>\u00a0<br/># Input: an array<br/># Output: if the i-th element can be made to satisfy the condition,<br/># then the updated array, otherwise empty.<br/>def enforce(i; cond):<br/>  if 0 &lt;= i and i &lt; length<br/>  then<br/>    (.[i] | cond) as $ans<br/>    | if $ans then .[i] = $ans else empty end<br/>  else empty<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function make(str, test = (_) -&gt; true)<br/>  collect( filter(test, permutations(split(str))) )<br/>end<br/>\u00a0<br/>men = make(\"danish english german norwegian swedish\",<br/>           x -&gt; \"norwegian\" == x[1])<br/>\u00a0<br/>drinks = make(\"beer coffee milk tea water\", x -&gt; \"milk\" == x[3])<br/>\u00a0<br/>colors = make(\"blue green red white yellow\",<br/>              x -&gt; 1 == findfirst(x, \"white\") - findfirst(x, \"green\"))<br/>\u00a0<br/>pets = make(\"birds cats dog horse zebra\")<br/>\u00a0<br/>smokes = make(\"blend blue-master dunhill pall-mall prince\")<br/>\u00a0<br/>function eq(x, xs, y, ys)<br/>  findfirst(xs, x) == findfirst(ys, y)<br/>end<br/>\u00a0<br/>function adj(x, xs, y, ys)<br/>  1 == abs(findfirst(xs, x) - findfirst(ys, y))<br/>end<br/>\u00a0<br/>for m = men, c = colors<br/>  if eq(\"red\",c, \"english\",m) &amp;&amp; adj(\"norwegian\",m, \"blue\",c)<br/>    for d = drinks<br/>      if eq(\"danish\",m, \"tea\",d) &amp;&amp; eq(\"coffee\",d,\"green\",c)<br/>        for s = smokes<br/>          if eq(\"yellow\",c,\"dunhill\",s) &amp;&amp;<br/>             eq(\"blue-master\",s,\"beer\",d) &amp;&amp;<br/>             eq(\"german\",m,\"prince\",s)<br/>            for p = pets<br/>              if eq(\"birds\",p,\"pall-mall\",s) &amp;&amp;<br/>                 eq(\"swedish\",m,\"dog\",p) &amp;&amp;<br/>                 adj(\"blend\",s,\"cats\",p) &amp;&amp;<br/>                 adj(\"horse\",p,\"dunhill\",s)<br/>                println(\"Zebra is owned by \", m[findfirst(p,\"zebra\")])<br/>                println(\"Houses:\")<br/>                for line = mapslices(xs -&gt; join( map(s-&gt;rpad(s,12), xs)),<br/>                                     [p m c d s], 2)<br/>                  println(line)<br/>                end<br/>              end<br/>            end<br/>          end<br/>        end<br/>      end <br/>    end<br/>  end<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 114, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun nextPerm<span class=\"br0\">(</span>perm<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> perm.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in size - <span class=\"nu0\">2</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>perm<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> perm<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            k <span class=\"sy0\">=</span> i<br/>            break<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>  <span class=\"co1\">// last permutation</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>l in size - <span class=\"nu0\">1</span> downTo k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>perm<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> perm<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> perm<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>           perm<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> perm<span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>           perm<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> m <span class=\"sy0\">=</span> k + <span class=\"nu0\">1</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> size - <span class=\"nu0\">1</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>m <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>               <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp2 <span class=\"sy0\">=</span> perm<span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>               perm<span class=\"br0\">[</span>m++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> perm<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>               perm<span class=\"br0\">[</span>n--<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp2<br/>           <span class=\"br0\">}</span><br/>           break<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun check<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span> Int, a2<span class=\"sy0\">:</span> Int, v1<span class=\"sy0\">:</span> Int, v2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>a1<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v1<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<span class=\"br0\">[</span>a2<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun checkLeft<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span> Int, a2<span class=\"sy0\">:</span> Int, v1<span class=\"sy0\">:</span> Int, v2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>a1<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v1<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<span class=\"br0\">[</span>a2<span class=\"br0\">]</span><span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> v2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun checkRight<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span> Int, a2<span class=\"sy0\">:</span> Int, v1<span class=\"sy0\">:</span> Int, v2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>a1<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v1<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<span class=\"br0\">[</span>a2<span class=\"br0\">]</span><span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> v2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun checkAdjacent<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span> Int, a2<span class=\"sy0\">:</span> Int, v1<span class=\"sy0\">:</span> Int, v2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> checkLeft<span class=\"br0\">(</span>a1, a2, v1, v2<span class=\"br0\">)</span> || checkRight<span class=\"br0\">(</span>a1, a2, v1, v2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colors  <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Red\"</span>, <span class=\"st0\">\"Green\"</span>, <span class=\"st0\">\"White\"</span>, <span class=\"st0\">\"Yellow\"</span>, <span class=\"st0\">\"Blue\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nations <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"English\"</span>, <span class=\"st0\">\"Swede\"</span>, <span class=\"st0\">\"Danish\"</span>, <span class=\"st0\">\"Norwegian\"</span>, <span class=\"st0\">\"German\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> animals <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Dog\"</span>, <span class=\"st0\">\"Birds\"</span>, <span class=\"st0\">\"Cats\"</span>, <span class=\"st0\">\"Horse\"</span>, <span class=\"st0\">\"Zebra\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> drinks  <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Tea\"</span>, <span class=\"st0\">\"Coffee\"</span>, <span class=\"st0\">\"Milk\"</span>, <span class=\"st0\">\"Beer\"</span>, <span class=\"st0\">\"Water\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> smokes  <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Pall Mall\"</span>, <span class=\"st0\">\"Dunhill\"</span>, <span class=\"st0\">\"Blend\"</span>, <span class=\"st0\">\"Blue Master\"</span>, <span class=\"st0\">\"Prince\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">120</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"co1\">//  stores all permutations of numbers 0..4</span><br/>\u00a0<br/>fun fillHouses<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> solutions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>checkLeft<span class=\"br0\">(</span>c, c, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue                      <span class=\"co1\">// C5\u00a0: Green left of white</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> continue                            <span class=\"co1\">// C10: Norwegian in First</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>n, c, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue                      <span class=\"co1\">// C2\u00a0: English in Red</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>checkAdjacent<span class=\"br0\">(</span>n, c, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue              <span class=\"co1\">// C15: Norwegian next to Blue</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>a, n, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue                  <span class=\"co1\">// C3\u00a0: Swede has Dog</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> continue                    <span class=\"co1\">// C9\u00a0: Middle drinks Milk</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>d, n, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue              <span class=\"co1\">// C4\u00a0: Dane drinks Tea</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>d, c, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue              <span class=\"co1\">// C6\u00a0: Green drinks Coffee</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>s, a, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue          <span class=\"co1\">// C7\u00a0: Pall Mall has Birds</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>s, c, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue          <span class=\"co1\">// C8\u00a0: Yellow smokes Dunhill</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>s, d, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue          <span class=\"co1\">// C13: Blue Master drinks Beer</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>s, n, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue          <span class=\"co1\">// C14: German smokes Prince</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>checkAdjacent<span class=\"br0\">(</span>s, a, <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue  <span class=\"co1\">// C11: Blend next to Cats</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>checkAdjacent<span class=\"br0\">(</span>s, a, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue  <span class=\"co1\">// C12: Dunhill next to Horse</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>checkAdjacent<span class=\"br0\">(</span>s, d, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue  <span class=\"co1\">// C16: Blend next to Water</span><br/>                        solutions++<br/>                        printHouses<span class=\"br0\">(</span>c, n, a, d, s<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> solutions<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printHouses<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int, a<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int, s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> owner<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"House  Color   Nation     Animal  Drink   Smokes\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"=====  ======  =========  ======  ======  ===========\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\"%3d   \u00a0%-6s \u00a0%-9s \u00a0%-6s \u00a0%-6s \u00a0%-11s<span class=\"es1\">\\n</span>\"</span><br/>        System.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span>f, i + <span class=\"nu0\">1</span>, colors<span class=\"br0\">[</span>p<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>, nations<span class=\"br0\">[</span>p<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>, animals<span class=\"br0\">[</span>p<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>, drinks<span class=\"br0\">[</span>p<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>, smokes<span class=\"br0\">[</span>p<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>animals<span class=\"br0\">[</span>p<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Zebra\"</span><span class=\"br0\">)</span> owner <span class=\"sy0\">=</span> nations<span class=\"br0\">[</span>p<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The $owner owns the Zebra<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perm <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">119</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> perm<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        nextPerm<span class=\"br0\">(</span>perm<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solutions <span class=\"sy0\">=</span> fillHouses<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> plural <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solutions <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"s\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$solutions solution$plural found\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 78, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Houses logical puzzle: who owns the zebra and who drinks water?<br/>\u00a0<br/>     1) Five colored houses in a row, each with an owner, a pet, cigarettes, and a drink.<br/>     2) The English lives in the red house. <br/>     3) The Spanish has a dog. <br/>     4) They drink coffee in the green house. <br/>     5) The Ukrainian drinks tea. <br/>     6) The green house is next to the white house. <br/>     7) The Winston smoker has a serpent. <br/>     8) In the yellow house they smoke Kool. <br/>     9) In the middle house they drink milk.<br/>    10) The Norwegian lives in the first house from the left. <br/>    11) The Chesterfield smoker lives near the man with the fox. <br/>    12) In the house near the house with the horse they smoke Kool. <br/>    13) The Lucky Strike smoker drinks juice. <br/>    14) The Japanese smokes Kent. <br/>    15) The Norwegian lives near the blue house. <br/>\u00a0<br/>Who owns the zebra and who drinks water?<br/>*/</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(houses).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(houses<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(houses(<span class=\"sy1\">-</span>list), one).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(houses<span class=\"sy1\">/</span><span class=\"nu0\">1</span>, [<br/>        comment <span class=\"kw5\">is</span> <span class=\"st0\">'Solution to the puzzle.'</span>,<br/>        argnames <span class=\"kw5\">is</span> [<span class=\"st0\">'Solution'</span>]<br/>    ]).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(print<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(print(<span class=\"sy1\">+</span>list), one).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(print<span class=\"sy1\">/</span><span class=\"nu0\">1</span>, [<br/>        comment <span class=\"kw5\">is</span> <span class=\"st0\">'Pretty print solution to the puzzle.'</span>,<br/>        argnames <span class=\"kw5\">is</span> [<span class=\"st0\">'Solution'</span>]<br/>    ]).<br/>\u00a0<br/>    houses(<span class=\"re0\">Solution</span>) <span class=\"sy2\">:-</span><br/>        template(<span class=\"re0\">Solution</span>),                                                 <span class=\"co1\">%  1</span><br/>        member(h(english, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, red), <span class=\"re0\">Solution</span>),                         <span class=\"co1\">%  2</span><br/>        member(h(spanish, dog, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),                         <span class=\"co1\">%  3</span><br/>        member(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, coffee, green), <span class=\"re0\">Solution</span>),                        <span class=\"co1\">%  4</span><br/>        member(h(ukrainian, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, tea, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),                       <span class=\"co1\">%  5 </span><br/>        next(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, green), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, white), <span class=\"re0\">Solution</span>),         <span class=\"co1\">%  6</span><br/>        member(h(<span class=\"re0\">_</span>, snake, winston, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),                       <span class=\"co1\">%  7</span><br/>        member(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, kool, <span class=\"re0\">_</span>, yellow), <span class=\"re0\">Solution</span>),                         <span class=\"co1\">%  8</span><br/>        <span class=\"re0\">Solution</span> <span class=\"sy1\">=</span> [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, milk, <span class=\"re0\">_</span>), <span class=\"re0\">_</span>, <span class=\"re0\">_</span>],                       <span class=\"co1\">%  9    </span><br/>        <span class=\"re0\">Solution</span> <span class=\"sy1\">=</span> [h(norwegian, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>)| <span class=\"re0\">_</span>],                           <span class=\"co1\">% 10</span><br/>        next(h(<span class=\"re0\">_</span>, fox, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, chesterfield, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),    <span class=\"co1\">% 11</span><br/>        next(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, kool, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, horse, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),          <span class=\"co1\">% 12</span><br/>        member(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, lucky, juice, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),                         <span class=\"co1\">% 13</span><br/>        member(h(japonese, <span class=\"re0\">_</span>, kent, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),                       <span class=\"co1\">% 14</span><br/>        next(h(norwegian, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, blue), <span class=\"re0\">Solution</span>),      <span class=\"co1\">% 15</span><br/>        member(h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, water, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>),      <span class=\"co1\">% one of them drinks water</span><br/>        member(h(<span class=\"re0\">_</span>, zebra, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), <span class=\"re0\">Solution</span>).      <span class=\"co1\">% one of them owns a zebra</span><br/>\u00a0<br/>    print([]).<br/>    print([<span class=\"re0\">House</span>| <span class=\"re0\">Houses</span>]) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">House</span>), <span class=\"kw5\">nl</span>,<br/>        print(<span class=\"re0\">Houses</span>).    <br/>\u00a0<br/>    <span class=\"co1\">% h(Nationality, Pet, Cigarette, Drink, Color)</span><br/>    template([h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>), h(<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>)]).<br/>\u00a0<br/>    member(<span class=\"re0\">A</span>, [<span class=\"re0\">A</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>]).<br/>    member(<span class=\"re0\">B</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">B</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>]).<br/>    member(<span class=\"re0\">C</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">C</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>]).<br/>    member(<span class=\"re0\">D</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">D</span>, <span class=\"re0\">_</span>]).<br/>    member(<span class=\"re0\">E</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">E</span>]).<br/>\u00a0<br/>    next(<span class=\"re0\">A</span>, <span class=\"re0\">B</span>, [<span class=\"re0\">A</span>, <span class=\"re0\">B</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>]).<br/>    next(<span class=\"re0\">B</span>, <span class=\"re0\">C</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">B</span>, <span class=\"re0\">C</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>]).<br/>    next(<span class=\"re0\">C</span>, <span class=\"re0\">D</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">C</span>, <span class=\"re0\">D</span>, <span class=\"re0\">_</span>]).<br/>    next(<span class=\"re0\">D</span>, <span class=\"re0\">E</span>, [<span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">_</span>, <span class=\"re0\">D</span>, <span class=\"re0\">E</span>]).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre> \t\t1\t\t2\t\t3\t\t4\t\t5\ncolors\t\tBlue\t\tBlue\t\tBlue\t\tBlue\t\tBlue\ncolors\t\tGreen\t\tGreen\t\tGreen\t\tGreen\t\tGreen\ncolors\t\tRed\t\tRed\t\tRed\t\tRed\t\tRed\ncolors\t\tWhite\t\tWhite\t\tWhite\t\tWhite\t\tWhite\ncolors\t\tYellow\t\tYellow\t\tYellow\t\tYellow\t\tYellow\nnationality\tDane\t\tDane\t\tDane\t\tDane\t\tDane\nnationality\tEnglish\t\tEnglish\t\tEnglish\t\tEnglish\t\tEnglish\nnationality\tGerman\t\tGerman\t\tGerman\t\tGerman\t\tGerman\nnationality\tNorwegian\tNorwegian\tNorwegian\tNorwegian\tNorwegian\nnationality\tSwede\t\tSwede\t\tSwede\t\tSwede\t\tSwede\nbeverage\tBeer\t\tBeer\t\tBeer\t\tBeer\t\tBeer\nbeverage\tCoffee\t\tCoffee\t\tCoffee\t\tCoffee\t\tCoffee\nbeverage\tMilk\t\tMilk\t\tMilk\t\tMilk\t\tMilk\nbeverage\tTea\t\tTea\t\tTea\t\tTea\t\tTea\nbeverage\tWater\t\tWater\t\tWater\t\tWater\t\tWater\nanimal\t\tBirds\t\tBirds\t\tBirds\t\tBirds\t\tBirds\nanimal\t\tCats\t\tCats\t\tCats\t\tCats\t\tCats\nanimal\t\tDog\t\tDog\t\tDog\t\tDog\t\tDog\nanimal\t\tHorse\t\tHorse\t\tHorse\t\tHorse\t\tHorse\nanimal\t\tZebra\t\tZebra\t\tZebra\t\tZebra\t\tZebra\nsmoke\t\tBlend\t\tBlend\t\tBlend\t\tBlend\t\tBlend\nsmoke\t\tBlue Master\tBlue Master\tBlue Master\tBlue Master\tBlue Master\nsmoke\t\tDunhill\t\tDunhill\t\tDunhill\t\tDunhill\t\tDunhill\nsmoke\t\tPall Mall\tPall Mall\tPall Mall\tPall Mall\tPall Mall\nsmoke\t\tPrince\t\tPrince\t\tPrince\t\tPrince\t\tPrince</pre>"}, {"lang": "Nial", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>remove is op x xs {filter (not (x =)) xs}<br/>\u00a0<br/>append_map is transformer func op seq { \\<br/>  reduce (op x xs { (func x) link xs}) (seq append []) }<br/>\u00a0<br/>permutations is op seq { \\<br/>  if empty seq then [[]] else \\<br/>    (append_map \\<br/>      (op head {each (op tail {head hitch tail}) \\<br/>                     (permutations (remove head seq))}) \\<br/>      seq) \\<br/>  endif}<br/>\u00a0<br/>f is find<br/>tokenize is op str{string_split ' ' str}<br/>mk is tr pred op str {filter pred permutations tokenize str}<br/>eq is op x xs y ys{f x xs = f y ys}<br/>adj is op x xs y ys{1 = abs(f x xs - f y ys)}<br/>\u00a0<br/>run is  { \\<br/>  men\u00a0:= mk (op xs {0 = f 'norwegian' xs}) \\<br/>    'danish english german norwegian swedish'; \\<br/>  colors\u00a0:= mk (op xs {1 = ((f 'white' xs) - (f 'green' xs))}) \\<br/>    'blue green red white yellow'; \\<br/>  drinks\u00a0:= mk (op xs {2 = f 'milk' xs}) 'beer coffee milk tea water'; \\<br/>  pets\u00a0:= mk (op xs {l}) 'birds cats dog horse zebra'; \\<br/>  smokes\u00a0:= mk (op xs {l}) 'blend blue-master dunhill pall-mall prince'; \\<br/>  for m with men do \\<br/>    for c with colors do \\<br/>      if  (eq 'english' m 'red' c) and \\<br/>          (adj 'norwegian' m 'blue' c) then \\<br/>        for d with drinks do \\<br/>          if  (eq 'danish' m 'tea' d) and \\<br/>              (eq 'coffee' d 'green' c) then \\<br/>            for s with smokes do \\<br/>              if  (eq 'yellow' c 'dunhill' s) and \\<br/>                  (eq 'blue-master' s 'beer' d) and \\<br/>                  (eq 'german' m 'prince' s) then \\<br/>                for p with pets do \\<br/>                  if  (eq 'birds' p 'pall-mall' s) and \\<br/>                      (eq 'swedish' m 'dog' p) and \\<br/>                      (adj 'blend' s 'cats' p) and \\<br/>                      (adj 'horse' p 'dunhill' s) then \\<br/>                    write (0 blend (p m c d s)) \\<br/>                  endif \\<br/>                endfor \\<br/>              endif \\<br/>            endfor \\<br/>          endif \\<br/>        endfor \\<br/>      endif \\<br/>    endfor \\<br/>  endfor }<br/>\u00a0<br/>abs(time - (run; time))<br/>\u00a0</pre>"}, {"lang": "Pari/Gp", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>perm(arr) = {<br/>n=#arr;i=n-1;<br/>while(i &gt; -1,if (arr[i] &lt; arr[i+1],break);i--);<br/>j=n;<br/>while(arr[j]&lt;= arr[i],j -=1);<br/>tmp = arr[i]\u00a0;arr[i]=arr[j];arr[j]=tmp;<br/>i +=1; j = n;<br/>while(i &lt; j ,tmp = arr[i]\u00a0;arr[i]=arr[j];arr[j]=tmp;<br/>i +=1; j -=1);<br/>return(arr);<br/>}<br/>perms(arr)={<br/>n=#arr;<br/>result = List();<br/>listput(result,arr);<br/>for(i=1,n!-1,arr=perm(arr);listput(result,arr));<br/>return(result);<br/>}<br/>\u00a0<br/>adj(x,xs,y,ys)={<br/>  abs(select(z-&gt;z==x,xs,1)[1] - select(z-&gt;z==y,ys,1)[1])==1<br/>}<br/>eq(x,xs,y,ys)={<br/>   select(z-&gt;z==x,xs,1) == select(z-&gt;z==y,ys,1)<br/>}<br/>\u00a0<br/>colors =Vec(perms( [\"Blue\", \"Green\", \"Red\", \"White\", \"Yellow\"]));;<br/>drinks  =Vec(perms( [\"Beer\", \"Coffee\", \"Milk\", \"Tea\", \"Water\"]));;<br/>nations =Vec(perms( [\"Denmark\", \"England\", \"Germany\", \"Norway\", \"Sweden\"]));;<br/>smokes  =Vec(perms( [\"Blend\", \"BlueMaster\", \"Dunhill\", \"PallMall\", \"Prince\"]));;<br/>pets =Vec(perms( [\"Birds\", \"Cats\", \"Dog\", \"Horse\", \"Zebra\"]));;;<br/>colors= select(x-&gt;select(z-&gt;z==\"White\",x,1)[1] - select(z-&gt;z==\"Green\",x,1)[1]==1,colors);<br/>drinks=select(x-&gt;x[3]==\"Milk\",drinks);<br/>nations=select(x-&gt;x[1]==\"Norway\",nations);<br/>\u00a0<br/>for(n=1,#nations,for(c=1,#colors,\\<br/>if(eq(\"Red\",colors[c],\"England\",nations[n]) &amp;&amp; adj(\"Norway\",nations[n],\"Blue\",colors[c]),\\<br/>for(d=1,#drinks,\\<br/>if(eq(\"Denmark\",nations[n],\"Tea\",drinks[d])&amp;&amp; eq(\"Coffee\",drinks[d],\"Green\",colors[c]),\\<br/>for(s=1,#smokes,\\<br/>if(eq(\"Yellow\",colors[c],\"Dunhill\",smokes[s]) &amp;&amp;\\<br/>eq(\"BlueMaster\",smokes[s],\"Beer\",drinks[d]) &amp;&amp;\\<br/>eq(\"Germany\",nations[n],\"Prince\",smokes[s]),\\<br/>for(p=1,#pets,\\<br/>if(eq(\"Birds\",pets[p],\"PallMall\",smokes[s]) &amp;&amp;\\<br/>eq(\"Sweden\",nations[n],\"Dog\",pets[p]) &amp;&amp;\\<br/>adj(\"Blend\",smokes[s],\"Cats\",pets[p]) &amp;&amp;\\<br/>adj(\"Horse\",pets[p],\"Dunhill\",smokes[s]),\\<br/>print(\"Zebra is owned by \",nations[n][select(z-&gt;z==\"Zebra\",pets[p],1)[1]]);print();\\<br/>for(i=1,5,printf(\"House:%s\u00a0%6s\u00a0%10s\u00a0%10s\u00a0%10s\u00a0%10s\\n\",i,colors[c][i],nations[n][i],pets[p][i],drinks[d][i],smokes[s][i]));\\<br/>)))))))));<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 104, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/>\u00a0<br/><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/binmode.html\"><span class=\"kw3\">binmode</span></a> <span class=\"kw2\">STDOUT</span><span class=\"sy0\">,</span> <span class=\"st0\">\":utf8\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@tgt</span><span class=\"sy0\">,</span> <span class=\"re0\">%names</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> setprops <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">%h</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@p</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%h</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"br0\">(</span><span class=\"re0\">@p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@v</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$h</span><span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">@tgt</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">{</span>idx<span class=\"sy0\">=&gt;</span><span class=\"co5\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@p</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">@v</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">unless</span> <span class=\"re0\">@tgt</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$names</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span> <span class=\"kw1\">for</span> <span class=\"re0\">@v</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$solve</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"re0\">@tgt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%12s\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ucfirst.html\"><span class=\"kw3\">ucfirst</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"st0\">\"\u00bfQu\u00e9?\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$i</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"st0\">\"there is only one\"</span>  <span class=\"co1\"># &lt;--- change this to a false value to find all solutions (if any)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pair <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">@v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^(\\d+)$/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$tgt</span><span class=\"br0\">[</span><span class=\"co3\">$1</span><span class=\"br0\">]</span><span class=\"br0\">{</span> <span class=\"re0\">$names</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"re0\">@v</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@v</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">%allowed</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$allowed</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"re0\">@v</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$p1</span><span class=\"sy0\">,</span> <span class=\"re0\">$p2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$names</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$names</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"re0\">$solve</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$solve</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span>\t\t<span class=\"co1\"># &lt;--- sorta like how TeX \\let...\\def macro</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$p1</span><span class=\"br0\">}</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$a</span> <span class=\"br0\">}</span> <span class=\"re0\">@tgt</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$p2</span><span class=\"br0\">}</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span> <span class=\"re0\">@tgt</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"re0\">$x</span> <span class=\"kw1\">and</span> <span class=\"re0\">$y</span> <span class=\"kw1\">and</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$allowed</span><span class=\"br0\">{</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>idx<span class=\"br0\">}</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>idx<span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$e</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$try_stuff</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$sign</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>idx<span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"re0\">$sign</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">@tgt</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$tgt</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">$tgt</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$e</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><br/>\t\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"re0\">$x</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$try_stuff</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$p2</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$y</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$try_stuff</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$p1</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"re0\">@tgt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$p1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$p1</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$try_stuff</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$p2</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># ---- above should be generic for all similar puzzles ---- #</span><br/>\u00a0<br/><span class=\"co1\"># ---- below: per puzzle setup ---- #</span><br/><span class=\"co1\"># property names and values</span><br/>setprops <span class=\"br0\">(</span><br/>\t<span class=\"co1\"># Svensk n. a Swede, not a swede (k\u00e5lrot).</span><br/>\t<span class=\"co1\"># AEnglisk (from middle Viking \"\u00c6\u014bl\u00f8s\u00e5ksen\") n. a Brit.</span><br/>\t<span class=\"st_h\">'Who'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Deutsch Svensk Norske Danske AEnglisk<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'Pet'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>birds dog horse zebra cats<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'Drink'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>water tea milk beer coffee<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'Smoke'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>dunhill blue_master prince blend pall_mall<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'Color'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>red green yellow white blue<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># constraints</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> AEnglisk red <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> Svensk dog <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> Danske tea <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> green white <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># \"to the left of\" can mean either 1 or -1: ambiguous</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> coffee green <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> pall_mall birds <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> yellow dunhill <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> <span class=\"nu0\">2</span> milk <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> <span class=\"nu0\">0</span> Norske <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> blend cats <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> horse dunhill <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> blue_master beer <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># Nicht das Deutsche Bier trinken? Huh.</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> Deutsch prince <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> Norske blue <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pair <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> water blend <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$solve</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 81, "block": "<pre class=\"text highlighted_source\">enum Colour, Nationality, Drink, Smoke, Pet<br/>constant Colours = {\"red\",\"white\",\"green\",\"yellow\",\"blue\"},<br/>         Nationalities = {\"English\",\"Swede\",\"Dane\",\"Norwegian\",\"German\"},<br/>         Drinks = {\"tea\",\"coffee\",\"milk\",\"beer\",\"water\"},<br/>         Smokes = {\"Pall Mall\",\"Dunhill\",\"Blend\",\"Blue Master\",\"Prince\"},<br/>         Pets = {\"dog\",\"birds\",\"cats\",\"horse\",\"zebra\"},<br/>         Sets = {Colours,Nationalities,Drinks,Smokes,Pets}<br/>\u00a0<br/>constant tagset5 = tagset(5)        -- {1,2,3,4,5}, oft-permuted<br/>sequence perm = repeat(tagset5,5)   -- perm[1] is Colour of each house, etc<br/>\u00a0<br/>function house(integer i, string name)<br/>    return find(find(name,Sets[i]),perm[i])<br/>end function<br/>\u00a0<br/>function left_of(integer h1, integer h2)<br/>    return (h1-h2)==1<br/>end function<br/>\u00a0<br/>function next_to(integer h1, integer h2)<br/>    return abs(h1-h2)==1<br/>end function<br/>\u00a0<br/>procedure print_house(integer i)<br/>    printf(1,\"%d:%s,%s,%s,%s,%s\\n\",{i,<br/>                                    Colours[perm[Colour][i]],<br/>                                    Nationalities[perm[Nationality][i]],<br/>                                    Drinks[perm[Drink][i]],<br/>                                    Smokes[perm[Smoke][i]],<br/>                                    Pets[perm[Pet][i]]})<br/>end procedure<br/>\u00a0<br/>integer solutions = 0<br/>sequence solperms = {}<br/>atom t0 = time()<br/>constant factorial5 = factorial(5)<br/>for C=1 to factorial5 do<br/>    perm[Colour] = permute(C,tagset5)<br/>    if left_of(house(Colour,\"green\"),house(Colour,\"white\")) then<br/>        for N=1 to factorial5 do<br/>            perm[Nationality] = permute(N,tagset5)<br/>            if house(Nationality,\"Norwegian\")==1<br/>            and house(Nationality,\"English\")==house(Colour,\"red\") <br/>            and next_to(house(Nationality,\"Norwegian\"),house(Colour,\"blue\")) then<br/>                for D=1 to factorial5 do<br/>                    perm[Drink] = permute(D,tagset5)<br/>                    if house(Nationality,\"Dane\")==house(Drink,\"tea\")<br/>                    and house(Drink,\"coffee\")==house(Colour,\"green\")<br/>                    and house(Drink,\"milk\")==3 then<br/>                        for S=1 to factorial5 do<br/>                            perm[Smoke] = permute(S,tagset5)<br/>                            if house(Colour,\"yellow\")==house(Smoke,\"Dunhill\")<br/>                            and house(Nationality,\"German\")==house(Smoke,\"Prince\")<br/>                            and house(Smoke,\"Blue Master\")==house(Drink,\"beer\")<br/>                            and next_to(house(Drink,\"water\"),house(Smoke,\"Blend\")) then<br/>                                for P=1 to factorial5 do<br/>                                    perm[Pet] = permute(P,tagset5)<br/>                                    if house(Nationality,\"Swede\")==house(Pet,\"dog\")<br/>                                    and house(Smoke,\"Pall Mall\")==house(Pet,\"birds\")<br/>                                    and next_to(house(Smoke,\"Blend\"),house(Pet,\"cats\"))<br/>                                    and next_to(house(Pet,\"horse\"),house(Smoke,\"Dunhill\")) then<br/>                                        for i=1 to 5 do<br/>                                            print_house(i)<br/>                                        end for<br/>                                        solutions += 1<br/>                                        solperms = append(solperms,perm)<br/>                                    end if<br/>                                end for<br/>                            end if<br/>                        end for<br/>                    end if<br/>                end for<br/>            end if<br/>        end for<br/>    end if<br/>end for<br/>printf(1,\"%d solution%s found (%3.3fs).\\n\",{solutions,iff(solutions&gt;1,\"s\",\"\"),time()-t0})<br/>for i=1 to length(solperms) do<br/>    perm = solperms[i]<br/>    printf(1,\"The\u00a0%s owns the Zebra\\n\",{Nationalities[house(Pet,\"zebra\")]})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 41, "block": "<pre class=\"text highlighted_source\">(be match (@House @Person @Drink @Pet @Cigarettes)<br/>   (permute (red blue green yellow white) @House)<br/>   (left-of @House white  @House green)<br/>\u00a0<br/>   (permute (Norwegian English Swede German Dane) @Person)<br/>   (has @Person English  @House red)<br/>   (equal @Person (Norwegian . @))<br/>   (next-to @Person Norwegian  @House blue)<br/>\u00a0<br/>   (permute (tea coffee milk beer water) @Drink)<br/>   (has @Drink tea  @Person Dane)<br/>   (has @Drink coffee  @House green)<br/>   (equal @Drink (@ @ milk . @))<br/>\u00a0<br/>   (permute (dog birds cats horse zebra) @Pet)<br/>   (has @Pet dog  @Person Swede)<br/>\u00a0<br/>   (permute (Pall-Mall Dunhill Blend Blue-Master Prince) @Cigarettes)<br/>   (has @Cigarettes Pall-Mall  @Pet birds)<br/>   (has @Cigarettes Dunhill  @House yellow)<br/>   (next-to @Cigarettes Blend  @Pet cats)<br/>   (next-to @Cigarettes Dunhill  @Pet horse)<br/>   (has @Cigarettes Blue-Master  @Drink beer)<br/>   (has @Cigarettes Prince  @Person German)<br/>\u00a0<br/>   (next-to @Drink water  @Cigarettes Blend) )<br/>\u00a0<br/>(be has ((@A . @X) @A (@B . @Y) @B))<br/>(be has ((@ . @X) @A (@ . @Y) @B)<br/>   (has @X @A @Y @B) )<br/>\u00a0<br/>(be right-of ((@A . @X) @A (@ @B . @Y) @B))<br/>(be right-of ((@ . @X) @A (@ . @Y) @B)<br/>   (right-of @X @A @Y @B) )<br/>\u00a0<br/>(be left-of ((@ @A . @X) @A (@B . @Y) @B))<br/>(be left-of ((@ . @X) @A (@ . @Y) @B)<br/>   (left-of @X @A @Y @B) )<br/>\u00a0<br/>(be next-to (@X @A @Y @B) (right-of @X @A @Y @B))<br/>(be next-to (@X @A @Y @B) (left-of @X @A @Y @B))</pre>"}, {"lang": "Prolog", "loc": 21, "block": "<pre class=\"prolog highlighted_source\">select<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>As<span class=\"br0\">]</span><span class=\"sy4\">,</span>S<span class=\"br0\">)</span><span class=\"sy1\">:-</span> select<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>S<span class=\"sy4\">,</span>S1<span class=\"br0\">)</span><span class=\"sy4\">,</span>select<span class=\"br0\">(</span>As<span class=\"sy4\">,</span>S1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>select<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">.</span> <br/>\u00a0<br/>next_to<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy1\">:-</span> left_of<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span> <span class=\"sy4\">;</span> left_of<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>left_of<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy1\">:-</span> append<span class=\"br0\">(</span>_<span class=\"sy4\">,</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>zebra<span class=\"br0\">(</span>Owns<span class=\"sy4\">,</span> HS<span class=\"br0\">)</span><span class=\"sy1\">:-</span>  <span class=\"co1\">% color,nation,pet,drink,smokes</span><br/>      HS <span class=\"sy6\">=</span>    <span class=\"br0\">[</span> h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>norwegian<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>milk<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">]</span><span class=\"sy4\">,</span> <br/>      select<span class=\"br0\">(</span> <span class=\"br0\">[</span> h<span class=\"br0\">(</span>red<span class=\"sy4\">,</span>englishman<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>swede<span class=\"sy4\">,</span>dog<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>dane<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>tea<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>        h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>german<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>prince<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy4\">,</span> HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      select<span class=\"br0\">(</span> <span class=\"br0\">[</span> h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>birds<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>pallmall<span class=\"br0\">)</span><span class=\"sy4\">,</span>  h<span class=\"br0\">(</span>yellow<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>dunhill<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>beer<span class=\"sy4\">,</span>bluemaster<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy4\">,</span>                         HS<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>      left_of<span class=\"br0\">(</span>  h<span class=\"br0\">(</span>green<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>coffee<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>    h<span class=\"br0\">(</span>white<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>         HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      next_to<span class=\"br0\">(</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>dunhill<span class=\"br0\">)</span><span class=\"sy4\">,</span>       h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>horse<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>         HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      next_to<span class=\"br0\">(</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>blend<span class=\"br0\">)</span><span class=\"sy4\">,</span>         h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>cats<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>         HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      next_to<span class=\"br0\">(</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>blend<span class=\"br0\">)</span><span class=\"sy4\">,</span>         h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>water<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>         HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      next_to<span class=\"br0\">(</span>  h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>norwegian<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>     h<span class=\"br0\">(</span>blue<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span>          HS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      member<span class=\"br0\">(</span>   h<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>Owns<span class=\"sy4\">,</span>zebra<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> HS<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> <span class=\"sy1\">?-</span> time<span class=\"br0\">(</span><span class=\"br0\">(</span> zebra<span class=\"br0\">(</span>Who<span class=\"sy4\">,</span> HS<span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span>HS<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Who<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a> <br/>             <span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'No more solutions.'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 75, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> logpy <span class=\"kw1\">import</span> *<br/><span class=\"kw1\">from</span> logpy.<span class=\"me1\">core</span> <span class=\"kw1\">import</span> lall<br/><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/>\u00a0<br/><span class=\"kw1\">def</span> lefto<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">)</span>:<br/>\t<span class=\"co1\"># give me q such that q is left of p in list</span><br/>\t<span class=\"co1\"># zip(list, list[1:]) gives a list of 2-tuples of neighboring combinations</span><br/>\t<span class=\"co1\"># which can then be pattern-matched against the query</span><br/>\t<span class=\"kw1\">return</span> membero<span class=\"br0\">(</span><span class=\"br0\">(</span>q<span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> nexto<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">)</span>:<br/>\t<span class=\"co1\"># give me q such that q is next to p in list</span><br/>\t<span class=\"co1\"># match lefto(q, p) OR lefto(p, q)</span><br/>\t<span class=\"co1\"># requirement of vector args instead of tuples doesn't seem to be documented</span><br/>\t<span class=\"kw1\">return</span> conde<span class=\"br0\">(</span><span class=\"br0\">[</span>lefto<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>lefto<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>houses <span class=\"sy0\">=</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>zebraRules <span class=\"sy0\">=</span> lall<span class=\"br0\">(</span><br/>\t<span class=\"co1\"># there are 5 houses</span><br/>\t<span class=\"br0\">(</span>eq<span class=\"sy0\">,</span> \t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Englishman's house is red</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span><span class=\"st0\">'Englishman'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'red'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Swede has a dog</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span><span class=\"st0\">'Swede'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'dog'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Dane drinks tea</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span><span class=\"st0\">'Dane'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'tea'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Green house is left of the White house</span><br/>\t<span class=\"br0\">(</span>lefto<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'green'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'white'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># coffee is the drink of the green house</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'coffee'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'green'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Pall Mall smoker has birds</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Pall Mall'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'birds'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the yellow house smokes Dunhills</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Dunhill'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'yellow'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the middle house drinks milk</span><br/>\t<span class=\"br0\">(</span>eq<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'milk'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Norwegian is the first house</span><br/>\t<span class=\"br0\">(</span>eq<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'Norwegian'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Blend smoker is in the house next to the house with cats</span><br/>\t<span class=\"br0\">(</span>nexto<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Blend'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'cats'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Dunhill smoker is next to the house where they have a horse</span><br/>\t<span class=\"br0\">(</span>nexto<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Dunhill'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'horse'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Blue Master smoker drinks beer</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Blue Master'</span><span class=\"sy0\">,</span> <span class=\"st0\">'beer'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the German smokes Prince</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span><span class=\"st0\">'German'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Prince'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the Norwegian is next to the blue house</span><br/>\t<span class=\"br0\">(</span>nexto<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span><span class=\"st0\">'Norwegian'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'blue'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># the house next to the Blend smoker drinks water</span><br/>\t<span class=\"br0\">(</span>nexto<span class=\"sy0\">,</span>\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Blend'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'water'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"co1\"># one of the houses has a zebra--but whose?</span><br/>\t<span class=\"br0\">(</span>membero<span class=\"sy0\">,</span>\t<span class=\"br0\">(</span>var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'zebra'</span><span class=\"sy0\">,</span> var<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> houses<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>t0 <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>solutions <span class=\"sy0\">=</span> run<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> houses<span class=\"sy0\">,</span> zebraRules<span class=\"br0\">)</span><br/>t1 <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>dur <span class=\"sy0\">=</span> t1-t0<br/>\u00a0<br/>count <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>solutions<span class=\"br0\">)</span><br/>zebraOwner <span class=\"sy0\">=</span> <span class=\"br0\">[</span>house <span class=\"kw1\">for</span> house <span class=\"kw1\">in</span> solutions<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"st0\">'zebra'</span> <span class=\"kw1\">in</span> house<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"%i solutions in\u00a0%.2f seconds\"</span>\u00a0% <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> dur<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"The\u00a0%s is the owner of the zebra\"</span>\u00a0% zebraOwner<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Here are all the houses:\"</span><br/><span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> solutions<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>\t<span class=\"kw1\">print</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 82, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>library(combinat)<br/>\u00a0<br/>col &lt;- factor(c(\"Red\",\"Green\",\"White\",\"Yellow\",\"Blue\"))<br/>own &lt;- factor(c(\"English\",\"Swedish\",\"Danish\",\"German\",\"Norwegian\"))<br/>pet &lt;- factor(c(\"Dog\",\"Birds\",\"Cats\",\"Horse\",\"Zebra\"))<br/>drink &lt;- factor(c(\"Coffee\",\"Tea\",\"Milk\",\"Beer\",\"Water\"))<br/>smoke &lt;- factor(c(\"PallMall\", \"Blend\", \"Dunhill\", \"BlueMaster\", \"Prince\"))<br/>\u00a0<br/>col_p &lt;- permn(levels(col))<br/>own_p &lt;- permn(levels(own))<br/>pet_p &lt;- permn(levels(pet))<br/>drink_p &lt;- permn(levels(drink))<br/>smoke_p &lt;- permn(levels(smoke))<br/>\u00a0<br/>imright &lt;- function(h1,h2){<br/>  return(h1-h2==1)<br/>}<br/>\u00a0<br/>nextto &lt;- function(h1,h2){<br/>  return(abs(h1-h2)==1)<br/>}<br/>\u00a0<br/>house_with &lt;- function(f,val){<br/>  return(which(levels(f)==val))<br/>}<br/>\u00a0<br/>for (i in seq(length(col_p))){<br/>  col &lt;- factor(col, levels=col_p[[i]])<br/>\u00a0<br/>  if (imright(house_with(col,\"Green\"),house_with(col,\"White\"))) {<br/>    for (j in seq(length(own_p))){<br/>      own &lt;- factor(own, levels=own_p[[j]])<br/>\u00a0<br/>      if(house_with(own,\"English\") == house_with(col,\"Red\")){<br/>        if(house_with(own,\"Norwegian\") == 1){<br/>          if(nextto(house_with(own,\"Norwegian\"),house_with(col,\"Blue\"))){<br/>            for(k in seq(length(drink_p))){<br/>              drink &lt;- factor(drink, levels=drink_p[[k]])<br/>\u00a0<br/>              if(house_with(drink,\"Coffee\") == house_with(col,\"Green\")){<br/>                if(house_with(own,\"Danish\") == house_with(drink,\"Tea\")){<br/>                  if(house_with(drink,\"Milk\") == 3){<br/>                    for(l in seq(length(smoke_p))){<br/>                      smoke &lt;- factor(smoke, levels=smoke_p[[l]])<br/>\u00a0<br/>                      if(house_with(smoke,\"Dunhill\") == house_with(col,\"Yellow\")){<br/>                        if(house_with(smoke,\"BlueMaster\") == house_with(drink,\"Beer\")){<br/>                          if(house_with(own,\"German\") == house_with(smoke,\"Prince\")){<br/>                            if(nextto(house_with(smoke,\"Blend\"),house_with(drink,\"Water\"))){<br/>                              for(m in seq(length(pet_p))){<br/>                                pet &lt;- factor(pet, levels=pet_p[[m]])<br/>\u00a0<br/>                                if(house_with(own,\"Swedish\") == house_with(pet,\"Dog\")){<br/>                                  if(house_with(smoke,\"PallMall\") == house_with(pet,\"Birds\")){<br/>                                    if(nextto(house_with(smoke,\"Blend\"),house_with(pet,\"Cats\"))){<br/>                                      if(nextto(house_with(smoke,\"Dunhill\"),house_with(pet,\"Horse\"))){<br/>                                        res &lt;- sapply(list(own,col,pet,smoke,drink),levels)<br/>                                        colnames(res) &lt;- c(\"Nationality\",\"Colour\",\"Pet\",\"Drink\",\"Smoke\")<br/>                                        print(res)<br/>                                      }<br/>                                    }<br/>                                  }<br/>                                }<br/>                              }<br/>                            }  <br/>                          }<br/>                        }<br/>                      }<br/>                    }<br/>                  }<br/>                }<br/>              }<br/>            }<br/>          }<br/>        }<br/>      }<br/>    }<br/>  }<br/>\u00a0<br/>}</pre>"}, {"lang": "Racket", "loc": 57, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(require racklog)<br/>\u00a0<br/>(define\u00a0%select<br/>  (%rel (x xs S S1)<br/>    [(x (cons x xs) xs)]<br/>    [(x (cons S xs) (cons S S1)) (%select x xs S1)]<br/>    [((cons x xs) S)<br/>     (%select x S S1)<br/>     (%select xs S1)]<br/>    [('() (_))]))<br/>\u00a0<br/>(define\u00a0%next-to<br/>  (%rel (A B C)<br/>    [(A B C)<br/>     (%or (%left-of A B C)<br/>          (%left-of B A C))]))<br/>\u00a0<br/>(define\u00a0%left-of<br/>  (%rel (A B C)<br/>    [(A B C) (%append (_) (cons A (cons B (_))) C)]))<br/>\u00a0<br/>(define\u00a0%zebra<br/>  (%rel (Owns HS)<br/>    [(Owns HS)<br/>     (%is HS (list (list (_) 'norwegian (_) (_) (_))<br/>                   (_)<br/>                   (list (_) (_) (_) 'milk (_))<br/>                   (_) (_)))<br/>     (%select (list (list 'red 'englishman (_) (_) (_))<br/>                    (list (_) 'swede 'dog (_) (_))<br/>                    (list (_) 'dane (_) 'tea (_))<br/>                    (list (_) 'german (_) (_) 'prince))<br/>              HS)<br/>     (%select (list (list (_) (_) 'birds (_) 'pallmall)<br/>                    (list 'yellow (_) (_) (_) 'dunhill)<br/>                    (list (_) (_) (_) 'beer 'bluemaster))<br/>              HS)<br/>     (%left-of (list 'green (_) (_) 'coffee (_))<br/>               (list 'white (_) (_) (_) (_))<br/>               HS)<br/>     (%next-to (list (_) (_) (_) (_) 'dunhill)<br/>               (list (_) (_) 'horse (_) (_))<br/>               HS)<br/>     (%next-to (list (_) (_) (_) (_) 'blend)<br/>               (list (_) (_) 'cats (_) (_))<br/>               HS)<br/>     (%next-to (list (_) (_) (_) (_) 'blend)<br/>               (list (_) (_) (_) 'water (_))<br/>               HS)<br/>     (%next-to (list (_) 'norwegian (_) (_) (_))<br/>               (list 'blue (_) (_) (_) (_))<br/>               HS)<br/>     (%member (list (_) Owns 'zebra (_) (_)) HS)]))<br/>\u00a0<br/>(%which (Who HS) (%zebra Who HS))</pre>"}, {"lang": "REXX", "loc": 169, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* Solve the Zebra Puzzle<br/>*--------------------------------------------------------------------*/</span><br/>  <span class=\"kw1\">Call</span> mk_perm    <span class=\"coMULTI\">/* compute all permutations                        */</span><br/>  <span class=\"kw1\">Call</span> encode     <span class=\"coMULTI\">/* encode the elements of the specifications       */</span><br/>  <span class=\"coMULTI\">/* ex2 .. eg16     the formalized specifications                   */</span><br/>  solutions=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/>  <span class=\"kw1\">Do</span> nation_i = <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">120</span><br/>    Nations = perm<span class=\"sy0\">.</span>nation_i<br/>    <span class=\"kw1\">IF</span> ex10<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">Do</span> color_i = <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">120</span><br/>        Colors = perm<span class=\"sy0\">.</span>color_i<br/>        <span class=\"kw1\">IF</span> ex5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex15<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>          <span class=\"kw1\">Do</span> drink_i = <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">120</span><br/>            Drinks = perm<span class=\"sy0\">.</span>drink_i<br/>            <span class=\"kw1\">IF</span> ex9<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex4<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex6<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>              <span class=\"kw1\">Do</span> smoke_i = <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">120</span><br/>                Smokes = perm<span class=\"sy0\">.</span>smoke_i<br/>                <span class=\"kw1\">IF</span> ex14<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex13<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex16<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex8<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>                   <span class=\"kw1\">Do</span> animal_i = <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">120</span><br/>                    Animals = perm<span class=\"sy0\">.</span>animal_i<br/>                    <span class=\"kw1\">IF</span> ex3<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex11<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ex12<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>                      <span class=\"coMULTI\">/* Call out 'Drinks =' Drinks  54321 Wat Tea Mil Cof Bee */</span><br/>                      <span class=\"coMULTI\">/* Call out 'Nations=' Nations 41235 Nor Den Eng Ger Swe */</span><br/>                      <span class=\"coMULTI\">/* Call out 'Colors =' Colors  51324 Yel Blu Red Gre Whi */</span><br/>                      <span class=\"coMULTI\">/* Call out 'Smokes =' Smokes  31452 Dun Ble Pal Pri Blu */</span><br/>                      <span class=\"coMULTI\">/* Call out 'Animals=' Animals 24153 Cat Hor Bir Zeb Dog */</span><br/>                      <span class=\"kw1\">Call</span> out <span class=\"st0\">'House   Drink      Nation     Colour'</span><span class=\"sy0\">||</span>,<br/>                                                         <span class=\"st0\">'     Smoke      Animal'</span><br/>                      <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">5</span><br/>                        di=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>drinks,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        ni=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>nations,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        ci=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>colors,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        si=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>smokes,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        ai=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>animals,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        ol<span class=\"sy0\">.</span>i=<span class=\"kw6\">right</span><span class=\"br0\">(</span>i,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">'     '</span><span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>drink<span class=\"sy0\">.</span>di,<span class=\"nu0\">11</span><span class=\"br0\">)</span>,<br/>                                              <span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>nation<span class=\"sy0\">.</span>ni,<span class=\"nu0\">11</span><span class=\"br0\">)</span>,<br/>                                              <span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>color<span class=\"sy0\">.</span>ci,<span class=\"nu0\">11</span><span class=\"br0\">)</span>,<br/>                                              <span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>smoke<span class=\"sy0\">.</span>si,<span class=\"nu0\">11</span><span class=\"br0\">)</span>,<br/>                                              <span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>animal<span class=\"sy0\">.</span>ai,<span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">Call</span> out ol<span class=\"sy0\">.</span>i<br/>                        <span class=\"kw3\">End</span><br/>                      solutions=solutions+<span class=\"nu0\">1</span><br/>                      <span class=\"kw3\">End</span><br/>                    <span class=\"kw3\">End</span> <span class=\"coMULTI\">/* animal_i */</span><br/>                  <span class=\"kw3\">End</span><br/>                <span class=\"kw3\">End</span> <span class=\"coMULTI\">/* smoke_i */</span><br/>              <span class=\"kw3\">End</span><br/>            <span class=\"kw3\">End</span> <span class=\"coMULTI\">/* drink_i */</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">End</span> <span class=\"coMULTI\">/* color_i */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span> <span class=\"coMULTI\">/* nation_i */</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Number of solutions ='</span> solutions<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Solved in'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds'</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/><span class=\"coMULTI\">/*------------------------------------------------------------------------------<br/>      #There are five houses.<br/>ex2:  #The English man lives in the red house.<br/>ex3:  #The Swede has a dog.<br/>ex4:  #The Dane drinks tea.<br/>ex5:  #The green house is immediately to the left of the white house.<br/>ex6:  #They drink coffee in the green house.<br/>ex7:  #The man who smokes Pall Mall has birds.<br/>ex8:  #In the yellow house they smoke Dunhill.<br/>ex9:  #In the middle house they drink milk.<br/>ex10: #The Norwegian lives in the first house.<br/>ex11: #The man who smokes Blend lives in the house next to the house with cats.<br/>ex12: #In a house next to the house where they have a horse, they smoke Dunhill.<br/>ex13: #The man who smokes Blue Master drinks beer.<br/>ex14: #The German smokes Prince.<br/>ex15: #The Norwegian lives next to the blue house.<br/>ex16: #They drink water in a house next to the house where they smoke Blend.<br/>------------------------------------------------------------------------------*/</span><br/>ex2:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>England,Nations<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Red,Colors<span class=\"br0\">)</span><br/>ex3:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Sweden,Nations<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Dog,Animals<span class=\"br0\">)</span><br/>ex4:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Denmark,Nations<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Tea,Drinks<span class=\"br0\">)</span><br/>ex5:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Green,Colors<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>White,Colors<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>ex6:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Coffee,Drinks<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Green,Colors<span class=\"br0\">)</span><br/>ex7:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>PallMall,Smokes<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Birds,Animals<span class=\"br0\">)</span><br/>ex8:  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Dunhill,Smokes<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Yellow,Colors<span class=\"br0\">)</span><br/>ex9:  <span class=\"kw1\">Return</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>Drinks,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>=Milk<br/>ex10: <span class=\"kw1\">Return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>Nations,<span class=\"nu0\">1</span><span class=\"br0\">)</span>=Norway<br/>ex11: <span class=\"kw1\">Return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span>Blend,Smokes<span class=\"br0\">)</span>-<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Cats,Animals<span class=\"br0\">)</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/>ex12: <span class=\"kw1\">Return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span>Dunhill,Smokes<span class=\"br0\">)</span>-<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Horse,Animals<span class=\"br0\">)</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/>ex13: <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>BlueMaster,Smokes<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Beer,Drinks<span class=\"br0\">)</span><br/>ex14: <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>Germany,Nations<span class=\"br0\">)</span>=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Prince,Smokes<span class=\"br0\">)</span><br/>ex15: <span class=\"kw1\">Return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span>Norway,Nations<span class=\"br0\">)</span>-<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Blue,Colors<span class=\"br0\">)</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/>ex16: <span class=\"kw1\">Return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span>Blend,Smokes<span class=\"br0\">)</span>-<span class=\"kw6\">pos</span><span class=\"br0\">(</span>Water,Drinks<span class=\"br0\">)</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/>\u00a0<br/>mk_perm: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> perm<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* Make all permutations of 12345 in perm.*<br/>*--------------------------------------------------------------------*/</span><br/>perm<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>n=<span class=\"nu0\">5</span><br/><span class=\"kw1\">Do</span> pop=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> n<br/>  p<span class=\"sy0\">.</span>pop=pop<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> store<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> nextperm<span class=\"br0\">(</span>n,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> store<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>nextperm: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> p<span class=\"sy0\">.</span> perm<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n,i<br/>  nm=n-<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Do</span> k=nm By-<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> nm<br/>    kp=k+<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> p<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>p<span class=\"sy0\">.</span>kp <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      i=k<br/>      <span class=\"kw1\">Leave</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Do</span> j=i+<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> j<span class=\"sy0\">&lt;</span>n<br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> p<span class=\"sy0\">.</span>j p<span class=\"sy0\">.</span>n <span class=\"kw2\">With</span> p<span class=\"sy0\">.</span>n p<span class=\"sy0\">.</span>j<br/>    n=n-<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Do</span> j=i+<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> p<span class=\"sy0\">.</span>j<span class=\"sy0\">&lt;</span>p<span class=\"sy0\">.</span>i<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> p<span class=\"sy0\">.</span>j p<span class=\"sy0\">.</span>i <span class=\"kw2\">With</span> p<span class=\"sy0\">.</span>i p<span class=\"sy0\">.</span>j<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>\u00a0<br/>store: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> p<span class=\"sy0\">.</span> perm<span class=\"sy0\">.</span><br/>  z=perm<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>    _=<span class=\"st0\">''</span><br/>    <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">5</span><br/>      _=_<span class=\"sy0\">||</span>p<span class=\"sy0\">.</span>j<br/>      <span class=\"kw3\">End</span><br/>  perm<span class=\"sy0\">.</span>z=_<br/>  perm<span class=\"sy0\">.</span>0=z<br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>encode:<br/>  Beer=<span class=\"nu0\">1</span>        \u00a0; Drink<span class=\"sy0\">.</span>1=<span class=\"st0\">'Beer'</span><br/>  Coffee=<span class=\"nu0\">2</span>      \u00a0; Drink<span class=\"sy0\">.</span>2=<span class=\"st0\">'Coffee'</span><br/>  Milk=<span class=\"nu0\">3</span>        \u00a0; Drink<span class=\"sy0\">.</span>3=<span class=\"st0\">'Milk'</span><br/>  Tea=<span class=\"nu0\">4</span>         \u00a0; Drink<span class=\"sy0\">.</span>4=<span class=\"st0\">'Tea'</span><br/>  Water=<span class=\"nu0\">5</span>       \u00a0; Drink<span class=\"sy0\">.</span>5=<span class=\"st0\">'Water'</span><br/>  Denmark=<span class=\"nu0\">1</span>     \u00a0; Nation<span class=\"sy0\">.</span>1=<span class=\"st0\">'Denmark'</span><br/>  England=<span class=\"nu0\">2</span>     \u00a0; Nation<span class=\"sy0\">.</span>2=<span class=\"st0\">'England'</span><br/>  Germany=<span class=\"nu0\">3</span>     \u00a0; Nation<span class=\"sy0\">.</span>3=<span class=\"st0\">'Germany'</span><br/>  Norway=<span class=\"nu0\">4</span>      \u00a0; Nation<span class=\"sy0\">.</span>4=<span class=\"st0\">'Norway'</span><br/>  Sweden=<span class=\"nu0\">5</span>      \u00a0; Nation<span class=\"sy0\">.</span>5=<span class=\"st0\">'Sweden'</span><br/>  Blue=<span class=\"nu0\">1</span>        \u00a0; Color<span class=\"sy0\">.</span>1=<span class=\"st0\">'Blue'</span><br/>  Green=<span class=\"nu0\">2</span>       \u00a0; Color<span class=\"sy0\">.</span>2=<span class=\"st0\">'Green'</span><br/>  Red=<span class=\"nu0\">3</span>         \u00a0; Color<span class=\"sy0\">.</span>3=<span class=\"st0\">'Red'</span><br/>  White=<span class=\"nu0\">4</span>       \u00a0; Color<span class=\"sy0\">.</span>4=<span class=\"st0\">'White'</span><br/>  Yellow=<span class=\"nu0\">5</span>      \u00a0; Color<span class=\"sy0\">.</span>5=<span class=\"st0\">'Yellow'</span><br/>  Blend=<span class=\"nu0\">1</span>       \u00a0; Smoke<span class=\"sy0\">.</span>1=<span class=\"st0\">'Blend'</span><br/>  BlueMaster=<span class=\"nu0\">2</span>  \u00a0; Smoke<span class=\"sy0\">.</span>2=<span class=\"st0\">'BlueMaster'</span><br/>  Dunhill=<span class=\"nu0\">3</span>     \u00a0; Smoke<span class=\"sy0\">.</span>3=<span class=\"st0\">'Dunhill'</span><br/>  PallMall=<span class=\"nu0\">4</span>    \u00a0; Smoke<span class=\"sy0\">.</span>4=<span class=\"st0\">'PallMall'</span><br/>  Prince=<span class=\"nu0\">5</span>      \u00a0; Smoke<span class=\"sy0\">.</span>5=<span class=\"st0\">'Prince'</span><br/>  Birds=<span class=\"nu0\">1</span>       \u00a0; Animal<span class=\"sy0\">.</span>1=<span class=\"st0\">'Birds'</span><br/>  Cats=<span class=\"nu0\">2</span>        \u00a0; Animal<span class=\"sy0\">.</span>2=<span class=\"st0\">'Cats'</span><br/>  Dog=<span class=\"nu0\">3</span>         \u00a0; Animal<span class=\"sy0\">.</span>3=<span class=\"st0\">'Dog'</span><br/>  Horse=<span class=\"nu0\">4</span>       \u00a0; Animal<span class=\"sy0\">.</span>4=<span class=\"st0\">'Horse'</span><br/>  Zebra=<span class=\"nu0\">5</span>       \u00a0; Animal<span class=\"sy0\">.</span>5=<span class=\"st0\">'Zebra'</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>out:<br/>  <span class=\"kw1\">Say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span></pre>"}, {"lang": "Ruby", "loc": 54, "block": "<pre class=\"ruby highlighted_source\">CONTENT = <span class=\"br0\">{</span> House:       <span class=\"st0\">''</span>,<br/>            Nationality: <span class=\"sy0\">%</span>i<span class=\"br0\">[</span>English Swedish Danish Norwegian German<span class=\"br0\">]</span>,<br/>            Colour:      <span class=\"sy0\">%</span>i<span class=\"br0\">[</span>Red Green White Blue Yellow<span class=\"br0\">]</span>,<br/>            Pet:         <span class=\"sy0\">%</span>i<span class=\"br0\">[</span>Dog Birds Cats Horse Zebra<span class=\"br0\">]</span>,<br/>            Drink:       <span class=\"sy0\">%</span>i<span class=\"br0\">[</span>Tea Coffee Milk Beer Water<span class=\"br0\">]</span>,<br/>            Smoke:       <span class=\"sy0\">%</span>i<span class=\"br0\">[</span>PallMall Dunhill BlueMaster Prince Blend<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> adjacent? <span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"kw1\">and</span> g<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==e<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>n<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==i <span class=\"kw1\">and</span> g<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==e<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> leftof? <span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"kw1\">and</span> g<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==e<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> coincident? <span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span><br/>  n.<span class=\"me1\">each_index</span>.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"kw1\">and</span> g<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==e<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> solve_zebra_puzzle<br/>  CONTENT<span class=\"br0\">[</span><span class=\"re3\">:Nationality</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>nation<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> nation.<span class=\"me1\">first</span> == <span class=\"re3\">:Norwegian</span>                              <span class=\"co1\"># 10</span><br/>    CONTENT<span class=\"br0\">[</span><span class=\"re3\">:Colour</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>colour<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> leftof?<span class=\"br0\">(</span>colour, <span class=\"re3\">:Green</span>, colour, <span class=\"re3\">:White</span><span class=\"br0\">)</span>               <span class=\"co1\"># 5</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>nation, <span class=\"re3\">:English</span>, colour, <span class=\"re3\">:Red</span><span class=\"br0\">)</span>           <span class=\"co1\"># 2</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> adjacent?<span class=\"br0\">(</span>nation, <span class=\"re3\">:Norwegian</span>, colour, <span class=\"re3\">:Blue</span><span class=\"br0\">)</span>          <span class=\"co1\"># 15</span><br/>      CONTENT<span class=\"br0\">[</span><span class=\"re3\">:Pet</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pet<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>nation, <span class=\"re3\">:Swedish</span>, pet, <span class=\"re3\">:Dog</span><span class=\"br0\">)</span>            <span class=\"co1\"># 3</span><br/>        CONTENT<span class=\"br0\">[</span><span class=\"re3\">:Drink</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>drink<span class=\"sy0\">|</span><br/>          <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> drink<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> == <span class=\"re3\">:Milk</span>                                 <span class=\"co1\"># 9</span><br/>          <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>nation, <span class=\"re3\">:Danish</span>, drink, <span class=\"re3\">:Tea</span><span class=\"br0\">)</span>         <span class=\"co1\"># 4</span><br/>          <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>colour, <span class=\"re3\">:Green</span>, drink, <span class=\"re3\">:Coffee</span><span class=\"br0\">)</span>       <span class=\"co1\"># 6</span><br/>          CONTENT<span class=\"br0\">[</span><span class=\"re3\">:Smoke</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>smoke<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:PallMall</span>, pet, <span class=\"re3\">:Birds</span><span class=\"br0\">)</span>      <span class=\"co1\"># 7</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:Dunhill</span>, colour, <span class=\"re3\">:Yellow</span><span class=\"br0\">)</span>   <span class=\"co1\"># 8</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:BlueMaster</span>, drink, <span class=\"re3\">:Beer</span><span class=\"br0\">)</span>   <span class=\"co1\"># 13</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> coincident?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:Prince</span>, nation, <span class=\"re3\">:German</span><span class=\"br0\">)</span>    <span class=\"co1\"># 14</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> adjacent?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:Blend</span>, pet, <span class=\"re3\">:Cats</span><span class=\"br0\">)</span>            <span class=\"co1\"># 11</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> adjacent?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:Blend</span>, drink, <span class=\"re3\">:Water</span><span class=\"br0\">)</span>         <span class=\"co1\"># 16</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> adjacent?<span class=\"br0\">(</span>smoke, <span class=\"re3\">:Dunhill</span>,pet, <span class=\"re3\">:Horse</span><span class=\"br0\">)</span>          <span class=\"co1\"># 12</span><br/>            print_out<span class=\"br0\">(</span>nation, colour, pet, drink, smoke<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_out <span class=\"br0\">(</span>nation, colour, pet, drink, smoke<span class=\"br0\">)</span><br/>  width = CONTENT.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x.<span class=\"me1\">flatten</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span>y.<span class=\"me1\">size</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><span class=\"br0\">}</span><br/>  fmt = width.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>w<span class=\"sy0\">|</span> <span class=\"st0\">\"%-#{w}s\"</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  national = nation<span class=\"br0\">[</span> pet.<span class=\"me1\">find_index</span><span class=\"br0\">(</span><span class=\"re3\">:Zebra</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"The Zebra is owned by the man who is #{national}\"</span>,<span class=\"st0\">\"\"</span><br/>  <span class=\"kw3\">puts</span> fmt <span class=\"sy0\">%</span> CONTENT.<span class=\"me1\">keys</span>, fmt <span class=\"sy0\">%</span> width.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>w<span class=\"sy0\">|</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">*</span>w<span class=\"br0\">}</span><br/>  <span class=\"br0\">[</span>nation,colour,pet,drink,smoke<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span>.<span class=\"me1\">each</span>.<span class=\"me1\">with_index</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x,n<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> fmt <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n,<span class=\"sy0\">*</span>x<span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>solve_zebra_puzzle</pre>"}, {"lang": "Scala", "loc": 78, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/* Note to the rules:<br/> * <br/> * It can further concluded that:<br/> * 5a: The green house cannot be at the h1 position<br/> * 5b: The white house cannot be at the h5 position<br/> * <br/> * 16: This rule is redundant.<br/> */</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Einstein <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> possibleMembers <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// pair clues results in 78 members</span><br/>    nationality <span class=\"sy0\">&lt;</span>- List<span class=\"br0\">(</span><span class=\"st0\">\"Norwegian\"</span>, <span class=\"st0\">\"German\"</span>, <span class=\"st0\">\"Dane\"</span>, <span class=\"st0\">\"Englishman\"</span>, <span class=\"st0\">\"Swede\"</span><span class=\"br0\">)</span><br/>    color <span class=\"sy0\">&lt;</span>- List<span class=\"br0\">(</span><span class=\"st0\">\"Red\"</span>, <span class=\"st0\">\"Green\"</span>, <span class=\"st0\">\"Yellow\"</span>, <span class=\"st0\">\"White\"</span>, <span class=\"st0\">\"Blue\"</span><span class=\"br0\">)</span><br/>    beverage <span class=\"sy0\">&lt;</span>- List<span class=\"br0\">(</span><span class=\"st0\">\"Milk\"</span>, <span class=\"st0\">\"Coffee\"</span>, <span class=\"st0\">\"Tea\"</span>, <span class=\"st0\">\"Beer\"</span>, <span class=\"st0\">\"Water\"</span><span class=\"br0\">)</span><br/>    animal <span class=\"sy0\">&lt;</span>- List<span class=\"br0\">(</span><span class=\"st0\">\"Dog\"</span>, <span class=\"st0\">\"Horse\"</span>, <span class=\"st0\">\"Birds\"</span>, <span class=\"st0\">\"Cats\"</span>, <span class=\"st0\">\"Zebra\"</span><span class=\"br0\">)</span><br/>    brand <span class=\"sy0\">&lt;</span>- List<span class=\"br0\">(</span><span class=\"st0\">\"Blend\"</span>, <span class=\"st0\">\"Pall Mall\"</span>, <span class=\"st0\">\"Prince\"</span>, <span class=\"st0\">\"Blue Master\"</span>, <span class=\"st0\">\"Dunhill\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>color <span class=\"sy0\">==</span> <span class=\"st0\">\"Red\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>nationality <span class=\"sy0\">==</span> <span class=\"st0\">\"Englishman\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nationality <span class=\"sy0\">==</span> <span class=\"st0\">\"Swede\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>animal <span class=\"sy0\">==</span> <span class=\"st0\">\"Dog\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nationality <span class=\"sy0\">==</span> <span class=\"st0\">\"Dane\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>beverage <span class=\"sy0\">==</span> <span class=\"st0\">\"Tea\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #4</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>color <span class=\"sy0\">==</span> <span class=\"st0\">\"Green\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>beverage <span class=\"sy0\">==</span> <span class=\"st0\">\"Coffee\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #6</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>brand <span class=\"sy0\">==</span> <span class=\"st0\">\"Pall Mall\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>animal <span class=\"sy0\">==</span> <span class=\"st0\">\"Birds\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #7</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>brand <span class=\"sy0\">==</span> <span class=\"st0\">\"Dunhill\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>color <span class=\"sy0\">==</span> <span class=\"st0\">\"Yellow\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #8</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>brand <span class=\"sy0\">==</span> <span class=\"st0\">\"Blue Master\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>beverage <span class=\"sy0\">==</span> <span class=\"st0\">\"Beer\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #13</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>brand <span class=\"sy0\">==</span> <span class=\"st0\">\"Prince\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>nationality <span class=\"sy0\">==</span> <span class=\"st0\">\"German\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #14</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> House<span class=\"br0\">(</span>nationality, color, beverage, animal, brand<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> members <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// Neighborhood clues</span><br/>    h1 <span class=\"sy0\">&lt;</span>- housesLeftOver<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>p.<span class=\"me1\">nationality</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Norwegia\"</span> <span class=\"coMULTI\">/* #10 */</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p.<span class=\"me1\">color</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"Green\"</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* #5a */</span><span class=\"br0\">)</span> <span class=\"co1\">// 28</span><br/>    h3 <span class=\"sy0\">&lt;</span>- housesLeftOver<span class=\"br0\">(</span>h1<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">beverage</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Milk\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #9 // 24</span><br/>    h2 <span class=\"sy0\">&lt;</span>- housesLeftOver<span class=\"br0\">(</span>h1, h3<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">color</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Blue\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #15</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> matchMiddleBrandAnimal<span class=\"br0\">(</span>h1, h2, h3, <span class=\"st0\">\"Blend\"</span>, <span class=\"st0\">\"Cats\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #11</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> matchCornerBrandAnimal<span class=\"br0\">(</span>h1, h2, <span class=\"st0\">\"Horse\"</span>, <span class=\"st0\">\"Dunhill\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #12</span><br/>    h4 <span class=\"sy0\">&lt;</span>- housesLeftOver<span class=\"br0\">(</span>h1, h2, h3<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">checkAdjacentWhite</span><span class=\"br0\">(</span>h3<span class=\"br0\">)</span> <span class=\"coMULTI\">/* #5 */</span><span class=\"br0\">)</span><br/>    h5 <span class=\"sy0\">&lt;</span>- housesLeftOver<span class=\"br0\">(</span>h1, h2, h3, h4<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">//  Redundant tests</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> h2.<span class=\"me1\">checkAdjacentWhite</span><span class=\"br0\">(</span>h1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> h3.<span class=\"me1\">checkAdjacentWhite</span><span class=\"br0\">(</span>h2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> matchCornerBrandAnimal<span class=\"br0\">(</span>h5, h4, <span class=\"st0\">\"Horse\"</span>, <span class=\"st0\">\"Dunhill\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> matchMiddleBrandAnimal<span class=\"br0\">(</span>h2, h3, h4, <span class=\"st0\">\"Blend\"</span>, <span class=\"st0\">\"Cats\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> matchMiddleBrandAnimal<span class=\"br0\">(</span>h3, h4, h5, <span class=\"st0\">\"Blend\"</span>, <span class=\"st0\">\"Cats\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> Seq<span class=\"br0\">(</span>h1, h2, h3, h4, h5<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> matchMiddleBrandAnimal<span class=\"br0\">(</span>home1<span class=\"sy0\">:</span> House, home2<span class=\"sy0\">:</span> House, home3<span class=\"sy0\">:</span> House, brand<span class=\"sy0\">:</span> String, animal<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span>home1.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> animal || home2.<span class=\"me1\">brand</span> <span class=\"sy0\">!=</span> brand || home3.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> animal<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>      <span class=\"br0\">(</span>home1.<span class=\"me1\">brand</span> <span class=\"sy0\">==</span> brand || home2.<span class=\"me1\">animal</span> <span class=\"sy0\">!=</span> animal || home3.<span class=\"me1\">brand</span> <span class=\"sy0\">==</span> brand<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> matchCornerBrandAnimal<span class=\"br0\">(</span>corner<span class=\"sy0\">:</span> House, inner<span class=\"sy0\">:</span> House, animal<span class=\"sy0\">:</span> String, brand<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span>corner.<span class=\"me1\">brand</span> <span class=\"sy0\">!=</span> brand || inner.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> animal<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>corner.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> animal || inner.<span class=\"me1\">brand</span> <span class=\"sy0\">!=</span> brand<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> housesLeftOver<span class=\"br0\">(</span>pickedHouses<span class=\"sy0\">:</span> House<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>House<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    possibleMembers.<span class=\"me1\">filter</span><span class=\"br0\">(</span>house <span class=\"sy0\">=&gt;</span> pickedHouses.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">totalUnEqual</span><span class=\"br0\">(</span>house<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> House<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nationality<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> color<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> beverage<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> animal<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> brand<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      f<span class=\"st0\">\"$nationality%10s, ${color + \"</span>, <span class=\"st0\">\"}%-8s$beverage,<span class=\"es1\">\\t</span>$animal,<span class=\"es1\">\\t</span>$brand.\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> totalUnEqual<span class=\"br0\">(</span>home2<span class=\"sy0\">:</span> House<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">animal</span> <span class=\"sy0\">!=</span> home2.<span class=\"me1\">animal</span> <span class=\"sy0\">&amp;&amp;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">beverage</span> <span class=\"sy0\">!=</span> home2.<span class=\"me1\">beverage</span> <span class=\"sy0\">&amp;&amp;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">brand</span> <span class=\"sy0\">!=</span> home2.<span class=\"me1\">brand</span> <span class=\"sy0\">&amp;&amp;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">color</span> <span class=\"sy0\">!=</span> home2.<span class=\"me1\">color</span> <span class=\"sy0\">&amp;&amp;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">nationality</span> <span class=\"sy0\">!=</span> home2.<span class=\"me1\">nationality</span><br/>\u00a0<br/>    <span class=\"co1\">//** Checks if the this green house is next to the other white house*/</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> checkAdjacentWhite<span class=\"br0\">(</span>home2<span class=\"sy0\">:</span> House<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">color</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Green\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>home2.<span class=\"me1\">color</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"White\"</span><span class=\"br0\">)</span> <span class=\"co1\">// #5</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Main program</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> beest <span class=\"sy0\">=</span> <span class=\"st0\">\"Zebra\"</span><br/>    members.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">filter</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">animal</span> <span class=\"sy0\">==</span> beest<span class=\"br0\">)</span><span class=\"br0\">)</span>.<br/>      <span class=\"me1\">foreach</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"The ${s.nationality} is the owner of the ${beest.toLowerCase}.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"The ${members.size} solution(s) are:\"</span><span class=\"br0\">)</span><br/>    members.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>solution <span class=\"sy0\">=&gt;</span> solution.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>h <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"House ${h._2 + 1} ${h._1}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"co1\">// loc 58</span></pre>"}, {"lang": "Sidef", "loc": 52, "block": "<pre class=\"ruby highlighted_source\">var CONTENT = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><br/>            <span class=\"re3\">:House</span>       <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">nil</span>,<br/>            <span class=\"re3\">:Nationality</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">:English</span>, <span class=\"re3\">:Swedish</span>, <span class=\"re3\">:Danish</span>, <span class=\"re3\">:Norwegian</span>, <span class=\"re3\">:German</span><span class=\"br0\">]</span>,<br/>            <span class=\"re3\">:Colour</span>      <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">:Red</span>, <span class=\"re3\">:Green</span>, <span class=\"re3\">:White</span>, <span class=\"re3\">:Blue</span>, <span class=\"re3\">:Yellow</span><span class=\"br0\">]</span>,<br/>            <span class=\"re3\">:Pet</span>         <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">:Dog</span>, <span class=\"re3\">:Birds</span>, <span class=\"re3\">:Cats</span>, <span class=\"re3\">:Horse</span>, <span class=\"re3\">:Zebra</span><span class=\"br0\">]</span>,<br/>            <span class=\"re3\">:Drink</span>       <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">:Tea</span>, <span class=\"re3\">:Coffee</span>, <span class=\"re3\">:Milk</span>, <span class=\"re3\">:Beer</span>, <span class=\"re3\">:Water</span><span class=\"br0\">]</span>,<br/>            <span class=\"re3\">:Smoke</span>       <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">:PallMall</span>, <span class=\"re3\">:Dunhill</span>, <span class=\"re3\">:BlueMaster</span>, <span class=\"re3\">:Prince</span>, <span class=\"re3\">:Blend</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>func adjacent<span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"sy0\">&amp;&amp;</span> g<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==e<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==i <span class=\"sy0\">&amp;&amp;</span> g<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==e<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func leftof<span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"sy0\">&amp;&amp;</span> g<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>==e <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func coincident<span class=\"br0\">(</span>n,i,g,e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  n.<span class=\"me1\">indices</span>.<span class=\"me1\">any</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> n<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==i <span class=\"sy0\">&amp;&amp;</span> g<span class=\"br0\">[</span>x<span class=\"br0\">]</span>==e <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func solve <span class=\"br0\">{</span><br/>  CONTENT<span class=\"br0\">{</span>:Nationality<span class=\"br0\">}</span>.<span class=\"me1\">permutations</span><span class=\"br0\">{</span><span class=\"sy0\">|*</span>nation<span class=\"sy0\">|</span><br/>    nation.<span class=\"me1\">first</span> == <span class=\"re3\">:Norwegian</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"sy0\">&amp;&amp;</span> CONTENT<span class=\"br0\">{</span>:Colour<span class=\"br0\">}</span>.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span><span class=\"sy0\">|*</span>colour<span class=\"sy0\">|</span><br/>          leftof<span class=\"br0\">(</span>colour,:Green,colour,:White<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>       <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>nation,:English,colour,:Red<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>       <span class=\"sy0\">&amp;&amp;</span> adjacent<span class=\"br0\">(</span>nation,:Norwegian,colour,:Blue<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>       <span class=\"sy0\">&amp;&amp;</span> CONTENT<span class=\"br0\">{</span>:Pet<span class=\"br0\">}</span>.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span><span class=\"sy0\">|*</span>pet<span class=\"sy0\">|</span><br/>             coincident<span class=\"br0\">(</span>nation,:Swedish,pet,:Dog<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>          <span class=\"sy0\">&amp;&amp;</span> CONTENT<span class=\"br0\">{</span>:Drink<span class=\"br0\">}</span>.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span><span class=\"sy0\">|*</span>drink<span class=\"sy0\">|</span><br/>               drink<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> == <span class=\"re3\">:Milk</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>nation,:Danish,drink,:Tea<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>colour,:Green,drink,:Coffee<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"sy0\">&amp;&amp;</span> CONTENT<span class=\"br0\">{</span>:Smoke<span class=\"br0\">}</span>.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span><span class=\"sy0\">|*</span>smoke<span class=\"sy0\">|</span><br/>                coincident<span class=\"br0\">(</span>smoke,:PallMall,pet,:Birds<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>smoke,:Dunhill,colour,:Yellow<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>smoke,:BlueMaster,drink,:Beer<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> coincident<span class=\"br0\">(</span>smoke,:Prince,nation,:German<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> adjacent<span class=\"br0\">(</span>smoke,:Blend,pet,:Cats<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> adjacent<span class=\"br0\">(</span>smoke,:Blend,drink,:Water<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> adjacent<span class=\"br0\">(</span>smoke,:Dunhill,pet,:Horse<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">[</span>nation,colour,pet,drink,smoke<span class=\"br0\">]</span><br/><span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var res = solve<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>var keys = <span class=\"br0\">[</span><span class=\"re3\">:House</span>, <span class=\"re3\">:Nationality</span>, <span class=\"re3\">:Colour</span>, <span class=\"re3\">:Pet</span>, <span class=\"re3\">:Drink</span>, <span class=\"re3\">:Smoke</span><span class=\"br0\">]</span><br/>var width = keys.<span class=\"me1\">map</span><span class=\"br0\">{</span> .<span class=\"me1\">len</span> <span class=\"br0\">}</span><br/>var fmt = width.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>w<span class=\"sy0\">|</span> <span class=\"st0\">\"%-#{w+2}s\"</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"The Zebra is owned by the man who is #{res[0][res[2].first_index(:Zebra)]}<span class=\"es0\">\\n</span>\"</span><br/>say <span class=\"br0\">(</span>fmt <span class=\"sy0\">%</span> keys..., <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>, fmt <span class=\"sy0\">%</span> width.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>w<span class=\"sy0\">|</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">*</span>w <span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/>res<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">indices</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> res.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">}</span>.<span class=\"me1\">each_kv</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> say fmt<span class=\"sy0\">%</span><span class=\"br0\">(</span>k,v...<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 251, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* Attributes and values *)<br/>val str_attributes = Vector.fromList [\"Color\",    \"Nation\",  \"Drink\", \"Pet\",        \"Smoke\"]<br/>val str_colors     = Vector.fromList [\"Red\",      \"Green\",   \"White\", \"Yellow\",     \"Blue\"]<br/>val str_nations    = Vector.fromList [\"English\",  \"Swede\",   \"Dane\",  \"German\",     \"Norwegian\"]<br/>val str_drinks     = Vector.fromList [\"Tea\",      \"Coffee\",  \"Milk\",  \"Beer\",       \"Water\"]<br/>val str_pets       = Vector.fromList [\"Dog\",      \"Birds\",   \"Cats\",  \"Horse\",      \"Zebra\"]<br/>val str_smokes     = Vector.fromList [\"PallMall\", \"Dunhill\", \"Blend\", \"BlueMaster\", \"Prince\"]<br/>\u00a0<br/>val (Color, Nation, Drink, Pet, Smoke)             = (0, 1, 2, 3, 4)\t(* Attributes *)<br/>val (Red, Green, White, Yellow, Blue)              = (0, 1, 2, 3, 4)\t(* Color      *)<br/>val (English, Swede, Dane, German, Norwegian)      = (0, 1, 2, 3, 4)\t(* Nation     *)<br/>val (Tea, Coffee, Milk, Beer, Water)               = (0, 1, 2, 3, 4)\t(* Drink      *)<br/>val (Dog, Birds, Cats, Horse, Zebra)               = (0, 1, 2, 3, 4)\t(* Pet        *)<br/>val (PallMall, Dunhill, Blend, BlueMaster, Prince) = (0, 1, 2, 3, 4)\t(* Smoke      *)<br/>\u00a0<br/>type attr    = int<br/>type value   = int<br/>type houseno = int<br/>\u00a0<br/>(* Rules *)<br/>datatype rule =<br/>\t  AttrPairRule of (attr * value) * (attr * value)<br/>\t| NextToRule   of (attr * value) * (attr * value)<br/>\t| LeftOfRule   of (attr * value) * (attr * value)<br/>\u00a0<br/>(* Conditions *)<br/>val rules = [<br/>AttrPairRule ((Nation, English), (Color, Red)),\t\t(* #02 *)<br/>AttrPairRule ((Nation, Swede), (Pet, Dog)),\t\t(* #03 *)<br/>AttrPairRule ((Nation, Dane), (Drink, Tea)), \t\t(* #04 *)<br/>LeftOfRule   ((Color, Green), (Color, White)),\t\t(* #05 *)<br/>AttrPairRule ((Color, Green), (Drink, Coffee)),\t\t(* #06 *)<br/>AttrPairRule ((Smoke, PallMall), (Pet, Birds)),\t\t(* #07 *)<br/>AttrPairRule ((Smoke, Dunhill), (Color, Yellow)),\t(* #08 *)<br/>NextToRule   ((Smoke, Blend), (Pet, Cats)),\t\t(* #11 *)<br/>NextToRule   ((Smoke, Dunhill), (Pet, Horse)),\t\t(* #12 *)<br/>AttrPairRule ((Smoke, BlueMaster), (Drink, Beer)),\t(* #13 *)<br/>AttrPairRule ((Nation, German), (Smoke, Prince)),\t(* #14 *)<br/>NextToRule   ((Nation, Norwegian), (Color, Blue)),\t(* #15 *)<br/>NextToRule   ((Smoke, Blend), (Drink, Water))]\t\t(* #16 *)<br/>\u00a0<br/>\u00a0<br/>type house = value option * value option * value option * value option * value option<br/>\u00a0<br/>fun houseval ((a, b, c, d, e)\u00a0: house, 0\u00a0: attr) = a<br/>  | houseval ((a, b, c, d, e)\u00a0: house, 1\u00a0: attr) = b<br/>  | houseval ((a, b, c, d, e)\u00a0: house, 2\u00a0: attr) = c<br/>  | houseval ((a, b, c, d, e)\u00a0: house, 3\u00a0: attr) = d<br/>  | houseval ((a, b, c, d, e)\u00a0: house, 4\u00a0: attr) = e<br/>  | houseval _ = raise Domain<br/>\u00a0<br/>fun sethouseval ((a, b, c, d, e)\u00a0: house, 0\u00a0: attr, a2\u00a0: value option) = (a2, b,  c,  d,  e )<br/>  | sethouseval ((a, b, c, d, e)\u00a0: house, 1\u00a0: attr, b2\u00a0: value option) = (a,  b2, c,  d,  e )<br/>  | sethouseval ((a, b, c, d, e)\u00a0: house, 2\u00a0: attr, c2\u00a0: value option) = (a,  b,  c2, d,  e )<br/>  | sethouseval ((a, b, c, d, e)\u00a0: house, 3\u00a0: attr, d2\u00a0: value option) = (a,  b,  c,  d2, e )<br/>  | sethouseval ((a, b, c, d, e)\u00a0: house, 4\u00a0: attr, e2\u00a0: value option) = (a,  b,  c,  d,  e2)<br/>  | sethouseval _ = raise Domain<br/>\u00a0<br/>fun getHouseVal houses (no, attr) = houseval (Array.sub (houses, no), attr)<br/>fun setHouseVal houses (no, attr, newval) =<br/>\tArray.update (houses, no, sethouseval (Array.sub (houses, no), attr, newval))<br/>\u00a0<br/>\u00a0<br/>fun match (house, (rule_attr, rule_val)) =<br/>\tlet<br/>\t  val value = houseval (house, rule_attr)<br/>\tin<br/>\t  isSome value andalso valOf value = rule_val<br/>\tend<br/>\u00a0<br/>fun matchNo houses (no, rule) =<br/>\t match (Array.sub (houses, no), rule)<br/>\u00a0<br/>fun compare (house1, house2, ((rule_attr1, rule_val1), (rule_attr2, rule_val2))) =<br/>\tlet<br/>\t  val val1 = houseval (house1, rule_attr1)<br/>\t  val val2 = houseval (house2, rule_attr2)<br/>\tin<br/>\t  if isSome val1 andalso isSome val2<br/>\t  then (valOf val1 = rule_val1 andalso valOf val2 &lt;&gt; rule_val2)<br/>\t         orelse<br/>\t       (valOf val1 &lt;&gt; rule_val1 andalso valOf val2 = rule_val2)<br/>\t  else false<br/>\tend<br/>\u00a0<br/>fun compareNo houses (no1, no2, rulepair) =<br/>\tcompare (Array.sub (houses, no1), Array.sub (houses, no2), rulepair)<br/>\u00a0<br/>\u00a0<br/>fun invalid houses no (AttrPairRule rulepair) =<br/>\tcompareNo houses (no, no, rulepair)<br/>\u00a0<br/>  | invalid houses no (NextToRule rulepair) =<br/>  \t(if no &gt; 0<br/>\t then compareNo houses (no, no-1, rulepair)<br/>\t else true)<br/>\tandalso<br/>\t(if no &lt; 4<br/>\t then compareNo houses (no, no+1, rulepair)<br/>\t else true)<br/>\u00a0<br/>  | invalid houses no (LeftOfRule rulepair) =<br/>  \tif no &gt; 0<br/>\tthen compareNo houses (no-1, no, rulepair)<br/>\telse matchNo houses (no, #1rulepair)<br/>\u00a0<br/>\u00a0<br/>(*<br/> * val checkRulesForNo\u00a0: house vector -&gt; houseno -&gt; bool<br/> * Check all rules for a house;<br/> * Returns true, when one rule was invalid.<br/> *)<br/>fun checkRulesForNo (houses\u00a0: house array) no =<br/>\tlet<br/>\t  exception RuleError<br/>\tin<br/>\t  (map (fn rule =&gt; if invalid houses no rule then raise RuleError else ()) rules;<br/>\t   false)<br/>\t  handle RuleError =&gt; true<br/>\tend<br/>\u00a0<br/>(*<br/> * val checkAll\u00a0: house vector -&gt; bool<br/> * Check all rules;<br/> * return true if everything is ok.<br/> *)<br/>fun checkAll (houses\u00a0: house array) =<br/>\tlet<br/>\t  exception RuleError<br/>\tin<br/>\t  (map (fn no =&gt; if checkRulesForNo houses no then raise RuleError else ()) [0,1,2,3,4];<br/>\t   true)<br/>\t  handle RuleError =&gt; false<br/>\tend<br/>\u00a0<br/>\u00a0<br/>(*<br/> *<br/> * House printing for debugging<br/> *<br/> *)<br/>\u00a0<br/>fun valToString (0, SOME a) = Vector.sub (str_colors,  a)<br/>  | valToString (1, SOME b) = Vector.sub (str_nations, b)<br/>  | valToString (2, SOME c) = Vector.sub (str_drinks,  c)<br/>  | valToString (3, SOME d) = Vector.sub (str_pets,    d)<br/>  | valToString (4, SOME e) = Vector.sub (str_smokes,  e)<br/>  | valToString _ = \"-\"<br/>\u00a0<br/>(*<br/> * Note:<br/> * Format needs SML NJ<br/> *)<br/>fun printHouse no ((a, b, c, d, e)\u00a0: house) =<br/>\t(<br/>\t  print (Format.format \"%12d\" [Format.LEFT (12, Format.INT no)]);<br/>\t  print (Format.format \"%12s%12s%12s%12s%12s\"<br/>\t  \t(map (fn (x, y) =&gt; Format.LEFT (12, Format.STR (valToString (x, y))))<br/>\t\t\t[(0,a), (1,b), (2,c), (3,d), (4,e)]));<br/>\t  print (\"\\n\")<br/>\t)<br/>\u00a0<br/>fun printHouses houses =<br/>\t(<br/>\t  print (Format.format \"%12s\" [Format.LEFT (12, Format.STR \"House\")]);<br/>\t  Vector.map (fn a =&gt; print (Format.format \"%12s\" [Format.LEFT (12, Format.STR a)]))<br/>\t  \tstr_attributes;<br/>\t  print \"\\n\";<br/>\t  Array.foldli (fn (no, house, _) =&gt; printHouse no house) () houses<br/>\t)<br/>\u00a0<br/>(*<br/> *<br/> * Solving<br/> *<br/> *)<br/>\u00a0<br/>exception SolutionFound<br/>\u00a0<br/>fun search (houses\u00a0: house array, used\u00a0: bool Array2.array) (no\u00a0: houseno, attr\u00a0: attr) = <br/>\tlet<br/>\t  val i = ref 0<br/>\t  val (nextno, nextattr) = if attr &lt; 4 then (no, attr + 1) else (no + 1, 0)<br/>\tin<br/>\t  if isSome (getHouseVal houses (no, attr))<br/>\t  then<br/>\t  (<br/>\t    search (houses, used) (nextno, nextattr)<br/>\t  )<br/>\t  else<br/>\t  (<br/>\t    while (!i &lt; 5)<br/>\t    do<br/>\t    (<br/>\t      if Array2.sub (used, attr,\u00a0!i) then ()<br/>\t      else<br/>\t      (<br/>\t          Array2.update (used, attr,\u00a0!i, true);<br/>\t          setHouseVal houses (no, attr, SOME (!i));<br/>\u00a0<br/>\t          if checkAll houses then<br/>\t          (<br/>\t            if no = 4 andalso attr = 4<br/>\t            then raise SolutionFound<br/>\t            else search (houses, used) (nextno, nextattr)<br/>\t          )<br/>\t          else ();<br/>\t          Array2.update (used, attr,\u00a0!i, false)<br/>\t      ); (* else *)<br/>\t      i\u00a0:=\u00a0!i + 1<br/>\t    ); (* do *)<br/>\t    setHouseVal houses (no, attr, NONE)<br/>\t  ) (* else *)<br/>\tend<br/>\u00a0<br/>fun init () =<br/>\tlet<br/>\t  val unknown\u00a0: house = (NONE, NONE, NONE, NONE, NONE)<br/>\t  val houses  = Array.fromList [unknown, unknown, unknown, unknown, unknown]<br/>\t  val used    = Array2.array (5, 5, false)<br/>\tin<br/>\t  (houses, used)<br/>\tend<br/>\u00a0<br/>fun solve () =<br/>\tlet<br/>\t  val (houses, used) = init()<br/>\tin<br/>\t  setHouseVal houses (2, Drink, SOME Milk);\t\t(* #09 *)<br/>\t  Array2.update (used, Drink, Milk, true);<br/>\t  setHouseVal houses (0, Nation, SOME Norwegian);\t(* #10 *)<br/>\t  Array2.update (used, Nation, Norwegian, true);<br/>\t  (search (houses, used) (0, 0); NONE)<br/>\t  handle SolutionFound =&gt; SOME houses<br/>\tend<br/>\u00a0<br/>(*<br/> *<br/> * Execution<br/> *<br/> *)<br/>\u00a0<br/>fun main () = let<br/>\t  val solution = solve()<br/>\tin<br/>\t  if isSome solution<br/>\t  then printHouses (valOf solution)<br/>\t  else print \"No solution found!\\n\"<br/>\tend<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 116, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"co1\"># Implements the constants by binding them directly into the named procedures.</span><br/><span class=\"co1\"># This is much faster than the alternatives!</span><br/><span class=\"kw1\">proc</span> initConstants <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> remap <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>class elems<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tNumber <span class=\"br0\">{</span>One Two Three Four Five<span class=\"br0\">}</span><br/>\tColor <span class=\"br0\">{</span>Red Green Blue White Yellow<span class=\"br0\">}</span><br/>\tDrink <span class=\"br0\">{</span>Milk Coffee Water Beer Tea<span class=\"br0\">}</span><br/>\tSmoke <span class=\"br0\">{</span>PallMall Dunhill Blend BlueMaster Prince<span class=\"br0\">}</span><br/>\tPet <span class=\"br0\">{</span>Dog Cat Horse Bird Zebra<span class=\"br0\">}</span><br/>\tNation <span class=\"br0\">{</span>British Swedish Danish Norwegian German<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> i -<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">foreach</span> e <span class=\"re0\">$elems</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> remap <span class=\"st0\">\"<span class=\"es0\">\\$</span>${class}($e)\"</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"br0\">)</span> <span class=\"re0\">$elems</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> procedure <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">proc</span> <span class=\"re0\">$procedure</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> args <span class=\"re0\">$procedure</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$remap</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> body <span class=\"re0\">$procedure</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> isPossible <span class=\"br0\">{</span>number color drink smoke pet<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$number</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$Nation</span><span class=\"br0\">(</span>Norwegian<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Number</span><span class=\"br0\">(</span>One<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$color</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$Nation</span><span class=\"br0\">(</span>British<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Color</span><span class=\"br0\">(</span>Red<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$drink</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$Nation</span><span class=\"br0\">(</span>Danish<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Drink</span><span class=\"br0\">(</span>Tea<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$smoke</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$Nation</span><span class=\"br0\">(</span>German<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>Prince<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$pet</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$pet</span> <span class=\"re0\">$Nation</span><span class=\"br0\">(</span>Swedish<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Pet</span><span class=\"br0\">(</span>Dog<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$number</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$color</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$drink</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$smoke</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$pet</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> true<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Color</span><span class=\"br0\">(</span>Green<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Drink</span><span class=\"br0\">(</span>Coffee<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>PallMall<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$pet</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Pet</span><span class=\"br0\">(</span>Bird<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Color</span><span class=\"br0\">(</span>Yellow<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>Dunhill<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Number</span><span class=\"br0\">(</span>Three<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Drink</span><span class=\"br0\">(</span>Milk<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>BlueMaster<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Drink</span><span class=\"br0\">(</span>Beer<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Color</span><span class=\"br0\">(</span>Blue<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$Number</span><span class=\"br0\">(</span>Two<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Color</span><span class=\"br0\">(</span>Green<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$color</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> == <span class=\"re0\">$Color</span><span class=\"br0\">(</span>White<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> - <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> false<br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">set</span> diff <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> - <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$number</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>Blend<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$pet</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> == <span class=\"re0\">$Pet</span><span class=\"br0\">(</span>Cat<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$diff</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> false<br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$pet</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Pet</span><span class=\"br0\">(</span>Horse<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> == <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>Dunhill<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$diff</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> false<br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$Smoke</span><span class=\"br0\">(</span>Blend<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> == <span class=\"re0\">$Drink</span><span class=\"br0\">(</span>Water<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$diff</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> false<br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> showRow <span class=\"br0\">{</span>t data<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"co1\">#0 ($t) elems</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%6s:\u00a0%12s%12s%12s%12s%12s\"</span> <span class=\"re0\">$t</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$elems</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$elems</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$elems</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$elems</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$elems</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> main <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> perms <span class=\"br0\">[</span>struct::<span class=\"kw2\">list</span> permutations <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> number <span class=\"re0\">$perms</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>isPossible <span class=\"re0\">$number</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">foreach</span> color <span class=\"re0\">$perms</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>isPossible <span class=\"re0\">$number</span> <span class=\"re0\">$color</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw1\">foreach</span> drink <span class=\"re0\">$perms</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>isPossible <span class=\"re0\">$number</span> <span class=\"re0\">$color</span> <span class=\"re0\">$drink</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t\t<span class=\"kw1\">foreach</span> smoke <span class=\"re0\">$perms</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>isPossible <span class=\"re0\">$number</span> <span class=\"re0\">$color</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$smoke</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t\t    <span class=\"kw1\">foreach</span> pet <span class=\"re0\">$perms</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isPossible <span class=\"re0\">$number</span> <span class=\"re0\">$color</span> <span class=\"re0\">$drink</span> <span class=\"re0\">$smoke</span> <span class=\"re0\">$pet</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Found a solution:\"</span><br/>\t\t\t    showRow Nation <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/>\t\t\t    showRow Number <span class=\"re0\">$number</span><br/>\t\t\t    showRow Color  <span class=\"re0\">$color</span><br/>\t\t\t    showRow Drink  <span class=\"re0\">$drink</span><br/>\t\t\t    showRow Smoke  <span class=\"re0\">$smoke</span><br/>\t\t\t    showRow Pet    <span class=\"re0\">$pet</span><br/>\t\t\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>initConstants isPossible<br/>main</pre>"}, {"lang": "zkl", "loc": 61, "block": "<pre class=\"text highlighted_source\">var people,drinks,houses,smokes,pets; // lists treated as associated arrays<br/>fcn c2 { people.find(English)==houses.find(Red) }<br/>fcn c3 { people.find(Swede)==pets.find(Dog) }<br/>fcn c4 { people.find(Dane)==drinks.find(Tea) }<br/>fcn c5 { (houses.find(Green) + 1)==houses.find(White) }<br/>fcn c5a{ houses.find(Green)!=4 }\t// deduced constraint (from c5)<br/>fcn c5b{ houses.find(White)!=0 }\t// deduced constraint (from c5)<br/>fcn c6 { drinks.find(Coffee)==houses.find(Green) }<br/>fcn c7 { smokes.find(PallMall)==pets.find(Bird) }<br/>fcn c8 { houses.find(Yellow)==smokes.find(Dunhill) }<br/>fcn c9 { drinks[2]==Milk }  // 0,1,2,3,4<br/>fcn c10{ people[0]==Norwegian }<br/>fcn c11{ (smokes.find(Blend) - pets.find(Cat)).abs()==1 }<br/>fcn c12{ (pets.find(Horse) - smokes.find(Dunhill)).abs()==1 }<br/>fcn c13{ smokes.find(BlueMaster)==drinks.find(Beer) }<br/>fcn c14{ people.find(German)==smokes.find(Prince) }<br/>fcn c15{ (people.find(Norwegian) - houses.find(Blue)).abs()==1 }<br/>fcn c16{ (drinks.find(Water) - smokes.find(Blend)).abs()==1 }<br/>#&lt;&lt;&lt;#//////////////////////////////////////////////////////////////////////<br/>Showing a solution to c2,c5,c10,c15:<br/>\t|0\t   1       2         3         4<br/>--------+-------------------------------------------<br/>houses:\t|Yellow    Blue    Red       Green     White<br/>people:\t|Norwegian Dane    English   German    Swede<br/>#&lt;&lt;&lt;#//////////////////////////////////////////////////////////////////////<br/>\u00a0<br/>const Blue =0,Green     =1,Red    =2,White    =3,Yellow=4,<br/>      Dane =0,English   =1,German =2,Norwegian=3,Swede =4,<br/>      Beer =0,Coffee    =1,Milk   =2,Tea      =3,Water =4,<br/>      Blend=0,BlueMaster=1,Dunhill=2,PallMall =3,Prince=4,<br/>      Bird =0,Cat       =1,Dog    =2,Horse    =3,Zebra =4;<br/>perm5:=T(0,1,2,3,4)\u00a0: Utils.Helpers.permute(_); // 120 sets<br/>\u00a0<br/>constraints:=T(c2,c3,c4,c5,c5a,c5b,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16);<br/>constraints1:=T(c2,c5,c10,c15); // houses,people: 12 solutions<br/>constraints2:=T(c4,c6,c9);      // houses,people,drinks: down to 8 solutions<br/>foreach _houses,_people in (perm5,perm5){ houses,people=_houses,_people;<br/>   if(not constraints1.runNFilter(False)){ // all constraints are True<br/>      foreach _drinks in (perm5){ drinks=_drinks;<br/>\t if(not constraints2.runNFilter(False)){<br/>\t    foreach _smokes,_pets in (perm5,perm5){ smokes,pets=_smokes,_pets;<br/>\t       if(not constraints.runNFilter(False)) printSolution();<br/>\t    }// smokes,pets<br/>\t }<br/>      } // drinks<br/>   } // houses,people<br/>}<br/>fcn printSolution{<br/>   var titles=T(\"Houses:\",\"People:\",\"Drinks:\",\"Smokes:\",\"Pets:\"),<br/>       names=T(<br/>          T(\"Blue\", \"Green\",      \"Red\",    \"White\",    \"Yellow\",),<br/>\t  T(\"Dane\", \"English\",    \"German\", \"Norwegian\",\"Swede\",),<br/>\t  T(\"Beer\", \"Coffee\",     \"Milk\",   \"Tea\",      \"Water\",),<br/>\t  T(\"Blend\",\"Blue Master\",\"Dunhill\",\"Pall Mall\",\"Prince\",),<br/>\t  T(\"Bird\", \"Cat\",        \"Dog\",    \"Horse\",    \"Zebra\",) ),<br/>  \u00a0;<br/>   fmt:=(\"%-7s \" + \"%-11s \"*5).fmt;<br/>   foreach list,title,names in (T(houses,people,drinks,smokes,pets)<br/>\t   .zip(titles,names))<br/>      { println(list.apply(names.get):fmt(title,_.xplode())) }<br/>}</pre>"}]}