{"task": "Flatten_a_list", "blocks": [{"lang": "8th", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ take a list (array) and flatten it:<br/>\u00a0<br/>: (flatten)  \\ a -- a<br/>\t(<br/>\t\t\\ is it a number?<br/>\t\tdup &gt;kind ns:n n:= if<br/>\t\t\t\\ yes.  so add to the list<br/>\t\t\tr&gt; swap a:push &gt;r<br/>\t\telse<br/>\t\t\t\\ it is not, so flatten it<br/>\t\t\t(flatten)<br/>\t\tthen<br/>\t\tdrop<br/>\t) a:each drop\u00a0;<br/>\u00a0<br/>: flatten \\ a -- a<br/>\t[] &gt;r (flatten) r&gt;\u00a0;<br/>\u00a0<br/>[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>dup . cr<br/>flatten <br/>. cr <br/>bye<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten <span class=\"br0\">(</span>tr<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> tr<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">atom</span> tr<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> tr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>first tr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>rest tr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 14, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> flatten<span class=\"br0\">(</span>input:<span class=\"kw3\">Array</span><span class=\"br0\">)</span>:<span class=\"kw3\">Array</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> output:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> input.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">//typeof returns \"object\" when applied to arrays. This line recursively evaluates nested arrays,</span><br/>                <span class=\"co1\">// although it may break if the array contains objects that are not arrays.</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">typeof</span> input<span class=\"br0\">[</span>i<span class=\"br0\">]</span>==<span class=\"st0\">\"object\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\toutput=output.<span class=\"kw3\">concat</span><span class=\"br0\">(</span>flatten<span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\toutput.<span class=\"kw3\">push</span><span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> output;<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Element_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> To_String <span class=\"br0\">(</span>E\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Nestable_Lists <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Node_Kind <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Data_Node, List_Node<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Node <span class=\"br0\">(</span>Kind\u00a0: Node_Kind<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> List <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Node;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Node <span class=\"br0\">(</span>Kind\u00a0: Node_Kind<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Next\u00a0: List;<br/>      <span class=\"kw1\">case</span> Kind <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> Data_Node =&gt;<br/>            Data   \u00a0: Element_Type;<br/>         <span class=\"kw3\">when</span> List_Node =&gt;<br/>            Sublist\u00a0: List;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Append <span class=\"br0\">(</span>L\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> List; E\u00a0: Element_Type<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Append <span class=\"br0\">(</span>L\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> List; N\u00a0: List<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Flatten <span class=\"br0\">(</span>L\u00a0: List<span class=\"br0\">)</span> <span class=\"kw1\">return</span> List;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> New_List <span class=\"br0\">(</span>E\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> List;<br/>   <span class=\"kw3\">function</span> New_List <span class=\"br0\">(</span>N\u00a0: List<span class=\"br0\">)</span> <span class=\"kw1\">return</span> List;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> To_String <span class=\"br0\">(</span>L\u00a0: List<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/><span class=\"kw1\">end</span> Nestable_Lists;</pre>"}, {"lang": "Aikido", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function flatten (list, result) {<br/>    foreach item list {<br/>        if (typeof(item) == \"vector\") {<br/>            flatten (item, result)<br/>        } else {<br/>            result.append (item)<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>var l = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>var newl = []<br/>flatten (l, newl)<br/>\u00a0<br/>// print out the nicely formatted result list<br/>print ('[')<br/>var comma = \"\"<br/>foreach item newl {<br/>    print (comma + item)<br/>    comma = \", \"<br/>}<br/>println(\"]\")<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 49, "block": "<pre class=\"text highlighted_source\">void<br/>show_list(list l)<br/>{<br/>    integer i, k;<br/>\u00a0<br/>    o_text(\"[\");<br/>\u00a0<br/>    i = 0;<br/>    while (i &lt; ~l) {<br/>        o_text(i\u00a0? \", \"\u00a0: \"\");<br/>        if (l_j_integer(k, l, i)) {<br/>            o_integer(k);<br/>        } else {<br/>            show_list(l[i]);<br/>        }<br/>        i += 1;<br/>    }<br/>\u00a0<br/>    o_text(\"]\");<br/>}<br/>\u00a0<br/>list<br/>flatten(list c, object o)<br/>{<br/>    if (__id(o) == INTEGER_ID) {<br/>        c.append(o);<br/>    } else {<br/>        l_ucall(o, flatten, 1, c);<br/>    }<br/>\u00a0<br/>    c;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list l;<br/>\u00a0<br/>    l = list(list(1), 2, list(list(3, 4), 5),<br/>             list(list(list())), list(list(list(6))), 7, 8, list());<br/>\u00a0<br/>    show_list(l);<br/>    o_byte('\\n');<br/>\u00a0<br/>    show_list(flatten(list(), l));<br/>    o_byte('\\n');<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 4, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> list <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span><span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>3<span class=\"sy1\">,</span>4<span class=\"br0\">)</span><span class=\"sy1\">,</span> 5<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>6<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span> 8<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "GNU APL", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      \u22a2list\u2190(2 3\u03c1\u03b96)(2 2\u03c1(7 8(2 2\u03c19 10 11 12)13)) 'ABCD'<br/>\u250f\u2192\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513<br/>\u2503\u250f\u2192\u2501\u2501\u2501\u2501\u2513 \u250f\u2192\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \"ABCD\"\u2503<br/>\u2503\u21931 2 3\u2503 \u2193      7  8\u2503       \u2503<br/>\u2503\u25034 5 6\u2503 \u2503          \u2503       \u2503<br/>\u2503\u2517\u2501\u2501\u2501\u2501\u2501\u251b \u2503\u250f\u2192\u2501\u2501\u2501\u2501\u2513 13\u2503       \u2503<br/>\u2503        \u2503\u2193 9 10\u2503   \u2503       \u2503<br/>\u2503        \u2503\u250311 12\u2503   \u2503       \u2503<br/>\u2503        \u2503\u2517\u2501\u2501\u2501\u2501\u2501\u251b   \u2503       \u2503<br/>\u2503        \u2517\u220a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b       \u2503<br/>\u2517\u220a\u220a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b<br/>      \u220alist<br/>\u250f\u2192\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513<br/>\u25031 2 3 4 5 6 7 8 9 10 11 12 13 'A''B''C''D'\u2503<br/>\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 12, "block": "<pre class=\"applescript highlighted_source\">my_flatten<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">on</span> my_flatten<span class=\"br0\">(</span>aList<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> aList <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">{</span>aList<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> aList <span class=\"kw3\">is</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">return</span> aList<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">return</span> my_flatten<span class=\"br0\">(</span><span class=\"kw2\">first</span> <span class=\"kw1\">item</span> <span class=\"kw3\">of</span> aList<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>my_flatten<span class=\"br0\">(</span>rest <span class=\"kw3\">of</span> aList<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> my_flatten<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 52, "block": "<pre class=\"autohotkey highlighted_source\">list <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% objPrint<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"co1\">; (( 1 ) 2 (( 3  4 ) 5 )(((())))(( 6 )) 7  8 ())</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% objPrint<span class=\"br0\">(</span>objFlatten<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; ( 1  2  3  4  5  6  7  8 )</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>!r::<a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">reload</span></a><br/>!q::<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">exitapp</span></a><br/>\u00a0<br/>objPrint<span class=\"br0\">(</span>ast<span class=\"sy0\">,</span> reserved<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\" \"</span> ast <span class=\"st0\">\" \"</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span>\u00a0!reserved<br/>    reserved <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"st0\">\"seen\"</span> <span class=\"sy0\">.</span> <span class=\"sy0\">&amp;</span>ast<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">; to keep track of unique objects within top object</span><br/>\u00a0<br/>  enum <span class=\"sy0\">:=</span> ast<span class=\"sy0\">.</span>_newenum<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> enum<span class=\"br0\">[</span>key<span class=\"sy0\">,</span> value<span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> reserved<span class=\"br0\">[</span><span class=\"st0\">\"seen\"</span> <span class=\"sy0\">.</span> <span class=\"sy0\">&amp;</span>value<span class=\"br0\">]</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a>  <span class=\"co1\">; don't copy repeat objects (circular references)</span><br/><span class=\"co1\">;   string .= key . \": \" . objPrint(value, reserved)</span><br/>    string <span class=\"sy0\">.=</span> objPrint<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> reserved<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span> string <span class=\"st0\">\")\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>objFlatten<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> ast<br/>\u00a0<br/>  flat <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; flat object</span><br/>\u00a0<br/>  enum <span class=\"sy0\">:=</span> ast<span class=\"sy0\">.</span>_newenum<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> enum<span class=\"br0\">[</span>key<span class=\"sy0\">,</span> value<span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>      flat<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      next <span class=\"sy0\">:=</span> objFlatten<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% next<span class=\"sy0\">.</span>_MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      flat<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>next<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> flat<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 11, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckoption.shtml\"><span class=\"kw3\">OPTION</span></a> COLLAPSE TRUE<br/>\u00a0<br/>lst$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\\\"</span><span class=\"nu0\">1</span>\\<span class=\"st0\">\",2,\\\"</span>\\\\\\<span class=\"st0\">\"3,4\\\\\\\"</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span>\\<span class=\"st0\">\",\\\"</span>\\\\\\<span class=\"st0\">\"\\\\\\\\\\\"</span>\\\\\\\\\\<span class=\"st0\">\"\\\\\\\"</span>\\<span class=\"st0\">\",\\\"</span>\\\\\\<span class=\"st0\">\"\\\\\\\\\\\"</span><span class=\"nu0\">6</span>\\\\\\\\\\<span class=\"st0\">\"\\\\\\\"</span>\\<span class=\"st0\">\",7,8,\\\"</span>\\<span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> lst$<br/>\u00a0<br/>REPEAT<br/>    lst$ <span class=\"sy0\">=</span> FLATTEN$<span class=\"br0\">(</span>lst$<span class=\"br0\">)</span><br/><span class=\"kw1\">UNTIL</span> AMOUNT<span class=\"br0\">(</span>lst$<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> AMOUNT<span class=\"br0\">(</span>FLATTEN$<span class=\"br0\">(</span>lst$<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> SORT$<span class=\"br0\">(</span>lst$<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Bracmat", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>( (myList = ((1), 2, ((3,4), 5), ((())), (((6))), 7, 8, ()))<br/>&amp; put$(\"Unevaluated:\")<br/>&amp; lst$myList<br/>&amp;\u00a0!myList:?myList          { the expression\u00a0!myList evaluates myList }<br/>&amp; put$(\"Flattened:\")<br/>&amp; lst$myList<br/>)<br/>\u00a0</pre>"}, {"lang": "Brat", "loc": 12, "block": "<pre class=\"text highlighted_source\">array.prototype.flatten = {<br/>  true? my.empty?<br/>    { [] }<br/>    { true? my.first.array?<br/>      { my.first.flatten + my.rest.flatten }<br/>      { [my.first] + my.rest.flatten }<br/>    }<br/>}<br/>\u00a0<br/>list = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>p \"List: #{list}\"<br/>p \"Flattened: #{list.flatten}\"</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {{1} 2 {{3 4} 5} {{{}}} {{{6}}} 7 8 {}}{\\[}{)to{\"Block\"==}ay}w!<br/>{1 2 3 4 5 6 7 8}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 118, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> list_t list_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>list<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> list_t<span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> is_list<span class=\"sy0\">,</span> ival<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* ival is either the integer value or list length */</span><br/>\tlist <span class=\"sy0\">*</span>lst<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>list new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tlist x <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>list_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>ival <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>is_list <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>lst <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> append<span class=\"br0\">(</span>list parent<span class=\"sy0\">,</span> list child<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tparent<span class=\"sy0\">-&gt;</span>lst <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>parent<span class=\"sy0\">-&gt;</span>lst<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>parent<span class=\"sy0\">-&gt;</span>ival <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tparent<span class=\"sy0\">-&gt;</span>lst<span class=\"br0\">[</span>parent<span class=\"sy0\">-&gt;</span>ival<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> child<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>list from_string<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>e<span class=\"sy0\">,</span> list parent<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tlist ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>parent<span class=\"br0\">)</span> parent <span class=\"sy0\">=</span> new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">']'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">*</span>e <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> parent<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'['</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tret <span class=\"sy0\">=</span> new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tret<span class=\"sy0\">-&gt;</span>is_list <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\tret<span class=\"sy0\">-&gt;</span>ival <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tappend<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tfrom_string<span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>s<span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tret <span class=\"sy0\">=</span> new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tret<span class=\"sy0\">-&gt;</span>is_list <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tret<span class=\"sy0\">-&gt;</span>ival <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtol.html\"><span class=\"kw3\">strtol</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tappend<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\ts<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">*</span>e <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> parent<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_list<span class=\"br0\">(</span>list l<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>l<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>l<span class=\"sy0\">-&gt;</span>is_list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> l<span class=\"sy0\">-&gt;</span>ival<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">-&gt;</span>ival<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tshow_list<span class=\"br0\">(</span>l<span class=\"sy0\">-&gt;</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">-&gt;</span>ival <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>list flatten<span class=\"br0\">(</span>list from<span class=\"sy0\">,</span> list to<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tlist t<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>to<span class=\"br0\">)</span> to <span class=\"sy0\">=</span> new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>from<span class=\"sy0\">-&gt;</span>is_list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt <span class=\"sy0\">=</span> new_list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span>t <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>from<span class=\"sy0\">;</span><br/>\t\tappend<span class=\"br0\">(</span>to<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> from<span class=\"sy0\">-&gt;</span>ival<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tflatten<span class=\"br0\">(</span>from<span class=\"sy0\">-&gt;</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> to<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> delete_list<span class=\"br0\">(</span>list l<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>l<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"sy0\">-&gt;</span>is_list <span class=\"sy0\">&amp;&amp;</span> l<span class=\"sy0\">-&gt;</span>ival<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">-&gt;</span>ival<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tdelete_list<span class=\"br0\">(</span>l<span class=\"sy0\">-&gt;</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>l<span class=\"sy0\">-&gt;</span>lst<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tlist l <span class=\"sy0\">=</span> from_string<span class=\"br0\">(</span><span class=\"st0\">\"[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Nested: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_list<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlist flat <span class=\"sy0\">=</span> flatten<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Flattened: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_list<span class=\"br0\">(</span>flat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* delete_list(l); delete_list(flat); */</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;list&gt;</span><br/><span class=\"co2\">#include &lt;boost/any.hpp&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">list</span><span class=\"sy1\">&lt;</span>boost<span class=\"sy4\">::</span><span class=\"me2\">any</span><span class=\"sy1\">&gt;</span> anylist<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> flatten<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">list</span><span class=\"sy1\">&lt;</span>boost<span class=\"sy4\">::</span><span class=\"me2\">any</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> list<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">typedef</span> anylist<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iterator<span class=\"sy4\">;</span><br/>\u00a0<br/>  iterator current <span class=\"sy1\">=</span> list.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>current <span class=\"sy3\">!</span><span class=\"sy1\">=</span> list.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>current<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>type<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>anylist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      iterator next <span class=\"sy1\">=</span> current<span class=\"sy4\">;</span><br/>      <span class=\"sy2\">++</span>next<span class=\"sy4\">;</span><br/>      list.<span class=\"me1\">splice</span><span class=\"br0\">(</span>next, boost<span class=\"sy4\">::</span><span class=\"me2\">any_cast</span><span class=\"sy1\">&lt;</span>anylist<span class=\"sy3\">&amp;</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>current<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      current <span class=\"sy1\">=</span> list.<span class=\"me1\">erase</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"sy2\">++</span>current<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 28, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCodeTasks<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">class</span> FlattenList<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ArrayList Flatten<span class=\"br0\">(</span><span class=\"kw1\">this</span> ArrayList List<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tArrayList NewList <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArrayList <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tNewList<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span> <span class=\"br0\">(</span> List <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> NewList<span class=\"sy0\">.</span><span class=\"me1\">OfType</span><span class=\"sy0\">&lt;</span>ArrayList<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> NewList<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span> <span class=\"br0\">(</span> NewList<span class=\"sy0\">.</span><span class=\"me1\">OfType</span><span class=\"sy0\">&lt;</span>ArrayList<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ElementAt</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tArrayList Temp <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ArrayList<span class=\"br0\">)</span>NewList<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tNewList<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span> <span class=\"br0\">(</span> index <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tNewList<span class=\"sy0\">.</span><span class=\"me1\">InsertRange</span> <span class=\"br0\">(</span> index, Temp <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> NewList<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 13, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>    \"Lazily flatten nested streams\"<br/>    {Anything*} flatten({Anything*} stream)<br/>        =&gt;  stream.flatMap((element)<br/>            =&gt;  switch (element)<br/>                case (is {Anything*}) flatten(element)<br/>                else [element]);<br/>\u00a0<br/>    value list = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []];<br/>\u00a0<br/>    print(list);<br/>    print(flatten(list).sequence());<br/>}</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn flatten <span class=\"br0\">[</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>lazy-seq<br/>    <span class=\"br0\">(</span>when-<span class=\"kw1\">let</span> <span class=\"br0\">[</span>s  <span class=\"br0\">(</span>seq coll<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>coll? <span class=\"br0\">(</span>first s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>concat <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>first s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>rest s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first s<span class=\"br0\">)</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>rest s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 12, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>flatten = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  arr.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> el<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> Array.<span class=\"me1\">isArray</span> el<br/>      xs.<span class=\"me1\">concat</span> flatten el<br/>    <span class=\"kw1\">else</span><br/>      xs.<span class=\"me1\">concat</span> <span class=\"br0\">[</span>el<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># test</span><br/>list = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>console.<span class=\"me1\">log</span> flatten list<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten <span class=\"br0\">(</span>structure<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> structure<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">atom</span> structure<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> structure<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">mapcan</span> #'flatten structure<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span> of Int32<span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span> of Int32<span class=\"br0\">]</span>.<span class=\"me1\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 43, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> TreeList<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">union</span> <span class=\"br0\">{</span> <span class=\"co1\">// A tagged union</span><br/>        TreeList<span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"sy0\">;</span> <span class=\"co1\">// it's a node</span><br/>        T data<span class=\"sy0\">;</span> <span class=\"co1\">// It's a leaf.</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> isArray <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"co1\">// = Contains an arr on default.</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> TreeList opCall<span class=\"br0\">(</span>A<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>A items<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        TreeList result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> el<span class=\"sy0\">;</span> items<span class=\"br0\">)</span><br/>            <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                TreeList item<span class=\"sy0\">;</span><br/>                item.<span class=\"me1\">isArray</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                item.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> el<span class=\"sy0\">;</span><br/>                result.<span class=\"me1\">arr</span> <span class=\"sy0\">~=</span> item<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                result.<span class=\"me1\">arr</span> <span class=\"sy0\">~=</span> el<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> isArray <span class=\"sy0\">?</span> arr.<span class=\"me1\">text</span> <span class=\"sy0\">:</span> data.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span> flatten<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> TreeList<span class=\"sy0\">!</span>T t<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t.<span class=\"me1\">isArray</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> t.<span class=\"me1\">arr</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>flatten.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>t.<span class=\"me1\">data</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> TreeList<span class=\"sy0\">!</span><span class=\"kw4\">int</span> L<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>L.<span class=\"me1\">sizeof</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> l <span class=\"sy0\">=</span> L<span class=\"br0\">(</span>L<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> L<span class=\"br0\">(</span>L<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> L<span class=\"br0\">(</span>L<span class=\"br0\">(</span>L<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> L<span class=\"br0\">(</span>L<span class=\"br0\">(</span>L<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span>L<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    l.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    l.<span class=\"me1\">flatten</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 11, "block": "<pre class=\"text highlighted_source\">(flatten):<br/>\tfor i in copy:<br/>\t\ti<br/>\t\tif =\u00a0:list type dup:<br/>\t\t\t(flatten)<br/>\u00a0<br/>flatten l:<br/>\t[ (flatten) l ]<br/>\u00a0<br/>\u00a0<br/>!. flatten [ [ 1 ] 2 [ [ 3 4 ] 5 ] [ [ [] ] ] [ [ [ 6 ] ] ] 7 8 [] ]</pre>"}, {"lang": "E", "loc": 11, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flatten<span class=\"br0\">(</span>nested<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flat <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> recur<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> list <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/List\"><span class=\"kw6\">List</span></a> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> elem <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> list <span class=\"br0\">{</span> recur<span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>            <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> other      <span class=\"br0\">{</span> flat.<span class=\"me1\">push</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    recur<span class=\"br0\">(</span>nested<span class=\"br0\">)</span><br/>    return flat.<span class=\"me1\">snapshot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>fflatten <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">null</span>? <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"kw1\">null</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span>? <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span>else <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>fflatten <span class=\"br0\">(</span>first <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fflatten <span class=\"br0\">(</span>rest <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;</span><br/><span class=\"br0\">(</span>define <span class=\"kw1\">L</span>' <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>fflatten <span class=\"kw1\">L</span><span class=\"br0\">)</span> <span class=\"co1\">;; use custom function</span><br/> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>flatten <span class=\"kw1\">L</span><span class=\"br0\">)</span> <span class=\"co1\">;; use built-in</span><br/> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Remarks</span><br/><span class=\"co1\">;; null is the same as () - the empty list - </span><br/><span class=\"br0\">(</span>flatten '<span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"kw1\">null</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"kw1\">null</span><br/><span class=\"br0\">(</span>flatten '<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  \u2192 <span class=\"kw1\">null</span><br/><span class=\"br0\">(</span>flatten <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>\u2757 <span class=\"kw1\">error</span><span class=\"sy0\">:</span> <span class=\"me1\">flatten</span> <span class=\"sy0\">:</span> <span class=\"me1\">expected</span> <span class=\"kw1\">list</span> <span class=\"sy0\">:</span> <span class=\"kw1\">null</span><br/>\u00a0<br/><span class=\"co1\">;; The 'reverse' of flatten is group</span><br/><span class=\"br0\">(</span>group '<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 9, "block": "<pre class=\"text highlighted_source\">xs =  [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>\u00a0<br/>flat = flat' []<br/>       where flat' n [] = n<br/>             flat' n (x::xs) <br/>               | x is List = flat' (flat' n xs) x<br/>               | else = x\u00a0:: flat' n xs<br/>\u00a0<br/>flat xs</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule RC do<br/>  def flatten([]), do: []<br/>  def flatten([h|t]), do: flatten(h) ++ flatten(t)<br/>  def flatten(h), do: [h] <br/>end<br/>\u00a0<br/>list = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []] <br/>\u00a0<br/># Our own implementation<br/>IO.inspect RC.flatten(list)<br/># Library function<br/>IO.inspect List.flatten(list)<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 29, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Element exposing <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Tree a<br/>  <span class=\"sy0\">=</span> Leaf a<br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>List <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>flatten\u00a0: Tree a <span class=\"sy0\">-&gt;</span> List a<br/>flatten tree <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> tree <span class=\"kw1\">of</span><br/>    Leaf a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>    Node list <span class=\"sy0\">-&gt;</span> List<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> flatten list<br/>\u00a0<br/><span class=\"co1\">-- [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]</span><br/>tree\u00a0: Tree <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>tree <span class=\"sy0\">=</span> Node<br/>  <span class=\"br0\">[</span> Node <span class=\"br0\">[</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> Leaf <span class=\"nu0\">2</span><br/>  <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span>Node <span class=\"br0\">[</span>Leaf <span class=\"nu0\">3</span><span class=\"sy0\">,</span> Leaf <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Leaf <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span>Node <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span>Node <span class=\"br0\">[</span>Node <span class=\"br0\">[</span>Leaf <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> Leaf <span class=\"nu0\">7</span><br/>  <span class=\"sy0\">,</span> Leaf <span class=\"nu0\">8</span><br/>  <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>flatten tree<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten <span class=\"br0\">(</span>mylist<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> mylist<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">atom</span> mylist<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> mylist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>t<br/>    <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span><span class=\"kw1\">car</span> mylist<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> mylist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 3, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">H</span><span class=\"br0\">]</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 21, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> a <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"nu0\">7</span><span class=\"sy2\">,</span> <span class=\"nu0\">8</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> flatten<span class=\"br0\">(</span> <span class=\"kw2\">object</span> s <span class=\"br0\">)</span><br/>\t<span class=\"kw2\">sequence</span> res <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw2\">sequence</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw2\">sequence</span> c <span class=\"sy1\">=</span> flatten<span class=\"br0\">(</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t\t\tres <span class=\"sy1\">&amp;=</span> c <br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>\t\t\tres <span class=\"sy1\">=</span> <span class=\"br0\">{</span> s <span class=\"br0\">}</span>  <br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">return</span> res<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> a<br/><span class=\"sy2\">?</span> flatten<span class=\"br0\">(</span>a<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> <span class=\"st0\">'a ll =<br/>    | I of '</span>a             <span class=\"co1\">// leaf Item</span><br/>    | L <span class=\"kw1\">of</span> <span class=\"st0\">'a ll list     // '</span> <span class=\"sy0\">&lt;-</span> confine the syntax colouring confusion<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> flatten <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    | <span class=\"br0\">(</span>I x<span class=\"br0\">)</span>::y <span class=\"sy0\">-&gt;</span> x\u00a0:: <span class=\"br0\">(</span>flatten y<span class=\"br0\">)</span><br/>    | <span class=\"br0\">(</span>L x<span class=\"br0\">)</span>::y <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">append</span> <span class=\"br0\">(</span>flatten x<span class=\"br0\">)</span> <span class=\"br0\">(</span>flatten y<span class=\"br0\">)</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span>I<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> L<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span>I<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>I<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> L<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> L<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"br0\">(</span><span class=\"br0\">[</span>I<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> L<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// -&gt; [1; 2; 3; 4; 5; 6; 7; 8]</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>   USE: sequences.deep\n   ( scratchpad ) { { 1 } 2 { { 3 4 } 5 } { { { } } } { { { 6 } } } 7 8 { } } flatten .\n   { 1 2 3 4 5 6 7 8 }\n</pre>"}, {"lang": "Fantom", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{ <br/>  // uses recursion to flatten a list<br/>  static List myflatten (List items)<br/>  {<br/>    List result\u00a0:= [,]<br/>    items.each |item|<br/>    {<br/>      if (item is List)<br/>        result.addAll (myflatten(item))<br/>      else<br/>        result.add (item)<br/>    }<br/>    return result<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    List sample\u00a0:= [[1], 2, [[3,4], 5], [[[,]]], [[[6]]], 7, 8, [,]]<br/>    // there is a built-in flatten method for lists<br/>    echo (\"Flattened list 1: \" + sample.flatten)<br/>    // or use the function 'myflatten'<br/>    echo (\"Flattened list 2: \" + myflatten (sample))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>: flatten {: list1 list2 -- \u00a0:}<br/>  list1 size: 0\u00a0?do i list1 at: <br/>                  dup is-a object-list2<br/>                  if list2 recurse else list2 add: then  loop\u00a0;<br/>\u00a0<br/>object-list2 list <br/>o{ o{ 1 } 2 o{ o{ 3 4 } 5 } o{ o{ o{ } } } o{ o{ o{ 6 } } } 7 8 o{ } } <br/>list flatten<br/>list p: \\ o{ 1 2 3 4 5 6 7 8 } ok</pre>"}, {"lang": "Fortran", "loc": 152, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! input  \u00a0: [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]</span><br/><span class=\"co1\">! flatten\u00a0: [1, 2, 3, 4, 5, 6, 7, 8 ]</span><br/>\u00a0<br/><span class=\"kw1\">module</span> flat<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">type</span> n<br/>     <span class=\"kw3\">integer</span>                             <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>     <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span>      <span class=\"sy0\">::</span> <span class=\"me2\">p</span> <span class=\"sy0\">=</span>&gt; null<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>     <span class=\"kw3\">logical</span>                             <span class=\"sy0\">::</span> <span class=\"me2\">empty</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> del<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">integer</span>                <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>associated<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><br/>       <span class=\"kw1\">call</span> del<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> join<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">xs</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                       <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>  <span class=\"kw3\">integer</span>                       <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>r<span class=\"sy0\">%</span>p<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span>, source<span class=\"sy0\">=</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>      r<span class=\"sy0\">%</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> xs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">else</span><br/>    r<span class=\"sy0\">%</span>empty <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> flatten1<span class=\"br0\">(</span>x,r<span class=\"br0\">)</span> <br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>                                <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>                <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><br/>  <span class=\"kw3\">integer</span>                                            <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>associated<span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> flatten1<span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, r<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> x<span class=\"sy0\">%</span>empty<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>tmp<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tmp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> r<br/>    tmp<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>a<br/>    <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>tmp, r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> flatten<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>                                <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>                 <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> flatten1<span class=\"br0\">(</span>x,r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> show<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">integer</span>   <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>empty<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"[]\"</span><br/>  <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>associated<span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"[\"</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> show<span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i&lt;<span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\", \"</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"]\"</span><br/>  <span class=\"kw1\">else</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(g0)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> x<span class=\"sy0\">%</span>a<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> fromString<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>                      <span class=\"sy0\">::</span> <span class=\"me2\">line</span><br/>  <span class=\"kw3\">type</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span>                              <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>  <span class=\"kw3\">type</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>   <span class=\"sy0\">::</span> <span class=\"me2\">buffer</span>, buffer1<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>    <span class=\"sy0\">::</span> <span class=\"me2\">stack</span>, stack1<br/>  <span class=\"kw3\">integer</span>                               <span class=\"sy0\">::</span> <span class=\"me2\">sp</span>,i0,i,j, a, cur, start<br/>  <span class=\"kw3\">character</span>                             <span class=\"sy0\">::</span> <span class=\"me2\">c</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span> <span class=\"br0\">(</span>buffer<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">! will be re-allocated if more is needed</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span> <span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  sp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; cur <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i &gt; <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>    c <span class=\"sy0\">=</span> line<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"sy0\">==</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sp&gt;<span class=\"kw4\">size</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>stack1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        stack1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> stack<br/>        <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>stack1, stack<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      stack<span class=\"br0\">(</span>sp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> cur;  sp <span class=\"sy0\">=</span> sp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>; i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>c<span class=\"sy0\">==</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      sp <span class=\"sy0\">=</span> sp <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; start <span class=\"sy0\">=</span> stack<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><br/>      r <span class=\"sy0\">=</span> join<span class=\"br0\">(</span>buffer<span class=\"br0\">(</span>start<span class=\"sy0\">:</span>cur<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> start, cur<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">call</span> del<span class=\"br0\">(</span>buffer<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      buffer<span class=\"br0\">(</span>start<span class=\"br0\">)</span> <span class=\"sy0\">=</span> r; cur <span class=\"sy0\">=</span> start<span class=\"sy0\">+</span><span class=\"nu0\">1</span>; i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">\" ,\"</span>,c<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">continue</span><br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">\"-123456789\"</span>,c<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      i0 <span class=\"sy0\">=</span> i<br/>      <span class=\"kw1\">do</span> <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i&gt;<span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"sy0\">&amp;</span><br/>            <span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">\"1234567890\"</span>,line<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          read<span class=\"br0\">(</span>line<span class=\"br0\">(</span>i0<span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> a<br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cur&gt;<span class=\"kw4\">size</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>buffer1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            buffer1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> buffer<br/>            <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>buffer1, buffer<span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          buffer<span class=\"br0\">(</span>cur<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"br0\">(</span>a<span class=\"br0\">)</span>; cur <span class=\"sy0\">=</span> cur <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">else</span><br/>          i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">else</span><br/>       <span class=\"kw1\">stop</span> <span class=\"st0\">\"input corrupted\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> main<br/>  <span class=\"kw3\">use</span> flat<br/>  <span class=\"kw3\">type</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  x <span class=\"sy0\">=</span> fromString<span class=\"br0\">(</span><span class=\"st0\">\"[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]\"</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"input  \u00a0: \"</span><br/>  <span class=\"kw1\">call</span> show<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"flatten\u00a0: [\"</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(*(i0,:,:', '))\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> flatten<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>println[flatten[a]]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 16, "block": "<pre class=\"gambas highlighted_source\"><span class=\"co1\">'Code 'borrowed' from Run BASIC</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sComma, sString, sFlatter <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/>sString <span class=\"sy0\">=</span> <span class=\"st0\">\"[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8 []]\"</span><br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span><br/> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[] ,\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=mid%24+site:http://gambasdoc.org/help/lang/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Mid$</span></a><span class=\"br0\">(</span>sString, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>  sFlatter <span class=\"sy0\">=</span> sFlatter <span class=\"sy0\">&amp;</span> sComma <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sString, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  sComma <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><br/> <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"[\"</span>; sFlatter; <span class=\"st0\">\"]\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 1, "block": "<pre class=\"text highlighted_source\">Flat([[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]);</pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> list<span class=\"sy1\">(</span>s <span class=\"sy4\">...</span><span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">[]</span><span class=\"kw4\">interface</span><span class=\"sy1\">{}</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> list<span class=\"sy1\">(</span>list<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span><br/>        <span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>        list<span class=\"sy1\">(</span>list<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">),</span> <span class=\"nu0\">5</span><span class=\"sy1\">),</span><br/>        list<span class=\"sy1\">(</span>list<span class=\"sy1\">(</span>list<span class=\"sy1\">())),</span><br/>        list<span class=\"sy1\">(</span>list<span class=\"sy1\">(</span>list<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">))),</span><br/>        <span class=\"nu0\">7</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>        list<span class=\"sy1\">(),</span><br/>    <span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>flatten<span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> flatten<span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">(</span>r <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> e<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw1\">type</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"kw4\">int</span><span class=\"sy1\">:</span><br/>            r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> <span class=\"sy1\">[]</span><span class=\"kw4\">interface</span><span class=\"sy1\">{}:</span><br/>            r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> flatten<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Tree <span class=\"br0\">(</span>Tree<span class=\"br0\">(</span><span class=\"sy0\">..</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> flatten<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]</span><br/><span class=\"co1\">-- implemented as multiway tree:</span><br/><span class=\"co1\">-- Data.Tree represents trees where nodes have values too, unlike the trees in our problem.</span><br/><span class=\"co1\">-- so we use a list as that value, where a node will have an empty list value,</span><br/><span class=\"co1\">-- and a leaf will have a one-element list value and no subtrees</span><br/>list <span class=\"sy0\">::</span> Tree <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>list <span class=\"sy0\">=</span><br/>  Node<br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>Node <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> Node <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>flattenList <span class=\"sy0\">::</span> Tree <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>flattenList <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> flatten<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> flattenList list</pre>"}, {"lang": "Hy", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flatten <span class=\"br0\">[</span>lst<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>sum <span class=\"br0\">(</span>genexpr <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isinstance x list<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>flatten x<span class=\"br0\">)</span><br/>                    <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">[</span>x lst<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; [1, 2, 3, 4, 5, 6, 7, 8]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> strings           <span class=\"co1\"># for compress,deletec,pretrim</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> sflatten<span class=\"br0\">(</span>s<span class=\"br0\">)</span>  <span class=\"co1\"># uninteresting string solution</span><br/><span class=\"kw1\">return</span> pretrim<span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span>compress<span class=\"br0\">(</span>deletec<span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"st0\">'[ ]'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span>       <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Ioke", "loc": 3, "block": "<pre class=\"text highlighted_source\">iik&gt; [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []] flatten<br/>[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []] flatten<br/>+&gt; [1, 2, 3, 4, 5, 6, 7, 8]</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">flatten =: [:\u00a0; &lt;S:<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">final</span> <span class=\"kw2\">class</span> FlattenUtil <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span> flatten<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;?&gt;</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span> retVal = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tflatten<span class=\"br0\">(</span>list, retVal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> retVal<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> flatten<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;?&gt;</span> fromTreeList, <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span> toFlatList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> item\u00a0: fromTreeList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>item <span class=\"kw2\">instanceof</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;?&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tflatten<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;?&gt;</span><span class=\"br0\">)</span> item, toFlatList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\ttoFlatList.<span class=\"me1\">add</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> flatten<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> list.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> acc.<span class=\"me1\">concat</span><span class=\"br0\">(</span>val.<span class=\"me1\">constructor</span> <span class=\"sy0\">===</span> <span class=\"kw4\">Array</span> <span class=\"sy0\">?</span> flatten<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"sy0\">:</span> val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"seqlib\" libload.<br/>\u00a0<br/>[[1] 2 [[3 4] 5] [[[]]] [[[6]]] 7 8 []] treeflatten.<br/>\u00a0<br/>(* output: [1 2 3 4 5 6 7 8] *)<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\">def flatten:<br/>   reduce .[] as $i<br/>     ([];<br/>     if $i | type == \"array\" then . + ($i | flatten)<br/>     else . + [$i]<br/>     end);</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">flat(arr::Array) = mapreduce(x -&gt; isa(x, Array)\u00a0? flat(x)\u00a0: x, append!, [], arr)</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">,//((1); 2; ((3;4); 5); ((())); (((6))); 7; 8; ())</pre>"}, {"lang": "Kotlin", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"UNCHECKED_CAST\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun flattenList<span class=\"br0\">(</span>nestList<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span>, flatList<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>e in nestList<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e is Int<span class=\"br0\">)</span><br/>            flatList.<span class=\"me1\">add</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            <span class=\"co1\">// using unchecked cast here as can't check for instance of 'erased' generic type</span><br/>            flattenList<span class=\"br0\">(</span>e as List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span>, flatList<span class=\"br0\">)</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nestList <span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        <span class=\"nu0\">2</span>,<br/>        listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>,<br/>        listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        <span class=\"nu0\">7</span>,<br/>        <span class=\"nu0\">8</span>,<br/>        listOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Nested   \u00a0: \"</span> + nestList<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> flatList <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    flattenList<span class=\"br0\">(</span>nestList, flatList<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Flattened\u00a0: \"</span> + flatList<span class=\"br0\">)</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 6, "block": "<pre class=\"text highlighted_source\">local(original = json_deserialize('[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]'))<br/>\u00a0<br/>#original<br/>'&lt;br /&gt;'<br/>(with item in delve(#original)<br/>select #item) -&gt; asstaticarray</pre>"}, {"lang": "LFE", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> flatten '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Logtalk", "loc": 13, "block": "<pre class=\"logtalk highlighted_source\">flatten(<span class=\"re0\">List</span>, <span class=\"re0\">Flatted</span>) <span class=\"sy2\">:-</span><br/>    flatten(<span class=\"re0\">List</span>, [], <span class=\"re0\">Flatted</span>).<br/>\u00a0<br/>flatten(<span class=\"re0\">Var</span>, <span class=\"re0\">Tail</span>, [<span class=\"re0\">Var</span>| <span class=\"re0\">Tail</span>]) <span class=\"sy2\">:-</span><br/>    <span class=\"kw4\">var</span>(<span class=\"re0\">Var</span>),<br/>    <span class=\"sy1\">!</span>.<br/>flatten([], <span class=\"re0\">Flatted</span>, <span class=\"re0\">Flatted</span>) <span class=\"sy2\">:-</span><br/>    <span class=\"sy1\">!</span>.<br/>flatten([<span class=\"re0\">Head</span>| <span class=\"re0\">Tail</span>], <span class=\"re0\">List</span>, <span class=\"re0\">Flatted</span>) <span class=\"sy2\">:-</span><br/>    <span class=\"sy1\">!</span>,<br/>    flatten(<span class=\"re0\">Tail</span>, <span class=\"re0\">List</span>, <span class=\"re0\">Aux</span>),<br/>    flatten(<span class=\"re0\">Head</span>, <span class=\"re0\">Aux</span>, <span class=\"re0\">Flatted</span>).<br/>flatten(<span class=\"re0\">Head</span>, <span class=\"re0\">Tail</span>, [<span class=\"re0\">Head</span>| <span class=\"re0\">Tail</span>]).</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> flatten<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\"table\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span>list<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> flat_list <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> elem <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> val <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>flatten<span class=\"br0\">(</span>elem<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      flat_list<span class=\"br0\">[</span><span class=\"sy0\">#</span>flat_list <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> flat_list<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>test_list <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>flatten<span class=\"br0\">(</span>test_list<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Logo", "loc": 13, "block": "<pre class=\"text highlighted_source\">to flatten\u00a0:l<br/>  if not list?\u00a0:l [output\u00a0:l]<br/>  if empty?\u00a0:l [output []]<br/>  output sentence flatten first\u00a0:l flatten butfirst\u00a0:l<br/>end<br/>\u00a0<br/>; using a template iterator (map combining results into a sentence)<br/>to flatten\u00a0:l<br/>  output map.se [ifelse or not list?\u00a0? empty?\u00a0? [?] [flatten\u00a0?]]\u00a0:l<br/>end<br/>\u00a0<br/>make \"a [[1] 2 [[3 4] 5] [[[]]] [[[6]]] 7 8 []]<br/>show flatten\u00a0:a</pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>L\u00a0:= [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]:<br/>\u00a0<br/>with(ListTools):<br/>\u00a0<br/>Flatten(L);<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Flatten[{{1}, 2, {{3, 4}, 5}, {{{}}}, {{{6}}}, 7, 8, {}}]</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">flatten([[[1, 2, 3], 4, [5, [6, 7]], 8], [[9, 10], 11], 12]);<br/>/* [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] */</pre>"}, {"lang": "Mercury", "loc": 35, "block": "<pre class=\"text highlighted_source\">:- module flatten_a_list.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list.<br/>\u00a0<br/>:- type tree(T)<br/>    ---&gt;    leaf(T)<br/>   \u00a0;       node(list(tree(T))).<br/>\u00a0<br/>:- func flatten(tree(T)) = list(T).<br/>\u00a0<br/>flatten(leaf(X)) = [X].<br/>flatten(node(Xs)) = condense(map(flatten, Xs)).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    List = node([<br/>        node([leaf(1)]),<br/>        leaf(2),<br/>        node([node([leaf(3), leaf(4)]), leaf(5)]),<br/>        node([node([node([])])]),<br/>        node([node([node([leaf(6)])])]),<br/>        leaf(7),<br/>        leaf(8),<br/>        node([])<br/>    ]),<br/>    io.print_line(flatten(List),\u00a0!IO).<br/>\u00a0<br/>:- end_module flatten_a_list.<br/>\u00a0</pre>"}, {"lang": "Mirah", "loc": 24, "block": "<pre class=\"text highlighted_source\">import java.util.ArrayList<br/>import java.util.List<br/>import java.util.Collection<br/>\u00a0<br/>def flatten(list: Collection) <br/>    flatten(list, ArrayList.new)<br/>end<br/>def flatten(source: Collection, result: List)<br/>\u00a0<br/>    source.each do |x|<br/>        if x.kind_of?(Collection) <br/>            flatten(Collection(x), result)  <br/>        else<br/>            result.add(x)<br/>            result  # if branches must return same type<br/>        end <br/>    end<br/>    result<br/>end<br/>\u00a0<br/># creating a list-of-list-of-list fails currently, so constructor calls are needed<br/>source = [[1], 2, [[3, 4], 5], [[ArrayList.new]], [[[6]]], 7, 8, ArrayList.new]<br/>\u00a0<br/>puts flatten(source)</pre>"}, {"lang": "NewLISP", "loc": 3, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#flat\"><span class=\"kw1\">flat</span></a> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NGS", "loc": 9, "block": "<pre class=\"text highlighted_source\">F flatten_r(a:Arr)<br/>\tcollector {<br/>\t\tlocal kern<br/>\t\tF kern(x) collect(x)<br/>\t\tF kern(x:Arr) x.each(kern)<br/>\t\tkern(a)<br/>\t}<br/>\u00a0<br/>echo(flatten_r([[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]))</pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\">type<br/>  TreeList[T] = ref TTreeList[T]<br/>  TTreeList[T] = object<br/>    case isLeaf: bool<br/>    of true:  data: T<br/>    of false: list: seq[TreeList[T]]<br/>\u00a0<br/>proc L[T](list: varargs[TreeList[T]]): TreeList[T] =<br/>  var s: seq[TreeList[T]] = @[]<br/>  for x in list: s.add x<br/>  TreeList[T](isLeaf: false, list: s)<br/>\u00a0<br/>proc N[T](data: T): TreeList[T] =<br/>  TreeList[T](isLeaf: true, data: data)<br/>\u00a0<br/>proc `$`[T](n: TreeList[T]): string =<br/>  if n.isLeaf: result = $n.data<br/>  else:<br/>    result = \"[\"<br/>    for i, x in n.list:<br/>      if i &gt; 0: result.add \", \"<br/>      result.add($x)<br/>    result.add \"]\"<br/>\u00a0<br/>proc flatten[T](n: TreeList[T]): seq[T] =<br/>  if n.isLeaf: result = @[n.data]<br/>  else:<br/>    result = @[]<br/>    for x in n.list:<br/>      result.add flatten x<br/>\u00a0<br/>var x = L(L(N 1), N 2, L(L(N 3, N 4), N 5), L(L(L[int]())), L(L(L(N 6))), N 7, N 8, L[int]())<br/>echo x<br/>echo flatten(x)</pre>"}, {"lang": "Objective-C", "loc": 40, "block": "<pre class=\"text highlighted_source\">#import &lt;Foundation/Foundation.h&gt;<br/>\u00a0<br/>@interface NSArray (FlattenExt)<br/>@property (nonatomic, readonly) NSArray *flattened;<br/>@end<br/>\u00a0<br/>@implementation NSArray (FlattenExt)<br/>-(NSArray *) flattened {<br/>    NSMutableArray *flattened = [[NSMutableArray alloc] initWithCapacity:self.count];<br/>\u00a0<br/>    for (id object in self) {<br/>        if ([object isKindOfClass:[NSArray class]])<br/>            [flattened addObjectsFromArray:((NSArray *)object).flattened];<br/>        else<br/>            [flattened addObject:object];<br/>    }<br/>\u00a0<br/>    return [flattened autorelease];<br/>}<br/>@end<br/>\u00a0<br/>int main() {<br/>    @autoreleasepool {<br/>        NSArray *p = @[<br/>\t\t         @[ @1 ],<br/>\t\t         @2,<br/>\t\t         @[ @[@3, @4], @5],<br/>\t\t         @[ @[ @[ ] ] ],<br/>\t\t         @[ @[ @[ @6 ] ] ],<br/>\t\t         @7,<br/>\t\t         @8,<br/>\t\t         @[ ] ];<br/>\u00a0<br/>        for (id object in unflattened.flattened)<br/>            NSLog(@\"%@\", object);<br/>\u00a0<br/>    }<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> flatten <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>concat <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> flatten <span class=\"sy0\">:</span> <span class=\"sy0\">'</span>a <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> li <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">;;</span><br/>                <span class=\"sy0\">^^^</span><br/>Error<span class=\"sy0\">:</span> This expression has <span class=\"kw1\">type</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> but is here used <span class=\"kw1\">with</span> <span class=\"kw1\">type</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"co1\">(* use another data which can be accepted by the type system *)</span><br/>  flatten <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []] expand println</pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Flatten <span class=\"br0\">[</span><span class=\"br0\">[</span>1<span class=\"br0\">]</span> 2 <span class=\"br0\">[</span><span class=\"br0\">[</span>3 4<span class=\"br0\">]</span> 5<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>nil<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span>6<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> 7 8 nil<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "ooRexx", "loc": 38, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>sub1 = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>sub2 = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>sub3 = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span>sub2, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>sub4 = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>array~new<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>sub5 = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>sub6 = <span class=\"sy0\">.</span>array~new<br/>\u00a0<br/><span class=\"co1\">-- final list construction</span><br/>list = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span>sub1, <span class=\"nu0\">2</span>, sub3, sub4, sub5, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, sub6<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- flatten</span><br/>flatlist = flattenList<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"[\"</span>flatlist~toString<span class=\"br0\">(</span><span class=\"st0\">\"line\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>\u00a0<br/>::routine flattenList<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> list<br/>  <span class=\"co1\">-- we could use a list or queue, but let's just use an array</span><br/>  accumulator = <span class=\"sy0\">.</span>array~new<br/>\u00a0<br/>  <span class=\"co1\">-- now go to the recursive processing version</span><br/>  <span class=\"kw1\">call</span> flattenSublist list, accumulator<br/>\u00a0<br/>  <span class=\"kw1\">return</span> accumulator<br/>\u00a0<br/>::routine flattenSublist<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> list, accumulator<br/>\u00a0<br/>  <span class=\"co1\">-- ask for the items explicitly, since this will allow</span><br/>  <span class=\"co1\">-- us to flatten indexed collections as well</span><br/>  <span class=\"kw1\">do</span> item <span class=\"kw2\">over</span> list~allItems<br/>      <span class=\"co1\">-- if the object is some sort of collection, flatten this out rather</span><br/>      <span class=\"co1\">-- than add to the accumulator</span><br/>      <span class=\"kw1\">if</span> item~isA<span class=\"br0\">(</span><span class=\"sy0\">.</span>collection<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> flattenSublist item, accumulator<br/>      <span class=\"kw3\">else</span> accumulator~append<span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">flatten<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>u<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>    u<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">type</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"st0\">\"t_VEC\"</span><span class=\"sy0\">,</span>flatten<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  u<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> flatten <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"kw1\">eq</span> <span class=\"st_h\">'ARRAY'</span> <span class=\"sy0\">?</span> flatten<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"co5\">@_</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@lst</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> flatten<span class=\"br0\">(</span><span class=\"re0\">@lst</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@l</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">perl</span> <span class=\"kw1\">given</span> gather <span class=\"re0\">@l</span><span class=\"sy0\">.</span><span class=\"me1\">deepmap</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">take</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># lazy recursive version</span><br/>\u00a0<br/><span class=\"co1\"># Another way to do it is with a recursive function (here actually a Block calling itself with the &amp;?BLOCK dynamic variable):</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"re0\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">??</span> <span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"re0\">&amp;?BLOCK</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"re0\">@l</span><span class=\"br0\">)</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?flatten({{1},2,{{3,4},5},{{{}}},{{{6}}},7,8,{}})</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"coMULTI\">/* Note: This code is only for PHP 4.<br/>   It won't work on PHP 5 due to the change in behavior of array_merge(). */</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array_filter\"><span class=\"kw3\">array_filter</span></a><span class=\"br0\">(</span><span class=\"re0\">$lst</span><span class=\"sy0\">,</span> <span class=\"st_h\">'is_array'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$lst</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/call_user_func_array\"><span class=\"kw3\">call_user_func_array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'array_merge'</span><span class=\"sy0\">,</span> <span class=\"re0\">$lst</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de flatten (X)<br/>   (make                               # Build a list<br/>      (recur (X)                       # recursively over 'X'<br/>         (if (atom X)<br/>            (link X)                   # Put atoms into the result<br/>            (mapc recurse X) ) ) ) )   # or recurse on sub-lists</pre>"}, {"lang": "Pike", "loc": 10, "block": "<pre class=\"pike highlighted_source\">array flatten<span class=\"br0\">(</span>array a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tarray r <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>a, mixed n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arrayp<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> r <span class=\"sy0\">+=</span> flatten<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> r <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> n <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>list = translate (list, '  ', '[]' ); /*Produces \"  1 , 2,   3,4 , 5 ,       ,    6   , 7, 8,     \" */<br/>list = Replace(list,'',' ');          /*Converts spaces to nothing. Same parameter order as Translate.*/<br/>do while index(list,',,') &gt; 0;        /*Is there a double comma anywhere?<br/>  list = Replace(list,',',',,');      /*Yes. Convert double commas to single, nullifying empty lists*/<br/>end;                                  /*And search afresh, in case of multiple commas in a row.*/<br/>list = '[' || list || ']';            /*Repackage the list.*/<br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/flatten {<br/>    /.f {{type /arraytype eq} {{.f} map aload pop} ift}.<br/>    [exch .f]<br/>}.<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> flatten<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>.Count <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> $<span class=\"br0\">(</span>flatten <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"$(flatten $a)\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 13, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>flatten<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> FlatList<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tflatten<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> FlatList<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>flatten<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">var</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>flatten<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> T<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>flatten<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> TailList<span class=\"sy4\">,</span> List<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tflatten<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> FlatTail<span class=\"sy4\">,</span> List<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tflatten<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> TailList<span class=\"sy4\">,</span> FlatTail<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>flatten<span class=\"br0\">(</span>NonList<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> <span class=\"br0\">[</span>NonList<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 22, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> RCList<br/>  Value.i<br/>  List A.RCList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Flatten<span class=\"br0\">(</span>List A.RCList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ResetList</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw2\">NextElement</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">With</span> A<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>Value<br/>        <span class=\"kw1\">Continue</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"kw2\">ResetList</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">While</span> <span class=\"kw2\">NextElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value: A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"sy0\">=\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Wend</span><br/>      <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">While</span> ListSize<span class=\"br0\">(</span><span class=\"sy0\">\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">Wend</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"sy0\">\\</span>Value: <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">EndWith</span><br/>  <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> flatten<span class=\"br0\">(</span>lst<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">isinstance</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> flatten<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t\t     <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> lst<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> lst <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> flatten<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">x &lt;- list(list(1), 2, list(list(3, 4), 5), list(list(list())), list(list(list(6))), 7, 8, list())<br/>\u00a0<br/>unlist(x)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(flatten '(1 (2 (3 4 5) (6 7)) 8 9))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 11, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/>flatten: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"Flatten the block in place.\"</span><br/>    block <span class=\"br0\">[</span>any-<span class=\"kw1\">block!</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>    <span class=\"kw3\">parse</span> block <span class=\"br0\">[</span><br/>        <span class=\"kw2\">any</span> <span class=\"br0\">[</span>block: any-<span class=\"kw1\">block!</span> <span class=\"br0\">(</span><span class=\"kw3\">change</span><span class=\"sy0\">/</span>part block <span class=\"kw3\">first</span> block <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:block <span class=\"sy0\">|</span> <span class=\"kw3\">skip</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"kw3\">head</span> block<br/><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Red", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>flatten: function [<br/>    \"Flatten the block\"<br/>    block [any-block!]<br/>][<br/>    load form block<br/>]<br/>\u00a0<br/>red&gt;&gt; flatten [[1] 2 [[3 4] 5] [[[]]] [[[6]]] 7 8 []]<br/>== [1 2 3 4 5 6 7 8]<br/>\u00a0<br/>;flatten a list to a string<br/>&gt;&gt; blk: [1 2 [\"test\"] \"a\" [[\"bb\"]] 3 4 [[[99]]]]<br/>&gt;&gt; form blk<br/>== \"1 2 test a bb 3 4 99\"</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm demonstrates how to flatten a list  (it need not be numeric).*/</span><br/>y = <span class=\"st0\">'[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]'</span><br/>z = <span class=\"st0\">'['</span><span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>y, , <span class=\"st0\">'[,]'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"st0\">']'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">' input ='</span> y<br/><span class=\"kw1\">say</span> <span class=\"st0\">'output ='</span> z<br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"[[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]\"<br/>bString = \"\"<br/>cString = \"\"<br/>for n=1 to len(aString)<br/>    if ascii(aString[n]) &gt;= 48 and  ascii(aString[n]) &lt;= 57<br/>       bString = bString + \", \" + aString[n]<br/>    ok<br/>next<br/>cString = substr(bString,3,Len(bString)-2)<br/>cString = '\"' + cString + '\"'<br/>see cString + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">flat = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">flatten</span><br/><span class=\"kw3\">p</span> flat  <span class=\"co1\"># =&gt; [1, 2, 3, 4, 5, 6, 7, 8]</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">n$ = \"[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8 []]\"<br/>for i = 1 to len(n$)<br/> if instr(\"[] ,\",mid$(n$,i,1)) = 0 then <br/>  flatten$ = flatten$ + c$ + mid$(n$,i,1)<br/>  c$ = \",\"<br/> end if<br/>next i<br/>print \"[\";flatten$;\"]\"</pre>"}, {"lang": "Rust", "loc": 92, "block": "<pre class=\"text highlighted_source\">use std::{vec, mem, iter};<br/>\u00a0<br/>enum List&lt;T&gt; {<br/>    Node(Vec&lt;List&lt;T&gt;&gt;),<br/>    Leaf(T),<br/>}<br/>\u00a0<br/>impl&lt;T&gt; IntoIterator for List&lt;T&gt; {<br/>    type Item = List&lt;T&gt;;<br/>    type IntoIter = ListIter&lt;T&gt;;<br/>    fn into_iter(self) -&gt; Self::IntoIter {<br/>        match self {<br/>            List::Node(vec) =&gt; ListIter::NodeIter(vec.into_iter()),<br/>            leaf @ List::Leaf(_) =&gt; ListIter::LeafIter(iter::once(leaf)),<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>enum ListIter&lt;T&gt; {<br/>    NodeIter(vec::IntoIter&lt;List&lt;T&gt;&gt;),<br/>    LeafIter(iter::Once&lt;List&lt;T&gt;&gt;),<br/>}<br/>\u00a0<br/>impl&lt;T&gt; ListIter&lt;T&gt; {<br/>    fn flatten(self) -&gt; Flatten&lt;T&gt; {<br/>        Flatten {<br/>            stack: Vec::new(),<br/>            curr: self,<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>impl&lt;T&gt; Iterator for ListIter&lt;T&gt; {<br/>    type Item = List&lt;T&gt;;<br/>    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {<br/>        match *self {<br/>            ListIter::NodeIter(ref mut v_iter) =&gt; v_iter.next(),<br/>            ListIter::LeafIter(ref mut o_iter) =&gt; o_iter.next(),<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>struct Flatten&lt;T&gt; {<br/>    stack: Vec&lt;ListIter&lt;T&gt;&gt;,<br/>    curr: ListIter&lt;T&gt;,<br/>}<br/>\u00a0<br/>// Flatten code is a little messy since we are shoehorning recursion into an Iterator<br/>impl&lt;T&gt; Iterator for Flatten&lt;T&gt; {<br/>    type Item = T;<br/>    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {<br/>        loop {<br/>            match self.curr.next() {<br/>                Some(list) =&gt; {<br/>                    match list {<br/>                        node @ List::Node(_) =&gt; {<br/>                            self.stack.push(node.into_iter());<br/>                            let len = self.stack.len();<br/>                            mem::swap(&amp;mut self.stack[len - 1], &amp;mut self.curr);<br/>                        }<br/>                        List::Leaf(item) =&gt; return Some(item),<br/>                    }<br/>                }<br/>                None =&gt; {<br/>                    if let Some(next) = self.stack.pop() {<br/>                        self.curr = next;<br/>                    } else {<br/>                        return None;<br/>                    }<br/>                }<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>use List::*;<br/>fn main() {<br/>    let list = Node(vec![Node(vec![Leaf(1)]),<br/>                         Leaf(2),<br/>                         Node(vec![Node(vec![Leaf(3), Leaf(4)]), Leaf(5)]),<br/>                         Node(vec![Node(vec![Node(vec![])])]),<br/>                         Node(vec![Node(vec![Node(vec![Leaf(6)])])]),<br/>                         Leaf(7),<br/>                         Leaf(8),<br/>                         Node(vec![])]);<br/>\u00a0<br/>    for elem in list.into_iter().flatten() {<br/>        print!(\"{} \", elem);<br/>    }<br/>    println!();<br/>\u00a0<br/>}</pre>"}, {"lang": "S-lang", "loc": 18, "block": "<pre class=\"text highlighted_source\">define flatten ();<br/>\u00a0<br/>define flatten (list) {<br/>    variable item,<br/>        retval,<br/>        val;<br/>    if (typeof(list)\u00a0!= List_Type) {<br/>        retval = list;<br/>    } else {<br/>        retval = {};<br/>        foreach item (list) {<br/>            foreach val (flatten(item)) {<br/>                list_append(retval, val);<br/>            }<br/>        }<br/>    }<br/>    return retval;<br/>}</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> flatList<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span><span class=\"sy0\">_</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Any<span class=\"br0\">]</span> <span class=\"sy0\">=</span> l <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> Nil<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>head<span class=\"sy0\">:</span> List<span class=\"br0\">[</span><span class=\"sy0\">_</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> tail <span class=\"sy0\">=&gt;</span> flatList<span class=\"br0\">(</span>head<span class=\"br0\">)</span> <span class=\"sy0\">:::</span> flatList<span class=\"br0\">(</span>tail<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> head <span class=\"sy0\">::</span> tail <span class=\"sy0\">=&gt;</span> head <span class=\"sy0\">::</span> flatList<span class=\"br0\">(</span>tail<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>flatten x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> x<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">pair?</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>flatten '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func flatten<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var flat = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>    a.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>item<span class=\"sy0\">|</span><br/>        flat <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>item.<span class=\"me1\">is_an</span><span class=\"br0\">(</span><span class=\"kw3\">Array</span><span class=\"br0\">)</span>\u00a0? flatten<span class=\"br0\">(</span>item<span class=\"br0\">)</span>\u00a0: <span class=\"br0\">[</span>item<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span>;<br/>    <span class=\"kw2\">return</span> flat;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var arr = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>say flatten<span class=\"br0\">(</span>arr<span class=\"br0\">)</span>.<span class=\"me1\">dump</span>;      <span class=\"co1\"># used-defined function</span><br/>say arr.<span class=\"me1\">flatten</span>.<span class=\"me1\">dump</span>;       <span class=\"co1\"># built-in method for Array obj</span></pre>"}, {"lang": "Slate", "loc": 12, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"89fac9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Sequence traits) flatten<br/>[<br/>  [|\u00a0:out | s flattenOn: out] writingAs: s<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"8efdce\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Sequence traits) flattenOn: <a class=\"__cf_email__\" data-cfemail=\"ef98af\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(WriteStream traits)<br/>[<br/>  s do: [|\u00a0:value |<br/>    (value is: s)<br/>      ifTrue: [value flattenOn: w]<br/>      ifFalse: [w nextPut: value]].<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 22, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">OrderedCollection</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">flatten</span> <span class=\"br0\">[</span> |<span class=\"re3\">f</span>|<br/>    <span class=\"re6\">f</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>    <span class=\"kw1\">self</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>      i isNumber<br/>        ifTrue: <span class=\"br0\">[</span> <span class=\"re5\">f</span> add: <span class=\"re5\">i</span> <span class=\"br0\">]</span><br/>        ifFalse: <span class=\"br0\">[</span> |<span class=\"re3\">t</span>|<br/>          <span class=\"re6\">t</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re0\">OrderedCollection</span> withAll: <span class=\"re5\">i</span><span class=\"br0\">)</span> flatten.<br/>          <span class=\"re5\">f</span> addAll: <span class=\"re5\">t</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span>.<br/>    ^ f<br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/>\u00a0<br/>|<span class=\"re3\">list</span>|<br/><span class=\"re6\">list</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> <br/>          withAll: <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> . <span class=\"re5\">2</span> . <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span> . <span class=\"re5\">4</span><span class=\"br0\">}</span> . <span class=\"re5\">5</span> <span class=\"br0\">}</span> .<br/>                     <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> . <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> . <span class=\"re5\">7</span> . <span class=\"re5\">8</span> . <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re5\">list</span> flatten<span class=\"br0\">)</span> printNl.</pre>"}, {"lang": "Standard ML", "loc": 4, "block": "<pre class=\"text highlighted_source\">datatype 'a nestedList =<br/>\t  L of 'a\t\t\t(* leaf *)<br/>\t| N of 'a nestedList list\t(* node *)<br/>\u00a0</pre>"}, {"lang": "Suneido", "loc": 2, "block": "<pre class=\"text highlighted_source\">ob = [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]<br/>ob.Flatten()</pre>"}, {"lang": "SuperCollider", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []];<br/>a.flatten(1); // answers [ 1, 2, [ 3, 4 ], 5, [ [  ] ], [ [ 6 ] ], 7, 8 ]<br/>a.flat; // answers [ 1, 2, 3, 4, 5, 6, 7, 8 ]<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 31, "block": "<pre class=\"text highlighted_source\">func list(s: Any...) -&gt; [Any] {<br/>  return s<br/>}<br/>\u00a0<br/>func flatten&lt;T&gt;(s: [Any]) -&gt; [T] {<br/>  var r = [T]()<br/>  for e in s {<br/>    switch e {<br/>    case let a as [Any]:<br/>      r += flatten(a)<br/>    case let x as T:<br/>      r.append(x)<br/>    default:<br/>      assert(false, \"value of wrong type\")<br/>    }<br/>  }<br/>  return r<br/>}<br/>\u00a0<br/>let s = list(list(1),<br/>  2,<br/>  list(list(3, 4), 5),<br/>  list(list(list())),<br/>  list(list(list(6))),<br/>  7,<br/>  8,<br/>  list()<br/>)<br/>println(s)<br/>let result\u00a0: [Int] = flatten(s)<br/>println(result)</pre>"}, {"lang": "Recursive", "loc": 31, "block": "<pre class=\"text highlighted_source\">func list(s: Any...) -&gt; [Any] {<br/>  return s<br/>}<br/>\u00a0<br/>func flatten&lt;T&gt;(s: [Any]) -&gt; [T] {<br/>  var r = [T]()<br/>  for e in s {<br/>    switch e {<br/>    case let a as [Any]:<br/>      r += flatten(a)<br/>    case let x as T:<br/>      r.append(x)<br/>    default:<br/>      assert(false, \"value of wrong type\")<br/>    }<br/>  }<br/>  return r<br/>}<br/>\u00a0<br/>let s = list(list(1),<br/>  2,<br/>  list(list(3, 4), 5),<br/>  list(list(list())),<br/>  list(list(list(6))),<br/>  7,<br/>  8,<br/>  list()<br/>)<br/>println(s)<br/>let result\u00a0: [Int] = flatten(s)<br/>println(result)</pre>"}, {"lang": "Non-recursive", "loc": 47, "block": "<pre class=\"text highlighted_source\">func list(s: Any...) -&gt; [Any]<br/>{<br/>    return s<br/>}<br/>\u00a0<br/>func flatten&lt;T&gt;(array: [Any]) -&gt; [T]<br/>{<br/>    var result: [T] = []<br/>    var workstack: [(array: [Any], lastIndex: Int)] = [(array, 0)]<br/>\u00a0<br/>    workstackLoop: while\u00a0!workstack.isEmpty<br/>    {<br/>        for element in workstack.last!.array.suffixFrom(workstack.last!.lastIndex)<br/>        {<br/>            workstack[workstack.endIndex - 1].lastIndex++<br/>\u00a0<br/>            if let element = element as? [Any]<br/>            {<br/>                workstack.append((element, 0))<br/>\u00a0<br/>                continue workstackLoop<br/>            }<br/>\u00a0<br/>            result.append(element as! T)<br/>        }<br/>\u00a0<br/>        workstack.removeLast()<br/>    }<br/>\u00a0<br/>    return result<br/>}<br/>\u00a0<br/>let input = list(list(1),<br/>    2,<br/>    list(list(3, 4), 5),<br/>    list(list(list())),<br/>    list(list(list(6))),<br/>    7,<br/>    8,<br/>    list()<br/>)<br/>\u00a0<br/>print(input)<br/>\u00a0<br/>let result: [Int] = flatten(input)<br/>\u00a0<br/>print(result)</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> flatten <span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> old <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$old</span> ne <span class=\"re0\">$list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> old <span class=\"re0\">$list</span><br/>        <span class=\"kw1\">set</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$list</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>flatten <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"co1\"># ===&gt; 1 2 3 4 5 6 7 8</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">[[1] 2 [[3 4] 5] [[[]]] [[[6]]] 7 8 []] flatten</pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">[[1] 2 [[3 4] 5] [[[]]] [[[6]]] 7 8 []] flatten</pre>"}, {"lang": "TXR", "loc": 3, "block": "<pre class=\"text highlighted_source\">@(bind foo ((1) 2 ((3 4) 5) ((())) (((6))) 7 8 ()))<br/>@(bind bar foo)<br/>@(flatten bar)</pre>"}, {"lang": "VBScript", "loc": 34, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>class flattener<br/>\t<span class=\"kw4\">dim</span> separator <br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> class_initialize<br/>\t\tseparator = <span class=\"st0\">\",\"</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> makeflat( a )<br/>\t\t<span class=\"kw4\">dim</span> i<br/>\t\t<span class=\"kw4\">dim</span> res<br/>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( a ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( a ) <br/>\t\t\t<span class=\"kw3\">if</span> isarray( a( i ) ) <span class=\"kw3\">then</span><br/>\t\t\t\tres = res &amp; makeflat( a( i ) )<br/>\t\t\t<span class=\"kw3\">else</span><br/>\t\t\t\tres = res &amp; a( i ) &amp; separator<br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">next</span><br/>\t\tmakeflat = res<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> flatten( a )<br/>\t\t<span class=\"kw4\">dim</span> res<br/>\t\tres = makeflat( a )<br/>\t\tres = left( res, len( res ) - len(separator))<br/>\t\tres = split( res, separator )<br/>\t\tflatten = res<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">let</span> itemSeparator( c )<br/>\t\tseparator = c<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>flatten seq acc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> no.<span class=\"me1\">seq</span><br/>       acc<br/>     <span class=\"sy0\">~</span><span class=\"kw2\">list</span>?.<span class=\"me1\">seq</span><br/>       <span class=\"br0\">(</span>cons seq acc<span class=\"br0\">)</span><br/>    \u00a0:<span class=\"kw1\">else</span><br/>       <span class=\"br0\">(</span>flatten car.<span class=\"me1\">seq</span> <span class=\"br0\">(</span>flatten cdr.<span class=\"me1\">seq</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn flatten(list){ list.pump(List,<br/>    fcn(i){ if(List.isType(i)) return(Void.Recurse,i,self.fcn); i}) }<br/>\u00a0<br/>flatten(L(L(1), L(2), L(L(3,4), 5), L(L(L())), L(L(L(6))), 7, 8, L()))<br/>//--&gt;L(1,2,3,4,5,6,7,8)</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 7, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> f$=<span class=\"st0\">\"[\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> n$=<span class=\"st0\">\"[[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8 []]\"</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"br0\">(</span><span class=\"kw3\">LEN</span> n$<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> n$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&gt;<span class=\"st0\">\"/\"</span> <span class=\"kw4\">AND</span> n$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&lt;<span class=\"st0\">\":\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f$=f$+n$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> n$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=<span class=\"st0\">\",\"</span> <span class=\"kw4\">AND</span> f$<span class=\"br0\">(</span><span class=\"kw3\">LEN</span> f$<span class=\"br0\">)</span>&lt;&gt;<span class=\"st0\">\",\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f$=f$+<span class=\"st0\">\",\"</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> f$=f$+<span class=\"st0\">\"]\"</span>: <span class=\"kw1\">PRINT</span> f$</pre>"}]}