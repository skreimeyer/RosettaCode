{"task": "Count_occurrences_of_a_substring", "blocks": [{"lang": "360 Assembly", "loc": 66, "block": "<pre class=\"text highlighted_source\">*        Count occurrences of a substring  05/07/2016<br/>COUNTSTR CSECT<br/>         USING  COUNTSTR,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \" <br/>         LR     R13,R15            \"<br/>         MVC    HAYSTACK,=CL32'the three truths'<br/>         MVC    LENH,=F'17'        lh=17<br/>         MVC    NEEDLE,=CL8'th'    needle='th'<br/>         MVC    LENN,=F'2'         ln=2<br/>         BAL    R14,SHOW           call show<br/>         MVC    HAYSTACK,=CL32'ababababab'<br/>         MVC    LENH,=F'11'        lh=11<br/>         MVC    NEEDLE,=CL8'abab'  needle='abab'<br/>         MVC    LENN,=F'4'         ln=4<br/>         BAL    R14,SHOW           call show<br/>         L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>HAYSTACK DS     CL32               haystack<br/>NEEDLE   DS     CL8                needle<br/>LENH     DS     F                  length(haystack)<br/>LENN     DS     F                  length(needle)<br/>*------- ----   show---------------------------------------------------<br/>SHOW     ST     R14,SAVESHOW       save return address<br/>         BAL    R14,COUNT          count(haystack,needle)<br/>         LR     R11,R0             ic=count(haystack,needle)<br/>         MVC    PG(20),HAYSTACK    output haystack<br/>         MVC    PG+20(5),NEEDLE    output needle<br/>         XDECO  R11,PG+25          output ic<br/>         XPRNT  PG,80              print buffer<br/>         L      R14,SAVESHOW       restore return address<br/>         BR     R14                return to caller<br/>SAVESHOW DS     A                  return address of caller<br/>PG       DC     CL80' '            buffer<br/>*------- ----   count--------------------------------------------------<br/>COUNT    ST     R14,SAVECOUN       save return address<br/>         SR     R7,R7              n=0<br/>         LA     R6,1               istart=1<br/>         L      R10,LENH           lh<br/>         S      R10,LENN           ln<br/>         LA     R10,1(R10)         lh-ln+1<br/>LOOPI    CR     R6,R10             do istart=1 to lh-ln+1<br/>         BH     ELOOPI<br/>         LA     R8,NEEDLE          @needle<br/>         L      R9,LENN            ln<br/>         LA     R4,HAYSTACK-1      @haystack[0]<br/>         AR     R4,R6              +istart<br/>         LR     R5,R9              ln<br/>         CLCL   R4,R8              if substr(haystack,istart,ln)=needle<br/>         BNE    NOTEQ<br/>         LA     R7,1(R7)           n=n+1<br/>         A      R6,LENN            istart=istart+ln<br/>NOTEQ    LA     R6,1(R6)           istart=istart+1<br/>         B      LOOPI<br/>ELOOPI   LR     R0,R7              return(n)<br/>         L      R14,SAVECOUN       restore return address<br/>         BR     R14                return to caller<br/>SAVECOUN DS     A                  return address of caller<br/>*        ----   -------------------------------------------------------<br/>         YREGS<br/>         END    COUNTSTR</pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Substrings <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Integer_Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Count</span> <span class=\"br0\">(</span>Source  =&gt; <span class=\"st0\">\"the three truths\"</span>,<br/>                                                     Pattern =&gt; <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Integer_Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Count</span> <span class=\"br0\">(</span>Source  =&gt; <span class=\"st0\">\"ababababab\"</span>,<br/>                                                     Pattern =&gt; <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Substrings;</pre>"}, {"lang": "ALGOL 68", "loc": 17, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> count <span class=\"kw26\">string in string</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> needle<span class=\"sy1\">,</span> haystack<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> start<span class=\"sy1\">:=</span><span class=\"kw8\">LWB</span> haystack<span class=\"sy1\">,</span> next<span class=\"sy1\">,</span> out<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> count <span class=\"kw2\">WHILE</span> <span class=\"kw26\">string in string</span><span class=\"br0\">(</span>needle<span class=\"sy1\">,</span> next<span class=\"sy1\">,</span> haystack<span class=\"br0\">[</span>start<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>    start<span class=\"sy1\">+:=</span>next<span class=\"sy1\">+</span><span class=\"kw8\">UPB</span> needle<span class=\"sy1\">-</span><span class=\"kw8\">LWB</span> needle<span class=\"sy1\">;</span><br/>    out<span class=\"sy1\">:=</span>count<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$d<span class=\"st0\">\" \"</span>$<span class=\"sy1\">,</span><br/>  count <span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"the three truths\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>    <span class=\"coMULTI\"># expect 3 #</span><br/>  count <span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ababababab\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>        <span class=\"coMULTI\"># expect 2 #</span><br/>  count <span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"a*b\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abaabba*bbaba*bbab\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># expect 2 #</span><br/>  $l$<br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Apex", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String substr = 'ABC';<br/>String str = 'ABCZZZABCYABCABCXXABC';<br/>Integer substrLen = substr.length();<br/>Integer count = 0;<br/>Integer index = str.indexOf(substr);<br/>while (index &gt;= 0) {<br/>    count++;<br/>    str = str.substring(index+substrLen);<br/>    index = str.indexOf(substr);<br/>}<br/>System.debug('Count String\u00a0: '+count);<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 29, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"OSAKit\"</span><br/>\u00a0<br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"br0\">{</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>, <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span>, \u00ac<br/>        countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>, <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"kw3\">on</span> countSubstring<span class=\"br0\">(</span>str, subStr<span class=\"br0\">)</span><br/>    <span class=\"kw3\">return</span> evalOSA<span class=\"br0\">(</span><span class=\"st0\">\"JavaScript\"</span>, <span class=\"st0\">\"var matches = '\"</span> <span class=\"sy0\">&amp;</span> str <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        <span class=\"st0\">\".match(new RegExp('\"</span> <span class=\"sy0\">&amp;</span> subStr <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"', 'g'));\"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        <span class=\"st0\">\"matches\u00a0? matches.length\u00a0: 0\"</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">end</span> countSubstring<br/>\u00a0<br/><span class=\"co1\">-- evalOSA\u00a0:: (\"JavaScript\" | \"AppleScript\") -&gt; String -&gt; String</span><br/><span class=\"kw3\">on</span> evalOSA<span class=\"br0\">(</span>strLang, strCode<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"kw3\">set</span> oScript <span class=\"kw3\">to</span> ca<span class=\"co2\">'</span>s OSAScript<span class=\"co2\">'</span>s alloc<span class=\"co2\">'</span>s initWithSource:strCode \u00ac<br/>        |language|:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s OSALanguage<span class=\"co2\">'</span>s languageForName:<span class=\"br0\">(</span>strLang<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>blnCompiled, oError<span class=\"br0\">}</span> <span class=\"kw3\">to</span> oScript<span class=\"co2\">'</span>s compileAndReturnError:<span class=\"br0\">(</span>reference<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> blnCompiled <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>oDesc, oError<span class=\"br0\">}</span> <span class=\"kw3\">to</span> oScript<span class=\"co2\">'</span>s executeAndReturnError:<span class=\"br0\">(</span>reference<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>oError <span class=\"kw3\">is</span> <span class=\"kw1\">missing value</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> oDesc<span class=\"co2\">'</span>s stringValue <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> oError<span class=\"co2\">'</span>s NSLocalizedDescription <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> evalOSA</pre>"}, {"lang": "AutoHotkey", "loc": 7, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span> <span class=\"co1\">; 3</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span>     <span class=\"co1\">; 2</span><br/>\u00a0<br/>CountSubstring<span class=\"br0\">(</span>fullstring<span class=\"sy0\">,</span> substring<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> junk<span class=\"sy0\">,</span> fullstring<span class=\"sy0\">,</span> <span class=\"re0\">%substring%</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> UseErrorLevel<br/>   <span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">errorlevel</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 30, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#</span><br/><span class=\"co1\"># countsubstring(string, pattern)</span><br/><span class=\"co1\">#   Returns number of occurrences of pattern in string</span><br/><span class=\"co1\">#   Pattern treated as a literal string (regex characters not expanded)</span><br/><span class=\"co1\">#</span><br/><span class=\"kw6\">function</span> countsubstring<span class=\"br0\">(</span>str, pat,    len, i, c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  c = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy1\">!</span> <span class=\"br0\">(</span>len = <span class=\"kw4\">length</span><span class=\"br0\">(</span>pat<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>i = <span class=\"kw4\">index</span><span class=\"br0\">(</span>str, pat<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    str = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str, i <span class=\"sy3\">+</span> len<span class=\"br0\">)</span><br/>    c<span class=\"sy3\">++</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw6\">return</span> c<br/><span class=\"br0\">}</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># countsubstring_regex(string, regex_pattern)</span><br/><span class=\"co1\">#   Returns number of occurrences of pattern in string</span><br/><span class=\"co1\">#   Pattern treated as regex       </span><br/><span class=\"co1\">#</span><br/><span class=\"kw6\">function</span> countsubstring_regex<span class=\"br0\">(</span>str, pat,    c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  c = <span class=\"nu0\">0</span><br/>  c <span class=\"sy3\">+</span>= <span class=\"kw4\">gsub</span><span class=\"br0\">(</span>pat, <span class=\"st0\">\"\"</span>, str<span class=\"br0\">)</span><br/>  <span class=\"kw6\">return</span> c<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">print</span> countsubstring<span class=\"br0\">(</span><span class=\"st0\">\"[do&amp;d~run?d!run&amp;&gt;run&amp;]\"</span>, <span class=\"st0\">\"run&amp;\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw5\">print</span> countsubstring_regex<span class=\"br0\">(</span><span class=\"st0\">\"[do&amp;d~run?d!run&amp;&gt;run&amp;]\"</span>, <span class=\"st0\">\"run[&amp;]\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw5\">print</span> countsubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>,<span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 11, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> Uniq_Tally<span class=\"br0\">(</span>text$<span class=\"sy0\">,</span> part$<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qcklocal.shtml\"><span class=\"kw3\">LOCAL</span></a> x<br/>    <span class=\"kw1\">WHILE</span> TALLY<span class=\"br0\">(</span>text$<span class=\"sy0\">,</span> part$<span class=\"br0\">)</span><br/>        INCR x<br/>        text$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>text$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>text$<span class=\"sy0\">,</span> part$<span class=\"br0\">)</span><span class=\"sy0\">+</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>part$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">WEND</span><br/>    <span class=\"kw1\">RETURN</span> x<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"the three truths - th: \"</span><span class=\"sy0\">,</span> Uniq_Tally<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"ababababab - abab: \"</span><span class=\"sy0\">,</span> Uniq_Tally<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 15, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> countSubstring&amp; <span class=\"br0\">(</span>where <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"the three truths, th:\"</span><span class=\"sy0\">,</span> countSubstring&amp;<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"ababababab, abab:\"</span><span class=\"sy0\">,</span> countSubstring&amp;<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> countSubstring&amp; <span class=\"br0\">(</span>where <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> s <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>what<span class=\"br0\">)</span><br/>    <span class=\"kw1\">DO</span><br/>        s <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>what<span class=\"br0\">)</span><span class=\"sy0\">,</span> where<span class=\"sy0\">,</span> what<span class=\"br0\">)</span><br/>        <span class=\"kw1\">IF</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> s <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>        c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">LOOP</span><br/>    countSubstring <span class=\"sy0\">=</span> c<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 21, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>\t::Main</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">countString</span> \"the three truths\",\"th\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">countString</span> \"ababababab\",\"abab\"<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\">\t::/Main</span><br/><span class=\"co2\"><br/>\t::Procedure</span><br/>:<span class=\"re0\">countString</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> input=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/>\u00a0<br/>\t:<span class=\"re0\">count_loop</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> trimmed=<span class=\"sy0\">!</span><span class=\"re2\">input:*%<span class=\"re3\">~2</span>=</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">trimmed</span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">input</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF)</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> input=<span class=\"sy0\">!</span><span class=\"re2\">trimmed</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt+=1<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> count_loop</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      tst$ = \"the three truths\"<br/>      sub$ = \"th\"<br/>      PRINT\u00a0; FNcountSubstring(tst$, sub$) \" \"\"\" sub$ \"\"\" in \"\"\" tst$ \"\"\"\"<br/>      tst$ = \"ababababab\"<br/>      sub$ = \"abab\"<br/>      PRINT\u00a0; FNcountSubstring(tst$, sub$) \" \"\"\" sub$ \"\"\" in \"\"\" tst$ \"\"\"\"<br/>      END<br/>\u00a0<br/>      DEF FNcountSubstring(A$, B$)<br/>      LOCAL I%, N%<br/>      I% = 1\u00a0: N% = 0<br/>      REPEAT<br/>        I% = INSTR(A$, B$, I%)<br/>        IF I% THEN N% += 1\u00a0: I% += LEN(B$)<br/>      UNTIL I% = 0<br/>      = N%<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">  ( count-substring<br/>  =   n S s p<br/>    .     0:?n:?p<br/>        &amp;\u00a0!arg:(?S.?s)<br/>        &amp; @(\u00a0!S<br/>          \u00a0:  \u00a0?<br/>               ( [!p\u00a0?\u00a0!s [?p\u00a0?<br/>               &amp;\u00a0!n+1:?n<br/>               &amp; ~<br/>               )<br/>           )<br/>      |\u00a0!n<br/>  )<br/>&amp; out$(count-substring$(\"the three truths\".th))<br/>&amp; out$(count-substring$(ababababab.abab))<br/>&amp;\u00a0;</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> match<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> overlap<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">++,</span> p<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>overlap<span class=\"br0\">)</span> s <span class=\"sy0\">+=</span> l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> match<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"overlap:%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> match<span class=\"br0\">(</span><span class=\"st0\">\"abababababa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"aba\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"not:   \u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> match<span class=\"br0\">(</span><span class=\"st0\">\"abababababa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"aba\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">// returns count of non-overlapping occurrences of 'sub' in 'str'</span><br/><span class=\"kw4\">int</span> countSubstring<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> str, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> sub<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sub.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> offset <span class=\"sy1\">=</span> str.<span class=\"me1\">find</span><span class=\"br0\">(</span>sub<span class=\"br0\">)</span><span class=\"sy4\">;</span> offset <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"sy4\">;</span><br/>\t offset <span class=\"sy1\">=</span> str.<span class=\"me1\">find</span><span class=\"br0\">(</span>sub, offset <span class=\"sy2\">+</span> sub.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"sy2\">++</span>count<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> count<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>, <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span>    <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>, <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span>        <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"abaabba*bbaba*bbab\"</span>, <span class=\"st0\">\"a*b\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 26, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>\u00a0<br/>class SubStringTestClass<br/><span class=\"br0\">{</span><br/>   public <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> CountSubStrings<span class=\"br0\">(</span>this string testString<span class=\"sy0\">,</span> string testSubstring<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>testString.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>testSubstring<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> testString.<span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>testString.<span class=\"me1\">Substring</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">Length</span> <span class=\"sy0\">&gt;=</span> testSubstring.<span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    bool equals <span class=\"sy0\">=</span> testString.<span class=\"me1\">Substring</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> testSubstring.<span class=\"me1\">Length</span><span class=\"br0\">)</span>.<span class=\"me1\">Equals</span><span class=\"br0\">(</span>testSubstring<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equals<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        count<span class=\"sy0\">++;</span><br/>                        i <span class=\"sy0\">+=</span> testSubstring.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Fix: Don't count overlapping matches</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> count<span class=\"sy0\">-</span>substring <span class=\"br0\">[</span>txt sub<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">re-seq</span> <span class=\"br0\">(</span>re<span class=\"sy0\">-</span>pattern sub<span class=\"br0\">)</span> txt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 22, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> testing<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  occurrences             <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw1\">INSPECT</span> <span class=\"st0\">\"the three truths\"</span> <span class=\"kw2\">TALLYING</span> occurrences <span class=\"kw3\">FOR</span> <span class=\"kw3\">ALL</span> <span class=\"st0\">\"th\"</span><br/>           <span class=\"kw2\">DISPLAY</span> occurrences<br/>\u00a0<br/>           <span class=\"kw2\">MOVE</span> <span class=\"nu0\">0</span> <span class=\"kw2\">TO</span> occurrences<br/>           <span class=\"kw1\">INSPECT</span> <span class=\"st0\">\"ababababab\"</span> <span class=\"kw2\">TALLYING</span> occurrences <span class=\"kw3\">FOR</span> <span class=\"kw3\">ALL</span> <span class=\"st0\">\"abab\"</span><br/>           <span class=\"kw2\">DISPLAY</span> occurrences<br/>\u00a0<br/>           <span class=\"kw2\">MOVE</span> <span class=\"nu0\">0</span> <span class=\"kw2\">TO</span> occurrences<br/>           <span class=\"kw1\">INSPECT</span> <span class=\"st0\">\"abaabba*bbaba*bbab\"</span> <span class=\"kw2\">TALLYING</span> occurrences<br/>               <span class=\"kw3\">FOR</span> <span class=\"kw3\">ALL</span> <span class=\"st0\">\"a*b\"</span><br/>           <span class=\"kw2\">DISPLAY</span> occurrences<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 12, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>countSubstring = <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> substr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  n = <span class=\"nu0\">0</span><br/>  i = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pos = str.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>substr<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    i = pos <span class=\"sy0\">+</span> substr.<span class=\"me1\">length</span><br/>  n<br/>\u00a0<br/>console.<span class=\"me1\">log</span> countSubstring <span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><br/>console.<span class=\"me1\">log</span> countSubstring <span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-sub <span class=\"br0\">(</span>str pat<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> with s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> while s <span class=\"kw1\">do</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> s <span class=\"br0\">(</span>search pat str <span class=\"sy0\">:</span><span class=\"me1\">start2</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>incf z<span class=\"br0\">)</span> <span class=\"br0\">(</span>incf s <span class=\"br0\">(</span><span class=\"kw1\">length</span> pat<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tfinally <span class=\"br0\">(</span><span class=\"kw1\">return</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>count-sub <span class=\"st0\">\"ababa\"</span> <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span>  <span class=\"co1\">; 2</span><br/><span class=\"br0\">(</span>count-sub <span class=\"st0\">\"ababa\"</span> <span class=\"st0\">\"aba\"</span><span class=\"br0\">)</span> <span class=\"co1\">; 1</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"the three truths\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"ababababab\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 23, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> OccurrencesOfASubstring<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CountSubstring<span class=\"br0\">(</span><span class=\"kw1\">const</span> aString<span class=\"sy1\">,</span> aSubstring<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  lPosition<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  lPosition <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PosEx<span class=\"br0\">(</span>aSubstring<span class=\"sy1\">,</span> aString<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> lPosition &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>Result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lPosition <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PosEx<span class=\"br0\">(</span>aSubstring<span class=\"sy1\">,</span> aString<span class=\"sy1\">,</span> lPosition <span class=\"sy3\">+</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>aSubstring<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>CountSubstring<span class=\"br0\">(</span><span class=\"st0\">'the three truths'</span><span class=\"sy1\">,</span> <span class=\"st0\">'th'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>CountSubstring<span class=\"br0\">(</span><span class=\"st0\">'ababababab'</span><span class=\"sy1\">,</span> <span class=\"st0\">'abab'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 2, "block": "<pre class=\"text highlighted_source\">!. count \"the three truths\" \"th\"<br/>!. count \"ababababab\" \"abab\"</pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; from Racket</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> count<span class=\"sy0\">-</span><span class=\"kw1\">substring</span><br/>   <span class=\"br0\">(</span>compose <span class=\"kw1\">length</span> regexp<span class=\"sy0\">-</span>match<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>count<span class=\"sy0\">-</span><span class=\"kw1\">substring</span> <span class=\"st0\">\"aab\"</span> <span class=\"st0\">\"graabaabdfaabgh\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; substring</span><br/>    \u2192 <span class=\"nu0\">3</span><br/><span class=\"br0\">(</span>count<span class=\"sy0\">-</span><span class=\"kw1\">substring</span> <span class=\"st0\">\"/ .e/\"</span> <span class=\"st0\">\"Longtemps je me suis couch\u00e9 de bonne heure\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; regexp</span><br/>    \u2192 <span class=\"nu0\">4</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 37, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/><span class=\"kw2\">create</span><br/>\tmake<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\toccurance <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\tindex <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tindex <span class=\"sy0\">&gt;</span> text.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\ttemp <span class=\"sy0\">:=</span> text.<span class=\"me1\">fuzzy_index</span><span class=\"br0\">(</span>search_for, index, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span><br/>\t\t\t\t\ttemp <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">then</span><br/>\t\t\t\t\tindex <span class=\"sy0\">:=</span> temp <span class=\"sy0\">+</span> search_for.<span class=\"me1\">count</span><br/>\t\t\t\t\toccurance <span class=\"sy0\">:=</span> occurance <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\tindex <span class=\"sy0\">:=</span> text.<span class=\"me1\">count</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tprint<span class=\"br0\">(</span>occurance<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tindex<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\ttemp<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\toccurance<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\ttext<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"ababababab\"</span><br/>\tsearch_for<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">countSubstring = fn(_, \"\") -&gt; 0<br/>                   (str, sub) -&gt; length(String.split(str, sub)) - 1 end<br/>\u00a0<br/>data = [ {\"the three truths\", \"th\"},<br/>         {\"ababababab\", \"abab\"},<br/>         {\"abaabba*bbaba*bbab\", \"a*b\"},<br/>         {\"abaabba*bbaba*bbab\", \"a\"},<br/>         {\"abaabba*bbaba*bbab\", \" \"},<br/>         {\"abaabba*bbaba*bbab\", \"\"},<br/>         {\"\", \"a\"},<br/>         {\"\", \"\"} ]<br/>\u00a0<br/>Enum.each(data, fn{str, sub} -&gt;<br/>  IO.puts countSubstring.(str, sub)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 29, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"co1\">%% Count non-overlapping substrings in Erlang for the rosetta code wiki.</span><br/><span class=\"co1\">%% Implemented by J.W. Luiten</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>substrings<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% String and Sub exhausted, count a match and present result</span><br/><span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_OrigSub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% String exhausted, present result</span><br/><span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">_OrigSub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% Sub exhausted, count a match</span><br/><span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% First character matches, advance</span><br/><span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|MainTail<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span>|SubTail<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"re5\">MainTail</span><span class=\"sy1\">,</span> <span class=\"re5\">SubTail</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% First characters do not match. Keep scanning for sub in remainder of string</span><br/><span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_X</span>|MainTail<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Y</span>|_SubTail<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"re5\">MainTail</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re3\">match</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"re5\">Sub</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 17, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> countSubstring<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> sub<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> from<span class=\"sy2\">,</span>count<br/>    count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    from <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        from <span class=\"sy1\">=</span> <span class=\"kw2\">match_from</span><span class=\"br0\">(</span>sub<span class=\"sy2\">,</span>s<span class=\"sy2\">,</span>from<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> from <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        from <span class=\"sy1\">+=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>sub<span class=\"br0\">)</span><br/>        count <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "EGL", "loc": 52, "block": "<pre class=\"text highlighted_source\">program CountStrings<br/>\u00a0<br/>    function main()<br/>        SysLib.writeStdout(\"Remove and Count:\");<br/>        SysLib.writeStdout(countSubstring(\"th\", \"the three truths\"));<br/>        SysLib.writeStdout(countSubstring(\"abab\", \"ababababab\"));<br/>        SysLib.writeStdout(countSubstring(\"a*b\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstring(\"a\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstring(\" \", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstring(\"\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstring(\"a\", \"\"));<br/>        SysLib.writeStdout(countSubstring(\"\", \"\"));<br/>\u00a0<br/>        SysLib.writeStdout(\"Manual Loop:\");<br/>        SysLib.writeStdout(countSubstringWithLoop(\"th\", \"the three truths\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"abab\", \"ababababab\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"a*b\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"a\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\" \", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"\", \"abaabba*bbaba*bbab\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"a\", \"\"));<br/>        SysLib.writeStdout(countSubstringWithLoop(\"\", \"\"));<br/>    end<br/>\u00a0<br/>    function countSubstring(substr string in, str string in) returns(int)<br/>        if(str.length() &gt; 0 and substr.length() &gt; 0)<br/>\t    return (str.length() - str.replaceStr(subStr, \"\").length()) / subStr.length();<br/>\telse<br/>\t    return 0;<br/>\tend<br/>    end <br/>\u00a0<br/>    function countSubstringWithLoop(substr string in, str string in) returns(int)<br/>        count int = 0;<br/>        loc, index int = 1;<br/>        strlen int = str.length();<br/>        substrlen int = substr.length();<br/>\u00a0<br/>        if(strlen &gt; 0 and substrlen &gt; 0)<br/>            while(loc\u00a0!= 0 and index &lt;= strlen)<br/>                loc = str.indexOf(substr, index);<br/>                if(loc &gt; 0)<br/>                    count += 1;<br/>                    index = loc + substrlen;<br/>                end<br/>            end<br/>        end<br/>        return count;<br/>    end<br/>\u00a0<br/>end<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: math sequences splitting\u00a0;<br/>: occurences ( seq subseq -- n ) split-subseq length 1 -\u00a0;</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: str-count ( s1 len s2 len -- n )<br/>  2swap 0 &gt;r<br/>  begin 2over search<br/>  while 2over nip /string<br/>        r&gt; 1+ &gt;r<br/>  repeat 2drop 2drop r&gt;\u00a0;<br/>\u00a0<br/>s\" the three truths\" s\" th\" str-count .    \\ 3<br/>s\" ababababab\" s\" abab\" str-count .     \\ 2</pre>"}, {"lang": "Fortran", "loc": 28, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Example<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>  n <span class=\"sy0\">=</span> countsubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>, <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> n<br/>  n <span class=\"sy0\">=</span> countsubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>, <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> n<br/>  n <span class=\"sy0\">=</span> countsubstring<span class=\"br0\">(</span><span class=\"st0\">\"abaabba*bbaba*bbab\"</span>, <span class=\"st0\">\"a*b\"</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> n<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> countsubstring<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s1</span>, s2<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>, p, posn<br/>\u00a0<br/>  c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>  p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">do</span> <br/>    posn <span class=\"sy0\">=</span> <span class=\"kw4\">index</span><span class=\"br0\">(</span>s1<span class=\"br0\">(</span>p<span class=\"sy0\">:</span><span class=\"br0\">)</span>, s2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>posn <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>    c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    p <span class=\"sy0\">=</span> p <span class=\"sy0\">+</span> posn <span class=\"sy0\">+</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> countSubstring<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, search <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> OrElse search = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> count = <span class=\"nu0\">0</span>, length = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>search<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s, i, length<span class=\"br0\">)</span> = Search <span class=\"kw1\">Then</span><br/>      count += <span class=\"nu0\">1</span><br/>      i += length - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> count<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>,<span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>,<span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> countSubString<span class=\"br0\">(</span><span class=\"st0\">\"zzzzzzzzzzzzzzz\"</span>, <span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> countSubstring <span class=\"br0\">(</span>where\u00a0:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>what\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> what <span class=\"kw1\">with</span><br/>    | <span class=\"st0\">\"\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span> <span class=\"co1\">// just a definition; infinity is not an int</span><br/>    | _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>where.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> where.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>what, <span class=\"st_h\">@\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> what.<span class=\"me1\">Length</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> show where what <span class=\"sy0\">=</span><br/>        printfn <span class=\"st_h\">@\"countSubstring(\"</span><span class=\"st0\">\"%s\"</span><span class=\"st0\">\", \"</span><span class=\"st0\">\"%s\"</span><span class=\"st0\">\") =\u00a0%d\"</span> where what <span class=\"br0\">(</span>countSubstring where what<span class=\"br0\">)</span><br/>    show <span class=\"st0\">\"the three truths\"</span> <span class=\"st0\">\"th\"</span><br/>    show <span class=\"st0\">\"ababababab\"</span> <span class=\"st0\">\"abab\"</span><br/>    show <span class=\"st0\">\"abc\"</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "FunL", "loc": 6, "block": "<pre class=\"text highlighted_source\">import util.Regex<br/>\u00a0<br/>def countSubstring( str, substr ) = Regex( substr ).findAllMatchIn( str ).length()<br/>\u00a0<br/>println( countSubstring(\"the three truths\", \"th\") )<br/>println( countSubstring(\"ababababab\", \"abab\") )</pre>"}, {"lang": "Go", "loc": 10, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"fmt\"</span><br/>        <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Count<span class=\"sy1\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy1\">))</span> <span class=\"co1\">// says: 3</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span><span class=\"me1\">Count</span><span class=\"sy1\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"sy1\">))</span>     <span class=\"co1\">// says: 2</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'the three truths'</span> <span class=\"sy0\">=</span>~ /th/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'ababababab'</span> <span class=\"sy0\">=</span>~ /abab/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'abaabba*bbaba*bbab'</span> <span class=\"sy0\">=</span>~ /a<span class=\"sy0\">*</span>b/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'abaabba*bbaba*bbab'</span> <span class=\"sy0\">=</span>~ /a\\<span class=\"sy0\">*</span>b/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Text <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Return the number of non-overlapping occurrences of sub in str.</span><br/>countSubStrs str sub <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> breakOnAll <span class=\"br0\">(</span>pack sub<span class=\"br0\">)</span> <span class=\"br0\">(</span>pack str<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> countSubStrs <span class=\"st0\">\"the three truths\"</span> <span class=\"st0\">\"th\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> countSubStrs <span class=\"st0\">\"ababababab\"</span> <span class=\"st0\">\"abab\"</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> A <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"kw1\">do</span>        <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The string \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" occurs as a non-overlapping substring \"</span><span class=\"sy1\">,</span><br/>         countSubstring<span class=\"sy1\">!</span>A <span class=\"sy1\">,</span> <span class=\"st0\">\" times in \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"kw1\">procedure</span> countSubstring<span class=\"br0\">(</span>s1<span class=\"sy1\">,</span>s2<span class=\"br0\">)</span> <span class=\"co1\">#: return count of non-overlapping substrings</span><br/>c <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>s1 <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>s2<span class=\"br0\">)</span><br/>   c <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> c<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings'</span><br/>countss=: #@]\u00a0%~ #@[ - [ #@rplc <span class=\"st_h\">''</span>;~]</pre>"}, {"lang": "Java", "loc": 11, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CountSubstring <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> countSubstring<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> subStr, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span>subStr, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> subStr.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"the three truths\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span>, <span class=\"st0\">\"ababababab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"a*b\"</span>, <span class=\"st0\">\"abaabba*bbaba*bbab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> countSubstring<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> subStr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> matches <span class=\"sy0\">=</span> str.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> RegExp<span class=\"br0\">(</span>subStr<span class=\"sy0\">,</span> <span class=\"st0\">\"g\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> matches <span class=\"sy0\">?</span> matches.<span class=\"me1\">length</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def countSubstring(sub):<br/>  [match(sub; \"g\")] | length;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre>matchall(r::Regex, s::String[, overlap::Bool=false]) -&gt; Vector{String}\n\n   Return a vector of the matching substrings from eachmatch.\n</pre>"}, {"lang": "K", "loc": 12, "block": "<pre class=\"text highlighted_source\">  \"the three truths\" _ss \"th\"<br/>0 4 13<br/>\u00a0<br/>  #\"the three truths\" _ss \"th\"<br/>3<br/>\u00a0<br/>  \"ababababab\" _ss \"abab\"<br/>0 4<br/>\u00a0<br/>  #\"ababababab\" _ss \"abab\"<br/>2<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun countSubstring<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, sub<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span>sub<span class=\"br0\">)</span>.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>,<span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>,<span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 26, "block": "<pre class=\"text highlighted_source\">define countSubstring(str::string, substr::string)::integer =&gt; {<br/>\tlocal(i = 1, foundpos = -1, found = 0)<br/>\twhile(#i &lt; #str-&gt;size &amp;&amp; #foundpos\u00a0!= 0) =&gt; {<br/>\t\tprotect =&gt; {<br/>\t\t\thandle_error =&gt; { #foundpos = 0 }<br/>\t\t\t#foundpos = #str-&gt;find(#substr, -offset=#i)<br/>\t\t}<br/>\t\tif(#foundpos &gt; 0) =&gt; {<br/>\t\t\t#found += 1<br/>\t\t\t#i = #foundpos + #substr-&gt;size<br/>\t\telse<br/>\t\t\t#i++<br/>\t\t}<br/>\t}<br/>\treturn #found<br/>}<br/>define countSubstring_bothways(str::string, substr::string)::integer =&gt; {<br/>\tlocal(found = countSubstring(#str,#substr))<br/>\t#str-&gt;reverse<br/>\tlocal(found2 = countSubstring(#str,#substr))<br/>\t#found &gt; #found2\u00a0? return #found | return #found2<br/>}<br/>countSubstring_bothways('the three truths','th')<br/>//3<br/>countSubstring_bothways('ababababab','abab')<br/>//2</pre>"}, {"lang": "Liberty BASIC", "loc": 15, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> countSubstring<span class=\"br0\">(</span> <span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> countSubstring<span class=\"br0\">(</span> <span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> countSubstring<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> s$<span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    la <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/>    ls <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> s$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> la <span class=\"sy0\">-</span>ls<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> ls<span class=\"br0\">)</span> <span class=\"sy0\">=</span>s$ <span class=\"kw1\">then</span> c <span class=\"sy0\">=</span>c <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span>ls <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> i<br/>    countSubstring <span class=\"sy0\">=</span>c<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logtalk", "loc": 19, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(counting).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(count<span class=\"sy1\">/</span><span class=\"nu0\">3</span>).<br/>\u00a0<br/>    count(<span class=\"re0\">String</span>, <span class=\"re0\">SubString</span>, <span class=\"re0\">Count</span>) <span class=\"sy2\">:-</span><br/>        count(<span class=\"re0\">String</span>, <span class=\"re0\">SubString</span>, <span class=\"nu0\">0</span>, <span class=\"re0\">Count</span>).<br/>\u00a0<br/>    count(<span class=\"re0\">String</span>, <span class=\"re0\">SubString</span>, <span class=\"re0\">Count0</span>, <span class=\"re0\">Count</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"kw4\">sub_atom</span>(<span class=\"re0\">String</span>, <span class=\"re0\">Before</span>, <span class=\"re0\">Length</span>, <span class=\"re0\">After</span>, <span class=\"re0\">SubString</span>) <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re0\">Count1</span> <span class=\"kw5\">is</span> <span class=\"re0\">Count0</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span>,<br/>            <span class=\"re0\">Start</span> <span class=\"kw5\">is</span> <span class=\"re0\">Before</span> <span class=\"sy1\">+</span> <span class=\"re0\">Length</span>,<br/>            <span class=\"kw4\">sub_atom</span>(<span class=\"re0\">String</span>, <span class=\"re0\">Start</span>, <span class=\"re0\">After</span>, <span class=\"nu0\">0</span>, <span class=\"re0\">Rest</span>),<br/>            count(<span class=\"re0\">Rest</span>, <span class=\"re0\">SubString</span>, <span class=\"re0\">Count1</span>, <span class=\"re0\">Count</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"re0\">Count</span> <span class=\"kw5\">is</span> <span class=\"re0\">Count0</span><br/>        ).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> countSubstring<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> select<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f:=proc(s::string,c::string,count::nonnegint) local n;<br/>     n:=StringTools:-Search(c,s);<br/>     if n&gt;0 then 1+procname(s[n+length(c)..],c,count);<br/>     else 0; end if;<br/>end proc:<br/>\u00a0<br/>f(\"the three truths\",\"th\",0);<br/>\u00a0<br/>f(\"ababababab\",\"abab\",0);<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">StringPosition[\"the three truths\",\"th\",Overlaps-&gt;False]//Length<br/>3<br/>StringPosition[\"ababababab\",\"abab\",Overlaps-&gt;False]//Length<br/>2</pre>"}, {"lang": "MATLAB / Octave", "loc": 6, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"co1\">% Count occurrences of a substring without overlap</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/findstr.html\"><span class=\"kw2\">findstr</span></a><span class=\"br0\">(</span>\"ababababab\",\"abab\",<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/findstr.html\"><span class=\"kw2\">findstr</span></a><span class=\"br0\">(</span>\"the three truths\",\"th\",<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">% Count occurrences of a substring with overlap</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/findstr.html\"><span class=\"kw2\">findstr</span></a><span class=\"br0\">(</span>\"ababababab\",\"abab\",<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">scount(e, s)\u00a0:= block(<br/>   [n: 0, k: 1],<br/>   while integerp(k: ssearch(e, s, k)) do (n: n + 1, k: k + 1),<br/>   n<br/>)$<br/>\u00a0<br/>scount(\"na\", \"banana\");<br/>2</pre>"}, {"lang": "Mirah", "loc": 39, "block": "<pre class=\"text highlighted_source\">import java.util.regex.Pattern<br/>import java.util.regex.Matcher<br/>\u00a0<br/>#The \"remove and count the difference\" method<br/>def count_substring(pattern:string, source:string)<br/>    (source.length() - source.replace(pattern, \"\").length()) / pattern.length()<br/>end<br/>\u00a0<br/>puts count_substring(\"th\", \"the three truths\")      # ==&gt; 3<br/>puts count_substring(\"abab\", \"ababababab\")          # ==&gt; 2<br/>puts count_substring(\"a*b\", \"abaabba*bbaba*bbab\")   # ==&gt; 2<br/>\u00a0<br/>\u00a0<br/># The \"split and count\" method<br/>def count_substring2(pattern:string, source:string)<br/>    # the result of split() will contain one more element than the delimiter<br/>\t# the \"-1\" second argument makes it not discard trailing empty strings<br/>    source.split(Pattern.quote(pattern), -1).length - 1<br/>end<br/>\u00a0<br/>puts count_substring2(\"th\", \"the three truths\")      # ==&gt; 3<br/>puts count_substring2(\"abab\", \"ababababab\")          # ==&gt; 2<br/>puts count_substring2(\"a*b\", \"abaabba*bbaba*bbab\")   # ==&gt; 2<br/>\u00a0<br/>\u00a0<br/># This method does a match and counts how many times it matches<br/>def count_substring3(pattern:string, source:string)<br/>    result = 0<br/>    Matcher m = Pattern.compile(Pattern.quote(pattern)).matcher(source);<br/>    while (m.find())<br/>        result = result + 1<br/>    end<br/>    result<br/>end<br/>\u00a0<br/>puts count_substring3(\"th\", \"the three truths\")      # ==&gt; 3<br/>puts count_substring3(\"abab\", \"ababababab\")          # ==&gt; 2<br/>puts count_substring3(\"a*b\", \"abaabba*bbaba*bbab\")   # ==&gt; 2<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 23, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>\u00a0<br/>module CountSubStrings<br/>{<br/>    CountSubStrings(this text\u00a0: string, target\u00a0: string)\u00a0: int<br/>    {<br/>        match (target) {<br/>            |\"\" =&gt; 0<br/>            |_ =&gt; (text.Length - text.Replace(target, \"\").Length) / target.Length<br/>        }<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def text1 = \"the three truths\";<br/>        def target1 = \"th\";<br/>        def text2 = \"ababababab\";<br/>        def target2 = \"abab\";<br/>\u00a0<br/>        WriteLine($\"$target1 occurs $(text1.CountSubStrings(target1)) times in $text1\");<br/>        WriteLine($\"$target2 occurs $(text2.CountSubStrings(target2)) times in $text2\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 23, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method countSubstring<span class=\"br0\">(</span>inStr, findStr<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> inStr.<span class=\"kw6\">countstr</span><span class=\"br0\">(</span>findStr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  strings = <span class=\"st0\">''</span><br/>  find = <span class=\"st0\">'FIND'</span><br/>  ix = <span class=\"nu0\">0</span><br/>  ix = ix + <span class=\"nu0\">1</span>; strings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = ix; find<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = ix; strings<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> = <span class=\"st0\">'the three truths'</span>; strings<span class=\"br0\">[</span>ix, find<span class=\"br0\">]</span> = <span class=\"st0\">'th'</span><br/>  ix = ix + <span class=\"nu0\">1</span>; strings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = ix; find<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = ix; strings<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> = <span class=\"st0\">'ababababab'</span>;       strings<span class=\"br0\">[</span>ix, find<span class=\"br0\">]</span> = <span class=\"st0\">'abab'</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> to strings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    str = strings<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><br/>    fnd = strings<span class=\"br0\">[</span>ix, find<span class=\"br0\">]</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'there are'</span> countSubstring<span class=\"br0\">(</span>str, fnd<span class=\"br0\">)</span> <span class=\"st0\">'occurences of \"'</span>fnd<span class=\"st0\">'\" in \"'</span>str<span class=\"st0\">'\"'</span><br/>    <span class=\"kw3\">end</span> ix<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 43, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">; file:   stringcount.lsp</span><br/><span class=\"co1\">; url:    http://rosettacode.org/wiki/Count_occurrences_of_a_substring</span><br/><span class=\"co1\">; author: oofoe 2012-01-29</span><br/>\u00a0<br/><span class=\"co1\">; Obvious (and non-destructive...)</span><br/>\u00a0<br/><span class=\"co1\">; Note that NewLISP performs an /implicit/ slice on a string or list</span><br/><span class=\"co1\">; with this form \"(start# end# stringorlist)\". If the end# is omitted,</span><br/><span class=\"co1\">; the slice will go to the end of the string. This is handy here to</span><br/><span class=\"co1\">; keep removing the front part of the string as it gets matched.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>scount needle haystack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>h <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#copy\"><span class=\"kw1\">copy</span></a> haystack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; Copy of haystack string.</span><br/>        <span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span>               <span class=\"co1\">; Cursor.</span><br/>        <span class=\"br0\">(</span>c <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>              <span class=\"co1\">; Count of occurences.</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> i <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#find\"><span class=\"kw1\">find</span></a> needle h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#inc\"><span class=\"kw1\">inc</span></a> c<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> h <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span> i <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> needle<span class=\"br0\">)</span><span class=\"br0\">)</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    c<span class=\"br0\">)</span><span class=\"br0\">)</span>                     <span class=\"co1\">; Return count.</span><br/>\u00a0<br/><span class=\"co1\">; Tricky -- Uses functionality from replace function to find all</span><br/><span class=\"co1\">; non-overlapping occurrences, replace them, and return the count of</span><br/><span class=\"co1\">; items replaced in system variable $0.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>rcount needle haystack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#replace\"><span class=\"kw1\">replace</span></a> needle haystack <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"re1\">$0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Test</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>test f needle haystack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"Found \"</span> <span class=\"br0\">(</span>f needle haystack<span class=\"br0\">)</span> <br/>           <span class=\"st0\">\" occurences of '\"</span> needle <span class=\"st0\">\"' in '\"</span> haystack <span class=\"st0\">\"'.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dolist\"><span class=\"kw1\">dolist</span></a> <span class=\"br0\">(</span>f <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#list\"><span class=\"kw1\">list</span></a> scount rcount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>test f <span class=\"st0\">\"glart\"</span> <span class=\"st0\">\"hinkerpop\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>test f <span class=\"st0\">\"abab\"</span>  <span class=\"st0\">\"ababababab\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>test f <span class=\"st0\">\"th\"</span>    <span class=\"st0\">\"the three truths\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc count(s, sub: string): int =<br/>  var i = 0<br/>  while true:<br/>    i = s.find(sub, i)<br/>    if i &lt; 0:<br/>      break<br/>    i += sub.len # i += 1 for overlapping substrings<br/>    inc result<br/>\u00a0<br/>echo count(\"the three truths\",\"th\")<br/>\u00a0<br/>echo count(\"ababababab\",\"abab\")</pre>"}, {"lang": "Objective-C", "loc": 20, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>CountSubstrings<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>occurrencesOfSubstring<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>subStr;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>CountSubstrings<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>occurrencesOfSubstring<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>subStr <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self componentsSeparatedByString<span class=\"sy0\">:</span>subStr<span class=\"br0\">]</span> count<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%lu\"</span>, <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"the three truths\"</span> occurrencesOfSubstring<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"th\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%lu\"</span>, <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"ababababab\"</span> occurrencesOfSubstring<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%lu\"</span>, <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abaabba*bbaba*bbab\"</span> occurrencesOfSubstring<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"a*b\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> count_substring str sub <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sub_len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length sub <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> len_diff <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> sub_len<br/>  <span class=\"kw1\">and</span> reg <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>regexp_string sub <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> len_diff <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">try</span><br/>        <span class=\"kw1\">let</span> pos <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>search_forward reg str i <span class=\"kw1\">in</span><br/>        aux <span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> sub_len<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> n<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"count 1:\u00a0%d\\n\"</span> <span class=\"br0\">(</span>count_substring <span class=\"st0\">\"the three truth\"</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"count 2:\u00a0%d\\n\"</span> <span class=\"br0\">(</span>count_substring <span class=\"st0\">\"ababababab\"</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: countSubString(s, sub)<br/>   0 1 while(sub swap s indexOfAllFrom dup notNull) [ sub size +  1 under+ ] <br/>   drop\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 14, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/> bag=<span class=\"st0\">\"the three truths\"</span><br/> x=<span class=\"st0\">\"th\"</span><br/> <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>bag,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>x,<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"st0\">'found'</span> bag~<span class=\"kw6\">countstr</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/> bag=<span class=\"st0\">\"ababababab\"</span><br/> x=<span class=\"st0\">\"abab\"</span><br/> <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>bag,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>x,<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"st0\">'found'</span> bag~<span class=\"kw6\">countstr</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"co1\">-- can be done caselessly too</span><br/> bag=<span class=\"st0\">\"abABAbaBab\"</span><br/> x=<span class=\"st0\">\"abab\"</span><br/> <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>bag,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>x,<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"st0\">'found'</span> bag~caselesscountstr<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">subvec<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>u<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>#u<span class=\"sy0\">&lt;=</span>#v<span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#u<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">!=</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">++;</span> <span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts<span class=\"sy0\">++;</span><br/>\t\ti<span class=\"sy0\">+=</span>#u<br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>substr<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"sy0\">=</span>subvec<span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>substr<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/>substr<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> countSubstring <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sub</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/quotemeta.html\"><span class=\"kw3\">quotemeta</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/$sub/g</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"co1\">#  or return scalar( () = $str =~ /$sub/g );</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"3\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"2\"</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> countSubstring <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sub</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/quotemeta.html\"><span class=\"kw3\">quotemeta</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/$sub/g</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"co1\">#  or return scalar( () = $str =~ /$sub/g );</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"3\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> countSubstring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"2\"</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> count<span class=\"sy0\">-</span>substring<span class=\"br0\">(</span><span class=\"re0\">$big</span><span class=\"sy0\">,</span><span class=\"re0\">$little</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">+</span><span class=\"re0\">$big</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">:</span> <span class=\"sy0\">~</span><span class=\"re0\">$little</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> count<span class=\"sy0\">-</span>substring<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 3</span><br/><span class=\"kw3\">say</span> count<span class=\"sy0\">-</span>substring<span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\"># 4</span><br/>\u00a0<br/><span class=\"kw3\">say</span> count<span class=\"sy0\">-</span>substring<span class=\"br0\">(</span><span class=\"nu0\">123123123</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"co1\"># 3</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">sequence tests = {{\"the three truths\",\"th\"},<br/>                  {\"ababababab\",\"abab\"},<br/>                  {\"ababababab\",\"aba\"},<br/>                  {\"ababababab\",\"ab\"},<br/>                  {\"ababababab\",\"a\"},<br/>                  {\"ababababab\",\"\"}}<br/>integer start, count<br/>string test, substring<br/>for i=1 to length(tests) do<br/>    start = 1<br/>    count = 0<br/>    {test, substring} = tests[i]<br/>    while 1 do<br/>        start = match(substring,test,start)<br/>        if start=0 then exit end if<br/>        start += length(substring)<br/>        count += 1<br/>    end while<br/>    printf(1,\"The string \\\"%s\\\" occurs as a non-overlapping substring\u00a0%d times in \\\"%s\\\"\\n\",{substring,count,test})<br/>end for</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/substr_count\"><span class=\"kw3\">substr_count</span></a><span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"3\"</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/substr_count\"><span class=\"kw3\">substr_count</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"2\"</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de countSubstring (Str Sub)<br/>   (let (Cnt 0  H (chop Sub))<br/>      (for (S (chop Str)  S  (cdr S))<br/>         (when (head H S)<br/>            (inc 'Cnt)<br/>            (setq S (map prog2 H S)) ) )<br/>      Cnt ) )</pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"pli highlighted_source\">cnt<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw1\">tally</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>text<span class=\"sy0\">,</span> <span class=\"kw1\">key</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">data</span> <span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"kw1\">key</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">data</span> <span class=\"br0\">(</span><span class=\"kw1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">tally</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">=</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span>text<span class=\"sy0\">,</span> <span class=\"kw1\">key</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"kw1\">tally</span> <span class=\"sy0\">=</span> <span class=\"kw1\">tally</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span><span class=\"kw1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">tally</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> cnt<span class=\"sy0\">;</span></pre>"}, {"lang": "PowerBASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">FUNCTION PBMAIN () AS LONG<br/>    PRINT \"the three truths, th:\", TALLY(\"the three truths\", \"th\")<br/>    PRINT \"ababababab, abab:\", TALLY(\"ababababab\", \"abab\")<br/>END FUNCTION</pre>"}, {"lang": "PureBasic", "loc": 4, "block": "<pre class=\"purebasic highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span>,<span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/>b <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span><span class=\"st0\">\"ababababab\"</span>,<span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span>        <br/><span class=\"co1\">; a = 3</span><br/><span class=\"co1\">; b = 2</span></pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">regex</span><span class=\"br0\">]</span>::Matches<span class=\"br0\">(</span><span class=\"st0\">\"the three truths\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span>.count<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 19, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>\u00a0<br/>count_substring<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> Total<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    count_substring<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Total<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>count_substring<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> Count<span class=\"sy4\">,</span> Total<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <span class=\"br0\">(</span> substring_rest<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span><br/>    <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>        succ<span class=\"br0\">(</span>Count<span class=\"sy4\">,</span> NextCount<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        count_substring<span class=\"br0\">(</span>Rest<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> NextCount<span class=\"sy4\">,</span> Total<span class=\"br0\">)</span><br/>    <span class=\"sy4\">;</span><br/>        Total <span class=\"sy6\">=</span> Count<br/>    <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>substring_rest<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Sub<span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    sub_string<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Before<span class=\"sy4\">,</span> Length<span class=\"sy4\">,</span> Remain<span class=\"sy4\">,</span> Sub<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    DropN <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Before <span class=\"sy3\">+</span> Length<span class=\"sy4\">,</span><br/>    sub_string<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> DropN<span class=\"sy4\">,</span> Remain<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"st0\">\"the three truths\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"st0\">\"ababababab\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2</span></pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"rsplus highlighted_source\">count <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>haystack, needle<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span>v <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/attr.html\"><span class=\"kw2\">attr</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/gregexpr.html\"><span class=\"kw2\">gregexpr</span></a><span class=\"br0\">(</span>needle, haystack, fixed <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/T.html\"><span class=\"kw2\">T</span></a><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"st0\">\"match.length\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/identical.html\"><span class=\"kw2\">identical</span></a><span class=\"br0\">(</span>v, <span class=\"sy0\">-</span>1L<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/print.html\"><span class=\"kw2\">print</span></a><span class=\"br0\">(</span>count<span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span>, <span class=\"st0\">\"l\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define count-substring <br/>  (compose length regexp-match*))<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 26, "block": "<pre class=\"text highlighted_source\">Red []<br/>;;-----------------------------------<br/>count-sub1: func [hay needle][<br/>;;-----------------------------------<br/>  prin rejoin [\"hay: \" pad copy hay  20 \",needle: \" pad copy needle 6  \",count: \" ]<br/>  i: 0 <br/>  parse hay [ some [thru needle (i: i + 1)] ]<br/>  print i<br/>]<br/>;;-----------------------------------<br/>count-sub2: func [hay needle][<br/>;;-----------------------------------<br/>  prin rejoin [\"hay: \" pad copy hay  20 \",needle: \" pad copy needle 6  \",count: \" ]<br/>  i: 0<br/>  while [hay: find hay needle][<br/>    i: i + 1<br/>    hay:  skip hay length? needle<br/>  ]<br/>  print i<br/>]<br/>count-sub1 \"the three truths\" \"th\"<br/>count-sub1 \"ababababab\" \"abab\"<br/>print \"^/version 2\"<br/>count-sub2 \"the three truths\" \"th\"<br/>count-sub2 \"ababababab\" \"abab\"<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts the  occurrences  of a (non\u2500overlapping)  substring  in a string. */</span><br/>w=<span class=\"sy0\">.</span>                                                                 <span class=\"coMULTI\">/*max. width so far.*/</span><br/>bag= <span class=\"st0\">'the three truths'</span>   \u00a0;      x= <span class=\"st0\">\"th\"</span>      \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'ababababab'</span>         \u00a0;      x= <span class=\"st0\">\"abab\"</span>    \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'aaaabacad'</span>          \u00a0;      x= <span class=\"st0\">\"aa\"</span>      \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'abaabba*bbaba*bbab'</span> \u00a0;      x= <span class=\"st0\">\"a*b\"</span>     \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'abaabba*bbaba*bbab'</span> \u00a0;      x= <span class=\"st0\">\" \"</span>       \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag=                      \u00a0;      x= <span class=\"st0\">\"a\"</span>       \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag=                      \u00a0;      x=           \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'catapultcatalog'</span>    \u00a0;      x= <span class=\"st0\">\"cat\"</span>     \u00a0;        <span class=\"kw1\">call</span> showResult<br/>bag= <span class=\"st0\">'aaaaaaaaaaaaaa'</span>     \u00a0;      x= <span class=\"st0\">\"aa\"</span>      \u00a0;        <span class=\"kw1\">call</span> showResult<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw6\">countstr</span>:   <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> haystack,needle,start;      <span class=\"kw1\">if</span> start==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> start=<span class=\"nu0\">1</span><br/>            width=<span class=\"kw6\">length</span><span class=\"br0\">(</span>needle<span class=\"br0\">)</span><br/>                                  <span class=\"kw1\">do</span> $=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span> p==<span class=\"nu0\">0</span>;         p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>needle,haystack,start<span class=\"br0\">)</span><br/>                                  start=width + p                    <span class=\"coMULTI\">/*prevent overlaps.*/</span><br/>                                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*$*/</span><br/>            <span class=\"kw1\">return</span> $                                                 <span class=\"coMULTI\">/*return the count.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showResult: <span class=\"kw1\">if</span> w==<span class=\"sy0\">.</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                   w=<span class=\"nu0\">30</span>        <span class=\"coMULTI\">/*W:  largest haystack width.*/</span><br/>                         <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'haystack'</span>,w<span class=\"br0\">)</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'needle'</span>,w%2<span class=\"br0\">)</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'count'</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, w, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>      <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, w%2, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>    <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span><br/>                         <span class=\"kw3\">end</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> bag==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> bag= <span class=\"st0\">\" (null)\"</span>                <span class=\"coMULTI\">/*handle displaying of nulls.*/</span><br/>            <span class=\"kw1\">if</span>   x==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>   x= <span class=\"st0\">\" (null)\"</span>                <span class=\"coMULTI\">/*   \"        \"      \"   \"   */</span><br/>            <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>bag, w<span class=\"br0\">)</span>           <span class=\"kw6\">left</span><span class=\"br0\">(</span>x, w%2<span class=\"br0\">)</span>            <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"kw6\">countstr</span><span class=\"br0\">(</span>bag, x<span class=\"br0\">)</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"Ring Welcome Ring to the Ring Ring Programming Ring Language Ring\"<br/>bString = \"Ring\"<br/>see count(aString,bString)<br/>\u00a0<br/>func count cString,dString<br/>     sum = 0<br/>     while substr(cString,dString) &gt; 0<br/>           sum++<br/>           cString = substr(cString,substr(cString,dString)+len(string(sum)))<br/>     end<br/>     return sum</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> countSubstrings str, subStr<br/>  str.<span class=\"me1\">scan</span><span class=\"br0\">(</span>subStr<span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> countSubstrings <span class=\"st0\">\"the three truths\"</span>, <span class=\"st0\">\"th\"</span>      <span class=\"co1\">#=&gt; 3</span><br/><span class=\"kw3\">p</span> countSubstrings <span class=\"st0\">\"ababababab\"</span>, <span class=\"st0\">\"abab\"</span>          <span class=\"co1\">#=&gt; 2</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">print countSubstring(\"the three truths\",\"th\")<br/>print countSubstring(\"ababababab\",\"abab\")<br/>\u00a0<br/>FUNCTION countSubstring(s$,find$)<br/>WHILE instr(s$,find$,i) &lt;&gt; 0 <br/>  countSubstring = countSubstring + 1<br/>  i = instr(s$,find$,i) + len(find$)<br/>WEND<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    println!(\"{}\",\"the three truths\".matches(\"th\").count());<br/>    println!(\"{}\",\"ababababab\".matches(\"abab\").count());<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> countSubstring<span class=\"br0\">(</span>str1<span class=\"sy0\">:</span>String, str2<span class=\"sy0\">:</span>String<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>   <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> count<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> idx<span class=\"sy0\">=</span>str1 indexOf<span class=\"br0\">(</span>str2, pos<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>idx <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> c <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> count<span class=\"br0\">(</span>idx+str2.<span class=\"me1\">size</span>, c+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   count<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">gosh<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>use gauche.lazy<span class=\"br0\">)</span><br/>#<span class=\"sy0\">&lt;</span>undef<span class=\"sy0\">&gt;</span><br/>gosh<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>lrxmatch <span class=\"st0\">\"th\"</span> <span class=\"st0\">\"the three truths\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3</span><br/>gosh<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>lrxmatch <span class=\"st0\">\"abab\"</span> <span class=\"st0\">\"ababababab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 20, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: countSubstring (in string: stri, in string: searched) is func<br/>  result<br/>    var integer: count is 0;<br/>  local<br/>    var integer: offset is 0;<br/>  begin<br/>    offset\u00a0:= pos(stri, searched);<br/>    while offset &lt;&gt; 0 do<br/>      incr(count);<br/>      offset\u00a0:= pos(stri, searched, offset + length(searched));<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(countSubstring(\"the three truths\", \"th\"));<br/>    writeln(countSubstring(\"ababababab\", \"abab\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">\"the three truths\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span>;<br/>say <span class=\"st0\">\"ababababab\"</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "SNOBOL4", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>        DEFINE(\"countSubstring(t,s)\")<br/>\u00a0<br/>        OUTPUT = countSubstring(\"the three truths\",\"th\")<br/>        OUTPUT = countSubstring(\"ababababab\",\"abab\")<br/>\u00a0<br/>       \u00a0:(END)<br/>countSubstring t ARB s =\u00a0:F(RETURN)<br/>        countSubstring = countSubstring + 1\u00a0:(countSubstring)<br/>END<br/>3<br/>2<br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 18, "block": "<pre class=\"text highlighted_source\">fun count_substrings (str, sub) =<br/>  let<br/>    fun aux (str', count) =<br/>      let<br/>        val suff = #2 (Substring.position sub str')<br/>      in<br/>        if Substring.isEmpty suff then<br/>       \t  count<br/>        else<br/>          aux (Substring.triml (size sub) suff, count + 1)<br/>      end<br/>  in<br/>    aux (Substring.full str, 0)<br/>  end;<br/>\u00a0<br/>print (Int.toString (count_substrings (\"the three truths\", \"th\")) ^ \"\\n\");<br/>print (Int.toString (count_substrings (\"ababababab\", \"abab\")) ^ \"\\n\");<br/>print (Int.toString (count_substrings (\"abaabba*bbaba*bbab\", \"a*b\")) ^ \"\\n\");</pre>"}, {"lang": "Stata", "loc": 14, "block": "<pre class=\"text highlighted_source\">function strcount(s, x) {<br/>\tn = 0<br/>\tk = 1-(i=strlen(x))<br/>\tdo {<br/>\t\tif (k = ustrpos(s, x, k+i)) n++<br/>\t} while(k)<br/>\treturn(n)<br/>}<br/>\u00a0<br/>strcount(\"peter piper picked a peck of pickled peppers\", \"pe\")<br/>  5<br/>\u00a0<br/>strcount(\"ababababab\",\"abab\")<br/>  2</pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT, {}<br/>occurences=COUNT (\"the three truths\",  \":th:\")<br/>occurences=COUNT (\"ababababab\",   \":abab:\")<br/>occurences=COUNT (\"abaabba*bbaba*bbab\",\":a\\*b:\")<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> countSubstrings <span class=\"br0\">{</span>haystack needle<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">regexp</span> -all <span class=\"sy0\">***</span>=<span class=\"re0\">$needle</span> <span class=\"re0\">$haystack</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>countSubstrings <span class=\"st0\">\"the three truths\"</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>countSubstrings <span class=\"st0\">\"ababababab\"</span> <span class=\"st0\">\"abab\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>countSubstrings <span class=\"st0\">\"abaabba*bbaba*bbab\"</span> <span class=\"st0\">\"a*b\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 14, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(do (defun count-occurrences (haystack needle)<br/>       (for* ((occurrences 0)<br/>              (old-pos 0)<br/>              (new-pos (search-str haystack needle old-pos nil)))<br/>             (new-pos occurrences)<br/>             ((inc occurrences)<br/>              (set old-pos (+ new-pos (length needle)))<br/>              (set new-pos (search-str haystack needle old-pos nil))))))<br/>@ndl<br/>@hay<br/>@(output)<br/>@(count-occurrences hay ndl) occurrences(s) of @ndl inside @hay<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"kw1\">function</span> countString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re2\">input</span>=<span class=\"re4\">$1</span><br/>\t<span class=\"re2\">cnt</span>=<span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">until</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${input/$2/}</span>\"</span> == <span class=\"st0\">\"<span class=\"es2\">$input</span>\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"re2\">input</span>=<span class=\"co1\">${input/$2/}</span><br/>\t\t<span class=\"kw3\">let</span> cnt+=<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"re1\">$cnt</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>countString <span class=\"st0\">\"the three truths\"</span> <span class=\"st0\">\"th\"</span><br/>countString <span class=\"st0\">\"ababababab\"</span> <span class=\"st0\">\"abab\"</span></pre>"}, {"lang": "VBA", "loc": 3, "block": "<pre class=\"text highlighted_source\">Function CountStringInString(stLookIn As String, stLookFor As String)<br/>    CountStringInString = UBound(Split(stLookIn, stLookFor))<br/>End Function</pre>"}, {"lang": "VBScript", "loc": 18, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> CountSubstring(str,substr)<br/>\tCountSubstring = 0<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(str)<br/>\t\t<span class=\"kw3\">If</span> Len(str) &gt;= Len(substr) <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw3\">If</span> InStr(i,str,substr) <span class=\"kw3\">Then</span><br/>\t\t\t\tCountSubstring = CountSubstring + 1<br/>\t\t\t\ti = InStr(i,str,substr) + Len(substr) - 1<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write CountSubstring(<span class=\"st0\">\"the three truths\"</span>,<span class=\"st0\">\"th\"</span>) &amp; vbCrLf<br/>WScript.StdOut.Write CountSubstring(<span class=\"st0\">\"ababababab\"</span>,<span class=\"st0\">\"abab\"</span>) &amp; vbCrLf<br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 8, "block": "<pre class=\"text highlighted_source\">@let {<br/>  c &amp;[s t] #!s.match &amp;(t)g<br/>\u00a0<br/>  [[<br/>   \u00a0!!c \"the three truths\" \"th\"<br/>   \u00a0!!c \"ababababab\" \"abab\"<br/>  ]]<br/>}</pre>"}, {"lang": "XPL0", "loc": 41, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>string 0;               \\use zero-terminated strings, instead of MSb terminated<br/>\u00a0<br/>\u00a0<br/>func    StrNCmp(A, B, N); \\Compare string A to string B up to N bytes long<br/>\\This returns:<br/>\\       &gt;0 if A &gt; B<br/>\\       =0 if A = B<br/>\\       &lt;0 if A &lt; B<br/>char    A, B;           \\strings to be compared<br/>int     N;              \\number of bytes to compare<br/>int     I;<br/>[for I:= 0 to N-1 do<br/>    if A(I) # B(I) then<br/>        return A(I) - B(I);<br/>return 0;               \\they're equal<br/>];      \\StrNCmp<br/>\u00a0<br/>\u00a0<br/>func    StrLen(Str);    \\Return the number of characters in an ASCIIZ string<br/>char    Str;<br/>int     I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if Str(I) = 0 then return I;<br/>\u00a0<br/>\u00a0<br/>func    SubStr(A, B);   \\Count number of times string B occurs in A<br/>char    A, B;<br/>int     LA, LB, C, I;<br/>[LA:= StrLen(A);  LB:= StrLen(B);<br/>C:= 0;  I:= 0;<br/>while I &lt; LA do<br/>        if StrNCmp(B, A+I, LB) = 0 then [C:= C+1;  I:= I+LB]<br/>        else I:= I+1;<br/>return C;<br/>];<br/>\u00a0<br/>\u00a0<br/>[IntOut(0, SubStr(\"the three truths\", \"th\"));  CrLf(0);<br/> IntOut(0, SubStr(\"ababababab\", \"abab\"));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn countSubstring(s,p){ pn:=p.len(); cnt:=n:=0;<br/>   while(Void!=(n:=s.find(p,n))){cnt+=1; n+=pn}<br/>   cnt<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 10, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> t$=<span class=\"st0\">\"ABABABABAB\"</span>: <span class=\"kw1\">LET</span> p$=<span class=\"st0\">\"ABAB\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> t$=<span class=\"st0\">\"THE THREE TRUTHS\"</span>: <span class=\"kw1\">LET</span> p$=<span class=\"st0\">\"TH\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">30</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"kw1\">PRINT</span> t$: <span class=\"kw1\">LET</span> c=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> lp=<span class=\"kw3\">LEN</span> p$<br/><span class=\"nu0\">1020</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span> t$-lp+<span class=\"nu0\">1</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>t$<span class=\"br0\">(</span>i <span class=\"kw1\">TO</span> i+lp-<span class=\"nu0\">1</span><span class=\"br0\">)</span>=p$<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> c=c+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> i=i+lp-<span class=\"nu0\">1</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">PRINT</span> p$;<span class=\"st0\">\"=\"</span>;c<span class=\"co1\">''</span><br/><span class=\"nu0\">1060</span> <span class=\"kw1\">RETURN</span> </pre>"}]}