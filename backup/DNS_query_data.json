{"task": "DNS_query", "blocks": [{"lang": "Ada", "loc": 13, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">Sockets</span>; <span class=\"kw3\">use</span> GNAT.<span class=\"me1\">Sockets</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> DNSQuerying <span class=\"kw1\">is</span><br/>\u00a0<br/>   Host        \u00a0: Host_Entry_Type <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Inet_Addr_V4\u00a0: Inet_Addr_Type <span class=\"br0\">(</span>Family_Inet<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>   Host        \u00a0:= Get_Host_By_Name <span class=\"br0\">(</span>Name =&gt; <span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span>;<br/>   Inet_Addr_V4\u00a0:= Addresses <span class=\"br0\">(</span>Host<span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"IPv4: \"</span> &amp; Image <span class=\"br0\">(</span>Value =&gt; Inet_Addr_V4<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> DNSQuerying;</pre>"}, {"lang": "AutoHotkey", "loc": 6, "block": "<pre class=\"autohotkey highlighted_source\">Url <span class=\"sy0\">:=</span> <span class=\"st0\">\"www.kame.net\"</span> <span class=\"sy0\">,</span> LogFile <span class=\"sy0\">:=</span> <span class=\"st0\">\"Ping_\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Now\"><span class=\"kw2\">A_Now</span></a> <span class=\"st0\">\".log\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/RunWait.htm\"><span class=\"kw3\">Runwait</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%comspec%</span> <span class=\"sy0\">/</span>c nslookup <span class=\"re0\">%Url%</span><span class=\"sy0\">&gt;</span><span class=\"re0\">%LogFile%</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> hide<br/><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> Contents<span class=\"sy0\">,</span> <span class=\"re0\">%LogFile%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%LogFile%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>Contents<span class=\"sy0\">,</span><span class=\"st0\">\"Addresses:.+(`r?`n\\s+.+)*\"</span><span class=\"sy0\">,</span>Match<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Match<span class=\"sy0\">,</span><span class=\"st0\">\"(Addresses:|[ `t])\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Batch File", "loc": 38, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">:: DNS Query Task from Rosetta Code Wiki</span><br/><span class=\"co2\">:: Batch File Implementation</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"domain=www.kame.net\"<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> DOMAIN: \"<span class=\"sy0\">%</span><span class=\"re3\">domain</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">DNS_Lookup</span> \"<span class=\"sy0\">%</span><span class=\"re3\">domain</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>::Main Procedure</span><br/><span class=\"co2\">::Uses NSLOOKUP Command. Also uses a dirty \"parsing\" to detect IP addresses.</span><br/>:<span class=\"re0\">DNS_Lookup</span> [domain]<br/><span class=\"co2\"><br/>::Define Variables and the TAB Character</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"dom=<span class=\"sy0\">%</span><span class=\"re3\">~1</span>\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"record=\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"reccnt=0\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"delims=\" <span class=\"sy0\">%%</span><span class=\"re3\">T</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'forfiles /p \"<span class=\"sy0\">%</span><span class=\"re3\">~dp0</span>.\" /m \"<span class=\"sy0\">%</span><span class=\"re3\">~nx0</span>\" /c \"cmd /c <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span>0x09\"'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"TAB=<span class=\"sy0\">%%</span><span class=\"re3\">T</span>\"<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1* delims=:\" <span class=\"sy0\">%%</span><span class=\"re3\">x</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'nslookup \"<span class=\"sy0\">!</span><span class=\"re2\">dom</span><span class=\"sy0\">!</span>\" 2<span class=\"co3\">^&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a>'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"line=<span class=\"sy0\">%%</span><span class=\"re3\">x</span>\"<br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">line:~0,4</span><span class=\"sy0\">!</span>\"==\"Name\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"record=yes\"<br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">line:~0,5</span><span class=\"sy0\">!</span>\"==\"Alias\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"record=\"<br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">record</span><span class=\"sy0\">!</span>\"==\"yes\" <span class=\"sy0\">(</span><br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a reccnt+=1<br/>        <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%%</span><span class=\"re3\">y</span>\"==\"\" <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"catch_<span class=\"sy0\">!</span><span class=\"re2\">reccnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">x</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"catch_<span class=\"sy0\">!</span><span class=\"re2\">reccnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">x</span>:<span class=\"sy0\">%%</span><span class=\"re3\">y</span>\"<span class=\"sy0\">)</span><br/>    <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">c</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">reccnt</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">catch_%%<span class=\"re3\">c</span>:~0,7</span><span class=\"sy0\">!</span>\"==\"Address\" <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(!</span><span class=\"re2\">catch_%%<span class=\"re3\">c</span>:*s:  =</span><span class=\"sy0\">!</span><br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">catch_%%<span class=\"re3\">c</span>:~0,1</span><span class=\"sy0\">!</span>\"==\"<span class=\"sy0\">%</span><span class=\"re3\">TAB</span><span class=\"sy0\">%</span>\" <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(!</span><span class=\"re2\">catch_%%<span class=\"re3\">c</span>:<span class=\"sy0\">%</span><span class=\"re3\">TAB</span>%  =</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 53, "block": "<pre class=\"text highlighted_source\">      name$ = \"www.kame.net\"<br/>\u00a0<br/>      AF_INET = 2<br/>      AF_INET6 = 23<br/>      WSASYS_STATUS_LEN = 128<br/>      WSADESCRIPTION_LEN = 256<br/>\u00a0<br/>      SYS \"LoadLibrary\", \"WS2_32.DLL\" TO ws2%<br/>      SYS \"GetProcAddress\", ws2%, \"WSAStartup\"  TO `WSAStartup`<br/>      SYS \"GetProcAddress\", ws2%, \"WSACleanup\"  TO `WSACleanup`<br/>      SYS \"GetProcAddress\", ws2%, \"getaddrinfo\" TO `getaddrinfo`<br/>\u00a0<br/>      DIM WSAdata{wVersion{l&amp;,h&amp;}, wHighVersion{l&amp;,h&amp;}, \\<br/>      \\ szDescription&amp;(WSADESCRIPTION_LEN), szSystemStatus&amp;(WSASYS_STATUS_LEN), \\<br/>      \\ iMaxSockets{l&amp;,h&amp;}, iMaxUdpDg{l&amp;,h&amp;}, lpVendorInfo%}<br/>\u00a0<br/>      DIM addrinfo{ai_flags%, ai_family%, ai_socktype%, ai_protocol%, \\<br/>      \\      ai_addrlen%, lp_ai_canonname%, lp_ai_addr%, lp_ai_next%}<br/>      DIM ipv4info{} = addrinfo{}, ipv6info{} = addrinfo{}<br/>\u00a0<br/>      DIM sockaddr_in{sin_family{l&amp;,h&amp;}, sin_port{l&amp;,h&amp;}, sin_addr&amp;(3), sin_zero&amp;(7)}<br/>      DIM sockaddr_in6{sin6_family{l&amp;,h&amp;}, sin6_port{l&amp;,h&amp;}, sin6_flowinfo%, \\<br/>      \\                sin6_addr&amp;(15), sin6_scope_id%}<br/>\u00a0<br/>      SYS `WSAStartup`, &amp;202, WSAdata{} TO res%<br/>      IF res% ERROR 102, \"WSAStartup failed\"<br/>\u00a0<br/>      addrinfo.ai_family% = AF_INET<br/>      SYS `getaddrinfo`, name$, 0, addrinfo{}, ^ipv4info{}+4 TO res%<br/>      IF res% ERROR 103, \"getaddrinfo failed\"<br/>\u00a0<br/>     \u00a0!(^sockaddr_in{}+4) = ipv4info.lp_ai_addr%<br/>      PRINT \"IPv4 address = \"\u00a0;<br/>      PRINT\u00a0;sockaddr_in.sin_addr&amp;(0) \".\" sockaddr_in.sin_addr&amp;(1) \".\"\u00a0;<br/>      PRINT\u00a0;sockaddr_in.sin_addr&amp;(2) \".\" sockaddr_in.sin_addr&amp;(3)<br/>\u00a0<br/>      addrinfo.ai_family% = AF_INET6<br/>      SYS `getaddrinfo`, name$, 0, addrinfo{}, ^ipv6info{}+4 TO res%<br/>      IF res% ERROR 104, \"getaddrinfo failed\"<br/>\u00a0<br/>     \u00a0!(^sockaddr_in6{}+4) = ipv6info.lp_ai_addr%<br/>      PRINT \"IPv6 address = \"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(0) * 256 + sockaddr_in6.sin6_addr&amp;(1) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(2) * 256 + sockaddr_in6.sin6_addr&amp;(3) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(4) * 256 + sockaddr_in6.sin6_addr&amp;(5) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(6) * 256 + sockaddr_in6.sin6_addr&amp;(7) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(8) * 256 + sockaddr_in6.sin6_addr&amp;(9) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(10) * 256 + sockaddr_in6.sin6_addr&amp;(11) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(12) * 256 + sockaddr_in6.sin6_addr&amp;(13) \":\"\u00a0;<br/>      PRINT\u00a0;~sockaddr_in6.sin6_addr&amp;(14) * 256 + sockaddr_in6.sin6_addr&amp;(15)<br/>\u00a0<br/>      SYS `WSACleanup`<br/>\u00a0</pre>"}, {"lang": "C", "loc": 58, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/socket.h&gt;</span><br/><span class=\"co2\">#include &lt;netdb.h&gt;\t\t/* getaddrinfo, getnameinfo */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t\t/* fprintf, printf */</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;\t\t/* exit */</span><br/><span class=\"co2\">#include &lt;string.h&gt;\t\t/* memset */</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> addrinfo hints<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>res<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>res0<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> error<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> host<span class=\"br0\">[</span>NI_MAXHOST<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Request only one socket type from getaddrinfo(). Else we<br/>\t * would get both SOCK_DGRAM and SOCK_STREAM, and print two<br/>\t * copies of each numeric address.<br/>\t */</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>hints<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> hints<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\thints.<span class=\"me1\">ai_family</span> <span class=\"sy0\">=</span> PF_UNSPEC<span class=\"sy0\">;</span>     <span class=\"coMULTI\">/* IPv4, IPv6, or anything */</span><br/>\thints.<span class=\"me1\">ai_socktype</span> <span class=\"sy0\">=</span> SOCK_DGRAM<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Dummy socket type */</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Use getaddrinfo() to resolve \"www.kame.net\" and allocate<br/>\t * a linked list of addresses.<br/>\t */</span><br/>\terror <span class=\"sy0\">=</span> getaddrinfo<span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>hints<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>res0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> gai_strerror<span class=\"br0\">(</span>error<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Iterate the linked list. */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>res <span class=\"sy0\">=</span> res0<span class=\"sy0\">;</span> res<span class=\"sy0\">;</span> res <span class=\"sy0\">=</span> res<span class=\"sy0\">-&gt;</span>ai_next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Use getnameinfo() to convert res-&gt;ai_addr to a<br/>\t\t * printable string.<br/>\t\t *<br/>\t\t * NI_NUMERICHOST means to present the numeric address<br/>\t\t * without doing reverse DNS to get a domain name.<br/>\t\t */</span><br/>\t\terror <span class=\"sy0\">=</span> getnameinfo<span class=\"br0\">(</span>res<span class=\"sy0\">-&gt;</span>ai_addr<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>ai_addrlen<span class=\"sy0\">,</span><br/>\t\t    host<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> host<span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> NI_NUMERICHOST<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> gai_strerror<span class=\"br0\">(</span>error<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/* Print the numeric address. */</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> host<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Free the linked list. */</span><br/>\tfreeaddrinfo<span class=\"br0\">(</span>res0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include &lt;boost/asio.hpp&gt;<br/>#include &lt;iostream&gt;<br/>\u00a0<br/>int main() {<br/>  int rc {EXIT_SUCCESS};<br/>  try {<br/>    boost::asio::io_service io_service;<br/>    boost::asio::ip::tcp::resolver resolver {io_service};<br/>    auto entries = resolver.resolve({\"www.kame.net\", \"\"});<br/>    boost::asio::ip::tcp::resolver::iterator entries_end;<br/>    for (; entries\u00a0!= entries_end; ++entries) {<br/>      std::cout &lt;&lt; entries-&gt;endpoint().address() &lt;&lt; std::endl;<br/>    }<br/>  }<br/>  catch (std::exception&amp; e) {<br/>    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;<br/>    rc = EXIT_FAILURE;<br/>  }<br/>  return rc;<br/>}<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> LookupDns<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">try</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw5\">System.<span class=\"me1\">Net</span></span><span class=\"sy0\">.</span><span class=\"me1\">IPHostEntry</span> ip <span class=\"sy0\">=</span> <span class=\"kw5\">System.<span class=\"me1\">Net</span></span><span class=\"sy0\">.</span><span class=\"me1\">Dns</span><span class=\"sy0\">.</span><span class=\"me1\">GetHostEntry</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw4\">string</span> result <span class=\"sy0\">=</span> ip<span class=\"sy0\">.</span><span class=\"me1\">AddressList</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ip<span class=\"sy0\">.</span><span class=\"me1\">AddressList</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>                    result <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> ip<span class=\"sy0\">.</span><span class=\"me1\">AddressList</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><span class=\"kw5\">System.<span class=\"me1\">Net</span><span class=\"sy0\">.</span><span class=\"me1\">Sockets</span></span><span class=\"sy0\">.</span><span class=\"me1\">SocketException</span> se<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> se<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Class Utils.Net Extends\u00a0%RegisteredObject<br/>{<br/>\u00a0<br/>ClassMethod QueryDNS(pHost As\u00a0%String, Output ip As\u00a0%List) As\u00a0%Status<br/>{<br/>\t// some initialisation<br/>\tK ip S ip=\"\"<br/>\u00a0<br/>\t// check host operating system and input parameters<br/>\tS OS=$SYSTEM.Version.GetOS()<br/>\tI '$LF($LB(\"Windows\",\"UNIX\"), OS) Q $$$ERROR($$$GeneralError, \"Not implemented.\")<br/>\tI OS=\"Windows\" S cmd=\"nslookup \"_pHost<br/>\tI OS=\"UNIX\" S cmd=\"host \"_pHost<br/>\tI $MATCH(pHost, \"^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}$\")=0 {<br/>\t\tQ $$$ERROR($$$GeneralError, \"Invalid host name.\")<br/>\t}<br/>\u00a0<br/>\t// invoke command<br/>\tS list=##class(Utils.OS).Call(cmd, 0)<br/>\u00a0<br/>\t// iterate through list<br/>\tS ptr=0, skip=1<br/>    WHILE $LISTNEXT(list,ptr,value) {<br/>\t    I value=\"\" CONTINUE<br/>\t    I skip, OS=\"Windows\" S skip=$S(value[\"Name:\": 0, 1: 1) CONTINUE<br/>\t    S ipv4=..GetIPAddr(\"ipv4\", value) I $L(ipv4) S $LI(ip, 4)=ipv4<br/>\t    S ipv6=..GetIPAddr(\"ipv6\", value) I $L(ipv6) S $LI(ip, 6)=ipv6<br/>    }<br/>\u00a0<br/>\t// finished<br/>\tI $LD(ip, 4)=0, $LD(ip, 6)=0 Q $$$ERROR($$$GeneralError, \"Lookup failed.\")<br/>\tQUIT $$$OK<br/>}<br/>\u00a0<br/>ClassMethod GetIPAddr(pType As\u00a0%String = \"\", pValue As\u00a0%String = \"\") As\u00a0%String<br/>{<br/>\tI pType=\"ipv4\" {<br/>\t\tS pos=$LOCATE(pValue, \"((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.|$)){4}\")<br/>\t\tI pos Q $P($E(pValue, pos, *), \" \")<br/>\t}<br/>\tI pType=\"ipv6\" {<br/>\t\tS pos=$LOCATE(pValue, \"([0-9A-Fa-f]{0,4}:){2,7}([0-9A-Fa-f]{1,4}$|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4})\")<br/>\t\tI pos Q $P($E(pValue, pos, *), \" \")<br/>\t}<br/>\tQUIT \"\"<br/>}<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">import</span> java<span class=\"sy0\">.</span>net<span class=\"sy0\">.</span>InetAddress java<span class=\"sy0\">.</span>net<span class=\"sy0\">.</span>Inet4Address java<span class=\"sy0\">.</span>net<span class=\"sy0\">.</span>Inet6Address<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>addr <span class=\"br0\">(</span>InetAddress<span class=\"sy0\">/</span>getAllByName <span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span>instance? Inet4Address addr<span class=\"br0\">)</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"IPv4:\"</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>getHostAddress addr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>instance? Inet6Address addr<span class=\"br0\">)</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"IPv6:\"</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>getHostAddress addr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 12, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># runs under node.js</span><br/>dns = require <span class=\"st0\">'dns'</span><br/>\u00a0<br/>dns.<span class=\"me1\">resolve4</span> <span class=\"st0\">'www.kame.net'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>err<span class=\"sy0\">,</span> addresses<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">'IP4'</span><br/>  console.<span class=\"me1\">log</span> addresses<br/>\u00a0<br/>dns.<span class=\"me1\">resolve6</span> <span class=\"st0\">'www.kame.net'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>err<span class=\"sy0\">,</span> addresses<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">'IP6'</span><br/>  console.<span class=\"me1\">log</span> addresses<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>sb-bsd-sockets<span class=\"sy0\">:</span><span class=\"me1\">host-ent-addresses</span> <br/>      <span class=\"br0\">(</span>sb-bsd-sockets<span class=\"sy0\">:</span><span class=\"me1\">get-host-by-</span><span class=\"kw1\">name</span> <span class=\"st0\">\"www.rosettacode.org\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"nu0\">71</span> <span class=\"nu0\">19</span> <span class=\"nu0\">147</span> <span class=\"nu0\">227</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"socket\"</span><br/>\u00a0<br/><span class=\"re2\">Socket::Addrinfo</span>.<span class=\"me1\">resolve</span><span class=\"br0\">(</span><br/>\t<span class=\"st0\">\"www.kame.net\"</span>,<br/>\t<span class=\"nu0\">80</span>,<br/>\ttype: <span class=\"re2\">Socket::Type::STREAM</span><br/><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>\t<span class=\"kw3\">puts</span> a.<span class=\"me1\">ip_address</span>.<span class=\"me1\">address</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">socket</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> domain <span class=\"sy0\">=</span> <span class=\"st0\">\"www.kame.net\"</span><span class=\"sy0\">,</span> port <span class=\"sy0\">=</span> <span class=\"st0\">\"80\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> getAddressInfo<span class=\"br0\">(</span>domain<span class=\"sy0\">,</span> port<span class=\"sy0\">,</span> AddressFamily.<span class=\"me1\">INET</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"IPv4 address for\u00a0%s:\u00a0%s\"</span><span class=\"sy0\">,</span> domain<span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">address</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    a <span class=\"sy0\">=</span> getAddressInfo<span class=\"br0\">(</span>domain<span class=\"sy0\">,</span> port<span class=\"sy0\">,</span> AddressFamily.<span class=\"me1\">INET6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"IPv6 address for\u00a0%s:\u00a0%s\"</span><span class=\"sy0\">,</span> domain<span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">address</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> DNSQuerying<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  IdGlobal<span class=\"sy1\">,</span> IdStackWindows<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  DOMAIN_NAME <span class=\"sy3\">=</span> <span class=\"st0\">'www.kame.net'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  lStack<span class=\"sy1\">:</span> TIdStackWindows<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lStack <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TIdStackWindows<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>DOMAIN_NAME<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'IPv4: '</span> <span class=\"sy3\">+</span> lStack<span class=\"sy1\">.</span><span class=\"me1\">ResolveHost</span><span class=\"br0\">(</span>DOMAIN_NAME<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'IPv6: '</span> <span class=\"sy3\">+</span> lStack<span class=\"sy1\">.</span><span class=\"me1\">ResolveHost</span><span class=\"br0\">(</span>DOMAIN_NAME<span class=\"sy1\">,</span> Id_IPv6<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Erlang", "loc": 16, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"nu0\">33</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">{</span>hostent<span class=\"sy1\">,</span> <span class=\"re5\">Host</span><span class=\"sy1\">,</span> <span class=\"re5\">Aliases</span><span class=\"sy1\">,</span> <span class=\"re5\">AddrType</span><span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"sy1\">,</span> <span class=\"re5\">AddrList</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/inet.html\"><span class=\"kw5\">inet</span></a>:<span class=\"kw3\">get</span><span class=\"re3\">hostbyname</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy1\">,</span> inet<span class=\"br0\">)</span><span class=\"sy1\">.</span> <br/><span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"br0\">{</span>hostent<span class=\"sy1\">,</span><span class=\"st0\">\"orange.kame.net\"</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>             inet<span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">203</span><span class=\"sy1\">,</span><span class=\"nu0\">178</span><span class=\"sy1\">,</span><span class=\"nu0\">141</span><span class=\"sy1\">,</span><span class=\"nu0\">194</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"nu0\">34</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">[</span>inet_parse:<span class=\"re3\">ntoa</span><span class=\"br0\">(</span><span class=\"re5\">Addr</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Addr</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">AddrList</span><span class=\"br0\">]</span><span class=\"sy1\">.</span>                                                         <br/><span class=\"br0\">[</span><span class=\"st0\">\"203.178.141.194\"</span><span class=\"br0\">]</span><br/><span class=\"nu0\">35</span><span class=\"sy3\">&gt;</span> <span class=\"re3\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                                                                                 <br/>ok<br/><span class=\"nu0\">36</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">{</span>hostent<span class=\"sy1\">,</span> <span class=\"re5\">Host</span><span class=\"sy1\">,</span> <span class=\"re5\">Aliases</span><span class=\"sy1\">,</span> <span class=\"re5\">AddrType</span><span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"sy1\">,</span> <span class=\"re5\">AddrList</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/inet.html\"><span class=\"kw5\">inet</span></a>:<span class=\"kw3\">get</span><span class=\"re3\">hostbyname</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy1\">,</span> inet6<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"br0\">{</span>hostent<span class=\"sy1\">,</span><span class=\"st0\">\"orange.kame.net\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>inet6<span class=\"sy1\">,</span><span class=\"nu0\">16</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">8193</span><span class=\"sy1\">,</span><span class=\"nu0\">512</span><span class=\"sy1\">,</span><span class=\"nu0\">3583</span><span class=\"sy1\">,</span><span class=\"nu0\">65521</span><span class=\"sy1\">,</span><span class=\"nu0\">534</span><span class=\"sy1\">,</span><span class=\"nu0\">16127</span><span class=\"sy1\">,</span><span class=\"nu0\">65201</span><span class=\"sy1\">,</span><span class=\"nu0\">17623</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"nu0\">37</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">[</span>inet_parse:<span class=\"re3\">ntoa</span><span class=\"br0\">(</span><span class=\"re5\">Addr</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Addr</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">AddrList</span><span class=\"br0\">]</span><span class=\"sy1\">.</span>                                                          <br/><span class=\"br0\">[</span><span class=\"st0\">\"2001:200:DFF:FFF1:216:3EFF:FEB1:44D7\"</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USING: dns io kernel sequences\u00a0;<br/>\u00a0<br/>\"www.kame.net\" [ dns-A-query ] [ dns-AAAA-query ] bi<br/>[ message&gt;names second print ] <a class=\"__cf_email__\" data-cfemail=\"9dfff4dd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Go", "loc": 14, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"net\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> addrs<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> net<span class=\"sy3\">.</span>LookupHost<span class=\"sy1\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy1\">);</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>addrs<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> addresses <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=InetAddress&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">InetAddress</span></a>.<span class=\"me1\">getAllByName</span><span class=\"br0\">(</span><span class=\"st0\">'www.kame.net'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"IPv4: ${addresses.find { it instanceof Inet4Address }?.hostAddress}\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"IPv6: ${addresses.find { it instanceof Inet6Address }?.hostAddress}\"</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Network<span class=\"sy0\">.</span>Socket<br/>\u00a0<br/>getWebAddresses <span class=\"sy0\">::</span> HostName <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span>SockAddr<span class=\"br0\">]</span><br/>getWebAddresses host <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  results <span class=\"sy0\">&lt;-</span> getAddrInfo <span class=\"br0\">(</span>Just defaultHints<span class=\"br0\">)</span> <span class=\"br0\">(</span>Just host<span class=\"br0\">)</span> <span class=\"br0\">(</span>Just <span class=\"st0\">\"http\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span> addrAddress a <span class=\"sy0\">|</span> a <span class=\"sy0\">&lt;-</span> results<span class=\"sy0\">,</span> addrSocketType a <span class=\"sy0\">==</span> Stream <span class=\"br0\">]</span><br/>\u00a0<br/>showIPs <span class=\"sy0\">::</span> HostName <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showIPs host <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"IP addresses for \"</span> <span class=\"sy0\">++</span> host <span class=\"sy0\">++</span> <span class=\"st0\">\":\"</span><br/>  addresses <span class=\"sy0\">&lt;-</span> getWebAddresses host<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> addresses<br/>\u00a0<br/>main <span class=\"sy0\">=</span> showIPs <span class=\"st0\">\"www.kame.net\"</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"unicon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   host <span class=\"sy0\">:=</span> gethost<span class=\"br0\">(</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"can't translate\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>host<span class=\"sy0\">.</span><span class=\"kw4\">name</span><span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> host<span class=\"sy0\">.</span><span class=\"me1\">addresses</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">2</span>!:<span class=\"nu0\">0</span><span class=\"st_h\">'dig -4 +short www.kame.net'</span><br/>orange.kame.net.<br/>203.178.<span class=\"nu0\">141.194</span><br/>\u00a0<br/>   <span class=\"nu0\">2</span>!:<span class=\"nu0\">0</span><span class=\"st_h\">'dig -6 +short www.kame.net'</span><br/>|interface error<br/>|       <span class=\"nu0\">2</span>!:<span class=\"nu0\">0</span><span class=\"st_h\">'dig -6 +short www.kame.net'</span></pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.net.InetAddress</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.Inet4Address</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.Inet6Address</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.UnknownHostException</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> DnsQuery <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> ipAddr <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a>.<span class=\"me1\">getAllByName</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ipAddr.<span class=\"me1\">length</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ipAddr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Inet4Address<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"IPv4\u00a0: \"</span> <span class=\"sy0\">+</span> ipAddr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">getHostAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ipAddr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Inet6Address<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"IPv6\u00a0: \"</span> <span class=\"sy0\">+</span> ipAddr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">getHostAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> uhe<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"unknown host\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">InetAddress</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">Inet4Address</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">Inet6Address</span><br/>\u00a0<br/>fun showIPAddresses<span class=\"br0\">(</span>host<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ipas <span class=\"sy0\">=</span> InetAddress.<span class=\"me1\">getAllByName</span><span class=\"br0\">(</span>host<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"The IP address(es) for '$host' is/are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>ipa in ipas<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span>when <span class=\"br0\">(</span>ipa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                is Inet4Address -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"  ipv4\u00a0: \"</span><br/>                is Inet6Address -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"  ipv6\u00a0: \"</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>            -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"  ipv?\u00a0: \"</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span>ipa.<span class=\"me1\">hostAddress</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ex<span class=\"sy0\">:</span> Exception<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>ex.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    showIPAddresses<span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">dns_lookup('www.kame.net', -type='A')</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> socket <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'socket'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> ip_tbl <span class=\"sy0\">=</span> socket<span class=\"sy0\">.</span>dns<span class=\"sy0\">.</span>getaddrinfo<span class=\"br0\">(</span><span class=\"st0\">'www.kame.net'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>ip_tbl<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">'%s:\u00a0%s<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">,</span> v<span class=\"sy0\">.</span>family<span class=\"sy0\">,</span> v<span class=\"sy0\">.</span>addr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 15, "block": "<pre class=\"netrexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>ir = InetAddress<br/>addresses = InetAddress<span class=\"br0\">[</span><span class=\"br0\">]</span> InetAddress.<span class=\"me0\">getAllByName</span><span class=\"br0\">(</span><span class=\"st0\">'www.kame.net'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">loop</span> ir over addresses<br/>  <span class=\"kw1\">if</span> ir <span class=\"sy0\">&lt;</span>= Inet4Address <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'IPv4\u00a0:'</span> ir.<span class=\"me0\">getHostAddress</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> ir <span class=\"sy0\">&lt;</span>= Inet6Address <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'IPv6\u00a0:'</span> ir.<span class=\"me0\">getHostAddress</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span> ir<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 14, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>dnsLookup site , ipv<span class=\"br0\">)</span><br/>    <span class=\"co1\">;; captures current IPv mode</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#set\"><span class=\"kw1\">set</span></a> <span class=\"re5\">'ipv</span> <span class=\"br0\">(</span>net<span class=\"sy1\">-</span>ipv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; IPv mode agnostic lookup</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"IPv4: \"</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#begin\"><span class=\"kw1\">begin</span></a> <span class=\"br0\">(</span>net<span class=\"sy1\">-</span>ipv <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#net-lookup\"><span class=\"kw1\">net-lookup</span></a> site<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"IPv6: \"</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#begin\"><span class=\"kw1\">begin</span></a> <span class=\"br0\">(</span>net<span class=\"sy1\">-</span>ipv <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#net-lookup\"><span class=\"kw1\">net-lookup</span></a> site<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; returns newLISP to previous IPv mode</span><br/>    <span class=\"br0\">(</span>net<span class=\"sy1\">-</span>ipv ipv<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>dnsLookup <span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 18, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> DNSQuery;<br/><span class=\"kw1\">IMPORT</span><br/>  IO<span class=\"sy0\">:</span>Address<span class=\"sy0\">,</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"br0\">(</span><span class=\"br0\">)</span> RAISES Address.<span class=\"me1\">UnknownHostException</span>;<br/><span class=\"kw1\">VAR</span><br/>  ip<span class=\"sy0\">:</span> Address.<span class=\"me1\">Inet</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  ip <span class=\"sy0\">:=</span> Address.<span class=\"me1\">GetByName</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>ip.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Do;<br/><span class=\"kw1\">END</span> DNSQuery.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 10, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> System.IO.Net<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Rosetta <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    resoloved <span class=\"sy0\">:=</span> TCPSocket<span class=\"sy0\">-&gt;</span><span class=\"me1\">Resolve</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> resoloved<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      resoloved<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 20, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> dns_query <span class=\"re1\">~host</span> <span class=\"re1\">~ai_family</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> opts <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>AI_FAMILY ai_family<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>AI_SOCKTYPE <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>SOCK_DGRAM<span class=\"sy0\">;</span><br/>  <span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> addr_infos <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>getaddrinfo host <span class=\"st0\">\"\"</span> opts <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">match</span> addr_infos <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"dns_query\"</span><br/>  <span class=\"sy0\">|</span> ai <span class=\"sy0\">::</span> _ <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">match</span> ai<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>ai_addr <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>ADDR_INET <span class=\"br0\">(</span>addr, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>string_of_inet_addr addr<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>ADDR_UNIX addr <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"addr_unix\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> host <span class=\"sy0\">=</span> <span class=\"st0\">\"www.kame.net\"</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"primary addresses of\u00a0%s are:\\n\"</span> host<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\" IPv4 address:\u00a0%s\\n\"</span> <span class=\"br0\">(</span>dns_query host <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>PF_INET<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\" IPv6 address:\u00a0%s\\n\"</span> <span class=\"br0\">(</span>dns_query host <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>PF_INET6<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/require.html\"><span class=\"kw3\">require</span></a> <span class=\"nu0\">5.014</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Older versions can't resolve IPv6 with just core Socket module</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Socket <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>getaddrinfo getnameinfo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$err</span><span class=\"sy0\">,</span> <span class=\"re0\">@res</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> getaddrinfo<span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">{</span> protocol<span class=\"sy0\">=&gt;</span>Socket<span class=\"sy0\">::</span><span class=\"me2\">IPPROTO_TCP</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"getaddrinfo error: $err\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$err</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> getnameinfo<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>addr<span class=\"br0\">}</span><span class=\"sy0\">,</span> Socket<span class=\"sy0\">::</span><span class=\"me2\">NI_NUMERICHOST</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">@res</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Net<span class=\"sy0\">::</span><span class=\"me2\">DNS</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$resolver</span> <span class=\"sy0\">=</span> Net<span class=\"sy0\">::</span><span class=\"me2\">DNS</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'8.8.8.8'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$ip4</span> <span class=\"sy0\">=</span> <span class=\"re0\">$resolver</span><span class=\"sy0\">.</span><span class=\"me1\">lookup</span><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span>    <span class=\"st_h\">'orange.kame.net'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$ip6</span> <span class=\"sy0\">=</span> <span class=\"re0\">$resolver</span><span class=\"sy0\">.</span><span class=\"me1\">lookup</span><span class=\"br0\">(</span><span class=\"st_h\">'AAAA'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'orange.kame.net'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$ip4</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">octets</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">:</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$ip6</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">octets</span><span class=\"sy0\">.</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%.2X\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">:</span> <span class=\"st_h\">':'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 6, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>  <span class=\"re0\">$ipv4_record</span> <span class=\"sy0\">=</span> dns_get_record<span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy0\">,</span>DNS_A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$ipv6_record</span> <span class=\"sy0\">=</span> dns_get_record<span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"sy0\">,</span>DNS_AAAA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"ipv4: \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$ipv4_record</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"ip\"</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"ipv6: \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$ipv6_record</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"ipv6\"</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(make<br/>   (in '(host \"www.kame.net\")<br/>      (while (from \"address \")<br/>         (link (till \"^J\" T)) ) ) )</pre>"}, {"lang": "Pike", "loc": 4, "block": "<pre class=\"pike highlighted_source\">\u00a0<br/>&gt; array ips <span class=\"sy0\">=</span> Protocols.<span class=\"me1\">DNS</span>.<span class=\"me1\">gethostbyname</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; write<span class=\"br0\">(</span>ips<span class=\"sy0\">*</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$DNS</span> <span class=\"sy0\">=</span> Resolve<span class=\"sy0\">-</span>DnsName <span class=\"kw5\">-Name</span> www.kame.net<br/><span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"IPv4:\"</span> <span class=\"re0\">$DNS</span>.IP4Address <span class=\"st0\">\"<span class=\"es0\">`n</span>IPv6:\"</span> <span class=\"re0\">$DNS</span>.IP6Address</pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">socket</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> ips <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>i<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw3\">socket</span>.<span class=\"me1\">getaddrinfo</span><span class=\"br0\">(</span><span class=\"st0\">'www.kame.net'</span><span class=\"sy0\">,</span> <span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> ip <span class=\"kw1\">in</span> ips: <span class=\"kw1\">print</span> ip<br/>...<br/><span class=\"nu0\">2001</span>:<span class=\"nu0\">200</span>:dff:fff1:<span class=\"nu0\">216</span>:3eff:feb1:44d7<br/>203.178.141.194</pre>"}, {"lang": "R", "loc": 49, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;Rcpp.h&gt;</span><br/><span class=\"co2\">#include &lt;arpa/inet.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/socket.h&gt;</span><br/><span class=\"co2\">#include &lt;netdb.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> Rcpp <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// [[Rcpp::export]]</span><br/>CharacterVector getNameInfo<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> fqdn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw4\">struct</span> addrinfo hints, <span class=\"sy2\">*</span>res, <span class=\"sy2\">*</span>res0<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> error<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">char</span> host<span class=\"br0\">[</span>NI_MAXHOST<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">memset</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>hints, <span class=\"nu0\">0</span>, <span class=\"kw3\">sizeof</span> hints<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\thints.<span class=\"me1\">ai_family</span> <span class=\"sy1\">=</span> PF_UNSPEC<span class=\"sy4\">;</span><br/>\thints.<span class=\"me1\">ai_socktype</span> <span class=\"sy1\">=</span> SOCK_DGRAM<span class=\"sy4\">;</span><br/>\u00a0<br/>\terror <span class=\"sy1\">=</span> getaddrinfo<span class=\"br0\">(</span>fqdn.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">NULL</span>, <span class=\"sy3\">&amp;</span>hints, <span class=\"sy3\">&amp;</span>res0<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>NA_STRING<span class=\"br0\">)</span><span class=\"sy4\">;</span>\t<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>res <span class=\"sy1\">=</span> res0<span class=\"sy4\">;</span> res<span class=\"sy4\">;</span> res <span class=\"sy1\">=</span> res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  \terror <span class=\"sy1\">=</span> getnameinfo<span class=\"br0\">(</span>res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_addr, res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_addrlen,<br/>\t\t    host, <span class=\"kw3\">sizeof</span> host, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, NI_NUMERICHOST<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span> i<span class=\"sy2\">++</span> <span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>  CharacterVector results<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\u00a0<br/>  i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>res <span class=\"sy1\">=</span> res0<span class=\"sy4\">;</span> res<span class=\"sy4\">;</span> res <span class=\"sy1\">=</span> res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\terror <span class=\"sy1\">=</span> getnameinfo<span class=\"br0\">(</span>res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_addr, res<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>ai_addrlen,<br/>\t\t    host, <span class=\"kw3\">sizeof</span> host, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, NI_NUMERICHOST<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span> results<span class=\"br0\">[</span>i<span class=\"sy2\">++</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> host <span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>  freeaddrinfo<span class=\"br0\">(</span>res0<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><span class=\"br0\">(</span>results<span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require net/dns)<br/>(dns-get-address \"8.8.8.8\" \"www.kame.net\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays  IPV4 and IPV6  addresses for a supplied  domain name.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> tar <span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*obtain optional domain name from C.L.*/</span><br/><span class=\"kw1\">if</span> tar==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> tar= <span class=\"st0\">'www.kame.net'</span>   <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>tFID    = <span class=\"st0\">'\\TEMP\\DNSQUERY.$$$'</span>         <span class=\"coMULTI\">/*define temp file to store IPV4 output*/</span><br/>pingOpts= <span class=\"st0\">'-l 0    -n 1    -w 0'</span>   tar <span class=\"coMULTI\">/*define options for the PING command. */</span><br/><span class=\"kw1\">trace</span> <span class=\"kw2\">off</span>                              <span class=\"coMULTI\">/*don't show PING none\u2500zero return code*/</span><br/>                                       <span class=\"coMULTI\">/* [\u2193]  perform 2 versions of PING cmd.*/</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">4</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">6</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>                   <span class=\"coMULTI\">/*handle  IPV4  and  IPV6  addresses.  */</span><br/>  <span class=\"st0\">'PING'</span>  <span class=\"br0\">(</span>-j<span class=\"br0\">)</span>  pingOpts  <span class=\"st0\">\"&gt;\"</span>   tFID   <span class=\"coMULTI\">/*restrict PING's output to a minimum. */</span><br/>  q=<span class=\"kw6\">charin</span><span class=\"br0\">(</span>tFID, <span class=\"nu0\">1</span>, <span class=\"nu0\">999</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*read the output file from  PING  cmd.*/</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  q   <span class=\"st0\">'['</span>   ipaddr    <span class=\"st0\">\"]\"</span>   <span class=\"coMULTI\">/*parse  IP  address from the output.  */</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'IPV'</span>j <span class=\"st0\">\"for domain name  \"</span>  tar  <span class=\"st0\">'  is  '</span>  ipaddr        <span class=\"coMULTI\">/*IPVx address.*/</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> tFID                    <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u252c\u2500\u25c4  needed by some REXXes to    */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                          <span class=\"coMULTI\">/*    \u2514\u2500\u25c4  force (TEMP) file integrity.*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"st0\">'ERASE'</span>  tFID                          <span class=\"coMULTI\">/*clean up (delete) the temporary file.*/</span></pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"kw3\">require</span> <span class=\"st0\">'socket'</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:002:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> Addrinfo.<span class=\"me1\">getaddrinfo</span><span class=\"br0\">(</span><span class=\"st0\">\"www.kame.net\"</span>, <span class=\"kw2\">nil</span>, <span class=\"kw2\">nil</span>, <span class=\"re3\">:DGRAM</span><span class=\"br0\">)</span> \\<br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:003:<span class=\"nu0\">0</span><span class=\"sy0\">*</span>   .<span class=\"me1\">map</span>! <span class=\"br0\">{</span> <span class=\"sy0\">|</span>ai<span class=\"sy0\">|</span> ai.<span class=\"me1\">ip_address</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"203.178.141.194\"</span>, <span class=\"st0\">\"2001:200:dff:fff1:216:3eff:feb1:44d7\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">use std::net::ToSocketAddrs;<br/>\u00a0<br/>fn main() {<br/>    let host = \"www.kame.net\";<br/>    // Ideally, we would want to use std::net::lookup_host to resolve the host ips,<br/>    // but at time of writing this, it is still unstable. Fortunately, we can<br/>    // still resolve using the ToSocketAddrs trait, but we need to add a port,<br/>    // so we use the dummy port 0.<br/>    let host_port = (host, 0);<br/>    let ip_iter = host_port.to_socket_addrs().unwrap();<br/>\u00a0<br/>\u00a0<br/>    for ip_port in ip_iter {<br/>        println!(\"{}\", ip_port.ip());<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"br0\">{</span>Inet4Address, Inet6Address, InetAddress<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> DnsQuery <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  InetAddress.<span class=\"me1\">getAllByName</span><span class=\"br0\">(</span><span class=\"st0\">\"google.com\"</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x<span class=\"sy0\">:</span> Inet4Address <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"IPv4\u00a0: ${x.getHostAddress}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x<span class=\"sy0\">:</span> Inet6Address <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"IPv6\u00a0: ${x.getHostAddress}\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; Query DNS</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> n <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>hostent:addr<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>gethost <span class=\"st0\">\"www.kame.net\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Display address as IPv4 and IPv6</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>inet<span class=\"sy0\">-</span>ntoa n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>inet<span class=\"sy0\">-</span>ntop AF_INET n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>inet<span class=\"sy0\">-</span>ntop AF_INET6 n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"socket.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(numericAddress(inetSocketAddress(\"www.kame.net\", 1024)));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">var <span class=\"br0\">(</span>err, <span class=\"sy0\">*</span>res<span class=\"br0\">)</span> = Socket.<span class=\"me1\">getaddrinfo</span><span class=\"br0\">(</span><br/>        <span class=\"st0\">'www.kame.net'</span>, <span class=\"nu0\">0</span>,<br/>        <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>protocol <span class=\"sy0\">=&gt;</span> Socket.<span class=\"me1\">IPPROTO_TCP</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span>;<br/>err <span class=\"sy0\">&amp;&amp;</span> die err;<br/>res.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>z<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">[</span>Socket.<span class=\"me1\">getnameinfo</span><span class=\"br0\">(</span>z<span class=\"br0\">{</span>:addr<span class=\"br0\">}</span>, Socket.<span class=\"me1\">NI_NUMERICHOST</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require udp<span class=\"sy0\">;</span>  <span class=\"co1\"># Query by UDP more widely supported, but requires external package</span><br/><span class=\"kw2\">package</span> require dns<br/>\u00a0<br/><span class=\"kw1\">set</span> host <span class=\"st0\">\"www.kame.net\"</span><br/><span class=\"kw1\">set</span> v4 <span class=\"br0\">[</span>dns::<span class=\"me1\">resolve</span> <span class=\"re0\">$host</span> -type A<span class=\"br0\">]</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Specifically get IPv4 address</span><br/><span class=\"kw1\">set</span> v6 <span class=\"br0\">[</span>dns::<span class=\"me1\">resolve</span> <span class=\"re0\">$host</span> -type AAAA<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># Specifically get IPv6 address</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dns::<span class=\"me1\">status</span> <span class=\"re0\">$v4</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"connect\"</span> || <span class=\"br0\">[</span>dns::<span class=\"me1\">status</span> <span class=\"re0\">$v6</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"connect\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    update<span class=\"sy0\">;</span> <span class=\"co1\"># Let queries complete</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"primary addresses of $host are:<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>IPv4\u00bb [dns::address $v4]<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>IPv6\u00bb [dns::address $v6]\"</span></pre>"}, {"lang": "VBScript", "loc": 18, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> dns_query(url,ver)<br/>\t<span class=\"kw4\">Set</span> r = <span class=\"kw2\">New</span> RegExp<br/>\tr.Pattern = <span class=\"st0\">\"Pinging.+?\\[(.+?)\\].+\"</span><br/>\t<span class=\"kw4\">Set</span> objshell = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"WScript.Shell\"</span>)<br/>\t<span class=\"kw4\">Set</span> objexec = objshell.Exec(<span class=\"st0\">\"%comspec% /c \"</span> &amp; <span class=\"st0\">\"ping -\"</span> &amp; ver &amp; <span class=\"st0\">\" \"</span> &amp; url)<br/>\tWScript.StdOut.WriteLine <span class=\"st0\">\"URL: \"</span> &amp; url<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> objexec.StdOut.AtEndOfStream<br/>\t\t<span class=\"kw4\">line</span> = objexec.StdOut.ReadLine<br/>\t\t<span class=\"kw3\">If</span> r.Test(<span class=\"kw4\">line</span>) <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.WriteLine <span class=\"st0\">\"IP Version \"</span> &amp;_<br/>\t\t\t\tver &amp; <span class=\"st0\">\": \"</span> &amp; r.Replace(<span class=\"kw4\">line</span>,<span class=\"st0\">\"$1\"</span>)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Call</span> dns_query(WScript.Arguments(0),WScript.Arguments(1))<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">zkl: Network.TCPClientSocket.addrInfo(\"www.kame.net\")<br/>L(\"orange.kame.net\",L(\"203.178.141.194\",\"2001:200:dff:fff1:216:3eff:feb1:44d7\"))</pre>"}]}