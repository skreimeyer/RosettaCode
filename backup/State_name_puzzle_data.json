{"task": "State_name_puzzle", "blocks": [{"lang": "Bracmat", "loc": 91, "block": "<pre class=\"text highlighted_source\">(     Alabama<br/>      Alaska<br/>      Arizona<br/>      Arkansas<br/>      California<br/>      Colorado<br/>      Connecticut<br/>      Delaware<br/>      Florida<br/>      Georgia<br/>      Hawaii<br/>      Idaho<br/>      Illinois<br/>      Indiana<br/>      Iowa<br/>      Kansas<br/>      Kentucky<br/>      Louisiana<br/>      Maine<br/>      Maryland<br/>      Massachusetts<br/>      Michigan<br/>      Minnesota<br/>      Mississippi<br/>      Missouri<br/>      Montana<br/>      Nebraska<br/>      Nevada<br/>      \"New Hampshire\"<br/>      \"New Jersey\"<br/>      \"New Mexico\"<br/>      \"New York\"<br/>      \"North Carolina\"<br/>      \"North Dakota\"<br/>      Ohio<br/>      Oklahoma<br/>      Oregon<br/>      Pennsylvania<br/>      \"Rhode Island\"<br/>      \"South Carolina\"<br/>      \"South Dakota\"<br/>      Tennessee<br/>      Texas<br/>      Utah<br/>      Vermont<br/>      Virginia<br/>      Washington<br/>      \"West Virginia\"<br/>      Wisconsin<br/>      Wyoming<br/> \u00a0:\u00a0?states<br/>&amp; \"New Kory\" \"Wen Kory\" \"York New\" \"Kory New\" \"New Kory\":?extrastates<br/>&amp; ( \"State name puzzle\"<br/>  =     allStates State state statechars char<br/>      , A Z S1 S2 S3 S4 L1 L2 L3 L4 L12<br/>    .   0:?allStates<br/>      &amp;   whl<br/>        ' (\u00a0!arg:%?State\u00a0?arg<br/>          &amp; low$!State:?state<br/>          &amp; 0:?statechars<br/>          &amp;   whl<br/>            ' ( @(!state:? (%@:~\" \":?char)\u00a0?state)<br/>              &amp;\u00a0!char+!statechars:?statechars<br/>              )<br/>          &amp; (!State.!statechars)+!allStates:?allStates<br/>          )<br/>      &amp; (  \u00a0!allStates<br/>         \u00a0:  \u00a0?<br/>            +\u00a0?*(?S1.?L1)<br/>            +\u00a0?A<br/>            +\u00a0?*(?S2.?L2)<br/>            + (\u00a0?Z<br/>              &amp;\u00a0!L1+!L2:?L12<br/>              &amp;  \u00a0!A+!Z<br/>               \u00a0:  \u00a0?<br/>                  +\u00a0?*(?S3.?L3&amp;!L12+-1*!L3:?L4)<br/>                  +\u00a0?<br/>                  +  \u00a0?<br/>                    * (\u00a0?S4<br/>                      .  \u00a0!L4<br/>                        &amp; out$(!S1 \"+\"\u00a0!S2 \"=\"\u00a0!S3 \"+\"\u00a0!S4)<br/>                        &amp; ~<br/>                      )<br/>                  +\u00a0?<br/>              )<br/>        | out$\"No more solutions\"<br/>        )<br/>  )<br/>&amp; \"State name puzzle\"$!states<br/>&amp; \"State name puzzle\"$(!states\u00a0!extrastates)<br/>);</pre>"}, {"lang": "C", "loc": 106, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define USE_FAKES 1</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>states<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/><span class=\"co2\">#if USE_FAKES</span><br/>\t<span class=\"st0\">\"New Kory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wen Kory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"York New\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kory New\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Kory\"</span><span class=\"sy0\">,</span><br/><span class=\"co2\">#endif</span><br/>\t<span class=\"st0\">\"Alabama\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alaska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arizona\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arkansas\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"California\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Colorado\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Connecticut\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Delaware\"</span><span class=\"sy0\">,</span>    <br/>\t<span class=\"st0\">\"Florida\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Georgia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hawaii\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Idaho\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Illinois\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Indiana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Iowa\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Kansas\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kentucky\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Louisiana\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Maine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Maryland\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Massachusetts\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Michigan\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Minnesota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mississippi\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Missouri\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Montana\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Nebraska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Nevada\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Hampshire\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Jersey\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"New Mexico\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New York\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Carolina\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Dakota\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Ohio\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Oklahoma\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Oregon\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Pennsylvania\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rhode Island\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"South Carolina\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"South Dakota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tennessee\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Texas\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Utah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Vermont\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Virginia\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"Washington\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"West Virginia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wisconsin\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wyoming\"</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> n_states <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>states<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>states<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c<span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> letters<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> count_letters<span class=\"br0\">(</span>letters <span class=\"sy0\">*</span>l<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>l<span class=\"sy0\">-&gt;</span>name<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> l<span class=\"sy0\">-&gt;</span>name<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span> l<span class=\"sy0\">-&gt;</span>name<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span> l<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"st0\">'a'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> l<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> lcmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>aa<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>bb<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> letters <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> aa<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> bb<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span>      <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> b<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> scmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> no_dup<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>states<span class=\"sy0\">,</span> n_states<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> scmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n_states<span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> n_states <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>states<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> states<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> n_states<span class=\"br0\">)</span> states<span class=\"br0\">[</span><span class=\"sy0\">++</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> states<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tn_states <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> find_mix<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\tletters <span class=\"sy0\">*</span>l<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>\tno_dup<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tn <span class=\"sy0\">=</span> n_states <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n_states <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\tp <span class=\"sy0\">=</span> l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n_states<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n_states<span class=\"sy0\">;</span> j<span class=\"sy0\">++,</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcount_letters<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> states<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tcount_letters<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> states<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>l<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"sy0\">,</span> lcmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>lcmp<span class=\"br0\">(</span>l <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> l <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"sy0\">||</span> l<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"sy0\">||</span> l<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s +\u00a0%s =&gt;\u00a0%s +\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t\t\tl<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> l<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tfind_mix<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 99, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;array&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/>T unique<span class=\"br0\">(</span>T<span class=\"sy3\">&amp;&amp;</span> src<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    T retval<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>src<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>retval.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, retval.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">less</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy4\">::</span><span class=\"me2\">value_type</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    retval.<span class=\"me1\">erase</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">unique</span><span class=\"br0\">(</span>retval.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, retval.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, retval.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> retval<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define USE_FAKES 1</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> states <span class=\"sy1\">=</span> unique<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/><span class=\"co2\">#if USE_FAKES</span><br/>    <span class=\"st0\">\"Slender Dragon\"</span>, <span class=\"st0\">\"Abalamara\"</span>,<br/><span class=\"co2\">#endif</span><br/>    <span class=\"st0\">\"Alabama\"</span>, <span class=\"st0\">\"Alaska\"</span>, <span class=\"st0\">\"Arizona\"</span>, <span class=\"st0\">\"Arkansas\"</span>,<br/>    <span class=\"st0\">\"California\"</span>, <span class=\"st0\">\"Colorado\"</span>, <span class=\"st0\">\"Connecticut\"</span>,<br/>    <span class=\"st0\">\"Delaware\"</span>,<br/>    <span class=\"st0\">\"Florida\"</span>, <span class=\"st0\">\"Georgia\"</span>, <span class=\"st0\">\"Hawaii\"</span>,<br/>    <span class=\"st0\">\"Idaho\"</span>, <span class=\"st0\">\"Illinois\"</span>, <span class=\"st0\">\"Indiana\"</span>, <span class=\"st0\">\"Iowa\"</span>,<br/>    <span class=\"st0\">\"Kansas\"</span>, <span class=\"st0\">\"Kentucky\"</span>, <span class=\"st0\">\"Louisiana\"</span>,<br/>    <span class=\"st0\">\"Maine\"</span>, <span class=\"st0\">\"Maryland\"</span>, <span class=\"st0\">\"Massachusetts\"</span>, <span class=\"st0\">\"Michigan\"</span>,<br/>    <span class=\"st0\">\"Minnesota\"</span>, <span class=\"st0\">\"Mississippi\"</span>, <span class=\"st0\">\"Missouri\"</span>, <span class=\"st0\">\"Montana\"</span>,<br/>    <span class=\"st0\">\"Nebraska\"</span>, <span class=\"st0\">\"Nevada\"</span>, <span class=\"st0\">\"New Hampshire\"</span>, <span class=\"st0\">\"New Jersey\"</span>,<br/>    <span class=\"st0\">\"New Mexico\"</span>, <span class=\"st0\">\"New York\"</span>, <span class=\"st0\">\"North Carolina\"</span>, <span class=\"st0\">\"North Dakota\"</span>,<br/>    <span class=\"st0\">\"Ohio\"</span>, <span class=\"st0\">\"Oklahoma\"</span>, <span class=\"st0\">\"Oregon\"</span>,<br/>    <span class=\"st0\">\"Pennsylvania\"</span>, <span class=\"st0\">\"Rhode Island\"</span>,<br/>    <span class=\"st0\">\"South Carolina\"</span>, <span class=\"st0\">\"South Dakota\"</span>, <span class=\"st0\">\"Tennessee\"</span>, <span class=\"st0\">\"Texas\"</span>,<br/>    <span class=\"st0\">\"Utah\"</span>, <span class=\"st0\">\"Vermont\"</span>, <span class=\"st0\">\"Virginia\"</span>,<br/>    <span class=\"st0\">\"Washington\"</span>, <span class=\"st0\">\"West Virginia\"</span>, <span class=\"st0\">\"Wisconsin\"</span>, <span class=\"st0\">\"Wyoming\"</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> counted_pair<br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> name<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">array</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"nu0\">26</span><span class=\"sy1\">&gt;</span> count<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> count_characters<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy4\">:</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span> count<span class=\"br0\">[</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'a'</span><span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> count<span class=\"br0\">[</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'A'</span><span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    counted_pair<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> s1, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> s2<span class=\"br0\">)</span><br/>        <span class=\"sy4\">:</span> name<span class=\"br0\">(</span>s1 <span class=\"sy2\">+</span> <span class=\"st0\">\" + \"</span> <span class=\"sy2\">+</span> s2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        count_characters<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        count_characters<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> operator<span class=\"sy1\">&lt;</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> counted_pair<span class=\"sy3\">&amp;</span> lhs, <span class=\"kw4\">const</span> counted_pair<span class=\"sy3\">&amp;</span> rhs<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> lhs_size <span class=\"sy1\">=</span> lhs.<span class=\"me1\">name</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> rhs_size <span class=\"sy1\">=</span> rhs.<span class=\"me1\">name</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> lhs_size <span class=\"sy1\">==</span> rhs_size<br/>            <span class=\"sy4\">?</span> std<span class=\"sy4\">::</span><span class=\"me2\">lexicographical_compare</span><span class=\"br0\">(</span>lhs.<span class=\"me1\">count</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                           lhs.<span class=\"me1\">count</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                           rhs.<span class=\"me1\">count</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                           rhs.<span class=\"me1\">count</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"sy4\">:</span> lhs_size <span class=\"sy1\">&lt;</span> rhs_size<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> operator<span class=\"sy1\">==</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> counted_pair<span class=\"sy3\">&amp;</span> lhs, <span class=\"kw4\">const</span> counted_pair<span class=\"sy3\">&amp;</span> rhs<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> lhs.<span class=\"me1\">name</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> rhs.<span class=\"me1\">name</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> lhs.<span class=\"me1\">count</span> <span class=\"sy1\">==</span> rhs.<span class=\"me1\">count</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n_states <span class=\"sy1\">=</span> states.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>counted_pair<span class=\"sy1\">&gt;</span> pairs<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n_states<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> i<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pairs.<span class=\"me1\">emplace_back</span><span class=\"br0\">(</span>counted_pair<span class=\"br0\">(</span>states<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, states<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>pairs.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, pairs.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> start <span class=\"sy1\">=</span> pairs.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> match <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">adjacent_find</span><span class=\"br0\">(</span>start, pairs.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>match <span class=\"sy1\">==</span> pairs.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">auto</span> next <span class=\"sy1\">=</span> match <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> match<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" =&gt; \"</span> <span class=\"sy1\">&lt;&lt;</span> next<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        start <span class=\"sy1\">=</span> next<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> states <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Alabama\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alaska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arizona\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arkansas\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"California\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Colorado\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Connecticut\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Delaware\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Florida\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Georgia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hawaii\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Idaho\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Illinois\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Indiana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Iowa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kansas\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Kentucky\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Louisiana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Maine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Maryland\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Massachusetts\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Michigan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Minnesota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mississippi\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Missouri\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Montana\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Nebraska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Nevada\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Hampshire\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Jersey\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Mexico\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"New York\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Carolina\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Dakota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ohio\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Oklahoma\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Oregon\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Pennsylvania\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rhode Island\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"South Carolina\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"South Dakota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tennessee\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Texas\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Utah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Vermont\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Virginia\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Washington\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"West Virginia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wisconsin\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wyoming\"</span><span class=\"sy0\">,</span><br/><span class=\"co1\">// Uncomment the next line for the fake states.</span><br/><span class=\"co1\">// \"New Kory\", \"Wen Kory\", \"York New\", \"Kory New\", \"New Kory\"</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  states.<span class=\"me1\">length</span> <span class=\"sy0\">-=</span> states.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">copy</span><span class=\"br0\">(</span>states<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">const</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> smap<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> s1<span class=\"sy0\">;</span> states<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>s2<span class=\"sy0\">;</span> states<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      smap<span class=\"br0\">[</span><span class=\"br0\">(</span>s1 <span class=\"sy0\">~</span> s2<span class=\"br0\">)</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">representation</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span>.<span class=\"me1\">assumeUnique</span><span class=\"br0\">]</span><br/>        <span class=\"sy0\">~=</span> s1 <span class=\"sy0\">~</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">~</span> s2<span class=\"sy0\">;</span><br/>\u00a0<br/>  writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%-(%s =\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span><br/>           smap.<span class=\"me1\">values</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 77, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"unicode\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> states <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Alabama\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Alaska\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Arizona\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Arkansas\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"California\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Colorado\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Connecticut\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Delaware\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Florida\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Georgia\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Hawaii\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Idaho\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Illinois\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Indiana\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Iowa\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Kansas\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Kentucky\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Louisiana\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Maine\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Maryland\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Massachusetts\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Michigan\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Minnesota\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Mississippi\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Missouri\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Montana\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Nebraska\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Nevada\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"New Hampshire\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"New Jersey\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"New Mexico\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"New York\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"North Carolina\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"North Dakota\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Ohio\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Oklahoma\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Oregon\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Pennsylvania\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Rhode Island\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"South Carolina\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"South Dakota\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Tennessee\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Texas\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Utah\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Vermont\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Virginia\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Washington\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"West Virginia\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Wisconsin\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Wyoming\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    play<span class=\"sy1\">(</span>states<span class=\"sy1\">)</span><br/>    play<span class=\"sy1\">(</span>append<span class=\"sy1\">(</span>states<span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"New Kory\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Wen Kory\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"York New\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Kory New\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"New Kory\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> play<span class=\"sy1\">(</span>states <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>states<span class=\"sy1\">),</span> <span class=\"st0\">\"states:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// get list of unique state names</span><br/>    set <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>states<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> states <span class=\"sy1\">{</span><br/>        set<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// make parallel arrays for unique state names and letter histograms</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>set<span class=\"sy1\">))</span><br/>    h <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][</span><span class=\"nu0\">26</span><span class=\"sy1\">]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>set<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">var</span> <span class=\"nu2\">i</span> <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> us <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> set <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> us<br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> us <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> u <span class=\"sy2\">:=</span> <span class=\"kw4\">uint</span><span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span>ToLower<span class=\"sy1\">(</span>c<span class=\"sy1\">))</span> <span class=\"sy3\">-</span> <span class=\"st0\">'a'</span><span class=\"sy1\">;</span> u &lt; <span class=\"nu0\">26</span> <span class=\"sy1\">{</span><br/>                h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>u<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// use map to find matches.  map key is sum of histograms of</span><br/>    <span class=\"co1\">// two different states.  map value is indexes of the two states.</span><br/>    <span class=\"kw1\">type</span> pair <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        i1<span class=\"sy1\">,</span> i2 <span class=\"kw4\">int</span><br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">][]</span>pair<span class=\"sy1\">)</span><br/>    b <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">26</span><span class=\"sy1\">)</span> <span class=\"co1\">// buffer for summing histograms</span><br/>    <span class=\"kw1\">for</span> i1<span class=\"sy1\">,</span> h1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> i2 <span class=\"sy2\">:=</span> i1 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> i2 &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>h<span class=\"sy1\">);</span> i2<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// sum histograms</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>                b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> h1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> h<span class=\"sy1\">[</span>i2<span class=\"sy1\">][</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>            k <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"co1\">// make key from buffer.</span><br/>            <span class=\"co1\">// now loop over any existing pairs with the same key,</span><br/>            <span class=\"co1\">// printing any where both states of this pair are different</span><br/>            <span class=\"co1\">// than the states of the existing pair</span><br/>            <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> i1 <span class=\"sy2\">!=</span> x<span class=\"sy3\">.</span>i1 &amp;&amp; i1 <span class=\"sy2\">!=</span> x<span class=\"sy3\">.</span>i2 &amp;&amp; i2 <span class=\"sy2\">!=</span> x<span class=\"sy3\">.</span>i1 &amp;&amp; i2 <span class=\"sy2\">!=</span> x<span class=\"sy3\">.</span>i2 <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s,\u00a0%s =\u00a0%s,\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">[</span>i1<span class=\"sy1\">],</span> s<span class=\"sy1\">[</span>i2<span class=\"sy1\">],</span><br/>                        s<span class=\"sy1\">[</span>x<span class=\"sy3\">.</span>i1<span class=\"sy1\">],</span> s<span class=\"sy1\">[</span>x<span class=\"sy3\">.</span>i2<span class=\"sy1\">])</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// store this pair in the map whether printed or not.</span><br/>            m<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>m<span class=\"sy1\">[</span>k<span class=\"sy1\">],</span> pair<span class=\"sy1\">{</span>i1<span class=\"sy1\">,</span> i2<span class=\"sy1\">})</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 87, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE TupleSections #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>toLower<span class=\"sy0\">,</span> isLetter<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"sy0\">,</span> sortBy<span class=\"sy0\">,</span> nub<span class=\"sy0\">,</span> groupBy<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/>\u00a0<br/>stateNames <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>stateNames<span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Alabama\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"Alaska\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Arizona\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Arkansas\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"California\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Colorado\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Connecticut\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Delaware\"</span><span class=\"sy0\">,</span>    <br/>     <span class=\"st0\">\"Florida\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Georgia\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Hawaii\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Idaho\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Illinois\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Indiana\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Iowa\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Kansas\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Kentucky\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Louisiana\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Maine\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Maryland\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Massachusetts\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Michigan\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Minnesota\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Mississippi\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Missouri\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Montana\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Nebraska\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Nevada\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"New Hampshire\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"New Jersey\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"New Mexico\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"New York\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"North Carolina\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"North Dakota\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Ohio\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Oklahoma\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Oregon\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Pennsylvania\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Rhode Island\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"South Carolina\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"South Dakota\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Tennessee\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Texas\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Utah\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Vermont\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Virginia\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Washington\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"West Virginia\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Wisconsin\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Wyoming\"</span><span class=\"br0\">]</span> <br/>\u00a0<br/>fakeStateNames <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>fakeStateNames <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"st0\">\"New Kory\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Wen Kory\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"York New\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"Kory New\"</span><span class=\"sy0\">,</span> <br/>     <span class=\"st0\">\"New Kory\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>pairs <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>pairs <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>pairs <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span><span class=\"br0\">)</span> ys <span class=\"sy0\">++</span> pairs ys<br/>\u00a0<br/>puzzle <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>puzzle states <span class=\"sy0\">=</span> <br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isValid<span class=\"sy0\">.</span>pairs<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>    groupBy <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> `on` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span>  <br/>    sortBy <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> `on` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>pkey <span class=\"br0\">(</span>a<span class=\"sy0\">++</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> pairs <span class=\"br0\">(</span>nub <span class=\"sy0\">$</span> sort states<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">where</span><br/>        pkey <span class=\"sy0\">=</span> sort <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isLetter <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower<br/>        isValid <span class=\"br0\">(</span><span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>b0<span class=\"sy0\">,</span> b1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a0 <span class=\"sy0\">/=</span> b0<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a0 <span class=\"sy0\">/=</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">/=</span> b0<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">/=</span> b1<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Matching pairs generated from \"</span> <br/>               <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> stateNames<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" state names and \"</span> <br/>               <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> fakeStateNames<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" fake state names:\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> puzzle <span class=\"sy0\">$</span> stateNames <span class=\"sy0\">++</span> fakeStateNames</pre>"}, {"lang": "Icon and Unicon", "loc": 49, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> strings                 <span class=\"co1\"># for csort and deletec</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>    ECsolve<span class=\"br0\">(</span>S1 <span class=\"sy1\">:=</span> getStates<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\"># original state names puzzle</span><br/>    ECsolve<span class=\"br0\">(</span>S2 <span class=\"sy1\">:=</span> getStates2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\"># modified fictious names puzzle </span><br/>    GNsolve<span class=\"br0\">(</span>S1<span class=\"br0\">)</span><br/>    GNsolve<span class=\"br0\">(</span>S2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ECsolve<span class=\"br0\">(</span>S<span class=\"br0\">)</span>         <span class=\"co1\"># Solve challenge using equivalence classes</span><br/>    <span class=\"kw2\">local</span> <span class=\"kw7\">T</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>z<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>t<span class=\"sy1\">,</span>s<span class=\"sy1\">,</span>l<span class=\"sy1\">,</span>m<br/>    st <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">time</span>              <span class=\"co1\"># mark runtime</span><br/>    <span class=\"sy1\">/</span>S <span class=\"sy1\">:=</span> getStates<span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># default</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>states <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>deletec<span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>S<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># ignore case &amp; space</span><br/>\u00a0<br/>    <span class=\"co1\"># Build a table containing sets of state name pairs </span><br/>    <span class=\"co1\"># keyed off of canonical form of the pair</span><br/>    <span class=\"co1\"># Use csort(s) rather than cset(s) to preserve the numbers of each letter</span><br/>    <span class=\"co1\"># Since we care not of X&amp;Y .vs. Y&amp;X keep only X&amp;Y</span><br/>\u00a0<br/>    <span class=\"kw7\">T</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>states <span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> y <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>states <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> z <span class=\"sy1\">:=</span> csort<span class=\"br0\">(</span>x <span class=\"sy1\">||</span> <span class=\"br0\">(</span>x <span class=\"sy1\">&lt;&lt;</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"sy1\">/</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>z<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>z<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">set</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># For each unique key (canonical pair) find intersection of all pairs</span><br/>    <span class=\"co1\"># Output is &lt;current key matched&gt; &lt;key&gt; &lt;pairs&gt;</span><br/>\u00a0<br/>    i <span class=\"sy1\">:=</span> m <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span>       <span class=\"co1\"># keys (i) and pairs (m) matched</span><br/>    <span class=\"kw1\">every</span> z <span class=\"sy1\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span><span class=\"kw7\">T</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><br/>        <span class=\"kw1\">every</span> l <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>z<span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"sy1\">/</span>s <span class=\"sy1\">:=</span>  l<br/>            s <span class=\"sy1\">**:=</span> l<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>            m <span class=\"sy1\">+:=</span> <span class=\"sy1\">*</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>z<span class=\"br0\">]</span><br/>            <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>z<span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">#writes(i,\" \",z)  # uncomment for equiv class and match count</span><br/>                <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>x<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>                <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"... runtime \"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">time</span> <span class=\"sy1\">-</span> st<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">1000</span><span class=\"sy1\">.,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>m<span class=\"sy1\">,</span><span class=\"st0\">\" matches found.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings stats'</span><br/>\u00a0<br/>states=:&lt;;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span>-.LF<br/>\u00a0<br/>Alabama,Alaska,Arizona,Arkansas,California,Colorado,<br/>Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,<br/>Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,<br/>Maine,Maryland,Massachusetts,Michigan,Minnesota,<br/>Mississippi,Missouri,Montana,Nebraska,Nevada,<br/>New Hampshire,New Jersey,New Mexico,New York,<br/>North Carolina,North Dakota,Ohio,Oklahoma,Oregon,<br/>Pennsylvania,Rhode Island,South Carolina,<br/>South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,<br/>Washington,West Virginia,Wisconsin,Wyoming,<br/>Maine,Maine,Maine,Maine,Maine,Maine,Maine,Maine,<br/>\u00a0<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>pairUp=: <span class=\"sy0\">(</span>#~ matchUp<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>{~ <span class=\"nu0\">2</span> comb #<span class=\"sy0\">)</span>@~.<br/>matchUp=: <span class=\"sy0\">(</span>i.~ ~: i:~<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;@<a class=\"__cf_email__\" data-cfemail=\"6a040518070b0603100f2a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span><br/>normalize=: /:<a class=\"__cf_email__\" data-cfemail=\"a0dee0d4cfcccfd7c5d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@-.&amp;<span class=\"st_h\">' '</span></pre>"}, {"lang": "Java", "loc": 58, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StateNamePuzzle <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> states <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"Alabama\"</span>, <span class=\"st0\">\"Alaska\"</span>, <span class=\"st0\">\"Arizona\"</span>, <span class=\"st0\">\"Arkansas\"</span>,<br/>        <span class=\"st0\">\"California\"</span>, <span class=\"st0\">\"Colorado\"</span>, <span class=\"st0\">\"Connecticut\"</span>, <span class=\"st0\">\"Delaware\"</span>, <span class=\"st0\">\"Florida\"</span>,<br/>        <span class=\"st0\">\"Georgia\"</span>, <span class=\"st0\">\"hawaii\"</span>, <span class=\"st0\">\"Hawaii\"</span>, <span class=\"st0\">\"Idaho\"</span>, <span class=\"st0\">\"Illinois\"</span>, <span class=\"st0\">\"Indiana\"</span>, <span class=\"st0\">\"Iowa\"</span>,<br/>        <span class=\"st0\">\"Kansas\"</span>, <span class=\"st0\">\"Kentucky\"</span>, <span class=\"st0\">\"Louisiana\"</span>, <span class=\"st0\">\"Maine\"</span>, <span class=\"st0\">\"Maryland\"</span>, <span class=\"st0\">\"Massachusetts\"</span>,<br/>        <span class=\"st0\">\"Michigan\"</span>, <span class=\"st0\">\"Minnesota\"</span>, <span class=\"st0\">\"Mississippi\"</span>, <span class=\"st0\">\"Missouri\"</span>, <span class=\"st0\">\"Montana\"</span>,<br/>        <span class=\"st0\">\"Nebraska\"</span>, <span class=\"st0\">\"Nevada\"</span>, <span class=\"st0\">\"New Hampshire\"</span>, <span class=\"st0\">\"New Jersey\"</span>, <span class=\"st0\">\"New Mexico\"</span>,<br/>        <span class=\"st0\">\"New York\"</span>, <span class=\"st0\">\"North Carolina \"</span>, <span class=\"st0\">\"North Dakota\"</span>, <span class=\"st0\">\"Ohio\"</span>, <span class=\"st0\">\"Oklahoma\"</span>,<br/>        <span class=\"st0\">\"Oregon\"</span>, <span class=\"st0\">\"Pennsylvania\"</span>, <span class=\"st0\">\"Rhode Island\"</span>, <span class=\"st0\">\"South Carolina\"</span>,<br/>        <span class=\"st0\">\"South Dakota\"</span>, <span class=\"st0\">\"Tennessee\"</span>, <span class=\"st0\">\"Texas\"</span>, <span class=\"st0\">\"Utah\"</span>, <span class=\"st0\">\"Vermont\"</span>, <span class=\"st0\">\"Virginia\"</span>,<br/>        <span class=\"st0\">\"Washington\"</span>, <span class=\"st0\">\"West Virginia\"</span>, <span class=\"st0\">\"Wisconsin\"</span>, <span class=\"st0\">\"Wyoming\"</span>,<br/>        <span class=\"st0\">\"New Kory\"</span>, <span class=\"st0\">\"Wen Kory\"</span>, <span class=\"st0\">\"York New\"</span>, <span class=\"st0\">\"Kory New\"</span>, <span class=\"st0\">\"New Kory\"</span>,<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        solve<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>states<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, String<span class=\"sy0\">&gt;</span> orig <span class=\"sy0\">=</span> input.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>Collectors.<span class=\"me1\">toMap</span><span class=\"br0\">(</span><br/>                s <span class=\"sy0\">-&gt;</span> s.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s <span class=\"sy0\">-&gt;</span> s, <span class=\"br0\">(</span>s, a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        input <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span>orig.<span class=\"me1\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span> map <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> pair0 <span class=\"sy0\">=</span> input.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> pair <span class=\"sy0\">=</span> <span class=\"br0\">{</span>pair0, input.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> pair0 <span class=\"sy0\">+</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> key <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>s.<span class=\"me1\">chars</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> val <span class=\"sy0\">=</span> map.<span class=\"me1\">getOrDefault</span><span class=\"br0\">(</span>key, <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                val.<span class=\"me1\">add</span><span class=\"br0\">(</span>pair<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                map.<span class=\"me1\">put</span><span class=\"br0\">(</span>key, val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        map.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>key, list<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> list.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> list.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Stream.<span class=\"me1\">of</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s +\u00a0%s =\u00a0%s +\u00a0%s\u00a0%n\"</span>, orig.<span class=\"me1\">get</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>                            orig.<span class=\"me1\">get</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, orig.<span class=\"me1\">get</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, orig.<span class=\"me1\">get</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 40, "block": "<pre class=\"text highlighted_source\"># Input: a string<br/># Output: an array, being the exploded form of the normalized input<br/>def normalize:<br/>  explode<br/>  | map(if . &gt;= 97 then (. - 97) elif . &gt;= 65 then (. - 65) else empty end);<br/>\u00a0<br/># Input: an array of strings<br/># Output: a dictionary with key:value pairs: normalizedString:string<br/>def dictionary:<br/>  reduce .[] as $s ( {}; . + { ($s|normalize|implode): $s });<br/>\u00a0<br/># Input: an array of strings (e.g. state names)<br/># Output: a stream of solutions<br/>def solve:<br/>\u00a0<br/>  # Given a pair of normalized state names as lists of integers:<br/>  def nletters: map(length) | add;<br/>\u00a0<br/>  # input [[s1,s2], [t2,t2]]<br/>  def solved:<br/>    ( .[0] | add | sort) ==  (.[1] | add | sort);<br/>\u00a0<br/>  unique<br/>  | length as $l<br/>  | dictionary as $dictionary<br/>  | ($dictionary | keys | map(explode)) as $states<br/>  | reduce ( range(0; $l) as $s1<br/>                 | range($s1+1; $l) as $s2<br/>                 | range($s1+1; $l) as $t1<br/>\t         | select($s2\u00a0!= $t1)<br/>\t         | range($t1+1; $l) as $t2<br/>     \t         | select($s2\u00a0!= $t2)<br/>\t         | [[$states[$s1], $states[$s2]], [$states[$t1], $states[$t2]]] ) as $quad<br/>       ([];<br/>        if ($quad[0] | nletters) == ($quad[1] | nletters)<br/>\t   and ($quad | solved)<br/>\tthen . + [$quad | map( map(  $dictionary[ implode ] ))]<br/>\telse .<br/>\tend)<br/>  | .[];</pre>"}, {"lang": "Julia", "loc": 55, "block": "<pre class=\"text highlighted_source\">module StateNamePuzzle<br/>\u00a0<br/>const realnames = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\",<br/>\"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\",<br/>\"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\",<br/>\"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\",<br/>\"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\",<br/>\"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\",<br/>\"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\",<br/>\"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\",<br/>\"Wisconsin\", \"Wyoming\"]<br/>\u00a0<br/>const fictitious = [\"New Kory\", \"Wen Kory\", \"York New\", \"Kory New\", \"New Kory\"]<br/>\u00a0<br/>function combine(a::AbstractString, b::AbstractString)<br/>    chars = vcat(collect(Char, a), collect(Char, b))<br/>    sort!(chars)<br/>    return join(chars)<br/>end<br/>\u00a0<br/>function solve(input::Vector{&lt;:AbstractString})<br/>    dict = Dict{String,String}()<br/>    for state in input<br/>        key = replace(state, \" \", \"\") |&gt; lowercase<br/>        if\u00a0!haskey(dict, key)<br/>            dict[key] = state<br/>        end<br/>    end<br/>    keyset = collect(keys(dict))<br/>    solutions = String[]<br/>    duplicates = String[]<br/>    for i in eachindex(keyset), j in (i+1):endof(keyset)<br/>        len1 = length(keyset[i]) + length(keyset[j])<br/>        combined1 = combine(keyset[i], keyset[j])<br/>        for k in eachindex(keyset), l in k+1:endof(keyset)<br/>            k \u2208 (i, j) &amp;&amp; continue<br/>            l \u2208 (i, j) &amp;&amp; continue<br/>            len2 = length(keyset[k]) + length(keyset[l])<br/>            len1\u00a0!= len2 &amp;&amp; continue<br/>            combined2 = combine(keyset[k], keyset[l])<br/>            if combined1 == combined2<br/>                f1 = dict[keyset[i]] * \" + \" * dict[keyset[j]]<br/>                f2 = dict[keyset[k]] * \" + \" * dict[keyset[l]]<br/>                f3 = f1 * \" = \" * f2<br/>                f3 \u2208 duplicates &amp;&amp; continue<br/>                push!(solutions, f3)<br/>                f4 = f2 * \" = \" * f1<br/>                push!(duplicates, f4)<br/>            end<br/>        end<br/>    end<br/>    return sort!(solutions)<br/>end<br/>\u00a0<br/>end  # module StateNamePuzzle</pre>"}, {"lang": "Kotlin", "loc": 71, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span>states<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dict <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>String, String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>state in states<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> key <span class=\"sy0\">=</span> state.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dict<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> dict.<span class=\"me1\">put</span><span class=\"br0\">(</span>key, state<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> keys <span class=\"sy0\">=</span> dict.<span class=\"me1\">keys</span>.<span class=\"me1\">toList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solutions <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> duplicates <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until keys.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i + <span class=\"nu0\">1</span> until keys.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> keys<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span> + keys<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> chars <span class=\"sy0\">=</span> <span class=\"br0\">(</span>keys<span class=\"br0\">[</span>i<span class=\"br0\">]</span> + keys<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            chars.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> combined <span class=\"sy0\">=</span> String<span class=\"br0\">(</span>chars<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until keys.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>l in k + <span class=\"nu0\">1</span> until keys.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> i || k <span class=\"sy0\">==</span> j || l <span class=\"sy0\">==</span> i || l <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> continue<br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len2 <span class=\"sy0\">=</span> keys<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">length</span> + keys<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len2 <span class=\"sy0\">!=</span> len<span class=\"br0\">)</span> continue<br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> chars2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>keys<span class=\"br0\">[</span>k<span class=\"br0\">]</span> + keys<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    chars2.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> combined2 <span class=\"sy0\">=</span> String<span class=\"br0\">(</span>chars2<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>combined <span class=\"sy0\">==</span> combined2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f1 <span class=\"sy0\">=</span> <span class=\"st0\">\"${dict[keys[i]]} + ${dict[keys[j]]}\"</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f2 <span class=\"sy0\">=</span> <span class=\"st0\">\"${dict[keys[k]]} + ${dict[keys[l]]}\"</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f3 <span class=\"sy0\">=</span> <span class=\"st0\">\"$f1 = $f2\"</span>              <br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>f3 in duplicates<span class=\"br0\">)</span> continue<br/>                        solutions.<span class=\"me1\">add</span><span class=\"br0\">(</span>f3<span class=\"br0\">)</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f4 <span class=\"sy0\">=</span> <span class=\"st0\">\"$f2 = $f1\"</span><br/>                        duplicates.<span class=\"me1\">add</span><span class=\"br0\">(</span>f4<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    solutions.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, sol<span class=\"br0\">)</span> in solutions.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"%2d \u00a0%s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span>, sol<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> states <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"Alabama\"</span>, <span class=\"st0\">\"Alaska\"</span>, <span class=\"st0\">\"Arizona\"</span>, <span class=\"st0\">\"Arkansas\"</span>,<br/>        <span class=\"st0\">\"California\"</span>, <span class=\"st0\">\"Colorado\"</span>, <span class=\"st0\">\"Connecticut\"</span>,<br/>        <span class=\"st0\">\"Delaware\"</span>,<br/>        <span class=\"st0\">\"Florida\"</span>, <span class=\"st0\">\"Georgia\"</span>, <span class=\"st0\">\"Hawaii\"</span>,<br/>        <span class=\"st0\">\"Idaho\"</span>, <span class=\"st0\">\"Illinois\"</span>, <span class=\"st0\">\"Indiana\"</span>, <span class=\"st0\">\"Iowa\"</span>,<br/>        <span class=\"st0\">\"Kansas\"</span>, <span class=\"st0\">\"Kentucky\"</span>, <span class=\"st0\">\"Louisiana\"</span>,<br/>        <span class=\"st0\">\"Maine\"</span>, <span class=\"st0\">\"Maryland\"</span>, <span class=\"st0\">\"Massachusetts\"</span>, <span class=\"st0\">\"Michigan\"</span>,<br/>        <span class=\"st0\">\"Minnesota\"</span>, <span class=\"st0\">\"Mississippi\"</span>, <span class=\"st0\">\"Missouri\"</span>, <span class=\"st0\">\"Montana\"</span>,<br/>        <span class=\"st0\">\"Nebraska\"</span>, <span class=\"st0\">\"Nevada\"</span>, <span class=\"st0\">\"New Hampshire\"</span>, <span class=\"st0\">\"New Jersey\"</span>,<br/>        <span class=\"st0\">\"New Mexico\"</span>, <span class=\"st0\">\"New York\"</span>, <span class=\"st0\">\"North Carolina\"</span>, <span class=\"st0\">\"North Dakota\"</span>,<br/>        <span class=\"st0\">\"Ohio\"</span>, <span class=\"st0\">\"Oklahoma\"</span>, <span class=\"st0\">\"Oregon\"</span>,<br/>        <span class=\"st0\">\"Pennsylvania\"</span>, <span class=\"st0\">\"Rhode Island\"</span>,<br/>        <span class=\"st0\">\"South Carolina\"</span>, <span class=\"st0\">\"South Dakota\"</span>, <span class=\"st0\">\"Tennessee\"</span>, <span class=\"st0\">\"Texas\"</span>,<br/>        <span class=\"st0\">\"Utah\"</span>, <span class=\"st0\">\"Vermont\"</span>, <span class=\"st0\">\"Virginia\"</span>,<br/>        <span class=\"st0\">\"Washington\"</span>, <span class=\"st0\">\"West Virginia\"</span>, <span class=\"st0\">\"Wisconsin\"</span>, <span class=\"st0\">\"Wyoming\"</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Real states only:\"</span><span class=\"br0\">)</span><br/>    solve<span class=\"br0\">(</span>states<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fictitious <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"New Kory\"</span>, <span class=\"st0\">\"Wen Kory\"</span>, <span class=\"st0\">\"York New\"</span>, <span class=\"st0\">\"Kory New\"</span>, <span class=\"st0\">\"New Kory\"</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Real and fictitious states:\"</span><span class=\"br0\">)</span><br/>    solve<span class=\"br0\">(</span>states + fictitious<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LiveCode", "loc": 45, "block": "<pre class=\"text highlighted_source\">function pairwiseAnagrams X<br/>   if the optionkey is down then breakpoint<br/>   put the long seconds into T<br/>   put empty into itemsSoFar<br/>   repeat for each item W in X<br/>      put word 1 to -1 of W into W<br/>      if D[W] = 1 then next repeat<br/>      put 1 into D[W]<br/>      repeat for each item W2 in itemsSoFar<br/>         put W,W2 &amp; cr after WPairs[sortChars(W &amp; W2,true)]<br/>      end repeat<br/>      put W &amp; comma after itemsSoFar<br/>   end repeat<br/>   repeat for each key K in WPairs<br/>      put empty into pairsSoFar<br/>      repeat for each line L in WPairs[K]<br/>         repeat for each line L2 in pairsSoFar<br/>            if item 1 of L is among the items of L2 or item 2 of L is among the items of L2 then next repeat<br/>            put L &amp;&amp; \"and\" &amp;&amp; L2 &amp; cr after R<br/>         end repeat<br/>         put L &amp; cr after pairsSoFar<br/>      end repeat<br/>   end repeat<br/>   put the long seconds - T<br/>   return char 1 to -2 of R<br/>end pairwiseAnagrams<br/>\u00a0<br/>function sortChars X,lettersOnly<br/>   get charsToItems(X,lettersOnly)<br/>   sort items of it<br/>   return itemsToChars(it)<br/>end sortChars<br/>\u00a0<br/>function charsToItems X,lettersOnly<br/>   repeat for each char C in X<br/>      if lettersOnly and C is not in \"abcdefghijklmnopqrstuvwxyz\" then next repeat<br/>      put C &amp; comma after R<br/>   end repeat<br/>   return char 1 to -2 of R<br/>end charsToItems<br/>\u00a0<br/>function itemsToChars X<br/>   replace comma with empty in X<br/>   return X<br/>end itemsToChars</pre>"}, {"lang": "Mathematica", "loc": 13, "block": "<pre class=\"text highlighted_source\">letters[words_,n_]\u00a0:= Sort[Flatten[Characters /@ Take[words,n]]];<br/>groupSameQ[g1_, g2_]\u00a0:= Sort /@ Partition[g1, 2] === Sort /@ Partition[g2, 2];<br/>permutations[{a_, b_, c_, d_}] = Union[Permutations[{a, b, c, d}], SameTest -&gt; groupSameQ];<br/>\u00a0<br/>Select[Flatten[<br/>  permutations /@ <br/>   Subsets[Union[ToLowerCase/@{\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", <br/>      \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", <br/>      \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", <br/>      \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", <br/>      \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", <br/>      \"West Virginia\", \"Wisconsin\", \"Wyoming\"}], {4}], 1], <br/> letters[#, 2] === letters[#, -2] &amp;]</pre>"}, {"lang": "Perl", "loc": 65, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">{</span> say <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> uniq <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%uniq</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a> <span class=\"re0\">@uniq</span><span class=\"br0\">{</span> <span class=\"co5\">@_</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%uniq</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> puzzle <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@states</span> <span class=\"sy0\">=</span> uniq<span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%pairs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$state1</span> <span class=\"br0\">(</span><span class=\"re0\">@states</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$state2</span> <span class=\"br0\">(</span><span class=\"re0\">@states</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$state1</span> <span class=\"kw1\">le</span> <span class=\"re0\">$state2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$both</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                       <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"st_h\">' '</span> <span class=\"kw1\">ne</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span><br/>                       <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span><br/>                       <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"st0\">\"$state1$state2\"</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$pairs</span><span class=\"br0\">{</span><span class=\"re0\">$both</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"re0\">$state1</span><span class=\"sy0\">,</span> <span class=\"re0\">$state2</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pair</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%pairs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$pairs</span><span class=\"br0\">{</span><span class=\"re0\">$pair</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pair1</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$pairs</span><span class=\"br0\">{</span><span class=\"re0\">$pair</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pair2</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$pairs</span><span class=\"br0\">{</span><span class=\"re0\">$pair</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&gt;</span> uniq<span class=\"br0\">(</span><span class=\"re0\">@$pair1</span><span class=\"sy0\">,</span> <span class=\"re0\">@$pair2</span><span class=\"br0\">)</span><br/>                     <span class=\"kw1\">or</span> <span class=\"re0\">$pair1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$pair2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' = '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' + '</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"re0\">$pair1</span><span class=\"sy0\">,</span> <span class=\"re0\">$pair2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@states</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"st_h\">'Alabama'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Alaska'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Arizona'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Arkansas'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'California'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Colorado'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Connecticut'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Delaware'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Florida'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Georgia'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Hawaii'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Idaho'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Illinois'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Indiana'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Iowa'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Kansas'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Kentucky'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Louisiana'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Maine'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Maryland'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Massachusetts'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Michigan'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Minnesota'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Mississippi'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Missouri'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Montana'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Nebraska'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Nevada'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'New Hampshire'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'New Jersey'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'New Mexico'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'New York'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'North Carolina'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'North Dakota'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Ohio'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Oklahoma'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Oregon'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Pennsylvania'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Rhode Island'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'South Carolina'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'South Dakota'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Tennessee'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Texas'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Utah'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Vermont'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Virginia'</span><span class=\"sy0\">,</span><br/>               <span class=\"st_h\">'Washington'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'West Virginia'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Wisconsin'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Wyoming'</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@fictious</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"st_h\">'New Kory'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Wen Kory'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'York New'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Kory New'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'New Kory'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"re0\">@states</span><span class=\"sy0\">,</span> <span class=\"st_h\">' states:'</span><span class=\"sy0\">;</span><br/>puzzle<span class=\"br0\">(</span><span class=\"re0\">@states</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"re0\">@states</span> <span class=\"sy0\">+</span> <span class=\"re0\">@fictious</span><span class=\"sy0\">,</span> <span class=\"st_h\">' states:'</span><span class=\"sy0\">;</span><br/>puzzle<span class=\"br0\">(</span><span class=\"re0\">@states</span><span class=\"sy0\">,</span> <span class=\"re0\">@fictious</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 36, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@states</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    Alabama Alaska Arizona Arkansas California Colorado Connecticut Delaware<br/>    Florida Georgia Hawaii Idaho Illinois Indiana Iowa Kansas Kentucky<br/>    Louisiana Maine Maryland Massachusetts Michigan Minnesota Mississippi<br/>    Missouri Montana Nebraska Nevada New_Hampshire New_Jersey New_Mexico<br/>    New_York North_Carolina North_Dakota Ohio Oklahoma Oregon Pennsylvania<br/>    Rhode_Island South_Carolina South_Dakota Tennessee Texas Utah Vermont<br/>    Virginia Washington West_Virginia Wisconsin Wyoming<br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"50 states:\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> anastates <span class=\"re0\">@states</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>54 states:\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"kw3\">sort</span> anastates <span class=\"re0\">@states</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> New_Kory Wen_Kory York_New Kory_New New_Kory <span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> anastates <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@states</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@s</span> <span class=\"sy0\">=</span> <span class=\"re0\">@states</span><span class=\"sy0\">.</span><span class=\"me1\">unique</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"st_h\">'_'</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">pairs</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">$i</span> <span class=\"sy0\">^..^</span> <span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>\t    take <span class=\"br0\">[</span> <span class=\"re0\">@s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@s</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$equivs</span> <span class=\"sy0\">=</span> hash <span class=\"sy0\">@</span><span class=\"kw3\">pairs</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"kw3\">lc</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    gather <span class=\"kw1\">for</span> <span class=\"re0\">$equivs</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@c</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@c</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"re0\">$i</span> <span class=\"sy0\">^..^</span> <span class=\"re0\">@c</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$set</span> <span class=\"sy0\">=</span> set <span class=\"re0\">@c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/>\t\ttake <span class=\"re0\">@c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st_h\">' = '</span> <span class=\"sy0\">~</span> <span class=\"re0\">@c</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$set</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 50, "block": "<pre class=\"text highlighted_source\">constant states = {\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", <br/>                   \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", <br/>                   \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", <br/>                   \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\",<br/>                   \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", <br/>                   \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", <br/>                   \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", <br/>                   \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", <br/>                   \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", <br/>                   \"Rhode Island\", \"South Carolina\", \"South Dakota\", <br/>                   \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\",<br/>                   \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"},<br/>--       extras = {\"New Kory\", \"Wen Kory\", \"York New\", \"Kory New\", \"New Kory\"}<br/>         extras = {\"Slender Dragon\", \"Abalamara\"}<br/>\u00a0<br/>function no_dup(sequence s)<br/>    s = sort(s)<br/>    for i=length(s) to 2 by -1 do<br/>        if s[i]=s[i-1] then<br/>            s[i] = s[$]<br/>            s = s[1..$-1]<br/>        end if<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>procedure play(sequence s)<br/>    s = no_dup(s)<br/>    destroy_dict(1) -- empty dict<br/>    for i=1 to length(s)-1 do<br/>        for j=i+1 to length(s) do<br/>            string key = trim(sort(lower(s[i]&amp;s[j])))<br/>            object data = getd(key)<br/>            if data=0 then<br/>                putd(key,{{i,j}})<br/>            else<br/>                for k=1 to length(data) do<br/>                    integer {m,n} = data[k]<br/>                    if m!=i and m!=j and n!=i and n!=j then<br/>                       \u00a0?{s[i],s[j],\"&lt;==&gt;\",s[m],s[n]}<br/>                    end if<br/>                end for<br/>                putd(key,append(data,{i,j}))<br/>            end if<br/>        end for<br/>    end for<br/>end procedure<br/>play(states)<br/>?\"===\"<br/>play(states&amp;extras)</pre>"}, {"lang": "PicoLisp", "loc": 41, "block": "<pre class=\"text highlighted_source\">(setq *States<br/>   (group<br/>      (mapcar '((Name) (cons (clip (sort (chop (lowc Name)))) Name))<br/>         (quote<br/>            \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\"<br/>            \"California\" \"Colorado\" \"Connecticut\"<br/>            \"Delaware\"<br/>            \"Florida\" \"Georgia\" \"Hawaii\"<br/>            \"Idaho\" \"Illinois\" \"Indiana\" \"Iowa\"<br/>            \"Kansas\" \"Kentucky\" \"Louisiana\"<br/>            \"Maine\" \"Maryland\" \"Massachusetts\" \"Michigan\"<br/>            \"Minnesota\" \"Mississippi\" \"Missouri\" \"Montana\"<br/>            \"Nebraska\" \"Nevada\" \"New Hampshire\" \"New Jersey\"<br/>            \"New Mexico\" \"New York\" \"North Carolina\" \"North Dakota\"<br/>            \"Ohio\" \"Oklahoma\" \"Oregon\"<br/>            \"Pennsylvania\" \"Rhode Island\"<br/>            \"South Carolina\" \"South Dakota\" \"Tennessee\" \"Texas\"<br/>            \"Utah\" \"Vermont\" \"Virginia\"<br/>            \"Washington\" \"West Virginia\" \"Wisconsin\" \"Wyoming\"<br/>            \"New Kory\" \"Wen Kory\" \"York New\" \"Kory New\" \"New Kory\" ) ) ) )<br/>\u00a0<br/>(extract<br/>   '((P)<br/>      (when (cddr P)<br/>         (mapcar<br/>            '((X)<br/>               (cons<br/>                  (cadr (assoc (car X) *States))<br/>                  (cadr (assoc (cdr X) *States)) ) )<br/>            (cdr P) ) ) )<br/>   (group<br/>      (mapcon<br/>         '((X)<br/>            (extract<br/>               '((Y)<br/>                  (cons<br/>                     (sort (conc (copy (caar X)) (copy (car Y))))<br/>                     (caar X)<br/>                     (car Y) ) )<br/>               (cdr X) ) )<br/>         *States ) ) )</pre>"}, {"lang": "Prolog", "loc": 71, "block": "<pre class=\"prolog highlighted_source\">state_name_puzzle <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span>\"Alabama\"<span class=\"sy4\">,</span> \"Alaska\"<span class=\"sy4\">,</span> \"Arizona\"<span class=\"sy4\">,</span> \"Arkansas\"<span class=\"sy4\">,</span><br/>\t     \"California\"<span class=\"sy4\">,</span> \"Colorado\"<span class=\"sy4\">,</span> \"Connecticut\"<span class=\"sy4\">,</span><br/>\t     \"Delaware\"<span class=\"sy4\">,</span><br/>\t     \"Florida\"<span class=\"sy4\">,</span> \"Georgia\"<span class=\"sy4\">,</span> \"Hawaii\"<span class=\"sy4\">,</span><br/>\t     \"Idaho\"<span class=\"sy4\">,</span> \"Illinois\"<span class=\"sy4\">,</span> \"Indiana\"<span class=\"sy4\">,</span> \"Iowa\"<span class=\"sy4\">,</span><br/>\t     \"Kansas\"<span class=\"sy4\">,</span> \"Kentucky\"<span class=\"sy4\">,</span> \"Louisiana\"<span class=\"sy4\">,</span><br/>\t     \"Maine\"<span class=\"sy4\">,</span> \"Maryland\"<span class=\"sy4\">,</span> \"Massachusetts\"<span class=\"sy4\">,</span> \"Michigan\"<span class=\"sy4\">,</span><br/>\t     \"Minnesota\"<span class=\"sy4\">,</span> \"Mississippi\"<span class=\"sy4\">,</span> \"Missouri\"<span class=\"sy4\">,</span> \"Montana\"<span class=\"sy4\">,</span><br/>\t     \"Nebraska\"<span class=\"sy4\">,</span> \"Nevada\"<span class=\"sy4\">,</span> \"New Hampshire\"<span class=\"sy4\">,</span> \"New Jersey\"<span class=\"sy4\">,</span><br/>\t     \"New Mexico\"<span class=\"sy4\">,</span> \"New York\"<span class=\"sy4\">,</span> \"North Carolina\"<span class=\"sy4\">,</span> \"North Dakota\"<span class=\"sy4\">,</span><br/>\t     \"Ohio\"<span class=\"sy4\">,</span> \"Oklahoma\"<span class=\"sy4\">,</span> \"Oregon\"<span class=\"sy4\">,</span><br/>\t     \"Pennsylvania\"<span class=\"sy4\">,</span> \"Rhode Island\"<span class=\"sy4\">,</span><br/>\t     \"South Carolina\"<span class=\"sy4\">,</span> \"South Dakota\"<span class=\"sy4\">,</span> \"Tennessee\"<span class=\"sy4\">,</span> \"Texas\"<span class=\"sy4\">,</span><br/>\t     \"Utah\"<span class=\"sy4\">,</span> \"Vermont\"<span class=\"sy4\">,</span> \"Virginia\"<span class=\"sy4\">,</span><br/>\t     \"Washington\"<span class=\"sy4\">,</span> \"West Virginia\"<span class=\"sy4\">,</span> \"Wisconsin\"<span class=\"sy4\">,</span> \"Wyoming\"<span class=\"sy4\">,</span><br/>\t     \"New Kory\"<span class=\"sy4\">,</span> \"Wen Kory\"<span class=\"sy4\">,</span> \"York New\"<span class=\"sy4\">,</span> \"Kory New\"<span class=\"sy4\">,</span> \"New Kory\"<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tmaplist<span class=\"br0\">(</span>goedel<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% sort remove duplicates</span><br/>\tsort<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> RS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tstudy<span class=\"br0\">(</span>RS<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study<span class=\"br0\">(</span><span class=\"br0\">[</span>V<span class=\"sy3\">-</span>Word<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tstudy_1_Word<span class=\"br0\">(</span>V<span class=\"sy3\">-</span>Word<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstudy<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>study_1_Word<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>study_1_Word<span class=\"br0\">(</span>V1<span class=\"sy3\">-</span>W1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V2<span class=\"sy3\">-</span>W2 <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span> T<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tTT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V1<span class=\"sy3\">+</span>V2<span class=\"sy4\">,</span><br/>\tstudy_2_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstudy_1_Word<span class=\"br0\">(</span>V1<span class=\"sy3\">-</span>W1<span class=\"sy4\">,</span> T1<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study_2_Word<span class=\"br0\">(</span>_W1<span class=\"sy4\">,</span> _W2<span class=\"sy4\">,</span> _TT<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study_2_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V3<span class=\"sy3\">-</span>W3 <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   W2 \\<span class=\"sy6\">=</span> W3 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> study_3_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> V3<span class=\"sy3\">-</span>W3<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstudy_2_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study_3_Word<span class=\"br0\">(</span>_W1<span class=\"sy4\">,</span> _W2<span class=\"sy4\">,</span> _TT<span class=\"sy4\">,</span> _V3<span class=\"sy3\">-</span>_W3<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study_3_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> V3<span class=\"sy3\">-</span>W3<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V4<span class=\"sy3\">-</span>W4<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tTT1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V3 <span class=\"sy3\">+</span> V4<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   TT1 <span class=\"sy6\">&lt;</span> TT <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> study_3_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> V3<span class=\"sy3\">-</span>W3<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <span class=\"br0\">(</span>TT1 <span class=\"sy6\">=</span> TT <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">(</span> W4 \\<span class=\"sy6\">=</span> W2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w &amp; ~w  with ~w &amp; ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> W3<span class=\"sy4\">,</span> W4<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t                               <span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>           \t         study_3_Word<span class=\"br0\">(</span>W1<span class=\"sy4\">,</span> W2<span class=\"sy4\">,</span> TT<span class=\"sy4\">,</span> V3<span class=\"sy3\">-</span>W3<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Compute a Goedel number for the word</span><br/>goedel<span class=\"br0\">(</span>Word<span class=\"sy4\">,</span> Goedel<span class=\"sy3\">-</span>A<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tname<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Word<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdowncase_atom<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Amin<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"br0\">(</span>Amin<span class=\"sy4\">,</span> LA<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcompute_Goedel<span class=\"br0\">(</span>LA<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Goedel<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_Goedel<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_Goedel<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> GC<span class=\"sy4\">,</span> GF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_Goedel<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> GC<span class=\"sy4\">,</span> GF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_Goedel<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> GC<span class=\"sy4\">,</span> GF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tInd <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> H <span class=\"sy3\">-</span> <span class=\"nu0\">97</span><span class=\"sy4\">,</span><br/>\tGC1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> GC <span class=\"sy3\">+</span> <span class=\"nu0\">26</span> <span class=\"sy3\">**</span> Ind<span class=\"sy4\">,</span><br/>\tcompute_Goedel<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> GC1<span class=\"sy4\">,</span> GF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/>states <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Alabama\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alaska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arizona\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Arkansas\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"California\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Colorado\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Connecticut\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Delaware\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Florida\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Georgia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hawaii\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Idaho\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Illinois\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Indiana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Iowa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kansas\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Kentucky\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Louisiana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Maine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Maryland\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Massachusetts\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Michigan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Minnesota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Mississippi\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Missouri\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Montana\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Nebraska\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Nevada\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Hampshire\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Jersey\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"New Mexico\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"New York\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Carolina\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"North Dakota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ohio\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Oklahoma\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Oregon\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Pennsylvania\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rhode Island\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"South Carolina\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"South Dakota\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tennessee\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Texas\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Utah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Vermont\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Virginia\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"Washington\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"West Virginia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wisconsin\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wyoming\"</span><span class=\"sy0\">,</span><br/><span class=\"co1\"># Uncomment the next line for the fake states.</span><br/><span class=\"co1\"># \"New Kory\", \"Wen Kory\", \"York New\", \"Kory New\", \"New Kory\"</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>states <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>states<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>smap <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> s1 <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>states<span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> s2 <span class=\"kw1\">in</span> states<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>        smap<span class=\"br0\">[</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>s1 + s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>s1 + <span class=\"st0\">\" + \"</span> + s2<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> pairs <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>smap.<span class=\"me1\">itervalues</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" = \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define states<br/>  (list-&gt;set<br/>   (map string-downcase<br/>        '(\"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\"          <br/>          \"California\" \"Colorado\" \"Connecticut\"<br/>          \"Delaware\"    <br/>          \"Florida\" \"Georgia\" \"Hawaii\"<br/>          \"Idaho\" \"Illinois\" \"Indiana\" \"Iowa\"<br/>          \"Kansas\" \"Kentucky\" \"Louisiana\"<br/>          \"Maine\" \"Maryland\" \"Massachusetts\" \"Michigan\"<br/>          \"Minnesota\" \"Mississippi\" \"Missouri\" \"Montana\"<br/>          \"Nebraska\"\"Nevada\" \"New Hampshire\" \"New Jersey\"<br/>          \"New Mexico\" \"New York\" \"North Carolina\" \"North Dakota\"<br/>          \"Ohio\" \"Oklahoma\" \"Oregon\"<br/>          \"Pennsylvania\" \"Rhode Island\"<br/>          \"South Carolina\" \"South Dakota\" \"Tennessee\" \"Texas\"<br/>          \"Utah\" \"Vermont\" \"Virginia\"<br/>          \"Washington\" \"West Virginia\" \"Wisconsin\" \"Wyoming\"<br/>         \u00a0; \"New Kory\" \"Wen Kory\" \"York New\" \"Kory New\" \"New Kory\"<br/>          ))))<br/>\u00a0<br/>(define (canon s t) <br/>  (sort (append (string-&gt;list s) (string-&gt;list t)) char&lt;? ))<br/>\u00a0<br/>(define seen (make-hash))<br/>(for* ([s1 states] [s2 states] #:when (string&lt;? s1 s2))  <br/>  (define c (canon s1 s2))<br/>  (cond [(hash-ref seen c (\u03bb() (hash-set! seen c (list s1 s2)) #f))<br/>         =&gt; (\u03bb(states) (displayln (~v states (list s1 s2))))]))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 76, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  (state name puzzle)  rearranges two state's names \u2500\u2500\u25ba two new states.   */</span><br/>!=<span class=\"st0\">'Alabama,  Alaska, Arizona,  Arkansas, California,    Colorado, Connecticut,       Delaware, Florida, Georgia,'</span>,<br/>  <span class=\"st0\">'Hawaii,   Idaho,  Illinois, Indiana,  Iowa, Kansas,  Kentucky, Louisiana,  Maine, Maryland, Massachusetts,   '</span>,<br/>  <span class=\"st0\">'Michigan, Minnesota, Mississippi, Missouri, Montana, Nebraska, Nevada, New Hampshire, New Jersey, New Mexico,'</span>,<br/>  <span class=\"st0\">'New York, North Carolina,  North Dakota,  Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,'</span>,<br/>  <span class=\"st0\">'South Dakota,  Tennessee,  Texas,  Utah,  Vermont,   Virginia, Washington, West Virginia, Wisconsin,  Wyoming'</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> xtra;   \u00a0!=! <span class=\"st0\">','</span> xtra                     <span class=\"coMULTI\">/*add optional  (fictitious)  names.*/</span><br/>@abcU= <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;    \u00a0!=<span class=\"kw6\">space</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span> <span class=\"coMULTI\">/*!: the state list, no extra blanks*/</span><br/>deads=<span class=\"nu0\">0</span>;    dups=<span class=\"nu0\">0</span>;    L<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;    \u00a0!orig=!;      @@<span class=\"sy0\">.</span>= <span class=\"coMULTI\">/*initialize some REXX variables.   */</span><br/>z=<span class=\"nu0\">0</span>                                                 <span class=\"coMULTI\">/* [\u2191]  elide  dend\u2500end (DE) states.*/</span><br/>    <span class=\"kw1\">do</span> de=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;             \u00a0!=!orig            <span class=\"coMULTI\">/*use original state list for each. */</span><br/>    @<span class=\"sy0\">.</span>=<br/>        <span class=\"kw1\">do</span> states=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>\u00a0!==<span class=\"st0\">''</span>              <span class=\"coMULTI\">/*parse until the cows come home.   */</span><br/>        <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>\u00a0!  x  <span class=\"st0\">','</span> \u00a0!;       x=<span class=\"kw6\">space</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*remove all blanks from state name.*/</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>x<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                        <span class=\"coMULTI\">/*was state was already specified?  */</span><br/>                          <span class=\"kw1\">if</span> de  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*don't tell error if doing 2nd pass*/</span><br/>                          dups=dups + <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*bump the duplicate counter.       */</span><br/>                          <span class=\"kw1\">say</span> <span class=\"st0\">'ignoring the 2nd naming of the state: '</span>    x;      <span class=\"kw1\">iterate</span><br/>                          <span class=\"kw3\">end</span><br/>        @<span class=\"sy0\">.</span>x=x                                       <span class=\"coMULTI\">/*indicate this state name exists.  */</span><br/>        y=<span class=\"kw6\">space</span><span class=\"br0\">(</span>x,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;    <span class=\"kw2\">upper</span> y;    yLen=<span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"coMULTI\">/*get upper name with no spaces; Len*/</span><br/>        <span class=\"kw1\">if</span> de  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                              <span class=\"coMULTI\">/*Is the firstt pass?  Then process.*/</span><br/>                         <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> yLen           <span class=\"coMULTI\">/*see if it's a dead\u2500end state name.*/</span><br/>                         _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>y, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/* _:  is some state name character.*/</span><br/>                         <span class=\"kw1\">if</span> L<span class=\"sy0\">.</span>_ <span class=\"sy0\">\\</span>== <span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*Count \u00ac 1?  Then state name is OK.*/</span><br/>                         <span class=\"kw1\">say</span> <span class=\"st0\">'removing dead\u2500end state  [which has the letter '</span>   _<span class=\"st0\">\"]: \"</span>  x<br/>                         deads=deads + <span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*bump number of dead\u2500ends states.  */</span><br/>                         <span class=\"kw1\">iterate</span> states             <span class=\"coMULTI\">/*go and process another state name.*/</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                    z=z+<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/*bump counter of the state names.  */</span><br/>                    #<span class=\"sy0\">.</span>z=y;  ##<span class=\"sy0\">.</span>z=x                  <span class=\"coMULTI\">/*assign state name;  also original.*/</span><br/>                    <span class=\"kw3\">end</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> yLen                <span class=\"coMULTI\">/*inventorize letters of state name.*/</span><br/>                    _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>y,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   L<span class=\"sy0\">.</span>_=L<span class=\"sy0\">.</span>_ + <span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*count each letter in state name.  */</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*states*/</span>                            <span class=\"coMULTI\">/*the index STATES isn't incremented*/</span><br/>    <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*de*/</span><br/><span class=\"kw1\">call</span> list                                           <span class=\"coMULTI\">/*list state names in order given.  */</span><br/>                   <span class=\"kw1\">say</span> z     <span class=\"st0\">'state name'</span>s<span class=\"br0\">(</span>z<span class=\"br0\">)</span>                <span class=\"st0\">\"are useable.\"</span><br/><span class=\"kw1\">if</span> dups <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> dups  <span class=\"st0\">'duplicate of a state'</span>s<span class=\"br0\">(</span>dups<span class=\"br0\">)</span>   <span class=\"st0\">'ignored.'</span><br/><span class=\"kw1\">if</span> deads<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> deads <span class=\"st0\">'dead\u2500end state'</span>s<span class=\"br0\">(</span>deads<span class=\"br0\">)</span>        <span class=\"st0\">'deleted.'</span><br/>sols=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*number of solutions found (so far)*/</span><br/><span class=\"kw1\">say</span>                                                 <span class=\"coMULTI\">/*[\u2191]  look for mix and match states*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> z     <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  */</span><br/>       <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> z                               <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 state K,  state J  \u25ba\u2500\u2500\u2500\u2500\u2500\u2518  */</span><br/>       <span class=\"kw1\">if</span> #<span class=\"sy0\">.</span>j<span class=\"sy0\">&lt;&lt;</span>#<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> JK=#<span class=\"sy0\">.</span>j <span class=\"sy0\">||</span> #<span class=\"sy0\">.</span>k              <span class=\"coMULTI\">/*is the state in the proper order? */</span><br/>                    <span class=\"kw3\">else</span> JK=#<span class=\"sy0\">.</span>k <span class=\"sy0\">||</span> #<span class=\"sy0\">.</span>j              <span class=\"coMULTI\">/*No,  then use the new state name. */</span><br/>         <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> z; <span class=\"kw1\">if</span> m==j <span class=\"sy0\">|</span> m==k <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*no state  overlaps  are allowed.  */</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">verify</span><span class=\"br0\">(</span>#<span class=\"sy0\">.</span>m, jk<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>      <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*is this state name even possible? */</span><br/>         nJK=elider<span class=\"br0\">(</span>JK, #<span class=\"sy0\">.</span>m<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*a new JK, after eliding #.m chars.*/</span><br/>           <span class=\"kw1\">do</span> n=m+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> z; <span class=\"kw1\">if</span> n==j <span class=\"sy0\">|</span> n==k <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>      <span class=\"coMULTI\">/*no overlaps are allowed.  */</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">verify</span><span class=\"br0\">(</span>#<span class=\"sy0\">.</span>n, nJK<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>      <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>      <span class=\"coMULTI\">/*is it possible?           */</span><br/>           <span class=\"kw1\">if</span> elider<span class=\"br0\">(</span>nJK, #<span class=\"sy0\">.</span>n<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"st0\">''</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>      <span class=\"coMULTI\">/*any leftovers letters?    */</span><br/>           <span class=\"kw1\">if</span> #<span class=\"sy0\">.</span>m<span class=\"sy0\">&lt;&lt;</span>#<span class=\"sy0\">.</span>n  <span class=\"kw3\">then</span> MN=#<span class=\"sy0\">.</span>m <span class=\"sy0\">||</span> #<span class=\"sy0\">.</span>n                  <span class=\"coMULTI\">/*is it in the proper order?*/</span><br/>                        <span class=\"kw3\">else</span> MN=#<span class=\"sy0\">.</span>n <span class=\"sy0\">||</span> #<span class=\"sy0\">.</span>m                  <span class=\"coMULTI\">/*we found a new state name.*/</span><br/>           <span class=\"kw1\">if</span> @@<span class=\"sy0\">.</span>JK<span class=\"sy0\">.</span>MN<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> @@<span class=\"sy0\">.</span>MN<span class=\"sy0\">.</span>JK<span class=\"sy0\">\\</span>==<span class=\"st0\">\"\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*was it done before?       */</span><br/>           <span class=\"kw1\">say</span> <span class=\"st0\">'found: '</span>      ##<span class=\"sy0\">.</span>j<span class=\"st0\">','</span>     ##<span class=\"sy0\">.</span>k       <span class=\"st0\">\"  \u2500\u2500\u2500\u25ba  \"</span>        ##<span class=\"sy0\">.</span>m<span class=\"st0\">','</span>      ##<span class=\"sy0\">.</span>n<br/>           @@<span class=\"sy0\">.</span>JK<span class=\"sy0\">.</span>MN=<span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/*indicate this solution as being found*/</span><br/>           sols=sols+<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/*bump the number of solutions found.  */</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*m*/</span><br/>       <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*k*/</span><br/>     <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*show a blank line for easier reading.*/</span><br/><span class=\"kw1\">if</span> sols==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> sols= <span class=\"st0\">'No'</span>                      <span class=\"coMULTI\">/*use mucher gooder (sic) Englishings. */</span><br/><span class=\"kw1\">say</span> sols  <span class=\"st0\">'solution'</span>s<span class=\"br0\">(</span>sols<span class=\"br0\">)</span>    <span class=\"st0\">\"found.\"</span>          <span class=\"coMULTI\">/*display the number of solutions found*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>elider: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> hay,pins                       <span class=\"coMULTI\">/*remove letters (pins) from haystack. */</span><br/>                            <span class=\"kw1\">do</span> e=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>pins<span class=\"br0\">)</span>;    p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span> pins, e, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,  hay<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>  \u00a0;    hay=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, hay, p<span class=\"br0\">)</span><br/>                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*e*/</span>          <span class=\"coMULTI\">/* [\u2191]  remove a letter from haystack. */</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>hay, <span class=\"nu0\">0</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*remove blanks from the haystack.     */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>list:   <span class=\"kw1\">say</span>;   <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> z;   <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>i, <span class=\"nu0\">9</span><span class=\"br0\">)</span>   ##<span class=\"sy0\">.</span>i;   <span class=\"kw3\">end</span>;            <span class=\"kw1\">say</span>;      <span class=\"kw1\">return</span><br/>s:      <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;    <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">'s'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*pluralizer.*/</span></pre>"}, {"lang": "Ruby", "loc": 45, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/>\u00a0<br/><span class=\"co1\"># 26 prime numbers</span><br/>Primes = <span class=\"br0\">[</span> <span class=\"nu0\">2</span>,  <span class=\"nu0\">3</span>,  <span class=\"nu0\">5</span>,  <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">29</span>, <span class=\"nu0\">31</span>, <span class=\"nu0\">37</span>, <span class=\"nu0\">41</span>, <br/>          <span class=\"nu0\">43</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">53</span>, <span class=\"nu0\">59</span>, <span class=\"nu0\">61</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">71</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">79</span>, <span class=\"nu0\">83</span>, <span class=\"nu0\">89</span>, <span class=\"nu0\">97</span>, <span class=\"nu0\">101</span><span class=\"br0\">]</span><br/>States = <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"Alabama\"</span>, <span class=\"st0\">\"Alaska\"</span>, <span class=\"st0\">\"Arizona\"</span>, <span class=\"st0\">\"Arkansas\"</span>, <span class=\"st0\">\"California\"</span>, <span class=\"st0\">\"Colorado\"</span>,<br/>    <span class=\"st0\">\"Connecticut\"</span>, <span class=\"st0\">\"Delaware\"</span>, <span class=\"st0\">\"Florida\"</span>, <span class=\"st0\">\"Georgia\"</span>, <span class=\"st0\">\"Hawaii\"</span>, <span class=\"st0\">\"Idaho\"</span>,<br/>    <span class=\"st0\">\"Illinois\"</span>, <span class=\"st0\">\"Indiana\"</span>, <span class=\"st0\">\"Iowa\"</span>, <span class=\"st0\">\"Kansas\"</span>, <span class=\"st0\">\"Kentucky\"</span>, <span class=\"st0\">\"Louisiana\"</span>, <span class=\"st0\">\"Maine\"</span>,<br/>    <span class=\"st0\">\"Maryland\"</span>, <span class=\"st0\">\"Massachusetts\"</span>, <span class=\"st0\">\"Michigan\"</span>, <span class=\"st0\">\"Minnesota\"</span>, <span class=\"st0\">\"Mississippi\"</span>,<br/>    <span class=\"st0\">\"Missouri\"</span>, <span class=\"st0\">\"Montana\"</span>, <span class=\"st0\">\"Nebraska\"</span>, <span class=\"st0\">\"Nevada\"</span>, <span class=\"st0\">\"New Hampshire\"</span>, <span class=\"st0\">\"New Jersey\"</span>,<br/>    <span class=\"st0\">\"New Mexico\"</span>, <span class=\"st0\">\"New York\"</span>, <span class=\"st0\">\"North Carolina\"</span>, <span class=\"st0\">\"North Dakota\"</span>, <span class=\"st0\">\"Ohio\"</span>,<br/>    <span class=\"st0\">\"Oklahoma\"</span>, <span class=\"st0\">\"Oregon\"</span>, <span class=\"st0\">\"Pennsylvania\"</span>, <span class=\"st0\">\"Rhode Island\"</span>, <span class=\"st0\">\"South Carolina\"</span>,<br/>    <span class=\"st0\">\"South Dakota\"</span>, <span class=\"st0\">\"Tennessee\"</span>, <span class=\"st0\">\"Texas\"</span>, <span class=\"st0\">\"Utah\"</span>, <span class=\"st0\">\"Vermont\"</span>, <span class=\"st0\">\"Virginia\"</span>,<br/>    <span class=\"st0\">\"Washington\"</span>, <span class=\"st0\">\"West Virginia\"</span>, <span class=\"st0\">\"Wisconsin\"</span>, <span class=\"st0\">\"Wyoming\"</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_answer<span class=\"br0\">(</span>states<span class=\"br0\">)</span><br/>  <span class=\"co1\"># find goedel numbers for all pairs of states</span><br/>  goedel = <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>str<span class=\"sy0\">|</span> str.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> Primes<span class=\"br0\">[</span>c.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> <span class=\"nu0\">65</span><span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>:<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  pairs = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h,k<span class=\"sy0\">|</span> h<span class=\"br0\">[</span>k<span class=\"br0\">]</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">}</span><br/>  map = states.<span class=\"me1\">uniq</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>state<span class=\"sy0\">|</span> <span class=\"br0\">[</span>state, goedel<span class=\"br0\">[</span>state.<span class=\"me1\">upcase</span>.<span class=\"me1\">delete</span><span class=\"br0\">(</span><span class=\"st0\">\"^A-Z\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  map.<span class=\"me1\">combination</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"br0\">(</span>s1,g1<span class=\"br0\">)</span>, <span class=\"br0\">(</span>s2,g2<span class=\"br0\">)</span><span class=\"sy0\">|</span> pairs<span class=\"br0\">[</span>g1 <span class=\"sy0\">*</span> g2<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>s1, s2<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># find pairs without duplicates</span><br/>  result = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  pairs.<span class=\"me1\">values</span>.<span class=\"kw3\">select</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>val<span class=\"sy0\">|</span> val.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>list_of_pairs<span class=\"sy0\">|</span><br/>    list_of_pairs.<span class=\"me1\">combination</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>pair1, pair2<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>pair1, <span class=\"sy0\">*</span>pair2<span class=\"br0\">]</span>.<span class=\"me1\">length</span> == <span class=\"nu0\">4</span><br/>        result <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>pair1, pair2<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># output the results</span><br/>  result.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>pair1, pair2<span class=\"br0\">)</span>, i<span class=\"sy0\">|</span> <br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"%d<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\t</span>%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, pair1.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span>, pair2.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"real states only\"</span><br/>print_answer<span class=\"br0\">(</span>States<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"with fictional states\"</span><br/>print_answer<span class=\"br0\">(</span>States <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"st0\">\"New Kory\"</span>, <span class=\"st0\">\"Wen Kory\"</span>, <span class=\"st0\">\"York New\"</span>, <span class=\"st0\">\"Kory New\"</span>, <span class=\"st0\">\"New Kory\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> StateNamePuzzle <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <span class=\"co1\">// Logic:</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> disjointPairs<span class=\"br0\">(</span>pairs<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Set<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span>- pairs<span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span>- pairs<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> a.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> Set<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> anagramPairs<span class=\"br0\">(</span>words<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span>- words<span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span>- words<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> a <span class=\"sy0\">!=</span> b<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> Set<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// all pairs</span><br/>    .<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span>.<span class=\"me1\">toLowerCase</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"[^a-z]\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">)</span> <span class=\"co1\">// grouped anagram pairs</span><br/>    .<span class=\"me1\">values</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>disjointPairs<span class=\"br0\">)</span>.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">distinct</span><span class=\"br0\">)</span> <span class=\"co1\">// unique non-overlapping anagram pairs</span><br/>\u00a0<br/>  <span class=\"co1\">// Test:</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> states <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"New Kory\"</span>, <span class=\"st0\">\"Wen Kory\"</span>, <span class=\"st0\">\"York New\"</span>, <span class=\"st0\">\"Kory New\"</span>, <span class=\"st0\">\"New Kory\"</span>,<br/>    <span class=\"st0\">\"Alabama\"</span>, <span class=\"st0\">\"Alaska\"</span>, <span class=\"st0\">\"Arizona\"</span>, <span class=\"st0\">\"Arkansas\"</span>, <span class=\"st0\">\"California\"</span>, <span class=\"st0\">\"Colorado\"</span>,<br/>    <span class=\"st0\">\"Connecticut\"</span>, <span class=\"st0\">\"Delaware\"</span>, <span class=\"st0\">\"Florida\"</span>, <span class=\"st0\">\"Georgia\"</span>, <span class=\"st0\">\"Hawaii\"</span>, <span class=\"st0\">\"Idaho\"</span>,<br/>    <span class=\"st0\">\"Illinois\"</span>, <span class=\"st0\">\"Indiana\"</span>, <span class=\"st0\">\"Iowa\"</span>, <span class=\"st0\">\"Kansas\"</span>, <span class=\"st0\">\"Kentucky\"</span>, <span class=\"st0\">\"Louisiana\"</span>, <span class=\"st0\">\"Maine\"</span>,<br/>    <span class=\"st0\">\"Maryland\"</span>, <span class=\"st0\">\"Massachusetts\"</span>, <span class=\"st0\">\"Michigan\"</span>, <span class=\"st0\">\"Minnesota\"</span>, <span class=\"st0\">\"Mississippi\"</span>,<br/>    <span class=\"st0\">\"Missouri\"</span>, <span class=\"st0\">\"Montana\"</span>, <span class=\"st0\">\"Nebraska\"</span>, <span class=\"st0\">\"Nevada\"</span>, <span class=\"st0\">\"New Hampshire\"</span>, <span class=\"st0\">\"New Jersey\"</span>,<br/>    <span class=\"st0\">\"New Mexico\"</span>, <span class=\"st0\">\"New York\"</span>, <span class=\"st0\">\"North Carolina\"</span>, <span class=\"st0\">\"North Dakota\"</span>, <span class=\"st0\">\"Ohio\"</span>,<br/>    <span class=\"st0\">\"Oklahoma\"</span>, <span class=\"st0\">\"Oregon\"</span>, <span class=\"st0\">\"Pennsylvania\"</span>, <span class=\"st0\">\"Rhode Island\"</span>, <span class=\"st0\">\"South Carolina\"</span>,<br/>    <span class=\"st0\">\"South Dakota\"</span>, <span class=\"st0\">\"Tennessee\"</span>, <span class=\"st0\">\"Texas\"</span>, <span class=\"st0\">\"Utah\"</span>, <span class=\"st0\">\"Vermont\"</span>, <span class=\"st0\">\"Virginia\"</span>,<br/>    <span class=\"st0\">\"Washington\"</span>, <span class=\"st0\">\"West Virginia\"</span>, <span class=\"st0\">\"Wisconsin\"</span>, <span class=\"st0\">\"Wyoming\"</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>anagramPairs<span class=\"br0\">(</span>states<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> mkString <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 67, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"co1\"># G\u00f6del number generator</span><br/><span class=\"kw1\">proc</span> goedel s <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> primes <span class=\"br0\">{</span><br/>\t<span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span><br/>\t<span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span> <span class=\"nu0\">101</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is alpha <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$primes</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$c</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span> - <span class=\"nu0\">65</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Calculates the pairs of states</span><br/><span class=\"kw1\">proc</span> groupStates <span class=\"br0\">{</span>stateList<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> stateList <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique <span class=\"re0\">$stateList</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> state1 <span class=\"re0\">$stateList</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> state2 <span class=\"re0\">$stateList</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$state1</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$state2</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    dict <span class=\"kw2\">lappend</span> group <span class=\"br0\">[</span>goedel <span class=\"re0\">$state1</span><span class=\"re0\">$state2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$state1</span> <span class=\"re0\">$state2</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> g <span class=\"br0\">[</span>dict values <span class=\"re0\">$group</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">foreach</span> p1 <span class=\"re0\">$g</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">foreach</span> p2 <span class=\"re0\">$g</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$p1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span>unshared <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> unshared args <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> a <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> s<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size s<span class=\"br0\">]</span> == <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Pretty printer for state name pair lists</span><br/><span class=\"kw1\">proc</span> printPairs <span class=\"br0\">{</span>title groups<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> group <span class=\"re0\">$groups</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$title Group #[incr count]\"</span><br/>\t<span class=\"kw1\">foreach</span> statePair <span class=\"re0\">$group</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>[join $statePair {, }]\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> realStates <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"Alabama\"</span> <span class=\"st0\">\"Alaska\"</span> <span class=\"st0\">\"Arizona\"</span> <span class=\"st0\">\"Arkansas\"</span> <span class=\"st0\">\"California\"</span> <span class=\"st0\">\"Colorado\"</span><br/>    <span class=\"st0\">\"Connecticut\"</span> <span class=\"st0\">\"Delaware\"</span> <span class=\"st0\">\"Florida\"</span> <span class=\"st0\">\"Georgia\"</span> <span class=\"st0\">\"Hawaii\"</span> <span class=\"st0\">\"Idaho\"</span> <span class=\"st0\">\"Illinois\"</span><br/>    <span class=\"st0\">\"Indiana\"</span> <span class=\"st0\">\"Iowa\"</span> <span class=\"st0\">\"Kansas\"</span> <span class=\"st0\">\"Kentucky\"</span> <span class=\"st0\">\"Louisiana\"</span> <span class=\"st0\">\"Maine\"</span> <span class=\"st0\">\"Maryland\"</span><br/>    <span class=\"st0\">\"Massachusetts\"</span> <span class=\"st0\">\"Michigan\"</span> <span class=\"st0\">\"Minnesota\"</span> <span class=\"st0\">\"Mississippi\"</span> <span class=\"st0\">\"Missouri\"</span> <span class=\"st0\">\"Montana\"</span><br/>    <span class=\"st0\">\"Nebraska\"</span> <span class=\"st0\">\"Nevada\"</span> <span class=\"st0\">\"New Hampshire\"</span> <span class=\"st0\">\"New Jersey\"</span> <span class=\"st0\">\"New Mexico\"</span> <span class=\"st0\">\"New York\"</span><br/>    <span class=\"st0\">\"North Carolina\"</span> <span class=\"st0\">\"North Dakota\"</span> <span class=\"st0\">\"Ohio\"</span> <span class=\"st0\">\"Oklahoma\"</span> <span class=\"st0\">\"Oregon\"</span> <span class=\"st0\">\"Pennsylvania\"</span><br/>    <span class=\"st0\">\"Rhode Island\"</span> <span class=\"st0\">\"South Carolina\"</span> <span class=\"st0\">\"South Dakota\"</span> <span class=\"st0\">\"Tennessee\"</span> <span class=\"st0\">\"Texas\"</span> <span class=\"st0\">\"Utah\"</span><br/>    <span class=\"st0\">\"Vermont\"</span> <span class=\"st0\">\"Virginia\"</span> <span class=\"st0\">\"Washington\"</span> <span class=\"st0\">\"West Virginia\"</span> <span class=\"st0\">\"Wisconsin\"</span> <span class=\"st0\">\"Wyoming\"</span><br/><span class=\"br0\">}</span><br/>printPairs <span class=\"st0\">\"Real States\"</span> <span class=\"br0\">[</span>groupStates <span class=\"re0\">$realStates</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> falseStates <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"New Kory\"</span> <span class=\"st0\">\"Wen Kory\"</span> <span class=\"st0\">\"York New\"</span> <span class=\"st0\">\"Kory New\"</span> <span class=\"st0\">\"New Kory\"</span><br/><span class=\"br0\">}</span><br/>printPairs <span class=\"st0\">\"Real and False States\"</span> <span class=\"br0\">[</span>groupStates <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$realStates</span> <span class=\"re0\">$falseStates</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 26, "block": "<pre class=\"text highlighted_source\">#&lt;&lt;&lt;  // here doc<br/>states:=(\"Alabama, Alaska, Arizona, Arkansas,<br/>   California, Colorado, Connecticut, Delaware, Florida,<br/>   Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas,<br/>   Kentucky, Louisiana, Maine, Maryland, Massachusetts,<br/>   Michigan, Minnesota, Mississippi, Missouri, Montana,<br/>   Nebraska, Nevada, New Hampshire, New Jersey, New Mexico,<br/>   New York, North Carolina, North Dakota, Ohio, Oklahoma,<br/>   Oregon, Pennsylvania, Rhode Island, South Carolina,<br/>   South Dakota, Tennessee, Texas, Utah, Vermont, Virginia,<br/>   Washington, West Virginia, Wisconsin, Wyoming\"<br/>   /* Uncomment the next line for the fake states. */<br/>   # \",New Kory, Wen Kory, York New, Kory New, New Kory\"<br/>#&lt;&lt;&lt;<br/>).split(\",\").apply(\"strip\");<br/>\u00a0<br/>smap:=Dictionary();<br/>Utils.Helpers.pickNFrom(2,states).apply2('wrap(ss){ // 1225 combinations<br/>   key:=(ss.concat()).toLower().sort()-\" \";<br/>   smap[key]=smap.find(key,List()).append(ss.concat(\" + \"));<br/>});<br/>\u00a0<br/>foreach pairs in (smap.values){ // 1224 keys<br/>//    pairs=Utils.Helpers.listUnique(pairs);  // eliminate dups<br/>    if(pairs.len()&gt;1)<br/>        println(pairs.concat(\" = \")) }</pre>"}]}