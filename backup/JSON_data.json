{"task": "JSON", "blocks": [{"lang": "8th", "loc": 1, "block": "<pre>[1,2,3] . cr\n</pre>"}, {"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNATCOLL.<span class=\"me1\">JSON</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> JSON_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>   <span class=\"kw3\">use</span> GNATCOLL.<span class=\"me1\">JSON</span>;<br/>\u00a0<br/>   JSON_String\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"{\"</span><span class=\"st0\">\"name\"</span><span class=\"st0\">\":\"</span><span class=\"st0\">\"Pingu\"</span><span class=\"st0\">\",\"</span><span class=\"st0\">\"born\"</span><span class=\"st0\">\":1986}\"</span>;<br/>\u00a0<br/>   Penguin\u00a0: JSON_Value\u00a0:= Create_Object;<br/>   Parents\u00a0: JSON_Array;<br/><span class=\"kw1\">begin</span><br/>   Penguin.<span class=\"me1\">Set_Field</span> <span class=\"br0\">(</span>Field_Name =&gt; <span class=\"st0\">\"name\"</span>, <br/>                      Field      =&gt; <span class=\"st0\">\"Linux\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Penguin.<span class=\"me1\">Set_Field</span> <span class=\"br0\">(</span>Field_Name =&gt; <span class=\"st0\">\"born\"</span>,<br/>                      Field      =&gt; <span class=\"nu0\">1992</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Append <span class=\"br0\">(</span>Parents, Create <span class=\"br0\">(</span><span class=\"st0\">\"Linus Torvalds\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Append <span class=\"br0\">(</span>Parents, Create <span class=\"br0\">(</span><span class=\"st0\">\"Alan Cox\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Append <span class=\"br0\">(</span>Parents, Create <span class=\"br0\">(</span><span class=\"st0\">\"Greg Kroah-Hartman\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Penguin.<span class=\"me1\">Set_Field</span> <span class=\"br0\">(</span>Field_Name =&gt; <span class=\"st0\">\"parents\"</span>,<br/>                      Field      =&gt; Parents<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Put_Line <span class=\"br0\">(</span>Penguin.<span class=\"me1\">Write</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Penguin\u00a0:= Read <span class=\"br0\">(</span>JSON_String, <span class=\"st0\">\"json.errors\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Penguin.<span class=\"me1\">Set_Field</span> <span class=\"br0\">(</span>Field_Name =&gt; <span class=\"st0\">\"born\"</span>,<br/>                      Field      =&gt; <span class=\"nu0\">1986</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Parents\u00a0:= Empty_Array;<br/>   Append <span class=\"br0\">(</span>Parents, Create <span class=\"br0\">(</span><span class=\"st0\">\"Otmar Gutmann\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Append <span class=\"br0\">(</span>Parents, Create <span class=\"br0\">(</span><span class=\"st0\">\"Silvio Mazzola\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <br/>\u00a0<br/>   Penguin.<span class=\"me1\">Set_Field</span> <span class=\"br0\">(</span>Field_Name =&gt; <span class=\"st0\">\"parents\"</span>,<br/>                      Field      =&gt; Parents<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Put_Line <span class=\"br0\">(</span>Penguin.<span class=\"me1\">Write</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> JSON_Test;<br/>\u00a0</pre>"}, {"lang": "AntLang", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>json:{[data]catch[eval[,|{[y]catch[{\":\" = \"=\"; \"[\" = \"&lt;\"; \"]\" = \"&gt;\"; \",\" = \";\"}[y];{x};{[]y}]}'(\"\"\"(\"(\\\\.|[^\\\\\"])*\"|\\-?[0-9]+(\\.[0-9]+)?|\\{|\\}|\\[|\\]|\\:|\\,)\"\"\"~data)[\"strings\"]];{x};{error[\"Invalid JSON\"]}]}<br/>\u00a0</pre>"}, {"lang": "ANTLR", "loc": 25, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"co1\">//  Parse JSON</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">//  Nigel Galloway - April 27th., 2012</span><br/><span class=\"co1\">//</span><br/>grammar JSON <span class=\"sy0\">;</span><br/>@members <span class=\"br0\">{</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> Indent <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a>\t<span class=\"sy0\">:</span>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'.'</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'e'</span><span class=\"sy0\">|</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">|</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">?;</span><br/>WS\t<span class=\"sy0\">:</span>\t<span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">|</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span> <span class=\"sy0\">|</span> <span class=\"st0\">'<span class=\"es0\">\\r</span>'</span> <span class=\"sy0\">|</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>skip<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Tz\t<span class=\"sy0\">:</span>\t<span class=\"st0\">' '</span> .. <span class=\"st0\">'!'</span> <span class=\"sy0\">|</span> <span class=\"st0\">'#'</span> .. <span class=\"st0\">'['</span> <span class=\"sy0\">|</span> <span class=\"st0\">']'</span> .. <span class=\"st0\">'~'</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acontrol+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Control</span></a>\t<span class=\"sy0\">:</span>\t<span class=\"st0\">'<span class=\"es0\">\\\\</span>'</span> <span class=\"br0\">(</span><span class=\"st0\">'\"'</span><span class=\"sy0\">|</span><span class=\"st0\">'<span class=\"es0\">\\\\</span>'</span><span class=\"sy0\">|</span><span class=\"st0\">'/'</span><span class=\"sy0\">|</span><span class=\"st0\">'b'</span><span class=\"sy0\">|</span><span class=\"st0\">'f'</span><span class=\"sy0\">|</span><span class=\"st0\">'n'</span><span class=\"sy0\">|</span><span class=\"st0\">'r'</span><span class=\"sy0\">|</span><span class=\"st0\">'t'</span><span class=\"sy0\">|</span>UCode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>UCode\t<span class=\"sy0\">:</span>\t<span class=\"st0\">'u'</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"sy0\">|</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'f'</span><span class=\"sy0\">|</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"sy0\">|</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'f'</span><span class=\"sy0\">|</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"sy0\">|</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'f'</span><span class=\"sy0\">|</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"sy0\">|</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'f'</span><span class=\"sy0\">|</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'F'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Keyword\t<span class=\"sy0\">:</span>\t<span class=\"st0\">'true'</span> <span class=\"sy0\">|</span> <span class=\"st0\">'false'</span> <span class=\"sy0\">|</span> <span class=\"st0\">'null'</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>\t<span class=\"sy0\">:</span>\t<span class=\"st0\">'\"'</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acontrol+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">?</span> Tz<span class=\"br0\">)</span><span class=\"sy0\">*</span> <span class=\"st0\">'\"'</span><span class=\"sy0\">;</span><br/>object\t<span class=\"sy0\">:</span>       <span class=\"st0\">'{'</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"{Object}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Indent <span class=\"sy0\">+=</span> <span class=\"st0\">\"    \"</span><span class=\"sy0\">;</span><span class=\"br0\">}</span> <span class=\"br0\">(</span>pair <span class=\"br0\">(</span><span class=\"st0\">','</span> pair<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">'}'</span> <span class=\"br0\">{</span>Indent <span class=\"sy0\">=</span> Indent.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>pair\t<span class=\"sy0\">:</span>\te <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"{Property}<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> $e.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span> <span class=\"st0\">':'</span> value<span class=\"sy0\">;</span><br/>value\t<span class=\"sy0\">:</span>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a>             <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"{Number}  <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> $Number.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"sy0\">|</span>\tobject<br/>\t<span class=\"sy0\">|</span>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>             <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"{String}  <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> $String.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"sy0\">|</span>\tKeyword            <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"{Keyword} <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> $Keyword.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"sy0\">|</span>\tarray<span class=\"sy0\">;</span><br/>array\t<span class=\"sy0\">:</span>\t<span class=\"st0\">'['</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Indent <span class=\"sy0\">+</span> <span class=\"st0\">\"Array\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Indent <span class=\"sy0\">+=</span> <span class=\"st0\">\"    \"</span><span class=\"sy0\">;</span><span class=\"br0\">}</span> <span class=\"br0\">(</span>value <span class=\"br0\">(</span><span class=\"st0\">','</span> value<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">']'</span> <span class=\"br0\">{</span>Indent <span class=\"sy0\">=</span> Indent.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Apex", "loc": 15, "block": "<pre class=\"text highlighted_source\">class TestClass{<br/>    String foo {get;set;}<br/>    Integer bar {get;set;}<br/>}<br/>\u00a0<br/>TestClass testObj = new TestClass();<br/>testObj.foo = 'ABC';<br/>testObj.bar = 123;<br/>\u00a0<br/>String serializedString = JSON.serialize(testObj);<br/>TestClass deserializedObject = (TestClass)JSON.deserialize(serializedString, TestClass.class);<br/>\u00a0<br/>//\"testObj.foo == deserializedObject.foo\" is true<br/>//\"testObj.bar == deserializedObject.bar\" is true<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">put$(jsn$(get$(\"input.json\",JSN)),\"output.JSN,NEW)</pre>"}, {"lang": "C", "loc": 120, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;yajl/yajl_tree.h&gt;</span><br/><span class=\"co2\">#include &lt;yajl/yajl_gen.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> print_callback <span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ctx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  FILE <span class=\"sy0\">*</span>f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>FILE <span class=\"sy0\">*</span><span class=\"br0\">)</span> ctx<span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a> <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> check_status <span class=\"br0\">(</span>yajl_gen_status status<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>status <span class=\"sy0\">!=</span> yajl_gen_status_ok<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"yajl_gen_status was\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> status<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> serialize_value <span class=\"br0\">(</span>yajl_gen gen<span class=\"sy0\">,</span> yajl_val val<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> parse_numbers<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>val<span class=\"sy0\">-&gt;</span>type<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> yajl_t_string<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_string <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span><br/>                                     <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">string</span><span class=\"sy0\">,</span><br/>                                     <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a> <span class=\"br0\">(</span>val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_number<span class=\"sy0\">:</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>parse_numbers  <span class=\"sy0\">&amp;&amp;</span>  YAJL_IS_INTEGER <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        check_status <span class=\"br0\">(</span>yajl_gen_integer <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> YAJL_GET_INTEGER <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>parse_numbers  <span class=\"sy0\">&amp;&amp;</span>  YAJL_IS_DOUBLE <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        check_status <span class=\"br0\">(</span>yajl_gen_double <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> YAJL_GET_DOUBLE <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>        check_status <span class=\"br0\">(</span>yajl_gen_number <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> YAJL_GET_NUMBER <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                       <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a> <span class=\"br0\">(</span>YAJL_GET_NUMBER <span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_object<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_map_open <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">object</span>.<span class=\"me1\">len</span>  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          check_status <span class=\"br0\">(</span>yajl_gen_string <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span><br/>                                         <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">object</span>.<span class=\"me1\">keys</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a> <span class=\"br0\">(</span>val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">object</span>.<span class=\"me1\">keys</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          serialize_value <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">object</span>.<span class=\"me1\">values</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> parse_numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_map_close <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_array<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_array_open <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">array</span>.<span class=\"me1\">len</span>  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        serialize_value <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> val<span class=\"sy0\">-&gt;</span>u.<span class=\"me1\">array</span>.<span class=\"me1\">values</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> parse_numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_array_close <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_true<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_bool <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_false<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_bool <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> yajl_t_null<span class=\"sy0\">:</span><br/>      check_status <span class=\"br0\">(</span>yajl_gen_null <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"unexpectedly got type\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> val<span class=\"sy0\">-&gt;</span>type<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> print_tree <span class=\"br0\">(</span>FILE <span class=\"sy0\">*</span>f<span class=\"sy0\">,</span> yajl_val tree<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> parse_numbers<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  yajl_gen gen<span class=\"sy0\">;</span><br/>\u00a0<br/>  gen <span class=\"sy0\">=</span> yajl_gen_alloc <span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> gen<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"yajl_gen_alloc failed<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> yajl_gen_config <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> yajl_gen_beautify<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">||</span><br/>      <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> yajl_gen_config <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> yajl_gen_validate_utf8<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">||</span><br/>      <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> yajl_gen_config <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> yajl_gen_print_callback<span class=\"sy0\">,</span> print_callback<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"yajl_gen_config failed<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  serialize_value <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> tree<span class=\"sy0\">,</span> parse_numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  yajl_gen_free <span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> err_buf<span class=\"br0\">[</span><span class=\"nu0\">200</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>json <span class=\"sy0\">=</span><br/>    <span class=\"st0\">\"{<span class=\"es1\">\\\"</span>pi<span class=\"es1\">\\\"</span>: 3.14, <span class=\"es1\">\\\"</span>large number<span class=\"es1\">\\\"</span>: 123456789123456789123456789, \"</span><br/>    <span class=\"st0\">\"<span class=\"es1\">\\\"</span>an array<span class=\"es1\">\\\"</span>: [-1, true, false, null, <span class=\"es1\">\\\"</span>foo<span class=\"es1\">\\\"</span>]}\"</span><span class=\"sy0\">;</span><br/>  yajl_val tree<span class=\"sy0\">;</span><br/>\u00a0<br/>  tree <span class=\"sy0\">=</span> yajl_tree_parse <span class=\"br0\">(</span>json<span class=\"sy0\">,</span> err_buf<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>err_buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> tree<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"parsing failed because:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> err_buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Treating numbers as strings...<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_tree <span class=\"br0\">(</span>stdout<span class=\"sy0\">,</span> tree<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Parsing numbers to long long or double...<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_tree <span class=\"br0\">(</span>stdout<span class=\"sy0\">,</span> tree<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  yajl_tree_free <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Web.Script.Serialization</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> people <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">object</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"John\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"2\"</span>, <span class=\"st0\">\"Susan\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> serializer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> JavaScriptSerializer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> json <span class=\"sy0\">=</span> serializer<span class=\"sy0\">.</span><span class=\"me1\">Serialize</span><span class=\"br0\">(</span>people<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> deserialized <span class=\"sy0\">=</span> serializer<span class=\"sy0\">.</span><span class=\"me1\">Deserialize</span><span class=\"sy0\">&lt;</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">object</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>deserialized<span class=\"br0\">[</span><span class=\"st0\">\"2\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> jsonObject <span class=\"sy0\">=</span> serializer<span class=\"sy0\">.</span><span class=\"me1\">DeserializeObject</span><span class=\"br0\">(</span><span class=\"st_h\">@\"{ \"</span><span class=\"st0\">\"foo\"</span><span class=\"st0\">\": 1, \"</span><span class=\"st0\">\"bar\"</span><span class=\"st0\">\": [10, \"</span><span class=\"st0\">\"apples\"</span><span class=\"st0\">\"] }\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> jsonObject <span class=\"kw1\">as</span> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">object</span><span class=\"sy0\">&gt;;</span><br/>        <span class=\"kw1\">var</span> array <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"st0\">\"bar\"</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>array<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 15, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include \"Core/Core.h\"</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> Upp<span class=\"sy4\">;</span><br/>\u00a0<br/>CONSOLE_APP_MAIN<br/><span class=\"br0\">{</span><br/>\tJsonArray a<span class=\"sy4\">;</span><br/>\ta <span class=\"sy1\">&lt;&lt;</span> Json<span class=\"br0\">(</span><span class=\"st0\">\"name\"</span>, <span class=\"st0\">\"John\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"phone\"</span>, <span class=\"st0\">\"1234567\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> Json<span class=\"br0\">(</span><span class=\"st0\">\"name\"</span>, <span class=\"st0\">\"Susan\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"phone\"</span>, <span class=\"st0\">\"654321\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tString txt <span class=\"sy1\">=</span> ~a<span class=\"sy4\">;</span><br/>\tCout<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> txt <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\tValue v <span class=\"sy1\">=</span> ParseJSON<span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> v.<span class=\"me1\">GetCount</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\tCout<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"name\"</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"phone\"</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Class Sample.JSON [ Abstract ]<br/>{<br/>\u00a0<br/>ClassMethod GetPerson(ByRef pParms, Output pObject As\u00a0%RegisteredObject) As\u00a0%Status<br/>{<br/>\tSet pObject=##class(Sample.Person).%OpenId(pParms(\"oid\"))<br/>\tQuit $$$OK<br/>}<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>data<span class=\"sy0\">.</span>json<span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"co1\">; Load as Clojure data structures and bind the resulting structure to 'json-map'.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> json<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>json <span class=\"st0\">\"{ <span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: 1, <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: [10, <span class=\"es0\">\\\"</span>apples<span class=\"es0\">\\\"</span>] }\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Use pr-str to print out the Clojure representation of the JSON created by read-json.</span><br/><span class=\"br0\">(</span>pr<span class=\"sy0\">-</span><span class=\"kw1\">str</span> json<span class=\"sy0\">-</span><span class=\"kw1\">map</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Pretty-print the Clojure representation of JSON. We've come full circle.</span><br/><span class=\"br0\">(</span>pprint<span class=\"sy0\">-</span>json json<span class=\"sy0\">-</span><span class=\"kw1\">map</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>sample =<br/>  blue<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>  ocean<span class=\"sy0\">:</span> <span class=\"st0\">'water'</span><br/>\u00a0<br/>json_string = JSON.<span class=\"me1\">stringify</span> sample<br/>json_obj = JSON.<span class=\"me1\">parse</span> json_string<br/>\u00a0<br/>console.<span class=\"me1\">log</span> json_string<br/>console.<span class=\"me1\">log</span> json_obj<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> '<span class=\"br0\">(</span><span class=\"st0\">\"cl-json\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>json<span class=\"sy0\">:</span><span class=\"me1\">encode-json</span><br/> '#<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>foo <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>bar <span class=\"sy0\">.</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span>baz <span class=\"sy0\">.</span> #\\<span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"quux\"</span> <span class=\"nu0\">4</span>/<span class=\"nu0\">17</span> <span class=\"nu0\">4.25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>with-input-from-string<br/>\t   <span class=\"br0\">(</span>s <span class=\"st0\">\"{<span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: [1, 2, 3], <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: true, <span class=\"es0\">\\\"</span>baz<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>!<span class=\"es0\">\\\"</span>}\"</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>json<span class=\"sy0\">:</span><span class=\"me1\">decode-json</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">\"json\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Foo<br/>  JSON.<span class=\"me1\">mapping</span><span class=\"br0\">(</span><br/>    num: Int64,<br/>    <span class=\"kw3\">array</span>: <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"kw3\">String</span><span class=\"br0\">)</span>,<br/>  <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> json<br/>  foo = Foo.<span class=\"me1\">from_json</span><span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"num\"</span>: <span class=\"nu0\">1</span>, <span class=\"st0\">\"array\"</span>: <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"#{foo.num} #{foo.array}\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span><span class=\"br0\">(</span>foo.<span class=\"me1\">to_json</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">json</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> j <span class=\"sy0\">=</span> parseJSON<span class=\"br0\">(</span><span class=\"st_h\">`{ \"foo\": 1, \"bar\": [10, \"apples\"] }`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>toJSON<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 37, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; JSON standard types\u00a0: strings, numbers, and arrays (vectors)</span><br/><span class=\"br0\">(</span>export-json #<span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  \u2192   <span class=\"st0\">\"[6,7,8,9]\"</span><br/><span class=\"br0\">(</span>export-json #<span class=\"br0\">(</span><span class=\"st0\">\"alpha\"</span> <span class=\"st0\">\"beta\"</span> <span class=\"st0\">\"gamma\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  \u2192   <span class=\"st0\">\"[\"</span>alpha<span class=\"st0\">\",\"</span>beta<span class=\"st0\">\",\"</span>gamma<span class=\"st0\">\"]\"</span><br/>\u00a0<br/><span class=\"br0\">(</span>json-import <span class=\"st0\">\"[6,7,8,9]\"</span><span class=\"br0\">)</span>  \u2192   #<span class=\"br0\">(</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>json-import #<span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"alpha\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"beta\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"gamma\"</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span>#<span class=\"br0\">)</span>  \u2192   #<span class=\"br0\">(</span> <span class=\"st0\">\"alpha\"</span> <span class=\"st0\">\"beta\"</span> <span class=\"st0\">\"gamma\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; EchoLisp types\u00a0: dates, rational, complex, big int</span><br/><span class=\"br0\">(</span>export-json <span class=\"nu0\">3</span>/<span class=\"nu0\">4</span><span class=\"br0\">)</span>  \u2192   <span class=\"st0\">\"{\"</span>_instanceof<span class=\"st0\">\":\"</span>Rational<span class=\"st0\">\",\"</span>a<span class=\"st0\">\":3,\"</span>b<span class=\"st0\">\":4}\"</span><br/><span class=\"br0\">(</span>json-import #<span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">{</span><span class=\"st0\">\"_instanceof\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Rational\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span><span class=\"nu0\">666</span><span class=\"sy0\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">:</span><span class=\"nu0\">42</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;&gt;</span>#<span class=\"br0\">)</span>  \u2192   <span class=\"nu0\">111</span>/<span class=\"nu0\">7</span><br/>\u00a0<br/><span class=\"co1\">;; Symbols</span><br/><span class=\"br0\">(</span>export-json 'Simon-Gallubert<span class=\"br0\">)</span>  \u2192   <span class=\"st0\">\"{\"</span>_instanceof<span class=\"st0\">\":\"</span><span class=\"kw1\">Symbol</span><span class=\"st0\">\",\"</span><span class=\"kw1\">name</span><span class=\"st0\">\":\"</span>Simon-Gallubert<span class=\"st0\">\"}\"</span><br/><span class=\"br0\">(</span>json-import #<span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">{</span><span class=\"st0\">\"_instanceof\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Symbol\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"name\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Antoinette-de-Gabolde\"</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;&gt;</span>#<span class=\"br0\">)</span>  <br/>    \u2192   Antoinette-de-Gabolde<br/>\u00a0<br/><span class=\"co1\">;; Lists</span><br/><span class=\"br0\">(</span>define my-<span class=\"kw1\">list</span> <br/>    <span class=\"br0\">(</span>export-json '<span class=\"br0\">(</span> <span class=\"nu0\">43</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"br0\">(</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192    <span class=\"st0\">\"{\"</span>_instanceof<span class=\"st0\">\":\"</span><span class=\"kw1\">List</span><span class=\"st0\">\" ,\"</span><span class=\"kw1\">array</span><span class=\"st0\">\":[43,4,5,{\"</span>_instanceof<span class=\"st0\">\":\"</span><span class=\"kw1\">List</span><span class=\"st0\">\",<br/>    \"</span><span class=\"kw1\">array</span><span class=\"st0\">\":[6,7,{\"</span>_instanceof<span class=\"st0\">\":\"</span><span class=\"kw1\">List</span><span class=\"st0\">\",<br/>    \"</span><span class=\"kw1\">array</span><span class=\"st0\">\":[8,9],\"</span>circular<span class=\"st0\">\":false}],\"</span>circular<span class=\"st0\">\":false}],\"</span>circular<span class=\"st0\">\":false}\"</span><br/>\u00a0<br/><span class=\"br0\">(</span>json-import my-<span class=\"kw1\">list</span><span class=\"br0\">)</span>  \u2192   <span class=\"br0\">(</span><span class=\"nu0\">43</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Structures</span><br/><span class=\"br0\">(</span>struct Person <span class=\"br0\">(</span><span class=\"kw1\">name</span> pict<span class=\"br0\">)</span><span class=\"br0\">)</span>  \u2192   #struct<span class=\"sy0\">:</span><span class=\"me1\">Person</span> <span class=\"br0\">[</span><span class=\"kw1\">name</span> pict<span class=\"br0\">]</span><br/><span class=\"br0\">(</span>define antoinette <span class=\"br0\">(</span>Person <span class=\"st0\">\"antoinette\"</span> <span class=\"st0\">\"\ud83d\udc70\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   \u2192   # <span class=\"br0\">(</span>antoinette \ud83d\udc70<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>export-json antoinette<span class=\"br0\">)</span>  \u2192   <br/>    <span class=\"st0\">\"{\"</span>_instanceof<span class=\"st0\">\":\"</span>Struct<span class=\"st0\">\", \"</span>struct<span class=\"st0\">\":\"</span>Person<span class=\"st0\">\",\"</span>id<span class=\"st0\">\":17,\"</span>fields<span class=\"st0\">\":[\"</span>antoinette<span class=\"st0\">\",\"</span>\ud83d\udc70<span class=\"st0\">\"]}\"</span><br/><span class=\"br0\">(</span>json-import <br/>    #<span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">{</span><span class=\"st0\">\"_instanceof\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Struct\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"struct\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Person\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"id\"</span><span class=\"sy0\">:</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span><span class=\"st0\">\"fields\"</span><span class=\"sy0\">:</span><span class=\"br0\">[</span><span class=\"st0\">\"simon\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\ud83c\udfa9\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;&gt;</span>#<span class=\"br0\">)</span>  <br/>\t\u2192   # <span class=\"br0\">(</span>simon \ud83c\udfa9<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "EGL", "loc": 15, "block": "<pre class=\"text highlighted_source\">record familyMember<br/>\tperson person;<br/>\trelationships relationship[]?;<br/>end<br/>\u00a0<br/>record person<br/>\tfirstName string;<br/>\tlastName string;<br/>\tage int;<br/>end<br/>\u00a0<br/>record relationship<br/>\trelationshipType string;<br/>\tid int;<br/>end</pre>"}, {"lang": "Elena", "loc": 12, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import extensions'dynamic.<br/>\u00a0<br/>program =<br/>[<br/>    var json\u00a0:= \"{ \"\"foo\"\": 1, \"\"bar\"\": [10, \"\"apples\"\"] }\".<br/>\u00a0<br/>    var o\u00a0:= json fromJson.<br/>\u00a0<br/>    console printLine(\"json.foo=\",o foo).<br/>    console printLine(\"json.bar=\",o bar).<br/>].</pre>"}, {"lang": "Erlang", "loc": 43, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">JSON</span> <span class=\"sy3\">=</span> <br/>\t\t<span class=\"st0\">\"{<br/>\t\t    <span class=\"es0\">\\\"</span>firstName<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>John<span class=\"es0\">\\\"</span>,<br/>\t\t    <span class=\"es0\">\\\"</span>lastName<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>Smith<span class=\"es0\">\\\"</span>,<br/>\t\t    <span class=\"es0\">\\\"</span>age<span class=\"es0\">\\\"</span>: 25,<br/>\t\t    <span class=\"es0\">\\\"</span>address<span class=\"es0\">\\\"</span>: {<br/>\t\t        <span class=\"es0\">\\\"</span>streetAddress<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>21 2nd Street<span class=\"es0\">\\\"</span>,<br/>\t\t        <span class=\"es0\">\\\"</span>city<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>New York<span class=\"es0\">\\\"</span>,<br/>\t\t        <span class=\"es0\">\\\"</span>state<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>NY<span class=\"es0\">\\\"</span>,<br/>\t\t        <span class=\"es0\">\\\"</span>postalCode<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>10021<span class=\"es0\">\\\"</span><br/>\t\t    },<br/>\t\t    <span class=\"es0\">\\\"</span>phoneNumber<span class=\"es0\">\\\"</span>: [<br/>\t\t        {<br/>\t\t            <span class=\"es0\">\\\"</span>type<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>home<span class=\"es0\">\\\"</span>,<br/>\t\t            <span class=\"es0\">\\\"</span>number<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>212 555-1234<span class=\"es0\">\\\"</span><br/>\t\t        },<br/>\t\t        {<br/>\t\t            <span class=\"es0\">\\\"</span>type<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>fax<span class=\"es0\">\\\"</span>,<br/>\t\t            <span class=\"es0\">\\\"</span>number<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>646 555-4567<span class=\"es0\">\\\"</span><br/>\t\t        }<br/>\t\t    ]<br/>\t\t}\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Erlang</span> <span class=\"sy3\">=</span> <br/>\t\t<span class=\"br0\">{</span>struct<span class=\"sy1\">,</span><br/>\t\t\t<span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"firstName\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"John\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t         <span class=\"br0\">{</span><span class=\"st0\">\"lastName\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Smith\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t         <span class=\"br0\">{</span><span class=\"st0\">\"age\"</span><span class=\"sy1\">,</span><span class=\"nu0\">25</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t         <span class=\"br0\">{</span><span class=\"st0\">\"address\"</span><span class=\"sy1\">,</span><br/>\t          <span class=\"br0\">{</span>struct<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"streetAddress\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"21 2nd Street\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t                   <span class=\"br0\">{</span><span class=\"st0\">\"city\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"New York\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t                   <span class=\"br0\">{</span><span class=\"st0\">\"state\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"NY\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t                   <span class=\"br0\">{</span><span class=\"st0\">\"postalCode\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"10021\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t         <span class=\"br0\">{</span><span class=\"st0\">\"phoneNumber\"</span><span class=\"sy1\">,</span><br/>\t          <span class=\"br0\">{</span>array<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span>struct<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"type\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"home\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"number\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"212 555-1234\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t                  <span class=\"br0\">{</span>struct<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"type\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"fax\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"number\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"646 555-4567\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"JSON -&gt; Erlang<span class=\"es0\">\\n</span>~p<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>mochijson:<span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">JSON</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Erlang -&gt; JSON<span class=\"es0\">\\n</span>~s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>mochijson:<span class=\"re3\">encode</span><span class=\"br0\">(</span><span class=\"re5\">Erlang</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: json.writer json.reader\u00a0;<br/>\u00a0<br/>SYMBOL: foo<br/>\u00a0<br/>! Load a JSON string into a data structure<br/>\"[[\\\"foo\\\",1],[\\\"bar\\\",[10,\\\"apples\\\"]]]\" json&gt; foo set<br/>\u00a0<br/>\u00a0<br/>! Create a new data structure and serialize into JSON<br/>{ { \"blue\" { \"ocean\" \"water\" } } &gt;json<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using util<br/>\u00a0<br/>class Json<br/>{<br/>  public static Void main ()<br/>  {<br/>    Str input\u00a0:= \"\"\"{\"blue\": [1, 2], \"ocean\": \"water\"}\"\"\"<br/>    Map jsonObj\u00a0:= JsonInStream(input.in).readJson<br/>\u00a0<br/>    echo (\"Value for 'blue' is: \" + jsonObj[\"blue\"])<br/>    jsonObj[\"ocean\"] = [\"water\":[\"cold\", \"blue\"]]<br/>    Map ocean\u00a0:= jsonObj[\"ocean\"]<br/>    echo (\"Value for 'ocean/water' is: \" + ocean[\"water\"])<br/>    output\u00a0:= JsonOutStream(Env.cur.out)<br/>    output.writeJson(jsonObj)<br/>    echo ()<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>{\n  \"PhoneBook\": [\n    {\n      \"name\": \"Adam\",\n      \"phone\": \"0000001\"\n    },\n    {\n      \"name\": \"Eve\",\n      \"phone\": \"0000002\"\n    },\n    {\n      \"name\": \"Julia\",\n      \"phone\": \"6666666\"\n    }\n  ]\n}\n</pre>"}, {"lang": "FunL", "loc": 1, "block": "<pre class=\"text highlighted_source\">println( eval('{ \"foo\": 1, \"bar\": [10, \"apples\"] }') )</pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> Newtonsoft.<span class=\"me1\">Json</span><br/><span class=\"kw1\">type</span> Person <span class=\"sy0\">=</span> <span class=\"br0\">{</span>ID: int<span class=\"sy0\">;</span> Name:<span class=\"kw4\">string</span><span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>ID <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> Name <span class=\"sy0\">=</span> <span class=\"st0\">\"First\"</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span> <span class=\"br0\">{</span> ID <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> Name <span class=\"sy0\">=</span> <span class=\"st0\">\"Second\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> json <span class=\"sy0\">=</span> JsonConvert.<span class=\"me1\">SerializeObject</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>json <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%s\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> xs1 <span class=\"sy0\">=</span> JsonConvert.<span class=\"me1\">DeserializeObject</span><span class=\"sy0\">&lt;</span>Person list<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><br/>xs1 <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"%i \u00a0%s\"</span> x.<span class=\"me1\">ID</span> x.<span class=\"me1\">Name</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Go", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"encoding/json\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> data <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span><br/>    err <span class=\"sy2\">:=</span> json<span class=\"sy3\">.</span>Unmarshal<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"co2\">`{\"foo\":1, \"bar\":[10, \"apples\"]}`</span><span class=\"sy1\">),</span> &amp;data<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>data<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    sample <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">interface</span><span class=\"sy1\">{}{</span><br/>        <span class=\"st0\">\"blue\"</span><span class=\"sy1\">:</span>  <span class=\"sy1\">[]</span><span class=\"kw4\">interface</span><span class=\"sy1\">{}{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span><br/>        <span class=\"st0\">\"ocean\"</span><span class=\"sy1\">:</span> <span class=\"st0\">\"water\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    json_string<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> json<span class=\"sy3\">.</span>Marshal<span class=\"sy1\">(</span>sample<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>json_string<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gosu", "loc": 3, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/>gw.<span class=\"me1\">lang</span>.<span class=\"me1\">reflect</span>.<span class=\"me1\">json</span>.<span class=\"me1\">Json</span>#fromJson<span class=\"br0\">(</span> <span class=\"kw4\">String</span> json <span class=\"br0\">)</span> <span class=\"sy0\">:</span> javax.<span class=\"me1\">script</span>.<span class=\"me1\">Bindings</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slurper <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> groovy.<span class=\"me1\">json</span>.<span class=\"me1\">JsonSlurper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> result <span class=\"sy0\">=</span> slurper.<span class=\"me1\">parseText</span><span class=\"br0\">(</span><span class=\"st0\">'''<br/>{<br/>    \"people\":[<br/>        {\"name\":{\"family\":\"Flintstone\",\"given\":\"Frederick\"},\"age\":35,\"relationships\":{\"wife\":\"people[1]\",\"child\":\"people[4]\"}},<br/>        {\"name\":{\"family\":\"Flintstone\",\"given\":\"Wilma\"},\"age\":32,\"relationships\":{\"husband\":\"people[0]\",\"child\":\"people[4]\"}},<br/>        {\"name\":{\"family\":\"Rubble\",\"given\":\"Barnard\"},\"age\":30,\"relationships\":{\"wife\":\"people[3]\",\"child\":\"people[5]\"}},<br/>        {\"name\":{\"family\":\"Rubble\",\"given\":\"Elisabeth\"},\"age\":32,\"relationships\":{\"husband\":\"people[2]\",\"child\":\"people[5]\"}},<br/>        {\"name\":{\"family\":\"Flintstone\",\"given\":\"Pebbles\"},\"age\":1,\"relationships\":{\"mother\":\"people[1]\",\"father\":\"people[0]\"}},<br/>        {\"name\":{\"family\":\"Rubble\",\"given\":\"Bam-Bam\"},\"age\":1,\"relationships\":{\"mother\":\"people[3]\",\"father\":\"people[2]\"}},<br/>    ]<br/>}<br/>'''</span><span class=\"br0\">)</span></pre>"}, {"lang": "Halon", "loc": 4, "block": "<pre class=\"text highlighted_source\">$data = json_decode(''{ \"foo\": 1, \"bar\": [10, \"apples\"] }'');<br/>\u00a0<br/>$sample = [\"blue\" =&gt; [1, 2], \"ocean\" =&gt; \"water\"];<br/>$jsonstring = json_encode($sample, [\"pretty_print\" =&gt; true]);</pre>"}, {"lang": "Harbour", "loc": 2, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">LOCAL</span> arr<br/>hb_jsonDecode<span class=\"br0\">(</span> '<span class=\"br0\">[</span><span class=\"nu0\">101</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"sy0\">,</span><span class=\"st0\">\"Test1\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span>false<span class=\"br0\">]</span>'<span class=\"sy0\">,</span> <span class=\"sy0\">@</span>arr <span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"coMULTI\">{-# LANGUAGE OverloadedStrings #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Aeson<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Attoparsec <span class=\"br0\">(</span>parseOnly<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Text<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Lazy<span class=\"sy0\">.</span>Char8 <span class=\"kw1\">as</span> B<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Char8 <span class=\"kw1\">as</span> S<br/>\u00a0<br/>testdoc <span class=\"sy0\">=</span> object <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"foo\"</span>   <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"bar\"</span>   <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1.3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.9</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"baz\"</span>   <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"st0\">\"some string\"</span> <span class=\"sy0\">::</span> Text<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"other\"</span> <span class=\"sy0\">.=</span> object <span class=\"br0\">[</span><br/>        <span class=\"st0\">\"yes\"</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"st0\">\"sir\"</span> <span class=\"sy0\">::</span> Text<span class=\"br0\">)</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> out <span class=\"sy0\">=</span> encode testdoc<br/>    B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> out<br/>    <span class=\"kw1\">case</span> parseOnly json <span class=\"br0\">(</span>S<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> B<span class=\"sy0\">.</span>toChunks out<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        Left e <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"strange error re-parsing json: \"</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> e<span class=\"br0\">)</span><br/>        Right v <span class=\"sy0\">|</span> v <span class=\"sy0\">/=</span> testdoc <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"documents not equal!\"</span><br/>        Right v <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>    <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> v<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Hoon", "loc": 15, "block": "<pre class=\"text highlighted_source\">:- \u00a0%say<br/>|=  [^ [<a class=\"__cf_email__\" data-cfemail=\"9cf5f2a1dce8fdef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ~] ~]<br/>:- \u00a0%noun<br/>  =+  obj=(need (poja in))                             \u00a0:: try parse to json<br/>  =+  typ=$:(<a class=\"__cf_email__\" data-cfemail=\"6a040b070f572a1e0b19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <a class=\"__cf_email__\" data-cfemail=\"b6d7d1d38bf6c3d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                        \u00a0:: datastructure<br/>  =+  spec=(ot name/so age/ni ~):jo                    \u00a0:: parsing spec<br/> \u00a0?. \u00a0?=([%o *] obj)                                   \u00a0:: isnt an object?<br/>    ~<br/>  =+  ^=  o<br/>   \u00a0%. \u00a0%.  (spec obj)                                 \u00a0:: parse with spec<br/>      need                                             \u00a0:: panic if failed<br/>    ,typ                                               \u00a0:: cast to type<br/>  =.  age.o  +(age.o)                                  \u00a0:: increment its age...<br/> \u00a0%:  crip \u00a0%:  pojo                                   \u00a0:: pretty-print result<br/>    (jobe [%name s/name.o] [%age n/(crip &lt;age.o&gt;)] ~)  \u00a0:: convert back to json</pre>"}, {"lang": "J", "loc": 50, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB.               character classes:</span><br/><span class=\"co1\">NB. 0: whitespace</span><br/><span class=\"co1\">NB. 1: \"</span><br/><span class=\"co1\">NB. 2: \\</span><br/><span class=\"co1\">NB. 3: [ ] , { }\u00a0:</span><br/><span class=\"co1\">NB. 4: ordinary</span><br/>classes=.<span class=\"nu0\">3</span>&lt;. <span class=\"st_h\">'\"\\[],{}:'</span> <span class=\"sy0\">(</span>#@[ |&amp;&gt;: i.<span class=\"sy0\">)</span> a.<br/>classes=.<span class=\"nu0\">0</span> <span class=\"sy0\">(</span>I.a.e.<span class=\"st_h\">' '</span>,CRLF,TAB<span class=\"sy0\">)</span>} <span class=\"sy0\">(</span>]+<span class=\"nu0\">4</span>*<span class=\"nu0\">0</span>=]<span class=\"sy0\">)</span>classes<br/>\u00a0<br/>words=:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>;<span class=\"sy0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">10</span>#:<span class=\"nu0\">10</span>*\".;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><span class=\"sy0\">)</span>;classes<span class=\"sy0\">)</span>&amp;;: <span class=\"co1\">NB. states:</span><br/>  <span class=\"nu0\">0.0</span>  <span class=\"nu0\">1.1</span>  <span class=\"nu0\">2.1</span>  <span class=\"nu0\">3.1</span>  <span class=\"nu0\">4.1</span>  <span class=\"co1\">NB. 0 whitespace</span><br/>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">5.0</span>  <span class=\"nu0\">6.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"co1\">NB. 1 \"</span><br/>  <span class=\"nu0\">4.0</span>  <span class=\"nu0\">4.0</span>  <span class=\"nu0\">4.0</span>  <span class=\"nu0\">4.0</span>  <span class=\"nu0\">4.0</span>  <span class=\"co1\">NB. 2 \\</span><br/>  <span class=\"nu0\">0.3</span>  <span class=\"nu0\">1.2</span>  <span class=\"nu0\">2.2</span>  <span class=\"nu0\">3.2</span>  <span class=\"nu0\">4.2</span>  <span class=\"co1\">NB. 3 {\u00a0: , } [ ]</span><br/>  <span class=\"nu0\">0.3</span>  <span class=\"nu0\">1.2</span>  <span class=\"nu0\">2.0</span>  <span class=\"nu0\">3.2</span>  <span class=\"nu0\">4.0</span>  <span class=\"co1\">NB. 4 ordinary</span><br/>  <span class=\"nu0\">0.3</span>  <span class=\"nu0\">1.2</span>  <span class=\"nu0\">2.2</span>  <span class=\"nu0\">3.2</span>  <span class=\"nu0\">4.2</span>  <span class=\"co1\">NB. 5 \"\"</span><br/>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"nu0\">1.0</span>  <span class=\"co1\">NB. 6 \"\\</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>tokens=.\u00a0;:<span class=\"st_h\">'[ ] , { }\u00a0:'</span><br/>actions=: lBra`rBracket`comma`lBra`rBrace`colon`value<br/>\u00a0<br/><span class=\"co1\">NB. action verbs argument conventions:</span><br/><span class=\"co1\">NB.   x -- boxed json word</span><br/><span class=\"co1\">NB.   y -- boxed json state stack</span><br/><span class=\"co1\">NB.   result -- new boxed json state stack</span><br/><span class=\"co1\">NB.</span><br/><span class=\"co1\">NB. json state stack is an list of boxes of incomplete lists</span><br/><span class=\"co1\">NB. (a single box for complete, syntactically valid json)</span><br/>jsonParse=: <span class=\"nu0\">0</span> {:: <span class=\"sy0\">(</span>,a:<span class=\"sy0\">)</span> ,&amp;.&gt; [: <a class=\"__cf_email__\" data-cfemail=\"741517001d1b1a07345a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>tokens&amp;<a class=\"__cf_email__\" data-cfemail=\"731a5d33\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<span class=\"sy0\">)</span>/ [:|.a:,words<br/>\u00a0<br/>lBra=: a: ,~ ]<br/>rBracket=: <span class=\"nu0\">_2</span>&amp;}<a class=\"__cf_email__\" data-cfemail=\"476907\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], [:&lt; <span class=\"nu0\">_2</span>&amp;{::@], <span class=\"nu0\">_1</span>&amp;{@]<br/>comma=: ]<br/>rBrace=: <span class=\"nu0\">_2</span>&amp;}<a class=\"__cf_email__\" data-cfemail=\"3f117f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], [:&lt; <span class=\"nu0\">_2</span>&amp;{::@]<span class=\"sy0\">(</span>, &lt;<span class=\"sy0\">)</span>  [:|: <span class=\"sy0\">(</span><span class=\"nu0\">2</span>,~ [: -:@$ <span class=\"nu0\">_1</span>&amp;{::@]<span class=\"sy0\">)</span> $ <span class=\"nu0\">_1</span>&amp;{::@]<br/>colon=: ]<br/>value=: <span class=\"nu0\">_1</span>&amp;}<a class=\"__cf_email__\" data-cfemail=\"103e50\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], [:&lt; <span class=\"nu0\">_1</span>&amp;{::@], jsonValue&amp;.&gt;@[<br/>\u00a0<br/><span class=\"co1\">NB. hypothetically, jsonValue should strip double quotes</span><br/><span class=\"co1\">NB. interpret back slashes</span><br/><span class=\"co1\">NB. and recognize numbers</span><br/>jsonValue=:]<br/>\u00a0<br/>\u00a0<br/>require<span class=\"st_h\">'strings'</span><br/>jsonSer2=: <a class=\"__cf_email__\" data-cfemail=\"7a10091514291f084b3a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>&lt;\"<span class=\"nu0\">_1</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>&gt;.#@$-1:<span class=\"sy0\">))</span><br/>jsonSer1=: <span class=\"st_h\">']'</span> ,~ <span class=\"st_h\">'['</span> }:@;@; <span class=\"sy0\">(</span><span class=\"st_h\">','</span> ,~ jsonSerialize<span class=\"sy0\">)</span>&amp;.&gt;<br/>jsonSer0=: <span class=\"st_h\">'\"'</span>, <a class=\"__cf_email__\" data-cfemail=\"86ecf5e9e8c3f5e5c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:\":, <span class=\"st_h\">'\"'</span>\"<span class=\"nu0\">_</span><br/>jsonEsc=: rplc&amp;<span class=\"sy0\">(</span>&lt;;.<span class=\"nu0\">_1</span><span class=\"st_h\">' \\ \\\\ \" \\\"'</span><span class=\"sy0\">)</span><br/>jsonSerialize=:jsonSer0`<a class=\"__cf_email__\" data-cfemail=\"cfa5bca0a19caabdfd8fe1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>*@L.<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">com.google.gson.Gson</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> JsonExample <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tGson gson <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Gson<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> json <span class=\"sy0\">=</span> <span class=\"st0\">\"{ <span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: 1, <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: [ <span class=\"es0\">\\\"</span>10<span class=\"es0\">\\\"</span>, <span class=\"es0\">\\\"</span>apples<span class=\"es0\">\\\"</span>] }\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tMyJsonObject obj <span class=\"sy0\">=</span> gson.<span class=\"me1\">fromJson</span><span class=\"br0\">(</span>json, MyJsonObject.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>obj.<span class=\"me1\">getFoo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> bar <span class=\"sy0\">:</span> obj.<span class=\"me1\">getBar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>bar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tobj <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MyJsonObject<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"20\"</span>, <span class=\"st0\">\"oranges\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tjson <span class=\"sy0\">=</span> gson.<span class=\"me1\">toJson</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> MyJsonObject <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> foo<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> bar<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> MyJsonObject<span class=\"br0\">(</span><span class=\"kw4\">int</span> foo, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> bar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">foo</span> <span class=\"sy0\">=</span> foo<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">bar</span> <span class=\"sy0\">=</span> bar<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getFoo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> foo<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> getBar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> bar<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> JSON.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> sample <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"blue\"</span><span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ocean\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"water\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> json_string <span class=\"sy0\">=</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\"> . </pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\"># Pkg.add(\"JSON\") ... an external library http://docs.julialang.org/en/latest/packages/packagelist/<br/>using JSON<br/>\u00a0<br/>sample = Dict()<br/>sample[\"blue\"] = [1, 2]<br/>sample[\"ocean\"] = \"water\"<br/>\u00a0<br/>@show sample jsonstring = json(sample)<br/>@show jsonobj = JSON.parse(jsonstring)<br/>\u00a0<br/>@assert jsonstring == \"{\\\"ocean\\\":\\\"water\\\",\\\"blue\\\":[1,2]}\"<br/>@assert jsonobj == Dict(\"ocean\" =&gt; \"water\", \"blue\" =&gt; [1, 2])<br/>@assert typeof(jsonobj) == Dict{String, Any}</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.21</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> JsonObject<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> foo<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bar<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> JsonObject2<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ocean<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blue<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// JSON to object</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data<span class=\"sy0\">:</span> JsonObject <span class=\"sy0\">=</span> JSON.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"{ \"</span>foo<span class=\"st0\">\": 1, \"</span>bar<span class=\"st0\">\": [\"</span><span class=\"nu0\">10</span><span class=\"st0\">\", \"</span>apples<span class=\"st0\">\"] }\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// object to JSON</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data2 <span class=\"sy0\">=</span> JsonObject2<span class=\"br0\">(</span><span class=\"st0\">\"water\"</span>, arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>data2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 35, "block": "<pre class=\"text highlighted_source\">// Javascript objects are represented by maps in Lasso<br/>local(mymap = map(<br/>\t'success'\t= true,<br/>\t'numeric'\t= 11,<br/>\t'string'\t= 'Eleven'<br/>))<br/>\u00a0<br/>json_serialize(#mymap) // {\"numeric\": 11,\"string\": \"Eleven\",\"success\": true}<br/>'&lt;br /&gt;'<br/>\u00a0<br/>// Javascript arrays are represented by arrays<br/>local(opendays = array(<br/>\t'Monday',<br/>\t'Tuesday'<br/>))<br/>\u00a0<br/>local(closeddays = array(<br/>\t'Wednesday',<br/>\t'Thursday',<br/>\t'Friday'<br/>))<br/>\u00a0<br/>json_serialize(#opendays) // [\"Monday\", \"Tuesday\"]<br/>'&lt;br /&gt;'<br/>json_serialize(#closeddays) // [\"Wednesday\", \"Thursday\", \"Friday\"]<br/>'&lt;br /&gt;'<br/>\u00a0<br/>#mymap -&gt; insert('Open' = #opendays)<br/>#mymap -&gt; insert('Closed' = #closeddays)<br/>\u00a0<br/>local(myjson = json_serialize(#mymap))<br/>#myjson // {\"Closed\": [\"Wednesday\", \"Thursday\", \"Friday\"],\"numeric\": 11,\"Open\": [\"Monday\", \"Tuesday\"],\"string\": \"Eleven\",\"success\": true}<br/>'&lt;br /&gt;'<br/>\u00a0<br/>json_deserialize(#myjson) // map(Closed = array(Wednesday, Thursday, Friday), numeric = 11, Open = array(Monday, Tuesday), string = Eleven, success = true)</pre>"}, {"lang": "LFE", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">jiffy</span> encode <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> '<span class=\"st0\">\"apple\"</span> 'true <span class=\"nu0\">3.14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 45, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//--------------------------------------</span><br/><span class=\"co1\">// Simple (unsafe) JSON decoder based on eval()</span><br/><span class=\"co1\">// @param {string} json</span><br/><span class=\"co1\">// @return {any}</span><br/><span class=\"co1\">//--------------------------------------</span><br/><span class=\"kw1\">function</span> json_decode <span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> o<span class=\"sy0\">;</span><br/>  eval<span class=\"br0\">(</span><span class=\"st0\">'o='</span><span class=\"sy0\">+</span>json<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> _json_decode_val<span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> _json_decode_val <span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>o<span class=\"sy0\">==</span><span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"kw1\">typeof</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"object\"</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>o <span class=\"kw1\">instanceof</span> <span class=\"kw4\">Array</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> v <span class=\"sy0\">=</span> list<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> cnt <span class=\"sy0\">=</span> o.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>cnt<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          v.<span class=\"me1\">add</span><span class=\"br0\">(</span>_json_decode_val<span class=\"br0\">(</span>o<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> v <span class=\"sy0\">=</span> propList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> o<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>          v.<span class=\"me1\">setAProp</span><span class=\"br0\">(</span>_json_decode_val<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">,</span> _json_decode_val<span class=\"br0\">(</span>o<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"string\"</span><span class=\"sy0\">:</span><br/>      <span class=\"co1\">// optional support of special Lingo data type 'symbol' unknown to JavaScript</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>o.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"st0\">'__sym__'</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> symbol<span class=\"br0\">(</span>o.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> _json_escape_string <span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> hash<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span><span class=\"es0\">\\\\</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>/\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>n\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>t\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\r</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>r\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\b</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\f</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>f\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span><span class=\"es0\">\\\"</span>\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> patt <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> hash<span class=\"br0\">)</span> patt<span class=\"sy0\">+=</span>i<span class=\"sy0\">;</span>patt<span class=\"sy0\">+=</span><span class=\"st0\">\"]\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span>RegExp<span class=\"br0\">(</span>patt<span class=\"sy0\">,</span> <span class=\"st0\">\"g\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> hash<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 38, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> json <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"json\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> json_data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">[</span><br/>    <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">3.14159</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"st0\">\"apples\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bananas\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"cherries\"</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"He\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">:</span> null<span class=\"sy0\">,</span> <span class=\"st0\">\"Li\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    null<span class=\"sy0\">,</span><br/>    <span class=\"kw4\">true</span><span class=\"sy0\">,</span><br/>    <span class=\"kw4\">false</span><br/><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Original JSON: \"</span> <span class=\"sy0\">..</span> json_data<span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> data <span class=\"sy0\">=</span> json<span class=\"sy0\">.</span>decode<span class=\"br0\">(</span>json_data<span class=\"br0\">)</span><br/>json<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>printValue<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> <span class=\"st0\">'Lua'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"JSON re-encoded: \"</span> <span class=\"sy0\">..</span> json<span class=\"sy0\">.</span>encode<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> data <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">3.14159</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"apples\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"bananas\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"cherries\"</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><br/>        H <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        He <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>        X <span class=\"sy0\">=</span> json<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>null<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Li <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    json<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>null<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw4\">true</span><span class=\"sy0\">,</span><br/>    <span class=\"kw4\">false</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"JSON from new Lua data: \"</span> <span class=\"sy0\">..</span> json<span class=\"sy0\">.</span>encode<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 113, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MODULE A {<br/>      \\\\ Process data in json format<br/>\u00a0<br/>      \\\\ We can load from external file with Inline \"libName\"<br/>      \\\\ or multiple files Inline \"file1\" &amp;&amp; \"file2\"<br/>      \\\\ but here we have the library in a module<br/>      Inline Code Lib1<br/>      \\\\ So now we make a Parser object (a group type in M2000)<br/>      Parser=ParserClass()<br/>      \\\\ We can display any function, module that is public and known list<br/>      Modules\u00a0?<br/>      \\\\ And this are all known variables (or and objects)<br/>      List\u00a0!<br/>      Document json$<br/>      \\\\ We can load from file<br/>      \\\\ Load.Doc json$, \"alfa.json\"<br/>      json$={{<br/>            \"alfa\":-0.11221e+12,<br/>            \"array\"\u00a0: [<br/>                  -0.67,<br/>                  \"alfa1\",<br/>                  [<br/>                        10,<br/>                        20<br/>                  ],<br/>                  \"beta1\",<br/>                  1.21e12,<br/>                  21.12145,<br/>                  \"ok\"<br/>            ],<br/>            \"delta\": false, \"epsilon\"\u00a0: true, \"Null Value\"\u00a0: null<br/>      }}<br/>      Save.Doc json$, \"json2.json\"    \\\\ by default in Utf-8 with BOM<br/>      \\\\ just show multiline text<br/>      \\\\ Report display lines and stop after 3/4 of console height lines<br/>      \\\\ just press a key or click mouse button<br/>      Report json$<br/>      \\\\ so now we get text to a new object<br/>      alfa=Parser.Eval(json$)<br/>      \\\\ check it<br/>      Print Type$(alfa) ' it is a group<br/>      Print \"alfa.type$=\";alfa.type$ \\\\ this is a read only property<br/>\u00a0<br/>      Report \"as one line\"<br/>      Report Parser.Ser$(alfa, 0)<br/>\u00a0<br/>      Report \"as multiline\"<br/>      Report Parser.Ser$(alfa, 1)<br/>\u00a0<br/>      Print \"Using Print\"<br/>      Print Parser.ReadAnyString$(alfa)<br/>\u00a0<br/>      Print \"Value for alfa, id alfa\"<br/>      Print Parser.ReadAnyString$(alfa,\"alfa\")<br/>      Report \"as multiline\"<br/>      Report Parser.Ser$(Parser.Eval(Parser.ReadAnyString$(alfa,\"array\", 2)), 1)<br/>      \\\\ We get a copy of an array as a Group (a group which return an array)<br/>      Alfa3=Parser.Eval(Parser.ReadAnyString$(alfa,\"array\", 2))<br/>      \\\\ First value is for actual object, second value is a readonly property of this object<br/>      Print type$(Alfa3), Alfa3.type$<br/>      Dim B()<br/>      \\\\ Now Alfa3 run Value part and pass a pointer of array<br/>      \\\\  B() is an array and here take a pointer to Alfa3 array (as value of Alfa3)<br/>      B()=Alfa3<br/>      \\\\ each() make an iterator for B()<br/>      N=each(B())<br/>      While N {<br/>            \\\\ Using B() we get values always. but if we have \"object\" or \"array\" then Print prints items **<br/>            Print B(N^)<br/>      }<br/>      \\\\ Print show here nothing because if value is object then \"print\" just leave a column and continue to next one<br/>      Print B()<br/>      \\\\ we have to use Group() to get group not value of group (if any).<br/>      \\\\ Group() works for \"named\" group, not for stored in an array or an inventory or a stack<br/>      Print Parser.StringValue$(Group(Alfa3), 0)<br/>      Print Parser.StringValue$(Group(Alfa3), 1)<br/>      \\\\ Now we want to pass a new value<br/>      \\\\ Interpreter want to match type of expression from left side to right side<br/>      \\\\ Because Parser.StringValue$ is actual a Group (As property),<br/>      \\\\ we have a second linked name:  Parser.StringValue<br/>      \\\\ we have to use Parser.StringValue()<br/>      \\\\ and all values must be groups, as those provided by Parser<br/>      Parser.StringValue(Group(Alfa3), 1)=Parser.Numeric(1234)<br/>      Print Parser.StringValue$(Group(Alfa3), 1)<br/>      Print Parser.StringValue$(Group(Alfa), \"array\", 2, 0)<br/>      \\\\ we have to use Parser.StringValue$()<br/>      Parser.StringValue$(Group(Alfa), \"array\", 2, 0)=Parser.JString$(\"Changed to String\")<br/>      Print Parser.StringValue$(Group(Alfa), \"array\", 2,0)<br/>      Try ok {<br/>            Print Parser.StringValue$(Group(Alfa), \"array\", 2)<br/>      }<br/>      If Error or not ok Then Print Error$<br/>      Parser.StringValue.Add = True<br/>      Parser.StringValue$(Group(Alfa), \"array\", 2, 10)=Parser.JString$(\"Changed to String 2\")<br/>      Parser.StringValue(Group(Alfa), \"Last value\")=Parser.Boolean(true)<br/>      Report \"as multiline\"<br/>      Report Parser.Ser$(alfa3, 1)<br/>      Report Parser.Ser$(alfa, 1)<br/>      Parser.StringValue.Add = False<br/>      Parser.StringValue.Del = True<br/>      Parser.StringValue(Group(Alfa), \"array\", 0)=Parser.Null()<br/>      Parser.StringValue(Group(Alfa), \"delta\")=Parser.Null()<br/>      Parser.StringValue.Del = False<br/>      For Parser {<br/>            .StringValue(Group(Alfa), \"array\", 1,5)=.Arr((.Numeric(10), .Jstring$(\"ok 20\"), .Boolean(true)))<br/>      }<br/>      Report Parser.Ser$(alfa, 1)<br/>\u00a0<br/>}<br/>// call A<br/>A<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt; JSON:-ParseString(\"[{\\\"tree\\\": \\\"maple\\\", \\\"count\\\": 21}]\");<br/>       [table([\"tree\" = \"maple\", \"count\" = 21])]<br/>&gt; JSON:-ToString( [table([\"tree\" = \"maple\", \"count\" = 21])] );<br/>       \"[{\\\"count\\\": 21, \\\"tree\\\": \\\"maple\\\"}]\"</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data = ImportString[\"{ \\\"foo\\\": 1, \\\"bar\\\": [10, \\\"apples\\\"] }\",\"JSON\"]<br/>ExportString[data, \"JSON\"]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 9, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; jsondecode<span class=\"br0\">(</span><span class=\"co2\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> = <br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/struct.html\"><span class=\"kw2\">struct</span></a> with fields:<br/>\u00a0<br/>    foo: <span class=\"nu0\">1</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bar.html\"><span class=\"kw2\">bar</span></a>: <span class=\"br0\">{</span><span class=\"nu0\">2</span>\u00d7<span class=\"nu0\">1</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cell.html\"><span class=\"kw2\">cell</span></a><span class=\"br0\">}</span><br/>&gt;&gt; jsonencode<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/><span class=\"br0\">{</span>\"foo\":<span class=\"nu0\">1</span>,\"bar\":<span class=\"br0\">[</span><span class=\"nu0\">10</span>,\"apples\"<span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "NetRexx", "loc": 138, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/><span class=\"kw1\">import</span> org.<span class=\"me0\">json</span>.<span class=\"me0\">JSONObject</span><br/><span class=\"kw1\">import</span> org.<span class=\"me0\">json</span>.<span class=\"me0\">JSONArray</span><br/><span class=\"kw1\">import</span> org.<span class=\"me0\">json</span>.<span class=\"me0\">JSONTokener</span><br/><span class=\"kw1\">import</span> org.<span class=\"me0\">json</span>.<span class=\"me0\">JSONException</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Using library from json.org <br/> *<br/> * @see http://www.json.org/java/index.html<br/> */</span><br/><span class=\"kw1\">class</span> RJson01 <span class=\"kw2\">public</span><br/>\u00a0<br/>  <span class=\"kw1\">properties</span> <span class=\"kw2\">private</span> <span class=\"kw2\">constant</span><br/>    JSON_DWARFS = <span class=\"st0\">''</span> -<br/>      <span class=\"st0\">'{\\n'</span> -<br/>      <span class=\"st0\">'  \"F1937_1\"\u00a0: {\\n'</span> -<br/>      <span class=\"st0\">'    \"title\" \u00a0: \"Snow White and the Seven Dwarfs\",\\n'</span> -<br/>      <span class=\"st0\">'    \"year\"  \u00a0: 1937,\\n'</span> -<br/>      <span class=\"st0\">'    \"medium\"\u00a0: \"film\",\\n'</span> -<br/>      <span class=\"st0\">'    \"dwarfs\"\u00a0: [ \"Grumpy\", \"Happy\", \"Sleepy\", \"Bashful\", \"Sneezy\", \"Dopey\", \"Doc\" ]\\n'</span> -<br/>      <span class=\"st0\">'  },\\n'</span> -<br/>      <span class=\"st0\">'  \"F2012_1\"\u00a0: {\\n'</span> -<br/>      <span class=\"st0\">'    \"title\" \u00a0: \"Mirror, Mirror\",\\n'</span> -<br/>      <span class=\"st0\">'    \"year\"  \u00a0: 2012,\\n'</span> -<br/>      <span class=\"st0\">'    \"medium\"\u00a0: \"film\",\\n'</span> -<br/>      <span class=\"st0\">'    \"dwarfs\"\u00a0: [ \"Grimm\", \"Butcher\", \"Wolf\", \"Napoleon\", \"Half Pint\", \"Grub\", \"Chuckles\" ]\\n'</span> -<br/>      <span class=\"st0\">'  },\\n'</span> -<br/>      <span class=\"st0\">'}'</span><br/>\u00a0<br/>      <span class=\"coMULTI\">/**<br/>       * A bean that looks like the following JSON<br/>       * &lt;pre&gt;<br/>       * {<br/>       *   \"F2012_2\"\u00a0: {<br/>       *     \"title\" \u00a0: \"Snow White &amp; the Huntsman\",<br/>       *     \"year\"  \u00a0: 2012, <br/>       *     \"medium\"\u00a0: \"film\",<br/>       *     \"dwarfs\"\u00a0: [ \"Beith\", \"Quert\", \"Muir\", \"Coll\", \"Duir\", \"Gus\", \"Gort\", \"Nion\" ]<br/>       *   }<br/>       * }<br/>       * &lt;/pre&gt;<br/>       */</span><br/>      SAMPLE_BEAN = DwarfBean<span class=\"br0\">(</span> -<br/>        <span class=\"st0\">\"F2012_2\"</span>, -<br/>        <span class=\"st0\">\"Snow White &amp; the Huntsman\"</span>, -<br/>        Long<span class=\"br0\">(</span><span class=\"nu0\">2012</span><span class=\"br0\">)</span>, -<br/>        <span class=\"st0\">\"film\"</span>, -<br/>        Arrays.<span class=\"me0\">asList</span><span class=\"br0\">(</span><span class=\"br0\">[</span>String <span class=\"st0\">\"Beith\"</span>, <span class=\"st0\">\"Quert\"</span>, <span class=\"st0\">\"Muir\"</span>, <span class=\"st0\">\"Coll\"</span>, <span class=\"st0\">\"Duir\"</span>, <span class=\"st0\">\"Gus\"</span>, <span class=\"st0\">\"Gort\"</span>, <span class=\"st0\">\"Nion\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> -<br/>        <span class=\"br0\">)</span><br/>\u00a0<br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    <span class=\"kw1\">say</span> json2bean<span class=\"br0\">(</span>JSON_DWARFS<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span><br/>    <span class=\"kw1\">say</span> bean2json<span class=\"br0\">(</span>SAMPLE_BEAN<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>method json2bean<span class=\"br0\">(</span>dwarfs<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> List<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">\"Make beans from this JSON string:\"</span><br/>    <span class=\"kw1\">say</span> dwarfs<br/>    jsonBeans = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span><br/>      jd = JSONObject<span class=\"br0\">(</span>JSONTokener<span class=\"br0\">(</span>dwarfs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      ns = JSONObject.<span class=\"me0\">getNames</span><span class=\"br0\">(</span>jd<span class=\"br0\">)</span><br/>      name = String<br/>      <span class=\"kw1\">loop</span> name over ns<br/>        dwarves = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        jn      = jd.<span class=\"me0\">getJSONObject</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>        title   = jn.<span class=\"me0\">getString</span><span class=\"br0\">(</span><span class=\"st0\">'title'</span><span class=\"br0\">)</span><br/>        year    = Long<span class=\"br0\">(</span>jn.<span class=\"me0\">getLong</span><span class=\"br0\">(</span><span class=\"st0\">'year'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        medium  = jn.<span class=\"me0\">getString</span><span class=\"br0\">(</span><span class=\"st0\">'medium'</span><span class=\"br0\">)</span><br/>        dwa     = jn.<span class=\"me0\">getJSONArray</span><span class=\"br0\">(</span><span class=\"st0\">'dwarfs'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">loop</span> di = <span class=\"nu0\">0</span> to dwa.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>          dwarves.<span class=\"me0\">add</span><span class=\"br0\">(</span>dwa.<span class=\"me0\">getString</span><span class=\"br0\">(</span>di<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span> di<br/>        jb = DwarfBean<span class=\"br0\">(</span>name, title, year, medium, dwarves<span class=\"br0\">)</span><br/>        jsonBeans.<span class=\"me0\">add</span><span class=\"br0\">(</span>jb.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> name<br/>    <span class=\"kw3\">catch</span> ex = JSONException<br/>      ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> jsonBeans<br/>\u00a0<br/>method bean2json<span class=\"br0\">(</span>sb = DwarfBean<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> String<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Make JSONObject from this bean:\"</span><br/>  <span class=\"kw1\">say</span> sb<br/>  jsonString = String<br/>  <span class=\"kw1\">do</span><br/>    jd = JSONObject<span class=\"br0\">(</span>sb<span class=\"br0\">)</span><br/>    jo = JSONObject<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    jo = jo.<span class=\"me0\">put</span><span class=\"br0\">(</span>sb.<span class=\"me0\">keyGet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, jd<span class=\"br0\">)</span><br/>    jsonString = jo.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">catch</span> ex = JSONException<br/>    ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> jsonString<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RJson01.<span class=\"me0\">DwarfBean</span> <span class=\"kw2\">public</span> <span class=\"kw2\">binary</span><br/>  <span class=\"kw1\">properties</span> <span class=\"kw2\">private</span><br/>    key    = String <span class=\"co1\">-- not part of bean</span><br/>  <span class=\"kw1\">properties</span> indirect<br/>    title  = String<br/>    year   = Long<br/>    medium = String<br/>    dwarfs = List<br/>\u00a0<br/>  method DwarfBean<span class=\"br0\">(</span>key_ = String null, title_ = String null, year_ = Long null, medium_ = String null, dwarfs_ = List null<span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    keyPut<span class=\"br0\">(</span>key_<span class=\"br0\">)</span><br/>    setTitle<span class=\"br0\">(</span>title_<span class=\"br0\">)</span><br/>    setYear<span class=\"br0\">(</span>year_<span class=\"br0\">)</span><br/>    setMedium<span class=\"br0\">(</span>medium_<span class=\"br0\">)</span><br/>    setDwarfs<span class=\"br0\">(</span>dwarfs_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  method keyPut<span class=\"br0\">(</span>key_ = String<span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    key = key_<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  method keyGet<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">returns</span> String<br/>    <span class=\"kw1\">return</span> key<br/>\u00a0<br/>  method <span class=\"kw6\">toString</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> String<br/>    ts = StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span>String.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%<a class=\"__cf_email__\" data-cfemail=\"91e2d1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%08x \"</span>, <span class=\"br0\">[</span>Object this.<span class=\"me0\">getClass</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">getSimpleName</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, Integer<span class=\"br0\">(</span><span class=\"kw6\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'['</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'key='</span>String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>keyGet<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'title='</span>String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>getTitle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'year='</span>String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>getYear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'medium='</span>String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>getMedium<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">'dwarfs='</span>String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>getDwarfs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ts.<span class=\"me0\">append</span><span class=\"br0\">(</span><span class=\"st0\">']'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> ts.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import json<br/>\u00a0<br/>var data = parseJson(\"\"\"{ \"foo\": 1, \"bar\": [10, \"apples\"] }\"\"\")<br/>echo data[\"foo\"]<br/>echo data[\"bar\"]<br/>\u00a0<br/>var js =\u00a0%* [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Susan\", \"age\": 31}]<br/>echo js</pre>"}, {"lang": "Objeck", "loc": 15, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Struct<span class=\"sy0\">;</span><br/><span class=\"kw1\">use</span> JSON<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Json <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      parser <span class=\"sy0\">:=</span> JSONParser<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"{ <span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: 1, <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: [10, <span class=\"es0\">\\\"</span>apples<span class=\"es0\">\\\"</span>] }\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      root <span class=\"sy0\">:=</span> parser<span class=\"sy0\">-&gt;</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>root <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        root<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 15, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>jsonString <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"{ <span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: 1, <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: [10, <span class=\"es0\">\\\"</span>apples<span class=\"es0\">\\\"</span>] }\"</span>;<br/><span class=\"kw4\">id</span> obj <span class=\"sy0\">=</span> <span class=\"br0\">[</span>NSJSONSerialization <br/>    JSONObjectWithData<span class=\"sy0\">:</span> <span class=\"br0\">[</span>jsonString dataUsingEncoding<span class=\"sy0\">:</span> NSUTF8StringEncoding<span class=\"br0\">]</span><br/>               options<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>                 error<span class=\"sy0\">:</span> <span class=\"kw2\">NULL</span><span class=\"br0\">]</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, obj<span class=\"br0\">)</span>;<br/>\u00a0<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/\"><span class=\"kw5\">NSDictionary</span></a> <span class=\"sy0\">*</span>dict <span class=\"sy0\">=</span> @<span class=\"br0\">{</span> <span class=\"co3\">@</span><span class=\"st0\">\"blue\"</span><span class=\"sy0\">:</span> @<span class=\"br0\">[</span>@1, @2<span class=\"br0\">]</span>, <span class=\"co3\">@</span><span class=\"st0\">\"ocean\"</span><span class=\"sy0\">:</span> <span class=\"co3\">@</span><span class=\"st0\">\"water\"</span><span class=\"br0\">}</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/\"><span class=\"kw5\">NSData</span></a> <span class=\"sy0\">*</span>jsonData <span class=\"sy0\">=</span> <span class=\"br0\">[</span>NSJSONSerialization dataWithJSONObject<span class=\"sy0\">:</span> dict<br/>                                                   options<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>                                                     error<span class=\"sy0\">:</span> <span class=\"kw2\">NULL</span><span class=\"br0\">]</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>jsonString2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> alloc<span class=\"br0\">]</span> initWithData<span class=\"sy0\">:</span> jsonData<br/>                                              encoding<span class=\"sy0\">:</span> NSUTF8StringEncoding<span class=\"br0\">]</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, jsonString2<span class=\"br0\">)</span>;<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 24, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> json item <span class=\"sy0\">=</span><br/>  <span class=\"sy0\">&lt;</span> name    <span class=\"st0\">\"Name\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    kingdom <span class=\"st0\">\"Kingdom\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    phylum  <span class=\"st0\">\"Phylum\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    class_  <span class=\"st0\">\"Class\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    order   <span class=\"st0\">\"Order\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    family  <span class=\"st0\">\"Family\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;</span><br/>    tribe   <span class=\"st0\">\"Tribe\"</span><span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><br/>  <span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"<br/>  {<br/>    \\\"</span>Name\\<span class=\"st0\">\":    \\\"</span>camel\\<span class=\"st0\">\",<br/>    \\\"</span>Kingdom\\<span class=\"st0\">\": \\\"</span>Animalia\\<span class=\"st0\">\",<br/>    \\\"</span>Phylum\\<span class=\"st0\">\":  \\\"</span>Chordata\\<span class=\"st0\">\",<br/>    \\\"</span><span class=\"kw1\">Class</span>\\<span class=\"st0\">\":   \\\"</span>Mammalia\\<span class=\"st0\">\",<br/>    \\\"</span>Order\\<span class=\"st0\">\":   \\\"</span>Artiodactyla\\<span class=\"st0\">\",<br/>    \\\"</span>Family\\<span class=\"st0\">\":  \\\"</span>Camelidae\\<span class=\"st0\">\",<br/>    \\\"</span>Tribe\\<span class=\"st0\">\":   \\\"</span>Camelini\\<span class=\"st0\">\"<br/>  }\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> Json_io<span class=\"sy0\">.</span>json_of_string str <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>Json_io<span class=\"sy0\">.</span>string_of_json j<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Oforth", "loc": 10, "block": "<pre class=\"text highlighted_source\">&gt;{\"parents\":[\"Otmar Gutmann\", \"Silvio Mazzola\"], \"name\":\"Pingu\", \"born\":1986} .s<br/>[1] (Json) {\"parents\"\u00a0: [\"Otmar Gutmann\", \"Silvio Mazzola\"], \"name\"\u00a0: \"Pingu\", \"born\"\u00a0: 1986 }<br/>ok<br/>&gt;asString .s<br/>[1] (String) {\"parents\"\u00a0: [\"Otmar Gutmann\", \"Silvio Mazzola\"], \"name\"\u00a0: \"Pingu\", \"born\"\u00a0:1986 }<br/>ok<br/>&gt;perform .s<br/>[1] (Json) {\"parents\"\u00a0: [\"Otmar Gutmann\", \"Silvio Mazzola\"], \"name\"\u00a0: \"Pingu\", \"born\"\u00a0: 1986 }<br/>ok<br/>&gt;</pre>"}, {"lang": "OpenEdge/Progress", "loc": 34, "block": "<pre class=\"progress highlighted_source\"><span class=\"coMULTI\">/* using a longchar to read and write to, can also be file, memptr, stream */</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> lcjson <span class=\"kw3\">AS</span> <span class=\"kw4\">LONGCHAR</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* temp-table defines object, can also be dataset */</span><br/><span class=\"kw1\">DEFINE TEMP-TABLE</span> example<br/>   <span class=\"kw4\">FIELD</span> blue  <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span> <span class=\"kw4\">EXTENT</span> <span class=\"nu0\">2</span><br/>   <span class=\"kw4\">FIELD</span> ocean <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/>   <span class=\"sy0\">.</span><br/><span class=\"kw1\">CREATE</span> example<span class=\"sy0\">.</span> <br/><span class=\"kw1\">ASSIGN</span> <br/>   example<span class=\"sy0\">.</span>blue <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span><br/>   example<span class=\"sy0\">.</span>blue <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span>  <span class=\"nu0\">2</span><br/>   example<span class=\"sy0\">.</span>ocean     <span class=\"sy0\">=</span>  <span class=\"st0\">\"water\"</span><br/>   <span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/* write-json to put result in lcjson, true indicates formatted */</span><br/><span class=\"kw1\">TEMP-TABLE</span> example<span class=\"sy0\">:</span><span class=\"kw4\">DEFAULT-BUFFER-HANDLE</span><span class=\"sy0\">:</span><span class=\"me0\">WRITE</span><span class=\"sy0\">-</span>JSON<span class=\"br0\">(</span> <span class=\"st0\">\"LONGCHAR\"</span><span class=\"sy0\">,</span> lcjson<span class=\"sy0\">,</span> <span class=\"kw2\">TRUE</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* display result */</span><br/><span class=\"kw1\">MESSAGE</span><br/>   <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> lcjson <span class=\"br0\">)</span><br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* empty results */</span><br/><span class=\"kw1\"><span class=\"kw4\">EMPTY</span> TEMP-TABLE</span> example<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* read-json to get result from lcjson */</span><br/><span class=\"kw1\">TEMP-TABLE</span> example<span class=\"sy0\">:</span><span class=\"kw4\">DEFAULT-BUFFER-HANDLE</span><span class=\"sy0\">:</span><span class=\"me0\">READ</span><span class=\"sy0\">-</span>JSON<span class=\"br0\">(</span> <span class=\"st0\">\"LONGCHAR\"</span><span class=\"sy0\">,</span> lcjson <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FIND</span> example<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/* display results */</span><br/><span class=\"kw1\">MESSAGE</span><br/>   example<span class=\"sy0\">.</span>blue <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> example<span class=\"sy0\">.</span>blue <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">SKIP</span><br/>   example<span class=\"sy0\">.</span>ocean<br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 7, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"br0\">[</span>JSON<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Module<span class=\"sy0\">.</span>link <span class=\"br0\">[</span><span class=\"st0\">'JSON.ozf'</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>show <span class=\"br0\">{</span>JSON<span class=\"sy0\">.</span>decode <span class=\"st0\">\"{ <span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: 1, <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>: [10, <span class=\"es0\">\\\"</span>apples<span class=\"es0\">\\\"</span>] }\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  Sample = object<span class=\"br0\">(</span>blue:array<span class=\"br0\">(</span>1 2<span class=\"br0\">)</span> ocean:<span class=\"st0\">\"water\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>JSON<span class=\"sy0\">.</span>encode Sample<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> JSON<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$data</span> <span class=\"sy0\">=</span> decode_json<span class=\"br0\">(</span><span class=\"st_h\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$sample</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> blue <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ocean <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"water\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$json_string</span> <span class=\"sy0\">=</span> encode_json<span class=\"br0\">(</span><span class=\"re0\">$sample</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> JSON<span class=\"sy0\">::</span><span class=\"me2\">Tiny</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$data</span> <span class=\"sy0\">=</span> from<span class=\"sy0\">-</span>json<span class=\"br0\">(</span><span class=\"st_h\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$sample</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> blue <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ocean <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"water\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$json_string</span> <span class=\"sy0\">=</span> to<span class=\"sy0\">-</span>json<span class=\"br0\">(</span><span class=\"re0\">$sample</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\JSON.exw<br/>-- =====================<br/>--<br/>include builtins/json.e<br/>\u00a0<br/>puts(1,\"roundtrip (10 examples):\\n\")<br/>sequence json_strings = {\"{\\\"this\\\":\\\"that\\\",\\\"age\\\":{\\\"this\\\":\\\"that\\\",\\\"age\\\":29}}\",<br/>                         \"1\",<br/>                         \"\\\"hello\\\"\",<br/>                         \"null\",<br/>                         \"[12]\",<br/>                         \"[null,12]\",<br/>                         \"[]\",<br/>                         \"{\\\"this\\\":\\\"that\\\",\\\"age\\\":29}\",<br/>                         \"{}\",<br/>                         \"[null,[null,12]]\"}<br/>\u00a0<br/>for i=1 to length(json_strings) do<br/>    string s = json_strings[i]<br/>    puts(1,s&amp;\"\\n\")<br/>    object json_object = parse_json(s)<br/>    puts(1,print_json(\"\",json_object,true)&amp;\"\\n\")<br/>    if not equal(print_json(\"\",json_object,true),s) then\u00a0?9/0 end if<br/>end for</pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/json_decode\"><span class=\"kw3\">json_decode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// dictionaries will be returned as objects</span><br/><span class=\"re0\">$data2</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/json_decode\"><span class=\"kw3\">json_decode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// dictionaries will be returned as arrays</span><br/>\u00a0<br/><span class=\"re0\">$sample</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"blue\"</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ocean\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"water\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$json_string</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$sample</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 49, "block": "<pre class=\"text highlighted_source\">(de checkJson (X Item)<br/>   (unless (= X Item)<br/>      (quit \"Bad JSON\" Item) ) )<br/>\u00a0<br/>(de readJson ()<br/>   (case (read \"_\")<br/>      (\"{\"<br/>         (make<br/>            (for (X (readJson)  (not (= \"}\" X))  (readJson))<br/>               (checkJson \":\" (readJson))<br/>               (link (cons X (readJson)))<br/>               (T (= \"}\" (setq X (readJson))))<br/>               (checkJson \",\" X) ) ) )<br/>      (\"[\"<br/>         (make<br/>            (link T)  # Array marker<br/>            (for (X (readJson)  (not (= \"]\" X))  (readJson))<br/>               (link X)<br/>               (T (= \"]\" (setq X (readJson))))<br/>               (checkJson \",\" X) ) ) )<br/>      (T<br/>         (let X @<br/>            (cond<br/>               ((pair X) (pack X))<br/>               ((and (= \"-\" X) (format (peek)))<br/>                  (- (read)) )<br/>               (T X) ) ) ) ) )<br/>\u00a0<br/>(de printJson (Item)  # For simplicity, without indentation<br/>   (cond<br/>      ((atom Item) (if Item (print @) (prin \"{}\")))<br/>      ((=T (car Item))<br/>         (prin \"[\")<br/>         (map<br/>            '((X)<br/>               (printJson (car X))<br/>               (and (cdr X) (prin \", \")) )<br/>            (cdr Item) )<br/>         (prin \"]\") )<br/>      (T<br/>         (prin \"{\")<br/>         (map<br/>            '((X)<br/>               (print (caar X))<br/>               (prin \": \")<br/>               (printJson (cdar X))<br/>               (and (cdr X) (prin \", \")) )<br/>            Item )<br/>         (prin \"}\") ) ) )</pre>"}, {"lang": "Pike", "loc": 13, "block": "<pre class=\"pike highlighted_source\">int main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Decoding</span><br/>\tstring json <span class=\"sy0\">=</span> <span class=\"st0\">\"{<span class=\"es0\">\\\"</span>cake<span class=\"es0\">\\\"</span>:[<span class=\"es0\">\\\"</span>desu<span class=\"es0\">\\\"</span>,1,2.3],<span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>:1}\"</span><span class=\"sy0\">;</span><br/>\twrite<span class=\"br0\">(</span><span class=\"st0\">\"%O<span class=\"es0\">\\n</span>\"</span>, Standards.<span class=\"me1\">JSON</span>.<span class=\"me1\">decode</span><span class=\"br0\">(</span>json<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Encoding</span><br/>\tmapping m <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><br/>\t\t<span class=\"st0\">\"foo\"</span>: <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>\t\t<span class=\"st0\">\"bar\"</span>: <span class=\"st0\">\"hello\"</span><br/>\t<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\twrite<span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, Standards.<span class=\"me1\">JSON</span>.<span class=\"me1\">encode</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\"># JSON input is being stored in ordered hashtable.</span><br/><span class=\"co1\"># Ordered hashtable is available in PowerShell v3 and higher.</span><br/><span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"st0\">\"bar\"</span><span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">\"apples\"</span> <span class=\"br0\">}</span> <span class=\"sy0\">|</span> ConvertTo<span class=\"sy0\">-</span>Json<br/>\u00a0<br/><span class=\"co1\"># ConvertFrom-Json converts a JSON-formatted string to a custom object.</span><br/><span class=\"co1\"># If you use the Invoke-RestMethod cmdlet there is not need for the ConvertFrom-Json cmdlet</span><br/>Invoke<span class=\"sy0\">-</span>WebRequest <span class=\"sy0\">-</span>Uri <span class=\"st0\">\"http://date.jsontest.com\"</span> <span class=\"sy0\">|</span> ConvertFrom<span class=\"sy0\">-</span>Json<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 22, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span><span class=\"br0\">[</span> library<span class=\"br0\">(</span>http<span class=\"sy3\">/</span>json<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                library<span class=\"br0\">(</span>func<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>test_json<span class=\"br0\">(</span><span class=\"st_h\">'{\"widget\": { \"debug\": \"on\", \"window\": { \"title\": \"Sample Konfabulator Widget\", \"name\": \"main_window\", \"width\": 500, \"height\": 500 }, \"image\": { \"src\": \"Images/Sun.png\", \"name\": \"sun1\", \"hOffset\": 250, \"vOffset\": 250, \"alignment\": \"center\" }, \"text\": { \"data\": \"Click Here\", \"size\": 36, \"style\": \"bold\", \"name\": \"text1\", \"hOffset\": 250, \"vOffset\": 100, \"alignment\": \"center\", \"onMouseUp\": \"sun1.opacity = (sun1.opacity / 100) * 90;\" }}}'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>reading_JSON_term <span class=\"sy1\">:-</span><br/>    atom_json_dict<span class=\"br0\">(</span>test_json<span class=\"br0\">(</span>~<span class=\"br0\">)</span><span class=\"sy4\">,</span> Dict<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"co1\">%% This accomplishes reading in the JSON data</span><br/>    writeln<span class=\"br0\">(</span> <span class=\"st_h\">'JSON as Prolog dict: ~w~n'</span><br/>           $ Dict<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    writeln<span class=\"br0\">(</span> <span class=\"st_h\">'Access field \"widget.text.data\": ~s~n'</span><br/>           $ Dict<span class=\"sy4\">.</span>widget<span class=\"sy4\">.</span>text<span class=\"sy4\">.</span>data<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    writeln<span class=\"br0\">(</span> <span class=\"st_h\">'Alter field \"widget\": ~w~n'</span><br/>           $ Dict<span class=\"sy4\">.</span>put<span class=\"br0\">(</span>widget<span class=\"sy4\">,</span> \"Altered\"<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>searalize_a_JSON_term <span class=\"sy1\">:-</span><br/>    Dict <span class=\"sy6\">=</span> _<span class=\"br0\">{</span>book<span class=\"sy4\">:</span>_<span class=\"br0\">{</span>title<span class=\"sy4\">:</span>\"To Mock a Mocking Bird\"<span class=\"sy4\">,</span><br/>                    author<span class=\"sy4\">:</span>_<span class=\"br0\">{</span>first_name<span class=\"sy4\">:</span>\"Ramond\"<span class=\"sy4\">,</span><br/>                             last_name<span class=\"sy4\">:</span>\"Smullyan\"<span class=\"br0\">}</span><span class=\"sy4\">,</span><br/>                    publisher<span class=\"sy4\">:</span>\"Alfred A<span class=\"sy4\">.</span> Knopf\"<span class=\"sy4\">,</span><br/>                    year<span class=\"sy4\">:</span><span class=\"nu0\">1985</span><br/>                   <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy4\">,</span><br/>    json_write<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">current_output</span></a><span class=\"sy4\">,</span> Dict<span class=\"br0\">)</span><span class=\"sy4\">.</span> <span class=\"co1\">%% This accomplishes serializing the JSON object.</span></pre>"}, {"lang": "PureBasic", "loc": 34, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> CreateJSON<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  PB_Team_Members<span class=\"sy0\">=</span>SetJSONObject<span class=\"br0\">(</span>JSONValue<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONMember<span class=\"br0\">(</span>PB_Team_Members,<span class=\"st0\">\"PB_Team_Member_1\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"Frederic Laboureur\"</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONMember<span class=\"br0\">(</span>PB_Team_Members,<span class=\"st0\">\"PB_Team_Member_2\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"Andre Beer\"</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONMember<span class=\"br0\">(</span>PB_Team_Members,<span class=\"st0\">\"PB_Team_Member_3\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"Timo Harter\"</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">If</span> CreateJSON<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  Former_Team_Members<span class=\"sy0\">=</span>SetJSONArray<span class=\"br0\">(</span>JSONValue<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONElement<span class=\"br0\">(</span>Former_Team_Members<span class=\"br0\">)</span>,<span class=\"st0\">\"Richard Andersson\"</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONElement<span class=\"br0\">(</span>Former_Team_Members<span class=\"br0\">)</span>,<span class=\"st0\">\"Benny Sels\"</span><span class=\"br0\">)</span><br/>  SetJSONString<span class=\"br0\">(</span>AddJSONElement<span class=\"br0\">(</span>Former_Team_Members<span class=\"br0\">)</span>,<span class=\"st0\">\"Danilo Krahn\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"PureBasic - Team Members:\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>ComposeJSON<span class=\"br0\">(</span><span class=\"nu0\">1</span>,#PB_JSON_PrettyPrint<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"PureBasic - Former Team Members:\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>ComposeJSON<span class=\"br0\">(</span><span class=\"nu0\">2</span>,#PB_JSON_PrettyPrint<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"br0\">)</span>  <br/>\u00a0<br/>#DL<span class=\"sy0\">=</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>PB_Special_thanks$<span class=\"sy0\">=</span><span class=\"st0\">\"[ \"</span> <span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\"Gary Willoughby\"</span><span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\"Mark James\"</span><span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\"Neil Hodgson\"</span><span class=\"sy0\">+</span>#DL<span class=\"sy0\">+</span><span class=\"st0\">\" ]\"</span><br/><span class=\"kw1\">NewList</span> otherpersons.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> ParseJSON<span class=\"br0\">(</span><span class=\"nu0\">3</span>,PB_Special_thanks$<span class=\"br0\">)</span>  <br/>  ExtractJSONList<span class=\"br0\">(</span>JSONValue<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,otherpersons<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Pure Basic - and others:\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> otherpersons<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>otherpersons<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>JSONErrorMessage<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>JSONErrorPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>PB_Special_thanks$,JSONErrorPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>PB_Special_thanks$,JSONErrorPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> json<br/><span class=\"sy0\">&gt;&gt;&gt;</span> data <span class=\"sy0\">=</span> json.<span class=\"me1\">loads</span><span class=\"br0\">(</span><span class=\"st0\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> sample <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"blue\"</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ocean\"</span>: <span class=\"st0\">\"water\"</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> json_string <span class=\"sy0\">=</span> json.<span class=\"me1\">dumps</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> json_string<br/><span class=\"st0\">'{\"blue\": [1, 2], \"ocean\": \"water\"}'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> sample<br/><span class=\"br0\">{</span><span class=\"st0\">'blue'</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'ocean'</span>: <span class=\"st0\">'water'</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> data<br/><span class=\"br0\">{</span><span class=\"st0\">'foo'</span>: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'bar'</span>: <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">'apples'</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">library(rjson)<br/>data &lt;- fromJSON('{ \"foo\": 1, \"bar\": [10, \"apples\"] }')<br/>data</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require json)<br/>\u00a0<br/>(string-&gt;jsexpr<br/> \"{\\\"foo\\\":[1,2,3],\\\"bar\\\":null,\\\"baz\\\":\\\"blah\\\"}\")<br/>\u00a0<br/>(write-json '(1 2 \"three\" #hash((x . 1) (y . 2) (z . 3))))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 15, "block": "<pre class=\"rebol highlighted_source\">json-str: <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"menu\"</span>: <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"id\"</span>: <span class=\"st0\">\"file\"</span>,<br/>    <span class=\"st0\">\"string\"</span>: <span class=\"st0\">\"File:\"</span>,<br/>    <span class=\"st0\">\"number\"</span>: -<span class=\"nu0\">3</span>,<br/>    <span class=\"st0\">\"boolean\"</span>: true,<br/>    <span class=\"st0\">\"boolean2\"</span>: false,<br/>    <span class=\"st0\">\"null\"</span>: null,<br/>    <span class=\"st0\">\"array\"</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0.13</span>, null, true, false, <span class=\"st0\">\"\\t\\r\\n\"</span><span class=\"br0\">]</span>,<br/>    <span class=\"st0\">\"empty-string\"</span>: <span class=\"st0\">\"\"</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>res: json-to-rebol json-str<br/>js: rebol-to-json res<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'json'</span><br/>\u00a0<br/>ruby_obj = JSON.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">'{\"blue\": [1, 2], \"ocean\": \"water\"}'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> ruby_obj<br/>\u00a0<br/>ruby_obj<span class=\"br0\">[</span><span class=\"st0\">\"ocean\"</span><span class=\"br0\">]</span> = <span class=\"br0\">{</span> <span class=\"st0\">\"water\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"fishy\"</span>, <span class=\"st0\">\"salty\"</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span> JSON.<span class=\"me1\">generate</span><span class=\"br0\">(</span>ruby_obj<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> JSON.<span class=\"me1\">pretty_generate</span><span class=\"br0\">(</span>ruby_obj<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">extern crate rustc_serialize;<br/>\u00a0<br/>use rustc_serialize::json;<br/>\u00a0<br/>#[derive(RustcDecodable, RustcEncodable)]<br/>struct Penguin {<br/>    name\u00a0: String,<br/>    born\u00a0: i16<br/>}<br/>fn main() {<br/>    let pengu = Penguin { name\u00a0: \"pengu\".to_string(), born\u00a0: 1999 };<br/>    println!(\"{}\", json::encode(&amp;pengu).unwrap());<br/>    let pingu\u00a0: Penguin = json::decode(r##\"{\"name\":\"pingu\",\"born\":2001}\"##).unwrap();<br/>    assert_eq!(&amp;pingu.name, \"pingu\");<br/>    assert_eq!(pingu.born, 2001);<br/>}</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">parsing</span>.<span class=\"me1\">json</span>.<span class=\"br0\">{</span>JSON, JSONObject<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">parsing</span>.<span class=\"me1\">json</span>.<span class=\"br0\">{</span>JSON, JSONObject<span class=\"br0\">}</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> JSON.<span class=\"me1\">parseFull</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"{\"</span>foo<span class=\"st0\">\": \"</span>bar<span class=\"st0\">\"}\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>res0<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Any<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Some<span class=\"br0\">(</span>Map<span class=\"br0\">(</span>foo -<span class=\"sy0\">&gt;</span> bar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> JSONObject<span class=\"br0\">(</span>Map<span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>res1<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"foo\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 14, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use json<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> object<span class=\"sy0\">-</span>example<br/>  <span class=\"br0\">(</span>with<span class=\"sy0\">-</span>input<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"st0\">\"{<span class=\"es0\">\\\"</span>foo<span class=\"es0\">\\\"</span>: <span class=\"es0\">\\\"</span>bar<span class=\"es0\">\\\"</span>, <span class=\"es0\">\\\"</span>baz<span class=\"es0\">\\\"</span>: [1, 2, 3]}\"</span><br/>                          json<span class=\"sy0\">-</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>pp object<span class=\"sy0\">-</span>example<span class=\"br0\">)</span><br/><span class=\"co1\">; this prints #((\"foo\" . \"bar\") (\"baz\" 1 2 3))</span><br/>\u00a0<br/><span class=\"br0\">(</span>json<span class=\"sy0\">-</span><span class=\"kw1\">write</span> #<span class=\"br0\">(</span><span class=\"br0\">[</span>foo . bar<span class=\"br0\">]</span><br/>              <span class=\"br0\">[</span>baz   <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">[</span>qux . #<span class=\"br0\">(</span><span class=\"br0\">(</span>rosetta . code<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; this writes the following:</span><br/><span class=\"co1\">; {\"foo\": \"bar\", \"baz\": [1, 2, 3], \"qux\": {\"foo\": \"bar\"}}</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">var json = <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'JSON'</span><span class=\"br0\">)</span>.<span class=\"me1\">new</span>;<br/>var data = json.<span class=\"me1\">decode</span><span class=\"br0\">(</span><span class=\"st0\">'{\"blue\": [1, 2], \"ocean\": \"water\"}'</span><span class=\"br0\">)</span>;<br/>say data;<br/>data<span class=\"br0\">{</span>:ocean<span class=\"br0\">}</span> = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>water <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">%</span>w<span class=\"br0\">[</span>fishy salty<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>say json.<span class=\"me1\">encode</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re0\">NeoJSONReader</span> fromString: <span class=\"st0\">'{ \"foo\": 1, \"bar\": [10, \"apples\"] }'</span>.<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let jsonString = \"{ \\\"foo\\\": 1, \\\"bar\\\": [10, \\\"apples\\\"] }\"<br/>if let jsonData = jsonString.data(using: .utf8) {<br/>\tif let jsonObject: Any = try? JSONSerialization.jsonObject(with: jsonData, options: .allowFragments) {<br/>\t\tprint(\"Dictionary: \\(jsonObject)\")<br/>\t}<br/>}<br/>\u00a0<br/>let obj = [<br/>\t\"foo\": [1, \"Orange\"],<br/>\t\"bar\": 1<br/>] as [String\u00a0: Any]<br/>\u00a0<br/>if let objData = try? JSONSerialization.data(withJSONObject: obj, options: .prettyPrinted) {<br/>\tif let jsonString2 = String(data: objData, encoding: .utf8) {<br/>\t\tprint(\"JSON: \\(jsonString2)\")<br/>\t}<br/>}</pre>"}, {"lang": "Tcl", "loc": 5, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require json<br/><span class=\"kw1\">set</span> sample <span class=\"br0\">{</span><span class=\"br0\">{</span> <span class=\"st0\">\"foo\"</span>: <span class=\"nu0\">1</span>, <span class=\"st0\">\"bar\"</span>: <span class=\"br0\">[</span><span class=\"nu0\">10</span>, <span class=\"st0\">\"apples\"</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> parsed <span class=\"br0\">[</span>json::<span class=\"me1\">json2dict</span> <span class=\"re0\">$sample</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$parsed</span></pre>"}, {"lang": "TXR", "loc": 57, "block": "<pre class=\"text highlighted_source\">@(define value (v))@\\<br/>  @(cases)@\\<br/>    @(string v)@(or)@(num v)@(or)@(object v)@(or)@\\<br/>    @(keyword v)@(or)@(array v)@\\<br/>  @(end)@\\<br/>@(end)<br/>@(define ws)@/[\\n\\t ]*/@(end)<br/>@(define string (g))@\\<br/>  @(local s hex)@\\<br/>  @(ws)@\\<br/>  \"@(coll\u00a0:gap 0\u00a0:vars (s))@\\<br/>     @(cases)@\\<br/>       \\\"@(bind s \"&amp;quot;\")@(or)@\\<br/>       \\\\@(bind s \"\\\\\\\\\")@(or)@\\<br/>       \\/@(bind s \"\\\\/\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"1b795b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(bind s \"&amp;#8;\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"660026\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(bind s \"&amp;#12;\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"294769\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(bind s \"&amp;#10;\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"addfed\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(bind s \"&amp;#13;\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"1e6a5e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(bind s \"&amp;#9;\")@(or)@\\<br/>       \\<a class=\"__cf_email__\" data-cfemail=\"c8bd88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{hex /[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]/}@\\<br/>         @(bind s `&amp;#<a class=\"__cf_email__\" data-cfemail=\"dda59db5b8a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;`)@(or)@\\<br/>       @{s /[^\"\\\\]*/}@(filter\u00a0:to_html s)@\\<br/>     @(end)@\\<br/>     @(until)\"@\\<br/>   @(end)\"@\\<br/>  @(ws)@\\<br/>  @(cat s \"\")@\\<br/>  @(filter\u00a0:from_html s)@\\<br/>  @(bind g (\"S\" s))@\\<br/>@(end)<br/>@(define num (v))@\\<br/>  @(local n)@\\<br/>  @(ws)@{n /-?[0-9]+((\\.[0-9]+)?([Ee][+\\-]?[0-9]+)?)?/}@(ws)@\\<br/>  @(bind v (\"N\" n))@\\<br/>@(end)<br/>@(define keyword (v))@\\<br/>  @(local k)@\\<br/>  @(all)@(ws)@{k /true|false|null/}@(trailer)@/[^A-Za-z0-9_]/@(end)@(ws)@\\<br/>  @(bind v (\"K\" k))@\\<br/>@(end)<br/>@(define object (v))@\\<br/>  @(local p e pair)@\\<br/>  @(ws){@(ws)@(coll\u00a0:gap 0\u00a0:vars (pair))@\\<br/>                @(string p):@(value e)@/,?/@\\<br/>                @(bind pair (p e))@\\<br/>                @(until)}@\\<br/>             @(end)}@(ws)@\\<br/>  @(bind v (\"O\" pair))@\\<br/>@(end)<br/>@(define array (v))@\\<br/>  @(local e)@\\<br/>  @(ws)[@(ws)@(coll\u00a0:gap 0\u00a0:var (e))@(value e)@/,?/@(until)]@(end)]@(ws)@\\<br/>  @(bind v (\"A\" e))@\\<br/>@(end)<br/>@(freeform)<br/>@(maybe)@(value v)@(end)@badsyntax</pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">a,b:=Import(\"zklYAJL\");<br/>var [const] YAJL=a, toJSON=b;<br/>src:=<br/>#&lt;&lt;&lt;<br/>0'|{<br/>    \"pi\": 3.14,<br/>    \"large number\": 123456789123456791,<br/>    \"an array\": [<br/>        -1,<br/>        true,<br/>        false,<br/>        null,<br/>        \"foo\"<br/>    ]<br/>}|;<br/>#&lt;&lt;&lt;<br/>obj:=YAJL().write(src).close();<br/>// or obj:=src.pump(YAJL()).close(); // for example, from file or socket<br/>obj.println();</pre>"}]}