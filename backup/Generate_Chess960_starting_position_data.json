{"task": "Generate_Chess960_starting_position", "blocks": [{"lang": "AutoHotkey", "loc": 33, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>\tOut <span class=\"sy0\">.=</span> Chess960<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% RTrim<span class=\"br0\">(</span>Out<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>Chess960<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tP <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\tP<span class=\"br0\">[</span>K <span class=\"sy0\">:=</span> Rand<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2654<span class=\"br0\">)</span>\t<span class=\"co1\">; King</span><br/>\tP<span class=\"br0\">[</span>Rand<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> K <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2656<span class=\"br0\">)</span>\t<span class=\"co1\">; Rook 1</span><br/>\tP<span class=\"br0\">[</span>Rand<span class=\"br0\">(</span>K <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2656<span class=\"br0\">)</span>\t<span class=\"co1\">; Rook 2</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>\t\tRemaining <span class=\"sy0\">.=</span> P<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\"`n\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> Remaining<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> N<br/>\tP<span class=\"br0\">[</span>Bishop1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Remaining<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2657<span class=\"br0\">)</span>\t<span class=\"co1\">; Bishop 1</span><br/>\tRemaining <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Remaining<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Remaining<span class=\"sy0\">,</span> `n<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>Bishop1 <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tOdd <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`n\"</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tEven <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`n\"</span><br/>\tX <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>Odd Even<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><br/>\tP<span class=\"br0\">[</span>X<span class=\"sy0\">.</span>1<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2657<span class=\"br0\">)</span>\t<span class=\"co1\">; Bishop 2</span><br/>\tP<span class=\"br0\">[</span>X<span class=\"sy0\">.</span>2<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2655<span class=\"br0\">)</span>\t<span class=\"co1\">; Queen</span><br/>\tP<span class=\"br0\">[</span>X<span class=\"sy0\">.</span>3<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2658<span class=\"br0\">)</span>\t<span class=\"co1\">; Knight 1</span><br/>\tP<span class=\"br0\">[</span>X<span class=\"sy0\">.</span>4<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0x2658<span class=\"br0\">)</span>\t<span class=\"co1\">; Knight 2</span><br/>\tfor Key<span class=\"sy0\">,</span> Val in P<br/>\t\tOut <span class=\"sy0\">.=</span> Val<br/>\t<span class=\"kw1\">return</span> Out<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Rand<span class=\"br0\">(</span>Min<span class=\"sy0\">,</span> Max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> Min<span class=\"sy0\">,</span> Max<br/>\t<span class=\"kw1\">return</span> n<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Befunge", "loc": 11, "block": "<pre class=\"text highlighted_source\">#.#.#.#.065*0#v_1-\\&gt;&gt;?1v<br/>v,\":\".:%*8\"x\"$&lt;^!:\\*2&lt;+&lt;<br/>&gt;48*,:4%2*1#v+#02#\\3#g&lt;&lt;<br/>v\"B\"*2%4:/4p&lt;vg0:+1&lt;\\-1&lt;<br/>&gt;\\0p4/:6%0:0g&gt;68*`#^_\\:|<br/>v\"RKRNN\"p11/6$p0\\ \"Q\" \\&lt;<br/>&gt;\"NRNKRRNNKRNRKNRRNKNR\"v<br/>v\"NRNKRNRKNRNRKRNRNNKR\"&lt;<br/>&gt;\"RKRNN\"11g:!#v_\\$\\$\\$\\v<br/>v _v#!`*86:g0:&lt;^!:-1$\\$&lt;<br/>&gt;$\\&gt;,1+\u00a0:7`#@_^&gt; v960v &lt;</pre>"}, {"lang": "C", "loc": 103, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;locale.h&gt;</span><br/><span class=\"co2\">#include&lt;wchar.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> rank<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> pos<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">,</span><span class=\"kw4\">int</span> j<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> pos<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tpos<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tpos<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> generateFirstRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t <span class=\"kw4\">int</span> kPos<span class=\"sy0\">,</span>qPos<span class=\"sy0\">,</span>bPos1<span class=\"sy0\">,</span>bPos2<span class=\"sy0\">,</span>rPos1<span class=\"sy0\">,</span>rPos2<span class=\"sy0\">,</span>nPos1<span class=\"sy0\">,</span>nPos2<span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'e'</span><span class=\"sy0\">;</span><br/>\t\t pos<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t <span class=\"br0\">}</span><br/>\u00a0<br/>\t <span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t kPos <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">8</span><span class=\"sy0\">;</span><br/>\t\t rPos1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">8</span><span class=\"sy0\">;</span><br/>\t\t rPos2 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">8</span><span class=\"sy0\">;</span><br/>\t <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rPos1<span class=\"sy0\">-</span>kPos<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> rPos2<span class=\"sy0\">-</span>kPos<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"br0\">(</span>rPos1<span class=\"sy0\">-</span>kPos<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> rPos2<span class=\"sy0\">-</span>kPos<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"br0\">(</span>rPos1<span class=\"sy0\">==</span>rPos2 <span class=\"sy0\">||</span> kPos<span class=\"sy0\">==</span>rPos1 <span class=\"sy0\">||</span> kPos<span class=\"sy0\">==</span>rPos2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>rPos1<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'R'</span><span class=\"sy0\">;</span><br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>kPos<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'K'</span><span class=\"sy0\">;</span><br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>rPos2<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'R'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t swap<span class=\"br0\">(</span>rPos1<span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t swap<span class=\"br0\">(</span>rPos2<span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t swap<span class=\"br0\">(</span>kPos<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t <span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t bPos1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">5</span><span class=\"sy0\">;</span><br/>\t\t bPos2 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">5</span><span class=\"sy0\">;</span><br/>\t <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>pos<span class=\"br0\">[</span>bPos1<span class=\"br0\">]</span><span class=\"sy0\">-</span>pos<span class=\"br0\">[</span>bPos2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"br0\">(</span>bPos1<span class=\"sy0\">==</span>bPos2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>bPos1<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'B'</span><span class=\"sy0\">;</span><br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>bPos2<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'B'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t swap<span class=\"br0\">(</span>bPos1<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t swap<span class=\"br0\">(</span>bPos2<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t <span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t qPos <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"sy0\">;</span><br/>\t\t nPos1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"sy0\">;</span><br/>\t <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>qPos<span class=\"sy0\">==</span>nPos1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>qPos<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Q'</span><span class=\"sy0\">;</span><br/>\t rank<span class=\"br0\">[</span>pos<span class=\"br0\">[</span>nPos1<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'N'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t <span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'e'</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'N'</span><span class=\"sy0\">;</span><br/>\t\t\t <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t <span class=\"br0\">}</span>\t\t<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co2\">#ifdef _WIN32</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>rank<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"co2\">#else</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_ALL<span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>wint_t<span class=\"br0\">)</span><span class=\"nu0\">9812</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'Q'</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>wint_t<span class=\"br0\">)</span><span class=\"nu0\">9813</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'R'</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>wint_t<span class=\"br0\">)</span><span class=\"nu0\">9814</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>wint_t<span class=\"br0\">)</span><span class=\"nu0\">9815</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'N'</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>wint_t<span class=\"br0\">)</span><span class=\"nu0\">9816</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co2\">#endif</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tgenerateFirstRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 58, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> placeRandomly<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> p, <span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> loc <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>p<span class=\"br0\">[</span>loc<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t    p<span class=\"br0\">[</span>loc<span class=\"br0\">]</span> <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t    placeRandomly<span class=\"br0\">(</span>p, c<span class=\"br0\">)</span><span class=\"sy4\">;</span>    <span class=\"co1\">// try again</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> placeFirst<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> p, <span class=\"kw4\">char</span> c, <span class=\"kw4\">int</span> loc <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>loc<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy2\">++</span>loc<span class=\"sy4\">;</span><br/>\tp<span class=\"br0\">[</span>loc<span class=\"br0\">]</span> <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> loc<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    string startPos<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> p<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> p, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// bishops on opposite color</span><br/>\tp<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'B'</span><span class=\"sy4\">;</span><br/>\tp<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'B'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// queen knight knight, anywhere</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"sy4\">:</span> <span class=\"st0\">\"QNN\"</span><span class=\"br0\">)</span><br/>\t    placeRandomly<span class=\"br0\">(</span>p, c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// rook king rook, in that order</span><br/>\tplaceFirst<span class=\"br0\">(</span>p, <span class=\"st0\">'R'</span>, placeFirst<span class=\"br0\">(</span>p, <span class=\"st0\">'K'</span>, placeFirst<span class=\"br0\">(</span>p, <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> string<span class=\"br0\">(</span>p, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span>   <span class=\"co1\">// leave local</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> chess960<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> generate<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> c<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> startPos<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    chess960<span class=\"sy4\">::</span><span class=\"me2\">generate</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> c960<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; legal starting rank - unicode chars for rook, knight, bishop, queen, king, bishop, knight, rook</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> starting<span class=\"sy0\">-</span>rank <span class=\"br0\">[</span>\\\u2656 \\\u2658 \\\u2657 \\\u2655 \\\u2654 \\\u2657 \\\u2658 \\\u2656<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> bishops<span class=\"sy0\">-</span>legal?<br/>  <span class=\"st0\">\"True if Bishops are odd number of indicies apart\"</span><br/>  <span class=\"br0\">[</span>rank<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>odd? <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>keep<span class=\"sy0\">-</span>indexed #<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> \\\u2657 <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> <span class=\"sy0\">%</span>1<span class=\"br0\">)</span> rank<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> king<span class=\"sy0\">-</span>legal?<br/>  <span class=\"st0\">\"True if the king is between two rooks\"</span><br/>  <span class=\"br0\">[</span>rank<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>king<span class=\"sy0\">-&amp;-</span>rooks <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">{</span>\\\u2654 \\\u2656<span class=\"br0\">}</span> rank<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> king<span class=\"sy0\">-&amp;-</span>rooks<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">=</span> \\u2654 <span class=\"br0\">(</span>second king<span class=\"sy0\">-&amp;-</span>rooks<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> c960<br/>  <span class=\"st0\">\"Return a legal rank for c960 chess\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>c960 <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> #<span class=\"br0\">(</span>shuffle starting<span class=\"sy0\">-</span>rank<span class=\"br0\">)</span><br/>        <span class=\"kw1\">repeatedly</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>king<span class=\"sy0\">-</span>legal? <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>bishops<span class=\"sy0\">-</span>legal? <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">take</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>s<span class=\"sy0\">/</span>join <span class=\"st0\">\", \"</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>c960<span class=\"br0\">)</span><br/><span class=\"co1\">;; =&gt; \"\u2657, \u2656, \u2654, \u2655, \u2658, \u2658, \u2656, \u2657\"</span><br/><span class=\"br0\">(</span>c960<span class=\"br0\">)</span><br/><span class=\"co1\">;; =&gt; \"\u2656, \u2655, \u2658, \u2654, \u2657, \u2657, \u2658, \u2656\"</span><br/><span class=\"br0\">(</span>c960 <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; =&gt; (\"\u2658, \u2656, \u2654, \u2658, \u2657, \u2657, \u2656, \u2655\" \"\u2657, \u2656, \u2654, \u2658, \u2658, \u2655, \u2656, \u2657\" \"\u2658, \u2655, \u2657, \u2656, \u2654, \u2657, \u2658, \u2656\" \"\u2656, \u2654, \u2658, \u2658, \u2655, \u2656, \u2657, \u2657\")</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> permutations2<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> pieces <span class=\"sy0\">=</span> <span class=\"st0\">\"KQRrBbNN\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> I <span class=\"sy0\">=</span> indexOf<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> starts <span class=\"sy0\">=</span> pieces.<span class=\"me1\">dup</span>.<span class=\"me1\">permutations</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span><br/>            I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">// Bishop constraint.</span><br/>            <span class=\"co1\">// King constraint.</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>             <span class=\"br0\">(</span>I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'R'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> I<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"sy0\">!</span>toUpper.<span class=\"me1\">array</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>starts.<span class=\"me1\">walkLength</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> starts.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-values <span class=\"br0\">(</span>K Q R B N<span class=\"br0\">)</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define *pos* <span class=\"br0\">(</span><span class=\"kw1\">list</span> R N B Q K B N R<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; standard starter</span><br/>\u00a0<br/><span class=\"co1\">;; check opposite color bishops, and King between rooks</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>legal-pos p<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>list-index K p<span class=\"br0\">)</span> <span class=\"br0\">(</span>list-index R p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>list-index K <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>list-index R <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>even? <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>list-index B p<span class=\"br0\">)</span> <span class=\"br0\">(</span>list-index B <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; random shuffle current position until a legal one is found</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>c960<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> *pos* <span class=\"br0\">(</span>shuffle *pos*<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>legal-pos *pos*<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>map unicode-piece *pos*<span class=\"br0\">)</span>  <span class=\"br0\">(</span>c960<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule Chess960 do<br/>  @pieces   ~w(\u2654 \u2655 \u2658 \u2658 \u2657 \u2657 \u2656 \u2656)             # ~w(K Q N N B B R R)<br/>  @regexes  [~r/\u2657(..)*\u2657/, ~r/\u2656.*\u2654.*\u2656/]        # [~r/B(..)*B/, ~r/R.*K.*R/]<br/>\u00a0<br/>  def shuffle do<br/>    row = Enum.shuffle(@pieces) |&gt; Enum.join<br/>    if Enum.all?(@regexes, &amp;Regex.match?(&amp;1, row)), do: row, else: shuffle<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..5, fn _ -&gt; IO.puts Chess960.shuffle end)</pre>"}, {"lang": "Forth", "loc": 20, "block": "<pre class=\"text highlighted_source\">\\ make starting position for Chess960, constructive<br/>\u00a0<br/>\\             0    1    2    3    4    5    6    7    8    9<br/>create krn S\" NNRKRNRNKRNRKNRNRKRNRNNKRRNKNRRNKRNRKNNRRKNRNRKRNN\" mem,<br/>\u00a0<br/>create pieces 8 allot<br/>\u00a0<br/>: chess960 ( n -- )<br/>  pieces 8 erase<br/>  4 /mod swap  2* 1+ pieces + 'B swap c!<br/>  4 /mod swap  2*    pieces + 'B swap c!<br/>  6 /mod swap  pieces swap bounds begin dup <a class=\"__cf_email__\" data-cfemail=\"244764\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if swap 1+ swap then 2dup &gt; while 1+ repeat drop 'Q swap c!<br/>  5 * krn +  pieces 8 bounds do i <a class=\"__cf_email__\" data-cfemail=\"523112\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 0= if dup <a class=\"__cf_email__\" data-cfemail=\"3a597a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> i c! 1+ then loop drop<br/>  cr pieces 8 type\u00a0;<br/>\u00a0<br/>0   chess960   \\ BBQNNRKR ok<br/>518 chess960   \\ RNBQKBNR ok<br/>959 chess960   \\ RKRNNQBB ok<br/>\u00a0<br/>960 choose chess960    \\ random position</pre>"}, {"lang": "Fortran", "loc": 58, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> chess960<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">pointer</span>  <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,b,c,d,e,f,g,h<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">target</span>   <span class=\"sy0\">::</span> <span class=\"me2\">p</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    d <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    e <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    f <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    g <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    h <span class=\"sy0\">=</span>&gt; p<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>    king<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> a<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,<span class=\"nu0\">7</span>                                        <span class=\"co1\">! King on an internal square</span><br/>        r1<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,a<span class=\"sy0\">-</span><span class=\"nu0\">1</span>                                    <span class=\"co1\">! R1 left of the King</span><br/>            r2<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> c<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span>                                <span class=\"co1\">! R2 right of the King</span><br/>                b1<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">2</span>                            <span class=\"co1\">! B1 on an odd square</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>skip_pos<span class=\"br0\">(</span>d,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>                    b2<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> e<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">2</span>                        <span class=\"co1\">! B2 on an even square</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>skip_pos<span class=\"br0\">(</span>e,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>                        queen<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> f<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span>                   <span class=\"co1\">! Queen anywhere else</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>skip_pos<span class=\"br0\">(</span>f,<span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>                            n1<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> g<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">7</span>                  <span class=\"co1\">! First knight</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>skip_pos<span class=\"br0\">(</span>g,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>                                n2<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> h<span class=\"sy0\">=</span>g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span>            <span class=\"co1\">! Second knight (indistinguishable from first)</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>skip_pos<span class=\"br0\">(</span>h,<span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span> <span class=\"st0\">'Loop error'</span>  <span class=\"co1\">! Sanity check</span><br/>                                    <span class=\"kw1\">call</span> write_position<br/>                                <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> n2<br/>                            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> n1<br/>                        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> queen<br/>                    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> b2<br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> b1<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> r2<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> r1<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> king<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>    <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> skip_pos<span class=\"br0\">(</span>i, n<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>        skip_pos <span class=\"sy0\">=</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> skip_pos<br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> write_position<br/>        <span class=\"kw3\">integer</span>           <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">position</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span>  <span class=\"sy0\">::</span> <span class=\"me2\">names</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'K'</span>,<span class=\"st0\">'R'</span>,<span class=\"st0\">'R'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'Q'</span>,<span class=\"st0\">'N'</span>,<span class=\"st0\">'N'</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><br/>            j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">position</span><span class=\"br0\">(</span>j<span class=\"sy0\">:</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> names<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> <span class=\"kw1\">position</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> write_position<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> chess960<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 63, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> symbols <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> k<span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> n rune <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> A <span class=\"sy2\">=</span> symbols<span class=\"sy1\">{</span><span class=\"st0\">'K'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Q'</span><span class=\"sy1\">,</span> <span class=\"st0\">'R'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"sy1\">,</span> <span class=\"st0\">'N'</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> W <span class=\"sy2\">=</span> symbols<span class=\"sy1\">{</span><span class=\"st0\">'\u2654'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u2655'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u2656'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u2657'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u2658'</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> B <span class=\"sy2\">=</span> symbols<span class=\"sy1\">{</span><span class=\"st0\">'\u265a'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u265b'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u265c'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u265d'</span><span class=\"sy1\">,</span> <span class=\"st0\">'\u265e'</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> krn <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\"nnrkr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"nrnkr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"nrknr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"nrkrn\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"rnnkr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"rnknr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"rnkrn\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"rknnr\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"rknrn\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"rkrnn\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>sym symbols<span class=\"sy1\">)</span> chess960<span class=\"sy1\">(</span>id <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> pos <span class=\"sy1\">[</span><span class=\"nu0\">8</span><span class=\"sy1\">]</span>rune<br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> id<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> id<span class=\"sy3\">%</span><span class=\"nu0\">4</span><br/>    pos<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>b<br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">=</span> q<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> q<span class=\"sy3\">%</span><span class=\"nu0\">4</span><br/>    pos<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>b<br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">=</span> q<span class=\"sy3\">/</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> q<span class=\"sy3\">%</span><span class=\"nu0\">6</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>q<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        r<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> krn<span class=\"sy1\">[</span>q<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">switch</span> f <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'k'</span><span class=\"sy1\">:</span><br/>            pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>k<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'r'</span><span class=\"sy1\">:</span><br/>            pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>r<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'n'</span><span class=\"sy1\">:</span><br/>            pos<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy3\">.</span>n<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>pos<span class=\"sy1\">[:])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" ID  Start position\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> id <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">518</span><span class=\"sy1\">,</span> <span class=\"nu0\">959</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> id<span class=\"sy1\">,</span> A<span class=\"sy3\">.</span>chess960<span class=\"sy1\">(</span>id<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Random\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">5</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>W<span class=\"sy3\">.</span>chess960<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">960</span><span class=\"sy1\">)))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Set <span class=\"kw1\">as</span> Set<br/>\u00a0<br/><span class=\"kw1\">data</span> Piece <span class=\"sy0\">=</span> K <span class=\"sy0\">|</span> Q <span class=\"sy0\">|</span> R <span class=\"sy0\">|</span> B <span class=\"sy0\">|</span> N <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>isChess960 <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Piece<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isChess960 rank <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> findIndices <span class=\"br0\">(</span><span class=\"sy0\">==</span> B<span class=\"br0\">)</span> rank<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> king <span class=\"sy0\">&gt;</span> rookA <span class=\"sy0\">&amp;&amp;</span> king <span class=\"sy0\">&lt;</span> rookB<br/>  <span class=\"kw1\">where</span><br/>    Just king      <span class=\"sy0\">=</span> findIndex <span class=\"br0\">(</span><span class=\"sy0\">==</span> K<span class=\"br0\">)</span> rank<br/>    <span class=\"br0\">[</span>rookA<span class=\"sy0\">,</span> rookB<span class=\"br0\">]</span> <span class=\"sy0\">=</span> findIndices <span class=\"br0\">(</span><span class=\"sy0\">==</span> R<span class=\"br0\">)</span> rank<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> Set<span class=\"sy0\">.</span>toList <span class=\"sy0\">.</span> Set<span class=\"sy0\">.</span>fromList<br/>       <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isChess960 <span class=\"sy0\">$</span> permutations <span class=\"br0\">[</span>R<span class=\"sy0\">,</span>N<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>Q<span class=\"sy0\">,</span>K<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>N<span class=\"sy0\">,</span>R<span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">row0=: u: <span class=\"nu0\">9812</span>+<span class=\"nu0\">2</span>}.<span class=\"nu0\">5</span>|i.<span class=\"nu0\">10</span><br/>king=: u:<span class=\"nu0\">9812</span><br/>rook=: u:<span class=\"nu0\">9814</span><br/>bish=: u:<span class=\"nu0\">9815</span><br/>pos=: <a class=\"__cf_email__\" data-cfemail=\"470e69072269\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>bishok=: <span class=\"nu0\">1</span>=<span class=\"nu0\">2</span>+/ .| pos&amp;bish<br/>rookok=: pos&amp;rook -: <span class=\"sy0\">(</span>&lt;./,&gt;./<span class=\"sy0\">)</span>@pos&amp;<span class=\"sy0\">(</span>rook,king<span class=\"sy0\">)</span><br/>ok=: bishok*rookok<br/>perm=: A.&amp;i.~\u00a0!<br/>valid=: <span class=\"sy0\">(</span>#~ ok\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> ~.row0{\"<span class=\"nu0\">1</span>~perm <span class=\"nu0\">8</span><br/>gen=: valid {~\u00a0? bind <span class=\"nu0\">960</span></pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Chess960<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a><span class=\"sy0\">&gt;</span> pieces = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">'R'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'N'</span>,<span class=\"st0\">'Q'</span>,<span class=\"st0\">'K'</span>,<span class=\"st0\">'N'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a><span class=\"sy0\">&gt;</span> generateFirstRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>pieces<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>check<span class=\"br0\">(</span>pieces.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"[^<span class=\"es0\">\\\\</span>p{Upper}]\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//List.toString adds some human stuff, remove that </span><br/>\u00a0<br/>\t\t<span class=\"kw2\">return</span> pieces<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> check<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> rank<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rank.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\".*R.*K.*R.*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">//king between rooks</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rank.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\".*B(..|....|......|)B.*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//all possible ways bishops can be placed</span><br/>\t\t<span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>generateFirstRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> ch960startPos<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> rank <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"co1\">// randomizer (our die)</span><br/>      d <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">++</span>num<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      emptySquares <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> arr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rank<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span> arr.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> arr<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place one bishop on any black square</span><br/>  rank<span class=\"br0\">[</span>d<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2657\"</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place the other bishop on any white square</span><br/>  rank<span class=\"br0\">[</span>d<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2657\"</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place the queen on any empty square</span><br/>  rank<span class=\"br0\">[</span>emptySquares<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>d<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2655\"</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place one knight on any empty square</span><br/>  rank<span class=\"br0\">[</span>emptySquares<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>d<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2658\"</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place the other knight on any empty square</span><br/>  rank<span class=\"br0\">[</span>emptySquares<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>d<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2658\"</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// place the rooks and the king on the squares left, king in the middle</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> rank<span class=\"br0\">[</span>emptySquares<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">==</span><span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\u2654\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\u2656\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> rank<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// testing (10 times)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> console.<span class=\"me1\">log</span><span class=\"br0\">(</span>ch960startPos<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" | \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 30, "block": "<pre class=\"text highlighted_source\">function generateposition()<br/>    # Placeholder knights<br/>    rank = ['\u2658', '\u2658', '\u2658', '\u2658', '\u2658', '\u2658', '\u2658', '\u2658']<br/>    lrank = length(rank)<br/>\u00a0<br/>    # Check if a space is available<br/>    isfree(x::Int) = rank[x] == '\u2658'<br/>\u00a0<br/>    # Place the King<br/>    rank[indking = rand(2:lrank-1)] = '\u2654'<br/>\u00a0<br/>    # Place rooks<br/>    rank[indrook = rand(filter(isfree, 1:lrank))] = '\u2656'<br/>    if indrook &gt; indking<br/>        rank[rand(filter(isfree, 1:indking-1))] = '\u2656'<br/>    else<br/>        rank[rand(filter(isfree, indking+1:lrank))] = '\u2656'<br/>    end<br/>\u00a0<br/>    # Place bishops<br/>    rank[indbish = rand(filter(isfree, 1:8))] = '\u2657'<br/>    pbish = filter(iseven(indbish)\u00a0? isodd\u00a0: iseven, 1:lrank)<br/>    rank[rand(filter(isfree, pbish))] = '\u2657'<br/>\u00a0<br/>    # Place queen<br/>    rank[rand(filter(isfree, 1:lrank))] = '\u2655'<br/>    return rank<br/>end<br/>\u00a0<br/>@show generateposition()</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Chess960 <span class=\"sy0\">:</span> Iterable<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun iterator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> patterns.<span class=\"me1\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> operator fun invoke<span class=\"br0\">(</span>b<span class=\"sy0\">:</span> String, e<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> b + e<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">is_valid</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> patterns +<span class=\"sy0\">=</span> s<br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until e.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                invoke<span class=\"br0\">(</span>b + e<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, e.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span> + e.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun String.<span class=\"me1\">is_valid</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k <span class=\"sy0\">=</span> indexOf<span class=\"br0\">(</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> indexOf<span class=\"br0\">(</span><span class=\"st0\">'R'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> k <span class=\"sy0\">&amp;&amp;</span> k <span class=\"sy0\">&lt;</span> lastIndexOf<span class=\"br0\">(</span><span class=\"st0\">'R'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            indexOf<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> lastIndexOf<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> patterns <span class=\"sy0\">=</span> sortedSetOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        invoke<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"KQRRNNBB\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Chess960.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> i, s -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"$i: $s\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 29, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Insert 'str' into 't' at a random position from 'left' to 'right'</span><br/><span class=\"kw1\">function</span> randomInsert <span class=\"br0\">(</span>t<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> pos<br/>    <span class=\"kw1\">repeat</span> pos <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span>left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span> <span class=\"kw1\">until</span> <span class=\"kw2\">not</span> t<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><br/>    t<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> str<br/>    <span class=\"kw1\">return</span> pos<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Generate a random Chess960 start position for white major pieces</span><br/><span class=\"kw1\">function</span> chess960 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> kingPos <span class=\"sy0\">=</span> randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"K\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> kingPos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"sy0\">,</span> kingPos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    b1 <span class=\"sy0\">=</span> randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    b2 <span class=\"sy0\">=</span> randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        t<span class=\"br0\">[</span>b2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>        b2 <span class=\"sy0\">=</span> randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"N\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    randomInsert<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"N\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>chess960<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 9, "block": "<pre class=\"text highlighted_source\">Print[StringJoin[<br/>   RandomChoice[<br/>    Select[Union[<br/>      Permutations[{\"\\[WhiteKing]\", \"\\[WhiteQueen]\", \"\\[WhiteRook]\", <br/>        \"\\[WhiteRook]\", \"\\[WhiteBishop]\", \"\\[WhiteBishop]\", <br/>        \"\\[WhiteKnight]\", \"\\[WhiteKnight]\"}]], <br/>     MatchQ[#, {___, \"\\[WhiteRook]\", ___, \"\\[WhiteKing]\", ___, <br/>         \"\\[WhiteRook]\", ___}] &amp;&amp; <br/>       OddQ[Subtract @@ Flatten[Position[#, \"\\[WhiteBishop]\"]]] &amp;]]]];</pre>"}, {"lang": "Objeck", "loc": 70, "block": "<pre class=\"objeck highlighted_source\">\ufeff<span class=\"kw1\">class</span> Chess960 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Generate<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Generate<span class=\"br0\">(</span>c <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> c<span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      StartPos<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> StartPos<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    p <span class=\"sy0\">:=</span> Char<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># bishops</span><br/>    b1 <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span> b2 <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      b1 <span class=\"sy0\">:=</span> GetPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b2 <span class=\"sy0\">:=</span> GetPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>      b1c <span class=\"sy0\">:=</span> b1 and <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b2c <span class=\"sy0\">:=</span> b2 and <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">:=</span> b1c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> b2c <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        break<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    p<span class=\"br0\">[</span>b1<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2657<span class=\"sy0\">;</span> p<span class=\"br0\">[</span>b2<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2657<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># queen, knight, knight</span><br/>    q <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <br/>        b1 <span class=\"sy0\">:=</span> GetPosition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>      <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span> p<span class=\"br0\">[</span>b1<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&gt;</span> '\\<span class=\"nu0\">0</span>'<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span>q<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        p<span class=\"br0\">[</span>b1<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2655<span class=\"sy0\">;</span> q <span class=\"sy0\">:=</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span> <br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>        p<span class=\"br0\">[</span>b1<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2658<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># rook king rook</span><br/>    q <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      a <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">=</span> '\\<span class=\"nu0\">0</span>'<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          break<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        a <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span>q<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        p<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2656<span class=\"sy0\">;</span> q <span class=\"sy0\">:=</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span> <br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>        p<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0x2654<span class=\"sy0\">;</span> q <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span> <br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> GetPosition<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">chess960<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>  my <span class=\"br0\">(</span>C <span class=\"sy0\">=</span> <span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  C<span class=\"br0\">[</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu1\">2</span> <span class=\"sy0\">+</span> <span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> C<span class=\"br0\">[</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu1\">2</span> <span class=\"sy0\">+</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>C<span class=\"br0\">[</span>r <span class=\"sy0\">=</span> <span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> C<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"st0\">\"NNQ\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">8</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>C<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> C<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"st0\">\"RKR\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  C<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> rnd<span class=\"br0\">(</span><span class=\"co5\">$)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> empties <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"sy0\">!</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">7</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> chess960 <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">)</span> x <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"re0\">*rnd</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"re0\">*rnd</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co2\">qw/B B/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"co2\">qw/Q N N/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@idx</span> <span class=\"sy0\">=</span> empties \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$idx</span><span class=\"br0\">[</span>rnd<span class=\"br0\">(</span><span class=\"re0\">@idx</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"br0\">[</span>empties \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co2\">qw/R K R/</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@{[chess960]}<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">repeat</span> <span class=\"kw1\">until</span> <span class=\"co2\">m/ '\u2657' [..]* '\u2657' /</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span> \u2656 \u2656 \u2656 \u2655 \u2657 \u2657 \u2658 \u2658 <span class=\"sy0\">&gt;.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span> <span class=\"br0\">}</span><br/>s<span class=\"sy0\">:</span>2nd<span class=\"br0\">[</span><span class=\"st_h\">'\u2656'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'\u2654'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">sequence solutions = {}<br/>--integer d = new_dict()<br/>\u00a0<br/>for i=1 to factorial(8) do<br/>    sequence s = permute(i,\"RNBQKBNR\")<br/>--  sequence s = permute(rand(factorial(8),\"RNBQKBNR\")<br/>    integer b1 = find('B',s),<br/>            b2 = find('B',s,b1+1)<br/>    if and_bits(b2-b1,1)=1 then<br/>        integer k = find('K',s)<br/>        integer r1 = find('R',s)<br/>        integer r2 = find('R',s,r1+1)<br/>        if r1&lt;k and k&lt;r2 then<br/>            if find(s,solutions)=0 then<br/>--          if getd_index(s,d)=0 then<br/>--              setd(s,0,d)<br/>                solutions = append(solutions,s)<br/>            end if<br/>        end if<br/>    end if<br/>end for<br/>printf(1,\"Found\u00a0%d solutions\\n\",{length(solutions)})<br/>for i=1 to 5 do<br/>   \u00a0?solutions[rand(length(solutions))]<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(seed (in \"/dev/urandom\" (rd 8)))<br/>\u00a0<br/>(loop<br/>   (match<br/>      '(@A B @B B @C)<br/>      (shuffle '(Q B B N N 0 0 0)) )<br/>   (NIL (bit? 1 (length @B))) )<br/>\u00a0<br/>(let Rkr '(R K R)<br/>   (for I (append @A '(B) @B '(B) @C)<br/>      (prin (if (=0 I) (pop 'Rkr) I)) )<br/>   (prinl) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 30, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>RandomChess960Start<br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Starts</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Q</span>  <span class=\"kw3\">in</span>       <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$N1</span> <span class=\"kw3\">in</span>       <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$N2</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$N1</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$B1</span> <span class=\"kw3\">in</span>       <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$B2</span> <span class=\"kw3\">in</span>       <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$BB</span> <span class=\"sy0\">=</span> <span class=\"re0\">$B1</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> <span class=\"re0\">$B1</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$B2</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$BW</span> <span class=\"sy0\">=</span> <span class=\"re0\">$B2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <br/>        <span class=\"re0\">$Start</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Collections.ArrayList<span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"st0\">'\u2656'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2654'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2656'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Start</span>.Insert<span class=\"br0\">(</span> <span class=\"re0\">$Q</span> <span class=\"sy0\">,</span> <span class=\"st0\">'\u2655'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Start</span>.Insert<span class=\"br0\">(</span> <span class=\"re0\">$N1</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2658'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Start</span>.Insert<span class=\"br0\">(</span> <span class=\"re0\">$N2</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2658'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Start</span>.Insert<span class=\"br0\">(</span> <span class=\"re0\">$BB</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2657'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Start</span>.Insert<span class=\"br0\">(</span> <span class=\"re0\">$BW</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u2657'</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$Starts</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">,</span><span class=\"re0\">$Start</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$Index</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>Random <span class=\"nu0\">960</span><br/>    <span class=\"re0\">$StartString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Starts</span><span class=\"br0\">[</span><span class=\"re0\">$Index</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$StartString</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>Get<span class=\"sy0\">-</span>RandomChess960Start<br/>Get<span class=\"sy0\">-</span>RandomChess960Start<br/>Get<span class=\"sy0\">-</span>RandomChess960Start<br/>Get<span class=\"sy0\">-</span>RandomChess960Start<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/><span class=\"sy0\">&gt;&gt;&gt;</span> pieces <span class=\"sy0\">=</span> <span class=\"st0\">'KQRrBbNN'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> starts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span>pieces<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">if</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'b'</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span> \t\t<span class=\"co1\"># Bishop constraint</span><br/>                     <span class=\"kw1\">and</span> <span class=\"br0\">(</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'R'</span><span class=\"br0\">)</span>\t<span class=\"co1\"># King constraint\t</span><br/>                           <span class=\"kw1\">or</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'R'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>starts<span class=\"br0\">)</span><br/><span class=\"nu0\">960</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> starts.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'QNBRNKRB'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define white (match-lambda ['P #\\\u2659] ['R #\\\u2656] ['B #\\\u2657] ['N #\\\u2658] ['Q #\\\u2655] ['K #\\\u2654]))<br/>(define black (match-lambda ['P #\\\u265f] ['R #\\\u265c] ['B #\\\u265d] ['N #\\\u265e] ['Q #\\\u265b] ['K #\\\u265a]))<br/>\u00a0<br/>(define (piece-&gt;unicode piece colour)<br/>  (match colour ('w white) ('b black)) piece)<br/>\u00a0<br/>(define (find/set!-random-slot vec val k (f values))<br/>  (define r (f (random k)))<br/>  (cond<br/>    [(vector-ref vec r)<br/>     (find/set!-random-slot vec val k f)]<br/>    [else<br/>     (vector-set! vec r val)<br/>     r]))<br/>\u00a0<br/>(define (chess960-start-position)<br/>  (define v (make-vector 8 #f))  <br/> \u00a0;; Kings and Rooks<br/>  (let ((k (find/set!-random-slot v (white 'K) 6 add1)))<br/>    (find/set!-random-slot v (white 'R) k)<br/>    (find/set!-random-slot v (white 'R) (- 7 k) (curry + k 1)))<br/> \u00a0;; Bishops -- so far only three squares allocated, so there is at least one of each colour left<br/>  (find/set!-random-slot v (white 'B) 4 (curry * 2))<br/>  (find/set!-random-slot v (white 'B) 4 (compose add1 (curry * 2)))<br/> \u00a0;; Everyone else<br/>  (find/set!-random-slot v (white 'Q) 8)<br/>  (find/set!-random-slot v (white 'N) 8)<br/>  (find/set!-random-slot v (white 'N) 8)<br/>  (list-&gt;string (vector-&gt;list v)))<br/>\u00a0<br/>(chess960-start-position)</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates a random starting position  for the  Chess960  game. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> seed <span class=\"sy0\">.</span>                       <span class=\"coMULTI\">/*allow for (RANDOM BIF) repeatability.*/</span><br/><span class=\"kw1\">if</span> seed<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed  <span class=\"coMULTI\">/*if SEED was specified,  use the seed.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                   <span class=\"coMULTI\">/*define the first rank as being empty.*/</span><br/>r1=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*generate the first rook:  rank 1.    */</span><br/>@<span class=\"sy0\">.</span>r1=<span class=\"st0\">'R'</span>                               <span class=\"coMULTI\">/*place the  first rook  on  rank1.    */</span><br/>          <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  r2<span class=\"sy0\">\\</span>==r1  <span class=\"sy0\">&amp;</span>  r2<span class=\"sy0\">\\</span>==r1-<span class=\"nu0\">1</span>  <span class=\"sy0\">&amp;</span>  r2<span class=\"sy0\">\\</span>==r1+<span class=\"nu0\">1</span><br/>          r2=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*find placement for the 2nd rook.     */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>@<span class=\"sy0\">.</span>r2=<span class=\"st0\">'r'</span>                               <span class=\"coMULTI\">/*place the second rook  on  rank 1.   */</span><br/>k=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"kw6\">min</span><span class=\"br0\">(</span>r1, r2<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>, <span class=\"kw6\">max</span><span class=\"br0\">(</span>r1, r2<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*find a random position for the king. */</span><br/>@<span class=\"sy0\">.</span>k=<span class=\"st0\">'K'</span>                                <span class=\"coMULTI\">/*place king between the two rooks.    */</span><br/>          <span class=\"kw1\">do</span> _=<span class=\"nu0\">0</span>     \u00a0; b1=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>b1<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  c=b1<span class=\"sy0\">//</span><span class=\"nu0\">2</span><br/>            <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>; b2=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/* c=color of bishop \u25ba\u2500\u2500\u2518        */</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>b2<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span> <span class=\"sy0\">|</span> b2==b1 <span class=\"sy0\">|</span> b2<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==c  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*is a bad position?*/</span><br/>            <span class=\"kw1\">leave</span> _                    <span class=\"coMULTI\">/*found position for the 2 clergy*/</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span>          <span class=\"coMULTI\">/* [\u2191]  find a place for the 1st bishop*/</span><br/>          <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/* _ */</span>              <span class=\"coMULTI\">/* [\u2191]    \"  \"   \"    \"   \"  2nd    \"  */</span><br/>@<span class=\"sy0\">.</span>b1=<span class=\"st0\">'B'</span>                               <span class=\"coMULTI\">/*place the  1st  bishop on  rank 1.   */</span><br/>@<span class=\"sy0\">.</span>b2=<span class=\"st0\">'b'</span>                               <span class=\"coMULTI\">/*  \"    \"   2nd     \"    \"    \"  \"    */</span><br/>                                       <span class=\"coMULTI\">/*place the two knights on rank 1.     */</span><br/>   <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>_=<span class=\"st0\">'N'</span>;  _=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>_<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>; @<span class=\"sy0\">.</span>_=<span class=\"st0\">'N'</span>;   <span class=\"kw3\">end</span><br/>   <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>!=<span class=\"st0\">'n'</span>; \u00a0!=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>!<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>; @<span class=\"sy0\">.</span>!=<span class=\"st0\">'n'</span>;   <span class=\"kw3\">end</span><br/>_=                                     <span class=\"coMULTI\">/*only the queen is left to be placed. */</span><br/>   <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">8</span>;  _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>i;   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*construct the output: first rank only*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, <span class=\"st0\">'q'</span>, <span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">pieces = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>\u2654 \u2655 \u2658 \u2658 \u2657 \u2657 \u2656 \u2656<span class=\"br0\">)</span><br/>regexes = <span class=\"br0\">[</span><span class=\"sy0\">/</span>\u2657<span class=\"br0\">(</span>..<span class=\"br0\">)</span><span class=\"sy0\">*</span>\u2657<span class=\"sy0\">/</span>, <span class=\"sy0\">/</span>\u2656.<span class=\"sy0\">*</span>\u2654.<span class=\"sy0\">*</span>\u2656<span class=\"sy0\">/</span><span class=\"br0\">]</span><br/>row = pieces.<span class=\"me1\">shuffle</span>.<span class=\"me1\">join</span> <span class=\"kw1\">until</span> regexes.<span class=\"me1\">all</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>re<span class=\"sy0\">|</span> re.<span class=\"me1\">match</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">}</span> <br/><span class=\"kw3\">puts</span> row</pre>"}, {"lang": "Rust", "loc": 35, "block": "<pre class=\"text highlighted_source\">use std::collections::BTreeSet;<br/>\u00a0<br/>struct Chess960 ( BTreeSet&lt;String&gt; );<br/>\u00a0<br/>impl Chess960 {<br/>    fn invoke(&amp;mut self, b: &amp;str, e: &amp;str) {<br/>        if e.len() &lt;= 1 {<br/>            let s = b.to_string() + e;<br/>            if Chess960::is_valid(&amp;s) { self.0.insert(s); }<br/>        } else {<br/>            for (i, c) in e.char_indices() {<br/>                let mut b = b.to_string();<br/>                b.push(c);<br/>                let mut e = e.to_string();<br/>                e.remove(i);<br/>                self.invoke(&amp;b, &amp;e);<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    fn is_valid(s: &amp;str) -&gt; bool {<br/>        let k = s.find('K').unwrap();<br/>        k &gt; s.find('R').unwrap() &amp;&amp; k &lt; s.rfind('R').unwrap() &amp;&amp; s.find('B').unwrap()\u00a0% 2\u00a0!= s.rfind('B').unwrap()\u00a0% 2<br/>    }<br/>}<br/>\u00a0<br/>// Program entry point.<br/>fn main() {<br/>    let mut chess960 = Chess960(BTreeSet::new());<br/>    chess960.invoke(\"\", \"KQRRNNBB\");<br/>\u00a0<br/>    for (i, p) in chess960.0.iter().enumerate() {<br/>        println!(\"{}: {}\", i, p);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Chess960 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pieces <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"st0\">'\u2656'</span>, <span class=\"st0\">'\u2657'</span>, <span class=\"st0\">'\u2658'</span>, <span class=\"st0\">'\u2655'</span>, <span class=\"st0\">'\u2654'</span>, <span class=\"st0\">'\u2658'</span>, <span class=\"st0\">'\u2657'</span>, <span class=\"st0\">'\u2656'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span>tailrec<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generateFirstRank<span class=\"br0\">(</span>pieces<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>rank<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      rank.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\".*\u2656.*\u2654.*\u2656.*\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> rank.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\".*\u2657(..|....|......|)\u2657.*\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>pieces<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>check<span class=\"br0\">(</span>p.<span class=\"me1\">toString</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"[^<span class=\"es1\">\\\\</span>p{Upper}]\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      generateFirstRank<span class=\"br0\">(</span>pieces<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> p<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  loop<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span>tailrec<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>generateFirstRank<span class=\"br0\">(</span>pieces<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 57, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span> <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"co1\">; list library</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; random numbers</span><br/>\u00a0<br/><span class=\"br0\">(</span>random<span class=\"sy0\">-</span>source<span class=\"sy0\">-</span>randomize<span class=\"sy0\">!</span> default<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>source<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Random integer in [start, end)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>between start end<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>len <span class=\"br0\">(</span><span class=\"sy0\">-</span> end start <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> len <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      start<br/>      <span class=\"br0\">(</span><span class=\"sy0\">+</span> start <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Random item in list</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>pick lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> lst <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Construct a random piece placement for Chess960</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>piece<span class=\"sy0\">-</span>positions<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>free<span class=\"sy0\">-</span>indices positions<span class=\"br0\">)</span> <span class=\"co1\">; return list of empty slot indices</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>free '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">8</span> i<span class=\"br0\">)</span><br/>        free<br/>        <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> positions i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i free<span class=\"br0\">)</span><br/>                free<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>place<span class=\"sy0\">-</span>king<span class=\"sy0\">+</span>rooks positions<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>king<span class=\"sy0\">-</span>posn <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>between <span class=\"nu0\">1</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions king<span class=\"sy0\">-</span>posn <span class=\"st0\">\"K\"</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">; left-rook is between left-edge and king</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>between <span class=\"nu0\">0</span> king<span class=\"sy0\">-</span>posn<span class=\"br0\">)</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">; right-rook is between right-edge and king</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>between <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> king<span class=\"sy0\">-</span>posn<span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>place<span class=\"sy0\">-</span>bishops positions<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>evens odds<span class=\"br0\">)</span> <span class=\"br0\">(</span>partition <span class=\"kw1\">even?</span> <span class=\"br0\">(</span>free<span class=\"sy0\">-</span>indices positions<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>pick evens<span class=\"br0\">)</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>pick odds<span class=\"br0\">)</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>positions <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"nu0\">8</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>place<span class=\"sy0\">-</span>king<span class=\"sy0\">+</span>rooks positions<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>place<span class=\"sy0\">-</span>bishops positions<span class=\"br0\">)</span><br/>    <span class=\"co1\">;; place the queen in a random remaining slot</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>pick <span class=\"br0\">(</span>free<span class=\"sy0\">-</span>indices positions<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"Q\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; place the two knights in the remaining slots</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>idx<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> positions idx <span class=\"st0\">\"N\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>free<span class=\"sy0\">-</span>indices positions<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    positions<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"First rank: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>piece<span class=\"sy0\">-</span>positions<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 18, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: start is \"RKR\";<br/>    var char: piece is ' ';<br/>    var integer: pos is 0;<br/>  begin<br/>    for piece range \"QNN\" do<br/>      pos\u00a0:= rand(1, succ(length(start)));<br/>      start\u00a0:= start[.. pred(pos)] &amp; str(piece) &amp; start[pos ..];<br/>    end for;<br/>    pos\u00a0:= rand(1, succ(length(start)));<br/>    start\u00a0:= start[.. pred(pos)] &amp; \"B\" &amp; start[pos ..];<br/>    pos\u00a0:= succ(pos) + 2 * rand(0, (length(start) - pos) div 2);<br/>    start\u00a0:= start[.. pred(pos)] &amp; \"B\" &amp; start[pos ..];<br/>    writeln(start);<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> chess960 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> pos <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>struct::<span class=\"kw2\">list</span> shuffle <span class=\"br0\">{</span>N N B B R R Q K<span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>R.<span class=\"sy0\">*</span>K.<span class=\"sy0\">*</span>R<span class=\"br0\">}</span> <span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>B<span class=\"br0\">(</span>..<span class=\"br0\">)</span><span class=\"sy0\">*</span>B<span class=\"br0\">}</span> <span class=\"re0\">$pos</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$pos</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># A simple renderer</span><br/><span class=\"kw1\">proc</span> chessRender <span class=\"br0\">{</span>position<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">string</span> map <span class=\"br0\">{</span>P \u2659 N \u2658 B \u2657 R \u2656 Q \u2655 K \u2654<span class=\"br0\">}</span> <span class=\"re0\">$position</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Output multiple times just to show scope of positions</span><br/><span class=\"kw1\">foreach</span> - <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>chessRender <span class=\"br0\">[</span>chess960<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">const pieces=\"KQRrBbNN\";<br/>starts:=pieces:Utils.Helpers.permuteW(_).filter(fcn(p){<br/>   I:=p.index;<br/>   I(\"B\")\u00a0% 2\u00a0!= I(\"b\")\u00a0% 2 and // Bishop constraint.<br/>   // King constraint.<br/>   ((I(\"r\") &lt; I(\"K\") and I(\"K\") &lt; I(\"R\")) or<br/>    (I(\"R\") &lt; I(\"K\") and I(\"K\") &lt; I(\"r\")))<br/>}).pump(List,\"concat\",\"toUpper\"):Utils.Helpers.listUnique(_);</pre>"}]}