{"task": "Compile-time_calculation", "blocks": [{"lang": "360 Assembly", "loc": 7, "block": "<pre class=\"text highlighted_source\">COMPCALA CSECT<br/>         L      R1,=A(FACT10)      r1=10!<br/>         XDECO  R1,PG<br/>         XPRNT  PG,L'PG            print buffer<br/>         BR     R14                exit<br/>FACT10   EQU    10*9*8*7*6*5*4*3*2*1   factorial computation<br/>PG       DS     CL12</pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">procedure</span> CompileTimeCalculation <span class=\"kw1\">is</span><br/>   Factorial\u00a0: <span class=\"kw3\">constant</span> Integer\u00a0:= <span class=\"nu0\">10</span>*<span class=\"nu0\">9</span>*<span class=\"nu0\">8</span>*<span class=\"nu0\">7</span>*<span class=\"nu0\">6</span>*<span class=\"nu0\">5</span>*<span class=\"nu0\">4</span>*<span class=\"nu0\">3</span>*<span class=\"nu0\">2</span>*<span class=\"nu0\">1</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Factorial<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> CompileTimeCalculation;<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> factorial10 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "C", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8fac ORDER_PP_FN( \\<br/>8fn(8X, 8seq_fold(8times, 1, 8seq_iota(1, 8inc(8X)))) )</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"10! =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ORDER_PP<span class=\"br0\">(</span> 8to_lit<span class=\"br0\">(</span> 8fac<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 18, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> i<span class=\"sy1\">&gt;</span> <span class=\"kw4\">struct</span> Fac<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> result <span class=\"sy1\">=</span> i <span class=\"sy2\">*</span> Fac<span class=\"sy1\">&lt;</span>i<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">result</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;&gt;</span> <span class=\"kw4\">struct</span> Fac<span class=\"sy1\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> result <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"10! = \"</span> <span class=\"sy1\">&lt;&lt;</span> Fac<span class=\"sy1\">&lt;</span><span class=\"nu0\">10</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">result</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fac <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> ct<span class=\"sy0\">-</span>factorial <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span>fac n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>eval-<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">compile-toplevel</span> <span class=\"sy0\">:</span><span class=\"me1\">load-toplevel</span> <span class=\"sy0\">:</span><span class=\"me1\">execute</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defun</span> factorial <span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">long</span> fact<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">long</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">long</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// enum means \"compile-time constant\", it forces CTFE.</span><br/>    <span class=\"kw4\">enum</span> fact10 <span class=\"sy0\">=</span> fact<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    printf<span class=\"br0\">(</span><span class=\"st0\">\"%ld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> fact10<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span> fact10 <span class=\"sy3\">=</span> Factorial<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span> fact10 <span class=\"sy3\">=</span> Factorial<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant DIX<span class=\"sy0\">!</span> <span class=\"br0\">(</span>factorial <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant DIX<span class=\"sy0\">!+</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> DIX<span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>writeln DIX<span class=\"sy0\">!+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3628801</span>    <br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 3, "block": "<pre class=\"text highlighted_source\">: factorial ( n -- n! ) [1,b] product\u00a0;<br/>\u00a0<br/>CONSTANT: 10-factorial $[ 10 factorial ]</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">: factorial ( n -- n! ) [1,b] product\u00a0;<br/>\u00a0<br/>CONSTANT: 10-factorial $[ 10 factorial ]</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: fac ( n -- n! ) 1 swap 1+ 2 max 2\u00a0?do i * loop\u00a0;<br/>\u00a0<br/>: main  .\" 10! = \" [ 10 fac ] literal .\u00a0;<br/>\u00a0<br/>see main <br/>: main  <br/>  .\\\" 10! = \" 3628800 .\u00a0; ok</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\"> <span class=\"kw1\">program</span> test<br/>\u00a0<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">t</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span><span class=\"nu0\">6</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>  <span class=\"co1\">!computed at compile time</span><br/>\u00a0<br/>   write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> t  <span class=\"co1\">!write the value the console.</span><br/>\u00a0<br/> <span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 8, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Calculations can be done in a Const declaration at compile time</span><br/><span class=\"co1\">' provided only literals or other constant expressions are used</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> factorial <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> * <span class=\"nu0\">3</span> * <span class=\"nu0\">4</span> * <span class=\"nu0\">5</span> * <span class=\"nu0\">6</span> * <span class=\"nu0\">7</span> * <span class=\"nu0\">8</span> * <span class=\"nu0\">9</span> * <span class=\"nu0\">10</span><br/><span class=\"kw1\">Print</span> factorial <span class=\"co1\">' 3628800</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 7, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"nu0\">4</span><span class=\"sy3\">*</span><span class=\"nu0\">5</span><span class=\"sy3\">*</span><span class=\"nu0\">6</span><span class=\"sy3\">*</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">9</span><span class=\"sy3\">*</span><span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Factorial <span class=\"kw1\">where</span><br/><span class=\"kw1\">import</span> Language<span class=\"sy0\">.</span>Haskell<span class=\"sy0\">.</span>TH<span class=\"sy0\">.</span>Syntax<br/>\u00a0<br/>fact n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><br/>\u00a0<br/>factQ <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> Q Exp<br/>factQ <span class=\"sy0\">=</span> lift <span class=\"sy0\">.</span> fact</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">pf10=: smoutput bind <span class=\"sy0\">(</span>!<span class=\"nu0\">10</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">macro fact(n)<br/>  factorial(n)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TEN<span class=\"sy0\">_</span>FACTORIAL <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"10! = $TEN_FACTORIAL\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 8, "block": "<pre class=\"text highlighted_source\">-- create new (movie) script at runtime<br/>m = new(#script)<br/>\u00a0<br/>-- the following line triggers compilation to bytecode<br/>m.scriptText = \"on fac10\"&amp;RETURN&amp;\"return \"&amp;(10*9*8*7*6*5*4*3*2)&amp;RETURN&amp;\"end\"<br/>\u00a0<br/>put fac10()<br/>-- 3628800</pre>"}, {"lang": "m4", "loc": 6, "block": "<pre class=\"text highlighted_source\">define(`factorial',<br/>`ifelse($1, 0, 1, `eval($1 * factorial(eval($1 - 1)))')')dnl<br/>dnl<br/>BEGIN {<br/>\tprint \"10! is factorial(10)\"<br/>}</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">f = Compile[{}, 10!]</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">proc fact(x: int): int =<br/>  result = 1<br/>  for i in 2..x:<br/>    result = result * i<br/>\u00a0<br/>const fact10 = fact(10)<br/>echo(fact10)</pre>"}, {"lang": "Oberon-2", "loc": 10, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CompileTime;<br/><span class=\"kw1\">IMPORT</span> <br/>  Out;<br/><span class=\"kw1\">CONST</span><br/>    tenfac <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span><span class=\"nu0\">6</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"10! =\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>tenfac<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CompileTime.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> CompileTime <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span><span class=\"nu0\">6</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> days_to_seconds n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> conv <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"sy0\">*</span> <span class=\"nu0\">60</span> <span class=\"sy0\">*</span> <span class=\"nu0\">60</span> <span class=\"kw1\">in</span><br/>  <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> conv<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">10 seq reduce(#*) Constant new: FACT10<br/>: newFunction  FACT10 .\u00a0;</pre>"}, {"lang": "OxygenBasic", "loc": 54, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'LIBRARY CALLS<br/>'=============<br/>\u00a0<br/>extern lib \"../../oxygen.dll\"<br/>\u00a0<br/>declare o2_basic (string src)<br/>declare o2_exec  (optional sys p) as sys<br/>declare o2_errno () as sys<br/>declare o2_error () as string<br/>\u00a0<br/>extern lib \"kernel32.dll\"<br/>\u00a0<br/>declare QueryPerformanceFrequency(quad*freq)<br/>declare QueryPerformanceCounter(quad*count)<br/>\u00a0<br/>end extern<br/>\u00a0<br/>'EMBEDDED SOURCE CODE<br/>'====================<br/>\u00a0<br/>src=quote<br/>\u00a0<br/>===Source===<br/>\u00a0<br/>def  Pling10 2*3*4*5*6*7*8*9*10<br/>\u00a0<br/>byte a[pling10] 'Pling10 is resolved to a number here at compile time<br/>\u00a0<br/>print pling10<br/>\u00a0<br/>===Source===<br/>\u00a0<br/>\u00a0<br/>'TIMER<br/>'=====<br/>\u00a0<br/>quad ts,tc,freq<br/>QueryPerformanceFrequency freq<br/>QueryPerformanceCounter ts<br/>\u00a0<br/>'COMPILE/EXECUTE<br/>'===============<br/>\u00a0<br/>o2_basic src<br/>\u00a0<br/>if o2_errno then<br/>  print o2_error<br/>else<br/>  QueryPerformanceCounter tc<br/>  print \"Compile time: \" str((tc-ts)*1000/freq, 1) \" MilliSeconds\"<br/>  o2_exec 'Run the program<br/>end if<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span><br/>   System Application<br/><span class=\"kw1\">prepare</span><br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Fac</span> N<span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 N 1<span class=\"br0\">}</span> Number<span class=\"sy0\">.</span><span class=\"st0\">'*'</span> 1<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/>   Fac10 = <span class=\"br0\">{</span>Fac 10<span class=\"br0\">}</span><br/><span class=\"kw1\">define</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"10! = \"</span><span class=\"sy0\">#</span>Fac10<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Pascal", "loc": 13, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> <span class=\"kw1\">in</span> out<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>\u00a0<br/>X <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span><span class=\"nu0\">9</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span><span class=\"nu0\">6</span><span class=\"sy3\">*</span><span class=\"nu0\">5</span><span class=\"sy3\">*</span><span class=\"nu0\">4</span><span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"nu0\">1</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/><span class=\"kw3\">writeln</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$tenfactorial</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$tenfactorial<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"br0\">{</span><span class=\"re0\">$tenfactorial</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$tenfactorial</span> <span class=\"sy0\">*=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">$tenfact</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> <br/><span class=\"kw3\">say</span> <span class=\"re0\">$tenfact</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 4, "block": "<pre class=\"text highlighted_source\">integer a,b<br/>a = 10*9*8*7*6*5*4*3*2*1<br/>b = factorial(10)<br/>?{a,b}</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de fact (N)<br/>   (apply * (range 1 N)) )<br/>\u00a0<br/>(de foo ()<br/>   (prinl \"The value of fact(10) is \" `(fact 10)) )</pre>"}, {"lang": "PL/I", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Factorials using the pre-processor. */<br/>test: procedure options (main);<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>%factorial: procedure (N) returns (fixed);<br/>   declare N fixed;<br/>   declare (i, k) fixed;<br/>\u00a0<br/>   k = 1;<br/>   do i = 2 to N;<br/>      k = k*i;<br/>   end;<br/>   return (k);<br/>\u00a0<br/>%end factorial;<br/>\u00a0<br/>%activate factorial;<br/>\u00a0<br/>   declare (x, y) fixed decimal;<br/>   x = factorial (4);<br/>   put ('factorial 4  is ', x);<br/>   y = factorial (6);<br/>   put skip list ('factorial 6 is ', y);<br/>\u00a0<br/>end test;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 16, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> fact<span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-ge</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Zero<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::One<br/>        <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::One<span class=\"br0\">)</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$fact</span><span class=\"sy0\">,</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$fact</span><br/>\u00a0<br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Error</span> <span class=\"st0\">\"$n is lower than 0\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$((Measure-Command {$fact = fact 10}).TotalSeconds) Seconds\"</span><br/><span class=\"re0\">$fact</span> <br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\">a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"nu0\">6</span><span class=\"sy0\">*</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span></pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Import the math library for compile-time<br/>;; Note: included in Racket v5.3.2<br/>(require (for-syntax math))<br/>\u00a0<br/>;; In versions older than v5.3.2, just define the function<br/>;; for compile-time<br/>;;<br/>;; (begin-for-syntax<br/>;;   (define (factorial n)<br/>;;     (if (zero? n)<br/>;;         1<br/>;;         (factorial (- n 1)))))<br/>\u00a0<br/>;; define a macro that calls factorial at compile-time<br/>(define-syntax (fact10 stx)<br/>  #`#,(factorial 10))<br/>\u00a0<br/>;; use the macro defined above<br/>(fact10)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes 10! (ten factorial) during REXX's equivalent of \"compile\u2500time\". */</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'10! ='</span>   \u00a0!<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!: <span class=\"kw1\">procedure</span>; \u00a0!=<span class=\"nu0\">1</span>;            <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   \u00a0!=!<span class=\"sy0\">*</span>j;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>;        <span class=\"kw1\">return</span>\u00a0!</pre>"}, {"lang": "Ring", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = 10*9*8*7*6*5*4*3*2*1<br/>b = factorial(10)<br/>see a + nl<br/>see b + nl<br/>\u00a0<br/>func factorial nr if nr = 1 return 1 else return nr * factorial(nr-1) ok<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">fn factorial(n: i64) -&gt; i64 {<br/>    let mut total = 1;<br/>    for i in 1..n+1 {<br/>        total *= i;<br/>    }<br/>    return total;<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"Factorial of 10 is {}.\", factorial(10));<br/>}</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tenFactorial <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tenFac <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"10! = $tenFactorial\"</span>, tenFac<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 8, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const integer: factorial is\u00a0!10;<br/>  begin<br/>    writeln(factorial);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">define n = <span class=\"br0\">(</span><span class=\"nu0\">10</span>!<span class=\"br0\">)</span>;<br/>say n;</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> makeFacExpr n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> exp <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">append</span> exp <span class=\"st0\">\" * $i\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"expr <span class=\"es0\">\\{</span>$exp<span class=\"es0\">\\}</span>\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">eval</span> <span class=\"br0\">[</span>makeFacExpr <span class=\"nu0\">10</span><span class=\"br0\">]</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>x = factorial 10<br/>\u00a0<br/>#executable&amp;<br/>\u00a0<br/>comcal =\u00a0! (%nP x)--&lt;''&gt;</pre>"}, {"lang": "XLISP", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> f10-at-compile-time <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 3, "block": "<pre class=\"text highlighted_source\">code IntOut=11;<br/>IntOut(0, 10*9*8*7*6*5*4*3*2);<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">const { [1..10].reduce('*).println(\" parse time\") }<br/>\u00a0<br/>#fcn fact(N) { [1..N].reduce('*).println(\" tokenize time\"); \"\"}<br/>   // paste output of fact into source<br/>#tokenize fact(10)<br/>\u00a0<br/>println(\"compiled program running.\");</pre>"}]}