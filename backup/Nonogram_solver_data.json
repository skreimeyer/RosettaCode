{"task": "Nonogram_solver", "blocks": [{"lang": "C++", "loc": 61, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co1\">// A class to solve Nonogram (Hadje) Puzzles</span><br/><span class=\"co1\">// Nigel Galloway - January 23rd., 2017</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span>uint _N, uint _G<span class=\"sy1\">&gt;</span> <span class=\"kw2\">class</span> Nonogram <span class=\"br0\">{</span><br/>  <span class=\"kw2\">enum</span> <span class=\"kw2\">class</span> ng_val <span class=\"sy4\">:</span> <span class=\"kw4\">char</span> <span class=\"br0\">{</span>X<span class=\"sy1\">=</span><span class=\"st0\">'#'</span>,B<span class=\"sy1\">=</span><span class=\"st0\">'.'</span>,V<span class=\"sy1\">=</span><span class=\"st0\">'?'</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span>uint _NG<span class=\"sy1\">&gt;</span> <span class=\"kw4\">struct</span> N <span class=\"br0\">{</span><br/>    N<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    N<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ni,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> l<span class=\"br0\">)</span> <span class=\"sy4\">:</span> X<span class=\"br0\">{</span><span class=\"br0\">}</span>,B<span class=\"br0\">{</span><span class=\"br0\">}</span>,Tx<span class=\"br0\">{</span><span class=\"br0\">}</span>,Tb<span class=\"br0\">{</span><span class=\"br0\">}</span>,ng<span class=\"br0\">(</span>ni<span class=\"br0\">)</span>,En<span class=\"br0\">{</span><span class=\"br0\">}</span>,gNG<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>_NG<span class=\"sy1\">&gt;</span> X, B, T, Tx, Tb<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ng<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> En, gNG<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>        fn <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> i,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> g,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> e,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> l<span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fe<span class=\"br0\">(</span>g,l,<span class=\"kw2\">false</span><span class=\"br0\">)</span> and fe<span class=\"br0\">(</span>g<span class=\"sy2\">+</span>l,e,<span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> ng.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>fe<span class=\"br0\">(</span>g<span class=\"sy2\">+</span>e<span class=\"sy2\">+</span>l,<span class=\"nu0\">1</span>,<span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span> fn<span class=\"br0\">(</span>n<span class=\"sy2\">+</span><span class=\"nu0\">1</span>,i<span class=\"sy2\">-</span>e<span class=\"sy2\">-</span><span class=\"nu0\">1</span>,g<span class=\"sy2\">+</span>e<span class=\"sy2\">+</span>l<span class=\"sy2\">+</span><span class=\"nu0\">1</span>,ng<span class=\"br0\">[</span>n<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fe<span class=\"br0\">(</span>g<span class=\"sy2\">+</span>e<span class=\"sy2\">+</span>l,gNG<span class=\"sy2\">-</span><span class=\"br0\">(</span>g<span class=\"sy2\">+</span>e<span class=\"sy2\">+</span>l<span class=\"br0\">)</span>,<span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span>Tb <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> T.<span class=\"me1\">flip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> Tx <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> T.<span class=\"me1\">flip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>En<span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"sy1\">&lt;=</span>gNG<span class=\"sy2\">-</span>g<span class=\"sy2\">-</span>i<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> fn<span class=\"br0\">(</span>n,i,g,e,l<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span>        fi <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n,<span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span>X.<span class=\"me1\">set</span><span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy4\">;</span> B.<span class=\"me1\">set</span><span class=\"br0\">(</span>n, not g<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    ng_val      fg <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">const</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>X.<span class=\"me1\">test</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">?</span> ng_val<span class=\"sy4\">::</span><span class=\"me2\">X</span> <span class=\"sy4\">:</span> <span class=\"br0\">(</span>B.<span class=\"me1\">test</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">?</span> ng_val<span class=\"sy4\">::</span><span class=\"me2\">B</span> <span class=\"sy4\">:</span> ng_val<span class=\"sy4\">::</span><span class=\"me2\">V</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">inline</span> <span class=\"kw4\">bool</span> fe <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n,<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> i, <span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> g<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> e <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span>e<span class=\"sy1\">&lt;</span>n<span class=\"sy2\">+</span>i<span class=\"sy4\">;</span><span class=\"sy2\">++</span>e<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g and fg<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy1\">==</span>ng_val<span class=\"sy4\">::</span><span class=\"me2\">B</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span><span class=\"sy3\">!</span>g and fg<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy1\">==</span>ng_val<span class=\"sy4\">::</span><span class=\"me2\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> T<span class=\"br0\">[</span>e<span class=\"br0\">]</span> <span class=\"sy1\">=</span> g<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span>         fl <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>En <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>      Tx.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> Tb.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> En<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>      fn<span class=\"br0\">(</span><span class=\"nu0\">0</span>,std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>ng.<span class=\"me1\">cbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,ng.<span class=\"me1\">cend</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy2\">+</span>ng.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,ng<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span> En<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"co1\">// end of N</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>N<span class=\"sy1\">&lt;</span>_G<span class=\"sy1\">&gt;&gt;</span> ng<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>N<span class=\"sy1\">&lt;</span>_N<span class=\"sy1\">&gt;&gt;</span> gn<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> En, zN, zG<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">void</span> setCell<span class=\"br0\">(</span>uint n, uint i, <span class=\"kw4\">bool</span> g<span class=\"br0\">)</span><span class=\"br0\">{</span>ng<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">fi</span><span class=\"br0\">(</span>i,g<span class=\"br0\">)</span><span class=\"sy4\">;</span> gn<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">fi</span><span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  Nonogram<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span><span class=\"sy3\">&amp;</span> n,<span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span><span class=\"sy3\">&amp;</span> i,<span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> g <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> ng<span class=\"br0\">{</span><span class=\"br0\">}</span>, gn<span class=\"br0\">{</span><span class=\"br0\">}</span>, En<span class=\"br0\">{</span><span class=\"br0\">}</span>, zN<span class=\"br0\">(</span>n.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, zG<span class=\"br0\">(</span>i.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> n<span class=\"sy1\">&lt;</span>zG<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span> gn.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>N<span class=\"sy1\">&lt;</span>_N<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>i<span class=\"br0\">[</span>n<span class=\"br0\">]</span>,zN<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span>zN<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      ng.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>N<span class=\"sy1\">&lt;</span>_G<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,zG<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> g.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> e<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> e<span class=\"sy1\">&lt;</span>zG or e<span class=\"sy1\">&lt;</span>g<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> e<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span><span class=\"sy1\">==</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span> setCell<span class=\"br0\">(</span>i,e,<span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">bool</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"br0\">{</span><span class=\"br0\">}</span>, g<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>  <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> l<span class=\"sy1\">&lt;</span>zN<span class=\"sy4\">;</span> l<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"sy1\">=</span> ng<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">fl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> i<span class=\"sy2\">+</span><span class=\"sy1\">=</span>g<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span>zG<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> ng<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tb</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> setCell <span class=\"br0\">(</span>l,i,ng<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> l<span class=\"sy1\">&lt;</span>zG<span class=\"sy4\">;</span> l<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"sy1\">=</span> gn<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">fl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> i<span class=\"sy2\">+</span><span class=\"sy1\">=</span>g<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span>zN<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gn<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> gn<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tb</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> setCell <span class=\"br0\">(</span>i,l,gn<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">Tx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> En<span class=\"br0\">)</span>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> En <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> zN<span class=\"sy2\">+</span>zG<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> toStr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> n<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span>zN<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> g <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> g<span class=\"sy1\">&lt;</span>zG<span class=\"sy4\">;</span> g<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>n <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">fg</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span>n<span class=\"sy1\">&lt;&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 175, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defpackage <span class=\"sy0\">:</span><span class=\"me1\">ac3</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"sy0\">:</span><span class=\"me1\">cl</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">export</span> <span class=\"sy0\">:</span><span class=\"me1\">var</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">domain</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">satisfies-p</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">constraint-possible-p</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">ac3</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Implements the AC3 algorithm. Extend VAR with the variable<br/>types for your particular problem and implement SATISFIES-P and<br/>CONSTRAINT-POSSIBLE-P for your variables. Initialize the DOMAIN of your variables<br/>with unary constraints already satisfied and then pass them to AC3 in a list.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package <span class=\"sy0\">:</span><span class=\"me1\">ac3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass var <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>domain <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">domain</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> domain<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"The base variable type from which all other<br/>variables should extend.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defgeneric satisfies-p <span class=\"br0\">(</span>a b va vb<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Determine if constrainted variables A and B are<br/>satisfied by the instantiation of their respective values VA and VB.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defgeneric constraint-possible-p <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Determine if variables A and B can even be<br/>checked for a binary constraint.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> arc-reduce <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Assuming A and B truly form a constraint, prune all values<br/>from A that do not satisfy any value in B. Return T if the domain<br/>of A changed by any amount, NIL otherwise.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>change<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>domain a<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>loop for va in <span class=\"br0\">(</span>domain a<span class=\"br0\">)</span><br/>             <span class=\"kw1\">when</span> <span class=\"br0\">(</span>loop for vb in <span class=\"br0\">(</span>domain b<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>satisfies-p a b va vb<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">return</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     finally <span class=\"br0\">(</span><span class=\"kw1\">setf</span> change t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             collect va<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    change<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> binary-constraint-p <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Check if variables A and B could form a constraint, then return T<br/>if any of their values form a contradiction, NIL otherwise.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>constraint-possible-p a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>block found<br/>      <span class=\"br0\">(</span>loop for va in <span class=\"br0\">(</span>domain a<span class=\"br0\">)</span><br/>         <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for vb in <span class=\"br0\">(</span>domain b<span class=\"br0\">)</span><br/>               <span class=\"kw1\">do</span> <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>satisfies-p a b va vb<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>return-from found t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ac3 <span class=\"br0\">(</span>vars<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Run the Arc Consistency 3 algorithm on the given set of variables.<br/>Assumes unary constraints have already been satisfied.\"</span><br/>  <span class=\"co1\">;; Form a worklist of the constraints of every variable to every other variable.</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>worklist <span class=\"br0\">(</span>loop for x in vars<br/>                     <span class=\"kw1\">append</span> <span class=\"br0\">(</span>loop for y in vars<br/>                               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                         <span class=\"br0\">(</span>binary-constraint-p x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               collect <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; Prune the worklist of satisfied arcs until it is empty.</span><br/>    <span class=\"br0\">(</span>loop while worklist<br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>x <span class=\"sy0\">.</span> y<span class=\"br0\">)</span> <span class=\"br0\">(</span>pop worklist<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>arc-reduce x y<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>domain x<span class=\"br0\">)</span><br/>                  <span class=\"co1\">;; If the current arc's domain was reduced, then append any arcs it</span><br/>                  <span class=\"co1\">;; is still constrained with to the end of the worklist, as they</span><br/>                  <span class=\"co1\">;; need to be rechecked.</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> worklist <span class=\"br0\">(</span><span class=\"kw1\">nconc</span> worklist <span class=\"br0\">(</span>loop for z in vars<br/>                                                    <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> x z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                              <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> y z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                              <span class=\"br0\">(</span>binary-constraint-p x z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                    collect <span class=\"br0\">(</span><span class=\"kw1\">cons</span> z x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"No values left in ~a\"</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> vars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defpackage <span class=\"sy0\">:</span><span class=\"me1\">nonogram</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"sy0\">:</span><span class=\"me1\">cl</span> <span class=\"sy0\">:</span><span class=\"me1\">ac3</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Utilize the AC3 package to solve nonograms.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package <span class=\"sy0\">:</span><span class=\"me1\">nonogram</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass line <span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>depth <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">depth</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> depth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"A LINE is a variable that represents either a<br/>column or row of cells and all of the permutations of values those<br/>cells can assume\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod print-object <span class=\"br0\">(</span><span class=\"br0\">(</span>o line<span class=\"br0\">)</span> s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print-unreadable-object <span class=\"br0\">(</span>o s <span class=\"sy0\">:</span><span class=\"me1\">type</span> t<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-slots <span class=\"br0\">(</span>depth domain<span class=\"br0\">)</span> o<br/>      <span class=\"br0\">(</span>format s <span class=\"st0\">\":depth ~a\u00a0:domain ~a\"</span> depth domain<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass row <span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass col <span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod satisfies-p <span class=\"br0\">(</span><span class=\"br0\">(</span>a line<span class=\"br0\">)</span> <span class=\"br0\">(</span>b line<span class=\"br0\">)</span> va vb<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> va <span class=\"br0\">(</span>depth b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">aref</span> vb <span class=\"br0\">(</span>depth a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod constraint-possible-p <span class=\"br0\">(</span><span class=\"br0\">(</span>a line<span class=\"br0\">)</span> <span class=\"br0\">(</span>b line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span>type-of a<span class=\"br0\">)</span> <span class=\"br0\">(</span>type-of b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-line-domain <span class=\"br0\">(</span>runs <span class=\"kw1\">length</span> <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>start <span class=\"nu0\">0</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Enumerate all valid permutations of a line's values.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> runs<br/>      <span class=\"br0\">(</span>loop for i from start<br/>         to <span class=\"br0\">(</span>- <span class=\"kw1\">length</span><br/>               <span class=\"br0\">(</span>reduce #'+ <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> runs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> runs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">car</span> runs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">append</span> <span class=\"br0\">(</span>make-line-domain <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> runs<span class=\"br0\">)</span> <span class=\"kw1\">length</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> i <span class=\"br0\">(</span><span class=\"kw1\">car</span> runs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-line <span class=\"br0\">(</span>type runs depth <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Create and initialize a ROW or COL instance.\"</span><br/>  <span class=\"br0\">(</span>make-instance<br/>   type <span class=\"sy0\">:</span><span class=\"me1\">depth</span> depth <span class=\"sy0\">:</span><span class=\"me1\">domain</span><br/>   <span class=\"br0\">(</span>loop for <span class=\"kw1\">value</span> in <span class=\"br0\">(</span>make-line-domain runs <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>      collect <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>arr <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"kw1\">length</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop for pos in <span class=\"kw1\">value</span><br/>                   for run in runs<br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for i from pos below <span class=\"br0\">(</span>+ pos run<span class=\"br0\">)</span><br/>                         <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> arr i<span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                arr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-lines <span class=\"br0\">(</span>type run-<span class=\"kw1\">set</span> <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Initialize a set of lines.\"</span><br/>  <span class=\"br0\">(</span>loop for runs across run-<span class=\"kw1\">set</span><br/>     for depth from <span class=\"nu0\">0</span><br/>     collect <span class=\"br0\">(</span>make-line type runs depth <span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> nonogram <span class=\"br0\">(</span>problem<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Given a nonogram problem description, solve it and print the result.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>nrows <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> problem <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>ncols <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> problem <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>vars <span class=\"br0\">(</span>ac3 <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>make-lines 'row <span class=\"br0\">(</span><span class=\"kw1\">aref</span> problem <span class=\"nu0\">0</span><span class=\"br0\">)</span> ncols<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>make-lines 'col <span class=\"br0\">(</span><span class=\"kw1\">aref</span> problem <span class=\"nu0\">1</span><span class=\"br0\">)</span> nrows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for var in vars<br/>       while <span class=\"br0\">(</span><span class=\"kw1\">eq</span> 'row <span class=\"br0\">(</span>type-of var<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>loop for cell across <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>domain var<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a \"</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> cell #\\# #\\<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *test-<span class=\"kw1\">set</span>*<br/>  '<span class=\"br0\">(</span><span class=\"st0\">\"C BA CB BB F AE F A B\"</span><br/>    <span class=\"st0\">\"AB CA AE GA E C D C\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Helper functions to read and parse problems from a file.</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> parse-word <span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>- <span class=\"br0\">(</span>char-code c<span class=\"br0\">)</span> <span class=\"br0\">(</span>char-code #\\A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> parse-line <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>map 'vector #'parse-word <span class=\"br0\">(</span>uiop<span class=\"sy0\">:</span><span class=\"me1\">split-string</span> <span class=\"br0\">(</span>string-upcase line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> parse-nonogram <span class=\"br0\">(</span>rows columns<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>vector <span class=\"br0\">(</span>parse-line rows<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>parse-line columns<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-until-line <span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"br0\">(</span>read-line stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>string-trim '<span class=\"br0\">(</span>#\\space<span class=\"br0\">)</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">print</span> line<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">return</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> solve-from-file <span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>handler-<span class=\"kw1\">case</span><br/>      <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s file<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>loop<br/>           <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>nonogram <span class=\"br0\">(</span>parse-nonogram <span class=\"br0\">(</span>read-until-line s<span class=\"br0\">)</span><br/>                                     <span class=\"br0\">(</span>read-until-line s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>end-of-file <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 136, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Create all patterns of a row or col that match given runs.</span><br/><span class=\"kw4\">auto</span> genRow<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> w<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> genSeg<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> o<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> sp<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>o.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">sp</span> <span class=\"sy0\">-</span> o.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> tail<span class=\"sy0\">;</span> genSeg<span class=\"br0\">(</span>o<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> sp <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">~=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">~</span> o<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> tail<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> ones <span class=\"sy0\">=</span> s.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> genSeg<span class=\"br0\">(</span>ones<span class=\"sy0\">,</span> w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> s.<span class=\"me1\">sum</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>dropOne<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Fix inevitable value of cells, and propagate.</span><br/><span class=\"kw4\">void</span> deduce<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hr<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> vr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> allowable<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//return row.dropOne.fold!q{ a[] |= b[] }(row[0].dup);</span><br/>        <span class=\"kw1\">return</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> b<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">(</span>row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">dup</span><span class=\"sy0\">,</span> row.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">bool</span> fits<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> zip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>xy <span class=\"sy0\">=&gt;</span> xy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> xy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> w <span class=\"sy0\">=</span> vr.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>                  h <span class=\"sy0\">=</span> hr.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> rows <span class=\"sy0\">=</span> hr.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> genRow<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> cols <span class=\"sy0\">=</span> vr.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> genRow<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> canDo <span class=\"sy0\">=</span> rows.<span class=\"me1\">map</span><span class=\"sy0\">!</span>allowable.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Initially mark all columns for update.</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">uint</span><span class=\"br0\">]</span> modRows<span class=\"sy0\">,</span> modCols<span class=\"sy0\">;</span><br/>    modCols <span class=\"sy0\">=</span> <span class=\"kw2\">true</span>.<span class=\"me1\">repeat</span>.<span class=\"me1\">enumerate</span><span class=\"sy0\">!</span><span class=\"kw4\">uint</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>.<span class=\"me1\">assocArray</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co2\">/// See if any value a given column is fixed; if so,</span><br/>    <span class=\"co2\">/// mark its corresponding row for future fixup.</span><br/>    <span class=\"kw4\">void</span> fixCol<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> c <span class=\"sy0\">=</span> canDo.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">remove</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>fits<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Throws.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> allowable<span class=\"br0\">(</span>cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> canDo<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                modRows<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                canDo<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co2\">/// Ditto, for rows.</span><br/>    <span class=\"kw4\">void</span> fixRow<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> c <span class=\"sy0\">=</span> canDo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"me1\">remove</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>fits<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Throws.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> allowable<span class=\"br0\">(</span>rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> canDo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                modCols<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                canDo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> showGram<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// If there's 'x', something is wrong.</span><br/>        <span class=\"co1\">// If there's '?', needs more work.</span><br/>        m.<span class=\"me1\">each</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%c\u00a0%)\"</span><span class=\"sy0\">,</span> x.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"x#.?\"</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>modCols.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        modCols.<span class=\"me1\">byKey</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span>fixCol<span class=\"sy0\">;</span><br/>        modCols <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        modRows.<span class=\"me1\">byKey</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span>fixRow<span class=\"sy0\">;</span><br/>        modRows <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cartesianProduct<span class=\"br0\">(</span>h.<span class=\"me1\">iota</span><span class=\"sy0\">,</span> w.<span class=\"me1\">iota</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ij <span class=\"sy0\">=&gt;</span> canDo<span class=\"br0\">[</span>ij<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>ij<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> canDo<span class=\"br0\">[</span>ij<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>ij<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"st0\">\"Solution would be unique\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"st0\">\"Solution may not be unique, doing exhaustive search:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// We actually do exhaustive search anyway. Unique</span><br/>    <span class=\"co1\">// solution takes no time in this phase anyway.</span><br/>    <span class=\"kw4\">auto</span> out_ <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> tryAll<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">w</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>cols<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>out_.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            showGram<span class=\"br0\">(</span>out_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> sol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> x<span class=\"sy0\">;</span> rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            out_<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            sol <span class=\"sy0\">+=</span> tryAll<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sol<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> tryAll<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"No solution.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>     <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"Unique solution.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">default</span><span class=\"sy0\">:</span> writeln<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\" solutions.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> solve<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> p<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> showRuns<span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> s <span class=\"sy0\">=</span> p.<span class=\"me1\">splitLines</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>l <span class=\"sy0\">=&gt;</span> l.<span class=\"me1\">split</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>w <span class=\"sy0\">=&gt;</span><br/>                    w.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>                    <span class=\"co1\">//w.map!(c =&gt; c - 'A' + 1))).to!(int[][][]);</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>showRuns<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Horizontal runs: \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Vertical runs: \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    deduce<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Read problems from file.</span><br/>    <span class=\"kw4\">immutable</span> fn <span class=\"sy0\">=</span> <span class=\"st0\">\"nonogram_problems.txt\"</span><span class=\"sy0\">;</span><br/>    fn.<span class=\"me1\">readText</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>p.<span class=\"me1\">strip</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">strip</span>.<span class=\"me1\">solve</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Extra example not solvable by deduction alone:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"B B A A<span class=\"es1\">\\n</span>B B A A\"</span>.<span class=\"me1\">solve</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Extra example where there is no solution:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"B A A<span class=\"es1\">\\n</span>A A A\"</span>.<span class=\"me1\">solve</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 37, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>I define a discriminated union to provide Nonogram Solver functionality.<br/>Nigel Galloway May 28th., 2016<br/>*)</span><br/><span class=\"kw1\">type</span> N <span class=\"sy0\">=</span><br/>  |X |B |V<br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fn n i <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span>     fn n i <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">for</span> g <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i<span class=\"sy0\">-</span>n <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> e <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> e <span class=\"sy0\">&gt;=</span> g <span class=\"kw1\">then</span> X <span class=\"kw1\">else</span> B<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fi n i <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>      <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span><br/>      | h::t <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> t <span class=\"kw1\">with</span><br/>                | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">for</span> g <span class=\"kw1\">in</span> fn h i <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">append</span> g <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>g.<span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                | _  <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">for</span> g <span class=\"kw1\">in</span> fn h <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sum</span> t<span class=\"br0\">)</span><span class=\"sy0\">+</span>t.<span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> fi t <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>g.<span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">concat</span><span class=\"br0\">[</span>g<span class=\"sy0\">;</span><span class=\"br0\">[</span>|B|<span class=\"br0\">]</span><span class=\"sy0\">;</span>a<span class=\"br0\">]</span><br/>      | <span class=\"br0\">[</span><span class=\"br0\">]</span>   <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> i <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> B<span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span><br/>    fi n i<br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fi n i <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map2</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> <span class=\"br0\">(</span>n,g<span class=\"br0\">)</span> <span class=\"kw1\">with</span> |X,X<span class=\"sy0\">-&gt;</span>X |B,B<span class=\"sy0\">-&gt;</span>B |_<span class=\"sy0\">-&gt;</span>V<span class=\"br0\">)</span> n i<br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fg <span class=\"br0\">(</span>n: N<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i: N<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> g <span class=\"sy0\">=</span> n <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> e n <span class=\"sy0\">-&gt;</span> i.<span class=\"br0\">[</span>e<span class=\"br0\">]</span>.<span class=\"br0\">[</span>g<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n || i.<span class=\"br0\">[</span>e<span class=\"br0\">]</span>.<span class=\"br0\">[</span>g<span class=\"br0\">]</span> <span class=\"sy0\">=</span> V<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fe <span class=\"br0\">(</span>n: N<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">&lt;&gt;</span> V<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fl n <span class=\"sy0\">=</span> n <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">Parallel</span>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g <span class=\"sy0\">-&gt;</span> N.<span class=\"me1\">fi</span> n g<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fa <span class=\"br0\">(</span>nga: list<span class=\"sy0\">&lt;</span>N <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ngb <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">Parallel</span>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> N.<span class=\"me1\">fg</span> n ngb i<span class=\"br0\">)</span> n<span class=\"br0\">)</span> nga<br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> fo n i g e <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> na <span class=\"sy0\">=</span> N.<span class=\"me1\">fa</span> n e<br/>    <span class=\"kw1\">let</span> ia <span class=\"sy0\">=</span> N.<span class=\"me1\">fl</span> na<br/>    <span class=\"kw1\">let</span> ga <span class=\"sy0\">=</span> N.<span class=\"me1\">fa</span> g ia<br/>    <span class=\"br0\">(</span>na, ia, ga, <span class=\"br0\">(</span>N.<span class=\"me1\">fl</span> ga<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> toStr n <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |X<span class=\"sy0\">-&gt;</span><span class=\"st0\">\"X\"</span>|B<span class=\"sy0\">-&gt;</span><span class=\"st0\">\".\"</span>|V<span class=\"sy0\">-&gt;</span><span class=\"st0\">\"?\"</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> presolve <span class=\"br0\">(</span><span class=\"br0\">(</span>na: list<span class=\"sy0\">&lt;</span>N <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span>ga: list<span class=\"sy0\">&lt;</span>N <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> nb <span class=\"sy0\">=</span> N.<span class=\"me1\">fl</span> na<br/>    <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> N.<span class=\"me1\">fa</span> ga nb<br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fn n i g e l <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> na,ia,ga,ea <span class=\"sy0\">=</span> N.<span class=\"me1\">fo</span> n i g e<br/>      <span class=\"kw1\">let</span> el <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> n<span class=\"br0\">)</span> na<span class=\"br0\">)</span>, <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> n<span class=\"br0\">)</span> ga<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">fst</span> el<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">snd</span> el<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>n,i,g,e,<span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> fn na ia ga ea el<br/>    fn na nb x <span class=\"br0\">(</span>N.<span class=\"me1\">fl</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> n<span class=\"br0\">)</span> na<span class=\"br0\">)</span>, <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> n<span class=\"br0\">)</span> ga<span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>\u00a0</pre>"}, {"lang": "Go", "loc": 184, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> BitSet <span class=\"sy1\">[]</span><span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>bs BitSet<span class=\"sy1\">)</span> and<span class=\"sy1\">(</span>other BitSet<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> bs <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> &amp;&amp; other<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>bs BitSet<span class=\"sy1\">)</span> or<span class=\"sy1\">(</span>other BitSet<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> bs <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">||</span> other<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> iff<span class=\"sy1\">(</span>cond <span class=\"kw4\">bool</span><span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> s2 <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> cond <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> s1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s2<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newPuzzle<span class=\"sy1\">(</span>data <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    rowData <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>data<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>    colData <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>data<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    rows <span class=\"sy2\">:=</span> getCandidates<span class=\"sy1\">(</span>rowData<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>colData<span class=\"sy1\">))</span><br/>    cols <span class=\"sy2\">:=</span> getCandidates<span class=\"sy1\">(</span>colData<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rowData<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        numChanged <span class=\"sy2\">:=</span> reduceMutual<span class=\"sy1\">(</span>cols<span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> numChanged <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"No solution\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> numChanged <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rows <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>cols<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>iff<span class=\"sy1\">(</span>row<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> <span class=\"st0\">\"# \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\". \"</span><span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// collect all possible solutions for the given clues</span><br/><span class=\"kw4\">func</span> getCandidates<span class=\"sy1\">(</span>data <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> le <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span>BitSet <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> result <span class=\"sy1\">[][]</span>BitSet<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> data <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> lst <span class=\"sy1\">[]</span>BitSet<br/>        a <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        sumBytes <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>            sumBytes <span class=\"sy2\">+=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>b <span class=\"sy3\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        prep <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>            prep<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>b<span class=\"sy3\">-</span><span class=\"st0\">'A'</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> genSequence<span class=\"sy1\">(</span>prep<span class=\"sy1\">,</span> le<span class=\"sy3\">-</span>sumBytes<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            bits <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span><br/>            bitset <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>BitSet<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>bits<span class=\"sy1\">))</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> bits <span class=\"sy1\">{</span><br/>                bitset<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b <span class=\"sy3\">==</span> <span class=\"st0\">'1'</span><br/>            <span class=\"sy1\">}</span><br/>            lst <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>lst<span class=\"sy1\">,</span> bitset<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        result <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>result<span class=\"sy1\">,</span> lst<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> result<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> genSequence<span class=\"sy1\">(</span>ones <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> numZeros <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    le <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ones<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> le <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">,</span> numZeros<span class=\"sy1\">)}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> result <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> x &lt; numZeros<span class=\"sy3\">-</span>le<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        skipOne <span class=\"sy2\">:=</span> ones<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> tail <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> genSequence<span class=\"sy1\">(</span>skipOne<span class=\"sy1\">,</span> numZeros<span class=\"sy3\">-</span>x<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            result <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>result<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><span class=\"sy3\">+</span>ones<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">+</span>tail<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> result<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* If all the candidates for a row have a value in common for a certain cell,<br/>   then it's the only possible outcome, and all the candidates from the<br/>   corresponding column need to have that value for that cell too. The ones<br/>   that don't, are removed. The same for all columns. It goes back and forth,<br/>   until no more candidates can be removed or a list is empty (failure).<br/>*/</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reduceMutual<span class=\"sy1\">(</span>cols<span class=\"sy1\">,</span> rows <span class=\"sy1\">[][]</span>BitSet<span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    countRemoved1 <span class=\"sy2\">:=</span> reduce<span class=\"sy1\">(</span>cols<span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> countRemoved1 <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    countRemoved2 <span class=\"sy2\">:=</span> reduce<span class=\"sy1\">(</span>rows<span class=\"sy1\">,</span> cols<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> countRemoved2 <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> countRemoved1 <span class=\"sy3\">+</span> countRemoved2<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reduce<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"sy1\">[][]</span>BitSet<span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    countRemoved <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        commonOn <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>BitSet<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            commonOn<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        commonOff <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>BitSet<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">))</span><br/>\u00a0<br/>        <span class=\"co1\">// determine which values all candidates of a[i] have in common</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> candidate <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            commonOn<span class=\"sy3\">.</span>and<span class=\"sy1\">(</span>candidate<span class=\"sy1\">)</span><br/>            commonOff<span class=\"sy3\">.</span>or<span class=\"sy1\">(</span>candidate<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// remove from b[j] all candidates that don't share the forced values</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            fi<span class=\"sy1\">,</span> fj <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<br/>            <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> k<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>                cnd <span class=\"sy2\">:=</span> b<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span>k<span class=\"sy1\">]</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>commonOn<span class=\"sy1\">[</span>fj<span class=\"sy1\">]</span> &amp;&amp; <span class=\"sy3\">!</span>cnd<span class=\"sy1\">[</span>fi<span class=\"sy1\">])</span> <span class=\"sy3\">||</span> <span class=\"sy1\">(</span><span class=\"sy3\">!</span>commonOff<span class=\"sy1\">[</span>fj<span class=\"sy1\">]</span> &amp;&amp; cnd<span class=\"sy1\">[</span>fi<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                    lb <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span><br/>                    <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span>k<span class=\"sy1\">:],</span> b<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span><br/>                    b<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span>lb<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">nil</span><br/>                    b<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<span class=\"sy1\">[</span>j<span class=\"sy1\">][:</span>lb<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>                    countRemoved<span class=\"sy2\">++</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> countRemoved<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    p1 <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"C BA CB BB F AE F A B\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"AB CA AE GA E C D C\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    p2 <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"F CAC ACAC CN AAA AABB EBB EAA ECCC HCCC\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"D D AE CD AE A DA BBB CC AAB BAA AAB DA AAB AAA BAB AAA CD BBA DA\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    p3 <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"CA BDA ACC BD CCAC CBBAC BBBBB BAABAA ABAD AABB BBH \"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"BBBD ABBAAA CCEA AACAAB BCACC ACBH DCH ADBE ADBB DBE ECE DAA DB CC\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"BC CAC CBAB BDD CDBDE BEBDF ADCDFA DCCFB DBCFC ABDBA BBF AAF BADB DBF \"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"AAAAD BDG CEF CBDB BBB FC\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    p4 <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"E BCB BEA BH BEK AABAF ABAC BAA BFB OD JH BADCF Q Q R AN AAN EI H G\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"E CB BAB AAA AAA AC BB ACC ACCA AGB AIA AJ AJ \"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"ACE AH BAF CAG DAG FAH FJ GJ ADK ABK BL CM\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> puzzleData <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">,</span> p3<span class=\"sy1\">,</span> p4<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        newPuzzle<span class=\"sy1\">(</span>puzzleData<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Java", "loc": 142, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"sy0\">*;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> NonogramSolver <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"C BA CB BB F AE F A B\"</span>, <span class=\"st0\">\"AB CA AE GA E C D C\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"F CAC ACAC CN AAA AABB EBB EAA ECCC HCCC\"</span>, <span class=\"st0\">\"D D AE \"</span><br/>        <span class=\"sy0\">+</span> <span class=\"st0\">\"CD AE A DA BBB CC AAB BAA AAB DA AAB AAA BAB AAA CD BBA DA\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p3 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"CA BDA ACC BD CCAC CBBAC BBBBB BAABAA ABAD AABB BBH \"</span><br/>        <span class=\"sy0\">+</span> <span class=\"st0\">\"BBBD ABBAAA CCEA AACAAB BCACC ACBH DCH ADBE ADBB DBE ECE DAA DB CC\"</span>,<br/>        <span class=\"st0\">\"BC CAC CBAB BDD CDBDE BEBDF ADCDFA DCCFB DBCFC ABDBA BBF AAF BADB DBF \"</span><br/>        <span class=\"sy0\">+</span> <span class=\"st0\">\"AAAAD BDG CEF CBDB BBB FC\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p4 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"E BCB BEA BH BEK AABAF ABAC BAA BFB OD JH BADCF Q Q \"</span><br/>        <span class=\"sy0\">+</span> <span class=\"st0\">\"R AN AAN EI H G\"</span>, <span class=\"st0\">\"E CB BAB AAA AAA AC BB ACC ACCA AGB AIA AJ AJ \"</span><br/>        <span class=\"sy0\">+</span> <span class=\"st0\">\"ACE AH BAF CAG DAG FAH FJ GJ ADK ABK BL CM\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> puzzleData <span class=\"sy0\">:</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>p1, p2, p3, p4<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            newPuzzle<span class=\"br0\">(</span>puzzleData<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> newPuzzle<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> rowData <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> colData <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> cols, rows<span class=\"sy0\">;</span><br/>        rows <span class=\"sy0\">=</span> getCandidates<span class=\"br0\">(</span>rowData, colData.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        cols <span class=\"sy0\">=</span> getCandidates<span class=\"br0\">(</span>colData, rowData.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> numChanged<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            numChanged <span class=\"sy0\">=</span> reduceMutual<span class=\"br0\">(</span>cols, rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numChanged <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>numChanged <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;</span> row <span class=\"sy0\">:</span> rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cols.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>row.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"# \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\". \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// collect all possible solutions for the given clues</span><br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> getCandidates<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> data, <span class=\"kw4\">int</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">:</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;</span> lst <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> sumChars <span class=\"sy0\">=</span> s.<span class=\"me1\">chars</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>c <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> prep <span class=\"sy0\">=</span> stream<span class=\"br0\">(</span>s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    .<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> repeat<span class=\"br0\">(</span>x.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> r <span class=\"sy0\">:</span> genSequence<span class=\"br0\">(</span>prep, len <span class=\"sy0\">-</span> sumChars <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bits <span class=\"sy0\">=</span> r.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a> bitset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a><span class=\"br0\">(</span>bits.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bits.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    bitset.<span class=\"me1\">set</span><span class=\"br0\">(</span>i, bits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                lst.<span class=\"me1\">add</span><span class=\"br0\">(</span>bitset<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span>lst<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// permutation generator, translated from Python via D</span><br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> genSequence<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> ones, <span class=\"kw4\">int</span> numZeros<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ones.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> asList<span class=\"br0\">(</span>repeat<span class=\"br0\">(</span>numZeros, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> numZeros <span class=\"sy0\">-</span> ones.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> skipOne <span class=\"sy0\">=</span> ones.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">skip</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> tail <span class=\"sy0\">:</span> genSequence<span class=\"br0\">(</span>skipOne, numZeros <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                result.<span class=\"me1\">add</span><span class=\"br0\">(</span>repeat<span class=\"br0\">(</span>x, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> ones.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> tail<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> repeat<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* If all the candidates for a row have a value in common for a certain cell,<br/>    then it's the only possible outcome, and all the candidates from the<br/>    corresponding column need to have that value for that cell too. The ones<br/>    that don't, are removed. The same for all columns. It goes back and forth,<br/>    until no more candidates can be removed or a list is empty (failure). */</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> reduceMutual<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> cols, List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> countRemoved1 <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>cols, rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>countRemoved1 <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> countRemoved2 <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>countRemoved2 <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> countRemoved1 <span class=\"sy0\">+</span> countRemoved2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> reduce<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> a, List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> countRemoved <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a> commonOn <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            commonOn.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, b.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a> commonOff <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// determine which values all candidates of ai have in common</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a> candidate <span class=\"sy0\">:</span> a.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                commonOn.<span class=\"me1\">and</span><span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                commonOff.<span class=\"me1\">or</span><span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// remove from bj all candidates that don't share the forced values</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> fi <span class=\"sy0\">=</span> i, fj <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">removeIf</span><span class=\"br0\">(</span>cnd <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>commonOn.<span class=\"me1\">get</span><span class=\"br0\">(</span>fj<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>cnd.<span class=\"me1\">get</span><span class=\"br0\">(</span>fi<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>commonOff.<span class=\"me1\">get</span><span class=\"br0\">(</span>fj<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> cnd.<span class=\"me1\">get</span><span class=\"br0\">(</span>fi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    countRemoved<span class=\"sy0\">++;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> countRemoved<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 130, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">BitSet</span><br/>\u00a0<br/>typealias BitSets <span class=\"sy0\">=</span> List<span class=\"sy0\">&lt;</span>MutableList<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rx <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\s</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun newPuzzle<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rowData <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span>rx<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colData <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span>rx<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> getCandidates<span class=\"br0\">(</span>rowData, colData.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> getCandidates<span class=\"br0\">(</span>colData, rowData.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numChanged <span class=\"sy0\">=</span> reduceMutual<span class=\"br0\">(</span>cols, rows<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numChanged <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"No solution\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>numChanged <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until cols.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"# \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\". \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// collect all possible solutions for the given clues</span><br/>fun getCandidates<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, len<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BitSets <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>MutableList<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lst <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>BitSet<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> s.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sumChars <span class=\"sy0\">=</span> a.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it - <span class=\"st0\">'A'</span> + <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prep <span class=\"sy0\">=</span> a.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"st0\">\"1\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>it - <span class=\"st0\">'A'</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in genSequence<span class=\"br0\">(</span>prep, len - sumChars + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bits <span class=\"sy0\">=</span> r.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bitset <span class=\"sy0\">=</span> BitSet<span class=\"br0\">(</span>bits.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until bits.<span class=\"me1\">size</span><span class=\"br0\">)</span> bitset<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> bits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><br/>            lst.<span class=\"me1\">add</span><span class=\"br0\">(</span>bitset<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun genSequence<span class=\"br0\">(</span>ones<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, numZeros<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ones.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> listOf<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>numZeros<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">1</span> until numZeros - ones.<span class=\"me1\">size</span> + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> skipOne <span class=\"sy0\">=</span> ones.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>tail in genSequence<span class=\"br0\">(</span>skipOne, numZeros - x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> + ones<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + tail<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* If all the candidates for a row have a value in common for a certain cell,<br/>    then it's the only possible outcome, and all the candidates from the<br/>    corresponding column need to have that value for that cell too. The ones<br/>    that don't, are removed. The same for all columns. It goes back and forth,<br/>    until no more candidates can be removed or a list is empty (failure).<br/>*/</span><br/>\u00a0<br/>fun reduceMutual<span class=\"br0\">(</span>cols<span class=\"sy0\">:</span> BitSets, rows<span class=\"sy0\">:</span> BitSets<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> countRemoved1 <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>cols, rows<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>countRemoved1 <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> countRemoved2 <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>countRemoved2 <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> countRemoved1 + countRemoved2<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun reduce<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> BitSets, b<span class=\"sy0\">:</span> BitSets<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> countRemoved <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> commonOn <span class=\"sy0\">=</span> BitSet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        commonOn<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">size</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> commonOff <span class=\"sy0\">=</span> BitSet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// determine which values all candidates of a[i] have in common</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate in a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            commonOn.<span class=\"me1\">and</span><span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>            commonOff.<span class=\"me1\">or</span><span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// remove from b[j] all candidates that don't share the forced values</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until b.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fi <span class=\"sy0\">=</span> i<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fj <span class=\"sy0\">=</span> j<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">removeIf</span> <span class=\"br0\">{</span> cnd -<span class=\"sy0\">&gt;</span><br/>                <span class=\"br0\">(</span>commonOn<span class=\"br0\">[</span>fj<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>cnd<span class=\"br0\">[</span>fi<span class=\"br0\">]</span><span class=\"br0\">)</span> ||<br/>                <span class=\"br0\">(</span><span class=\"sy0\">!</span>commonOff<span class=\"br0\">[</span>fj<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> cnd<span class=\"br0\">[</span>fi<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> countRemoved++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> countRemoved<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p1 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"C BA CB BB F AE F A B\"</span>, <span class=\"st0\">\"AB CA AE GA E C D C\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"F CAC ACAC CN AAA AABB EBB EAA ECCC HCCC\"</span>,<br/>    <span class=\"st0\">\"D D AE CD AE A DA BBB CC AAB BAA AAB DA AAB AAA BAB AAA CD BBA DA\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p3 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"CA BDA ACC BD CCAC CBBAC BBBBB BAABAA ABAD AABB BBH \"</span> +<br/>    <span class=\"st0\">\"BBBD ABBAAA CCEA AACAAB BCACC ACBH DCH ADBE ADBB DBE ECE DAA DB CC\"</span>,<br/>    <span class=\"st0\">\"BC CAC CBAB BDD CDBDE BEBDF ADCDFA DCCFB DBCFC ABDBA BBF AAF BADB DBF \"</span> +<br/>    <span class=\"st0\">\"AAAAD BDG CEF CBDB BBB FC\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p4 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"E BCB BEA BH BEK AABAF ABAC BAA BFB OD JH BADCF Q Q R AN AAN EI H G\"</span>,<br/>    <span class=\"st0\">\"E CB BAB AAA AAA AC BB ACC ACCA AGB AIA AJ AJ \"</span> +<br/>    <span class=\"st0\">\"ACE AH BAF CAG DAG FAH FJ GJ ADK ABK BL CM\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>puzzleData in listOf<span class=\"br0\">(</span>p1, p2, p3, p4<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        newPuzzle<span class=\"br0\">(</span>puzzleData<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 132, "block": "<pre class=\"text highlighted_source\">sequence x, y, grid<br/>integer unsolved<br/>\u00a0<br/>function count_grid()<br/>integer res = length(x)*length(y)<br/>    for i=1 to length(x) do<br/>        for j=1 to length(y) do<br/>            res -= grid[i][j]!='?'<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function match_mask(string neat, string mask, integer ms, integer me)<br/>    for i=ms to me do<br/>        if mask[i]!='?' then<br/>            if mask[i]!=neat[i] then return 0 end if<br/>        end if<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>function innr(string mask, sequence blocks, integer mi=1, string res=\"\", string neat=mask)<br/>    if length(blocks)=0 then<br/>        for i=mi to length(neat) do<br/>            neat[i] = ' '<br/>        end for<br/>        if match_mask(neat,mask,mi,length(mask)) then<br/>            if length(res)=0 then<br/>                res = neat<br/>            else<br/>                for i=1 to length(neat) do<br/>                    if neat[i]!=res[i] then<br/>                        res[i] = '?'<br/>                    end if<br/>                end for<br/>            end if<br/>        end if<br/>    else<br/>        integer b = blocks[1]<br/>        blocks = blocks[2..$]<br/>        integer l = (sum(blocks)+length(blocks)-1),<br/>                e = length(neat)-l-b<br/>        for i=mi to e do<br/>            for j=i to i+b-1 do<br/>                neat[j] = '#'<br/>            end for<br/>            if i+b&lt;=length(neat) then<br/>                neat[i+b] = ' '<br/>            end if<br/>            if match_mask(neat,mask,mi,min(i+b,length(mask))) then<br/>                res = innr(mask,blocks,i+b+1,res,neat)<br/>            end if<br/>            neat[i] = ' '<br/>        end for<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>function inner(string mask, sequence blocks)<br/>    string res = innr(mask,blocks)<br/>    return iff(length(res)?res:mask)<br/>end function<br/>\u00a0<br/>global function vmask(sequence source, integer column)<br/>string res = repeat(' ',length(source))<br/>    for i=1 to length(source) do<br/>        res[i] = source[i][column]<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function logic()<br/>integer wasunsolved = unsolved<br/>    for i=1 to length(x) do<br/>        grid[i] = inner(grid[i],x[i])<br/>    end for<br/>    for j=1 to length(y) do<br/>        string tmp = inner(vmask(grid,j),y[j])<br/>        for i=1 to length(tmp) do<br/>            grid[i][j] = tmp[i]<br/>        end for<br/>    end for<br/>    unsolved = count_grid()<br/>    return wasunsolved!=unsolved<br/>end function<br/>\u00a0<br/>sequence tests=split(\"\"\"<br/>C BA CB BB F AE F A B<br/>AB CA AE GA E C D C<br/>\u00a0<br/>F CAC ACAC CN AAA AABB EBB EAA ECCC HCCC<br/>D D AE CD AE A DA BBB CC AAB BAA AAB DA AAB AAA BAB AAA CD BBA DA<br/>\u00a0<br/>CA BDA ACC BD CCAC CBBAC BBBBB BAABAA ABAD AABB BBH BBBD ABBAAA CCEA AACAAB BCACC ACBH DCH ADBE ADBB DBE ECE DAA DB CC<br/>BC CAC CBAB BDD CDBDE BEBDF ADCDFA DCCFB DBCFC ABDBA BBF AAF BADB DBF AAAAD BDG CEF CBDB BBB FC<br/>\u00a0<br/>E BCB BEA BH BEK AABAF ABAC BAA BFB OD JH BADCF Q Q R AN AAN EI H G<br/>E CB BAB AAA AAA AC BB ACC ACCA AGB AIA AJ AJ ACE AH BAF CAG DAG FAH FJ GJ ADK ABK BL CM\"\"\",'\\n')<br/>--Alternatively:<br/>--integer fn = open(\"nonogram_problems.txt\",\"r\")<br/>--tests = get_text(fn,GT_LF_STRIPPED)<br/>--close(fn)<br/>\u00a0<br/>function unpack(string s)<br/>sequence res = split(s)<br/>    for i=1 to length(res) do<br/>        string ri = res[i]<br/>        sequence r = {}<br/>        for j=1 to length(ri) do<br/>            r &amp;= ri[j]-'A'+1<br/>        end for<br/>        res[i] = r<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>for i=1 to length(tests) by 3 do<br/>    x = unpack(tests[i])<br/>    y = unpack(tests[i+1])<br/>    grid = repeat(repeat('?',length(y)),length(x))<br/>    unsolved = length(x)*length(y)<br/>\u00a0<br/>    while unsolved do<br/>        if not logic() then<br/>           \u00a0?\"partial\"<br/>            exit<br/>        end if<br/>    end while<br/>\u00a0<br/>    puts(1,join(grid,\"\\n\")&amp;\"\\n\")<br/>end for</pre>"}, {"lang": "Prolog", "loc": 67, "block": "<pre class=\"prolog highlighted_source\"><span class=\"coMULTI\">/*<br/>* Nonogram/paint-by-numbers solver in SWI-Prolog. Uses CLP(FD),<br/>* in particular the automaton/3 (finite-state/RE) constraint.<br/>* Copyright (c) 2011 Lars Buitinck.<br/>* Do with this code as you like, but don't remove the copyright notice.<br/>*/</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>nono<span class=\"br0\">(</span>RowSpec<span class=\"sy4\">,</span> ColSpec<span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\trows<span class=\"br0\">(</span>RowSpec<span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\ttranspose<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> GridT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\trows<span class=\"br0\">(</span>ColSpec<span class=\"sy4\">,</span> GridT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rows<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rows<span class=\"br0\">(</span><span class=\"br0\">[</span>C<span class=\"sy5\">|</span>Cs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\trow<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\trows<span class=\"br0\">(</span>Cs<span class=\"sy4\">,</span> Rs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>row<span class=\"br0\">(</span>Ks<span class=\"sy4\">,</span> Row<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsum<span class=\"br0\">(</span>Ks<span class=\"sy4\">,</span> #<span class=\"sy6\">=</span><span class=\"sy4\">,</span> Ones<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsum<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> #<span class=\"sy6\">=</span><span class=\"sy4\">,</span> Ones<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tarcs<span class=\"br0\">(</span>Ks<span class=\"sy4\">,</span> Arcs<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> Final<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> RowZ<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tautomaton<span class=\"br0\">(</span>RowZ<span class=\"sy4\">,</span> <span class=\"br0\">[</span>source<span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"sy4\">,</span> sink<span class=\"br0\">(</span>Final<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>arc<span class=\"br0\">(</span>start<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>start<span class=\"br0\">)</span> <span class=\"sy5\">|</span> Arcs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Make list of transition arcs for finite-state constraint.</span><br/>arcs<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Final<span class=\"sy4\">,</span> Final<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>arcs<span class=\"br0\">(</span><span class=\"br0\">[</span>K<span class=\"sy5\">|</span>Ks<span class=\"br0\">]</span><span class=\"sy4\">,</span> Arcs<span class=\"sy4\">,</span> CurState<span class=\"sy4\">,</span> Final<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tgensym<span class=\"br0\">(</span>state<span class=\"sy4\">,</span> NextState<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   K <span class=\"sy6\">==</span> <span class=\"nu0\">0</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  Arcs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>arc<span class=\"br0\">(</span>CurState<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>CurState<span class=\"br0\">)</span><span class=\"sy4\">,</span> arc<span class=\"br0\">(</span>CurState<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>NextState<span class=\"br0\">)</span> <span class=\"sy5\">|</span> Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t    arcs<span class=\"br0\">(</span>Ks<span class=\"sy4\">,</span> Rest<span class=\"sy4\">,</span> NextState<span class=\"sy4\">,</span> Final<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   Arcs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>arc<span class=\"br0\">(</span>CurState<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>NextState<span class=\"br0\">)</span> <span class=\"sy5\">|</span> Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t    K1 #<span class=\"sy6\">=</span> K<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t    arcs<span class=\"br0\">(</span><span class=\"br0\">[</span>K1<span class=\"sy5\">|</span>Ks<span class=\"br0\">]</span><span class=\"sy4\">,</span> Rest<span class=\"sy4\">,</span> NextState<span class=\"sy4\">,</span> Final<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>make_grid<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmake_rows<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>make_rows<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>make_rows<span class=\"br0\">(</span><span class=\"br0\">[</span>R<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmake_rows<span class=\"br0\">(</span>Rs<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> Vars0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> Vars0<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>print<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>print<span class=\"br0\">(</span><span class=\"br0\">[</span>R<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tprint_row<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprint<span class=\"br0\">(</span>Rs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>print_row<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>print_row<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   X <span class=\"sy6\">==</span> <span class=\"nu0\">0</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'x'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprint_row<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>nonogram<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> Cols<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>Cols<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmake_grid<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnono<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> Cols<span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlabel<span class=\"br0\">(</span>Vars<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprint<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 119, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> izip<br/>\u00a0<br/><span class=\"kw1\">def</span> gen_row<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Create all patterns of a row or col that match given runs.\"\"\"</span><br/>    <span class=\"kw1\">def</span> gen_seg<span class=\"br0\">(</span>o<span class=\"sy0\">,</span> sp<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> o:<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> * sp<span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> * x + o<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + tail<br/>                <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> sp - <span class=\"kw2\">len</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span> + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> tail <span class=\"kw1\">in</span> gen_seg<span class=\"br0\">(</span>o<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"sy0\">,</span> sp - x<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> gen_seg<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> s<span class=\"br0\">]</span><span class=\"sy0\">,</span> w + <span class=\"nu0\">1</span> - <span class=\"kw2\">sum</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> deduce<span class=\"br0\">(</span>hr<span class=\"sy0\">,</span> vr<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Fix inevitable value of cells, and propagate.\"\"\"</span><br/>    <span class=\"kw1\">def</span> allowable<span class=\"br0\">(</span>row<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> a<span class=\"sy0\">,</span> b: <span class=\"br0\">[</span>x | y <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> izip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> row<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> fits<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>x &amp; y <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> izip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> fix_col<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"See if any value in a given column is fixed;<br/>        if so, mark its corresponding row for future fixup.\"\"\"</span><br/>        c <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> can_do<span class=\"br0\">]</span><br/>        cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">if</span> fits<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>allowable<span class=\"br0\">(</span>cols<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> x <span class=\"sy0\">!=</span> can_do<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span>:<br/>                mod_rows.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                can_do<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> &amp;<span class=\"sy0\">=</span> x<br/>\u00a0<br/>    <span class=\"kw1\">def</span> fix_row<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"Ditto, for rows.\"\"\"</span><br/>        c <span class=\"sy0\">=</span> can_do<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">if</span> fits<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>allowable<span class=\"br0\">(</span>rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> x <span class=\"sy0\">!=</span> can_do<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>:<br/>                mod_cols.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                can_do<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> &amp;<span class=\"sy0\">=</span> x<br/>\u00a0<br/>    <span class=\"kw1\">def</span> show_gram<span class=\"br0\">(</span>m<span class=\"br0\">)</span>:<br/>        <span class=\"co1\"># If there's 'x', something is wrong.</span><br/>        <span class=\"co1\"># If there's '?', needs more work.</span><br/>        <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> m:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"x#.?\"</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> x<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><br/>\u00a0<br/>    w<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>vr<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>hr<span class=\"br0\">)</span><br/>    rows <span class=\"sy0\">=</span> <span class=\"br0\">[</span>gen_row<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> hr<span class=\"br0\">]</span><br/>    cols <span class=\"sy0\">=</span> <span class=\"br0\">[</span>gen_row<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> vr<span class=\"br0\">]</span><br/>    can_do <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span>allowable<span class=\"sy0\">,</span> rows<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Initially mark all columns for update.</span><br/>    mod_rows<span class=\"sy0\">,</span> mod_cols <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"kw2\">xrange</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> mod_cols:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> mod_cols:<br/>            fix_col<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        mod_cols <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> mod_rows:<br/>            fix_row<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        mod_rows <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>can_do<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Solution would be unique\"</span> <span class=\"co1\"># but could be incorrect!</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Solution may not be unique, doing exhaustive search:\"</span><br/>\u00a0<br/>    <span class=\"co1\"># We actually do exhaustive search anyway. Unique solution takes</span><br/>    <span class=\"co1\"># no time in this phase anyway, but just in case there's no</span><br/>    <span class=\"co1\"># solution (could happen?).</span><br/>    out <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * h<br/>\u00a0<br/>    <span class=\"kw1\">def</span> try_all<span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;=</span> h:<br/>            <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> out<span class=\"br0\">]</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> cols<span class=\"br0\">[</span>j<span class=\"br0\">]</span>:<br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>            show_gram<span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>        sol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> rows<span class=\"br0\">[</span>n<span class=\"br0\">]</span>:<br/>            out<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<br/>            sol +<span class=\"sy0\">=</span> try_all<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> sol<br/>\u00a0<br/>    n <span class=\"sy0\">=</span> try_all<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> n:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"No solution.\"</span><br/>    <span class=\"kw1\">elif</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Unique solution.\"</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\"solutions.\"</span><br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> show_runs<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span>:<br/>    s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> w<span class=\"br0\">]</span> <span class=\"kw1\">for</span> w <span class=\"kw1\">in</span> l.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> p.<span class=\"me1\">splitlines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> show_runs:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Horizontal runs:\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Vertical runs:\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    deduce<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># Read problems from file.</span><br/>    fn <span class=\"sy0\">=</span> <span class=\"st0\">\"nonogram_problems.txt\"</span><br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"br0\">(</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> x<span class=\"br0\">)</span>:<br/>        solve<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Extra example not solvable by deduction alone:\"</span><br/>    solve<span class=\"br0\">(</span><span class=\"st0\">\"B B A A<span class=\"es0\">\\n</span>B B A A\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Extra example where there is no solution:\"</span><br/>    solve<span class=\"br0\">(</span><span class=\"st0\">\"B A A<span class=\"es0\">\\n</span>A A A\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 296, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Representaiton is done with bits: the bit patterns for a block being:<br/>;;; -------------------------------------------------------------------------<br/>;;; #b00 (0) - block is not in representation (also a terminator on the left)<br/>;;; #b01 (1) - block is white<br/>;;; #b10 (2) - block is black<br/>;;; #b11 (3) - block is undecided<br/>;;; None of the problems has &gt; 32 columns, so 64-bits should be fine<br/>;;; If we go above 64-bits, then a. we have a difficult problem<br/>;;;                              b. racket will use bignums rather<br/>;;;                                 than fixnums<br/>;;;<br/>;;; A \"blocks\" is an integer formed of two-bit block codes (above)<br/>;;;<br/>;;; A \"representation\" is a sequence (list) of black stretch lengths; which need to be separated by at<br/>;;; least one white between, and optionally prefixed and suffied with whites<br/>;;;<br/>;;; A \"candidate\" is a sequence (list) of &lt;white-length [black-length white-length]...&gt;, specifying<br/>;;; one instance of a \"representation\".<br/>;;;<br/>;;; A \"puzzle\" is a sequence (vector) of blocks<br/>;;; -- if the puzzle is &lt;= 32 blocks wide, this could well be an fxvector (but ignore that<br/>;;;    possibility for now)<br/>;;;<br/>;;; \"Options\" is a sequence (list) of blocks<br/>;;;<br/>;;; white is often abbreviated (in variables etc. to W), black to \"B\"<br/>;;; --------------------------------------------------------------------------------------------------<br/>(module+ test (require rackunit))<br/>(define *problems-file-name* \"nonogram_problems.txt\")<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Parsing Input<br/>;;; --------------------------------------------------------------------------------------------------<br/>(define (letter-rep-&gt;number-rep c) (+ 1 (- (char-&gt;integer (char-upcase c)) (char-&gt;integer #\\A))))<br/>\u00a0<br/>;; takes the letters representation, returns a list of list of numbers. The list returned is an<br/>;; \"option\" - a list of ([white-width black-width] ... white-width)<br/>(define (letters-rep-&gt;list\u00b2-rep s)<br/>  (for/list ((b (regexp-split #rx\" +\" s)))<br/>    (map letter-rep-&gt;number-rep (string-&gt;list b))))<br/>\u00a0<br/>(define (read-nonogram-description prt)<br/>  (match (read-line prt)<br/>    [(? eof-object?) #f]<br/>    [\"\" (read-nonogram-description prt)]<br/>    [(? string? l)<br/>     (vector (letters-rep-&gt;list\u00b2-rep l)<br/>             (letters-rep-&gt;list\u00b2-rep (read-line prt)))]))<br/>\u00a0<br/>(define (read-one-nonogram-from-file file-name)<br/>  (call-with-input-file file-name read-nonogram-description))<br/>\u00a0<br/>(module+ test<br/>  (check-equal? (map letter-rep-&gt;number-rep '(#\\A #\\a #\\B #\\C)) '(1 1 2 3))  <br/>  (check-equal? (letters-rep-&gt;list\u00b2-rep \"C BA CB BB F AE F A B\")<br/>                '([3] [2 1] [3 2] [2 2] [6] [1 5] [6] [1] [2]))<br/>  (check-equal? (letters-rep-&gt;list\u00b2-rep \"AB CA AE GA E C D C\")<br/>                '([1 2]  [3 1]  [1 5]  [7 1]  [5]  [3]  [4] [3]))<br/>  (check-equal? (read-one-nonogram-from-file *problems-file-name*)<br/>                #(([3] [2 1] [3 2] [2 2] [6] [1 5] [6] [1] [2])<br/>                  ([1 2]  [3 1]  [1 5]  [7 1]  [5]  [3]  [4] [3]))))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Generate Candidates<br/>;;; --------------------------------------------------------------------------------------------------<br/>(define (rep-&gt;candidates n-cells blacks)<br/>  (define (inr cells-remain bs leftmost?)<br/>    (define bs-l (sequence-length bs))<br/>    (define min-space-needed (- (apply + bs-l bs) 1))<br/>    (cond<br/>      [(null? bs) (list (list cells-remain))]<br/>      [(&gt; min-space-needed cells-remain) null]<br/>      [else<br/>       (define initial-whites-min-size (if leftmost? 0 1))<br/>       (define intial-whites-range<br/>         (in-range initial-whites-min-size (add1 (- cells-remain min-space-needed))))<br/>       (for*/list ((intial-whites intial-whites-range)<br/>                   (tl (in-list (inr (- cells-remain intial-whites (car bs)) (cdr bs) #f))))<br/>         (list* intial-whites (car bs) tl))]))<br/>  (inr n-cells blacks #t))<br/>\u00a0<br/>(module+ test<br/>  (check-match<br/>   (rep-&gt;candidates 5 '(1)) (list-no-order '(0 1 4) '(1 1 3) '(2 1 2) '(3 1 1) '(4 1 0)))<br/>  (check-match<br/>   (rep-&gt;candidates 5 '(1 1))<br/>   (list-no-order '(0 1 1 1 2) '(0 1 2 1 1) '(0 1 3 1 0) '(1 1 1 1 1) '(1 1 2 1 0) '(2 1 1 1 0))))<br/>\u00a0<br/>(define (make-Ws l) (for/fold ((rv 0)) ((_ l)) (+ (* 4 rv) #b01)))<br/>(define (make-Bs l) (* 2 (make-Ws l)))<br/>(module+ test<br/>  (check-eq? (make-Ws 0) #b00)<br/>  (check-eq? (make-Bs 0) #b00)<br/>  (check-eq? (make-Ws 1) #b01)<br/>  (check-eq? (make-Bs 1) #b10)<br/>  (check-eq? (make-Ws 3) #b010101)<br/>  (check-eq? (make-Bs 3) #b101010))<br/>\u00a0<br/>(define (candidate-&gt;blocks cand)<br/>  (define (inr cand rv)<br/>    (match cand<br/>      [(list (and W (app make-Ws Ws)) (and B (app make-Bs Bs)) r ...)<br/>       (inr r (+ (arithmetic-shift rv (* 2 (+ B W))) (arithmetic-shift Ws (* 2 B)) Bs))]<br/>      [(list (and W (app make-Ws Ws))) (+ (arithmetic-shift rv (* 2 W)) Ws)]))<br/>  (inr cand 0))<br/>\u00a0<br/>(module+ test<br/>  (check-eq? (candidate-&gt;blocks '(0)) 0)<br/>  (check-eq? (candidate-&gt;blocks '(1)) #b01)<br/>  (check-eq? (candidate-&gt;blocks '(1 1 1)) #b011001)<br/>  (check-equal?<br/>   (map candidate-&gt;blocks<br/>        '((0 1 1 1 2) (0 1 2 1 1) (0 1 3 1 0) (1 1 1 1 1) (1 1 2 1 0) (2 1 1 1 0)))<br/>   '(#b1001100101 #b1001011001 #b1001010110 #b0110011001 #b0110010110 #b0101100110)))<br/>\u00a0<br/>;; Given a (non-empty) sequence of blocks return a list of blocks which must be black, must be<br/>;; white or have to be dertermined another way (through matching along the other axis).<br/>(define (find-definite-blocks blocks)<br/>  (for/fold ((known (sequence-ref blocks 0))) ((merge blocks))<br/>    (bitwise-ior known merge)))<br/>\u00a0<br/>(module+ test<br/>  (check-eq? (find-definite-blocks '(#b010101 #b010110 #b100110)) #b110111)<br/>  )<br/>\u00a0<br/>;; returns the list of blocks (from options) that can be overlaid over the solution<br/>;; this means that the following must hold false for all bits (if it holds false, we can do a zero?<br/>;; test, which is easiser than an all-significant-bits-set? test:<br/>;; pattern cand  <br/>;;    0      0     F<br/>;;    0      1     T<br/>;;    1      0     F<br/>;;    1      1     F<br/>;; (cand\u00a0!bitwise-impl pattern) =\u00a0!(pattern |\u00a0!cand) = (!pattern &amp; cand)<br/>(define (filter-against-partial-solution part-sltn options)<br/>  (define not-part-sltn (bitwise-not part-sltn))<br/>  (define (option-fits? cand) (zero? (bitwise-and cand not-part-sltn)))<br/>  (filter option-fits? options))<br/>\u00a0<br/>(module+ test<br/>  (check-equal?<br/>   (filter-against-partial-solution #b011110 '(#b101010 #b010110 #b011010))<br/>   '(#b010110 #b011010)))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Rendering -- it's pretty tough to see what's going on, when you have no pictures!<br/>;;; --------------------------------------------------------------------------------------------------<br/>(define ((render-puzzle knil kons-W kons-B kons-_ compose-lines) pzl)<br/>  (define (render-blocks bs)<br/>    (define (inr bs acc)<br/>      (match (bitwise-and bs #b11)<br/>        [#b00 acc]<br/>        [#b01 (inr (arithmetic-shift bs -2) (kons-W acc))]<br/>        [#b10 (inr (arithmetic-shift bs -2) (kons-B acc))]<br/>        [#b11 (inr (arithmetic-shift bs -2) (kons-_ acc))]))<br/>    (inr bs knil))<br/>  (compose-lines (map render-blocks pzl)))<br/>\u00a0<br/>(define string-render-puzzle<br/>  (render-puzzle \"\"<br/>                 (curry string-append \".\")<br/>                 (curry string-append \"#\")<br/>                 (curry string-append \"?\")<br/>                 (curryr string-join \"\\n\")))<br/>\u00a0<br/>(module+ test<br/>  (check-equal? (string-render-puzzle '(#b101010 #b010101 #b111111)) \"###\\n...\\n???\"))<br/>\u00a0<br/>;;; We need to work on x and y blocks uniformly, so this will convert from one to t'other<br/>;;; Rotates a sequence of blocks<br/>(define (rotate-blocks x-blocks)<br/>  (define x-width- (integer-length (sequence-ref x-blocks 0)))<br/>  (define x-width (if (odd? x-width-) (add1 x-width-) x-width-))<br/> \u00a0;(printf \"~a ~a\" x-width x-blocks)<br/>  (for/list ((block-idx (in-range x-width 0 -2)))<br/>    (for/fold ((y-block 0))<br/>      ((x-block x-blocks))<br/>      (+ (arithmetic-shift y-block 2)<br/>         (bitwise-bit-field x-block (- block-idx 2) block-idx)))))<br/>\u00a0<br/>(module+ test<br/>  (check-equal? (rotate-blocks '(#b1110 #b0111)) '(#b1101 #b1011))<br/>  (check-equal? (rotate-blocks '(#b0110 #b0111)) '(#b0101 #b1011)))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; SOLVER (finally!):<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; solve the nonogram... both \"solvers\" return as values:<br/>;;;   solution-changed? did the solution change -- if not we either have a solution or as good a<br/>;;;                     solution as the program can provide<br/>;;;   new-solution      the newly-changed solution<br/>;;;   new-x-blocks      x-blocks that are now available as candidates<br/>;;;   new-y-blocks      y-blocks that are now available as candidates<br/>(define (solved? blocks) (for/and ((b blocks)) (= (sequence-length b) 1)))<br/>\u00a0<br/>(define (solve-nonogram x-rep.y-rep)\u00a0; pair of reps as read from e.g. read-nonogram-from-file<br/>  (match-define (vector x-rep y-rep) x-rep.y-rep)<br/>  (define width (sequence-length y-rep))<br/>  (define height  (sequence-length x-rep))<br/>  (define x-candidates (map (curry rep-&gt;candidates width) x-rep))<br/>  (define y-candidates (map (curry rep-&gt;candidates height) y-rep))<br/>  (define x-options    (for/list ((cnds x-candidates)) (map candidate-&gt;blocks cnds)))<br/>  (define y-options    (for/list ((cnds y-candidates)) (map candidate-&gt;blocks cnds)))<br/>\u00a0<br/>  (define-values (solution complete?) (sub-solve-nonogram x-options y-options))<br/>  (unless complete? (displayln \"INCOMPLETE SOLUTION\"))<br/>  solution)<br/>\u00a0<br/>(define (sub-solve-nonogram x-options y-options)<br/>  (define known-x (map find-definite-blocks x-options))<br/>  (define known-y (map find-definite-blocks y-options))<br/>  (cond<br/>    [(solved? x-options) (values known-x #t)]<br/>    [else<br/>     (define new-y-options (map filter-against-partial-solution (rotate-blocks known-x) y-options))<br/>     (define new-x-options (map filter-against-partial-solution (rotate-blocks known-y) x-options))<br/>     (displayln (string-render-puzzle (map find-definite-blocks new-x-options)) (current-error-port))<br/>     (newline (current-error-port))     <br/>     (if (and (equal? x-options new-x-options) (equal? y-options new-y-options))<br/>         (values known-x #f)\u00a0; oh... we can't get any further<br/>         (sub-solve-nonogram new-x-options new-y-options))]))<br/>\u00a0<br/>;;;; TESTING<br/>(module+ test<br/>  (define chicken #&lt;&lt;EOS<br/>.###....<br/>##.#....<br/>.###..##<br/>..##..##<br/>..######<br/>#.#####.<br/>######..<br/>....#...<br/>...##...<br/>EOS<br/>    )<br/>  (check-equal?<br/>   (string-render-puzzle (solve-nonogram (read-one-nonogram-from-file *problems-file-name*)))<br/>   chicken))<br/>\u00a0<br/>;;; IMAGE RENDERING<br/>(require pict racket/gui/base)<br/>\u00a0<br/>(define *cell-size* 10)<br/>(define ((paint-cell fill-colour) dc dx dy)<br/>  (define C (- *cell-size* 1))<br/>  (define old-brush (send dc get-brush))<br/>  (define old-pen (send dc get-pen))        <br/>  (define path (new dc-path%))<br/>  (send path rectangle 0 0 C C)<br/>  (send* dc<br/>    (set-brush (new brush% [color fill-colour]))<br/>    (set-pen (new pen% [width 1] [color \"black\"]))<br/>    (draw-path path dx dy)<br/>    (set-brush old-brush)<br/>    (set-pen old-pen)))<br/>\u00a0<br/>(define (draw-cell fill-colour)<br/>  (dc (paint-cell fill-colour)<br/>      *cell-size* *cell-size*))<br/>\u00a0<br/>(define ((row-append-cell colour) row-so-far)<br/>  (hc-append (draw-cell colour)  row-so-far))<br/>\u00a0<br/>(define image-render-puzzle<br/>  (render-puzzle<br/>   (blank)<br/>   (row-append-cell \"white\")<br/>   (row-append-cell \"black\")<br/>   (row-append-cell \"yellow\")<br/>   (\u03bb (rows) (apply vc-append rows))))<br/>\u00a0<br/>(module+ test<br/> \u00a0; test though visual inspection... it's a style thing, really<br/>  (image-render-puzzle (solve-nonogram (read-one-nonogram-from-file *problems-file-name*))))<br/>\u00a0<br/>;;; MAIN<br/>(module+ main<br/>  (unless (directory-exists? \"images\") (make-directory \"images\"))<br/>\u00a0<br/>  (call-with-input-file *problems-file-name*<br/>    (lambda (prt)<br/>      (let loop ((idx 1) (pzl (read-nonogram-description prt)) (collage (blank)))<br/>        (cond<br/>          [pzl<br/>           (define img (image-render-puzzle (solve-nonogram pzl)))<br/>           (send (pict-&gt;bitmap img) save-file (build-path \"images\" (format \"nonogram-~a.png\" idx))<br/>                 'png)<br/>           (displayln (image-render-puzzle (solve-nonogram pzl)))<br/>           (loop (add1 idx) (read-nonogram-description prt) (vl-append 2 collage img))]<br/>          [else<br/>           (send (pict-&gt;bitmap collage) save-file (build-path \"images\" (format \"nonogram-all.png\"))<br/>                 'png)<br/>           (displayln collage)])))))</pre>"}]}