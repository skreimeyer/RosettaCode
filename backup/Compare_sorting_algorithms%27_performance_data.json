{"task": "Compare_sorting_algorithms%27_performance", "blocks": [{"lang": "AutoHotkey", "loc": 304, "block": "<pre class=\"ahk highlighted_source\"><span class=\"co1\">; BUGGY - FIX</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/_Persistent.htm\"><span class=\"kw5\">#Persistent</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a> OFF<br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>SortMethods <span class=\"sy0\">:=</span> <span class=\"st0\">\"Bogo,Bubble,Cocktail,Counting,Gnome,Insertion,Merge,Permutation,Quick,Selection,Shell,BuiltIn\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> vInput<span class=\"sy0\">,</span> numbers<span class=\"sy0\">,</span>separated<span class=\"sy0\">,</span>by<span class=\"sy0\">,</span>commas<span class=\"sy0\">,</span>without<span class=\"sy0\">,</span>spaces<span class=\"sy0\">,</span>afterwards<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> PARSE<span class=\"sy0\">,</span> SortMethods<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Checkbox\"><span class=\"kw8\">CheckBox</span></a><span class=\"sy0\">,</span> v<span class=\"re0\">%A_LoopField%</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span> <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> gTest<span class=\"sy0\">,</span> Test!<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> SortTest!<br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">Test:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/SplashTextOn.htm\"><span class=\"kw3\">SplashTextOn</span></a><span class=\"sy0\">,,,</span> Test Commencing<br/><a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a> <span class=\"nu0\">2500</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SplashTextOff.htm\"><span class=\"kw3\">SplashTextOff</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>OwnDialogs<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> PARSE<span class=\"sy0\">,</span> SortMethods<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%A_LoopField%</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"QueryPerformanceCounter\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int64 *\"</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span>Begin<span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">%A_LoopField%</span>Out <span class=\"sy0\">:=</span> <span class=\"re0\">%A_LoopField%</span><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"QueryPerformanceCounter\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int64 *\"</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span>Time<span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">%A_LoopField%</span><span class=\"kw6\">End</span> <span class=\"sy0\">:=</span> <span class=\"re0\">%A_LoopField%</span>Begin <span class=\"sy0\">+</span> <span class=\"re0\">%A_LoopField%</span>Time<br/>\t\t<span class=\"re0\">%A_LoopField%</span>Time <span class=\"sy0\">-=</span> <span class=\"re0\">%A_LoopField%</span>Begin<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>Time <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> PARSE<span class=\"sy0\">,</span> SortMethods<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%A_LoopField%</span><span class=\"br0\">)</span><br/>\t\tTime <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\" Sort: \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">%A_LoopField%</span>Time <span class=\"sy0\">.</span> <span class=\"st0\">\"`t`t\"</span> <span class=\"sy0\">.</span> <span class=\"re0\">%A_LoopField%</span>Out <span class=\"sy0\">.</span> <span class=\"st0\">\"`r`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> Results!<span class=\"sy0\">,</span> <span class=\"re0\">%Time%</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; Sorting funtions (Bogo, Bubble, Cocktail, Counting, Gnome, Insertion, Merge, Permutation, Quick, Selection, Shell, BuiltIn):</span><br/>\u00a0<br/>BogoSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> var<br/>\t<span class=\"br0\">{</span><br/>\t\tcurrent <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\trest <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> rest<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>current <span class=\"sy0\">&gt;</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\t\t\tsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">While</span>\u00a0!sorted <span class=\"br0\">{</span><br/>\t\tsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tcurrent <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t\trest <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> rest<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>current <span class=\"sy0\">&gt;</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\t\t\t\tsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> D`<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> var<br/><span class=\"br0\">}</span><br/>\u00a0<br/>BubbleSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> array<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\thasChanged <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\tsize <span class=\"sy0\">:=</span> array0<br/>\t<span class=\"kw1\">While</span> hasChanged<br/>\t<span class=\"br0\">{</span><br/>\t\thasChanged <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\ti <span class=\"sy0\">:=</span> array<span class=\"re0\">%A_Index%</span><br/>\t\t\taj <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\tj <span class=\"sy0\">:=</span> array<span class=\"re0\">%aj%</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\ttemp <span class=\"sy0\">:=</span> array<span class=\"re0\">%A_Index%</span><br/>\t\t\t\tarray<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> array<span class=\"re0\">%aj%</span><br/>\t\t\t\tarray<span class=\"re0\">%aj%</span> <span class=\"sy0\">:=</span> temp<br/>\t\t\t\thasChanged <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"br0\">}</span> <br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% size<br/>\tsorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> array<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>CocktailSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a> array<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\ti0 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i1 <span class=\"sy0\">:=</span> array0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t<span class=\"br0\">{</span><br/>\t\tChanged <span class=\"sy0\">=</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% i1<span class=\"sy0\">--</span> <span class=\"sy0\">-</span>i0 <span class=\"br0\">{</span><br/>\t\t\tj <span class=\"sy0\">:=</span> i0<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>array<span class=\"re0\">%j%</span> <span class=\"sy0\">&lt;</span> array<span class=\"re0\">%i%</span><span class=\"br0\">)</span><br/>\t\t\t\tt <span class=\"sy0\">:=</span> array<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> array<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> array<span class=\"re0\">%j%</span><span class=\"sy0\">,</span> array<span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t\t<span class=\"sy0\">,</span>Changed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tIfEqual Changed<span class=\"sy0\">,,</span> <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% i1<span class=\"sy0\">-</span>i0<span class=\"sy0\">++</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\ti <span class=\"sy0\">:=</span> i1<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>array<span class=\"re0\">%j%</span> <span class=\"sy0\">&lt;</span> array<span class=\"re0\">%i%</span><span class=\"br0\">)</span><br/>\t\t\tt <span class=\"sy0\">:=</span> array<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> array<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> array<span class=\"re0\">%j%</span><span class=\"sy0\">,</span> array<span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t<span class=\"sy0\">,</span>Changed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tIfEqual Changed<span class=\"sy0\">,,</span> <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% array0<br/>\t\tsorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> array<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>CountingSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmax <span class=\"sy0\">:=</span> min <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">instr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span><br/>\t\t\tmax <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\u00a0<br/>\t\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">&lt;</span> min<span class=\"br0\">)</span><br/>\t\t\tmin <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% max<span class=\"sy0\">-</span>min<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"re3\">A_LoopField</span><span class=\"sy0\">-</span>min<span class=\"sy0\">,</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">++</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% max<span class=\"sy0\">-</span>min<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t<span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> v <span class=\"sy0\">:=</span> i<span class=\"sy0\">+</span>min<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a<span class=\"re0\">%i%</span><br/>\t\t\tt <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> v<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>GnomeSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t<span class=\"kw1\">While</span> i <span class=\"sy0\">&lt;=</span> a0 <span class=\"br0\">{</span><br/>\t\tu <span class=\"sy0\">:=</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>a<span class=\"re0\">%u%</span> <span class=\"sy0\">&lt;</span> a<span class=\"re0\">%i%</span><span class=\"br0\">)</span><br/>\t\t\ti <span class=\"sy0\">:=</span> j<span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"br0\">{</span><br/>\t\t\tt <span class=\"sy0\">:=</span> a<span class=\"re0\">%u%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%u%</span> <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> j<span class=\"sy0\">,</span> j<span class=\"sy0\">++</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>\tsorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>InsertionSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> v <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">While</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">and</span> a<span class=\"re0\">%j%</span><span class=\"sy0\">&gt;</span>v<br/>\t\t\tu <span class=\"sy0\">:=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"re0\">%u%</span> <span class=\"sy0\">:=</span> a<span class=\"re0\">%j%</span><span class=\"sy0\">,</span> j<span class=\"sy0\">--</span><br/>\t\tu <span class=\"sy0\">:=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"re0\">%u%</span> <span class=\"sy0\">:=</span> v<br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>\tsorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>MergeSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,,,</span> UseErrorLevel<br/>\tL <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>t <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> L<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> var<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringGetPos.htm\"><span class=\"kw3\">StringGetPos</span></a><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span>\u00a0% <span class=\"st0\">\"L\"</span> L<span class=\"sy0\">//</span><span class=\"nu0\">2</span><br/>\tlist0 <span class=\"sy0\">:=</span> MergeSort<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tlist1 <span class=\"sy0\">:=</span> MergeSort<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>list0 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> list1<br/>\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>list1 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> list0<br/>\tlist <span class=\"sy0\">:=</span> list0<br/>\ti0 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>p0 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">:=</span>p0<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>p0<span class=\"sy0\">-</span>i<span class=\"br0\">)</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>\tlist <span class=\"sy0\">:=</span> list1<br/>\ti1 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">:=</span>p1<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>p1<span class=\"sy0\">-</span>i<span class=\"br0\">)</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>  <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> i0<span class=\"sy0\">&gt;</span>i1<br/>\t\tlist <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> i<span class=\"re0\">%i%</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>p<span class=\"re0\">%i%</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tlist <span class=\"sy0\">:=</span> list<span class=\"re0\">%i%</span><br/>\t\t\ti<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>p<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">:=</span>p<span class=\"re0\">%i%</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>p<span class=\"re0\">%i%</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"br0\">{</span><br/>\t\t\ti <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><br/>\t\t\trtv <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list <span class=\"st0\">\",\"</span> i<span class=\"re0\">%i%</span> <span class=\"br0\">(</span>p<span class=\"re0\">%i%</span>\u00a0? <span class=\"st0\">\",\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"re0\">%i%</span><span class=\"sy0\">,</span>p<span class=\"re0\">%i%</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> rtv<br/><span class=\"br0\">}</span><br/>\u00a0<br/>PermutationSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstatic a<span class=\"sy0\">:=</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span>v<span class=\"sy0\">:=</span><span class=\"st0\">\"v\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\tv0 <span class=\"sy0\">:=</span> a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%v0%</span><br/>\t\tv<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\tunsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%a%</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%a%</span><span class=\"re0\">%i%</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">%a%</span><span class=\"re0\">%j%</span><span class=\"br0\">)</span><br/>\t\t\tunSorted <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">While</span> unSorted <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i1 <span class=\"sy0\">:=</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">While</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i1%</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i%</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"sy0\">--</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">--</span>i1<br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/IfLess.htm\"><span class=\"kw3\">IfLess</span></a> i1<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tj <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">While</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i1%</span><br/>\t\t\t<span class=\"sy0\">--</span>j<br/>\t\tt <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i1%</span><span class=\"sy0\">,</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i1%</span> <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span><span class=\"sy0\">,</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> t<span class=\"sy0\">,</span>  j <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">While</span> i <span class=\"sy0\">&lt;</span> j<br/>\t\t\tt <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i%</span><span class=\"sy0\">,</span> <span class=\"re0\">%v%</span><span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span><span class=\"sy0\">,</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> t<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">--</span>j<br/>\t\tunsorted <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%a%</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\t\ti <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <span class=\"re0\">%v%</span><span class=\"re0\">%j%</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%a%</span><span class=\"re0\">%i%</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">%a%</span><span class=\"re0\">%j%</span><span class=\"br0\">)</span><br/>\t\t\t\tunSorted <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>\t\ti <span class=\"sy0\">:=</span> v<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> sorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%i%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>QuickSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>list0 <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> list<br/>\tpivot <span class=\"sy0\">:=</span> list1<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">&lt;</span> pivot<span class=\"br0\">)</span><br/>\t\t\tless <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">&gt;</span> pivot<span class=\"br0\">)</span><br/>\t\t\tmore <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t\tpivotlist <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t<span class=\"br0\">}</span><br/>\tless <span class=\"sy0\">:=</span> QuickSort<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>less<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tmore <span class=\"sy0\">:=</span> QuickSort<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>more<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>less<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> pivotList <span class=\"sy0\">.</span> more<br/><span class=\"br0\">}</span><br/>\u00a0<br/>SelectionSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> mn <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> m <span class=\"sy0\">:=</span> i<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<span class=\"sy0\">-</span>i <span class=\"br0\">{</span><br/>\t\t\tj<span class=\"sy0\">++</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>a<span class=\"re0\">%j%</span> <span class=\"sy0\">&lt;</span> mn<span class=\"br0\">)</span><br/>\t\t\t\tmn <span class=\"sy0\">:=</span> a<span class=\"re0\">%j%</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:=</span> j<br/>\t\t<span class=\"br0\">}</span><br/>\t\tt <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> a<span class=\"re0\">%m%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%m%</span> <span class=\"sy0\">:=</span> t<br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>\t\tsorted <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ShellSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\tinc <span class=\"sy0\">:=</span> a0<br/>\t<span class=\"kw1\">While</span> inc<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">round</span></a><span class=\"br0\">(</span>inc<span class=\"sy0\">/</span><span class=\"nu0\">2.2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<span class=\"sy0\">-</span>inc <span class=\"br0\">{</span><br/>\t\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span>inc<span class=\"sy0\">,</span> t <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> i<span class=\"sy0\">,</span> k <span class=\"sy0\">:=</span> j<span class=\"sy0\">-</span>inc<br/>\t\t\t<span class=\"kw1\">While</span> j <span class=\"sy0\">&gt;</span> inc <span class=\"sy0\">&amp;&amp;</span> a<span class=\"re0\">%k%</span> <span class=\"sy0\">&gt;</span> t<br/>\t\t\t\ta<span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> a<span class=\"re0\">%k%</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> k<span class=\"sy0\">,</span> k <span class=\"sy0\">-=</span> inc<br/>\t\t\ta<span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> t<br/>\t\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<br/>\t\ts <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BuiltInSort<span class=\"br0\">(</span>var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> N D`<span class=\"sy0\">,</span><br/>\t<span class=\"kw1\">Return</span> var<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 163, "block": "<pre class=\"text highlighted_source\">      HIMEM = PAGE + 2000000<br/>      INSTALL @lib$+\"SORTLIB\"<br/>      INSTALL @lib$+\"TIMERLIB\"<br/>      Sort% = FN_sortinit(0,0)<br/>      Timer% = FN_ontimer(1000, PROCtimer, 1)<br/>\u00a0<br/>      PRINT \"Array size:\", 1000, 10000, 100000<br/>      @% = &amp;2020A<br/>\u00a0<br/>      FOR patt% = 1 TO 4<br/>        CASE patt% OF<br/>          WHEN 1: PRINT '\"Data set to all ones:\"<br/>          WHEN 2: PRINT '\"Data ascending sequence:\"<br/>          WHEN 3: PRINT '\"Data randomly shuffled:\"<br/>          WHEN 4: PRINT '\"Data descending sequence:\"<br/>        ENDCASE<br/>\u00a0<br/>        FOR type% = 1 TO 6<br/>          CASE type% OF<br/>            WHEN 1: PRINT \"Internal (lib)\";<br/>            WHEN 2: PRINT \"Quicksort   \";<br/>            WHEN 3: PRINT \"Radix sort  \";<br/>            WHEN 4: PRINT \"Shellsort   \";<br/>            WHEN 5: PRINT \"Bubblesort  \";<br/>            WHEN 6: PRINT \"Insertion sort\";<br/>          ENDCASE<br/>\u00a0<br/>          FOR power% = 3 TO 5<br/>            PROCsorttest(patt%, type%, 10^power%)<br/>          NEXT<br/>          PRINT<br/>\u00a0<br/>        NEXT type%<br/>      NEXT patt%<br/>      END<br/>\u00a0<br/>      DEF PROCsorttest(patt%, type%, size%)<br/>      LOCAL a%(), C%, I%<br/>      DIM a%(size%-1)<br/>\u00a0<br/>      CASE patt% OF<br/>        WHEN 1: a%() = 1\u00a0: a%() = 1<br/>        WHEN 2: FOR I% = 0 TO size%-1\u00a0: a%(I%) = I%\u00a0: NEXT<br/>        WHEN 3: FOR I% = 0 TO size%-1\u00a0: a%(I%) = I%\u00a0: NEXT<br/>          C% = RND(-123456)\u00a0: REM Seed<br/>          FOR I% = size% TO 2 STEP -1\u00a0: SWAP a%(I%-1),a%(RND(I%)-1)\u00a0: NEXT<br/>        WHEN 4: FOR I% = 0 TO size%-1\u00a0: a%(I%) = size%-1-I%\u00a0: NEXT<br/>      ENDCASE<br/>\u00a0<br/>      Start% = TIME<br/>      ON ERROR LOCAL PRINT , \"   &gt;100.00\"\u00a0;\u00a0: ENDPROC<br/>      CASE type% OF<br/>        WHEN 1: C% = size%\u00a0: CALL Sort%, a%(0)<br/>        WHEN 2: PROCquicksort(a%(), 0, size%)<br/>        WHEN 3: PROCradixsort(a%(), size%, 10)<br/>        WHEN 4: PROCshellsort(a%(), size%)<br/>        WHEN 5: PROCbubblesort(a%(), size%)<br/>        WHEN 6: PROCinsertionsort(a%(), size%)<br/>      ENDCASE<br/>      PRINT , (TIME - Start%)/100;<br/>\u00a0<br/>      FOR I% = 0 TO size%-2<br/>        IF a%(I%) &gt; a%(I%+1) ERROR 100, \"Sort failed!\"<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCtimer<br/>      Start% += 0<br/>      IF (TIME - Start%) &gt; 10000 ERROR 111, \"\"<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCbubblesort(a%(), n%)<br/>      LOCAL i%, l%<br/>      REPEAT<br/>        l% = 0<br/>        FOR i% = 1 TO n%-1<br/>          IF a%(i%-1) &gt; a%(i%) THEN<br/>            SWAP a%(i%-1),a%(i%)<br/>            l% = i%<br/>          ENDIF<br/>        NEXT<br/>        n% = l%<br/>      UNTIL l% = 0<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCinsertionsort(a%(), n%)<br/>      LOCAL i%, j%, t%<br/>      FOR i% = 1 TO n%-1<br/>        t% = a%(i%)<br/>        j% = i%<br/>        WHILE j%&gt;0 AND t%&lt;a%(ABS(j%-1))<br/>          a%(j%) = a%(j%-1)<br/>          j% -= 1<br/>        ENDWHILE<br/>        a%(j%) = t%<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCquicksort(a%(), s%, n%)<br/>      LOCAL l%, p%, r%, t%<br/>      IF n% &lt; 2 THEN ENDPROC<br/>      t% = s% + n% - 1<br/>      l% = s%<br/>      r% = t%<br/>      p% = a%((l% + r%) DIV 2)<br/>      REPEAT<br/>        WHILE a%(l%) &lt; p% l% += 1\u00a0: ENDWHILE<br/>        WHILE a%(r%) &gt; p% r% -= 1\u00a0: ENDWHILE<br/>        IF l% &lt;= r% THEN<br/>          SWAP a%(l%), a%(r%)<br/>          l% += 1<br/>          r% -= 1<br/>        ENDIF<br/>      UNTIL l% &gt; r%<br/>      IF s% &lt; r% PROCquicksort(a%(), s%, r% - s% + 1)<br/>      IF l% &lt; t% PROCquicksort(a%(), l%, t% - l% + 1 )<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCshellsort(a%(), n%)<br/>      LOCAL h%, i%, j%, k%<br/>      h% = n%<br/>      WHILE h%<br/>        IF h% = 2 h% = 1 ELSE h% DIV= 2.2<br/>        FOR i% = h% TO n% - 1<br/>          k% = a%(i%)<br/>          j% = i%<br/>          WHILE j% &gt;= h% AND k% &lt; a%(ABS(j% - h%))<br/>            a%(j%) = a%(j% - h%)<br/>            j% -= h%<br/>          ENDWHILE<br/>          a%(j%) = k%<br/>        NEXT<br/>      ENDWHILE<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCradixsort(a%(), n%, r%)<br/>      LOCAL d%, e%, i%, l%, m%, b%(), bucket%()<br/>      DIM b%(DIM(a%(),1)), bucket%(r%-1)<br/>      FOR i% = 0 TO n%-1<br/>        IF a%(i%) &lt; l% l% = a%(i%)<br/>        IF a%(i%) &gt; m% m% = a%(i%)<br/>      NEXT<br/>      a%() -= l%<br/>      m% -= l%<br/>      e% = 1<br/>      WHILE m% DIV e%<br/>        bucket%() = 0<br/>        FOR i% = 0 TO n%-1<br/>          bucket%(a%(i%) DIV e% MOD r%) += 1<br/>        NEXT<br/>        FOR i% = 1 TO r%-1<br/>          bucket%(i%) += bucket%(i% - 1)<br/>        NEXT<br/>        FOR i% = n%-1 TO 0 STEP -1<br/>          d% = a%(i%) DIV e% MOD r%<br/>          bucket%(d%) -= 1<br/>          b%(bucket%(d%)) = a%(i%)<br/>        NEXT<br/>        a%() = b%()<br/>        e% *= r%<br/>      ENDWHILE<br/>      a%() += l%<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifndef _CSEQUENCE_H</span><br/><span class=\"co2\">#define _CSEQUENCE_H</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setfillconst<span class=\"br0\">(</span><span class=\"kw4\">double</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> fillwithconst<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> fillwithrrange<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> shuffledrange<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span></pre>"}, {"lang": "D", "loc": 148, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">container</span><span class=\"sy0\">,</span> std.<span class=\"me1\">datetime</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> allOnes<span class=\"sy0\">,</span> sortedData<span class=\"sy0\">,</span> randomData<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Initialize global Arrays.</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> arraySize <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>_000<span class=\"sy0\">;</span><br/>\u00a0<br/>    allOnes <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>arraySize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//allOnes[] = 1;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> d<span class=\"sy0\">;</span> allOnes<span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    sortedData <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>arraySize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> d<span class=\"sy0\">;</span> sortedData<span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    randomData <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>arraySize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> d<span class=\"sy0\">;</span> randomData<span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// BubbleSort:</span><br/>\u00a0<br/><span class=\"kw4\">void</span> bubbleSort<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> list.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> list<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                swap<span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> allOnesBubble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> allOnes.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">bubbleSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sortedBubble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> sortedData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">bubbleSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> randomBubble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> randomData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">bubbleSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// InsertionSort:</span><br/>\u00a0<br/><span class=\"kw4\">void</span> insertionSort<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> currElem<span class=\"sy0\">;</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">size_t</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> currElem <span class=\"sy0\">&lt;</span> list<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            list<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        list<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> currElem<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> allOnesInsertion<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> allOnes.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">insertionSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sortedInsertion<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> sortedData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">insertionSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> randomInsertion<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> randomData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">insertionSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// HeapSort:</span><br/>\u00a0<br/><span class=\"kw4\">void</span> heapSort<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> h <span class=\"sy0\">=</span> data.<span class=\"me1\">heapify</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>h.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        h.<span class=\"me1\">removeFront</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> allOnesHeap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> allOnes.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">heapSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sortedHeap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> sortedData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">heapSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> randomHeap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> randomData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">heapSort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Built-in sort:</span><br/>\u00a0<br/><span class=\"kw4\">void</span> allOnesBuiltIn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> allOnes.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sortedBuiltIn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> sortedData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> randomBuiltIn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> randomData.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw2\">in</span> TickDuration<span class=\"br0\">[</span>4u<span class=\"br0\">]</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> args <span class=\"sy0\">=</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"usecs\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"    Bubble Sort:   \u00a0%10d\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span>args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"    Insertion Sort:\u00a0%10d\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span>args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"    Heap Sort:     \u00a0%10d\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span>args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"    Built-in Sort: \u00a0%10d\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span>args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> nRuns <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Timings in microseconds:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"  Testing against all ones:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    nRuns.<span class=\"me1\">benchmark</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>allOnesBubble<span class=\"sy0\">,</span> allOnesInsertion<span class=\"sy0\">,</span><br/>                     allOnesHeap<span class=\"sy0\">,</span> allOnesBuiltIn<span class=\"br0\">)</span>.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>  Testing against sorted data.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    nRuns.<span class=\"me1\">benchmark</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>sortedBubble<span class=\"sy0\">,</span> sortedInsertion<span class=\"sy0\">,</span><br/>                     sortedHeap<span class=\"sy0\">,</span> sortedBuiltIn<span class=\"br0\">)</span>.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>  Testing against random data.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    nRuns.<span class=\"me1\">benchmark</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>randomBubble<span class=\"sy0\">,</span> randomInsertion<span class=\"sy0\">,</span><br/>                     randomHeap<span class=\"sy0\">,</span> randomBuiltIn<span class=\"br0\">)</span>.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 29, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> compare_sorting_algorithms <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Lists</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"ones\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> list_of_ones<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"ranges\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> list_of_ranges<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"reversed_ranges\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> list_of_reversed_ranges<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"shuffleds\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> list_of_shuffleds<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Sorts</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>bubble_sort<span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> bubble_sort:<span class=\"kw4\">list</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>insertion_sort<span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> sort:<span class=\"me2\">insertion</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>iquick_sort<span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> quicksort:<span class=\"me2\">qsort</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Results</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"kw3\">time</span>_<span class=\"re3\">list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorts</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Lists</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">write_file</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy3\">++</span><span class=\"st0\">\".png\"</span><span class=\"sy1\">,</span> egd_chart:<span class=\"re3\">graph</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>x_label<span class=\"sy1\">,</span>  <span class=\"st0\">\"log N\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>y_label<span class=\"sy1\">,</span> <span class=\"st0\">\"log ms\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Results</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">list_of_ones</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re3\">list_of_ranges</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re3\">list_of_reversed_ranges</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re3\">list_of_ranges</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">list_of_shuffleds</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">time</span>_<span class=\"re3\">list</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">List</span><span class=\"sy1\">,</span> <span class=\"re5\">List_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorts</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Results</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Sort</span><span class=\"sy1\">,</span> <span class=\"kw3\">time</span>_<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">Sort_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">List_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Sort</span><span class=\"sy1\">,</span> <span class=\"re5\">Sort_fun</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sorts</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">List</span><span class=\"sy1\">,</span> <span class=\"re5\">Results</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">time</span>_<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"re5\">Sort_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">List_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"re5\">Sort_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">List_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">List_fun</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Time</span><span class=\"sy1\">,</span> <span class=\"re5\">_Result</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"kw3\">time</span>r:<span class=\"re3\">tc</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span> <span class=\"re5\">L</span><span class=\"re3\">ist_fun</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log10</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log10</span><span class=\"br0\">(</span><span class=\"re5\">Time</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 222, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"testing\"</span><br/>    <span class=\"st0\">\"time\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"github.com/gonum/plot\"</span><br/>    <span class=\"st0\">\"github.com/gonum/plot/plotter\"</span><br/>    <span class=\"st0\">\"github.com/gonum/plot/plotutil\"</span><br/>    <span class=\"st0\">\"github.com/gonum/plot/vg\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Step 1, sort routines.</span><br/><span class=\"co1\">// These functions are copied without changes from the RC tasks Bubble Sort,</span><br/><span class=\"co1\">// Insertion sort, and Quicksort.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> bubblesort<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> itemCount <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> itemCount<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        hasChanged <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>        <span class=\"kw1\">for</span> index <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> index &lt; itemCount<span class=\"sy1\">;</span> index<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span>index<span class=\"sy1\">]</span> &gt; a<span class=\"sy1\">[</span>index<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                a<span class=\"sy1\">[</span>index<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>index<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>index<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>index<span class=\"sy1\">]</span><br/>                hasChanged <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> hasChanged <span class=\"sy3\">==</span> <span class=\"kw2\">false</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> insertionsort<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        value <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> j &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; a<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> &gt; value <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>            j <span class=\"sy2\">=</span> j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        a<span class=\"sy1\">[</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> value<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> quicksort<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> pex <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    pex <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>lower<span class=\"sy1\">,</span> upper <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> upper <span class=\"sy3\">-</span> lower <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>                <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span>upper<span class=\"sy1\">]</span> &lt; a<span class=\"sy1\">[</span>lower<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    a<span class=\"sy1\">[</span>upper<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>lower<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>lower<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>upper<span class=\"sy1\">]</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            bx <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>upper <span class=\"sy3\">+</span> lower<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>            b <span class=\"sy2\">:=</span> a<span class=\"sy1\">[</span>bx<span class=\"sy1\">]</span><br/>            lp <span class=\"sy2\">:=</span> lower<br/>            up <span class=\"sy2\">:=</span> upper<br/>        outer<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> lp &lt; upper &amp;&amp; <span class=\"sy3\">!</span><span class=\"sy1\">(</span>b &lt; a<span class=\"sy1\">[</span>lp<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>                    lp<span class=\"sy2\">++</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">if</span> lp &gt; up <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">break</span> outer<br/>                    <span class=\"sy1\">}</span><br/>                    <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span>up<span class=\"sy1\">]</span> &lt; b <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">break</span><br/>                    <span class=\"sy1\">}</span><br/>                    up<span class=\"sy2\">--</span><br/>                <span class=\"sy1\">}</span><br/>                a<span class=\"sy1\">[</span>lp<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>up<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>up<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>lp<span class=\"sy1\">]</span><br/>                lp<span class=\"sy2\">++</span><br/>                up<span class=\"sy2\">--</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> bx &lt; lp <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> bx &lt; lp<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                    a<span class=\"sy1\">[</span>bx<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>lp<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>lp<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> b<br/>                <span class=\"sy1\">}</span><br/>                up <span class=\"sy2\">=</span> lp <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> bx &gt; lp <span class=\"sy1\">{</span><br/>                    a<span class=\"sy1\">[</span>bx<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>lp<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>lp<span class=\"sy1\">],</span> b<br/>                <span class=\"sy1\">}</span><br/>                up <span class=\"sy2\">=</span> lp <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>                lp<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> up<span class=\"sy3\">-</span>lower &lt; upper<span class=\"sy3\">-</span>lp <span class=\"sy1\">{</span><br/>                pex<span class=\"sy1\">(</span>lower<span class=\"sy1\">,</span> up<span class=\"sy1\">)</span><br/>                lower <span class=\"sy2\">=</span> lp<br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                pex<span class=\"sy1\">(</span>lp<span class=\"sy1\">,</span> upper<span class=\"sy1\">)</span><br/>                upper <span class=\"sy2\">=</span> up<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    pex<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Step 2.0 sequence routines.  2.0 is the easy part.  2.5, timings, follows.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ones<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ascending<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    v <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> v<br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        v<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> shuffled<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> rand<span class=\"sy3\">.</span>Perm<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Steps 2.5 write timings, and 3 plot timings are coded together.</span><br/><span class=\"co1\">// If write means format and output human readable numbers, step 2.5</span><br/><span class=\"co1\">// is satisfied with the log output as the program runs.  The timings</span><br/><span class=\"co1\">// are plotted immediately however for step 3, not read and parsed from</span><br/><span class=\"co1\">// any formated output.</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    nPts <span class=\"sy2\">=</span> <span class=\"nu0\">7</span>    <span class=\"co1\">// number of points per test</span><br/>    inc  <span class=\"sy2\">=</span> <span class=\"nu0\">1000</span> <span class=\"co1\">// data set size increment per point</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    p        <span class=\"sy3\">*</span>plot<span class=\"sy3\">.</span>Plot<br/>    sortName <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Bubble sort\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Insertion sort\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Quicksort\"</span><span class=\"sy1\">}</span><br/>    sortFunc <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">func</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">){</span>bubblesort<span class=\"sy1\">,</span> insertionsort<span class=\"sy1\">,</span> quicksort<span class=\"sy1\">}</span><br/>    dataName <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Ones\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Ascending\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Shuffled\"</span><span class=\"sy1\">}</span><br/>    dataFunc <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>ones<span class=\"sy1\">,</span> ascending<span class=\"sy1\">,</span> shuffled<span class=\"sy1\">}</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">var</span> err error<br/>    p<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> plot<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    p<span class=\"sy3\">.</span>X<span class=\"sy3\">.</span>Label<span class=\"sy3\">.</span>Text <span class=\"sy2\">=</span> <span class=\"st0\">\"Data size\"</span><br/>    p<span class=\"sy3\">.</span><span class=\"me1\">Y</span><span class=\"sy3\">.</span><span class=\"me1\">Label</span><span class=\"sy3\">.</span><span class=\"me1\">Text</span> <span class=\"sy2\">=</span> <span class=\"st0\">\"microseconds\"</span><br/>    p<span class=\"sy3\">.</span>Y<span class=\"sy3\">.</span>Scale <span class=\"sy2\">=</span> plot<span class=\"sy3\">.</span>LogScale<span class=\"sy1\">{}</span><br/>    p<span class=\"sy3\">.</span>Y<span class=\"sy3\">.</span>Tick<span class=\"sy3\">.</span>Marker <span class=\"sy2\">=</span> plot<span class=\"sy3\">.</span>LogTicks<span class=\"sy1\">{}</span><br/>    p<span class=\"sy3\">.</span>Y<span class=\"sy3\">.</span>Min <span class=\"sy2\">=</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span> <span class=\"co1\">// hard coded to make enough room for legend</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> dx<span class=\"sy1\">,</span> name <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dataName <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> plotter<span class=\"sy3\">.</span>NewScatter<span class=\"sy1\">(</span>plotter<span class=\"sy3\">.</span>XYs<span class=\"sy1\">{})</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        s<span class=\"sy3\">.</span>Shape <span class=\"sy2\">=</span> plotutil<span class=\"sy3\">.</span>DefaultGlyphShapes<span class=\"sy1\">[</span>dx<span class=\"sy1\">]</span><br/>        p<span class=\"sy3\">.</span>Legend<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>name<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> sx<span class=\"sy1\">,</span> name <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sortName <span class=\"sy1\">{</span><br/>        l<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> plotter<span class=\"sy3\">.</span>NewLine<span class=\"sy1\">(</span>plotter<span class=\"sy3\">.</span>XYs<span class=\"sy1\">{})</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        l<span class=\"sy3\">.</span>Color <span class=\"sy2\">=</span> plotutil<span class=\"sy3\">.</span>DarkColors<span class=\"sy1\">[</span>sx<span class=\"sy1\">]</span><br/>        p<span class=\"sy3\">.</span>Legend<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>name<span class=\"sy1\">,</span> l<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> sx <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sortFunc <span class=\"sy1\">{</span><br/>        bench<span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// for ones, a single timing is sufficient.</span><br/>        bench<span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span> <span class=\"co1\">// ascending and shuffled have some randomness though,</span><br/>        bench<span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span> <span class=\"co1\">// so average timings on 5 different random sets.</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> p<span class=\"sy3\">.</span>Save<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy3\">*</span>vg<span class=\"sy3\">.</span>Inch<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy3\">*</span>vg<span class=\"sy3\">.</span>Inch<span class=\"sy1\">,</span> <span class=\"st0\">\"comp.png\"</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> bench<span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> dx<span class=\"sy1\">,</span> rep <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"bench\"</span><span class=\"sy1\">,</span> sortName<span class=\"sy1\">[</span>sx<span class=\"sy1\">],</span> dataName<span class=\"sy1\">[</span>dx<span class=\"sy1\">],</span> <span class=\"st0\">\"x\"</span><span class=\"sy1\">,</span> rep<span class=\"sy1\">)</span><br/>    pts <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>plotter<span class=\"sy3\">.</span>XYs<span class=\"sy1\">,</span> nPts<span class=\"sy1\">)</span><br/>    sf <span class=\"sy2\">:=</span> sortFunc<span class=\"sy1\">[</span>sx<span class=\"sy1\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pts <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span> inc<br/>        <span class=\"co1\">// to avoid timing sequence creation, create sequence before timing</span><br/>        <span class=\"co1\">// then just copy the data inside the timing loop.  copy time should</span><br/>        <span class=\"co1\">// be the same regardless of sequence data.</span><br/>        s0 <span class=\"sy2\">:=</span> dataFunc<span class=\"sy1\">[</span>dx<span class=\"sy1\">](</span>x<span class=\"sy1\">)</span> <span class=\"co1\">// reference sequence</span><br/>        s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span>   <span class=\"co1\">// working copy</span><br/>        <span class=\"kw1\">var</span> tSort <span class=\"kw4\">int64</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; rep<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            tSort <span class=\"sy2\">+=</span> <a href=\"http://golang.org/search?q=testing.Benchmark\"><span class=\"kw5\">testing.<span class=\"me1\">Benchmark</span></span></a><span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>testing<span class=\"sy3\">.</span>B<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; b<span class=\"sy3\">.</span>N<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> s0<span class=\"sy1\">)</span><br/>                    sf<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">})</span><span class=\"sy3\">.</span>NsPerOp<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        tSort <span class=\"sy2\">/=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>rep<span class=\"sy1\">)</span><br/>        log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"st0\">\"items\"</span><span class=\"sy1\">,</span> tSort<span class=\"sy1\">,</span> <span class=\"st0\">\"ns\"</span><span class=\"sy1\">)</span> <span class=\"co1\">// step 2.5, write timings</span><br/>        pts<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> X<span class=\"sy1\">,</span> Y <span class=\"kw4\">float64</span> <span class=\"sy1\">}{</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>x<span class=\"sy1\">),</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>tSort<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy3\">.</span><span class=\"nu0\">001</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    pl<span class=\"sy1\">,</span> ps<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> plotter<span class=\"sy3\">.</span>NewLinePoints<span class=\"sy1\">(</span>pts<span class=\"sy1\">)</span> <span class=\"co1\">// step 3, plot timings</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    pl<span class=\"sy3\">.</span>Color <span class=\"sy2\">=</span> plotutil<span class=\"sy3\">.</span>DarkColors<span class=\"sy1\">[</span>sx<span class=\"sy1\">]</span><br/>    ps<span class=\"sy3\">.</span>Color <span class=\"sy2\">=</span> plotutil<span class=\"sy3\">.</span>DarkColors<span class=\"sy1\">[</span>sx<span class=\"sy1\">]</span><br/>    ps<span class=\"sy3\">.</span>Shape <span class=\"sy2\">=</span> plotutil<span class=\"sy3\">.</span>DefaultGlyphShapes<span class=\"sy1\">[</span>dx<span class=\"sy1\">]</span><br/>    p<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>pl<span class=\"sy1\">,</span> ps<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 84, "block": "<pre class=\"j highlighted_source\">\u00a0<br/><span class=\"co1\">NB. extracts from other rosetta code projects</span><br/>ts=: <span class=\"nu0\">6</span>!:<span class=\"nu0\">2</span>, <span class=\"nu0\">7</span>!:<span class=\"nu0\">2</span>@]<br/>radix =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/><span class=\"nu0\">256</span> radix <span class=\"kw2\">y</span><br/>:<br/>a=. #{. z =. <span class=\"kw2\">x</span> #.^:<span class=\"nu0\">_1</span> <span class=\"kw2\">y</span><br/>e=. <span class=\"sy0\">(</span>-a<span class=\"sy0\">)</span> {.\"<span class=\"nu0\">0</span> b =. i.<span class=\"kw2\">x</span><br/><span class=\"kw2\">x</span>#.<span class=\"nu0\">1</span>{::<span class=\"sy0\">(</span>&lt;:@[;<span class=\"sy0\">(</span>[:\u00a0; <span class=\"sy0\">(</span>b, {\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> &lt;@}./. e,]<span class=\"sy0\">))</span>&amp;&gt;/^:a [ z;~a-<span class=\"nu0\">1</span><br/><span class=\"co1\">NB. , ([:\u00a0; (b, {:\"1) &lt;@(}:\"<a class=\"__cf_email__\" data-cfemail=\"87b6c7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:}.)/. e,])^:(#{.z) y,.z</span><br/><span class=\"sy0\">)</span><br/>bubble=:  <span class=\"sy0\">((</span>[ <span class=\"sy0\">(</span>&lt;. , &gt;.<span class=\"sy0\">)</span> {<a class=\"__cf_email__\" data-cfemail=\"133d53\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span> , }<a class=\"__cf_email__\" data-cfemail=\"a58be5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span>/^:<span class=\"nu0\">_</span><br/>insertion=:<span class=\"sy0\">((</span>&gt;: # ]<span class=\"sy0\">)</span> , [ , &lt; #]<span class=\"sy0\">)</span>/<br/>sel=: <span class=\"nu0\">1</span>\u00a0: <span class=\"st_h\">'x # ['</span><br/>quick=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/> <span class=\"kw1\">if.</span>  <span class=\"nu0\">1</span> &gt;: #<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span>  <span class=\"kw2\">y</span><br/> <span class=\"kw1\">else.</span><br/>  e=. <span class=\"kw2\">y</span>{~?#<span class=\"kw2\">y</span><br/>  <span class=\"sy0\">(</span>quick <span class=\"kw2\">y</span> &lt;sel e<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span><span class=\"kw2\">y</span> =sel e<span class=\"sy0\">)</span>,quick <span class=\"kw2\">y</span> &gt;sel e<br/> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>gaps      =: [: }: <span class=\"nu0\">1</span> <span class=\"sy0\">(</span><span class=\"nu0\">1</span>+<span class=\"nu0\">3</span>*]<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span>&gt; {:<span class=\"sy0\">)</span>^:a:~ #<br/>insert    =: <span class=\"sy0\">(</span>I.~ {. ]<span class=\"sy0\">)</span> , [ , ] }.~ I.~<br/>gapinss   =: #@] {. ,@|:@<span class=\"sy0\">(</span>] insert//.~ #@] $ <a class=\"__cf_email__\" data-cfemail=\"0b62254b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<span class=\"sy0\">)</span><br/>shell =: [:\u00a0; gapinss &amp;.&gt;/@<span class=\"sy0\">(</span>&lt; ,~ ]&amp;.&gt;@gaps<span class=\"sy0\">)</span><br/>builtin =: /:~<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">NB. characterization of the sorting algorithms.</span><br/>\u00a0<br/>sorts =: bubble`insertion`shell`quick`radix`builtin<br/>generators =: #&amp;<span class=\"nu0\">1</span>`<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"5a33741a77\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span>`<span class=\"sy0\">(</span>?.~<span class=\"sy0\">)</span> <span class=\"co1\">NB. data generators</span><br/>\u00a0<br/>round =: [: &lt;. <span class=\"nu0\">1r2</span>&amp;+<br/>\u00a0<br/>ll =: <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">_1</span> <span class=\"nu0\">0</span><span class=\"sy0\">)</span>&amp;{  <span class=\"co1\">NB. verb to extract lower left which holds ln data length</span><br/>lc =: <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">_1</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span>&amp;{  <span class=\"co1\">NB. verb to fetch lower center which holds most recent time</span><br/>\u00a0<br/><span class=\"co1\">NB. maximum_time characterize ln_start_size</span><br/><span class=\"co1\">NB. characterize returns a rank 4 matrix with successive indexes for</span><br/><span class=\"co1\">NB. algorithm, input arrangement, max number of tests in group, length time space</span><br/>characterize =: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/>  max_time =. <span class=\"kw2\">x</span><br/>  start =. <span class=\"nu0\">1</span> <span class=\"nu0\">3</span>{.&lt;:<span class=\"kw2\">y</span><br/>  <span class=\"re0\">for_sort.</span> sorts <span class=\"kw1\">do.</span><br/>    <span class=\"re0\">for_generator.</span> generators <span class=\"kw1\">do.</span>                                           <span class=\"co1\">NB. limit time  and  paging prevention</span><br/>      t =: }. <span class=\"sy0\">(</span>, <span class=\"sy0\">(</span>, [: ts <span class=\"st_h\">'<a class=\"__cf_email__\" data-cfemail=\"3e4d514c4a7e100e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> (<a class=\"__cf_email__\" data-cfemail=\"0d6a6863687f6c79627f4d233d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)'</span> , \":@<a class=\"__cf_email__\" data-cfemail=\"8cfee3f9e2e8cc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^<span class=\"sy0\">)</span>@&gt;:@ll<span class=\"sy0\">)</span> ^: <span class=\"sy0\">((</span>lc &lt; max_time\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> *. ll &lt; <span class=\"nu0\">17</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> ^:<span class=\"nu0\">_</span> start<br/>      <span class=\"kw1\">if.</span> generator -: {.generators <span class=\"kw1\">do.</span><br/>        g =. ,:t<br/>      <span class=\"kw1\">else.</span><br/>        g =. g,t<br/>      <span class=\"kw1\">end.</span><br/>    <span class=\"kw1\">end.</span><br/>    <span class=\"kw1\">if.</span> sort -: {.sorts <span class=\"kw1\">do.</span><br/>      s =. ,:g<br/>    <span class=\"kw1\">else.</span><br/>      s =. s,g<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. character cell graphics</span><br/>\u00a0<br/><span class=\"co1\">NB. From j phrases 10E. Approximation</span><br/>d3=: <span class=\"nu0\">1</span>&amp;,<a class=\"__cf_email__\" data-cfemail=\"2f016f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\u00a0%.~ ]\t<span class=\"co1\">NB. a and b such that y is approx. a + b*x</span><br/>\u00a0<br/><span class=\"co1\">NB. domain and range 0 to 14.</span><br/>D=:<span class=\"nu0\">14</span><br/>\u00a0<br/>plot =: <span class=\"nu0\">1</span>\u00a0: <span class=\"st_h\">'(=/ <a class=\"__cf_email__\" data-cfemail=\"b5c7dac0dbd1f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(u&amp;.(*&amp;(D%&lt;:y))))i.y'</span> <span class=\"co1\">NB. function plot size</span><br/>points =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'1(&lt;\"1|:|.round y*D%~&lt;:x)}0$~2#x'</span>  <span class=\"co1\">NB. size points x,:y</span><br/>\u00a0<br/>show =: [: |. [: <span class=\"st_h\">'0'</span>&amp;~:@{:} <span class=\"st_h\">' '</span> ,: \":<br/>\u00a0<br/>plt =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/><span class=\"nu0\">30</span> plt <span class=\"kw2\">y</span> <span class=\"co1\">NB. default size 30</span><br/>:<br/><span class=\"kw2\">n</span> =. &gt;:i.-# experiments =. &lt;@<span class=\"sy0\">(</span>#~\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span><span class=\"nu0\">0</span>&amp;&lt;<span class=\"sy0\">)</span>@{.<span class=\"sy0\">)</span>\"<span class=\"nu0\">2</span> <span class=\"kw2\">y</span><br/>pts =. <span class=\"kw2\">n</span> +./ .*<span class=\"kw2\">x</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"afdfc0c6c1dbdcef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;experiments<br/>coef =. d3/@&gt;experiments<br/><span class=\"sy0\">(</span><span class=\"nu0\">_</span>*pts<span class=\"sy0\">)</span> + <span class=\"kw2\">n</span> +./ .*<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span>|:coef&amp;<span class=\"sy0\">(</span>p.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> plot <span class=\"kw2\">x</span><br/><span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 142, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.31</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">system</span>.<span class=\"me1\">measureNanoTime</span><br/>\u00a0<br/>typealias Sorter <span class=\"sy0\">=</span> <span class=\"br0\">(</span>IntArray<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun onesSeq<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun ascendingSeq<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> shuffledSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toIntArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun shuffledSeq<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> + rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun bubbleSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> a.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>                a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                a<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>                n2 <span class=\"sy0\">=</span> i<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        n <span class=\"sy0\">=</span> n2<br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun insertionSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>index in <span class=\"nu0\">1</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>index<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> subIndex <span class=\"sy0\">=</span> index - <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>subIndex <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"br0\">[</span>subIndex<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            a<span class=\"br0\">[</span>subIndex + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>subIndex<span class=\"br0\">]</span><br/>            subIndex--<br/>        <span class=\"br0\">}</span><br/>        a<span class=\"br0\">[</span>subIndex + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun quickSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun sorter<span class=\"br0\">(</span>first<span class=\"sy0\">:</span> Int, last<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>last - first <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pivot <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>first + <span class=\"br0\">(</span>last - first<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> left <span class=\"sy0\">=</span> first<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> right <span class=\"sy0\">=</span> last<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;=</span> right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> pivot<span class=\"br0\">)</span> left++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> pivot<span class=\"br0\">)</span> right--<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;=</span> right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>left<span class=\"br0\">]</span><br/>                a<span class=\"br0\">[</span>left<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>right<span class=\"br0\">]</span><br/>                a<span class=\"br0\">[</span>right<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>                left++<br/>                right--<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> sorter<span class=\"br0\">(</span>first, right<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> last<span class=\"br0\">)</span> sorter<span class=\"br0\">(</span>left, last<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    sorter<span class=\"br0\">(</span><span class=\"nu0\">0</span>, a.<span class=\"me1\">lastIndex</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun radixSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>shift in <span class=\"nu0\">31</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> move <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> shl shift<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toBeMoved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>shift <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>move <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> move<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>toBeMoved<span class=\"br0\">)</span><br/>                tmp<span class=\"br0\">[</span>j++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                a<span class=\"br0\">[</span>i - j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in j until tmp.<span class=\"me1\">size</span><span class=\"br0\">)</span> tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i - j<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gaps <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">701</span>, <span class=\"nu0\">301</span>, <span class=\"nu0\">132</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">// Marcin Ciura's gap sequence</span><br/>\u00a0<br/>fun shellSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>gap in gaps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in gap until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> i<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;=</span> gap <span class=\"sy0\">&amp;&amp;</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> temp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span><br/>                j -<span class=\"sy0\">=</span> gap<br/>            <span class=\"br0\">}</span><br/>            a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> runs <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lengths <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000, <span class=\"nu0\">10</span><span class=\"sy0\">_</span>000, <span class=\"nu0\">100</span><span class=\"sy0\">_</span>000<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sorts <span class=\"sy0\">=</span> listOf<span class=\"sy0\">&lt;</span>Sorter<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><br/>        <span class=\"sy0\">::</span>bubbleSort, <span class=\"sy0\">::</span>insertionSort, <span class=\"sy0\">::</span>quickSort, <span class=\"sy0\">::</span>radixSort, <span class=\"sy0\">::</span>shellSort<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* allow JVM to compile sort functions before timings start */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>sort in sorts<span class=\"br0\">)</span> sort<span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sortTitles <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Bubble\"</span>, <span class=\"st0\">\"Insert\"</span>, <span class=\"st0\">\"Quick \"</span>, <span class=\"st0\">\"Radix \"</span>, <span class=\"st0\">\"Shell \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> seqTitles <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"All Ones\"</span>, <span class=\"st0\">\"Ascending\"</span>, <span class=\"st0\">\"Shuffled\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> totals <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>seqTitles.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> List<span class=\"br0\">(</span>sorts.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> LongArray<span class=\"br0\">(</span>lengths.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>k, n<span class=\"br0\">)</span> in lengths.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> seqs <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>onesSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, ascendingSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, shuffledSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        repeat<span class=\"br0\">(</span>runs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until seqs.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>           <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until sorts.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> seq <span class=\"sy0\">=</span> seqs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    totals<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> measureNanoTime <span class=\"br0\">{</span> sorts<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">(</span>seq<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"All timings in micro-seconds<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Sequence length\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>len in lengths<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%8d   \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until seqTitles.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  ${seqTitles[i]}:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until sorts.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"    ${sortTitles[j]}     \"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until lengths.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> time <span class=\"sy0\">=</span> totals<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> / runs / <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"%8d   \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>time<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 368, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Compare_sorting_algorithms.exw<br/>--<br/>constant XQS = 01  -- (set to 1 to exclude quick_sort and shell_sort from ones)<br/>\u00a0<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, tabs, plot<br/>Ihandles plots<br/>\u00a0<br/>function quick_sort2(sequence x)<br/>integer n = length(x), c, mid, midn<br/>object xi, midval<br/>sequence left = {}, right = {}<br/>\u00a0<br/>    if n&lt;2 then<br/>        return x    -- already sorted (trivial case)<br/>    end if<br/>\u00a0<br/>    mid = floor((n+1)/2)<br/>    midval = x[mid]<br/>    x[mid] = x[1]<br/>    midn = 1<br/>\u00a0<br/>    for i=2 to n do<br/>        xi = x[i]<br/>        c = compare(xi,midval)<br/>        if c&lt;0 then<br/>            left &amp;= xi<br/>        elsif c&gt;0 then<br/>            right &amp;= xi<br/>        else<br/>            midn += 1<br/>        end if<br/>    end for<br/>\u00a0<br/>    return quick_sort2(left) &amp; repeat(midval,midn) &amp; quick_sort2(right)<br/>end function<br/>\u00a0<br/>function quick_sort(sequence s)<br/>sequence qstack<br/>integer first, last, stackptr, I, J, tmp, pivot<br/>\u00a0<br/>    qstack = repeat(0,floor((length(s)/5)+10))    -- create a stack<br/>\u00a0<br/>    first = 1<br/>    last = length(s)<br/>    stackptr = 0<br/>    while 1 do<br/>        while first&lt;last do<br/>            pivot = s[floor(last+first)/2]<br/>            I = first<br/>            J = last<br/>            while 1 do<br/>                while s[I]&lt;pivot do<br/>                    I += 1<br/>                end while<br/>                while s[J]&gt;pivot do<br/>                    J -= 1<br/>                end while<br/>                if I&gt;J then exit end if<br/>                if I&lt;J then<br/>                    tmp = s[I]<br/>                    s[I] = s[J]<br/>                    s[J] = tmp<br/>                end if<br/>                I += 1<br/>                J -= 1<br/>                if I&gt;J then exit end if<br/>            end while<br/>            if I&lt;last then<br/>                qstack[stackptr+1] = I<br/>                qstack[stackptr+2] = last<br/>                stackptr += 2<br/>            end if<br/>            last = J<br/>        end while<br/>        if stackptr=0 then exit end if<br/>        stackptr -= 2<br/>        first = qstack[stackptr+1]<br/>        last = qstack[stackptr+2]<br/>    end while<br/>    return s<br/>end function<br/>\u00a0<br/>function radixSortn(sequence s, integer n)<br/>sequence buckets = repeat({},10)<br/>sequence res = {}<br/>    for i=1 to length(s) do<br/>        integer digit = remainder(floor(s[i]/power(10,n-1)),10)+1<br/>        buckets[digit] = append(buckets[digit],s[i])<br/>    end for<br/>    for i=1 to length(buckets) do<br/>        integer len = length(buckets[i])<br/>        if len!=0 then<br/>            if len=1 or n=1 then<br/>                res &amp;= buckets[i]<br/>            else<br/>                res &amp;= radixSortn(buckets[i],n-1)<br/>            end if<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function split_by_sign(sequence s)<br/>sequence buckets = {{},{}}<br/>    for i=1 to length(s) do<br/>        integer si = s[i]<br/>        if si&lt;0 then<br/>            buckets[1] = append(buckets[1],-si)<br/>        else<br/>            buckets[2] = append(buckets[2],si)<br/>        end if<br/>    end for<br/>    return buckets<br/>end function<br/>\u00a0<br/>function radix_sort(sequence s)<br/>integer mins = min(s)<br/>integer passes = max(max(s),abs(mins))<br/>    passes = floor(log10(passes))+1<br/>    if mins&lt;0 then<br/>        sequence buckets = split_by_sign(s)<br/>        buckets[1] = reverse(sq_uminus(radixSortn(buckets[1],passes)))<br/>        buckets[2] = radixSortn(buckets[2],passes)<br/>        s = buckets[1]&amp;buckets[2]<br/>    else<br/>        s = radixSortn(s,passes)<br/>    end if<br/>    return s<br/>end function<br/>\u00a0<br/>function shell_sort(sequence s)<br/>integer gap = floor(length(s)/2), j<br/>object temp<br/>    while gap&gt;0 do<br/>        for i=gap to length(s) do<br/>            temp = s[i]<br/>            j = i-gap<br/>            while j&gt;=1 and temp&lt;=s[j] do<br/>                s[j+gap] = s[j]<br/>                j -= gap<br/>            end while<br/>            s[j+gap] = temp<br/>        end for<br/>        gap = floor(gap/2)<br/>    end while<br/>    return s<br/>end function<br/>\u00a0<br/>function shell_sort2(sequence x)<br/>integer gap, j, first, last<br/>object xi, xj<br/>\u00a0<br/>    last = length(x)<br/>    gap = floor(last/10)+1<br/>    while TRUE do<br/>        first = gap+1<br/>        for i=first to last do<br/>            xi = x[i]<br/>            j = i-gap<br/>            while TRUE do<br/>                xj = x[j]<br/>                if xi&gt;=xj then<br/>                    j += gap<br/>                    exit<br/>                end if<br/>                x[j+gap] = xj<br/>                if j&lt;=gap then<br/>                    exit<br/>                end if<br/>                j -= gap<br/>            end while<br/>            x[j] = xi<br/>        end for<br/>        if gap=1 then<br/>            return x<br/>        else<br/>            gap = floor(gap/3.5)+1<br/>        end if<br/>    end while<br/>end function<br/>\u00a0<br/>function siftDown(sequence arr, integer s, integer last)<br/>integer root = s<br/>    while root*2&lt;=last do<br/>        integer child = root*2<br/>        if child&lt;last and arr[child]&lt;arr[child+1] then<br/>            child += 1<br/>        end if<br/>        if arr[root]&gt;=arr[child] then exit end if<br/>        object tmp = arr[root]<br/>        arr[root] = arr[child]<br/>        arr[child] = tmp<br/>        root = child<br/>    end while<br/>    return arr<br/>end function<br/>\u00a0<br/>function heapify(sequence arr, integer count)<br/>integer s = floor(count/2)<br/>    while s&gt;0 do<br/>        arr = siftDown(arr,s,count)<br/>        s -= 1<br/>    end while<br/>    return arr<br/>end function<br/>\u00a0<br/>function heap_sort(sequence arr)<br/>integer last = length(arr)<br/>    arr = heapify(arr,last)<br/>    while last&gt;1 do<br/>        object tmp = arr[1]<br/>        arr[1] = arr[last]<br/>        arr[last] = tmp<br/>        last -= 1<br/>        arr = siftDown(arr,1,last)<br/>    end while<br/>    return arr<br/>end function<br/>\u00a0<br/>include builtins/sort.e<br/>\u00a0<br/>enum ONES = 1, SORTED = 2, RANDOM = 3, REVERSE = 4<br/>\u00a0<br/>constant tabtitles = {\"ones\",\"sorted\",\"random\",\"reverse\"}<br/>integer tabidx = 3<br/>\u00a0<br/>integer STEP<br/>\u00a0<br/>function tr(sequence name, integer rid=routine_id(name))<br/>    return {name,rid}<br/>end function<br/>\u00a0<br/>constant tests = {tr(\"quick_sort\"),<br/>                  tr(\"quick_sort2\"),<br/>                  tr(\"radix_sort\"),<br/>                  tr(\"shell_sort\"),<br/>                  tr(\"shell_sort2\"),<br/>                  tr(\"heap_sort\"),<br/>                  tr(\"sort\"),           -- builtin<br/>                 }<br/>\u00a0<br/>sequence results = repeat(repeat({}, length(tests)),length(tabtitles))<br/>\u00a0<br/>sequence dsdx = repeat(repeat(0,length(tests)),length(tabtitles))<br/>\u00a0<br/>integer ds_index<br/>\u00a0<br/>function idle_action_cb()<br/>atom best = -1, -- fastest last<br/>     besti = 0, -- 1..length(tests) <br/>     bestt = 0, -- 1..length(tabtitles)<br/>     len<br/>sequence todo<br/>    --<br/>    -- Search for something to do, active/visible tab first.<br/>    -- Any result set of length 0 -&gt; just do one.<br/>    -- Of all result sets&lt;8, pick the lowest [$].<br/>    --<br/>    todo = {tabidx}<br/>    for t=1 to length(tabtitles) do<br/>        if t!=tabidx then todo &amp;= t end if<br/>    end for<br/>\u00a0<br/>    for t=1 to length(tabtitles) do<br/>        integer ti = todo[t]<br/>        for i=1 to length(results[ti]) do<br/>            len = length(results[ti][i])<br/>            if len=0 then<br/>                best = 0<br/>                besti = i<br/>                bestt = ti<br/>                exit<br/>            elsif len&lt;8 then<br/>                if (best=-1) or (best&gt;results[ti][i][$]) then<br/>                    best = results[ti][i][$]<br/>                    besti = i<br/>                    bestt = ti<br/>                end if<br/>            end if<br/>        end for<br/>        if (t=1) and (besti!=0) then exit end if<br/>    end for<br/>    if best&gt;10 then<br/>        -- cop out if it is getting too slow<br/>        besti = 0<br/>    end if<br/>    if besti!=0 then<br/>        STEP = iff(not XQS and bestt=ONES?1000:100000)<br/>        len = (length(results[bestt][besti])+1)*STEP<br/>        sequence test = iff(bestt=ONES?repeat(1,len):<br/>                        iff(bestt=SORTED?tagset(len):<br/>                        iff(bestt=RANDOM?shuffle(tagset(len)):<br/>                        iff(bestt=REVERSE?reverse(tagset(len)):9/0))))<br/>        ds_index = dsdx[bestt][besti]<br/>        atom t0 = time()<br/>        sequence check = call_func(tests[besti][2],{test})<br/>        t0 = time()-t0<br/>--      if check!=sort(test) then\u00a0?9/0 end if<br/>        plot = plots[bestt]<br/>        IupPlotInsert(plot, ds_index, -1, len, t0)<br/>        results[bestt][besti] = append(results[bestt][besti],t0)<br/>        IupSetAttribute(plot,\"REDRAW\",NULL)<br/>        sequence progress = {bestt}<br/>        for i=1 to length(results[bestt]) do<br/>            progress &amp;= length(results[bestt][i])<br/>        end for<br/>        IupSetStrAttribute(dlg,\"TITLE\",\"Compare sorting algorithms\u00a0%s\",{sprint(progress)})<br/>        return IUP_CONTINUE<br/>    end if<br/>    IupSetAttribute(dlg,\"TITLE\",\"Compare sorting algorithms (all done, idle)\")<br/>    return IUP_IGNORE   -- all done, remove callback<br/>end function<br/>constant cb_idle_action = Icallback(\"idle_action_cb\")<br/>\u00a0<br/>function tabchange_cb(Ihandle /*self*/, Ihandle /*new_tab*/)<br/>    tabidx = IupGetInt(tabs,\"VALUEPOS\")+1<br/>    plot = plots[tabidx]<br/>    return IUP_DEFAULT;<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    plots = {}<br/>    for i=1 to length(tabtitles) do<br/>        if XQS then<br/>--          results[ONES][1] = repeat(0,8)<br/>            results[ONES][4] = repeat(0,8)<br/>        end if<br/>        plot = IupPlot()<br/>        IupSetAttribute(plot,\"MENUITEMPROPERTIES\",\"YES\")<br/>        IupSetAttribute(plot,\"TABTITLE\",tabtitles[i])<br/>        IupSetAttribute(plot,\"GRID\",\"YES\")<br/>        IupSetAttribute(plot,\"MARGINLEFT\",\"50\")<br/>        IupSetAttribute(plot,\"MARGINBOTTOM\",\"40\")<br/>        IupSetAttribute(plot,\"LEGEND\",\"YES\")<br/>        IupSetAttribute(plot,\"LEGENDPOS\",\"TOPLEFT\")<br/>--      IupSetAttribute(plot,\"AXS_YSCALE\",\"LOG10\")<br/>--      IupSetAttribute(plot,\"AXS_XSCALE\",\"LOG10\")<br/>        for j=1 to length(tests) do<br/>            IupPlotBegin(plot)<br/>            dsdx[i][j] = IupPlotEnd(plot)<br/>            IupSetAttribute(plot,\"DS_NAME\",tests[j][1])<br/>        end for<br/>        plots = append(plots,plot)<br/>    end for<br/>    tabs = IupTabs(plots)<br/>    IupSetCallback(tabs, \"TABCHANGE_CB\", Icallback(\"tabchange_cb\"))<br/>    dlg = IupDialog(tabs)<br/>    IupSetAttributes(dlg, \"RASTERSIZE=%dx%d\", {640, 480})<br/>    IupSetAttribute(dlg, \"TITLE\", \"Compare sorting algorithms\")<br/>    IupSetCallback(dlg, \"K_ANY\", Icallback(\"esc_close\"))<br/>    IupShow(dlg)<br/>    IupSetInt(tabs, \"VALUEPOS\", tabidx-1)<br/>    IupSetGlobalFunction(\"IDLE_ACTION\", cb_idle_action)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> builtinsort<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    x.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> partition<span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> pivot<span class=\"br0\">)</span>:<br/>   low<span class=\"sy0\">,</span> middle<span class=\"sy0\">,</span> up <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> seq:<br/>       <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> pivot:<br/>           low.<span class=\"me1\">append</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>       <span class=\"kw1\">elif</span> x <span class=\"sy0\">==</span> pivot:<br/>           middle.<span class=\"me1\">append</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>       <span class=\"kw1\">else</span>:<br/>           up.<span class=\"me1\">append</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> low<span class=\"sy0\">,</span> middle<span class=\"sy0\">,</span> up<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"kw1\">def</span> qsortranpart<span class=\"br0\">(</span>seq<span class=\"br0\">)</span>:<br/>   size <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>seq<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> size <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>: <span class=\"kw1\">return</span> seq<br/>   low<span class=\"sy0\">,</span> middle<span class=\"sy0\">,</span> up <span class=\"sy0\">=</span> partition<span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> <span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span>seq<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> qsortranpart<span class=\"br0\">(</span>low<span class=\"br0\">)</span> + middle + qsortranpart<span class=\"br0\">(</span>up<span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 93, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Array</span><br/>  <span class=\"kw1\">def</span> radix_sort<span class=\"br0\">(</span>base=<span class=\"nu0\">10</span><span class=\"br0\">)</span>       <span class=\"co1\"># negative value is inapplicable.</span><br/>    ary = dup<br/>    rounds = <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>ary.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">ceil</span><br/>    rounds.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      buckets = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>      base_i = base<span class=\"sy0\">**</span>i<br/>      ary.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>        digit = <span class=\"br0\">(</span>n<span class=\"sy0\">/</span>base_i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> base<br/>        buckets<span class=\"br0\">[</span>digit<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> n<br/>      <span class=\"kw1\">end</span><br/>      ary = buckets.<span class=\"me1\">flatten</span><br/>    <span class=\"kw1\">end</span><br/>    ary<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> quick_sort<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">self</span>  <span class=\"kw1\">if</span> size <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>    pivot = sample<br/>    g = group_by<span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x<span class=\"sy0\">&lt;=&gt;</span>pivot<span class=\"br0\">}</span><br/>    g.<span class=\"me1\">default</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    g<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">quick_sort</span> <span class=\"sy0\">+</span> g<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">quick_sort</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> shell_sort<br/>    inc = size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">while</span> inc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"br0\">(</span>inc...<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        value = <span class=\"kw2\">self</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">while</span> i <span class=\"sy0\">&gt;</span>= inc <span class=\"kw1\">and</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> inc<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> value<br/>          <span class=\"kw2\">self</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">self</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> inc<span class=\"br0\">]</span><br/>          i <span class=\"sy0\">-</span>= inc<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw2\">self</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> = value<br/>      <span class=\"kw1\">end</span><br/>      inc = <span class=\"br0\">(</span>inc == <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>inc <span class=\"sy0\">*</span> <span class=\"nu0\">5.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> insertion_sort<br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      value = <span class=\"kw2\">self</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      j = i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">while</span> j <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> value<br/>        <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        j <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = value<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> bubble_sort<br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">size</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>  <span class=\"kw1\">if</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>data_size = <span class=\"br0\">[</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">10000</span>, <span class=\"nu0\">100000</span>, <span class=\"nu0\">1000000</span><span class=\"br0\">]</span><br/>data = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>data_size.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>size<span class=\"sy0\">|</span><br/>  ary = <span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"me1\">size</span><br/>  data <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>size, ary, ary.<span class=\"me1\">shuffle</span>, ary.<span class=\"me1\">reverse</span> <span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>data = data.<span class=\"me1\">transpose</span><br/>\u00a0<br/>data_type = <span class=\"br0\">[</span><span class=\"st0\">\"set to all ones\"</span>, <span class=\"st0\">\"ascending sequence\"</span>, <span class=\"st0\">\"randomly shuffled\"</span>, <span class=\"st0\">\"descending sequence\"</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Array size:          \"</span><br/><span class=\"kw3\">puts</span> data_size.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>size<span class=\"sy0\">|</span> <span class=\"st0\">\"%9d\"</span> <span class=\"sy0\">%</span> size<span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>\u00a0<br/>data.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>arys,i<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Data #{data_type[i]}:\"</span><br/>  <span class=\"br0\">[</span><span class=\"re3\">:sort</span>, <span class=\"re3\">:radix_sort</span>, <span class=\"re3\">:quick_sort</span>, <span class=\"re3\">:shell_sort</span>, <span class=\"re3\">:insertion_sort</span>, <span class=\"re3\">:bubble_sort</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>m<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%20s \"</span>, m<br/>    flag = <span class=\"kw2\">true</span><br/>    arys.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>ary<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> flag<br/>        t0 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>        ary.<span class=\"me1\">dup</span>.<span class=\"me1\">send</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>        <span class=\"kw3\">printf</span> <span class=\"st0\">\" \u00a0%7.3f\"</span>, <span class=\"br0\">(</span>t1 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span> <span class=\"sy0\">-</span> t0<span class=\"br0\">)</span><br/>        flag = <span class=\"kw2\">false</span>  <span class=\"kw1\">if</span> t1 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"   --.---\"</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Tcl", "loc": 222, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\">###############################################################################</span><br/><span class=\"co1\"># measure and plot times</span><br/><span class=\"kw2\">package</span> require Tk<br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/><span class=\"kw1\">namespace</span> path\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> create_log10_plot <span class=\"br0\">{</span>title xlabel ylabel xs ys labels shapes colours<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> w <span class=\"br0\">[</span>toplevel .<span class=\"br0\">[</span><span class=\"kw2\">clock</span> clicks<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    wm title <span class=\"re0\">$w</span> <span class=\"re0\">$title</span><br/>    pack <span class=\"br0\">[</span>canvas <span class=\"re0\">$w</span>.c -background white<span class=\"br0\">]</span><br/>    pack <span class=\"br0\">[</span>canvas <span class=\"re0\">$w</span>.legend -background white<span class=\"br0\">]</span><br/>    update<br/>    plot_log10 <span class=\"re0\">$w</span>.c <span class=\"re0\">$w</span>.legend <span class=\"re0\">$title</span> <span class=\"re0\">$xlabel</span> <span class=\"re0\">$ylabel</span> <span class=\"re0\">$xs</span> <span class=\"re0\">$ys</span> <span class=\"re0\">$labels</span> <span class=\"re0\">$shapes</span> <span class=\"re0\">$colours</span><br/>    <span class=\"re0\">$w</span>.c config -scrollregion <span class=\"br0\">[</span><span class=\"re0\">$w</span>.c bbox all<span class=\"br0\">]</span><br/>    update<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> plot_log10 <span class=\"br0\">{</span>canvas legend title xlabel ylabel xs ys labels shapes colours<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> xfac yfac<br/>    <span class=\"kw1\">set</span> log10_xs <span class=\"br0\">[</span>map <span class=\"br0\">{</span>_ <span class=\"br0\">{</span>log10 <span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$xs</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> series <span class=\"re0\">$ys</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> log10_ys <span class=\"br0\">[</span>map <span class=\"br0\">{</span>_ <span class=\"br0\">{</span>log10 <span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$series</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> maxx <span class=\"br0\">[</span>max <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$log10_xs</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> yvalues <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real <span class=\"br0\">[</span>struct::<span class=\"kw2\">list</span> flatten <span class=\"re0\">$log10_ys</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> firstInf <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> <span class=\"re0\">$yvalues</span> Inf<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> maxy <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yvalues</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$firstInf</span> == -<span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$yvalues</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span>\u00a0: <span class=\"re0\">$firstInf</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> xfac <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>winfo width <span class=\"re0\">$canvas</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.8</span>/<span class=\"re0\">$maxx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> yfac <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>winfo height <span class=\"re0\">$canvas</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.8</span>/<span class=\"re0\">$maxy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    scale <span class=\"re0\">$canvas</span> x <span class=\"nu0\">0</span> <span class=\"re0\">$maxx</span> <span class=\"re0\">$xfac</span> <span class=\"st0\">\"log10($xlabel)\"</span><br/>    scale <span class=\"re0\">$canvas</span> y <span class=\"nu0\">0</span> <span class=\"re0\">$maxy</span> <span class=\"re0\">$yfac</span> <span class=\"st0\">\"log10($ylabel)\"</span> <span class=\"re0\">$maxx</span> <span class=\"re0\">$xfac</span><br/>\u00a0<br/>    <span class=\"re0\">$legend</span> create text <span class=\"nu0\">30</span> <span class=\"nu0\">0</span> -text <span class=\"re0\">$title</span> -anchor nw<br/>    <span class=\"kw1\">set</span> count <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> series <span class=\"re0\">$log10_ys</span> shape <span class=\"re0\">$shapes</span> colour <span class=\"re0\">$colours</span> label <span class=\"re0\">$labels</span> <span class=\"br0\">{</span><br/>        plotxy <span class=\"re0\">$canvas</span> <span class=\"re0\">$log10_xs</span> <span class=\"re0\">$series</span> <span class=\"re0\">$shape</span> <span class=\"re0\">$colour</span><br/>        legenditem <span class=\"re0\">$legend</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> count<span class=\"br0\">]</span> <span class=\"re0\">$shape</span> <span class=\"re0\">$colour</span> <span class=\"re0\">$label</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> map <span class=\"br0\">{</span>lambda <span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> item <span class=\"re0\">$list</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> res <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$item</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> legenditem <span class=\"br0\">{</span>legend pos shape colour label<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pos</span> <span class=\"sy0\">*</span> <span class=\"nu0\">15</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$shape</span> <span class=\"re0\">$legend</span> <span class=\"nu0\">20</span> <span class=\"re0\">$y</span> -fill <span class=\"re0\">$colour</span><br/>    <span class=\"re0\">$legend</span> create text <span class=\"nu0\">30</span> <span class=\"re0\">$y</span> -text <span class=\"re0\">$label</span> -anchor w<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The actual plotting engine</span><br/><span class=\"kw1\">proc</span> plotxy <span class=\"br0\">{</span>canvas _xs _ys shape colour<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> xfac yfac<br/>    <span class=\"kw1\">foreach</span> x <span class=\"re0\">$_xs</span> y <span class=\"re0\">$_ys</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> Inf<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> xs <span class=\"re0\">$x</span><br/>            <span class=\"kw2\">lappend</span> ys <span class=\"re0\">$y</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> coords <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> x <span class=\"re0\">$xs</span> y <span class=\"re0\">$ys</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> coord_x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$xfac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> coord_y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$yfac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$shape</span> <span class=\"re0\">$canvas</span> <span class=\"re0\">$coord_x</span> <span class=\"re0\">$coord_y</span> -fill <span class=\"re0\">$colour</span><br/>        <span class=\"kw2\">lappend</span> coords <span class=\"re0\">$coord_x</span> <span class=\"re0\">$coord_y</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$canvas</span> create line <span class=\"re0\">$coords</span> -smooth true<br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Rescales the contents of the given canvas</span><br/><span class=\"kw1\">proc</span> scale <span class=\"br0\">{</span>canvas direction from to fac label <span class=\"br0\">{</span>other_to <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>other_fac <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$from</span><span class=\"sy0\">*</span><span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$to</span><span class=\"sy0\">*</span><span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">switch</span> -- <span class=\"re0\">$direction</span> <span class=\"br0\">{</span><br/>        x <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$from</span> <span class=\"sy0\">*</span> <span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$to</span> <span class=\"sy0\">*</span> <span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"co1\"># create x-axis</span><br/>            <span class=\"re0\">$canvas</span> create line <span class=\"re0\">$f</span> <span class=\"nu0\">0</span> <span class=\"re0\">$t</span> <span class=\"nu0\">0</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"re0\">$f</span> <span class=\"nu0\">0</span> -anchor nw -text <span class=\"re0\">$from</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"re0\">$t</span> <span class=\"nu0\">0</span> -anchor n -text <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%.1f\"</span> <span class=\"re0\">$to</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$f</span>+<span class=\"re0\">$t</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> -anchor n -text <span class=\"re0\">$label</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>        y <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$from</span> <span class=\"sy0\">*</span> -<span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$to</span> <span class=\"sy0\">*</span> -<span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"co1\"># create y-axis</span><br/>            <span class=\"re0\">$canvas</span> create line <span class=\"nu0\">0</span> <span class=\"re0\">$f</span> <span class=\"nu0\">0</span> <span class=\"re0\">$t</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"nu0\">0</span> <span class=\"re0\">$f</span> -anchor se -text <span class=\"re0\">$from</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"nu0\">0</span> <span class=\"re0\">$t</span> -anchor e -text <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%.1f\"</span> <span class=\"re0\">$to</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$canvas</span> create text <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$f</span>+<span class=\"re0\">$t</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> -anchor e -text <span class=\"re0\">$label</span><br/>            <span class=\"co1\"># create gridlines</span><br/>            <span class=\"kw1\">set</span> xmax <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$other_to</span> <span class=\"sy0\">*</span> <span class=\"re0\">$other_fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$to</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">*</span> -<span class=\"re0\">$fac</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$canvas</span> create line <span class=\"nu0\">0</span> <span class=\"re0\">$y</span> <span class=\"re0\">$xmax</span> <span class=\"re0\">$y</span> -dash .<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Helper to make points, which are otherwise not a native item type</span><br/><span class=\"kw1\">proc</span> dot <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> id <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create oval <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$id</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> square <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> id <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create rectangle <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$id</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> cross <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> l1 <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create line <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> l2 <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create line <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$l1</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$l2</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> x <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> l1 <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create line <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> l2 <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create line <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$l1</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$l2</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> triangleup <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> id <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create polygon <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$id</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> triangledown <span class=\"br0\">{</span>canvas x y args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> id <span class=\"br0\">[</span><span class=\"re0\">$canvas</span> create polygon <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$canvas</span> itemconfigure <span class=\"re0\">$id</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>wm withdraw .<br/>\u00a0<br/><span class=\"co1\">#####################################################################</span><br/><span class=\"co1\"># list creation procedures</span><br/><span class=\"kw1\">proc</span> ones n <span class=\"br0\">{</span><br/>    lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> reversed n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span>  <br/><span class=\"kw1\">proc</span> random n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> algorithms <span class=\"br0\">{</span><span class=\"kw2\">lsort</span> quicksort shellsort insertionsort bubblesort mergesort<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> sizes <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">100</span> <span class=\"nu0\">1000</span> <span class=\"nu0\">10000</span> <span class=\"nu0\">100000</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> types <span class=\"br0\">{</span>ones reversed random<span class=\"br0\">}</span> <br/><span class=\"kw1\">set</span> shapes <span class=\"br0\">{</span>dot square cross triangleup triangledown x<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> colours <span class=\"br0\">{</span>red blue black brown yellow black<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># create some lists to be used by all sorting algorithms</span><br/>array <span class=\"kw1\">set</span> lists <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> size <span class=\"re0\">$sizes</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> type <span class=\"re0\">$types</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> lists<span class=\"br0\">(</span><span class=\"re0\">$type</span>,<span class=\"re0\">$size</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"re0\">$type</span> <span class=\"re0\">$size</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> runs <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\"># header</span><br/><span class=\"kw2\">fconfigure</span> stdout -buffering none<br/><span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-16s\"</span> <span class=\"st0\">\"list length:\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> size <span class=\"re0\">$sizes</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%10d\"</span> <span class=\"re0\">$size</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\"># perform the sort timings and output results</span><br/><span class=\"kw1\">foreach</span> type <span class=\"re0\">$types</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>list type: $type\"</span><br/>    <span class=\"kw1\">set</span> times <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> algo <span class=\"re0\">$algorithms</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> errs <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> thesetimes <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$algo</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><span class=\"co1\"># call it once to ensure it's compiled</span><br/>\u00a0<br/>        <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"  \u00a0%-13s\"</span> <span class=\"re0\">$algo</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">foreach</span> size <span class=\"re0\">$sizes</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># some implementations are just too slow</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$type</span> ne <span class=\"st0\">\"ones\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span><span class=\"re0\">$algo</span> eq <span class=\"st0\">\"insertionsort\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> ||<br/>                <span class=\"br0\">(</span><span class=\"re0\">$algo</span> eq <span class=\"st0\">\"bubblesort\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> Inf<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># OK, do it</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw2\">time</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$algo</span> <span class=\"re0\">$lists</span><span class=\"br0\">(</span><span class=\"re0\">$type</span>,<span class=\"re0\">$size</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"re0\">$runs</span><span class=\"br0\">}</span> result<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> Inf<br/>                    <span class=\"kw2\">lappend</span> errs <span class=\"re0\">$result</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$result</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">lappend</span> thesetimes <span class=\"re0\">$time</span><br/>            <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%10s\"</span> <span class=\"re0\">$time</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$errs</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"     \u00a0%s\"</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$errs</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>      \"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> times <span class=\"re0\">$thesetimes</span><br/>    <span class=\"br0\">}</span><br/>    create_log10_plot <span class=\"st0\">\"Sorting a '$type' list\"</span> size <span class=\"kw2\">time</span> <span class=\"re0\">$sizes</span> <span class=\"re0\">$times</span> <span class=\"re0\">$algorithms</span> <span class=\"re0\">$shapes</span> <span class=\"re0\">$colours</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>times in microseconds, average of $runs runs\"</span></pre>"}]}