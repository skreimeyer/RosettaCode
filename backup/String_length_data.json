{"task": "String_length", "blocks": [{"lang": "360 Assembly", "loc": 25, "block": "<pre class=\"text highlighted_source\">*        String length             06/07/2016<br/>LEN      CSECT<br/>         USING  LEN,15             base register<br/>         LA     1,L'C              length of C<br/>         XDECO  1,PG<br/>         XPRNT  PG,12<br/>         LA     1,L'H              length of H<br/>         XDECO  1,PG<br/>         XPRNT  PG,12<br/>         LA     1,L'F              length of F<br/>         XDECO  1,PG<br/>         XPRNT  PG,12<br/>         LA     1,L'D              length of D<br/>         XDECO  1,PG<br/>         XPRNT  PG,12<br/>         LA     1,L'PG             length of PG<br/>         XDECO  1,PG<br/>         XPRNT  PG,12<br/>         BR     14                 exit           length<br/>C        DS     C                  character       1<br/>H        DS     H                  half word       2<br/>F        DS     F                  full word       4    <br/>D        DS     D                  double word     8<br/>PG       DS     CL12               string         12<br/>         END    LEN</pre>"}, {"lang": "4D", "loc": 1, "block": "<pre class=\"text highlighted_source\">$length:=Length(\"Hello, world!\")</pre>"}, {"lang": "ActionScript", "loc": 36, "block": "<pre class=\"actionscript highlighted_source\">\u00a0<br/>package <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw3\">import</span> flash.<span class=\"me1\">display</span>.<span class=\"me1\">Sprite</span>;<br/>    <span class=\"kw3\">import</span> flash.<span class=\"me1\">events</span>.<span class=\"me1\">Event</span>;<br/>    <span class=\"kw3\">import</span> flash.<span class=\"me1\">utils</span>.<span class=\"me1\">ByteArray</span>;<br/>\u00a0<br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> StringByteLength <span class=\"kw3\">extends</span> Sprite <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> StringByteLength<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw3\">stage</span> <span class=\"br0\">)</span> _init<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">else</span> addEventListener<span class=\"br0\">(</span>Event.<span class=\"me1\">ADDED_TO_STAGE</span>, _init<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">private</span> <span class=\"kw2\">function</span> _init<span class=\"br0\">(</span><span class=\"kw3\">e</span>:Event = <span class=\"kw2\">null</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">var</span> s1:<span class=\"kw3\">String</span> = <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>;<br/>            <span class=\"kw2\">var</span> s2:<span class=\"kw3\">String</span> = <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span>;<br/>            <span class=\"kw2\">var</span> s3:<span class=\"kw3\">String</span> = <span class=\"st0\">\"Jos\u00e9\"</span>;<br/>\u00a0<br/>            <span class=\"kw2\">var</span> b:ByteArray = <span class=\"kw2\">new</span> ByteArray<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>            b.<span class=\"me1\">writeUTFBytes</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>b.<span class=\"kw3\">length</span><span class=\"br0\">)</span>;  <span class=\"co1\">// 43</span><br/>\u00a0<br/>            b.<span class=\"kw3\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>            b.<span class=\"me1\">writeUTFBytes</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>b.<span class=\"kw3\">length</span><span class=\"br0\">)</span>;  <span class=\"co1\">// 28</span><br/>\u00a0<br/>            b.<span class=\"kw3\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>            b.<span class=\"me1\">writeUTFBytes</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>b.<span class=\"kw3\">length</span><span class=\"br0\">)</span>;  <span class=\"co1\">// 5</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 2, "block": "<pre class=\"ada highlighted_source\">Str   \u00a0: String\u00a0:= <span class=\"st0\">\"Hello World\"</span>;<br/>Length\u00a0: <span class=\"kw3\">constant</span> Natural\u00a0:= Str'Size / <span class=\"nu0\">8</span>;</pre>"}, {"lang": "Aime", "loc": 1, "block": "<pre class=\"text highlighted_source\">length(\"Hello, World!\")</pre>"}, {"lang": "ALGOL 68", "loc": 7, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">BITS</span> bits <span class=\"sy1\">:=</span> <span class=\"kw26\">bits pack</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># packed array of BOOL #</span><br/><span class=\"kw3\">BYTES</span> bytes <span class=\"sy1\">:=</span> <span class=\"kw26\">bytes pack</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, world\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># packed array of CHAR #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>  <span class=\"st0\">\"BITS and BYTES are fixed width:\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>  <span class=\"st0\">\"bits width:\"</span><span class=\"sy1\">,</span> <span class=\"kw20\">bits width</span><span class=\"sy1\">,</span> <span class=\"st0\">\", max bits: \"</span><span class=\"sy1\">,</span> max bits<span class=\"sy1\">,</span> <span class=\"st0\">\", bits:\"</span><span class=\"sy1\">,</span> bits<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>  <span class=\"st0\">\"bytes width: \"</span><span class=\"sy1\">,</span><span class=\"kw20\">bytes width</span><span class=\"sy1\">,</span> <span class=\"st0\">\", UPB:\"</span><span class=\"sy1\">,</span><span class=\"kw8\">UPB</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\", string:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\"!\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Apex", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String myString = 'abcd';<br/>System.debug('Size of String', myString.length());<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 1, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw1\">count</span> <span class=\"kw3\">of</span> <span class=\"st0\">\"Hello World\"</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">? LEN(\"HELLO, WORLD!\")</pre>"}, {"lang": "AutoHotkey", "loc": 1, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 4, "block": "<pre class=\"awk highlighted_source\">w=<span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, world!\"</span><span class=\"br0\">)</span>      <span class=\"co1\"># static string example</span><br/>x=<span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello,\"</span> s <span class=\"st0\">\" world!\"</span><span class=\"br0\">)</span> <span class=\"co1\"># dynamic string example</span><br/>y=<span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"br0\">)</span>                   <span class=\"co1\"># input field example</span><br/>z=<span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>                    <span class=\"co1\"># variable name example</span></pre>"}, {"lang": "Axe", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"HELLO, WORLD\"\u2192Str1<br/>Disp length(Str1)\u25b6Dec,i</pre>"}, {"lang": "Batch File", "loc": 17, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">length</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span> res<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> length of <span class=\"sy0\">%</span><span class=\"re3\">1</span> is <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">length</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str</span><span class=\"sy0\">%</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>=<span class=\"sy0\">%</span><span class=\"re3\">cnt</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">!</span><span class=\"re2\">str:~1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt = cnt + 1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop</pre>"}, {"lang": "BaCon", "loc": 8, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Bytelen of 'hello': \"</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Charlen of 'hello': \"</span><span class=\"sy0\">,</span> ULEN<span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Bytelen of 'm\u00f8\u00f8se': \"</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Charlen of 'm\u00f8\u00f8se': \"</span><span class=\"sy0\">,</span> ULEN<span class=\"br0\">(</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Bytelen of '\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22': \"</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Charlen of '\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22': \"</span><span class=\"sy0\">,</span> ULEN<span class=\"br0\">(</span><span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"qbasic highlighted_source\"> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> a$<br/> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>a$<span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      INPUT text$<br/>      PRINT LEN(text$)</pre>"}, {"lang": "Bracmat", "loc": 7, "block": "<pre class=\"text highlighted_source\">(ByteLength=<br/>  length<br/>.   @(!arg:? [?length)<br/>  &amp;\u00a0!length<br/>);<br/>\u00a0<br/>out$ByteLength$\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22</pre>"}, {"lang": "C", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>string <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">size_t</span> length <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 11, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt; // (not &lt;string.h&gt;!)</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  string s <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy4\">;</span><br/>  string<span class=\"sy4\">::</span><span class=\"me2\">size_type</span> length <span class=\"sy1\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// option 1: In Characters/Bytes</span><br/>  string<span class=\"sy4\">::</span><span class=\"me2\">size_type</span> size <span class=\"sy1\">=</span> s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>     <span class=\"co1\">// option 2: In Characters/Bytes</span><br/>  <span class=\"co1\">// In bytes same as above since sizeof(char) == 1</span><br/>  string<span class=\"sy4\">::</span><span class=\"me2\">size_type</span> bytes <span class=\"sy1\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>string<span class=\"sy4\">::</span><span class=\"me2\">value_type</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 2, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> characterLength <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clean", "loc": 6, "block": "<pre class=\"text highlighted_source\">import StdEnv<br/>\u00a0<br/>strlen\u00a0:: String -&gt; Int<br/>strlen string = size string <br/>\u00a0<br/>Start = strlen \"Hello, world!\"</pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> utf<span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"sy0\">-</span>octet<span class=\"sy0\">-</span>length #<span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>getBytes <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span> <span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> utf<span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"sy0\">-</span>octet<span class=\"sy0\">-</span>length  <span class=\"br0\">[</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span> <span class=\"st0\">\"J<span class=\"es0\">\\u</span>0332o<span class=\"es0\">\\u</span>0332s<span class=\"es0\">\\u</span>0332e<span class=\"es0\">\\u</span>0301<span class=\"es0\">\\u</span>0332\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; (7 28 14)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> utf<span class=\"sy0\">-</span><span class=\"nu0\">16</span><span class=\"sy0\">-</span>octet<span class=\"sy0\">-</span>length <span class=\"br0\">(</span>comp <span class=\"br0\">(</span>partial <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> utf<span class=\"sy0\">-</span><span class=\"nu0\">16</span><span class=\"sy0\">-</span>octet<span class=\"sy0\">-</span>length <span class=\"br0\">[</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span> <span class=\"st0\">\"J<span class=\"es0\">\\u</span>0332o<span class=\"es0\">\\u</span>0332s<span class=\"es0\">\\u</span>0332e<span class=\"es0\">\\u</span>0301<span class=\"es0\">\\u</span>0332\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; (10 28 18)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> code<span class=\"sy0\">-</span>unit<span class=\"sy0\">-</span>length <span class=\"kw1\">count</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> code<span class=\"sy0\">-</span>unit<span class=\"sy0\">-</span>length    <span class=\"br0\">[</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span> <span class=\"st0\">\"J<span class=\"es0\">\\u</span>0332o<span class=\"es0\">\\u</span>0332s<span class=\"es0\">\\u</span>0332e<span class=\"es0\">\\u</span>0301<span class=\"es0\">\\u</span>0332\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; (5 14 9)</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">FUNCTION</span> BYTE-<span class=\"kw4\">LENGTH</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span></pre>"}, {"lang": "ColdFusion", "loc": 8, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> j <span class=\"sy0\">=</span> <span class=\"kw5\">createObject</span><span class=\"br0\">(</span><span class=\"st0\">\"java\"</span>,<span class=\"st0\">\"java.lang.String\"</span><span class=\"br0\">)</span>.init<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> t <span class=\"sy0\">=</span> j.getBytes<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><a href=\"http://december.com/html/4/element/p.html\"><span class=\"kw2\">p</span></a><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#arrayLen<span class=\"br0\">(</span>t<span class=\"br0\">)</span>#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><a href=\"http://december.com/html/4/element/p.html\"><span class=\"kw2\">p</span></a><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>sb-ext<span class=\"sy0\">:</span><span class=\"me1\">string-to-octets</span> <span class=\"st0\">\"Hello W\u00f8rld\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 16, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> TestLen;<br/>\u00a0<br/>\t<span class=\"kw1\">IMPORT</span> Out;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> DoCharLength<span class=\"sy0\">*</span>;<br/>\t\t<span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">16</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>; len<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\ts <span class=\"sy0\">:=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span>;<br/>\t\tlen <span class=\"sy0\">:=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span>;<br/>\t\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"s: \"</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; Out.<span class=\"me1\">Ln</span>;<br/>\t\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Length of characters: \"</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>len<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> DoCharLength;<br/>\u00a0<br/><span class=\"kw1\">END</span> TestLen.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> showByteLen<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Byte length:\u00a0%2d -\u00a0%(%02x%)\"</span><span class=\"sy0\">,</span><br/>             str.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> T.<span class=\"me1\">sizeof</span><span class=\"sy0\">,</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> s1a <span class=\"sy0\">=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// UTF-8</span><br/>    showByteLen<span class=\"br0\">(</span>s1a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">wstring</span> s1b <span class=\"sy0\">=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// UTF-16</span><br/>    showByteLen<span class=\"br0\">(</span>s1b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">dstring</span> s1c <span class=\"sy0\">=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// UTF-32</span><br/>    showByteLen<span class=\"br0\">(</span>s1c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> s2a <span class=\"sy0\">=</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s2a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">wstring</span> s2b <span class=\"sy0\">=</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s2b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">dstring</span> s2c <span class=\"sy0\">=</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s2c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> s3a <span class=\"sy0\">=</span> <span class=\"st0\">\"J\u0332o\u0332s\u0332\u00e9\u0332\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s3a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">wstring</span> s3b <span class=\"sy0\">=</span> <span class=\"st0\">\"J\u0332o\u0332s\u0332\u00e9\u0332\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s3b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">dstring</span> s3c <span class=\"sy0\">=</span> <span class=\"st0\">\"J\u0332o\u0332s\u0332\u00e9\u0332\"</span><span class=\"sy0\">;</span><br/>    showByteLen<span class=\"br0\">(</span>s3c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">[abcde]Zp</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 2, "block": "<pre class=\"text highlighted_source\">!. len\u00a0!encode!utf-8 \"m\u00f8\u00f8se\"<br/>!. len\u00a0!encode!utf-8 \"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"st0\">\"Hello World\"</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 11, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var s\u00a0:= \"Hello, world!\". // UTF-8 literal<br/>    var ws\u00a0:= \"\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440!\"w.             // UTF-16 literal<br/>\u00a0<br/>    var s_length\u00a0:= s length.             // Number of UTF-8 characters<br/>    var ws_length\u00a0:= ws length.           // Number of UTF-16 characters<br/>    var u_length\u00a0:= ws toArray; length.    //Number of UTF-32 characters<br/>].</pre>"}, {"lang": "Elixir", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>name = \"J\\x{332}o\\x{332}s\\x{332}e\\x{301}\\x{332}\"<br/>byte_size(name)<br/># =&gt; 14<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>9&gt; U = \"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\".\n[120088,120107,120102,120096,120108,120097,120098]\n10&gt; erlang:length(U).\n7\n</pre>"}, {"lang": "Euphoria", "loc": 1, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span><br/><span class=\"kw1\">let</span> byte_length str <span class=\"sy0\">=</span> Encoding.<span class=\"me1\">UTF8</span>.<span class=\"me1\">GetByteCount</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">: string-byte-length ( string -- n ) [ code-point-length ] map-sum\u00a0;<br/>: string-byte-length-2 ( string -- n ) utf8 encode length\u00a0;</pre>"}, {"lang": "Fantom", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; c\u00a0:= \"m\u00f8\u00f8se\"<br/>m\u00f8\u00f8se<br/>fansh&gt; c.toBuf.size   // find the byte length of the string in default (UTF8) encoding<br/>7<br/>fansh&gt; c.toBuf.toHex  // display UTF8 representation<br/>6dc3b8c3b87365  <br/>fansh&gt; c.toBuf(Charset.utf16LE).size    // byte length in UTF16 little-endian<br/>10<br/>fansh&gt; c.toBuf(Charset.utf16LE).toHex   // display as UTF16 little-endian<br/>6d00f800f80073006500<br/>fansh&gt; c.toBuf(Charset.utf16BE).size    // byte length in UTF16 big-endian<br/>10<br/>fansh&gt; c.toBuf(Charset.utf16BE).toHex   // display as UTF16 big-endian<br/>006d00f800f800730065<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 3, "block": "<pre class=\"text highlighted_source\">CREATE s ,\" Hello world\" \\ create string \"s\"<br/>s <a class=\"__cf_email__\" data-cfemail=\"acefec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ( -- length=11 )<br/>s COUNT  ( addr len )   \\ convert to a stack string, described below</pre>"}, {"lang": "Fortran", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>      = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' variable length ascii string</span><br/><span class=\"kw1\">Dim</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>  * <span class=\"nu0\">5</span> = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' fixed length ascii string (in practice a zero byte is appended)</span><br/><span class=\"kw1\">Dim</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> * <span class=\"nu0\">6</span> = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' fixed length zero terminated ascii string </span><br/><span class=\"kw1\">Dim</span> w <span class=\"kw1\">As</span> WString * <span class=\"nu0\">6</span> = <span class=\"st0\">\"m\u00f8\u00f8se\"</span>  <span class=\"co1\">'' fixed length zero terminated unicode string</span><br/>\u00a0<br/><span class=\"co1\">' Variable length strings have a descriptor consisting of 3 Integers (12 bytes on 32 bit, 24 bytes on 64 bit systems)</span><br/><span class=\"co1\">' In order, the descriptor contains the address of the data, the memory currently used and the memory allocated</span><br/>\u00a0<br/><span class=\"co1\">' In Windows, WString uses UCS-2 encoding (i.e. 2 bytes per character, surrogates are not supported)</span><br/><span class=\"co1\">' In Linux,   WString uses UCS-4 encoding (i.e. 4 bytes per character) </span><br/>\u00a0<br/><span class=\"co1\">' The Len function always returns the length of the string in characters</span><br/><span class=\"co1\">' The SizeOf function returns the bytes used (by the descriptor in the case of variable length strings)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"s\u00a0: \"</span>\u00a0; s, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; <span class=\"st0\">\"  (data)\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"s\u00a0: \"</span>\u00a0; s, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; <span class=\"st0\">\" (descriptor)\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f\u00a0: \"</span>\u00a0; f, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"z\u00a0: \"</span>\u00a0; z, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"w\u00a0: \"</span>\u00a0; w, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FreeBASIC", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>      = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' variable length ascii string</span><br/><span class=\"kw1\">Dim</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>  * <span class=\"nu0\">5</span> = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' fixed length ascii string (in practice a zero byte is appended)</span><br/><span class=\"kw1\">Dim</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> * <span class=\"nu0\">6</span> = <span class=\"st0\">\"moose\"</span>  <span class=\"co1\">'' fixed length zero terminated ascii string </span><br/><span class=\"kw1\">Dim</span> w <span class=\"kw1\">As</span> WString * <span class=\"nu0\">6</span> = <span class=\"st0\">\"m\u00f8\u00f8se\"</span>  <span class=\"co1\">'' fixed length zero terminated unicode string</span><br/>\u00a0<br/><span class=\"co1\">' Variable length strings have a descriptor consisting of 3 Integers (12 bytes on 32 bit, 24 bytes on 64 bit systems)</span><br/><span class=\"co1\">' In order, the descriptor contains the address of the data, the memory currently used and the memory allocated</span><br/>\u00a0<br/><span class=\"co1\">' In Windows, WString uses UCS-2 encoding (i.e. 2 bytes per character, surrogates are not supported)</span><br/><span class=\"co1\">' In Linux,   WString uses UCS-4 encoding (i.e. 4 bytes per character) </span><br/>\u00a0<br/><span class=\"co1\">' The Len function always returns the length of the string in characters</span><br/><span class=\"co1\">' The SizeOf function returns the bytes used (by the descriptor in the case of variable length strings)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"s\u00a0: \"</span>\u00a0; s, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; <span class=\"st0\">\"  (data)\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"s\u00a0: \"</span>\u00a0; s, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; <span class=\"st0\">\" (descriptor)\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f\u00a0: \"</span>\u00a0; f, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"z\u00a0: \"</span>\u00a0; z, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"w\u00a0: \"</span>\u00a0; w, <span class=\"st0\">\"Character Length\u00a0: \"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>, <span class=\"st0\">\"Byte Length\u00a0: \"</span>; <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 3, "block": "<pre class=\"text highlighted_source\">Length(\"abc\");<br/># or same result with<br/>Size(\"abc\");</pre>"}, {"lang": "Gnuplot", "loc": 2, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"kw1\">print</span> <span class=\"kw4\">strlen</span><span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><br/>    u <span class=\"sy2\">:=</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"</span><br/>    j <span class=\"sy2\">:=</span> <span class=\"st0\">\"J\u0332o\u0332s\u0332\u00e9\u0332\"</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%d\u00a0%s\u00a0% x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">),</span> m<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d\u00a0%s\u00a0%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>u<span class=\"sy1\">),</span> u<span class=\"sy1\">,</span> u<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d\u00a0%s\u00a0% x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>j<span class=\"sy1\">),</span> j<span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Hello World!\"</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "GW-BASIC", "loc": 2, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> A$<br/><span class=\"co3\">20</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>A$<span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Encoding<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"kw1\">as</span> B<br/>\u00a0<br/>strUTF8  <span class=\"sy0\">::</span> ByteString <br/>strUTF8  <span class=\"sy0\">=</span> encode UTF8  <span class=\"st0\">\"Hello World!\"</span><br/>\u00a0<br/>strUTF32 <span class=\"sy0\">::</span> ByteString <br/>strUTF32 <span class=\"sy0\">=</span> encode UTF32 <span class=\"st0\">\"Hello World!\"</span><br/>\u00a0<br/>strlenUTF8  <span class=\"sy0\">=</span> B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> strUTF8<br/>strlenUTF32 <span class=\"sy0\">=</span> B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> strUTF32</pre>"}, {"lang": "HicEst", "loc": 1, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">LEN</span><span class=\"br0\">(</span><span class=\"st0\">\"1 character == 1 byte\"</span><span class=\"br0\">)</span> <span class=\"co1\">! 21</span></pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"icon highlighted_source\">   length <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>s</pre>"}, {"lang": "HolyC", "loc": 3, "block": "<pre class=\"text highlighted_source\">U8 *string = \"Hello, world!\";<br/>Print(\"%d\\n\", StrLen(string));<br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">length <span class=\"sy0\">=</span> strlen<span class=\"br0\">(</span><span class=\"st0\">\"Hello, world!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"st0\">\"m\u00f8\u00f8se\"</span> sizeInBytes</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   #     <span class=\"st_h\">'m\u00f8\u00f8se'</span><br/><span class=\"nu0\">7</span></pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java5 highlighted_source\"><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s = <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy0\">;</span> <br/><span class=\"kw3\">int</span> byteCountUTF16 = s.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"UTF-16\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// Incorrect: it yields 28 (that is with the BOM)</span><br/><span class=\"kw3\">int</span> byteCountUTF16LE = s.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"UTF-16LE\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// Correct: it yields 26</span><br/><span class=\"kw3\">int</span> byteCountUTF8  = s.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// yields 13 </span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> byteCount <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">//26</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">$ cat String_length.jq<br/>def describe:<br/>   \"length of \\(.) is \\(length)\";<br/>\u00a0<br/>(\"J\u0332o\u0332s\u0332\u00e9\u0332\", \"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\") | describe</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Jos\u00e9\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The char length is ${s.length}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The byte length is ${Character.BYTES * s.length}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">sizeof(\"Hello, world!\") # gives 13<br/>sizeof(\"Hell\u00f6, w\u00f8rld!\") # gives 15</pre>"}, {"lang": "JudoScript", "loc": 2, "block": "<pre class=\"text highlighted_source\">//Store length of hello world in length and print it<br/>. length = \"Hello World\".length();</pre>"}, {"lang": "K", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    #\"Hello, world!\"<br/>13<br/>    #\"H\u00ebllo, world!\"<br/>13<br/>\u00a0</pre>"}, {"lang": "LabVIEW", "loc": 3, "block": "<pre class=\"text highlighted_source\">'Hello, world!'-&gt;size // 13<br/>'m\u00f8\u00f8se'-&gt;size // 5<br/>'\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22'-&gt;size // 7</pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">'Hello, world!'-&gt;size // 13<br/>'m\u00f8\u00f8se'-&gt;size // 5<br/>'\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22'-&gt;size // 7</pre>"}, {"lang": "LFE", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"st0\">\"ASCII text\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">10</span><br/><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22 \ud835\udd17\ud835\udd22\ud835\udc99\ud835\udd31\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">12</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> encoded <span class=\"br0\">(</span>binary <span class=\"br0\">(</span><span class=\"st0\">\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22 \ud835\udd17\ud835\udd22\ud835\udc99\ud835\udd31\"</span> utf8<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#B<span class=\"br0\">(</span><span class=\"nu0\">240</span> <span class=\"nu0\">157</span> <span class=\"nu0\">148</span> <span class=\"nu0\">152</span> <span class=\"nu0\">240</span> <span class=\"nu0\">157</span> <span class=\"nu0\">148</span> <span class=\"nu0\">171</span> <span class=\"nu0\">240</span> <span class=\"nu0\">157</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>unicode<span class=\"sy0\">:</span><span class=\"me1\">characters_to_list</span> encoded 'utf8<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">12</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">utf8Str = \"Hello world \u00e4\u00f6\u00fc\"<br/>put utf8Str.length<br/>-- 15</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">utf8Str = \"Hello world \u00e4\u00f6\u00fc\"<br/>put utf8Str.length<br/>-- 15</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">print count \"|Hello World| \u00a0; 11<br/>print count \"m\u00f8\u00f8se           \u00a0; 5<br/>print char 248  \u00a0; \u00f8 - implies ISO-Latin character set</pre>"}, {"lang": "LSE64", "loc": 1, "block": "<pre class=\"text highlighted_source\">\" Hello world\" @ 1 + 8 * ,   # 96 = (11+1)*(size of a cell) = 12*8</pre>"}, {"lang": "Lua", "loc": 2, "block": "<pre class=\"lua highlighted_source\">str <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello world\"</span><br/>length <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>str</pre>"}, {"lang": "M2000 Interpreter", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>A$=format$(\"J\\u0332o\\u0332s\\u0332e\\u0301\\u0332\")<br/>Print Len(A$) = 9  ' true Utf-16LE<br/>Print Len.Disp(A$) = 4 \\\\ display length<br/>Buffer Clear Mem as Byte*100<br/>\\\\ Write at memory at offset 0 or address Mem(0)<br/>Return Mem, 0:=A$<br/>Print Eval$(Mem, 0, 18)<br/>For i=0 to 17 step 2<br/>      \\\\ print hex value and character<br/>      Hex Eval(Mem, i as integer), ChrCode$(Eval(Mem, i as integer))<br/>Next i<br/>Document B$=A$<br/>\\\\ encode to utf-8 with BOM (3 bytes 0xEF,0xBB,0xBF)<br/>Save.Doc B$, \"Checklen.doc\", 2<br/>Print Filelen(\"Checklen.doc\")=17<br/>\\\\ So length is 14 bytes + 3 the BOM<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">length(\"Hello world\");</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringLength[\"Hello world\"]</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><span class=\"co2\">'m\u00f8\u00f8se'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">5</span></pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">s: \"the quick brown fox jumps over the lazy dog\";<br/>slength(s);<br/>/* 43 */</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"Hello world\".count</pre>"}, {"lang": "Mercury", "loc": 20, "block": "<pre class=\"text highlighted_source\">:- module string_byte_length.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    Words = [\"m\u00f8\u00f8se\", \"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\", \"J\\x332\\o\\x332\\s\\x332\\e\\x301\\\\x332\\\"],<br/>    io.write_list(Words, \"\", write_length,\u00a0!IO).<br/>\u00a0<br/>:- pred write_length(string::in, io::di, io::uo) is det.<br/>\u00a0<br/>write_length(String,\u00a0!IO):-<br/>    NumBytes = count_utf8_code_units(String),<br/>    io.format(\"%s:\u00a0%d bytes\\n\", [s(String), i(NumBytes)],\u00a0!IO).</pre>"}, {"lang": "Metafont", "loc": 6, "block": "<pre class=\"text highlighted_source\">string s;<br/>s\u00a0:= \"Hello Moose\";<br/>show length(s);         \u00a0% 11 (ok)<br/>s\u00a0:= \"Hello M\u00f8\u00f8se\";<br/>show length(s);         \u00a0% 13 (number of bytes when the string is UTF-8 encoded,<br/>                        \u00a0% since \u00f8 takes two bytes)</pre>"}, {"lang": "MIPS Assembly", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.data <br/>\t#.asciiz automatically adds the NULL terminator character, \\0 for us.<br/>\tstring: .asciiz \"Nice string you got there!\"<br/>\u00a0<br/>.text<br/>main:<br/>\tla $a1,string           #load the beginning address of the string.<br/>\u00a0<br/>loop:<br/>\tlb $a2,($a1)            #load byte (i.e. the char) at $a1 into $a2<br/>\taddi $a1,$a1,1          #increment $a1<br/>\tbeqz $a2,exit_procedure #see if we've hit the NULL char yet<br/>\taddi $a0,$a0,1          #increment counter<br/>\tj loop                  #back to start<br/>\u00a0<br/>exit_procedure:<br/>\tli $v0,1                #set syscall to print integer<br/>\tsyscall                 <br/>\u00a0<br/>\tli $v0,10               #set syscall to cleanly exit EXIT_SUCCESS<br/>\tsyscall<br/>\u00a0</pre>"}, {"lang": "mIRC Scripting Language", "loc": 1, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw1\">alias</span> stringlength <span class=\"br0\">{</span> <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-a</span> Your Name is: <span class=\"re0\">$len</span><span class=\"br0\">(</span>$$?=\"Whats your name\"<span class=\"br0\">)</span> letters long! <span class=\"br0\">}</span></pre>"}, {"lang": "Modula-3", "loc": 9, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> ByteLength <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Text;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"Foo bar baz\"</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Byte length of s: \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">BYTESIZE</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> ByteLength.</pre>"}, {"lang": "NewLISP", "loc": 2, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#set\"><span class=\"kw1\">set</span></a> <span class=\"re5\">'Str</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a>  Str  <span class=\"st0\">\" is \"</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> Str<span class=\"br0\">)</span> <span class=\"st0\">\" characters long\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">def message = \"How long am I anyways?\";<br/>def charlength = message.Length;</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">var s: string = \"Hello, world! \u263a\"<br/>echo '\"',s, '\"',\" has byte length: \", len(s)<br/>\u00a0<br/># -&gt;  \"Hello, world! \u263a\" has unicode char length: 17</pre>"}, {"lang": "Oberon-2", "loc": 14, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> Size;<br/>\u00a0<br/>   <span class=\"kw1\">IMPORT</span> Out;<br/>\u00a0<br/>   <span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>      string<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">5</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span> <br/>   string <span class=\"sy0\">:=</span> <span class=\"st0\">\"Foo\"</span>;<br/>   s <span class=\"sy0\">:=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span>;<br/>   Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Size: \"</span><span class=\"br0\">)</span>;<br/>   Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Out.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> Size.</pre>"}, {"lang": "Objective-C", "loc": 3, "block": "<pre class=\"objc highlighted_source\"><span class=\"co2\">// Return the length in characters</span><br/><span class=\"co2\">// XXX: does not (always) count Unicode characters (code points)! </span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> numberOfCharacters <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"m\u00f8\u00f8se\"</span> length<span class=\"br0\">]</span>;  <span class=\"co2\">// 5</span></pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"st0\">\"Foo\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length <span class=\"st0\">\"Hello world\"</span> <span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 2, "block": "<pre class=\"octave highlighted_source\">s <span class=\"sy3\">=</span> <span class=\"co4\">\"string\"</span><span class=\"sy5\">;</span><br/>stringlen <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; Character length<br/>(print (string-length \"Hello, w\u00f8rld!\"))<br/>; ==&gt; 13<br/>\u00a0<br/>; Byte (utf-8 encoded) length<br/>(print (length (string-&gt;bytes \"Hello, w\u00f8rld!\")))<br/>; ==&gt; 14<br/>\u00a0</pre>"}, {"lang": "Ol", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; Character length<br/>(print (string-length \"Hello, w\u00f8rld!\"))<br/>; ==&gt; 13<br/>\u00a0<br/>; Byte (utf-8 encoded) length<br/>(print (length (string-&gt;bytes \"Hello, w\u00f8rld!\")))<br/>; ==&gt; 14<br/>\u00a0</pre>"}, {"lang": "OpenEdge/Progress", "loc": 6, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> lcc <span class=\"kw3\">AS</span> <span class=\"kw4\">LONGCHAR</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FIX-CODEPAGE</span><span class=\"br0\">(</span> lcc <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">.</span><br/>lcc <span class=\"sy0\">=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> <span class=\"kw3\">LENGTH</span><span class=\"br0\">(</span> lcc <span class=\"br0\">)</span> <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Length <span class=\"st0\">\"Hello World\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">len<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span>#s<span class=\"sy0\">;</span> <span class=\"co1\">\\\\ Alternately, len(s)=length(s); or even len=length;</span></pre>"}, {"lang": "Pascal", "loc": 7, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">const</span> <br/>  s <span class=\"sy3\">=</span> <span class=\"st0\">'abcdef'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span> <span class=\"co1\"># so we can use literal characters like \u263a in source</span><br/><span class=\"kw2\">use</span> Encode <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>encode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> encode <span class=\"st_h\">'UTF-8'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello, world! \u263a\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># 17. The last character takes 3 bytes, the others 1 byte each.</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> encode <span class=\"st_h\">'UTF-16'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello, world! \u263a\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># 32. 2 bytes for the BOM, then 15 byte pairs for each character.</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"st_h\">'m\u00f8\u00f8se'</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"br0\">(</span><span class=\"st_h\">'UTF-8'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">bytes</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">constant s = \"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"<br/>?length(s)</pre>"}, {"lang": "PHP", "loc": 6, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'m\u00f8\u00f8se'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'J\u0332o\u0332s\u0332\u00e9\u0332'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$s1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>   <a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st_h\">'String \"%s\" measured with strlen:\u00a0%d mb_strlen:\u00a0%s grapheme_strlen\u00a0%s%s'</span><span class=\"sy0\">,</span> <br/>                  <span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/mb_strlen\"><span class=\"kw3\">mb_strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> grapheme_strlen<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> PHP_EOL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(let Str \"m\u00f8\u00f8se\"<br/>   (prinl \"Character Length of \\\"\" Str \"\\\" is \" (length Str))<br/>   (prinl \"Byte Length of \\\"\" Str \"\\\" is \" (size Str)) )</pre>"}, {"lang": "PL/I", "loc": 7, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">declare</span> WS <span class=\"kw1\">widechar</span> <span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'Hello world.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">'Character length='</span><span class=\"sy0\">,</span> <span class=\"kw1\">length</span> <span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Byte length='</span><span class=\"sy0\">,</span> <span class=\"kw1\">size</span><span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">declare</span> SM <span class=\"kw1\">graphic</span> <span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'Hello world'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">'Character length='</span><span class=\"sy0\">,</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>SM<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Byte length='</span><span class=\"sy0\">,</span> <span class=\"kw1\">size</span><span class=\"br0\">(</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>SM<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/SQL", "loc": 6, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DECLARE\"><span class=\"kw1\">DECLARE</span></a><br/>  string <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Hello, world!'</span><span class=\"sy0\">;</span><br/>  stringlength <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  stringlength <span class=\"sy0\">:=</span> LENGTHB<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 2, "block": "<pre class=\"text highlighted_source\">lvars str = 'Hello, world!';<br/>lvars len = length(str);</pre>"}, {"lang": "PostScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(Hello World) length =<br/>11<br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 3, "block": "<pre class=\"text highlighted_source\">\"m\u00f8\u00f8se\" length print<br/>\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\" length print<br/>\"J\u0332o\u0332s\u0332\u00e9\u0332\" length print</pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"H\u00ebll\u00f3 W\u00f8r\u0142\u00f0\"</span><br/><span class=\"re0\">$s</span>.Length</pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\"> a <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span> <span class=\"co1\">;a will be 11</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">print</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"st0\">'ascii'</span><span class=\"br0\">)</span><br/><span class=\"co1\"># 5</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"rsplus highlighted_source\">a <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"m<span class=\"es0\">\\u</span>00f8<span class=\"es0\">\\u</span>00f8se\"</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/print.html\"><span class=\"kw2\">print</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/nchar.html\"><span class=\"kw2\">nchar</span></a><span class=\"br0\">(</span>a, type<span class=\"sy0\">=</span><span class=\"st0\">\"bytes\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># print 7</span></pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(define str \"J\\u0332o\\u0332s\\u0332e\\u0301\\u0332\")</pre>"}, {"lang": "REBOL", "loc": 5, "block": "<pre class=\"rebol highlighted_source\"><span class=\"co1\">;; r2</span><br/><span class=\"kw3\">length?</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><br/>\u00a0<br/><span class=\"co1\">;; r3</span><br/><span class=\"kw3\">length?</span> <span class=\"kw3\">to-binary</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"m\u00f8\u00f8se\" getLength putn</pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the lengths  (in bytes/characters)  for various strings.        */</span><br/>    <span class=\"coMULTI\">/*            1         */</span>                         <span class=\"coMULTI\">/*a handy-dandy over/under scale.*/</span><br/>    <span class=\"coMULTI\">/*   123456789012345    */</span><br/>hello = <span class=\"st0\">'Hello, world!'</span>     \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of HELLO is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>hello<span class=\"br0\">)</span><br/>happy = <span class=\"st0\">'Hello, world! \u263a'</span>   \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of HAPPY is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>happy<span class=\"br0\">)</span><br/>jose  = <span class=\"st0\">'Jos\u00e9'</span>              \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of  JOSE is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>jose<span class=\"br0\">)</span><br/>nill  = <span class=\"st0\">''</span>                  \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of  NILL is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>nill<span class=\"br0\">)</span><br/>null  =                     \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of  NULL is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>null<span class=\"br0\">)</span><br/>sum   = <span class=\"nu0\">5</span>+<span class=\"nu0\">1</span>                 \u00a0;        <span class=\"kw1\">say</span>  <span class=\"st0\">'the length of   SUM is '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/>                                                       <span class=\"coMULTI\">/*   [\u2191]  is, of course,  6.     */</span><br/>                                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"Welcome to the Ring Programming Language\"<br/>aStringSize = len(aString)<br/>see  \"Character lenghts\u00a0: \" + aStringSize<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"\u3042\u3044\u3046\u3048\u304a\"</span>.<span class=\"me1\">bytesize</span><br/><span class=\"co1\"># =&gt; 15</span></pre>"}, {"lang": "Run BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">input a$<br/>print len(a$)</pre>"}, {"lang": "SAS", "loc": 5, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>   a=<span class=\"st0\">\"Hello, World!\"</span>;<br/>   b=<span class=\"kw3\">length</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">put</span> <span class=\"kw1\">_all_</span>;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    let s = \"\u6587\u5b57\u5316\u3051\";  // UTF-8<br/>    println!(\"Byte Length: {}\", s.len());<br/>}<br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>size <span class=\"st0\">\"Hello world\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre class=\"text highlighted_source\">length(\"Hello, world!\")</pre>"}, {"lang": "SETL", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span># <span class=\"st0\">\"Hello, world!\"</span><span class=\"br0\">)</span>; <span class=\"co1\">-- '#' is the cardinality operator. Works on strings, tuples, and sets.</span></pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">var str = <span class=\"st0\">\"J<span class=\"es0\">\\x</span>{332}o<span class=\"es0\">\\x</span>{332}s<span class=\"es0\">\\x</span>{332}e<span class=\"es0\">\\x</span>{301}<span class=\"es0\">\\x</span>{332}\"</span>;</pre>"}, {"lang": "Simula", "loc": 1, "block": "<pre>m\u00f8\u00f8se\n\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\nJ\u0332o\u0332s\u0332\u00e9\u0332\n\u20ac\n</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> StringLength <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"m\u00f8\u00f8se\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s3 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD18</span>\"</span>, <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD2B</span>\"</span>, <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD26</span>\"</span>,<br/>    <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD20</span>\"</span>, <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD2C</span>\"</span>, <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD21</span>\"</span>, <span class=\"st0\">\"<span class=\"es3\">\\uD835</span><span class=\"es3\">\\uDD22</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s4 <span class=\"sy0\">=</span> <span class=\"st0\">\"J<span class=\"es3\">\\u0332</span>o<span class=\"es3\">\\u0332</span>s<span class=\"es3\">\\u0332</span>e<span class=\"es3\">\\u0301</span><span class=\"es3\">\\u0332</span>\"</span><br/>\u00a0<br/>    List<span class=\"br0\">(</span>s1, s3, s4<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><br/>        s<span class=\"st0\">\"The string: $s, characterlength= ${s.length} UTF8bytes= ${<br/>      s.getBytes(\"</span>UTF-<span class=\"nu0\">8</span><span class=\"st0\">\").size<br/>    } UTF16bytes= ${s.getBytes(\"</span>UTF-16LE<span class=\"st0\">\").size}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">'Hello, world!' length.</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">string</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Hello, world!'</span>.<br/><span class=\"re5\">string</span> size.</pre>"}, {"lang": "SNOBOL4", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\toutput = \"Byte length: \" size(trim(input))<br/>end<br/>\u00a0</pre>"}, {"lang": "Sparkling", "loc": 2, "block": "<pre class=\"text highlighted_source\">spn:1&gt; sizeof \"Hello, w\u00f8rld!\"<br/>= 14</pre>"}, {"lang": "SPL", "loc": 24, "block": "<pre class=\"text highlighted_source\">t = [\"abc\",\"J\u0332o\u0332s\u0332\u00e9\u0332\",\"m\u00f8\u00f8se\",\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\"]<br/>\u00a0<br/>&gt; i, 1..#.size(t,1)<br/> \u00a0? i&gt;1, #.output()<br/>  #.output(#.quot,t[i],#.quot,\" contains\")<br/>\u00a0<br/>  p = #.split(t[i])<br/>  cn = #.size(p,1)<br/>  s = #.str(cn,\"&gt;3&gt;\")+\" chars: \"<br/>  &gt; j, 1..cn<br/>   \u00a0? j&gt;1, s += \", \"<br/>    s += p[j]<br/>  &lt;<br/>  #.output(s)<br/>\u00a0<br/>  q = #.array(t[i])<br/>  bn = #.size(q,1)<br/>  s = #.str(bn,\"&gt;3&gt;\")+\" bytes: \"<br/>  &gt; j, 1..bn<br/>   \u00a0? j&gt;1, s += \", \"<br/>    s += #.str(q[j],\"X2\")+\"h\"<br/>  &lt;<br/>  #.output(s)<br/>&lt;</pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"text highlighted_source\">val strlen = size \"Hello, world!\";</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">val strlen = size \"Hello, world!\";</pre>"}, {"lang": "Stata", "loc": 3, "block": "<pre class=\"text highlighted_source\">scalar s=\"\u1f18\u03bd \u1f00\u03c1\u03c7\u1fc7 \u1f10\u03c0\u03bf\u03af\u03b7\u03c3\u03b5\u03bd \u1f41 \u03b8\u03b5\u1f78\u03c2 \u03c4\u1f78\u03bd \u03bf\u1f50\u03c1\u03b1\u03bd\u1f78\u03bd \u03ba\u03b1\u1f76 \u03c4\u1f74\u03bd \u03b3\u1fc6\u03bd\"<br/>di strlen(s)<br/>di ustrlen(s)</pre>"}, {"lang": "Swift", "loc": 1, "block": "<pre class=\"text highlighted_source\">let numberOfCharacters = \"m\u00f8\u00f8se\".characters.count  // 5</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">string</span> length <span class=\"br0\">[</span>encoding convertto utf-<span class=\"nu0\">8</span> <span class=\"re0\">$theString</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u25a0 dim(\"m\u00f8\u00f8se\")              5</pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre class=\"text highlighted_source\">\" hello, world!\" string.getLength</pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"m\u00f8\u00f8se\" length</pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>string=\"hello, world\"<br/>l=LENGTH (string)<br/>PRINT \"character length of string '\",string,\"': \",l<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">string</span>=<span class=\"st_h\">'Hello, world!'</span><br/><span class=\"re2\">length</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"st0\">\"x<span class=\"es2\">$string</span>\"</span>\u00a0: <span class=\"st_h\">'.*'</span> - <span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/><span class=\"kw3\">echo</span> <span class=\"re1\">$length</span> <span class=\"co0\"># if you want it printed to the terminal</span></pre>"}, {"lang": "Vala", "loc": 4, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, world!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> characterLength <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 1, "block": "<pre class=\"text highlighted_source\">LenB(string|varname)</pre>"}, {"lang": "VBScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">LenB(string|varname)</pre>"}, {"lang": "Visual Basic", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.data<br/>string:         .asciz \"Test\"<br/>\u00a0<br/>.text<br/>.globl  main<br/>\u00a0<br/>main:<br/>        pushl  \u00a0%ebp<br/>        movl   \u00a0%esp,\u00a0%ebp<br/>\u00a0<br/>        pushl  \u00a0%edi<br/>        xorb   \u00a0%al,\u00a0%al<br/>        movl    $-1,\u00a0%ecx<br/>        movl    $string,\u00a0%edi<br/>        cld<br/>        repne   scasb<br/>        not    \u00a0%ecx<br/>        dec    \u00a0%ecx<br/>        popl   \u00a0%edi<br/>\u00a0<br/>       \u00a0;; string length is stored in\u00a0%ecx register                                                                                                                  <br/>\u00a0<br/>        leave<br/>        ret<br/>\u00a0</pre>"}, {"lang": "x86 Assembly", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.data<br/>string:         .asciz \"Test\"<br/>\u00a0<br/>.text<br/>.globl  main<br/>\u00a0<br/>main:<br/>        pushl  \u00a0%ebp<br/>        movl   \u00a0%esp,\u00a0%ebp<br/>\u00a0<br/>        pushl  \u00a0%edi<br/>        xorb   \u00a0%al,\u00a0%al<br/>        movl    $-1,\u00a0%ecx<br/>        movl    $string,\u00a0%edi<br/>        cld<br/>        repne   scasb<br/>        not    \u00a0%ecx<br/>        dec    \u00a0%ecx<br/>        popl   \u00a0%edi<br/>\u00a0<br/>       \u00a0;; string length is stored in\u00a0%ecx register                                                                                                                  <br/>\u00a0<br/>        leave<br/>        ret<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 2, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>IntOut(0, StrLen(\"Character length = Byte length = String length = \"))</pre>"}, {"lang": "XSLT", "loc": 1, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;?xml</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">encoding</span>=<span class=\"st0\">\"UTF-8\"</span><span class=\"re2\">?&gt;</span></span></pre>"}, {"lang": "xTalk", "loc": 1, "block": "<pre class=\"text highlighted_source\">put the length of \"Hello World\"</pre>"}, {"lang": "Wren", "loc": 4, "block": "<pre class=\"text highlighted_source\">System.print(\"m\u00f8\u00f8se\".bytes.count)<br/>System.print(\"\ud835\udd18\ud835\udd2b\ud835\udd26\ud835\udd20\ud835\udd2c\ud835\udd21\ud835\udd22\".bytes.count)<br/>System.print(\"J\u0332o\u0332s\u0332\u00e9\u0332\".bytes.count)<br/>\u00a0</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre class=\"text highlighted_source\">strlen(\"Hello, world!\")</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"abc\".len() //--&gt;3<br/>\"\\ufeff\\u00A2 \\u20ac\".len() //--&gt;9 \"BOM\u00a2 \u20ac\"</pre>"}]}