{"task": "Set", "blocks": [{"lang": "Ada", "loc": 55, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Set_Demo <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> CS <span class=\"kw1\">is</span> <span class=\"kw3\">new</span>  Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> CS;<br/>   <span class=\"kw3\">package</span> IO <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- helper functions for string to something conversion, and vice versa</span><br/>        <span class=\"kw3\">function</span> To_Set<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set <span class=\"kw1\">is</span><br/>           Result: Set;<br/>        <span class=\"kw1\">begin</span><br/>           <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> S'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>              <span class=\"kw1\">begin</span><br/>                 Result.<span class=\"me1\">Insert</span><span class=\"br0\">(</span>S<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                 <span class=\"co1\">-- raises Constraint_Error if S(I) is already in Result</span><br/>              <span class=\"kw1\">exception</span><br/>                 <span class=\"kw3\">when</span> Constraint_Error =&gt; <span class=\"kw3\">null</span>;<br/>              <span class=\"kw1\">end</span>;<br/>           <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>           <span class=\"kw1\">return</span> Result;<br/>        <span class=\"kw1\">end</span> To_Set;<br/>\u00a0<br/>        <span class=\"kw3\">function</span> Image<span class=\"br0\">(</span>S: Set<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>           C: Character;<br/>           T: Set\u00a0:= S;<br/>        <span class=\"kw1\">begin</span><br/>           <span class=\"kw1\">if</span> T.<span class=\"me1\">Is_Empty</span> <span class=\"kw1\">then</span><br/>              <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>;<br/>           <span class=\"kw1\">else</span><br/>              C:= T.<span class=\"me1\">First_Element</span>;<br/>              T.<span class=\"me1\">Delete_First</span>;<br/>              <span class=\"kw1\">return</span> C &amp; Image<span class=\"br0\">(</span>T<span class=\"br0\">)</span>;<br/>           <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>        <span class=\"kw1\">end</span> Image;<br/>\u00a0<br/>        <span class=\"kw3\">function</span> Image<span class=\"br0\">(</span>C: Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Count_Type</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw3\">renames</span><br/>          Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Count_Type</span>'Image;<br/>\u00a0<br/>   S1, S2: Set;<br/><span class=\"kw1\">begin</span> <span class=\"co1\">-- main program</span><br/>   <span class=\"kw1\">loop</span><br/>      S1\u00a0:= To_Set<span class=\"br0\">(</span>Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> S1 = To_Set<span class=\"br0\">(</span><span class=\"st0\">\"quit!\"</span><span class=\"br0\">)</span>;<br/>      S2\u00a0:= To_Set<span class=\"br0\">(</span>Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Sets [\"</span> &amp; Image<span class=\"br0\">(</span>S1<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"], [\"</span> &amp; Image<span class=\"br0\">(</span>S2<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"] of size\"</span><br/>                    &amp; Image<span class=\"br0\">(</span>S1.<span class=\"me1\">Length</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" and\"</span> &amp; Image<span class=\"br0\">(</span>S2.<span class=\"me1\">Length</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Intersection:   [\"</span> &amp; Image<span class=\"br0\">(</span>Intersection<span class=\"br0\">(</span>S1, S2<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"],\"</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Union:          [\"</span> &amp; Image<span class=\"br0\">(</span>Union<span class=\"br0\">(</span>S1, S2<span class=\"br0\">)</span><span class=\"br0\">)</span>        &amp; <span class=\"st0\">\"],\"</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Difference:     [\"</span> &amp; Image<span class=\"br0\">(</span>Difference<span class=\"br0\">(</span>S1, S2<span class=\"br0\">)</span><span class=\"br0\">)</span>   &amp; <span class=\"st0\">\"],\"</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Symmetric Diff: [\"</span> &amp; Image<span class=\"br0\">(</span>S1 <span class=\"kw2\">xor</span> S2<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"],\"</span><span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Subset: \"</span>  &amp; Boolean'Image<span class=\"br0\">(</span>S1.<span class=\"me1\">Is_Subset</span><span class=\"br0\">(</span>S2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  &amp; <span class=\"st0\">\", Equal: \"</span> &amp; Boolean'Image<span class=\"br0\">(</span>S1 = S2<span class=\"br0\">)</span> &amp; <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Set_Demo;<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 81, "block": "<pre class=\"text highlighted_source\">record<br/>union(record a, record b)<br/>{<br/>    record c;<br/>    r_copy(c, a);<br/>    r_wcall(b, r_add, 1, 2, c);<br/>    return c;<br/>}<br/>\u00a0<br/>record<br/>intersection(record a, record b)<br/>{<br/>    record c;<br/>    text s;<br/>    for (s in a) {<br/>        if (r_key(b, s)) {<br/>            c[s] = 0;<br/>        }<br/>    }<br/>    return c;<br/>}<br/>\u00a0<br/>record<br/>difference(record a, record b)<br/>{<br/>    record c;<br/>    r_copy(c, a);<br/>    r_vcall(b, r_resign, 1, c);<br/>    return c;<br/>}<br/>\u00a0<br/>integer<br/>subset(record a, record b)<br/>{<br/>    integer e;<br/>    text s;<br/>    e = 1;<br/>    for (s in a) {<br/>        if (!r_key(b, s)) {<br/>            e = 0;<br/>            break;<br/>        }<br/>    }<br/>    return e;<br/>}<br/>\u00a0<br/>integer<br/>equal(record a, record b)<br/>{<br/>    return subset(a, b) &amp;&amp; subset(b, a);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    record a, b;<br/>    text s;<br/>\u00a0<br/>    r_fit(a, \"apple\", 0, \"cherry\", 0, \"grape\", 0);<br/>    r_fit(b, \"banana\", 0, \"cherry\", 0, \"date\", 0);<br/>\u00a0<br/>    s = \"banana\";<br/>\u00a0<br/>    o_(\" \", s, \" is \", r_key(a, s)\u00a0? \"\"\u00a0: \"not \", \"an element of A\\n\");<br/>    o_(\" \", s, \" is \", r_key(b, s)\u00a0? \"\"\u00a0: \"not \", \"an element of B\\n\");<br/>\u00a0<br/>    r_vcall(union(a, b), o_, 1, \" \");<br/>    o_newline();<br/>\u00a0<br/>    r_vcall(intersection(a, b), o_, 1, \" \");<br/>    o_newline();<br/>\u00a0<br/>    r_vcall(difference(a, b), o_, 1, \" \");<br/>    o_newline();<br/>\u00a0<br/>    o_(\" \", subset(a, b)\u00a0? \"yes\"\u00a0: \"no\", \"\\n\");<br/>\u00a0<br/>    o_(\" \", equal(a, b)\u00a0? \"yes\"\u00a0: \"no\", \"\\n\");<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "Apex", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>public class MySetController{<br/>    public Set&lt;String&gt; strSet {get; private set; }<br/>    public Set&lt;Id&gt; idSet {get; private set; }<br/>\u00a0<br/>    public MySetController(){<br/>        //Initialize to an already known collection.  Results in a set of abc,def.<br/>        this.strSet = new Set&lt;String&gt;{'abc','abc','def'};<br/>\u00a0<br/>        //Initialize to empty set and add in entries.<br/>        this.strSet = new Set&lt;String&gt;();<br/>        this.strSet.add('abc');<br/>        this.strSet.add('def');<br/>        this.strSet.add('abc');<br/>        //Results in {'abc','def'}<br/>\u00a0<br/>        //You can also get a set from a map in Apex. In this case, the account ids are fetched from a SOQL query.<br/>        Map&lt;Id,Account&gt; accountMap = new Map&lt;Id,Account&gt;([Select Id,Name From Account Limit 10]);<br/>        Set&lt;Id&gt; accountIds = accountMap.keySet();<br/>\u00a0<br/>        //If you have a set, you can also use it with the bind variable syntax in SOQL:<br/>        List&lt;Account&gt; accounts = [Select Name From Account Where Id in\u00a0:accountIds];<br/>\u00a0<br/>        //Like other collections in Apex, you can use a for loop to iterate over sets:<br/>        for(Id accountId\u00a0: accountIds){<br/>            Account a = accountMap.get(accountId);<br/>            //Do account stuffs here.<br/>        }<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 51, "block": "<pre class=\"autohotkey highlighted_source\">test<span class=\"br0\">(</span>Set<span class=\"sy0\">,</span>element<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tfor i<span class=\"sy0\">,</span> val in Set<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>val<span class=\"sy0\">=</span>element<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> true<br/>\t<span class=\"kw1\">return</span> false<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Union<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tSetC<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Temp<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor i<span class=\"sy0\">,</span> val in SetA<br/>\t\tSetC<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">,</span> Temp<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\tfor i<span class=\"sy0\">,</span> val in SetB<br/>\t\t<span class=\"kw1\">if</span>\u00a0!Temp<span class=\"br0\">[</span>val<span class=\"br0\">]</span><br/>\t\t\tSetC<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> SetC<br/><span class=\"br0\">}</span><br/>\u00a0<br/>intersection<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tSetC<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Temp<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor i<span class=\"sy0\">,</span> val in SetA<br/>\t\tTemp<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\tfor i<span class=\"sy0\">,</span> val in SetB<br/>\t\t<span class=\"kw1\">if</span> Temp<span class=\"br0\">[</span>val<span class=\"br0\">]</span><br/>\t\t\tSetC<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> SetC<br/><span class=\"br0\">}</span><br/>\u00a0<br/>difference<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tSetC<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Temp<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor i<span class=\"sy0\">,</span> val in SetB<br/>\t\tTemp<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\tfor i<span class=\"sy0\">,</span> val in SetA<br/>\t\t<span class=\"kw1\">if</span>\u00a0!Temp<span class=\"br0\">[</span>val<span class=\"br0\">]</span><br/>\t\t\tSetC<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> SetC<br/><span class=\"br0\">}</span><br/>\u00a0<br/>subset<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tTemp<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"sy0\">:=</span>B<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><br/>\tfor i<span class=\"sy0\">,</span> val in SetA<br/>\t\tTemp<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true <span class=\"sy0\">,</span> A<span class=\"sy0\">++</span><br/>\tfor i<span class=\"sy0\">,</span> val in SetB<br/>\t\t<span class=\"kw1\">if</span> Temp<span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"br0\">{</span><br/>\t\t\tB<span class=\"sy0\">++</span><br/>\t\t\tIfEqual<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> <span class=\"re0\">%B%</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>equal<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>SetA<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> SetB<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> subset<span class=\"br0\">(</span>SetA<span class=\"sy0\">,</span>SetB<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">1</span>: <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\">      DIM list$(6)<br/>      list$() = \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"<br/>\u00a0<br/>      setA% =\u00a0%1010101<br/>      PRINT \"Set A: \" FNlistset(list$(), setA%)<br/>      setB% =\u00a0%0111110<br/>      PRINT \"Set B: \" FNlistset(list$(), setB%)<br/>      elementM% =\u00a0%0000010<br/>      PRINT \"Element M: \" FNlistset(list$(), elementM%) '<br/>\u00a0<br/>      IF elementM% AND setA% THEN<br/>        PRINT \"M is an element of set A\"<br/>      ELSE<br/>        PRINT \"M is not an element of set A\"<br/>      ENDIF<br/>      IF elementM% AND setB% THEN<br/>        PRINT \"M is an element of set B\"<br/>      ELSE<br/>        PRINT \"M is not an element of set B\"<br/>      ENDIF<br/>\u00a0<br/>      PRINT '\"The union of A and B is \" FNlistset(list$(), setA% OR setB%)<br/>      PRINT \"The intersection of A and B is \" FNlistset(list$(), setA% AND setB%)<br/>      PRINT \"The difference of A and B is \" FNlistset(list$(), setA% AND NOT setB%)<br/>\u00a0<br/>      IF (setA% AND setB%) = setA% THEN<br/>        PRINT '\"Set A is a subset of set B\"<br/>      ELSE<br/>        PRINT '\"Set A is not a subset of set B\"<br/>      ENDIF<br/>      IF setA% = setB% THEN<br/>        PRINT \"Set A is equal to set B\"<br/>      ELSE<br/>        PRINT \"Set A is not equal to set B\"<br/>      ENDIF<br/>      END<br/>\u00a0<br/>      DEF FNlistset(list$(), set%)<br/>      LOCAL i%, o$<br/>      FOR i% = 0 TO 31<br/>        IF set% AND 1 &lt;&lt; i% o$ += list$(i%) + \", \"<br/>      NEXT<br/>      = LEFT$(LEFT$(o$))</pre>"}, {"lang": "C", "loc": 45, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> set_t<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* probably 32 bits; change according to need */</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_set<span class=\"br0\">(</span>set_t x<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s is:\"</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> x<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tset_t a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>\ta <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* empty set */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* add 0 3 6 9 to set a */</span><br/>\t\ta <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_set<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%d%s in set a<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">:</span><span class=\"st0\">\" not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tb <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>\tb <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* b is a plus 5, 10 */</span><br/>\tb <span class=\"sy0\">&amp;=</span> ~<span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* sans 0 */</span><br/>\tshow_set<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow_set<span class=\"br0\">(</span>a <span class=\"sy0\">|</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\"union(a, b)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_set<span class=\"br0\">(</span>c <span class=\"sy0\">=</span> a <span class=\"sy0\">&amp;</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\"c = common(a, b)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_set<span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> ~b<span class=\"sy0\">,</span> <span class=\"st0\">\"a - b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* diff, not arithmetic minus */</span><br/>\tshow_set<span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> ~a<span class=\"sy0\">,</span> <span class=\"st0\">\"b - a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"b is%s a subset of a<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> ~a<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"c is%s a subset of a<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">&amp;</span> ~a<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"union(a, b) - common(a, b)\u00a0%s union(a - b, b - a)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">|</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ~<span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> ~b<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> ~a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">?</span> <span class=\"st0\">\"equals\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"does not equal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 56, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PrintCollection<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">OutputEncoding</span> <span class=\"sy0\">=</span> Encoding<span class=\"sy0\">.</span><span class=\"me1\">UTF8</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Set creation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> A <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">20</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> B <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">20</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        PrintCollection<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        PrintCollection<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Test m \u2208 S -- <span class=\"es0\">\\\"</span>m is an element in set S<span class=\"es0\">\\\"</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"14 is an element in set A: {0}\"</span>, A<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"15 is an element in set A: {0}\"</span>, A<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"A \u222a B -- union; a set of all elements either in set A or in set B.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> aUb <span class=\"sy0\">=</span> A<span class=\"sy0\">.</span><span class=\"me1\">Union</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        PrintCollection<span class=\"br0\">(</span>aUb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"A \u2216 B -- difference; a set of all elements in set A, except those in set B.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> aDb <span class=\"sy0\">=</span> A<span class=\"sy0\">.</span><span class=\"me1\">Except</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        PrintCollection<span class=\"br0\">(</span>aDb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"A \u2286 B -- subset; true if every element in set A is also in set B.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span><span class=\"me1\">IsSubsetOf</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> C <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">14</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">18</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>C<span class=\"sy0\">.</span><span class=\"me1\">IsSubsetOf</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"A = B -- equality; true if every element of set A is in set B and vice versa.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span><span class=\"me1\">SetEquals</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> D <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">20</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span><span class=\"me1\">SetEquals</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"If A \u2286 B, but A \u2260 B, then A is called a true or proper subset of B, written A \u2282 B or A \u228a B\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span><span class=\"me1\">IsProperSubsetOf</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>C<span class=\"sy0\">.</span><span class=\"me1\">IsProperSubsetOf</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Modify a mutable set.  (Add 10 to A; remove 12 from B).\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        A<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        B<span class=\"sy0\">.</span><span class=\"kw1\">Remove</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        PrintCollection<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        PrintCollection<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 81, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> set_display <span class=\"br0\">{</span><br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> set<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    os <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'['</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>set.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>set.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy2\">--</span>set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>os, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        os <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*--</span>set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">']'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">bool</span> contains<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> set, <span class=\"kw4\">const</span> T<span class=\"sy3\">&amp;</span> key<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> set.<span class=\"me1\">count</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> set_union<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> result<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set_union</span><span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">inserter</span><span class=\"br0\">(</span>result, result.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> set_intersection<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> result<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set_intersection</span><span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">inserter</span><span class=\"br0\">(</span>result, result.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> set_difference<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> result<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set_difference</span><span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">inserter</span><span class=\"br0\">(</span>result, result.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">bool</span> is_subset<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> set, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> subset<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">includes</span><span class=\"br0\">(</span>set.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, subset.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, subset.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> set_display<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> a<span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"co1\">//C++11 initialization syntax</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> b<span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"a = \"</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"b = \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> value1 <span class=\"sy1\">=</span> <span class=\"nu0\">8</span>, value2 <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set a \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>contains<span class=\"br0\">(</span>a, value1<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"contains \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"does not contain \"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> value1 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set a \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>contains<span class=\"br0\">(</span>a, value2<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"contains \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"does not contain \"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> value2 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Union of a and b: \"</span> <span class=\"sy1\">&lt;&lt;</span> set_union<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Intersection of a and b: \"</span> <span class=\"sy1\">&lt;&lt;</span> set_intersection<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Difference of a and b: \"</span> <span class=\"sy1\">&lt;&lt;</span> set_difference<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> sub<span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set b \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>is_subset<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"is not\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" a subset of a<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set \"</span> <span class=\"sy1\">&lt;&lt;</span> sub <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>is_subset<span class=\"br0\">(</span>a, sub<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"is not\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" a subset of a<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> copy <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"a \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>a <span class=\"sy1\">==</span> copy <span class=\"sy4\">?</span> <span class=\"st0\">\"equals \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"does not equal \"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> copy <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 18, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>    value a = set {1, 2, 3};<br/>    value b = set {3, 4, 5};<br/>    value union = a | b;<br/>    value intersection = a &amp; b;<br/>    value difference = a ~ b;<br/>    value subset = a.subset(b);<br/>    value equality = a == b;<br/>\u00a0<br/>    print(\"set a:         ``a``<br/>           set b:         ``b``<br/>           1 in a?        ``1 in a``<br/>           a | b:         ``union``<br/>           a &amp; b:         ``intersection``<br/>           a ~ b:         ``difference``<br/>           a subset of b? ``subset``<br/>           a == b?        ``equality``\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 15, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>require 'clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; sets can be created using the set method or set literal syntax</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> a <span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> b #<span class=\"br0\">{</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>a <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; returns the element if it's contained in the set, otherwise nil</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"sy0\">/</span>union a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"sy0\">/</span>intersection a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"sy0\">/</span>difference a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"sy0\">/</span>subset? a b<span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 87, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># For ad-hoc set features, it sometimes makes sense to use hashes directly,</span><br/><span class=\"co1\"># rather than abstract to this level, but I'm showing a somewhat heavy</span><br/><span class=\"co1\"># solution to show off CoffeeScript class syntax. </span><br/><span class=\"kw3\">class</span> Set    <br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span>elems...<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>hash = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">in</span> elems<br/>      <span class=\"sy0\">@</span>hash<span class=\"br0\">[</span>elem<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>\u00a0<br/>  add<span class=\"sy0\">:</span> <span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>hash<span class=\"br0\">[</span>elem<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>\u00a0<br/>  remove<span class=\"sy0\">:</span> <span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw3\">delete</span> <span class=\"sy0\">@</span>hash<span class=\"br0\">[</span>elem<span class=\"br0\">]</span><br/>\u00a0<br/>  has<span class=\"sy0\">:</span> <span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>hash<span class=\"br0\">[</span>elem<span class=\"br0\">]</span><span class=\"sy0\">?</span><br/>\u00a0<br/>  union<span class=\"sy0\">:</span> <span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    set = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<br/>      set.<span class=\"me1\">add</span> elem<br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">in</span> set2.<span class=\"me1\">to_array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      set.<span class=\"me1\">add</span> elem<br/>    set<br/>\u00a0<br/>  intersection<span class=\"sy0\">:</span> <span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    set = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<br/>      set.<span class=\"me1\">add</span> elem <span class=\"kw1\">if</span> set2.<span class=\"me1\">has</span> elem<br/>    set<br/>\u00a0<br/>  minus<span class=\"sy0\">:</span> <span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    set = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<br/>      set.<span class=\"me1\">add</span> elem <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>set2.<span class=\"me1\">has</span> elem<br/>    set<br/>\u00a0<br/>  is_subset_of<span class=\"sy0\">:</span> <span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>set2.<span class=\"me1\">has</span> elem<br/>    <span class=\"kw4\">true</span><br/>\u00a0<br/>  equals<span class=\"sy0\">:</span> <span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw3\">this</span>.<span class=\"me1\">is_subset_of</span><span class=\"br0\">(</span>set2<span class=\"br0\">)</span> <span class=\"kw2\">and</span> set2.<span class=\"me1\">is_subset_of</span> <span class=\"kw3\">this</span><br/>\u00a0<br/>  to_array<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span>elem <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<span class=\"br0\">)</span><br/>\u00a0<br/>  each<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> elem <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>hash<br/>      f<span class=\"br0\">(</span>elem<span class=\"br0\">)</span><br/>\u00a0<br/>  to_string<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>to_array<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>run_tests = <span class=\"sy0\">-&gt;</span><br/>  set1 = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"banana\"</span><span class=\"br0\">)</span> <span class=\"co1\"># creation</span><br/>  console.<span class=\"me1\">log</span> set1.<span class=\"me1\">has</span> <span class=\"st0\">\"apple\"</span> <span class=\"co1\"># true (membership)</span><br/>  console.<span class=\"me1\">log</span> set1.<span class=\"me1\">has</span> <span class=\"st0\">\"worms\"</span> <span class=\"co1\"># false (membership)</span><br/>\u00a0<br/>  set2 = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"banana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"carrots\"</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> set1.<span class=\"me1\">union</span><span class=\"br0\">(</span>set2<span class=\"br0\">)</span>.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># [ 'apple', 'banana', 'carrots' ] (union)</span><br/>  console.<span class=\"me1\">log</span> set1.<span class=\"me1\">intersection</span><span class=\"br0\">(</span>set2<span class=\"br0\">)</span>.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># [ 'banana' ] (intersection)</span><br/>  console.<span class=\"me1\">log</span> set1.<span class=\"me1\">minus</span><span class=\"br0\">(</span>set2<span class=\"br0\">)</span>.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># [ 'apple' ] (difference)</span><br/>\u00a0<br/>  set3 = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> set3.<span class=\"me1\">is_subset_of</span> set1 <span class=\"co1\"># true</span><br/>  console.<span class=\"me1\">log</span> set3.<span class=\"me1\">is_subset_of</span> set2 <span class=\"co1\"># false</span><br/>\u00a0<br/>  set4 = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"banana\"</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> set4.<span class=\"me1\">equals</span> set1 <span class=\"co1\"># true</span><br/>  console.<span class=\"me1\">log</span> set4.<span class=\"me1\">equals</span> set2 <span class=\"co1\"># false</span><br/>\u00a0<br/>  set5 = <span class=\"kw3\">new</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/>  set5.<span class=\"me1\">add</span> <span class=\"st0\">\"bar\"</span> <span class=\"co1\"># add</span><br/>  console.<span class=\"me1\">log</span> set5.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># [ 'foo', 'bar' ]</span><br/>  set5.<span class=\"me1\">remove</span> <span class=\"st0\">\"bar\"</span> <span class=\"co1\"># remove</span><br/>  console.<span class=\"me1\">log</span> set5.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># [ 'foo' ]</span><br/>\u00a0<br/>  <span class=\"co1\"># iteration, prints apple then banana (order not guaranteed)</span><br/>  set1.<span class=\"me1\">each</span> <span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    console.<span class=\"me1\">log</span> elem<br/>\u00a0<br/>run_tests<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">setf</span> a '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">setf</span> b '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"sets: ~a ~a~%\"</span> a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; element</span><br/><span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>\t<span class=\"br0\">(</span>format t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> x a<span class=\"br0\">)</span><br/>\t\t    <span class=\"st0\">\"~d \u2208 A~%\"</span><br/>\t\t    <span class=\"st0\">\"~d \u2209 A~%\"</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"A \u222a B: ~a~%\"</span> <span class=\"br0\">(</span>union a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"A \u2229 B: ~a~%\"</span> <span class=\"br0\">(</span>intersection a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"A <span class=\"es0\">\\\\</span> B: ~a~%\"</span> <span class=\"br0\">(</span>set-difference a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>subsetp a b<span class=\"br0\">)</span><br/>\t    <span class=\"st0\">\"~a \u2286 ~a~%\"</span><br/>\t    <span class=\"st0\">\"~a \u2288 ~a~%\"</span><span class=\"br0\">)</span> a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>subsetp a b<span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span>subsetp b a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"st0\">\"~a = ~a~%\"</span><br/>\t    <span class=\"st0\">\"~a \u2260 ~a~%\"</span><span class=\"br0\">)</span> a b<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Not true sets, items can be repeated, but must be sorted.</span><br/>    <span class=\"kw4\">auto</span> s1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">assumeSorted</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> s2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// [2,3,4,5,6,8].</span><br/>    <span class=\"kw4\">auto</span> s3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">assumeSorted</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">canFind</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Linear search.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Binary search.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">setUnion</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">setIntersection</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">setDifference</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">setSymmetricDifference</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s3.<span class=\"me1\">setDifference</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// It's a subset.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>s1.<span class=\"me1\">equal</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> s4 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> s5 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s4.<span class=\"me1\">nWayUnion</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span>s5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 154, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">module</span> set<span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">typecons</span> <span class=\"sy0\">:</span> Tuple<span class=\"sy0\">,</span> tuple<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> Set<span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Limited set of V-type elements                                        // here 'this' is named A, s is B, v V-type item</span><br/>\u00a0<br/><span class=\"kw4\">protected</span> V<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                              <span class=\"co1\">// construct A by copy of B</span><br/>\t\tarray <span class=\"sy0\">=</span> s.<span class=\"me1\">array</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">this</span><span class=\"br0\">(</span>V<span class=\"br0\">[</span><span class=\"br0\">]</span> arg<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">{</span>                                                                <span class=\"co1\">// construct A with items</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>v<span class=\"sy0\">;</span> arg<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v.<span class=\"me1\">isNotIn</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span> array <span class=\"sy0\">~=</span> v<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> Set <span class=\"br0\">{</span> empty <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>                                                     <span class=\"co1\">// \u2205</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> Set opAssign<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                <span class=\"co1\">// A = B</span><br/>\t\tarray <span class=\"sy0\">=</span> s.<span class=\"me1\">array</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">bool</span> opBinaryRight<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"in\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> V v<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>                          <span class=\"co1\">// v \u2208 A</span><br/>\t\t<span class=\"kw1\">return</span> v.<span class=\"me1\">isIn</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> Set opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> V v<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>           <span class=\"co1\">// A += {v}          // + = \u222a = |</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>v.<span class=\"me1\">isIn</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t\tarray <span class=\"sy0\">~=</span> v<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> Set opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\">// A += B</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> s.<span class=\"me1\">array</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x.<span class=\"me1\">isNotIn</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span> array <span class=\"sy0\">~=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> V v<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span>            <span class=\"co1\">// A + {v}</span><br/>\t\tSet result <span class=\"sy0\">=</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t\tresult <span class=\"sy0\">+=</span> v<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinaryRight<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> V v<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>      <span class=\"co1\">// {v} + A</span><br/>\t\tSet result <span class=\"sy0\">=</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t\tresult <span class=\"sy0\">+=</span> v<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy0\">==</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">||</span> op <span class=\"sy0\">==</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\">// A + B</span><br/>\t\tSet result <span class=\"sy0\">=</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\t\tresult <span class=\"sy0\">+=</span> s<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"&amp;\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span><span class=\"br0\">{</span>                                <span class=\"co1\">// A \u2229 B               // \u2229 = &amp;</span><br/>\t\tSet result<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>x.<span class=\"me1\">isIn</span><span class=\"br0\">(</span>s.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span> result <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> Set opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"&amp;\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                               <span class=\"co1\">// A \u2229= B</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">this</span> <span class=\"sy0\">&amp;</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>                               <span class=\"co1\">// (A \u222a B) - (A \u2229 B)    //  = A ^ B</span><br/>\t\tSet result<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x.<span class=\"me1\">isNotIn</span><span class=\"br0\">(</span>s.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span> result <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> s.<span class=\"me1\">array</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>x.<span class=\"me1\">isNotIn</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span> result <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span> <span class=\"sy0\">=</span> <span class=\"kw2\">this</span> <span class=\"sy0\">^</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>                                <span class=\"co1\">// A - B</span><br/>\t\tSet r<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>x.<span class=\"me1\">isNot</span><span class=\"br0\">(</span>s.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span> r <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">ref</span> Set opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                <span class=\"co1\">// A -= B</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span> <span class=\"sy0\">=</span> <span class=\"kw2\">this</span> <span class=\"sy0\">-</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tSet<span class=\"sy0\">!</span><span class=\"br0\">(</span>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>V<span class=\"sy0\">,</span>U<span class=\"br0\">)</span><span class=\"br0\">)</span> opBinary<span class=\"br0\">(</span>U<span class=\"sy0\">,</span> <span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>U s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>             <span class=\"co1\">// A \u00d7 B = { (x, y) | \u2200x \u2208 A \u2227 \u2200y \u2208 B }</span><br/>\t\tSet<span class=\"sy0\">!</span><span class=\"br0\">(</span>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>V<span class=\"sy0\">,</span> U<span class=\"br0\">)</span><span class=\"br0\">)</span> r<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>y<span class=\"sy0\">;</span> s.<span class=\"me1\">array</span><span class=\"br0\">)</span> r <span class=\"sy0\">+=</span> tuple<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">bool</span> isEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>array.<span class=\"me1\">length</span><span class=\"sy0\">;</span><span class=\"br0\">}</span>                                     <span class=\"co1\">// A \u225f \u2205</span><br/>\u00a0<br/>\t<span class=\"kw4\">bool</span> opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"in\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>                              <span class=\"co1\">// A \u2282 s</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>v<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>v.<span class=\"me1\">isNotIn</span><span class=\"br0\">(</span>s.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">bool</span> opEquals<span class=\"br0\">(</span><span class=\"kw4\">const</span> Set s<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span>                                                <span class=\"co1\">// A \u225f B</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>array.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> s.<span class=\"me1\">array</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">this</span> <span class=\"kw2\">in</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tT<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">@property</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> array.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Set<span class=\"sy0\">!</span><span class=\"br0\">(</span>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>T<span class=\"sy0\">,</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span> sqr<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> s <span class=\"sy0\">*</span> s<span class=\"sy0\">;</span> <span class=\"br0\">}</span>                                 <span class=\"co1\">// A\u00b2</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pow<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                   <span class=\"co1\">// A ^ 0</span><br/>\t<span class=\"kw1\">return</span> Set<span class=\"sy0\">!</span>T.<span class=\"me1\">empty</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pow<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                   <span class=\"co1\">// A ^ 1 = A</span><br/>\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pow<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                   <span class=\"co1\">// A ^\u00a02 (=A\u00b2)</span><br/>\t<span class=\"kw1\">return</span> sqr<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pow<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                                             <span class=\"co1\">// if n Odd,  A^n = A * (A^(n/2))\u00b2\t</span><br/>        <span class=\"kw1\">return</span> s <span class=\"sy0\">*</span> sqr<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>pow<span class=\"sy0\">!</span><span class=\"br0\">(</span>T<span class=\"sy0\">,</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pow<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                                           <span class=\"co1\">// if n Even, A^n = (A^(n/2))\u00b2</span><br/>\t<span class=\"kw1\">return</span> sqr<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>pow<span class=\"sy0\">!</span><span class=\"br0\">(</span>T<span class=\"sy0\">,</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> Card<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>                                           <span class=\"co1\">// Card(A)</span><br/>\u00a0<br/>Set<span class=\"sy0\">!</span><span class=\"br0\">(</span>Set<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> power<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>Set<span class=\"sy0\">!</span>T s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                                                             <span class=\"co1\">// \u2200B \u2208 P(A) \u21d2 B \u2282 A </span><br/>\tSet<span class=\"sy0\">!</span><span class=\"br0\">(</span>Set<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> ret<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>e<span class=\"sy0\">;</span> s.<span class=\"me1\">array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tSet<span class=\"sy0\">!</span><span class=\"br0\">(</span>Set<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> rs<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>x<span class=\"sy0\">;</span> ret.<span class=\"me1\">array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tx <span class=\"sy0\">+=</span> e<span class=\"sy0\">;</span><br/>\t\t\trs <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tret <span class=\"sy0\">+=</span> rs<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isIn<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T x<span class=\"sy0\">,</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span>a<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">bool</span> isNotIn<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T x<span class=\"sy0\">,</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tforeachj<span class=\"br0\">(</span>a<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Dart", "loc": 38, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"co1\">//Set Creation</span><br/>  Set A <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Set.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Set B <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Set.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Set C <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Set.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set A = $A'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set B = $B'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set C = $C'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Test if element is in set</span><br/>  <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'m = 5'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'m in A = ${A.contains(m)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'m in B = ${B.contains(m)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'m in C = ${C.contains(m)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Union of two sets</span><br/>  Set AC <span class=\"sy0\">=</span> A.<span class=\"kw2\">union</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set AC = Union of A and C = $AC'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Intersection of two sets</span><br/>  Set A_C <span class=\"sy0\">=</span> A.<span class=\"me1\">intersection</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set A_C = Intersection of A and C = $A_C'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Difference of two sets</span><br/>  Set A_diff_C <span class=\"sy0\">=</span> A.<span class=\"me1\">difference</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'Set A_diff_C = Difference between A and C = $A_diff_C'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Test if set is subset of another set</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'A is a subset of B = ${B.containsAll(A)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'C is a subset of B = ${B.containsAll(C)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'A is a subset of C = ${C.containsAll(A)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//Test if two sets are equal</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'A is equal to B  = ${B.containsAll(A) &amp;&amp; A.containsAll(B)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">'B is equal to AC = ${B.containsAll(AC) &amp;&amp; AC.containsAll(B)}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 35, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">; use { } to read a set</span><br/><span class=\"br0\">(</span>define A <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"br0\">}</span> <span class=\"co1\">; duplicates are removed from a set</span><br/><span class=\"co1\">; or use make-set to make a set from a list</span><br/><span class=\"br0\">(</span>define B <span class=\"br0\">(</span>make-<span class=\"kw1\">set</span> ' <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span>set-intersect A B<span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span>set-intersect? A B<span class=\"br0\">)</span> \u2192 #t <span class=\"co1\">; predicate</span><br/><span class=\"br0\">(</span>set-union A B<span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span>set-substract A B<span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><span class=\"br0\">(</span>set-sym-diff A B<span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span> <span class=\"co1\">; \u2206 symmetric difference</span><br/><span class=\"br0\">(</span>set-<span class=\"kw1\">equal</span>? A B<span class=\"br0\">)</span> \u2192  #f<br/><span class=\"br0\">(</span>set-<span class=\"kw1\">equal</span>? <span class=\"br0\">{</span> a b c<span class=\"br0\">}</span> <span class=\"br0\">{</span> c b a<span class=\"br0\">}</span><span class=\"br0\">)</span> \u2192 #t <span class=\"co1\">; order is unimportant</span><br/><span class=\"br0\">(</span>set-subset? A B<span class=\"br0\">)</span> \u2192 #f <span class=\"co1\">; B in A or B = A</span><br/><span class=\"br0\">(</span>set-subset? A <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"nu0\">4</span> A<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">; same as #t\u00a0: true</span><br/><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"nu0\">9</span> A<span class=\"br0\">)</span> \u2192 #f<br/>\u00a0<br/><span class=\"co1\">; check basic equalities</span><br/><span class=\"br0\">(</span>set-<span class=\"kw1\">equal</span>? A <span class=\"br0\">(</span>set-union <span class=\"br0\">(</span>set-intersect A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>set-substract A B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span>set-<span class=\"kw1\">equal</span>? <span class=\"br0\">(</span>set-union A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>set-union <span class=\"br0\">(</span>set-sym-diff A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>set-intersect A B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 #t<br/>\u00a0<br/><span class=\"co1\">; \u00d7\u00a0: cartesian product of two sets\u00a0: all pairs (a . b) , a in A, b in B</span><br/><span class=\"co1\">; returns a list (not a set)</span><br/><span class=\"br0\">(</span>define A <span class=\"br0\">{</span> albert simon<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define B <span class=\"br0\">{</span> antoinette ornella marylin<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>set-product A B<span class=\"br0\">)</span><br/>\u2192 <span class=\"br0\">(</span><span class=\"br0\">(</span>albert <span class=\"sy0\">.</span> antoinette<span class=\"br0\">)</span> <span class=\"br0\">(</span>albert <span class=\"sy0\">.</span> marylin<span class=\"br0\">)</span> <span class=\"br0\">(</span>albert <span class=\"sy0\">.</span> ornella<span class=\"br0\">)</span> <span class=\"br0\">(</span>simon <span class=\"sy0\">.</span> antoinette<span class=\"br0\">)</span> <span class=\"br0\">(</span>simon <span class=\"sy0\">.</span> marylin<span class=\"br0\">)</span> <span class=\"br0\">(</span>simon <span class=\"sy0\">.</span> ornella<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; sets elements may be sets</span><br/><span class=\"br0\">{</span> <span class=\"br0\">{</span> a b c<span class=\"br0\">}</span> <span class=\"br0\">{</span>c b a <span class=\"br0\">}</span> <span class=\"br0\">{</span> a b d<span class=\"br0\">}</span><span class=\"br0\">}</span> \u2192 <span class=\"br0\">{</span> <span class=\"br0\">{</span> a b c <span class=\"br0\">}</span> <span class=\"br0\">{</span> a b d <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"co1\">; duplicate removed</span><br/>\u00a0<br/><span class=\"co1\">; A few functions return sets\u00a0:</span><br/><span class=\"br0\">(</span>primes <span class=\"nu0\">10</span><span class=\"br0\">)</span> \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 28, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; s = MapSet.new<br/>#MapSet&lt;[]&gt;<br/>iex(2)&gt; sa = MapSet.put(s,\u00a0:a)<br/>#MapSet&lt;[:a]&gt;<br/>iex(3)&gt; sab = MapSet.put(sa,\u00a0:b)<br/>#MapSet&lt;[:a,\u00a0:b]&gt;<br/>iex(4)&gt; sbc = Enum.into([:b,\u00a0:c], MapSet.new)<br/>#MapSet&lt;[:b,\u00a0:c]&gt;<br/>iex(5)&gt; MapSet.member?(sab,\u00a0:a)<br/>true<br/>iex(6)&gt; MapSet.member?(sab,\u00a0:c)<br/>false<br/>iex(7)&gt;\u00a0:a in sab<br/>true<br/>iex(8)&gt; MapSet.union(sab, sbc)<br/>#MapSet&lt;[:a,\u00a0:b,\u00a0:c]&gt;<br/>iex(9)&gt; MapSet.intersection(sab, sbc)<br/>#MapSet&lt;[:b]&gt;<br/>iex(10)&gt; MapSet.difference(sab, sbc)<br/>#MapSet&lt;[:a]&gt;<br/>iex(11)&gt; MapSet.disjoint?(sab, sbc)<br/>false<br/>iex(12)&gt; MapSet.subset?(sa, sab)<br/>true<br/>iex(13)&gt; MapSet.subset?(sab, sa)<br/>false<br/>iex(14)&gt; sa == sab<br/>false</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>2&gt; S = sets:new().\n3&gt; Sa = sets:add_element(a, S).\n4&gt; Sab = sets:from_list([a, b]).\n5&gt; sets:is_element(a, Sa).\ntrue\n6&gt; Union = sets:union(Sa, Sab).\n7&gt; sets:to_list(Union).\n[a,b]\n8&gt; Intersection = sets:intersection(Sa, Sab).\n9&gt; sets:to_list(Intersection).\n[a]\n10&gt; Subtract = sets:subtract(Sab, Sa).\n11&gt; sets:to_list(Subtract).\n[b]\n12&gt; sets:is_subset(Sa, Sab). \ntrue\n13&gt; Sa =:= Sab.\nfalse\n</pre>"}, {"lang": "F#", "loc": 26, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"co1\">// Create some sets (of int):</span><br/>    <span class=\"kw1\">let</span> s1 <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> s2 <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofArray</span> <span class=\"br0\">[</span>|<span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span>|<span class=\"br0\">]</span><br/>\u00a0<br/>    printfn <span class=\"st0\">\"Some sets (of int):\"</span><br/>    printfn <span class=\"st0\">\"s1 =\u00a0%A\"</span> s1<br/>    printfn <span class=\"st0\">\"s2 =\u00a0%A\"</span> s2<br/>    printfn <span class=\"st0\">\"Set operations:\"</span><br/>    printfn <span class=\"st0\">\"2 \u2208 s1?\u00a0%A\"</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">Contains</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"10 \u2208 s1?\u00a0%A\"</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">Contains</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u222a s2 =\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">union</span> s1 s2<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2229 s2 =\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">intersect</span> s1 s2<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2216 s2 =\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">difference</span> s1 s2<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2286 s2?\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isSubset</span> s1 s1<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"{3, 1} \u2286 s1?\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isSubset</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> s1<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"{3, 2, 4, 1} = s1?\u00a0%A\"</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s1<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 = s2?\u00a0%A\"</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">=</span> s2<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"More set operations:\"</span><br/>    printfn <span class=\"st0\">\"#s1 =\u00a0%A\"</span> s1.<span class=\"me1\">Count</span><br/>    printfn <span class=\"st0\">\"s1 \u222a {99} =\u00a0%A\"</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">Add</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2216 {3} =\u00a0%A\"</span> <span class=\"br0\">(</span>s1.<span class=\"me1\">Remove</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2282 s1?\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isProperSubset</span> s1 s1<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"s1 \u2282 s2?\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isProperSubset</span> s1 s2<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 15, "block": "<pre class=\"text highlighted_source\">( scratchpad ) USE: sets<br/>( scratchpad ) HS{ 2 5 4 3 } HS{ 5 6 7 } union .<br/>HS{ 2 3 4 5 6 7 }<br/>( scratchpad ) HS{ 2 5 4 3 } HS{ 5 6 7 } intersect .<br/>HS{ 5 }<br/>( scratchpad ) HS{ 2 5 4 3 } HS{ 5 6 7 } diff .<br/>HS{ 2 3 4 }<br/>( scratchpad ) HS{ 2 5 4 3 } HS{ 5 6 7 } subset? .<br/>f<br/>( scratchpad ) HS{ 5 6 } HS{ 5 6 7 } subset? .<br/>t<br/>( scratchpad ) HS{ 5 6 } HS{ 5 6 7 } set= .<br/>f<br/>( scratchpad ) HS{ 6 5 7 } HS{ 5 6 7 } set= .<br/>t</pre>"}, {"lang": "Forth", "loc": 58, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>: union {: a b -- c\u00a0:}<br/>  begin<br/>    b each:<br/>  while dup<br/>    a indexOf: if 2drop else a add: then<br/>  repeat b &lt;free a dup sort:\u00a0; ok<br/>\u00a0<br/>i{ 2 5 4 3 } i{ 5 6 7 } union p: i{ 2 3 4 5 6 7 } ok<br/>\u00a0<br/>\u00a0<br/>: free2 ( a b -- ) &lt;free &lt;free\u00a0; <br/>: intersect {: a b | c -- c\u00a0:}<br/>  heap&gt; 1-array2 to c <br/>  begin<br/>    b each:<br/>  while dup<br/>    a indexOf: if drop c add: else drop then<br/>  repeat a b free2 c dup sort:\u00a0; <br/>\u00a0<br/>i{ 2 5 4 3 } i{ 5 6 7 } intersect p: i{ 5 } ok<br/>\u00a0<br/>\u00a0<br/>: diff {: a b | c -- c\u00a0:}<br/>  heap&gt; 1-array2 to c <br/>  begin<br/>    a each:<br/>  while dup<br/>    b indexOf: if 2drop else c add: then<br/>  repeat a b free2 c dup sort:\u00a0; <br/>\u00a0<br/>i{ 2 5 4 3 } i{ 5 6 7 } diff p: i{ 2 3 4 } ok<br/>\u00a0<br/>: subset {: a b -- flag\u00a0:}<br/>  begin<br/>    a each:<br/>  while <br/>    b indexOf: if drop else false exit then<br/>  repeat a b free2 true\u00a0; <br/>\u00a0<br/>i{ 2 5 4 3 } i{ 5 6 7 } subset . 0 ok<br/>i{ 5 6 } i{ 5 6 7 } subset .  -1 ok<br/>\u00a0<br/>\u00a0<br/>: set= {: a b -- flag\u00a0:}<br/>  a size: b size: &lt;&gt; if a b free2 false exit then<br/>  a sort: b sort:<br/>  begin<br/>    a each: drop b each: <br/>  while <br/>    &lt;&gt; if a b free2 false exit then<br/>  repeat a b free2 true\u00a0; <br/>\u00a0<br/>i{ 5 6 } i{ 5 6 7 } set= .  0 ok<br/>i{ 6 5 7 } i{ 5 6 7 } set= .  -1 ok<br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = new set[1, 2]<br/>b = toSet[[2,3]]   // Construct a set from an array<br/>\u00a0<br/>a.contains[2]  // Element test (returns true)<br/>union[a,b] <br/>intersection[a,b]<br/>setDifference[a,b]<br/>isSubset[a,b]  // Returns true if a is a subset of b<br/>a==b           // set equality test<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 23, "block": "<pre class=\"text highlighted_source\">A = {1, 2, 3}<br/>B = {3, 4, 5}<br/>C = {1, 2, 3, 4, 5}<br/>D = {2, 1, 3}<br/>\u00a0<br/>println( '2 is in A: ' + (2 in A) )<br/>println( '4 is in A: ' + (4 in A) )<br/>println( 'A union B: ' + A.union(B) )<br/>println( 'A intersect B: ' + A.intersect(B) )<br/>println( 'A difference B: ' + A.diff(B) )<br/>println( 'A subset of B: ' + A.subsetOf(B) )<br/>println( 'A subset of B: ' + A.subsetOf(C) )<br/>println( 'A equal B: ' + (A == B) )<br/>println( 'A equal D: ' + (A == D) )<br/>\u00a0<br/>S = set( A )<br/>\u00a0<br/>println( 'S (mutable version of A): ' + S )<br/>S.add( 4 )<br/>println( 'S with 4 added: ' + S )<br/>println( 'S subset of C: ' + S.subsetOf(C) )<br/>S.remove( 1 )<br/>println( 'S after 1 removed: ' + S )</pre>"}, {"lang": "Go", "loc": 131, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// Define set as a type to hold a set of complex numbers.  A type</span><br/><span class=\"co1\">// could be defined similarly to hold other types of elements.  A common</span><br/><span class=\"co1\">// variation is to make a map of interface{} to represent a set of</span><br/><span class=\"co1\">// mixed types.  Also here the map value is a bool.  By always storing</span><br/><span class=\"co1\">// true, the code is nicely readable.  A variation to use less memory</span><br/><span class=\"co1\">// is to make the map value an empty struct.  The relative advantages</span><br/><span class=\"co1\">// can be debated.</span><br/><span class=\"kw1\">type</span> set <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">complex128</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task: set creation</span><br/>    s0 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span>             <span class=\"co1\">// create empty set</span><br/>    s1 <span class=\"sy2\">:=</span> set<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span>          <span class=\"co1\">// create set with one element</span><br/>    s2 <span class=\"sy2\">:=</span> set<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span> <span class=\"co1\">// create set with two elements</span><br/>\u00a0<br/>    <span class=\"co1\">// option: another way to create a set</span><br/>    s3 <span class=\"sy2\">:=</span> newSet<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// option: output!</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"s0:\"</span><span class=\"sy1\">,</span> s0<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"s1:\"</span><span class=\"sy1\">,</span> s1<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"s2:\"</span><span class=\"sy1\">,</span> s2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"s3:\"</span><span class=\"sy1\">,</span> s3<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// task: element predicate</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2208 s0:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> s0<span class=\"sy3\">.</span>hasElement<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2208 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> s3<span class=\"sy3\">.</span>hasElement<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2208 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> s3<span class=\"sy3\">.</span>hasElement<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// task: union</span><br/>    b <span class=\"sy2\">:=</span> set<span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"s3 \u222a\u00a0%v:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> union<span class=\"sy1\">(</span>s3<span class=\"sy1\">,</span> b<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// task: intersection</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"s3 \u2229\u00a0%v:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> intersection<span class=\"sy1\">(</span>s3<span class=\"sy1\">,</span> b<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// task: difference</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"s3 <span class=\"es1\">\\\\</span>\u00a0%v:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> difference<span class=\"sy1\">(</span>s3<span class=\"sy1\">,</span> b<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// task: subset predicate</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2286 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> subset<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> s3<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2286 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s2<span class=\"sy1\">,</span> subset<span class=\"sy1\">(</span>s2<span class=\"sy1\">,</span> s3<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2286 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s0<span class=\"sy1\">,</span> subset<span class=\"sy1\">(</span>s0<span class=\"sy1\">,</span> s3<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// task: equality</span><br/>    s2Same <span class=\"sy2\">:=</span> set<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v = s2:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s2Same<span class=\"sy1\">,</span> equal<span class=\"sy1\">(</span>s2Same<span class=\"sy1\">,</span> s2<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// option: proper subset</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2282 s2:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s2Same<span class=\"sy1\">,</span> properSubset<span class=\"sy1\">(</span>s2Same<span class=\"sy1\">,</span> s2<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v \u2282 s3:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s2Same<span class=\"sy1\">,</span> properSubset<span class=\"sy1\">(</span>s2Same<span class=\"sy1\">,</span> s3<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// option: delete.  it's built in.</span><br/>    delete<span class=\"sy1\">(</span>s3<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"s3, 3 deleted:\"</span><span class=\"sy1\">,</span> s3<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newSet<span class=\"sy1\">(</span>ms <span class=\"sy4\">...</span><span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> set <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ms <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span>m<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\u2205\"</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"st0\">\"{\"</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%s%v, \"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">\"}\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s set<span class=\"sy1\">)</span> hasElement<span class=\"sy1\">(</span>m <span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy1\">[</span>m<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> union<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> set <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> intersection<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> set <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> b<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            s<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> difference<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> set <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>b<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            s<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> subset<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>b<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> equal<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> &amp;&amp; subset<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> properSubset<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b set<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> &amp;&amp; subset<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 19, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> s1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> m1 <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> m2 <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> s2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> m1 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> s1                                       \u00a0: <span class=\"st0\">'member'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>m2 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> s2<span class=\"br0\">)</span>                                   \u00a0: <span class=\"st0\">'not a member'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> su <span class=\"sy0\">=</span> s1 <span class=\"sy0\">+</span> s2<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> su <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a>\u00a0: <span class=\"st0\">'union'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> si <span class=\"sy0\">=</span> s1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20intersect\"><span class=\"kw5\">intersect</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> si <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a>                      \u00a0: <span class=\"st0\">'intersection'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sd <span class=\"sy0\">=</span> s1 <span class=\"sy0\">-</span> s2<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> sd <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a>               \u00a0: <span class=\"st0\">'difference'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> s1.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>si<span class=\"br0\">)</span>                             \u00a0: <span class=\"st0\">'subset'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> s1.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>                           \u00a0: <span class=\"st0\">'not a subset'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"br0\">(</span>si <span class=\"sy0\">+</span> sd<span class=\"br0\">)</span> <span class=\"sy0\">==</span> s1                                \u00a0: <span class=\"st0\">'equality'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"br0\">(</span>s2 <span class=\"sy0\">+</span> sd<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> s1                                \u00a0: <span class=\"st0\">'inequality'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> s1 <span class=\"sy0\">!=</span> su <span class=\"sy0\">&amp;&amp;</span> su.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>                 \u00a0: <span class=\"st0\">'proper subset'</span><br/>s1 <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> s1 <span class=\"sy0\">==</span> su                                       \u00a0: <span class=\"st0\">'added element 0 to s1'</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\">Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Set<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> empty <span class=\"sy0\">::</span> Set <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"co1\">-- Empty set</span><br/>fromList <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> s1 <span class=\"sy0\">=</span> fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"co1\">-- Convert list into set</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> s1<br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> s2 <span class=\"sy0\">=</span> fromList <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> union s1 s2 <span class=\"co1\">-- Union</span><br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> intersection s1 s2 <span class=\"co1\">-- Intersection</span><br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> s1 \\\\ s2 <span class=\"co1\">-- Difference</span><br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> s1 `isSubsetOf` s1 <span class=\"co1\">-- Subset</span><br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> fromList <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> `isSubsetOf` s1<br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> s1 `isProperSubsetOf` s1 <span class=\"co1\">-- Proper subset</span><br/>False<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> fromList <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> `isProperSubsetOf` s1<br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> fromList <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> s1 <span class=\"co1\">-- Equality</span><br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> s1 <span class=\"sy0\">==</span> s2<br/>False<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> `member` s1 <span class=\"co1\">-- Membership</span><br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> `notMember` s1<br/>True<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> size s1 <span class=\"co1\">-- Cardinality</span><br/><span class=\"nu0\">4</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> insert <span class=\"nu0\">99</span> s1 <span class=\"co1\">-- Create a new set by inserting</span><br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">99</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> Data<span class=\"sy0\">.</span>Set<span class=\"sy0\">&gt;</span> delete <span class=\"nu0\">3</span> s1 <span class=\"co1\">-- Create a new set by deleting</span><br/>fromList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 63, "block": "<pre class=\"unicon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> display_set <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s <span class=\"sy0\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># fail unless s1 and s2 contain the same elements</span><br/><span class=\"kw1\">procedure</span> set_equals <span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> subset<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> subset<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># fail if every element in s2 is not contained in s1</span><br/><span class=\"kw1\">procedure</span> subset <span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>a <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>s2<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span><span class=\"kw4\">member</span><span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> s2<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  a <span class=\"sy0\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  b <span class=\"sy0\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"a: \"</span><span class=\"br0\">)</span><br/>  display_set <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"b: \"</span><span class=\"br0\">)</span><br/>  display_set <span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <span class=\"co1\"># basic set operations</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"Intersection: \"</span><span class=\"br0\">)</span><br/>  display_set <span class=\"br0\">(</span>a <span class=\"sy0\">**</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"Union: \"</span><span class=\"br0\">)</span><br/>  display_set <span class=\"br0\">(</span>a <span class=\"sy0\">++</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"Difference: \"</span><span class=\"br0\">)</span><br/>  display_set <span class=\"br0\">(</span>a <span class=\"sy0\">--</span> b<span class=\"br0\">)</span><br/>  <span class=\"co1\"># membership</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"2 is a member of a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"2 is not a member of a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"5 is a member of a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"5 is not a member of a\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># equality</span><br/>  <span class=\"kw1\">if</span> set_equals<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"a equals set(1,2,3,4,4)\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"a does not equal set(1,2,3,4,4)\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> set_equals<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"a equals b\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"a does not equal b\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># subset</span><br/>  <span class=\"kw1\">if</span> subset<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"(1,2) is included in a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"(1,2) is not included in a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> subset<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"(1,2,5) is included in a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"(1,2,5) is not included in a\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">union=: <a class=\"__cf_email__\" data-cfemail=\"8cf2a2cc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<br/>intersection=: [ -. -.<br/>difference=: -.<br/>subset=: *./@e.<br/>equality=: -:&amp;<span class=\"sy0\">(</span>/:~<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 62, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.TreeSet</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Sets <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> a = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//TreeSet sorts on natural ordering (or an optional comparator)</span><br/>        <span class=\"co1\">//other options: HashSet (hashcode)</span><br/>        <span class=\"co1\">//               LinkedHashSet (insertion order)</span><br/>        <span class=\"co1\">//               EnumSet (optimized for enum values)</span><br/>        <span class=\"co1\">//others at: http://download.oracle.com/javase/7/docs/api/java/util/Set.html</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> b = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> c = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> d = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        a.<span class=\"me1\">addAll</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        b.<span class=\"me1\">addAll</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        c.<span class=\"me1\">addAll</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">addAll</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"a: \"</span> + a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"b: \"</span> + b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"c: \"</span> + c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"d: \"</span> + d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"2 in a: \"</span> + a.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"6 in a: \"</span> + a.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> ab = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ab.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ab.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"a union b: \"</span> + ab<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> a_b = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a_b.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a_b.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"a - b: \"</span> + a_b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"c subset of a: \"</span> + a.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//use a.conatins() for single elements</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"c = d: \"</span> + c.<span class=\"me1\">equals</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"d = c: \"</span> + d.<span class=\"me1\">equals</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> aib = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        aib.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        aib.<span class=\"me1\">retainAll</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"a intersect b: \"</span> + aib<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"add 7 to a: \"</span> + a.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"add 2 to a again: \"</span> + a.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//other noteworthy things related to sets:</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> empty = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">EMPTY_SET</span><span class=\"sy0\">;</span> <span class=\"co1\">//immutable empty set</span><br/>        <span class=\"co1\">//empty.add(2);  would fail</span><br/>        empty.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//test if a set is empty</span><br/>        empty.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">disjoint</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns true if the sets have no common elems (based on their .equals() methods)</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">unmodifiableSet</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns an immutable copy of a</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 25, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> <span class=\"kw1\">set</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Set<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">set</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">'two'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">'three'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; true</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; false</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"st0\">'two'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; false</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"st0\">'TWO'</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; true</span><br/>\u00a0<br/><span class=\"kw1\">set</span>.<span class=\"me1\">size</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; 4</span><br/>\u00a0<br/><span class=\"kw1\">set</span>.<span class=\"kw1\">delete</span><span class=\"br0\">(</span><span class=\"st0\">'two'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"st0\">'two'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//==&gt; false</span><br/><span class=\"kw1\">set</span>.<span class=\"me1\">size</span><span class=\"sy0\">;</span> <span class=\"co1\">//=&gt; 3</span><br/>\u00a0<br/><span class=\"co1\">//iterating set using ES6 for..of</span><br/><span class=\"co1\">//Set order is preserved in order items are added.</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> item of <span class=\"kw1\">set</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'item is '</span> <span class=\"sy0\">+</span> item<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">{\"a\":true, \"b\":true } == {\"b\":true, \"a\":true}.<br/>{\"a\":true} + {\"b\":true } == { \"a\":true, \"b\":true}</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre>julia&gt; S1 = Set(1:4)\u00a0; S2 = Set(3:6)\u00a0; println(S1,\"\\n\",S2)\nSet{Int64}({4,2,3,1})\nSet{Int64}({5,4,6,3})\n\njulia&gt; 5 in S1 , 5 in S2\n(false,true)\n\njulia&gt; intersect(S1,S2)\nSet{Int64}({4,3})\n\njulia&gt; union(S1,S2)\nSet{Int64}({5,4,6,2,3,1})\n\njulia&gt; setdiff(S1,S2)\nSet{Int64}({2,1})\n\njulia&gt; issubset(S1,S2)\nfalse\n\njulia&gt; isequal(S1,S2)\nfalse\n\njulia&gt; symdiff(S1,S2)\nSet{Int64}({5,6,2,1})</pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fruits  <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span>, <span class=\"st0\">\"pear\"</span>, <span class=\"st0\">\"orange\"</span>, <span class=\"st0\">\"banana\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits \u00a0: $fruits\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fruits2 <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"st0\">\"melon\"</span>, <span class=\"st0\">\"orange\"</span>, <span class=\"st0\">\"lemon\"</span>, <span class=\"st0\">\"gooseberry\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits2\u00a0: $fruits2<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits  contains 'banana'    \u00a0: ${\"</span>banana<span class=\"st0\">\" in fruits}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits2 contains 'elderberry'\u00a0: ${\"</span>elderbury<span class=\"st0\">\" in fruits2}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"Union       \u00a0: ${fruits.union(fruits2)}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"Intersection\u00a0: ${fruits.intersect(fruits2)}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"Difference  \u00a0: ${fruits.minus(fruits2)}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits2 is a subset of fruits\u00a0: ${fruits.containsAll(fruits2)}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fruits3 <span class=\"sy0\">=</span> fruits<br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits3\u00a0: $fruits3<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> areEqual <span class=\"sy0\">=</span> fruits.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fruits3.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits<span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits2 and fruits are equal \u00a0: $areEqual\"</span><span class=\"br0\">)</span><br/>   areEqual <span class=\"sy0\">=</span> fruits.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits3<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fruits3.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits<span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits3 and fruits are equal \u00a0: $areEqual<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fruits4 <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"st0\">\"apple\"</span>, <span class=\"st0\">\"orange\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits4\u00a0: $fruits4<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> isProperSubset <span class=\"sy0\">=</span> fruits.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits3<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>fruits3.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits<span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits3 is a proper subset of fruits\u00a0: $isProperSubset\"</span><span class=\"br0\">)</span><br/>   isProperSubset <span class=\"sy0\">=</span> fruits.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits4<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>fruits4.<span class=\"me1\">containsAll</span><span class=\"br0\">(</span>fruits<span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits4 is a proper subset of fruits\u00a0: $isProperSubset<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fruits5 <span class=\"sy0\">=</span> mutableSetOf<span class=\"br0\">(</span><span class=\"st0\">\"cherry\"</span>, <span class=\"st0\">\"blueberry\"</span>, <span class=\"st0\">\"raspberry\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits5\u00a0: $fruits5<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   fruits5 +<span class=\"sy0\">=</span> <span class=\"st0\">\"guava\"</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits5 + 'guava' \u00a0: $fruits5\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"fruits5 - 'cherry'\u00a0: ${fruits5 - \"</span>cherry<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 25, "block": "<pre class=\"text highlighted_source\">// Extend set type<br/>define set-&gt;issubsetof(p::set) =&gt; .intersection(#p)-&gt;size == .size<br/>define set-&gt;oncompare(p::set) =&gt; .intersection(#p)-&gt;size - .size<br/>\u00a0<br/>//\tSet creation<br/>local(set1) = set('j','k','l','m','n')<br/>local(set2) = set('m','n','o','p','q')<br/>\u00a0<br/>//Test m \u2208 S -- \"m is an element in set S\"<br/>#set1 &gt;&gt; 'm' <br/>\u00a0<br/>// A \u222a B -- union; a set of all elements either in set A or in set B.<br/>#set1-&gt;union(#set2)<br/>\u00a0<br/>//A \u2229 B -- intersection; a set of all elements in both set A and set B.<br/>#set1-&gt;intersection(#set2)<br/>\u00a0<br/>//A \u2216 B -- difference; a set of all elements in set A, except those in set B.<br/>#set1-&gt;difference(#set2)<br/>\u00a0<br/>//A \u2286 B -- subset; true if every element in set A is also in set B.<br/>#set1-&gt;issubsetof(#set2)<br/>\u00a0<br/>//A = B -- equality; true if every element of set A is in set B and vice-versa.<br/>#set1 == #set2</pre>"}, {"lang": "LFE", "loc": 30, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> set-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">new</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">0</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> set-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">add_element</span> 'a set-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">1</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> set-<span class=\"nu0\">3</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">from_list</span> '<span class=\"br0\">(</span>a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">2</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">is_element</span> 'a set-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>true<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> union <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">union</span> set-<span class=\"nu0\">2</span> set-<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">2</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">to_list</span> union<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> intersect <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">intersection</span> set-<span class=\"nu0\">2</span> set-<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">1</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">to_list</span> intersect<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> subtr <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">subtract</span> set-<span class=\"nu0\">3</span> set-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">1</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">to_list</span> subtr<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">is_subset</span> set-<span class=\"nu0\">2</span> set-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>true<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">=:=</span> set-<span class=\"nu0\">2</span> set-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>false<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> set-<span class=\"nu0\">4</span> <span class=\"br0\">(</span>sets<span class=\"sy0\">:</span><span class=\"me1\">add_element</span> 'b set-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"nu0\">2</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">8</span> <span class=\"nu0\">80</span> <span class=\"nu0\">48</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">=:=</span> set-<span class=\"nu0\">3</span> set-<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>true<br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 151, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>A$ <span class=\"sy0\">=</span><span class=\"st0\">\"red hot chili peppers rule OK\"</span><br/>B$ <span class=\"sy0\">=</span><span class=\"st0\">\"lady in red\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\" New set, in space-separated form. Extra spaces and duplicates will be removed. \"</span><br/><span class=\"kw1\">input</span> newSet$<br/> newSet$  <span class=\"sy0\">=</span><span class=\"kw2\">trim$</span><span class=\"br0\">(</span>           newSet$<span class=\"br0\">)</span><br/> newSet$  <span class=\"sy0\">=</span>stripBigSpaces$<span class=\"br0\">(</span> newSet$<span class=\"br0\">)</span><br/> newSet$  <span class=\"sy0\">=</span>removeDupes$<span class=\"br0\">(</span>    newSet$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" Set stored as the string '\"</span>; newSet$; <span class=\"st0\">\"'\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" 'red'  is an element of '\"</span>; A$; <span class=\"st0\">\"' is \"</span>; isAnElementOf$<span class=\"br0\">(</span> <span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span>  A$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" 'blue' is an element of '\"</span>; A$; <span class=\"st0\">\"' is \"</span>; isAnElementOf$<span class=\"br0\">(</span> <span class=\"st0\">\"blue\"</span><span class=\"sy0\">,</span>  A$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" 'red'  is an element of '\"</span>; B$; <span class=\"st0\">\"' is \"</span>; isAnElementOf$<span class=\"br0\">(</span> <span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span>  B$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" Union        of '\"</span>; A$; <span class=\"st0\">\"' &amp; '\"</span>; B$; <span class=\"st0\">\"' is '\"</span>; unionOf$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> B$<span class=\"br0\">)</span>; <span class=\"st0\">\"'.\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" Intersection of '\"</span>; A$; <span class=\"st0\">\"' &amp; '\"</span>; B$; <span class=\"st0\">\"' is '\"</span>; intersectionOf$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> B$<span class=\"br0\">)</span>; <span class=\"st0\">\"'.\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" Difference   of '\"</span>; A$; <span class=\"st0\">\"' &amp; '\"</span>; B$; <span class=\"st0\">\"' is '\"</span>; differenceOf$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> B$<span class=\"br0\">)</span>; <span class=\"st0\">\"'.\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" '\"</span>; A$; <span class=\"st0\">\"' equals '\"</span>;        A$; <span class=\"st0\">\"' is \"</span>; equalSets$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> A$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" '\"</span>; A$; <span class=\"st0\">\"' equals '\"</span>;        B$; <span class=\"st0\">\"' is \"</span>; equalSets$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> B$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span>  <span class=\"st0\">\" '\"</span>; A$; <span class=\"st0\">\"' is a subset of '\"</span>; B$; <span class=\"st0\">\"' is \"</span>; isSubsetOf$<span class=\"br0\">(</span> A$<span class=\"sy0\">,</span> B$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span>  <span class=\"st0\">\" 'red peppers' is a subset of 'red hot chili peppers rule OK' is \"</span>; isSubsetOf$<span class=\"br0\">(</span> <span class=\"st0\">\"red peppers\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"red hot chili peppers rule OK\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> removeDupes$<span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/>    numElements <span class=\"sy0\">=</span>countElements<span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">redim</span> elArray$<span class=\"br0\">(</span> numElements<span class=\"br0\">)</span>         <span class=\"co1\">'   ie 4 elements are array entries 1 to 4 and 0 is spare =\"\"</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> numElements<br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        elArray$<span class=\"br0\">(</span> m<span class=\"br0\">)</span> <span class=\"sy0\">=</span>el$<br/>    <span class=\"kw1\">next</span> m<br/>    <span class=\"kw1\">sort</span> elArray$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> numElements<br/>    b$           <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    penultimate$ <span class=\"sy0\">=</span><span class=\"st0\">\"999\"</span><br/>    <span class=\"kw1\">for</span> jk <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> numElements    <span class=\"co1\">'   do not use \"\" ( nuls) or elementsalready seen</span><br/>        <span class=\"kw1\">if</span> elArray$<span class=\"br0\">(</span> jk<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> elArray$<span class=\"br0\">(</span> jk<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span>penultimate$ <span class=\"kw1\">then</span> b$ <span class=\"sy0\">=</span>b$ <span class=\"sy0\">+</span>elArray$<span class=\"br0\">(</span> jk<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">:</span> penultimate$ <span class=\"sy0\">=</span>elArray$<span class=\"br0\">(</span> jk<span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">next</span> jk<br/>    b$ <span class=\"sy0\">=</span><span class=\"kw2\">trim$</span><span class=\"br0\">(</span> b$<span class=\"br0\">)</span><br/>    removeDupes$ <span class=\"sy0\">=</span>b$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> stripBigSpaces$<span class=\"br0\">(</span> a$<span class=\"br0\">)</span>   <span class=\"co1\">'   copy byte by byte, but id=f a space had a preceding space, ignore it.</span><br/>    lenA <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/>    penul$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/>        c$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> c$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\" \"</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> penul$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\" \"</span> <span class=\"kw1\">then</span><br/>                b$ <span class=\"sy0\">=</span>b$ <span class=\"sy0\">+</span>c$<br/>            <span class=\"kw1\">else</span><br/>                b$ <span class=\"sy0\">=</span>b$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span>c$<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        penul$ <span class=\"sy0\">=</span>c$<br/>    <span class=\"kw1\">next</span> i<br/>    stripBigSpaces$ <span class=\"sy0\">=</span>b$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> countElements<span class=\"br0\">(</span> a$<span class=\"br0\">)</span> <span class=\"co1\">'   count elements repr'd by space-separated words in string rep'n.</span><br/>    <span class=\"kw1\">if</span> isNul$<span class=\"br0\">(</span> a$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span> <span class=\"kw1\">then</span> countElements <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    countElements <span class=\"sy0\">=</span>i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isNul$<span class=\"br0\">(</span> a$<span class=\"br0\">)</span>    <span class=\"co1\">'   a nul set implies its string rep'n is length zero.</span><br/>    <span class=\"kw1\">if</span> a$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> isNul$ <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span> <span class=\"kw1\">else</span> isNul$ <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isAnElementOf$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span>    <span class=\"co1\">'   check element a$ exists in set b$.</span><br/>    isAnElementOf$ <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a$ <span class=\"sy0\">=</span>el$ <span class=\"kw1\">then</span> isAnElementOf$ <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span><br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> unionOf$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    o$ <span class=\"sy0\">=</span>a$<br/>    <span class=\"kw1\">do</span><br/>        w$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> w$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> isAnElementOf$<span class=\"br0\">(</span> w$<span class=\"sy0\">,</span> a$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span> <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span>w$<br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> w$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    unionOf$ <span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> intersectionOf$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>  <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>el$ <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> o$ <span class=\"sy0\">&lt;&gt;</span>el$<span class=\"br0\">)</span> <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span>el$ <br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    intersectionOf$ <span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> equalSets$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> a$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> b$<span class=\"br0\">)</span> <span class=\"kw1\">then</span> equalSets$ <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    i <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span> <span class=\"kw1\">then</span> equalSets$ <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> w$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    equalSets$ <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> differenceOf$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>   <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>el$ <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> o$ <span class=\"sy0\">&lt;&gt;</span>el$<span class=\"br0\">)</span> <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span>el$ <br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    differenceOf$ <span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isSubsetOf$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    isSubsetOf$ <span class=\"sy0\">=</span><span class=\"st0\">\"True\"</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span><br/>        el$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isAnElementOf$<span class=\"br0\">(</span> el$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> isSubsetOf$ <span class=\"sy0\">=</span><span class=\"st0\">\"False\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> el$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 69, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> emptySet<span class=\"br0\">(</span><span class=\"br0\">)</span>         <span class=\"kw1\">return</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> insert<span class=\"br0\">(</span>set<span class=\"sy0\">,</span> item<span class=\"br0\">)</span>  set<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> <span class=\"kw3\">remove</span><span class=\"br0\">(</span>set<span class=\"sy0\">,</span> item<span class=\"br0\">)</span>  set<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> member<span class=\"br0\">(</span>set<span class=\"sy0\">,</span> item<span class=\"br0\">)</span>  <span class=\"kw1\">return</span> set<span class=\"br0\">[</span>item<span class=\"br0\">]</span>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> size<span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>set<span class=\"br0\">)</span> <span class=\"kw1\">do</span> result <span class=\"sy0\">=</span> result <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> fromTable<span class=\"br0\">(</span>tbl<span class=\"br0\">)</span> <span class=\"co1\">-- ignore the keys of tbl</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> val <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>tbl<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\tresult<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> toArray<span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> key <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>set<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>result<span class=\"sy0\">,</span> key<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> printSet<span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>toArray<span class=\"br0\">(</span>set<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> union<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\tresult<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>setB<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\tresult<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> intersection<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> setB<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t\tresult<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> difference<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> setB<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t\tresult<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> subset<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> setB<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> properSubset<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> subset<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>size<span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"sy0\">~=</span> size<span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> equals<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> subset<span class=\"br0\">(</span>setA<span class=\"sy0\">,</span> setB<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>size<span class=\"br0\">(</span>setA<span class=\"br0\">)</span> <span class=\"sy0\">==</span> size<span class=\"br0\">(</span>setB<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; S\u00a0:= { 2, 3, 5, 7, 11, Pi, \"foo\", { 2/3, 3/4, 4/5 } };<br/>           S\u00a0:= {2, 3, 5, 7, 11, \"foo\", Pi, {2/3, 3/4, 4/5}}<br/>\u00a0<br/>&gt; type( S, set );<br/>                                  true<br/>\u00a0<br/>&gt; Pi in S;<br/>          Pi  in  {2, 3, 5, 7, 11, \"foo\", Pi, {2/3, 3/4, 4/5}}<br/>\u00a0<br/>&gt; if Pi in S then print( yes ) else print( no ) end:<br/>                                  yes<br/>\u00a0<br/>&gt; member( Pi, S );<br/>                                  true<br/>\u00a0<br/>&gt; if 4 in S then print( yes ) else print( no ) end:<br/>                                   no<br/>\u00a0<br/>&gt; evalb( { 2/3, 3/4, 4/5 } in S );<br/>                                  true<br/>\u00a0<br/>&gt; { a, b, c } union { 1, 2, 3 };<br/>                           {1, 2, 3, a, b, c}<br/>\u00a0<br/>&gt; { a, b, c } intersect { b, c, d };<br/>                                 {b, c}<br/>\u00a0<br/>&gt; { a, b, c } minus { b, c, d };<br/>                                  {a}<br/>\u00a0<br/>&gt; { a, b } subset { a, b, c };<br/>                                  true<br/>\u00a0<br/>&gt; { a, d } subset { a, b, c };<br/>                                 false<br/>\u00a0<br/>&gt; evalb( { 1, 2, 3 } = { 1, 2, 3 } );<br/>                                  true<br/>\u00a0<br/>&gt; evalb( { 1, 2, 3 } = { 1, 2, 4 } );<br/>                                 false<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">set1 = {\"a\", \"b\", \"c\", \"d\", \"e\"}; set2 = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};<br/>MemberQ[set1, \"a\"]<br/>Union[set1 , set2]<br/>Intersection[set1 , set2]<br/>Complement[set2, set1](*Set Difference*)<br/>MemberQ[Subsets[set2], set1](*Subset*)<br/>set1 == set2(*Equality*)<br/>set1 == set1(*Equality*)</pre>"}, {"lang": "MATLAB / Octave", "loc": 18, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>    <span class=\"co1\">% Set creation</span><br/>\ts = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>;     <span class=\"co1\">% numeric values</span><br/>\tt = <span class=\"br0\">{</span><span class=\"co2\">'a'</span>,<span class=\"co2\">'bb'</span>,<span class=\"co2\">'ccc'</span><span class=\"br0\">}</span>; <span class=\"co1\">% cell array of strings</span><br/>        u = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.html\"><span class=\"kw2\">unique</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;   <span class=\"co1\">% set consists only of unique elements</span><br/>    <span class=\"co1\">% Test m \u2208 S -- \"m is an element in set S\"</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ismember.html\"><span class=\"kw2\">ismember</span></a><span class=\"br0\">(</span>m, S<span class=\"br0\">)</span><br/>    <span class=\"co1\">% A \u222a B -- union; a set of all elements either in set A or in set B.</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/union.html\"><span class=\"kw2\">union</span></a><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><br/>    <span class=\"co1\">% A \u2229 B -- intersection; a set of all elements in both set A and set B.</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/intersect.html\"><span class=\"kw2\">intersect</span></a><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><br/>    <span class=\"co1\">% A \u2216 B -- difference; a set of all elements in set A, except those in set B.</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/setdiff.html\"><span class=\"kw2\">setdiff</span></a><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><br/>    <span class=\"co1\">% A \u2286 B -- subset; true if every element in set A is also in set B.</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ismember.html\"><span class=\"kw2\">ismember</span></a><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">% A = B -- equality; true if every element of set A is in set B and vice-versa. </span><br/>        isempty<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/setxor.html\"><span class=\"kw2\">setxor</span></a><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 78, "block": "<pre class=\"text highlighted_source\">/* illustrating some functions on sets; names are self-explanatory */<br/>\u00a0<br/>a: {1, 2, 3, 4};<br/>{1, 2, 3, 4}<br/>\u00a0<br/>b: {2, 4, 6, 8};<br/>{2, 4, 6, 8}<br/>\u00a0<br/>intersection(a, b);<br/>{2, 4}<br/>\u00a0<br/>union(a, b);<br/>{1, 2, 3, 4, 6, 8}<br/>\u00a0<br/>powerset(a);<br/>{{}, {1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 4}, {1, 3}, {1, 3, 4}, {1, 4}, {2}, {2, 3}, {2, 3, 4}, {2, 4}, {3}, {3, 4}, {4}}<br/>\u00a0<br/>set_partitions(a);<br/>{{{1}, {2}, {3}, {4}}, {{1}, {2}, {3, 4}}, {{1}, {2, 3}, {4}}, {{1}, {2, 3, 4}}, {{1}, {2, 4}, {3}}, {{1, 2}, {3}, {4}},<br/>{{1, 2}, {3, 4}}, {{1, 2, 3}, {4}}, {{1, 2, 3, 4}}, {{1, 2, 4}, {3}}, {{1, 3}, {2}, {4}}, {{1, 3}, {2, 4}}, {{1, 3, 4}, {2}},<br/>{{1, 4}, {2}, {3}}, {{1, 4}, {2, 3}}}<br/>\u00a0<br/>setdifference(a, b);<br/>{1, 3}<br/>\u00a0<br/>emptyp(a);<br/>false<br/>\u00a0<br/>elementp(2, a);<br/>true<br/>\u00a0<br/>cardinality(a);<br/>4<br/>\u00a0<br/>cartesian_product(a, b);<br/>{[1, 2], [1, 4], [1, 6], [1, 8], [2, 2], [2, 4], [2, 6], [2, 8], [3, 2], [3, 4], [3, 6], [3, 8], [4, 2], [4, 4], [4, 6], [4, 8]}<br/>\u00a0<br/>subsetp(a, b);<br/>false<br/>\u00a0<br/>symmdifference(a, b);<br/>{1, 3, 6, 8}<br/>\u00a0<br/>partition_set(union(a, b), evenp);<br/>[{1, 3}, {2, 4, 6, 8}]<br/>\u00a0<br/>c: setify(makelist(fib(n), n, 1, 20));<br/>{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765}<br/>\u00a0<br/>equiv_classes(c, lambda([m, n], mod(m - n, 3) = 0));<br/>{{1, 13, 34, 55, 610, 1597, 2584}, {2, 5, 8, 89, 233, 377, 4181}, {3, 21, 144, 987, 6765}}<br/>\u00a0<br/>disjointp(a, b);<br/>false<br/>\u00a0<br/>adjoin(7, a);<br/>{1, 2, 3, 4, 7}<br/>\u00a0<br/>a;<br/>{1, 2, 3, 4}<br/>\u00a0<br/>disjoin(1, a);<br/>{2, 3, 4}<br/>\u00a0<br/>a;<br/>{1, 2, 3, 4}<br/>\u00a0<br/>subset(c, primep);<br/>{2, 3, 5, 13, 89, 233, 1597}<br/>\u00a0<br/>permutations(a);<br/>{[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2],<br/> [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1],<br/> [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1],<br/> [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]}<br/>\u00a0<br/>setequalp(a, b);<br/>false</pre>"}, {"lang": "Nemerle", "loc": 27, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>using Nemerle.Collections;<br/>\u00a0<br/>module RCSet<br/>{<br/>    HasSubset[T](this super\u00a0: Set[T], sub\u00a0: Set[T])\u00a0: bool<br/>    {<br/>        super.ForAll(x =&gt; sub.Contains(x))<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def names1 = Set([\"Bob\", \"Billy\", \"Tom\", \"Dick\", \"Harry\"]);<br/>        def names2 = Set([\"Bob\", \"Mary\", \"Alice\", \"Louisa\"]);<br/>        //def names3 = Set([\"Bob\", \"Bob\"]);        // unfortunately, duplicated elements are not well handled by the stock<br/>                                                   // implementation, this statement would throw an ArgumentException<br/>        def elem = names1.Contains(\"Bob\");         // element test<br/>        def names1u2 = names1.Sum(names2);         // union<br/>        def names1d2 = names1.Subtract(names2);    // difference<br/>        def names1i2 = names1.Intersect(names2);   // intersection<br/>        def same = names1.Equals(names2);          // equality<br/>        def sub12 = names1.HasSubset(names2);      // subset<br/>\u00a0<br/>        WriteLine($\"$names1u2\\n$names1d2\\n$names1i2\");<br/>        WriteLine($\"$same\\t$sub12\");<br/>    }<br/>}</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">var # creation<br/>  s = {0,3,5,10}<br/>  t = {3..20, 50..55}<br/>\u00a0<br/>if 5 in s: echo \"5 is in!\" # element test<br/>\u00a0<br/>var<br/>  c = s + t # union<br/>  d = s * t # intersection<br/>  e = s - t # difference<br/>\u00a0<br/>if s &lt;= t: echo \"s \u2286 t\" # subset<br/>\u00a0<br/>if s &lt;= t: echo \"s \u2282 t\" # strong subset<br/>\u00a0<br/>if s == t: echo \"s = s\" # equality<br/>\u00a0<br/>s.incl(4) # add 4 to set<br/>s.excl(5) # remove 5 from set</pre>"}, {"lang": "Objective-C", "loc": 57, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> <span class=\"sy0\">*</span>s1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"a\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"b\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"c\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"d\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"e\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> <span class=\"sy0\">*</span>s2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"b\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"c\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"d\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"e\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"f\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"h\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> <span class=\"sy0\">*</span>s3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"b\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"c\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"d\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> <span class=\"sy0\">*</span>s4 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"b\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"c\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"d\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s1:\u00a0%@\"</span>, s1<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s2:\u00a0%@\"</span>, s2<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s3:\u00a0%@\"</span>, s3<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s4:\u00a0%@\"</span>, s4<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Membership</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"b in s1:\u00a0%d\"</span>, <span class=\"br0\">[</span>s1 containsObject<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"b\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"f in s1:\u00a0%d\"</span>, <span class=\"br0\">[</span>s1 containsObject<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"f\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Union</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> <span class=\"sy0\">*</span>s12 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>s1<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>s12 unionSet<span class=\"sy0\">:</span>s2<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s1 union s2:\u00a0%@\"</span>, s12<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Intersection</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> <span class=\"sy0\">*</span>s1i2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>s1<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>s1i2 intersectSet<span class=\"sy0\">:</span>s2<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s1 intersect s2:\u00a0%@\"</span>, s1i2<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Difference</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> <span class=\"sy0\">*</span>s1_2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>s1<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>s1_2 minusSet<span class=\"sy0\">:</span>s2<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s1 - s2:\u00a0%@\"</span>, s1_2<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Subset of</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s3 subset of s1:\u00a0%d\"</span>, <span class=\"br0\">[</span>s3 isSubsetOfSet<span class=\"sy0\">:</span>s1<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Equality</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"s3 = s4:\u00a0%d\"</span>, <span class=\"br0\">[</span>s3 isEqualToSet<span class=\"sy0\">:</span>s4<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Cardinality</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"size of s1:\u00a0%lu\"</span>, <span class=\"br0\">[</span>s1 count<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Has intersection (not disjoint)</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"does s1 intersect s2?\u00a0%d\"</span>, <span class=\"br0\">[</span>s1 intersectsSet<span class=\"sy0\">:</span>s2<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// Adding and removing elements from a mutable set</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> <span class=\"sy0\">*</span>mut_s1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableSet_Class/\"><span class=\"kw5\">NSMutableSet</span></a> setWithSet<span class=\"sy0\">:</span>s1<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>mut_s1 addObject<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"g\"</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"mut_s1 after adding g:\u00a0%@\"</span>, mut_s1<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>mut_s1 addObject<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"b\"</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"mut_s1 after adding b again:\u00a0%@\"</span>, mut_s1<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>mut_s1 removeObject<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"c\"</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"mut_s1 after removing c:\u00a0%@\"</span>, mut_s1<span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 68, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">module</span> IntSet <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">.</span>Make<span class=\"br0\">(</span><span class=\"kw1\">struct</span> <span class=\"kw1\">type</span> t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Create a module for our type of set *)</span><br/><span class=\"kw1\">module</span> IntSet <span class=\"sy0\">:</span><br/>  <span class=\"kw1\">sig</span><br/>    <span class=\"kw1\">type</span> elt <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/>    <span class=\"kw1\">type</span> t<br/>    <span class=\"kw1\">val</span> empty <span class=\"sy0\">:</span> t<br/>    <span class=\"kw1\">val</span> is_empty <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> mem <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> add <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> singleton <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> remove <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> union <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> inter <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> diff <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/>    <span class=\"kw1\">val</span> equal <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> subset <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> iter <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><br/>    <span class=\"kw1\">val</span> fold <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a<br/>    <span class=\"kw1\">val</span> for_all <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> exists <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/>    <span class=\"kw1\">val</span> filter <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>    <span class=\"kw1\">val</span> partition <span class=\"sy0\">:</span> <span class=\"br0\">(</span>elt <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">*</span> t<br/>    <span class=\"kw1\">val</span> cardinal <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/>    <span class=\"kw1\">val</span> elements <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><br/>    <span class=\"kw1\">val</span> min_elt <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> elt<br/>    <span class=\"kw1\">val</span> max_elt <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> elt<br/>    <span class=\"kw1\">val</span> choose <span class=\"sy0\">:</span> t <span class=\"sy0\">-&gt;</span> elt<br/>    <span class=\"kw1\">val</span> split <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">*</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">*</span> t<br/>    <span class=\"kw1\">val</span> find <span class=\"sy0\">:</span> elt <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> elt<br/>    <span class=\"kw1\">val</span> of_list <span class=\"sy0\">:</span> elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">-&gt;</span> t<br/>  <span class=\"kw1\">end</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>empty<span class=\"sy0\">;;</span> <span class=\"co1\">(* Empty set. A set is an abstract type that will not display in the interpreter *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>t <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>abstr<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>empty<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Get the previous set into a list *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> s1 <span class=\"sy0\">=</span> IntSet<span class=\"sy0\">.</span>of_list <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> s1 <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>t <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>abstr<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements s1<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> s2 <span class=\"sy0\">=</span> IntSet<span class=\"sy0\">.</span>of_list <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> s2 <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>t <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>abstr<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements s2<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>union s1 s2<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Union *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>inter s1 s2<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Intersection *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>diff s1 s2<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Difference *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>subset s1 s1<span class=\"sy0\">;;</span> <span class=\"co1\">(* Subset *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>subset <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>of_list <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> s1<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>equal <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>of_list <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> s1<span class=\"sy0\">;;</span> <span class=\"co1\">(* Equality *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>equal s1 s2<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>mem <span class=\"nu0\">2</span> s1<span class=\"sy0\">;;</span> <span class=\"co1\">(* Membership *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>mem <span class=\"nu0\">10</span> s1<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>cardinal s1<span class=\"sy0\">;;</span> <span class=\"co1\">(* Cardinality *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>add <span class=\"nu0\">99</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Create a new set by inserting *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">99</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> IntSet<span class=\"sy0\">.</span>elements <span class=\"br0\">(</span>IntSet<span class=\"sy0\">.</span>remove <span class=\"nu0\">3</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* Create a new set by deleting *)</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> IntSet<span class=\"sy0\">.</span>elt <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "ooRexx", "loc": 32, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"co1\">-- Set creation</span><br/><span class=\"co1\">-- Using the OF method</span><br/>s1 = <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- Explicit addition of individual items</span><br/>s2 = <span class=\"sy0\">.</span>set~new<br/>s2~put<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>s2~put<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>s2~put<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- group addition</span><br/>s3 = <span class=\"sy0\">.</span>set~new<br/>s3~putall<span class=\"br0\">(</span><span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- Test m\u00a0? S -- \"m is an element in set S\"</span><br/><span class=\"kw1\">say</span> s1~hasindex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> s3~hasindex<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"co1\">-- \"1 0\", which is \"true\" and \"false\"</span><br/><span class=\"co1\">--    A\u00a0? B -- union; a set of all elements either in set A or in set B.</span><br/>s4 = s2~union<span class=\"br0\">(</span>s3<span class=\"br0\">)</span>   <span class=\"co1\">-- {1, 2, 3, 4, 5, 6}</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'s4'</span>,s4<br/><span class=\"co1\">--    A\u00a0? B -- intersection; a set of all elements in both set A and set B.</span><br/>s5 = s1~intersection<span class=\"br0\">(</span>s2<span class=\"br0\">)</span>   <span class=\"co1\">-- {2, 4, 6}</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'s5'</span>,s5<br/><span class=\"co1\">--    A\u00a0? B -- difference; a set of all elements in set A, except those in set B.</span><br/>s6 = s1~difference<span class=\"br0\">(</span>s2<span class=\"br0\">)</span>   <span class=\"co1\">-- {1, 3, 5}</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'s6'</span>,s6<br/><span class=\"co1\">--    A\u00a0? B -- subset; true if every element in set A is also in set B.</span><br/><span class=\"kw1\">say</span> s1~subset<span class=\"br0\">(</span>s2<span class=\"br0\">)</span> s2~subset<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\">--  \"0 1\"</span><br/><span class=\"co1\">--    A = B -- equality; true if every element of set A is in set B and vice-versa.</span><br/><span class=\"co1\">-- No direct equivalence method, but the XOR method can be used to determine this</span><br/><span class=\"kw1\">say</span> s1~xor<span class=\"br0\">(</span>s4<span class=\"br0\">)</span>~isempty   <span class=\"co1\">-- true</span><br/><span class=\"kw1\">Exit</span><br/>show: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> set_name,set<br/>  <span class=\"kw1\">Say</span> set_name<span class=\"st0\">':'</span> set~makearray~makestring<span class=\"br0\">(</span><span class=\"br0\">(</span>LINE<span class=\"br0\">)</span>,<span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span></pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">setsubset<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#s<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>s<span class=\"sy0\">=</span><span class=\"kw1\">Set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>t<span class=\"sy0\">=</span><span class=\"kw1\">Set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">setunion</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">setintersect</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">setminus</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/>setsubset<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/>s<span class=\"sy0\">==</span>t</pre>"}, {"lang": "Pascal", "loc": 94, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Rosetta_Set<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$mode objfpc}{$H+}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> <span class=\"co2\">{$IFDEF UNIX} {$IFDEF UseCThreads}</span><br/>  cthreads<span class=\"sy1\">,</span> <span class=\"co2\">{$ENDIF} {$ENDIF}</span><br/>  Classes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$R *.res}</span><br/><span class=\"kw1\">type</span><br/>  CharSet <span class=\"sy3\">=</span> <span class=\"kw4\">set</span> <span class=\"kw1\">of</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  A<span class=\"sy1\">,</span> B<span class=\"sy1\">,</span> C<span class=\"sy1\">,</span> S<span class=\"sy1\">:</span> CharSet<span class=\"sy1\">;</span><br/>  M<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> SetToString<span class=\"br0\">(</span><span class=\"kw1\">const</span> ASet<span class=\"sy1\">:</span> CharSet<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    J<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">// Test all chars</span><br/>    <span class=\"kw1\">for</span> J <span class=\"kw1\">in</span> <span class=\"kw4\">char</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">// If the char is in set, add to result</span><br/>      <span class=\"kw1\">if</span> J <span class=\"kw1\">in</span> ASet <span class=\"kw1\">then</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">+</span> J <span class=\"sy3\">+</span> <span class=\"st0\">', '</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">// Clear the result</span><br/>    <span class=\"kw1\">if</span> Result &gt; <span class=\"st0\">''</span> <span class=\"kw1\">then</span><br/>      Delete<span class=\"br0\">(</span>Result<span class=\"sy1\">,</span> Length<span class=\"br0\">(</span>Result<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">procedure</span> PrintSet<span class=\"br0\">(</span><span class=\"kw1\">const</span> ASet<span class=\"sy1\">:</span> CharSet<span class=\"sy1\">;</span> <span class=\"kw1\">const</span> ASetName<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span> ATitle<span class=\"sy1\">:</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> ATitle &gt; <span class=\"st0\">''</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ATitle<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ASetName<span class=\"sy1\">,</span> <span class=\"st0\">' = ['</span><span class=\"sy1\">,</span> SetToString<span class=\"br0\">(</span>ASet<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">']'</span><span class=\"sy1\">,</span> <span class=\"re1\">#10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">procedure</span> ShowEqual<span class=\"br0\">(</span><span class=\"kw1\">const</span> ASetA<span class=\"sy1\">,</span> ASetB<span class=\"sy1\">:</span> CharSet<span class=\"sy1\">;</span> <span class=\"kw1\">const</span> ASetNameA<span class=\"sy1\">,</span> ASetNameB<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ASetNameA<span class=\"sy1\">,</span> <span class=\"st0\">' = ['</span><span class=\"sy1\">,</span> SetToString<span class=\"br0\">(</span>ASetA<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">']'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ASetNameB<span class=\"sy1\">,</span> <span class=\"st0\">' = ['</span><span class=\"sy1\">,</span> SetToString<span class=\"br0\">(</span>ASetB<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">']'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> ASetA <span class=\"sy3\">=</span> ASetB <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ASetNameA<span class=\"sy1\">,</span> <span class=\"st0\">' = '</span><span class=\"sy1\">,</span> ASetNameB<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ASetNameA<span class=\"sy1\">,</span> <span class=\"st0\">' &lt;&gt; '</span><span class=\"sy1\">,</span> ASetNameB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Set Creation</span><br/>  A <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"sy1\">,</span> <span class=\"st0\">'C'</span><span class=\"sy1\">,</span> <span class=\"st0\">'D'</span><span class=\"sy1\">,</span> <span class=\"st0\">'E'</span><span class=\"sy1\">,</span> <span class=\"st0\">'F'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  B <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'E'</span><span class=\"sy1\">,</span> <span class=\"st0\">'F'</span><span class=\"sy1\">,</span> <span class=\"st0\">'G'</span><span class=\"sy1\">,</span> <span class=\"st0\">'H'</span><span class=\"sy1\">,</span> <span class=\"st0\">'I'</span><span class=\"sy1\">,</span> <span class=\"st0\">'J'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  PrintSet<span class=\"br0\">(</span>A<span class=\"sy1\">,</span> <span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Set Creation'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PrintSet<span class=\"br0\">(</span>B<span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Test m \u2208 S -- \"m is an element in set S\"</span><br/>  M <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'A'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> M <span class=\"kw1\">in</span> A <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'\"A\" is in set A'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// A \u222a B -- union; a set of all elements either in set A or in set B.</span><br/>  S <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A <span class=\"sy3\">+</span> B<span class=\"sy1\">;</span><br/>  PrintSet<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> <span class=\"st0\">'S'</span><span class=\"sy1\">,</span> <span class=\"st0\">'S = A U B -- union; a set of all elements either in set A or in set B.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// A \u2229 B -- intersection; a set of all elements in both set A and set B.</span><br/>  S <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A <span class=\"sy3\">*</span> B<span class=\"sy1\">;</span><br/>  PrintSet<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> <span class=\"st0\">'S'</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">'S = A \u2229 B -- intersection; a set of all elements in both set A and set B.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// A \\ B -- difference; a set of all elements in set A, except those in set B.</span><br/>  S <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A <span class=\"sy3\">-</span> B<span class=\"sy1\">;</span><br/>  PrintSet<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> <span class=\"st0\">'S'</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">'S = A \\ B -- difference; a set of all elements in set A, except those in set B.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// A \u2286 B -- subset; true if every element in set A is also in set B.</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'A \u2286 B -- subset; true if every element in set A is also in set B.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> A &lt;<span class=\"sy3\">=</span> B <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'A in B'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'A is not in B'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//A = B -- equality; true if every element of set A is in set B and vice-versa.</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'A = B -- equality; true if every element of set A is in set B and vice-versa.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  ShowEqual<span class=\"br0\">(</span>A<span class=\"sy1\">,</span> B<span class=\"sy1\">,</span> <span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  S <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A <span class=\"sy3\">*</span> B<span class=\"sy1\">;</span><br/>  C <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'E'</span><span class=\"sy1\">,</span> <span class=\"st0\">'F'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  ShowEqual<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> C<span class=\"sy1\">,</span> <span class=\"st0\">'S'</span><span class=\"sy1\">,</span> <span class=\"st0\">'C'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">readln</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 113, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Set<span class=\"sy0\">;</span> <span class=\"co1\"># likely will conflict with stuff on CPAN</span><br/><span class=\"kw2\">use</span> overload<br/>\t<span class=\"st_h\">'\"\"'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;str</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'bool'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;count</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'+='</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;add</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'-='</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;del</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'-'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;diff</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'=='</span>\t<span class=\"sy0\">=&gt;</span> \\<span class=\"sy0\">&amp;</span><span class=\"kw1\">eq</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'&amp;'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;intersection</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'|'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;union</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'^'</span>\t<span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;xdiff</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> str <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$set</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"co1\"># This has drawbacks: stringification is used as set key</span><br/>\t<span class=\"co1\"># if the set is added to another set as an element, which</span><br/>\t<span class=\"co1\"># may cause inconsistencies if the element set is modified</span><br/>\t<span class=\"co1\"># later.  In general, a hash key loses its object identity</span><br/>\t<span class=\"co1\"># anyway, so it's not unique to us.</span><br/>\t<span class=\"st0\">\"Set{ \"</span><span class=\"sy0\">.</span>  <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"$_\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%$set</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" }\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$pkg</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$h</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> add <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$elem</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$set</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$elem</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$elem</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$set</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> del <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$elem</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"re0\">$set</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$elem</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$set</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> has <span class=\"br0\">{</span> <span class=\"co1\"># set has element</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$elem</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$set</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$elem</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> union <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> <span class=\"re0\">%$this</span><span class=\"sy0\">,</span> <span class=\"re0\">%$that</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> intersection <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Set<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$this</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$s</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$that</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$s</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> diff <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> Set<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$this</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$s</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$that</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$s</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> xdiff <span class=\"br0\">{</span> <span class=\"co1\"># xor, symmetric diff</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Set<span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">-</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"re0\">$that</span> <span class=\"sy0\">-</span> <span class=\"re0\">$this</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> count <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw1\">eq</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">-</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$that</span> <span class=\"sy0\">-</span> <span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> contains <span class=\"br0\">{</span> <span class=\"co1\"># this is a superset of that</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">,</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$that</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> Set<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> Set<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># not the brightest idea</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"set x is: $x<span class=\"es0\">\\n</span>set y is: $y<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_ is\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" not\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" in y<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"union: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">|</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"intersect: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"z = x - y = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"y is \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a subset of x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"z is \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a subset of x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"z = (x | y) - (x &amp; y) = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">|</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"w = x ^ y = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">^</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"w is \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"equal to z<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"w is \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"equal to x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>a b c<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>b c d<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>a b c d e<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>ok <span class=\"st_h\">'c'</span> \u2208 <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c is an element in set A\"</span><span class=\"sy0\">;</span><br/>nok <span class=\"st_h\">'d'</span> \u2208 <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"st0\">\"d is not an element in set A\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>is<span class=\"sy0\">-</span>deeply <span class=\"re0\">$a</span> \u222a <span class=\"re0\">$b</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>a b c d<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"union; a set of all elements either in set A or in set B\"</span><span class=\"sy0\">;</span><br/>is<span class=\"sy0\">-</span>deeply <span class=\"re0\">$a</span> \u2229 <span class=\"re0\">$b</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>b c<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"intersection; a set of all elements in both set A and set B\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">is</span> <span class=\"re0\">$a</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>a<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"difference; a set of all elements in set A, except those in set B\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>ok <span class=\"re0\">$a</span> \u2286 <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"st0\">\"subset; true if every element in set A is also in set B\"</span><span class=\"sy0\">;</span><br/>nok <span class=\"re0\">$c</span> \u2286 <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"st0\">\"subset; false if every element in set A is not also in set B\"</span><span class=\"sy0\">;</span><br/>ok <span class=\"re0\">$a</span> \u2282 <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strict subset; true if every element in set A is also in set B\"</span><span class=\"sy0\">;</span><br/>nok <span class=\"re0\">$a</span> \u2282 <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strict subset; false for equal sets\"</span><span class=\"sy0\">;</span><br/>ok <span class=\"re0\">$a</span> <span class=\"sy0\">===</span> set<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>a b c<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"equality; true if every element of set A is in set B and vice-versa\"</span><span class=\"sy0\">;</span><br/>nok <span class=\"re0\">$a</span> <span class=\"sy0\">===</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"st0\">\"equality; false for differing sets\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 62, "block": "<pre class=\"text highlighted_source\">sequence set1 = {1,2,3},<br/>         set2 = {3,4,5}<br/>\u00a0<br/>function element(object x, sequence set)<br/>    return find(x,set)!=0<br/>end function<br/>\u00a0<br/>function union(sequence set1, sequence set2)<br/>    for i=1 to length(set2) do<br/>        if not element(set2[i],set1) then<br/>            set1 = append(set1,set2[i])<br/>        end if<br/>    end for<br/>    return set1<br/>end function<br/>\u00a0<br/>function intersection(sequence set1, sequence set2)<br/>sequence res = {}<br/>    for i=1 to length(set1) do<br/>        if element(set1[i],set2) then<br/>            res = append(res,set1[i])<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function difference(sequence set1, sequence set2)<br/>sequence res = {}<br/>    for i=1 to length(set1) do<br/>        if not element(set1[i],set2) then<br/>            res = append(res,set1[i])<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function subset(sequence set1, sequence set2)<br/>    for i=1 to length(set1) do<br/>        if not element(set1[i],set2) then<br/>            return false<br/>        end if<br/>    end for<br/>    return true<br/>end function<br/>\u00a0<br/>function equality(sequence set1, sequence set2)<br/>    if length(set1)!=length(set2) then<br/>        return false<br/>    end if<br/>    return subset(set1,set2)<br/>end function<br/>\u00a0<br/>--test code:<br/>?element(3,set1)        -- 1<br/>?element(4,set1)        -- 0<br/>?union(set1,set2)       -- {1,2,3,4,5}<br/>?intersection(set1,set2) -- {3}<br/>?difference(set1,set2)  -- {1,2}<br/>?subset(set1,set2)      -- 0<br/>?subset({1,2},set1)     -- 1<br/>?equality(set1,set2)    -- 0<br/>?equality(set1,{3,1,2}) -- 1</pre>"}, {"lang": "PicoLisp", "loc": 46, "block": "<pre class=\"text highlighted_source\">(setq<br/>   Set1 (1 2 3 7 abc \"def\" (u v w))<br/>   Set2 (2 3 5 hello (x y z))<br/>   Set3 (3 hello (x y z)) )<br/>\u00a0<br/>\u00a0<br/># Element tests (any non-NIL value means \"yes\")<br/>: (member \"def\" Set1)<br/>-&gt; (\"def\" (u v w))<br/>\u00a0<br/>: (member \"def\" Set2)<br/>-&gt; NIL<br/>\u00a0<br/>: (member '(x y z) Set2)<br/>-&gt; ((x y z))<br/>\u00a0<br/>\u00a0<br/># Union<br/>: (uniq (append Set1 Set2))<br/>-&gt; (1 2 3 7 abc \"def\" (u v w) 5 hello (x y z))<br/>\u00a0<br/>\u00a0<br/># Intersection<br/>: (sect Set1 Set2)<br/>-&gt; (2 3)<br/>\u00a0<br/>\u00a0<br/># Difference<br/>: (diff Set1 Set2)<br/>-&gt; (1 7 abc \"def\" (u v w))<br/>\u00a0<br/>\u00a0<br/># Test for subset<br/>: (not (diff Set1 Set2))<br/>-&gt; NIL  # Set1 is not a subset of Set2<br/>\u00a0<br/>: (not (diff Set3 Set2))<br/>-&gt; T  # Set3 is a subset of Set2<br/>\u00a0<br/>\u00a0<br/># Test for equality<br/>: (= (sort (copy Set1)) (sort (copy Set2)))<br/>-&gt; NIL<br/>\u00a0<br/>: (= (sort (copy Set2)) (sort (copy Set2)))<br/>-&gt; T</pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"br0\">[</span>System.Collections.Generic.HashSet<span class=\"br0\">[</span><span class=\"re3\">object</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$set1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><br/><span class=\"br0\">[</span>System.Collections.Generic.HashSet<span class=\"br0\">[</span><span class=\"re3\">object</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$set2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>..<span class=\"nu0\">6</span><br/>\u00a0<br/><span class=\"co1\">#            Operation           +     Definition      +          Result</span><br/><span class=\"co1\">#--------------------------------+---------------------+-------------------------</span><br/><span class=\"re0\">$set1</span>.UnionWith<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>           <span class=\"co1\"># Union                 $set1 = 1, 2, 3, 4, 5, 6</span><br/><span class=\"re0\">$set1</span>.IntersectWith<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>       <span class=\"co1\"># Intersection          $set1 = 3, 4</span><br/><span class=\"re0\">$set1</span>.ExceptWith<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>          <span class=\"co1\"># Difference            $set1 = 1, 2</span><br/><span class=\"re0\">$set1</span>.SymmetricExceptWith<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span> <span class=\"co1\"># Symmetric difference  $set1 = 1, 2, 6, 5</span><br/><span class=\"re0\">$set1</span>.IsSupersetOf<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>        <span class=\"co1\"># Test superset         False</span><br/><span class=\"re0\">$set1</span>.IsSubsetOf<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>          <span class=\"co1\"># Test subset           False</span><br/><span class=\"re0\">$set1</span>.Equals<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>              <span class=\"co1\"># Test equality         False</span><br/><span class=\"re0\">$set1</span>.IsProperSupersetOf<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>  <span class=\"co1\"># Test proper superset  False</span><br/><span class=\"re0\">$set1</span>.IsProperSubsetOf<span class=\"br0\">(</span><span class=\"re0\">$set2</span><span class=\"br0\">)</span>    <span class=\"co1\"># Test proper subset    False</span><br/>\u00a0<br/><span class=\"nu0\">5</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$set1</span>                      <span class=\"co1\"># Test membership       False</span><br/><span class=\"nu0\">7</span> <span class=\"sy0\">-</span>notin <span class=\"re0\">$set1</span>                   <span class=\"co1\"># Test non-membership   True</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 50, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>lists<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>set <span class=\"sy1\">:-</span><br/>\tA <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tB <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   is_set<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w is a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   is_set<span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w is a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% create a set from a list</span><br/>\u00a0<br/>\tlist_to_set<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> BS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   is_set<span class=\"br0\">(</span>BS<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~nCreate a set from a list~n~w is a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>BS<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not a set~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>BS<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tintersection<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~n~w intersection ~w =&gt; ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tunion<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> U<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w union ~w =&gt; ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> U<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdifference<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w difference ~w =&gt; ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span> BS<span class=\"sy4\">,</span> D<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tX <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   subset<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> A<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~n~w is a subset of ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not a subset of ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   subset<span class=\"br0\">(</span>Y<span class=\"sy4\">,</span> A<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w is a subset of ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Y<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not a subset of ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Y<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tZ <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>  equal<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> A<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~n~w is equal to ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Z<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not equal to ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Z<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tT <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>  equal<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> A<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w is equal to ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>T<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   format<span class=\"br0\">(</span><span class=\"st_h\">'~w is not equal to ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>T<span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% compute difference of sets</span><br/>difference<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\texclude<span class=\"br0\">(</span>member_<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> A<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>member_<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmember<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>equal<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>equal<span class=\"br0\">(</span><span class=\"br0\">[</span>H1 <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tselect<span class=\"br0\">(</span>H1<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> B1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tequal<span class=\"br0\">(</span>T1<span class=\"sy4\">,</span> B1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 170, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s booleanText<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"co1\">;returns 'True' or 'False' for a boolean input</span><br/>  <span class=\"kw1\">If</span> b: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"True\"</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"False\"</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s listSetElements<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter.s <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"co1\">;format elements for display</span><br/>  <span class=\"kw1\">Protected</span> output$<br/>\u00a0<br/>  <span class=\"kw1\">ForEach</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    output$ <span class=\"sy0\">+</span> MapKey<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> delimeter<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RTrim</span><span class=\"br0\">(</span>output$, delimeter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s listSortedSetElements<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter.s <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"co1\">;format elements for display as sorted for easy comparison</span><br/>  <span class=\"kw1\">Protected</span> output$<br/>  <span class=\"kw1\">NewList</span> b.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">ForEach</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> MapKey<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw2\">SortList</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending <span class=\"sy0\">|</span> #PB_Sort_NoCase<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    output$ <span class=\"sy0\">+</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> delimeter<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RTrim</span><span class=\"br0\">(</span>output$, delimeter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> cardinalityOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> createSet<span class=\"br0\">(</span>elements.s, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter.s <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span>, clearSet <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, elementCount<br/>\u00a0<br/>  <span class=\"kw1\">If</span> clearSet: ClearMap<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span> <br/>  elementCount <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>elements, delimeter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">;add one for the last element which won't have a delimeter</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> elementCount<br/>    AddMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>elements, i, delimeter<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> adjoinTo<span class=\"br0\">(</span>elements.s, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter.s <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> createSet<span class=\"br0\">(</span>elements, o<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> disjoinFrom<span class=\"br0\">(</span>elements.s, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span>, delimeter.s <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, elementCount<br/>\u00a0<br/>  elementCount <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>elements, delimeter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">;add one for the last element which won't have a delimeter</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> elementCount<br/>    DeleteMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>elements, i, delimeter<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isElementOf<span class=\"br0\">(</span>element.s, Map a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> FindMapElement<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, element<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span> unionOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  CopyMap<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    AddMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> intersectionOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  ClearMap<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      AddMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> differenceOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  CopyMap<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      DeleteMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      AddMapElement<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> MapSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isSubsetOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;boolean</span><br/>  <span class=\"kw1\">ForEach</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> FindMapElement<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, MapKey<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isProperSubsetOf<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;boolean</span><br/>  <span class=\"kw1\">If</span> MapSize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> MapSize<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> isSubsetOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isEqualTo<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span>, Map b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> MapSize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> MapSize<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> isSubsetOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isEmpty<span class=\"br0\">(</span>Map a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;boolean</span><br/>  <span class=\"kw1\">If</span> MapSize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  NewMap a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  NewMap b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  NewMap o<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">;for output sets</span><br/>  NewMap c<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  createSet<span class=\"br0\">(</span><span class=\"st0\">\"red blue green orange yellow\"</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Set A = \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of cardinality \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cardinalityOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  createSet<span class=\"br0\">(</span><span class=\"st0\">\"lady green red\"</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Set B = \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of cardinality \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cardinalityOf<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'red' is an element of A is \"</span> <span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isElementOf<span class=\"br0\">(</span><span class=\"st0\">\"red\"</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'red' is an element of B is \"</span> <span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isElementOf<span class=\"br0\">(</span><span class=\"st0\">\"red\"</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'blue' is an element of B is \"</span> <span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isElementOf<span class=\"br0\">(</span><span class=\"st0\">\"blue\"</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  unionOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span>, o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Union of A &amp; B is \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  intersectionOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span>, o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Intersection of  A &amp; B is \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  differenceOf<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span>, o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Difference of  A &amp; B is \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isEqualTo<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isEqualTo<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  createSet<span class=\"br0\">(</span><span class=\"st0\">\"red green\"</span>, c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is a subset of \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span><span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isSubsetOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is a proper subset of \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span><span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isProperSubsetOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is a proper subset of \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span><span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isProperSubsetOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>listSortedSetElements<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is a proper subset of \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span><span class=\"sy0\">+</span> booleanText<span class=\"br0\">(</span>isProperSubsetOf<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Set C = \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of cardinality \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cardinalityOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  adjoinTo<span class=\"br0\">(</span><span class=\"st0\">\"dog cat mouse\"</span>, c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Add 'dog cat mouse' to C to get \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of cardinality \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cardinalityOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  disjoinFrom<span class=\"br0\">(</span><span class=\"st0\">\"red green dog\"</span>, c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Take away 'red green dog' from C to get \"</span> <span class=\"sy0\">+</span> listSortedSetElements<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of cardinality \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cardinalityOf<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> #crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 49, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> s1<span class=\"sy0\">,</span> s2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 | s2 <span class=\"co1\"># Union</span><br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 &amp; s2 <span class=\"co1\"># Intersection</span><br/><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 - s2 <span class=\"co1\"># Difference</span><br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 <span class=\"sy0\">&lt;</span> s1 <span class=\"co1\"># True subset</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;</span> s1 <span class=\"co1\"># True subset</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 <span class=\"sy0\">&lt;=</span> s1 <span class=\"co1\"># Subset</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> s1 <span class=\"co1\"># Subset</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">==</span> s1 <span class=\"co1\"># Equality</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 <span class=\"sy0\">==</span> s2 <span class=\"co1\"># Equality</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">in</span> s1 <span class=\"co1\"># Membership</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">10</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> s1 <span class=\"co1\"># Non-membership</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> s1 <span class=\"co1\"># True superset</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> s1 <span class=\"co1\"># True superset</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;=</span> s1 <span class=\"co1\"># Superset</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 ^ s2 <span class=\"co1\"># Symmetric difference</span><br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Cardinality</span><br/><span class=\"nu0\">4</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1<br/><span class=\"br0\">{</span><span class=\"nu0\">99</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1.<span class=\"me1\">discard</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1<br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 |<span class=\"sy0\">=</span> s2 <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1<br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 -<span class=\"sy0\">=</span> s2 <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1<br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1 ^<span class=\"sy0\">=</span> s2 <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s1<br/><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define A (set 1 2 3 4))<br/>(define B (set 3 4 5 6))<br/>(define C (set 4 5))<br/>\u00a0<br/>(set-union A B)    \u00a0; gives (set 1 2 3 4 5 6)<br/>(set-intersect A B)\u00a0; gives (set 3 4)<br/>(set-subtract A B) \u00a0; gives (set 1 2)<br/>(set=? A B)        \u00a0; gives #f<br/>(subset? C A)      \u00a0; gives #f<br/>(subset? C B)      \u00a0; gives #t<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 56, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates some  common   SET   functions.                            */</span><br/>truth<span class=\"sy0\">.</span>0= <span class=\"st0\">'false'</span>;            truth<span class=\"sy0\">.</span>1= <span class=\"st0\">\"true\"</span>    <span class=\"coMULTI\">/*two common names for a truth table.   */</span><br/>set<span class=\"sy0\">.</span>=                                           <span class=\"coMULTI\">/*the  order  of sets isn't important.  */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> setAdd <span class=\"st0\">'prime'</span>,<span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><br/><span class=\"kw1\">call</span> setSay <span class=\"st0\">'prime'</span>                             <span class=\"coMULTI\">/*a small set of some  prime numbers.   */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> setAdd <span class=\"st0\">'emirp'</span>,<span class=\"nu0\">97</span> <span class=\"nu0\">97</span> <span class=\"nu0\">89</span> <span class=\"nu0\">83</span> <span class=\"nu0\">79</span> <span class=\"nu0\">73</span> <span class=\"nu0\">71</span> <span class=\"nu0\">67</span> <span class=\"nu0\">61</span> <span class=\"nu0\">59</span> <span class=\"nu0\">53</span> <span class=\"nu0\">47</span> <span class=\"nu0\">43</span> <span class=\"nu0\">41</span> <span class=\"nu0\">37</span> <span class=\"nu0\">31</span> <span class=\"nu0\">29</span> <span class=\"nu0\">23</span> <span class=\"nu0\">19</span> <span class=\"nu0\">17</span> <span class=\"nu0\">13</span> <span class=\"nu0\">11</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">call</span> setSay <span class=\"st0\">'emirp'</span>                             <span class=\"coMULTI\">/*a small set of  backward  primes.     */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> setAdd <span class=\"st0\">'happy'</span>,<span class=\"nu0\">1</span> <span class=\"nu0\">7</span> <span class=\"nu0\">10</span> <span class=\"nu0\">13</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">28</span> <span class=\"nu0\">31</span> <span class=\"nu0\">32</span> <span class=\"nu0\">44</span> <span class=\"nu0\">49</span> <span class=\"nu0\">68</span> <span class=\"nu0\">70</span> <span class=\"nu0\">79</span> <span class=\"nu0\">82</span> <span class=\"nu0\">86</span> <span class=\"nu0\">91</span> <span class=\"nu0\">100</span> <span class=\"nu0\">94</span> <span class=\"nu0\">97</span> <span class=\"nu0\">97</span> <span class=\"nu0\">97</span> <span class=\"nu0\">97</span> <span class=\"nu0\">97</span><br/><span class=\"kw1\">call</span> setSay <span class=\"st0\">'happy'</span>                             <span class=\"coMULTI\">/*a small set of some  happy  numbers.  */</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">11</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">100</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">10</span>                    <span class=\"coMULTI\">/*see if  PRIME  contains some numbers. */</span><br/>      <span class=\"kw1\">call</span> setHas  <span class=\"st0\">'prime'</span>, j<br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'             prime contains'</span>     j<span class=\"st0\">\":\"</span>     truth<span class=\"sy0\">.</span><span class=\"kw4\">result</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> setUnion  <span class=\"st0\">'prime'</span>,<span class=\"st0\">'happy'</span>,<span class=\"st0\">'eweion'</span>;  <span class=\"kw1\">call</span> setSay <span class=\"st0\">'eweion'</span>                <span class=\"coMULTI\">/* (sic). */</span><br/><span class=\"kw1\">call</span> setCommon <span class=\"st0\">'prime'</span>,<span class=\"st0\">'happy'</span>,<span class=\"st0\">'common'</span>;  <span class=\"kw1\">call</span> setSay <span class=\"st0\">'common'</span><br/><span class=\"kw1\">call</span> setDiff   <span class=\"st0\">'prime'</span>,<span class=\"st0\">'happy'</span>,<span class=\"st0\">'diff'</span> \u00a0;  <span class=\"kw1\">call</span> setSay <span class=\"st0\">'diff'</span>;        _=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> setSubset <span class=\"st0\">'prime'</span>,<span class=\"st0\">'happy'</span>        \u00a0;  <span class=\"kw1\">say</span> _ <span class=\"st0\">'prime is a subset of happy:'</span> truth<span class=\"sy0\">.</span><span class=\"kw4\">result</span><br/><span class=\"kw1\">call</span> setEqual  <span class=\"st0\">'prime'</span>,<span class=\"st0\">'emirp'</span>        \u00a0;  <span class=\"kw1\">say</span> _ <span class=\"st0\">'prime is  equal   to emirp:'</span> truth<span class=\"sy0\">.</span><span class=\"kw4\">result</span><br/><span class=\"kw1\">exit</span>                                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>setHas:    <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> set<span class=\"sy0\">.</span>; <span class=\"kw1\">arg</span> _ <span class=\"sy0\">.</span>,! <span class=\"sy0\">.</span>; <span class=\"kw1\">return</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>!, set<span class=\"sy0\">.</span>_<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><br/>setAdd:    <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'add'</span>    , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setDiff:   <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'diff'</span>   , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setSay:    <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'say'</span>    , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setUnion:  <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'union'</span>  , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setCommon: <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'common'</span> , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setEqual:  <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'equal'</span>  , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>setSubset: <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'subSet'</span> , <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>set$: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> set<span class=\"sy0\">.</span>;   <span class=\"kw1\">arg</span> $,_1,_2,_3;   set_=set<span class=\"sy0\">.</span>_1;   t=_3;   s=t;  \u00a0!=<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> $==<span class=\"st0\">'SAY'</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">\"[set.\"</span>_1<span class=\"st0\">']= '</span>set<span class=\"sy0\">.</span>_1;   <span class=\"kw1\">return</span> set<span class=\"sy0\">.</span>_1;   <span class=\"kw3\">end</span><br/>      <span class=\"kw1\">if</span> $==<span class=\"st0\">'UNION'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>                          <span class=\"kw1\">call</span> set$ <span class=\"st0\">'add'</span>, _3, set<span class=\"sy0\">.</span>_1<br/>                          <span class=\"kw1\">call</span> set$ <span class=\"st0\">'add'</span>, _3, set<span class=\"sy0\">.</span>_2<br/>                          <span class=\"kw1\">return</span> set<span class=\"sy0\">.</span>_3<br/>                          <span class=\"kw3\">end</span><br/>      add=$==<span class=\"st0\">'ADD'</span>;  common=$==<span class=\"st0\">'COMMON'</span>; diff=$==<span class=\"st0\">'DIFF'</span>; eq=$==<span class=\"st0\">'EQUAL'</span>; subset=$==<span class=\"st0\">'SUBSET'</span><br/>      <span class=\"kw1\">if</span> common <span class=\"sy0\">|</span> diff <span class=\"sy0\">|</span> eq <span class=\"sy0\">|</span> subset  <span class=\"kw3\">then</span> s=_2<br/>      <span class=\"kw1\">if</span> add  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  set_=_2;  t=_1;  s=_1;  <span class=\"kw3\">end</span><br/>\u00a0<br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>set_<span class=\"br0\">)</span>;       _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>set_, j<span class=\"br0\">)</span>;       has=<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>_, set<span class=\"sy0\">.</span>s<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>add    <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>has<span class=\"br0\">)</span> <span class=\"sy0\">|</span>,<br/>             <span class=\"br0\">(</span>common <span class=\"sy0\">&amp;</span>  has<span class=\"br0\">)</span> <span class=\"sy0\">|</span>,<br/>             <span class=\"br0\">(</span>diff   <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>has<span class=\"br0\">)</span>       <span class=\"kw3\">then</span> set<span class=\"sy0\">.</span>t=<span class=\"kw6\">space</span><span class=\"br0\">(</span>set<span class=\"sy0\">.</span>t _<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>eq <span class=\"sy0\">|</span> subset<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>has  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>          <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> subset  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> eq      <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                                   <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> set$<span class=\"br0\">(</span><span class=\"st0\">'equal'</span>, _2, _1, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> set<span class=\"sy0\">.</span>t</pre>"}, {"lang": "Ring", "loc": 115, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Set<br/>\u00a0<br/>arr = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]<br/>for n = 1 to 25<br/>     add(arr,\"\")<br/>next <br/>seta = \"1010101\"<br/>see \"Set A: \" + arrset(arr,seta) + nl<br/>setb = \"0111110\"<br/>see \"Set B: \" + arrset(arr,setb) + nl<br/>elementm = \"0000010\"<br/>see \"Element M: \" + arrset(arr,elementm) + nl<br/>\u00a0<br/>temp = arrsetinsec(elementm,seta)<br/>if len(temp) &gt; 0 <br/>   see \"M is an element of set A\" + nl<br/>else<br/>   see \"M is not an element of set A\" + nl<br/>ok<br/>temp = arrsetinsec(elementm,setb)<br/>if len(temp) &gt; 0 <br/>   see \"M is an element of set B\" + nl<br/>else<br/>   see \"M is not an element of set B\" + nl<br/>ok<br/>\u00a0<br/>see \"The union of A and B is: \" <br/>see arrsetunion(seta,setb) + nl<br/>see \"The intersection of A and B is: \"<br/>see  arrsetinsec(seta,setb) + nl<br/>see \"The difference of A and B is: \" <br/>see arrsetnot(seta,setb) + nl<br/>\u00a0<br/>flag = arrsetsub(seta,setb)<br/>if flag = 1 <br/>   see \"Set A is a subset of set B\" + nl<br/>else<br/>   see \"Set A is not a subset of set B\" + nl<br/>ok<br/>if seta = setb<br/>   see \"Set A is equal to set B\" + nl<br/>else<br/>   see \"Set A is not equal to set B\" + nl<br/>ok<br/>\u00a0<br/>func arrset(arr,set)<br/>       o = \"\"<br/>       for i = 1 to 7<br/>            if set[i] = \"1\"<br/>                o = o + arr[i] + \", \"<br/>            ok<br/>       next<br/>       return left(o,len(o)-2)<br/>\u00a0<br/>func arrsetunion(seta,setb)<br/>       o = \"\"<br/>       union = list(len(seta))<br/>       for n = 1 to len(seta)<br/>            if seta[n] = \"1\" or setb[n] = \"1\"<br/>               union[n] = \"1\"<br/>            else<br/>               union[n] = \"0\"<br/>            ok<br/>       next<br/>       for i = 1 to len(union)<br/>            if union[i] = \"1\"<br/>                o = o + arr[i] + \", \"<br/>            ok<br/>       next<br/>       return o<br/>\u00a0<br/>func arrsetinsec(setc,setd)<br/>       o = \"\"<br/>       union = list(len(setc))<br/>       for n = 1 to len(setc)<br/>            if setc[n] = \"1\" and setd[n] = \"1\"<br/>               union[n] = \"1\"<br/>            else<br/>               union[n] = \"0\"<br/>            ok<br/>       next<br/>       for i = 1 to len(union)<br/>            if union[i] = \"1\"<br/>                o = o + arr[i] + \", \"<br/>            ok<br/>       next<br/>       return o<br/>\u00a0<br/>func arrsetnot(seta,setb)<br/>       o = \"\"<br/>       union = list(len(seta))<br/>       for n = 1 to len(seta)<br/>            if seta[n] = \"1\" and setb[n] = \"0\"<br/>               union[n] = \"1\"<br/>            else<br/>               union[n] = \"0\"<br/>            ok<br/>       next<br/>       for i = 1 to len(union)<br/>            if union[i] = \"1\"<br/>                o = o + arr[i] + \", \"<br/>            ok<br/>       next<br/>       return o<br/>\u00a0<br/>func arrsetsub(setc,setd)<br/>       flag = 1<br/>       for n = 1 to len(setc)<br/>            if setc[n] = \"1\" and setd[n] = \"0\"<br/>               flag = 0<br/>            ok<br/>       next<br/>       return flag<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 43, "block": "<pre class=\"ruby highlighted_source\"><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> s1, s2 = <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">to_set</span> <span class=\"co1\"># different ways of creating a set</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"co1\">#&lt;Set: {1, 2, 3, 4}&gt;, #&lt;Set: {5, 6, 3, 4}&gt;]</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 <span class=\"sy0\">|</span> s2 <span class=\"co1\"># Union</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {5, 6, 1, 2, 3, 4}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 <span class=\"sy0\">&amp;</span> s2 <span class=\"co1\"># Intersection</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {3, 4}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 <span class=\"sy0\">-</span> s2 <span class=\"co1\"># Difference</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {1, 2}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">proper_subset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Proper subset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">false</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">proper_subset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Proper subset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">subset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Subset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">subset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Subset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span> == s1 <span class=\"co1\"># Equality</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 == s2 <span class=\"co1\"># Equality</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">false</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\"># Membership</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">proper_superset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Proper superset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">proper_superset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Proper superset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">false</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">Set</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">superset</span>?<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"co1\"># Superset</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 ^ s2 <span class=\"co1\"># Symmetric difference</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {5, 6, 1, 2}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">size</span> <span class=\"co1\"># Cardinality</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><br/><span class=\"sy0\">&gt;&gt;</span> s1 <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">99</span> <span class=\"co1\"># Mutability (or s1.add(99) )</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {99, 1, 2, 3, 4}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">delete</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {1, 2, 3, 4}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">merge</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {5, 6, 1, 2, 3, 4}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> s1.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"co1\"># Mutability</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"co1\">#&lt;Set: {1, 2}&gt;</span><br/><span class=\"sy0\">&gt;&gt;</span> </pre>"}, {"lang": "Run BASIC", "loc": 71, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>A$\t= \"apple cherry elderberry grape\" <br/>B$\t= \"banana cherry date elderberry fig\"<br/>C$\t= \"apple cherry elderberry grape orange\"<br/>D$\t= \"apple cherry elderberry grape\"<br/>E$\t= \"apple cherry elderberry\"<br/>M$\t= \"banana\"<br/>\u00a0<br/>print \"A = \";A$<br/>print \"B = \";B$<br/>print \"C = \";C$<br/>print \"D = \";D$<br/>print \"E = \";E$<br/>print \"M = \";M$<br/>\u00a0<br/>if instr(A$,M$) = 0 then a$ = \"not \"<br/>print \"M is \";a$; \"an element of Set A\"<br/>a$ = \"\"<br/>if instr(B$,M$) = 0 then a$ = \"not \"<br/>print \"M is \";a$; \"an element of Set B\"<br/>\u00a0<br/>un$ = A$ + \" \"<br/>for i = 1 to 5<br/> if instr(un$,word$(B$,i)) = 0 then un$ = un$ + word$(B$,i) + \" \"<br/>next i<br/>print \"union(A,B) = \";un$<br/>\u00a0<br/>for i = 1 to 5<br/> if instr(A$,word$(B$,i)) &lt;&gt; 0 then ins$ = ins$ + word$(B$,i) + \" \"<br/>next i<br/>print \"Intersection(A,B) = \";ins$<br/>\u00a0<br/>for i = 1 to 5<br/> if instr(B$,word$(A$,i)) = 0 then dif$ = dif$ + word$(A$,i) + \" \"<br/>next i<br/>print \"Difference(A,B) = \";dif$<br/>\u00a0<br/>a = subs(A$,B$,\"AB\") <br/>a = subs(A$,C$,\"AC\")<br/>a = subs(A$,D$,\"AD\")<br/>a = subs(A$,E$,\"AE\")<br/>\u00a0<br/>a = eqs(A$,B$,\"AB\") <br/>a = eqs(A$,C$,\"AC\")<br/>a = eqs(A$,D$,\"AD\")<br/>a = eqs(A$,E$,\"AE\")<br/>end<br/>\u00a0<br/>function subs(a$,b$,sets$)<br/> for i = 1 to 5<br/>   if instr(b$,word$(a$,i)) &lt;&gt; 0 then subs = subs + 1<br/> next i<br/>if subs = 4 then <br/>  print left$(sets$,1);\" is a subset of \";right$(sets$,1)<br/>else<br/>  print left$(sets$,1);\" is not a subset of \";right$(sets$,1)<br/>end if<br/>end function<br/>\u00a0<br/>function eqs(a$,b$,sets$)<br/>for i = 1 to 5<br/> if word$(a$,i) &lt;&gt; \"\" then a = a + 1<br/> if word$(b$,i) &lt;&gt; \"\" then b = b + 1<br/> if instr(b$,word$(a$,i)) &lt;&gt; 0 then c = c + 1<br/>next i<br/>if (a = b) and (a = c) then <br/>  print left$(sets$,1);\" is equal \";right$(sets$,1)<br/>else<br/>  print left$(sets$,1);\" is not equal \";right$(sets$,1)<br/>end if<br/>end function</pre>"}, {"lang": "Rust", "loc": 15, "block": "<pre class=\"text highlighted_source\">use std::collections::HashSet;<br/>\u00a0<br/>fn main() {<br/>  let a = vec![1, 3, 4].into_iter().collect::&lt;HashSet&lt;i32&gt;&gt;();<br/>  let b = vec![3, 5, 6].into_iter().collect::&lt;HashSet&lt;i32&gt;&gt;();<br/>\u00a0<br/>  println!(\"Set A: {:?}\", a.iter().collect::&lt;Vec&lt;_&gt;&gt;());<br/>  println!(\"Set B: {:?}\", b.iter().collect::&lt;Vec&lt;_&gt;&gt;());<br/>  println!(\"Does A contain 4? {}\", a.contains(&amp;4));<br/>  println!(\"Union: {:?}\", a.union(&amp;b).collect::&lt;Vec&lt;_&gt;&gt;());<br/>  println!(\"Intersection: {:?}\", a.intersection(&amp;b).collect::&lt;Vec&lt;_&gt;&gt;());<br/>  println!(\"Difference: {:?}\", a.difference(&amp;b).collect::&lt;Vec&lt;_&gt;&gt;());<br/>  println!(\"Is A a subset of B? {}\", a.is_subset(&amp;b));<br/>  println!(\"Is A equal to B? {}\", a == b);<br/>}</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> sets <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> set1 <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> set2 <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 contains <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 | set2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 <span class=\"sy0\">&amp;</span> set2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 diff set2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 subsetOf set2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>set1 <span class=\"sy0\">==</span> set2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 43, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define <span class=\"br0\">(</span>element? a lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span>? a <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>element? a <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; util, not strictly needed</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>uniq lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? lst<span class=\"br0\">)</span> lst<br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>element? a b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>uniq b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> a <span class=\"br0\">(</span>uniq b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>intersection a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span>? a<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span>? b<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>else<br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>intersection <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>element? <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>union a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? a<span class=\"br0\">)</span> b<br/>    <span class=\"br0\">(</span>union <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>element? <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>\t     b<br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>diff a b<span class=\"br0\">)</span> <span class=\"co1\">; a - b</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? a<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>element? <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>diff <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>diff <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>subset? a b<span class=\"br0\">)</span> <span class=\"co1\">; A \u2286 B</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? a<span class=\"br0\">)</span> #t<br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>element? <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>subset? <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>set-<span class=\"kw1\">eq</span>? a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>subset? a b<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>subset? b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: charSet is set of char;<br/>enable_output(charSet);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const charSet: A is {'A', 'B', 'C', 'D', 'E', 'F'};<br/>    var charSet: B is charSet.value;<br/>    var char: m is 'A';<br/>  begin<br/>    B\u00a0:= {'E', 'F', 'G', 'H', 'I', 'K'};<br/>    incl(B, 'J');        # Add 'J' to set B<br/>    excl(B, 'K');        # Remove 'K' from set B<br/>    writeln(\"A: \" &lt;&amp; A);<br/>    writeln(\"B: \" &lt;&amp; B);<br/>    writeln(\"m: \" &lt;&amp; m);<br/>    writeln(\"m in A -- m is an element in A: \" &lt;&amp; m in A);<br/>    writeln(\"A | B  -- union:                \" &lt;&amp; A | B);<br/>    writeln(\"A &amp; B  -- intersection:         \" &lt;&amp; A &amp; B);<br/>    writeln(\"A - B  -- difference:           \" &lt;&amp; A - B);<br/>    writeln(\"A &gt;&lt; B -- symmetric difference: \" &lt;&amp; A &gt;&lt; B);<br/>    writeln(\"A &lt;= A -- subset:               \" &lt;&amp; A &lt;= A);<br/>    writeln(\"A &lt; A  -- proper subset:        \" &lt;&amp; A &lt; A);<br/>    writeln(\"A = B  -- equality:             \" &lt;&amp; A = B);<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>A\u00a0:= {1, 2, 3, 4};<br/>B\u00a0:= {3, 4, 5, 6};<br/>C\u00a0:= {4, 5};<br/>\u00a0<br/>-- Union, Intersection, Difference, Subset, Equality<br/>print(A + B);       -- {1, 2, 3, 4, 5, 6}<br/>print(A * B);       -- {3, 4}<br/>print(A - B);       -- {1, 2}<br/>print(C subset B);  -- #T<br/>print(C = B);       -- #F<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 65, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw4\">Set</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>set<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    method init <span class=\"br0\">{</span><br/>        var elems = set;<br/>        set = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/>        elems.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> <span class=\"kw2\">self</span> <span class=\"sy0\">+</span>= e <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method <span class=\"sy0\">+</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        set<span class=\"br0\">{</span>elem<span class=\"br0\">}</span> = elem;<br/>        <span class=\"kw2\">self</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method del<span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        set.<span class=\"me1\">delete</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method has<span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        set.<span class=\"me1\">has_key</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method \u222a<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">Set</span><span class=\"br0\">(</span>set.<span class=\"me1\">values</span>..., that.<span class=\"me1\">values</span>...<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method \u2229<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">Set</span><span class=\"br0\">(</span>set.<span class=\"me1\">keys</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> k \u2208 that <span class=\"br0\">}</span> \\<br/>                    .<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> set<span class=\"br0\">{</span>k<span class=\"br0\">}</span> <span class=\"br0\">}</span>...<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method \u2216<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">Set</span><span class=\"br0\">(</span>set.<span class=\"me1\">keys</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span>\u00a0!<span class=\"br0\">(</span>k \u2208 that<span class=\"br0\">)</span> <span class=\"br0\">}</span> \\<br/>                    .<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> set<span class=\"br0\">{</span>k<span class=\"br0\">}</span> <span class=\"br0\">}</span>...<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method ^<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var d = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">self</span> \u2216 that<span class=\"br0\">)</span> \u222a <span class=\"br0\">(</span>that \u2216 <span class=\"kw2\">self</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw4\">Set</span><span class=\"br0\">(</span>d.<span class=\"me1\">values</span>...<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method count <span class=\"br0\">{</span> set.<span class=\"me1\">len</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    method \u2261<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"kw2\">self</span> \u2216 that <span class=\"sy0\">-&gt;</span> count.<span class=\"me1\">is_zero</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>that \u2216 <span class=\"kw2\">self</span> <span class=\"sy0\">-&gt;</span> count.<span class=\"me1\">is_zero</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method values <span class=\"br0\">{</span> set.<span class=\"me1\">values</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    method \u2286<span class=\"br0\">(</span><span class=\"kw4\">Set</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        that.<span class=\"me1\">set</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>            k \u2208 <span class=\"kw2\">self</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> <span class=\"kw2\">false</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">true</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method to_s <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"Set{\"</span> <span class=\"sy0\">+</span> set.<span class=\"me1\">values</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> <span class=\"st0\">\"#{e}\"</span><span class=\"br0\">}</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw4\">Object</span> <span class=\"br0\">{</span><br/>    method \u2208<span class=\"br0\">(</span><span class=\"kw4\">Set</span> set<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        set.<span class=\"me1\">has</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 203, "block": "<pre class=\"text highlighted_source\">SIMSET<br/>BEGIN<br/>\u00a0<br/>   \u00a0! WE DON'T SUBCLASS HEAD BUT USE COMPOSITION FOR CLASS SET\u00a0;<br/>    CLASS SET;<br/>    BEGIN<br/>        PROCEDURE ADD(E); REF(ELEMENT) E;<br/>        BEGIN<br/>            IF NOT ISIN(E, THIS SET) THEN E.CLONE.INTO(H);<br/>        END**OF**ADD;<br/>\u00a0<br/>        BOOLEAN PROCEDURE EMPTY; EMPTY\u00a0:= H.EMPTY;<br/>        REF(LINK) PROCEDURE FIRST; FIRST\u00a0:- H.FIRST;<br/>\u00a0<br/>        REF(HEAD) H;<br/>        H\u00a0:- NEW HEAD;<br/>    END**OF**SET;<br/>\u00a0<br/>   \u00a0! WE SUBCLASS LINK FOR THE ELEMENTS CONTAINED IN THE SET\u00a0;<br/>    LINK CLASS ELEMENT;<br/>    VIRTUAL:<br/>        PROCEDURE ISEQUAL IS<br/>            BOOLEAN PROCEDURE ISEQUAL(OTHER); REF(ELEMENT) OTHER;;<br/>        PROCEDURE REPR IS<br/>            TEXT PROCEDURE REPR;;<br/>        PROCEDURE REPR IS<br/>            REF(ELEMENT) PROCEDURE CLONE;;<br/>    BEGIN<br/>    END**OF**ELEMENT;<br/>\u00a0<br/>    REF(SET) PROCEDURE UNION(S1, S2); REF(SET) S1, S2;<br/>    BEGIN REF(SET) SU, S;<br/>        SU\u00a0:- NEW SET;<br/>        FOR S\u00a0:- S1, S2 DO<br/>        BEGIN<br/>            IF NOT S.EMPTY THEN<br/>            BEGIN REF(ELEMENT) E;<br/>                E\u00a0:- S.FIRST;<br/>                WHILE E =/= NONE DO<br/>                BEGIN SU.ADD(E); E\u00a0:- E.SUC;<br/>                END;<br/>            END;<br/>        END;<br/>        UNION\u00a0:- SU;<br/>    END**OF**UNION;<br/>\u00a0<br/>    REF(SET) PROCEDURE INTERSECTION(S1, S2); REF(SET) S1, S2;<br/>    BEGIN REF(SET) SI;<br/>        SI\u00a0:- NEW SET;<br/>        IF NOT S1.EMPTY THEN<br/>        BEGIN REF(ELEMENT) E;<br/>            E\u00a0:- S1.FIRST;<br/>            WHILE E =/= NONE DO<br/>            BEGIN IF ISIN(E, S2) THEN SI.ADD(E); E\u00a0:- E.SUC;<br/>            END;<br/>        END;<br/>        INTERSECTION\u00a0:- SI;<br/>    END**OF**INTERSECTION;<br/>\u00a0<br/>    REF(SET) PROCEDURE MINUS(S1, S2); REF(SET) S1, S2;<br/>    BEGIN REF(SET) SM;<br/>        SM\u00a0:- NEW SET;<br/>        IF NOT S1.EMPTY THEN<br/>        BEGIN REF(ELEMENT) E;<br/>            E\u00a0:- S1.FIRST;<br/>            WHILE E =/= NONE DO<br/>            BEGIN IF NOT ISIN(E, S2) THEN SM.ADD(E); E\u00a0:- E.SUC;<br/>            END;<br/>        END;<br/>        MINUS\u00a0:- SM;<br/>    END**OF**MINUS;<br/>\u00a0<br/>    BOOLEAN PROCEDURE ISSUBSET(S1, S2); REF(SET) S1, S2;<br/>    BEGIN BOOLEAN B;<br/>        B\u00a0:= TRUE;<br/>        IF NOT S1.EMPTY THEN<br/>        BEGIN REF(ELEMENT) E;<br/>            E\u00a0:- S1.FIRST;<br/>            WHILE B AND E =/= NONE DO<br/>            BEGIN<br/>                B\u00a0:= ISIN(E, S2);<br/>                E\u00a0:- E.SUC;<br/>            END;<br/>        END;<br/>        ISSUBSET\u00a0:= B;<br/>    END**OF**ISSUBSET;<br/>\u00a0<br/>    BOOLEAN PROCEDURE ISEQUAL(S1, S2); REF(SET) S1, S2;<br/>    BEGIN<br/>        ISEQUAL\u00a0:= ISSUBSET(S1, S2) AND THEN ISSUBSET(S2, S1)<br/>    END**OF**ISEQUAL;<br/>\u00a0<br/>    BOOLEAN PROCEDURE ISIN(ELE,S); REF(ELEMENT) ELE; REF(SET) S;<br/>    BEGIN<br/>        REF(ELEMENT) E; BOOLEAN FOUND;<br/>        IF NOT S.EMPTY THEN<br/>        BEGIN<br/>            E\u00a0:- S.FIRST;<br/>            FOUND\u00a0:= E.ISEQUAL(ELE);<br/>            WHILE NOT FOUND AND E =/= NONE DO<br/>            BEGIN FOUND\u00a0:= E.ISEQUAL(ELE); E\u00a0:- E.SUC;<br/>            END;<br/>        END;<br/>        ISIN\u00a0:= FOUND<br/>    END**OF**ISIN;<br/>\u00a0<br/>    PROCEDURE OUTSET(S); REF(SET) S;<br/>    BEGIN<br/>        REF(ELEMENT) E;<br/>        OUTCHAR('{');<br/>        IF NOT S.EMPTY THEN<br/>        BEGIN<br/>            E\u00a0:- S.FIRST; OUTTEXT(E.REPR);<br/>            FOR E\u00a0:- E.SUC WHILE E =/= NONE DO<br/>            BEGIN OUTTEXT(\", \"); OUTTEXT(E.REPR);<br/>            END;<br/>        END;<br/>        OUTCHAR('}');<br/>    END**OF**OUTSET;<br/>\u00a0<br/>\u00a0<br/>    COMMENT ============== EXAMPLE USING SETS OF NUMBERS ==============\u00a0;<br/>\u00a0<br/>\u00a0<br/>    ELEMENT CLASS NUMBER(N); INTEGER N;<br/>    BEGIN<br/>        BOOLEAN PROCEDURE ISEQUAL(OTHER); REF(ELEMENT) OTHER;<br/>            ISEQUAL\u00a0:= N = OTHER QUA NUMBER.N;<br/>        TEXT PROCEDURE REPR;<br/>        BEGIN TEXT T; INTEGER I;<br/>            T\u00a0:- BLANKS(20); T.PUTINT(N);<br/>            T.SETPOS(1);<br/>            WHILE T.GETCHAR = ' ' DO;<br/>            REPR\u00a0:- T.SUB(T.POS - 1, T.LENGTH - T.POS + 2);<br/>        END;<br/>        REF(ELEMENT) PROCEDURE CLONE;<br/>            CLONE\u00a0:- NEW NUMBER(N);<br/>    END**OF**NUMBER;<br/>\u00a0<br/>    PROCEDURE REPORT(S1, MSG1, S2, MSG2, S3); REF(SET) S1, S2, S3; TEXT MSG1, MSG2;<br/>    BEGIN<br/>        OUTSET(S1);    OUTCHAR(' ');<br/>        OUTTEXT(MSG1); OUTCHAR(' ');<br/>        OUTSET(S2);    OUTCHAR(' ');<br/>        OUTTEXT(MSG2); OUTCHAR(' ');<br/>        OUTSET(S3);<br/>        OUTIMAGE;<br/>    END**OF**REPORT;<br/>\u00a0<br/>    PROCEDURE REPORTBOOL(S1, MSG1, S2, MSG2, B); REF(SET) S1, S2; TEXT MSG1, MSG2; BOOLEAN B;<br/>    BEGIN<br/>        OUTSET(S1);    OUTCHAR(' ');<br/>        OUTTEXT(MSG1); OUTCHAR(' ');<br/>        OUTSET(S2);    OUTCHAR(' ');<br/>        OUTTEXT(MSG2); OUTCHAR(' ');<br/>        OUTTEXT(IF B THEN \"T\" ELSE \"F\");<br/>        OUTIMAGE;<br/>    END**OF**REPORTBOOL;<br/>\u00a0<br/>    PROCEDURE REPORTNUMBOOL(N1, MSG1, S1, MSG2, B); REF(ELEMENT) N1; REF(SET) S1; TEXT MSG1, MSG2; BOOLEAN B;<br/>    BEGIN<br/>        OUTTEXT(N1.REPR);    OUTCHAR(' ');<br/>        OUTTEXT(MSG1); OUTCHAR(' ');<br/>        OUTSET(S1);    OUTCHAR(' ');<br/>        OUTTEXT(MSG2); OUTCHAR(' ');<br/>        OUTTEXT(IF B THEN \"T\" ELSE \"F\");<br/>        OUTIMAGE;<br/>    END**OF**REPORTNUMBOOL;<br/>\u00a0<br/>    REF(SET) S1, S2, S3, S4, S5;<br/>    REF(ELEMENT) E;<br/>    INTEGER I;<br/>\u00a0<br/>    S1\u00a0:- NEW SET; FOR I\u00a0:= 1, 2, 3, 4    DO S1.ADD(NEW NUMBER(I));<br/>    S2\u00a0:- NEW SET; FOR I\u00a0:= 3, 4, 5, 6    DO S2.ADD(NEW NUMBER(I));<br/>    S3\u00a0:- NEW SET; FOR I\u00a0:= 3, 1          DO S3.ADD(NEW NUMBER(I));<br/>    S4\u00a0:- NEW SET; FOR I\u00a0:= 1, 2, 3, 4, 5 DO S4.ADD(NEW NUMBER(I));<br/>    S5\u00a0:- NEW SET; FOR I\u00a0:= 4, 3, 2, 1    DO S5.ADD(NEW NUMBER(I));<br/>\u00a0<br/>    REPORT(S1, \"UNION\", S2, \" = \", UNION(S1, S2));<br/>\u00a0<br/>    REPORT(S1, \"INTERSECTION\", S2, \" = \", INTERSECTION(S1, S2));<br/>\u00a0<br/>    REPORT(S1, \"MINUS\", S2, \" = \", MINUS(S1, S2));<br/>\u00a0<br/>    REPORT(S2, \"MINUS\", S1, \" = \", MINUS(S2, S1));<br/>\u00a0<br/>    E\u00a0:- NEW NUMBER(2);<br/>    REPORTNUMBOOL(E, \"IN\", S1, \" = \", ISIN(E, S1));<br/>\u00a0<br/>    E\u00a0:- NEW NUMBER(10);<br/>    REPORTNUMBOOL(E, \"NOT IN\", S1, \" = \", NOT ISIN(E, S1));<br/>\u00a0<br/>    REPORTBOOL(S1, \"IS SUBSET OF\", S1, \" = \", ISSUBSET(S1, S1));<br/>    REPORTBOOL(S3, \"IS SUBSET OF\", S1, \" = \", ISSUBSET(S3, S1));<br/>    REPORTBOOL(S4, \"IS SUPERSET OF\", S1, \" = \", ISSUBSET(S1, S4));<br/>\u00a0<br/>    REPORTBOOL(S1, \"IS EQUAL TO\", S2, \" = \", ISEQUAL(S1, S2));<br/>    REPORTBOOL(S2, \"IS EQUAL TO\", S2, \" = \", ISEQUAL(S2, S2));<br/>    REPORTBOOL(S1, \"IS EQUAL TO\", S5, \" = \", ISEQUAL(S1, S5));<br/>\u00a0<br/>END.<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 22, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet union: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">2</span> 3 4<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"a Set(1 2 3 4)\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet intersection: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">2</span> 3 4<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"a Set(2 3)\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet difference: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">2</span> 3 4<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"a Set(1)\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet includesAllOf: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 3<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"true\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet includesAllOf: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 3 4<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"false\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet <span class=\"sy0\">=</span> <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">2</span> 1 3<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"true\"</span><br/>\u00a0<br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> asSet <span class=\"sy0\">=</span> <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 4<span class=\"br0\">)</span></span> asSet.  <br/><span class=\"coMULTI\">\"false\"</span><br/>\u00a0</pre>"}, {"lang": "SQL", "loc": 85, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"co1\">-- set of numbers is a table</span><br/><span class=\"co1\">-- create one set with 3 elements</span><br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> myset1 <span class=\"br0\">(</span>element <span class=\"kw1\">NUMBER</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset1 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset1 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset1 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>commit;<br/>\u00a0<br/><span class=\"co1\">-- check if 1 is an element</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> <span class=\"st0\">'TRUE'</span> BOOL <span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">WHERE</span> <span class=\"nu0\">1</span> <span class=\"kw1\">IN</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- create second set with 3 elements</span><br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> myset2 <span class=\"br0\">(</span>element <span class=\"kw1\">NUMBER</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset2 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset2 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> myset2 <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>commit;<br/>\u00a0<br/><span class=\"co1\">-- union sets</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<br/><span class=\"kw1\">UNION</span><br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2;<br/>\u00a0<br/><span class=\"co1\">-- intersection</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<br/><span class=\"kw1\">INTERSECT</span><br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2;<br/>\u00a0<br/><span class=\"co1\">-- difference</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<br/>minus<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2;<br/>\u00a0<br/><span class=\"co1\">-- subset</span><br/>\u00a0<br/><span class=\"co1\">-- change myset2 to only have 1 as element</span><br/>\u00a0<br/><span class=\"kw1\">DELETE</span> <span class=\"kw1\">FROM</span> myset2 <span class=\"kw1\">WHERE</span> <span class=\"kw1\">NOT</span> element <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>commit;<br/>\u00a0<br/><span class=\"co1\">-- check if myset2 subset of myset1</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> <span class=\"st0\">'TRUE'</span> BOOL <span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">WHERE</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span>  <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw1\">COUNT</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2<br/>minus<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- equality</span><br/>\u00a0<br/><span class=\"co1\">-- change myset1 to only have 1 as element</span><br/>\u00a0<br/><span class=\"kw1\">DELETE</span> <span class=\"kw1\">FROM</span> myset1 <span class=\"kw1\">WHERE</span> <span class=\"kw1\">NOT</span> element <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>commit;<br/>\u00a0<br/> <span class=\"co1\">-- check if myset2 subset of myset1 and</span><br/> <span class=\"co1\">-- check if myset1 subset of myset2 and</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> <span class=\"st0\">'TRUE'</span> BOOL <span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">WHERE</span> <br/><span class=\"nu0\">0</span> <span class=\"sy0\">=</span>  <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw1\">COUNT</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2<br/>minus<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span><br/><span class=\"nu0\">0</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw1\">COUNT</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset1<br/>minus<br/><span class=\"kw1\">SELECT</span> element <span class=\"kw1\">FROM</span> myset2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 27, "block": "<pre class=\"text highlighted_source\">var s1\u00a0: Set&lt;Int&gt; = [1, 2, 3, 4]<br/>let s2\u00a0: Set&lt;Int&gt; = [3, 4, 5, 6]<br/>println(s1.union(s2)) // union; prints \"[5, 6, 2, 3, 1, 4]\"<br/>println(s1.intersect(s2)) // intersection; prints \"[3, 4]\"<br/>println(s1.subtract(s2)) // difference; prints \"[2, 1]\"<br/>println(s1.isSubsetOf(s1)) // subset; prints \"true\"<br/>println(Set&lt;Int&gt;([3, 1]).isSubsetOf(s1)) // subset; prints \"true\"<br/>println(s1.isStrictSubsetOf(s1)) // proper subset; prints \"false\"<br/>println(Set&lt;Int&gt;([3, 1]).isStrictSubsetOf(s1)) // proper subset; prints \"true\"<br/>println(Set&lt;Int&gt;([3, 2, 4, 1]) == s1) // equality; prints \"true\"<br/>println(s1 == s2) // equality; prints \"false\"<br/>println(s1.contains(2)) // membership; prints \"true\"<br/>println(Set&lt;Int&gt;([1, 2, 3, 4]).isSupersetOf(s1)) // superset; prints \"true\"<br/>println(Set&lt;Int&gt;([1, 2, 3, 4]).isStrictSupersetOf(s1)) // proper superset; prints \"false\"<br/>println(Set&lt;Int&gt;([1, 2, 3, 4, 5]).isStrictSupersetOf(s1)) // proper superset; prints \"true\"<br/>println(s1.exclusiveOr(s2)) // symmetric difference; prints \"[5, 6, 2, 1]\"<br/>println(s1.count) // cardinality; prints \"4\"<br/>s1.insert(99) // mutability<br/>println(s1) // prints \"[99, 2, 3, 1, 4]\"<br/>s1.remove(99) // mutability<br/>println(s1) // prints \"[2, 3, 1, 4]\"<br/>s1.unionInPlace(s2) // mutability<br/>println(s1) // prints \"[5, 6, 2, 3, 1, 4]\"<br/>s1.subtractInPlace(s2) // mutability<br/>println(s1) // prints \"[2, 1]\"<br/>s1.exclusiveOrInPlace(s2) // mutability<br/>println(s1) // prints \"[5, 6, 2, 3, 1, 4]\"</pre>"}, {"lang": "Tcl", "loc": 21, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw1\">set</span><br/>\u00a0<br/><span class=\"co1\"># Many ways to build sets</span><br/><span class=\"kw1\">set</span> s1 <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> s2 <span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/>struct::<span class=\"kw1\">set</span> add s3 <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>   <span class=\"co1\"># $s3 will be proper set...</span><br/><span class=\"kw1\">set</span> item <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"union: [struct::set union $s1 $s2]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"intersection: [struct::set intersect $s1 $s2]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"difference: [struct::set difference $s1 $s2]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"membership predicate: [struct::set contains $s1 $item]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"subset predicate: [struct::set subsetof $s1 $s2]\"</span><span class=\"sy0\">;</span>   <span class=\"co1\"># NB: not strict subset test!</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"equality predicate: [struct::set equal $s1 $s2]\"</span><br/>\u00a0<br/><span class=\"co1\"># Adding an element to a set (note that we pass in the name of the variable holding the set):</span><br/>struct::<span class=\"kw1\">set</span> include s3 <span class=\"re0\">$item</span><br/><span class=\"co1\"># Removing an element from a set:</span><br/>struct::<span class=\"kw1\">set</span> exclude s3 <span class=\"re0\">$item</span><br/><span class=\"co1\"># Getting the cardinality:</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"cardinality: [struct::set size $s3]</span></pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\">var [const] unique = Utils.Helpers.listUnique;<br/>class Set {<br/>   fcn init { var [const] set = (vm.arglist.copy()\u00a0: unique(_)) }<br/>   fcn holds(x) { set.holds(x) }<br/>   fcn union(setB) { self(set.xplode(),setB.set.xplode()) }<br/>   fcn intersection(setB){ sb:=setB.set;<br/>      C:=self(); sc:=C.set;<br/>      foreach x in (set){ if (sb.holds(x)) sc.append(x) } <br/>      C<br/>   }<br/>   fcn diff(setB){ C:=self(); C.set.extend(set);<br/>      setB.set.pump(Void,C.set.remove);<br/>      C<br/>   }<br/>   fcn isSubset(setB){ sb:=setB.set;<br/>      set.pump(Void,'wrap(x){<br/>         if (not sb.holds(x)) return(Void.Stop,False); True<br/>      })<br/>   }<br/>   fcn __opEQ(setB) { ((set.len() == setB.set.len()) and self.isSubset(setB)) }<br/>}</pre>"}]}