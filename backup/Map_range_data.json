{"task": "Map_range", "blocks": [{"lang": "ACL2", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mapping <span class=\"br0\">(</span>a1 a2 b1 b2 s<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>+ b1 <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>- s a1<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>- b2 b1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>- a2 a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> map-each <span class=\"br0\">(</span>a1 a2 b1 b2 ss<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp ss<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>mapping a1 a2 b1 b2 <span class=\"br0\">(</span>first ss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>map-each a1 a2 b1 b2 <span class=\"br0\">(</span>rest ss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>map-each <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; (-1 -9/10 -4/5 -7/10 -3/5 -1/2 -2/5 -3/10 -1/5 -1/10 0)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 33, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Map <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> First_Range  <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Float <span class=\"kw3\">range</span> <span class=\"nu0\">0.0</span> .. <span class=\"nu0\">10.0</span>;<br/>   <span class=\"kw3\">type</span> Second_Range <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Float <span class=\"kw3\">range</span> -<span class=\"nu0\">1.0</span> .. <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw3\">function</span> Translate <span class=\"br0\">(</span>Value\u00a0: First_Range<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Second_Range <span class=\"kw1\">is</span><br/>      B1\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>Second_Range'First<span class=\"br0\">)</span>;<br/>      B2\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>Second_Range'Last<span class=\"br0\">)</span>;<br/>      A1\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>First_Range'First<span class=\"br0\">)</span>;<br/>      A2\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>First_Range'Last<span class=\"br0\">)</span>;<br/>      Result\u00a0: Float;<br/>   <span class=\"kw1\">begin</span><br/>      Result\u00a0:= B1 + <span class=\"br0\">(</span>Float <span class=\"br0\">(</span>Value<span class=\"br0\">)</span> - A1<span class=\"br0\">)</span> * <span class=\"br0\">(</span>B2 - B1<span class=\"br0\">)</span> / <span class=\"br0\">(</span>A2 - A1<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Second_Range <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/>   <span class=\"kw3\">function</span> Translate <span class=\"br0\">(</span>Value\u00a0: Second_Range<span class=\"br0\">)</span> <span class=\"kw1\">return</span> First_Range <span class=\"kw1\">is</span><br/>      B1\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>First_Range'First<span class=\"br0\">)</span>;<br/>      B2\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>First_Range'Last<span class=\"br0\">)</span>;<br/>      A1\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>Second_Range'First<span class=\"br0\">)</span>;<br/>      A2\u00a0: Float\u00a0:= Float <span class=\"br0\">(</span>Second_Range'Last<span class=\"br0\">)</span>;<br/>      Result\u00a0: Float;<br/>   <span class=\"kw1\">begin</span><br/>      Result\u00a0:= B1 + <span class=\"br0\">(</span>Float <span class=\"br0\">(</span>Value<span class=\"br0\">)</span> - A1<span class=\"br0\">)</span> * <span class=\"br0\">(</span>B2 - B1<span class=\"br0\">)</span> / <span class=\"br0\">(</span>A2 - A1<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> First_Range <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/>   Test_Value\u00a0: First_Range\u00a0:= First_Range'First;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span>First_Range'Image <span class=\"br0\">(</span>Test_Value<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" maps to: \"</span><br/>                          &amp; Second_Range'Image <span class=\"br0\">(</span>Translate <span class=\"br0\">(</span>Test_Value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Test_Value = First_Range'Last;<br/>      Test_Value\u00a0:= Test_Value + <span class=\"nu0\">1.0</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Map;</pre>"}, {"lang": "ALGOL 68", "loc": 9, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># maps a real s in the range [ a1, a2 ] to the range [ b1, b2 ]           #</span><br/><span class=\"coMULTI\"># there are no checks that s is in the range or that the ranges are valid #</span><br/><span class=\"kw4\">PROC</span> map range <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> s<span class=\"sy1\">,</span> a1<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> b1<span class=\"sy1\">,</span> b2 <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/>    b1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> s <span class=\"sy1\">-</span> a1 <span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span> b2 <span class=\"sy1\">-</span> b1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span> a2 <span class=\"sy1\">-</span> a1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the mapping #</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" maps to \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> map range<span class=\"br0\">(</span> i<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 10<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>mapRange<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2<span class=\"sy0\">-</span>b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>out <span class=\"sy0\">:=</span> <span class=\"st0\">\"Mapping [0,10] to [-1,0] at intervals of 1:`n\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">11</span><br/>\tout <span class=\"sy0\">.=</span> <span class=\"st0\">\"f(\"</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\") = \"</span> mapRange<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% out<br/>\u00a0</pre>"}, {"lang": "Axiom", "loc": 7, "block": "<pre class=\"text highlighted_source\">)abbrev package TESTP TestPackage<br/>TestPackage(R:Field)\u00a0: with<br/>    mapRange: (Segment(R), Segment(R)) -&gt; (R-&gt;R) <br/>  == add<br/>    mapRange(fromRange, toRange) == <br/>      (a1,a2,b1,b2)\u00a0:= (lo fromRange,hi fromRange,lo toRange,hi toRange)<br/>      (x:R):R +-&gt; b1+(x-a1)*(b2-b1)/(a2-a1)</pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MAP_RANGE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    a1 = <span class=\"nu0\">0</span><br/>    a2 = <span class=\"nu0\">10</span><br/>    b1 = <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    b2 = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=a1; i<span class=\"sy2\">&lt;=</span>a2; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%g maps to\u00a0%g<span class=\"es0\">\\n</span>\"</span>,i,map_range<span class=\"br0\">(</span>a1,a2,b1,b2,i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> map_range<span class=\"br0\">(</span>a1,a2,b1,b2,num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw6\">return</span> b1 <span class=\"sy3\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>num<span class=\"sy3\">-</span>a1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span>b2<span class=\"sy3\">-</span>b1<span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span>a2<span class=\"sy3\">-</span>a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">      @% = 5\u00a0: REM Column width<br/>      DIM range{l, h}<br/>      DIM A{} = range{}, B{} = range{}<br/>      A.l = 0\u00a0: A.h = 10<br/>      B.l = -1\u00a0: B.h = 0<br/>      FOR n = 0 TO 10<br/>        PRINT n \" maps to \" FNmaprange(A{}, B{}, n)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNmaprange(a{}, b{}, s)<br/>      = b.l + (s - a.l) * (b.h - b.l) / (a.h - a.l)</pre>"}, {"lang": "bc", "loc": 16, "block": "<pre class=\"text highlighted_source\">/* map s from [a, b] to [c, d] */<br/>define m(a, b, c, d, s) {<br/>\treturn (c + (s - a) * (d - c) / (b - a))<br/>}<br/>\u00a0<br/>scale = 6  /* division to 6 decimal places */<br/>\"[0, 10] =&gt; [-1, 0]<br/>\"<br/>for (i = 0; i &lt;= 10; i += 2) {<br/>\t/*<br/>         * If your bc(1) has a print statement, you can try<br/>\t * print i, \" =&gt; \", m(0, 10, -1, 0, i), \"\\n\"<br/>\t */<br/>\ti; \"   =&gt; \"; m(0, 10, -1, 0, i)<br/>}<br/>quit</pre>"}, {"lang": "Bracmat", "loc": 13, "block": "<pre class=\"text highlighted_source\">( ( mapRange<br/>  =   a1,a2,b1,b2,s<br/>    .  \u00a0!arg:(?a1,?a2.?b1,?b2.?s)<br/>      &amp;\u00a0!b1+(!s+-1*!a1)*(!b2+-1*!b1)*(!a2+-1*!a1)^-1<br/>  )<br/>&amp; out$\"Mapping [0,10] to [-1,0] at intervals of 1:\"<br/>&amp; 0:?n<br/>&amp;   whl<br/>  ' (\u00a0!n:~&gt;10<br/>    &amp; out$(\"f(\"\u00a0!n \") = \" flt$(mapRange$(0,10.-1,0.!n),2))<br/>    &amp; 1+!n:?n<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 20, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> mapRange<span class=\"br0\">(</span><span class=\"kw4\">double</span> a1<span class=\"sy0\">,</span><span class=\"kw4\">double</span> a2<span class=\"sy0\">,</span><span class=\"kw4\">double</span> b1<span class=\"sy0\">,</span><span class=\"kw4\">double</span> b2<span class=\"sy0\">,</span><span class=\"kw4\">double</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2<span class=\"sy0\">-</span>b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Mapping [0,10] to [-1,0] at intervals of 1:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(%d) =\u00a0%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>mapRange<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 12, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> MapRange<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{i} maps to {Map(0, 10, -1, 0, i)}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> Map<span class=\"br0\">(</span><span class=\"kw4\">double</span> a1, <span class=\"kw4\">double</span> a2, <span class=\"kw4\">double</span> b1, <span class=\"kw4\">double</span> b2, <span class=\"kw4\">double</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> tVal<span class=\"sy1\">&gt;</span><br/>tVal map_value<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>tVal,tVal<span class=\"sy1\">&gt;</span> a, std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>tVal, tVal<span class=\"sy1\">&gt;</span> b, tVal inVal<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  tVal inValNorm <span class=\"sy1\">=</span> inVal <span class=\"sy2\">-</span> a.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>  tVal aUpperNorm <span class=\"sy1\">=</span> a.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>  tVal normPosition <span class=\"sy1\">=</span> inValNorm <span class=\"sy2\">/</span> aUpperNorm<span class=\"sy4\">;</span><br/>\u00a0<br/>  tVal bUpperNorm <span class=\"sy1\">=</span> b.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> b.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>  tVal bValNorm <span class=\"sy1\">=</span> normPosition <span class=\"sy2\">*</span> bUpperNorm<span class=\"sy4\">;</span><br/>  tVal outVal <span class=\"sy1\">=</span> b.<span class=\"me1\">first</span> <span class=\"sy2\">+</span> bValNorm<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> outVal<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span>,<span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> value <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span> <span class=\"nu16\">10.0</span> <span class=\"sy1\">&gt;=</span> value<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>value<span class=\"br0\">)</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"map_value(\"</span> <span class=\"sy1\">&lt;&lt;</span> value <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\") = \"</span> <span class=\"sy1\">&lt;&lt;</span> map_value<span class=\"br0\">(</span>a, b, value<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 19, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> maprange <span class=\"br0\">[</span><span class=\"br0\">[</span>a1 a2<span class=\"br0\">]</span> <span class=\"br0\">[</span>b1 b2<span class=\"br0\">]</span> s<span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">+</span> b1 <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> s a1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> b2 b1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> a2 a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span>printf <span class=\"st0\">\"%2s maps to\u00a0%s<span class=\"es0\">\\n</span>\"</span> s <span class=\"br0\">(</span>maprange <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"nu0\">0</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/> <span class=\"nu0\">1</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/> <span class=\"nu0\">2</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><br/> <span class=\"nu0\">3</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/> <span class=\"nu0\">4</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><br/> <span class=\"nu0\">5</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/> <span class=\"nu0\">6</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><br/> <span class=\"nu0\">7</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/> <span class=\"nu0\">8</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><br/> <span class=\"nu0\">9</span> maps to <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/><span class=\"nu0\">10</span> maps to <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 53, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> demo-map-<span class=\"kw4\">range</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  i                       <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  mapped-num              <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  a-begin                 <span class=\"kw3\">USAGE</span> FLOAT-LONG <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  a-<span class=\"kw3\">end</span>                   <span class=\"kw3\">USAGE</span> FLOAT-LONG <span class=\"kw3\">VALUE</span> <span class=\"nu0\">10</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  b-begin                 <span class=\"kw3\">USAGE</span> FLOAT-LONG <span class=\"kw3\">VALUE</span> -<span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  b-<span class=\"kw3\">end</span>                   <span class=\"kw3\">USAGE</span> FLOAT-LONG <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  i-<span class=\"kw2\">display</span>               <span class=\"kw3\">PIC</span> --<span class=\"nu0\">9.9</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  mapped-<span class=\"kw2\">display</span>          <span class=\"kw3\">PIC</span> --<span class=\"nu0\">9.9</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">0</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> i &gt; <span class=\"nu0\">10</span><br/>               <span class=\"kw2\">CALL</span> <span class=\"st0\">\"map-range\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> a-begin<span class=\"sy0\">,</span> a-<span class=\"kw3\">end</span><span class=\"sy0\">,</span> b-begin<span class=\"sy0\">,</span><br/>                   b-<span class=\"kw3\">end</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"kw3\">REFERENCE</span> mapped-num<br/>               <span class=\"kw2\">COMPUTE</span> i-<span class=\"kw2\">display</span> <span class=\"kw3\">ROUNDED</span> <span class=\"sy0\">=</span> i<br/>               <span class=\"kw2\">COMPUTE</span> mapped-<span class=\"kw2\">display</span> <span class=\"kw3\">ROUNDED</span> <span class=\"sy0\">=</span> mapped-num<br/>               <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>i-<span class=\"kw2\">display</span><span class=\"br0\">)</span> <span class=\"st0\">\" maps to \"</span><br/>                   <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>mapped-<span class=\"kw2\">display</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> demo-map-<span class=\"kw4\">range</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> map-<span class=\"kw4\">range</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  a-begin                 <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  a-<span class=\"kw3\">end</span>                   <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  b-begin                 <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  b-<span class=\"kw3\">end</span>                   <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  val-to-<span class=\"kw1\">map</span>              <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  ret                     <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> a-begin<span class=\"sy0\">,</span> a-<span class=\"kw3\">end</span><span class=\"sy0\">,</span> b-begin<span class=\"sy0\">,</span> b-<span class=\"kw3\">end</span><span class=\"sy0\">,</span><br/>               val-to-<span class=\"kw1\">map</span><span class=\"sy0\">,</span> ret<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">COMPUTE</span> ret <span class=\"sy0\">=</span> <br/>               b-begin<span class=\"sy0\"> + </span><span class=\"br0\">(</span><span class=\"br0\">(</span>val-to-<span class=\"kw1\">map</span><span class=\"sy0\"> - </span>a-begin<span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"br0\">(</span>b-<span class=\"kw3\">end</span><span class=\"sy0\"> - </span>b-begin<span class=\"br0\">)</span><br/>                  <span class=\"sy0\"> / </span><span class=\"br0\">(</span>a-<span class=\"kw3\">end</span><span class=\"sy0\"> - </span>a-begin<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> map-<span class=\"kw4\">range</span><span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 7, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>mapRange = <span class=\"br0\">(</span>a1<span class=\"sy0\">,</span>a2<span class=\"sy0\">,</span>b1<span class=\"sy0\">,</span>b2<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    t = b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"#{s} maps to #{mapRange(0,10,-1,0,s)}\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> map-range <span class=\"br0\">(</span>a1 a2 b1 b2 s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>+ b1<br/>     <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>- s a1<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>- b2 b1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>- a2 a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop<br/>   for i from <span class=\"nu0\">0</span> to <span class=\"nu0\">10</span><br/>   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~F maps to ~F~C\"</span> i<br/>\t      <span class=\"br0\">(</span>map-range <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> i<span class=\"br0\">)</span><br/>\t      #\\Newline<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">double</span> mapRange<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> s<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> r1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">10.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> r2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> s<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%2d maps to\u00a0%5.2f\"</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> mapRange<span class=\"br0\">(</span>r1<span class=\"sy0\">,</span> r2<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 32, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span> <span class=\"co1\">;; interpolation functions</span><br/><span class=\"br0\">(</span>lib 'compile<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; rational version</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>q<span class=\"sy0\">-</span>map<span class=\"sy0\">-</span>range x xmin xmax ymin ymax<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> ymin <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x xmin<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> ymax ymin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> xmax xmin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; float version</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>map<span class=\"sy0\">-</span>range x xmin xmax ymin ymax<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> ymin <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x xmin<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> ymax ymin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> xmax xmin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; accelerate it</span><br/><span class=\"br0\">(</span>compile 'map<span class=\"sy0\">-</span>range <span class=\"st0\">\"-vf\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>q<span class=\"sy0\">-</span>map<span class=\"sy0\">-</span>range <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><br/><span class=\"br0\">(</span>map<span class=\"sy0\">-</span>range <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"sy0\">-</span><span class=\"nu0\">0.6</span><br/><span class=\"br0\">(</span>linear <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">;; native</span><br/>    \u2192 <span class=\"sy0\">-</span><span class=\"nu0\">0.6</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">0</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>writeln x <span class=\"br0\">(</span>q<span class=\"sy0\">-</span>map<span class=\"sy0\">-</span>range x <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>map<span class=\"sy0\">-</span>range x <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">0</span>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span>    <br/><span class=\"nu0\">1</span>     <span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.9</span>    <br/><span class=\"nu0\">2</span>     <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.8</span>    <br/><span class=\"nu0\">3</span>     <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.7</span>    <br/><span class=\"nu0\">4</span>     <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.6</span>    <br/><span class=\"nu0\">5</span>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.5</span>    <br/><span class=\"nu0\">6</span>     <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.4</span>    <br/><span class=\"nu0\">7</span>     <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.3</span>    <br/><span class=\"nu0\">8</span>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.2</span>    <br/><span class=\"nu0\">9</span>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>     <span class=\"sy0\">-</span><span class=\"nu0\">0.1</span>    <br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def map_range(a1 .. a2, b1 .. b2, s) do<br/>    b1 + (s - a1) * (b2 - b1) / (a2 - a1)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(0..10, fn s -&gt;<br/> \u00a0:io.format \"~2w map to ~7.3f~n\", [s, RC.map_range(0..10, -1..0, s)]<br/>end)</pre>"}, {"lang": "Emacs Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> maprange <span class=\"br0\">(</span>a1 a2 b1 b2 s<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>+ b1 <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>- s a1<span class=\"br0\">)</span> <span class=\"br0\">(</span>- b2 b1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>- a2 a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>maprange <span class=\"nu0\">0.0</span> <span class=\"nu0\">10.0</span> -<span class=\"nu0\">1.0</span> <span class=\"nu0\">0.0</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>map_range<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>map_value<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">map_value</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">A1</span><span class=\"sy1\">,</span><span class=\"re5\">A2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"re5\">B1</span><span class=\"sy1\">,</span><span class=\"re5\">B2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">B1</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span><span class=\"re5\">S</span> <span class=\"sy3\">-</span> <span class=\"re5\">A1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"re5\">B2</span> <span class=\"sy3\">-</span> <span class=\"re5\">B1</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span><span class=\"re5\">A2</span> <span class=\"sy3\">-</span> <span class=\"re5\">A1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 12, "block": "<pre class=\"text highlighted_source\">PROGRAM RANGE<br/>\u00a0<br/>BEGIN<br/>      AL=0   AH=10<br/>      BL=-1  BH=0<br/>      FOR N=0 TO 10 DO<br/>        RANGE=BL+(N-AL)*(BH-BL)/(AH-AL)<br/>        WRITE(\"### maps to ##.##\";N;RANGE)<br/>!        PRINT(N;\" maps to \";RANGE)<br/>      END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 7, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> map_range<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"br0\">(</span>s<span class=\"sy1\">-</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%2g maps to\u00a0%4g<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>i<span class=\"sy2\">,</span> map_range<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USE: locals<br/>:: map-range ( a1 a2 b1 b2 x -- y )<br/>   x a1 - b2 b1 - * a2 a1 - / b1 +\u00a0;</pre>"}, {"lang": "Fantom", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class FRange<br/>{<br/>  const Float low<br/>  const Float high<br/>  // in constructing a range, ensure the low value is smaller than high<br/>  new make (Float low, Float high)<br/>  {<br/>    this.low = ( low &lt;= high\u00a0? low\u00a0: high )<br/>    this.high = ( low &lt;= high\u00a0? high\u00a0: low )<br/>  }<br/>\u00a0<br/>  // return range as a string<br/>  override Str toStr () { \"[$low,$high]\" }<br/>\u00a0<br/>  // return a point in given range interpolated into this range<br/>  Float remap (Float point, FRange given)<br/>  {<br/>    this.low + (point - given.low) * (this.high - this.low) / (given.high - given.low)<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    range1\u00a0:= FRange (0f, 10f)<br/>    range2\u00a0:= FRange (-1f, 0f)<br/>    11.times |Int n|<br/>    {<br/>      m\u00a0:= range2.remap (n.toFloat, range1)<br/>      echo (\"Value $n in ${range1} maps to $m in ${range2}\")<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">\\ linear interpolation<br/>\u00a0<br/>: lerp ( b2 b1 a2 a1 s -- t )<br/>  fover f-<br/>  frot frot f- f/<br/>  frot frot fswap fover f- frot f*  <br/>  f+\u00a0;<br/>\u00a0<br/>: test   11 0 do  0e -1e 10e 0e i s&gt;f lerp f.  loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 21, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Map<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">t</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">10</span><br/>    t <span class=\"sy0\">=</span> Maprange<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"sy0\">/-</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"kw3\">real</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i, <span class=\"st0\">\" maps to \"</span>, t<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> <br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Maprange<span class=\"br0\">(</span>a, b, s<span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">Maprange</span><br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, s<br/>\u00a0<br/>  Maprange <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> Maprange<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Map</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> rangeBounds <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    b1<span class=\"sy1\">,</span> b2 <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> mapRange<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y rangeBounds<span class=\"sy1\">,</span> n <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> y<span class=\"sy3\">.</span>b1 <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">-</span> x<span class=\"sy3\">.</span>b1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>y<span class=\"sy3\">.</span>b2 <span class=\"sy3\">-</span> y<span class=\"sy3\">.</span>b1<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span>x<span class=\"sy3\">.</span>b2 <span class=\"sy3\">-</span> x<span class=\"sy3\">.</span>b1<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    r1 <span class=\"sy2\">:=</span> rangeBounds<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">}</span><br/>    r2 <span class=\"sy2\">:=</span> rangeBounds<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> n <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">\"maps to\"</span><span class=\"sy1\">,</span> mapRange<span class=\"sy1\">(</span>r1<span class=\"sy1\">,</span> r2<span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> mapRange<span class=\"br0\">(</span>a1, a2, b1, b2, s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> s <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"st0\">\" in [0, 10] maps to \"</span> <span class=\"sy0\">+</span> mapRange<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">10</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" in [-1, 0].\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 28, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Ratio<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>PrintfType<span class=\"sy0\">,</span> printf<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Map a value from the range [a1,a2] to the range [b1,b2].  We don't check</span><br/><span class=\"co1\">-- for empty ranges.</span><br/>mapRange<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>mapRange <span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"br0\">)</span> <span class=\"br0\">(</span>b1<span class=\"sy0\">,</span> b2<span class=\"br0\">)</span> s <span class=\"sy0\">=</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main<br/><span class=\"co1\">-- Perform the mapping over floating point numbers.</span><br/> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"---------- Floating point ----------\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> prtD n <span class=\"sy0\">.</span> mapRange <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>  <span class=\"co1\">-- Perform the same mapping over exact rationals.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"---------- Rationals ----------\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> prtR n <span class=\"sy0\">.</span> mapRange <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    prtD<br/>      <span class=\"sy0\">::</span> PrintfType r<br/>      <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <span class=\"sy0\">-&gt;</span> r<br/>    prtD <span class=\"sy0\">=</span> printf <span class=\"st0\">\"%2d -&gt;\u00a0%6.3f<span class=\"es0\">\\n</span>\"</span><br/>    prtR<br/>      <span class=\"sy0\">::</span> PrintfType r<br/>      <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational\"><span class=\"kw4\">Rational</span></a> <span class=\"sy0\">-&gt;</span> r<br/>    prtR n x <span class=\"sy0\">=</span> printf <span class=\"st0\">\"%2d -&gt;\u00a0%s<span class=\"es0\">\\n</span>\"</span> n <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"unicon highlighted_source\">\u00a0<br/><span class=\"kw1\">record</span> Range<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># note, we force 'n' to be real, which means recalculation will </span><br/><span class=\"co1\"># be using real numbers, not integers</span><br/><span class=\"kw1\">procedure</span> remap <span class=\"br0\">(</span>range1<span class=\"sy0\">,</span> range2<span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> range2<span class=\"sy0\">.</span><span class=\"me1\">a</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&gt;</span> range2<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span> <span class=\"co1\"># n out of given range</span><br/>  <span class=\"kw1\">return</span> range1<span class=\"sy0\">.</span><span class=\"me1\">a</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> range2<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>range1<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"sy0\">-</span> range1<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>range2<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"sy0\">-</span> range2<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> range_string <span class=\"br0\">(</span>range<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"[\"</span> <span class=\"sy0\">||</span> range<span class=\"sy0\">.</span><span class=\"me1\">a</span> <span class=\"sy0\">||</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">||</span> range<span class=\"sy0\">.</span><span class=\"me1\">b</span> <span class=\"sy0\">||</span> <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  range1 <span class=\"sy0\">:=</span> Range <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  range2 <span class=\"sy0\">:=</span> Range <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># if i is out of range1, then 'remap' fails, so only valid changes are written</span><br/>  <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">12</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> m <span class=\"sy0\">:=</span> remap <span class=\"br0\">(</span>range2<span class=\"sy0\">,</span> range1<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">then</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Value \"</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">||</span> <span class=\"st0\">\" in \"</span> <span class=\"sy0\">||</span> range_string <span class=\"br0\">(</span>range1<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <br/>                  <span class=\"st0\">\" maps to \"</span> <span class=\"sy0\">||</span> m <span class=\"sy0\">||</span> <span class=\"st0\">\" in \"</span> <span class=\"sy0\">||</span> range_string <span class=\"br0\">(</span>range2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">maprange=:<span class=\"nu0\">2</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'a1 a2'</span>=.<span class=\"kw2\">m</span><br/>  <span class=\"st_h\">'b1 b2'</span>=.<span class=\"kw2\">n</span><br/>  b1+<span class=\"sy0\">((</span><span class=\"kw2\">y</span>-a1<span class=\"sy0\">)</span>*b2-b1<span class=\"sy0\">)</span>%a2-a1<br/><span class=\"sy0\">)</span><br/><span class=\"co1\">NB. this version defers all calculations to runtime, but mirrors exactly the task formulation</span></pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Range <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>s <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> s<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"st0\">\" in [0, 10] maps to \"</span><span class=\"sy0\">+</span> <br/>\t\t\t\t\tmapRange<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">10</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, s<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" in [-1, 0].\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> mapRange<span class=\"br0\">(</span><span class=\"kw4\">double</span> a1, <span class=\"kw4\">double</span> a2, <span class=\"kw4\">double</span> b1, <span class=\"kw4\">double</span> b2, <span class=\"kw4\">double</span> s<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 12, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// Javascript doesn't have built-in support for ranges</span><br/><span class=\"co1\">// Insted we use arrays of two elements to represent ranges</span><br/><span class=\"kw1\">var</span> mapRange <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>from<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> to<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> from<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>to<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> to<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>from<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> from<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> range <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> range.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  range<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mapRange<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> range<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>range<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\"># The input is the value to be mapped.<br/># The ranges, a and b, should each be an array defining the<br/># left-most and right-most points of the range.<br/>def maprange(a; b):<br/>  b[0] + (((. - a[0]) * (b[1] - b[0])) / (a[1] - a[0]))\u00a0;</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">function maprange(s, a, b)<br/>    a\u2081, a\u2082 = minimum(a), maximum(a)<br/>    b\u2081, b\u2082 = minimum(b), maximum(b)<br/>    return b\u2081 + (s - a\u2081) * (b\u2082 - b\u2081) / (a\u2082 - a\u2081)<br/>end<br/>\u00a0<br/>@show maprange(6, 1:10, -1:0)<br/>@show maprange(0:10, 0:10, -1:0)</pre>"}, {"lang": "K", "loc": 14, "block": "<pre class=\"text highlighted_source\">   f:{[a1;a2;b1;b2;s] b1+(s-a1)*(b2-b1)%(a2-a1)}<br/>\u00a0<br/>   +(a; f[0;10;-1;0]'a:!11)<br/>((0;-1.0)<br/> (1;-0.9)<br/> (2;-0.8)<br/> (3;-0.7)<br/> (4;-0.6)<br/> (5;-0.5)<br/> (6;-0.4)<br/> (7;-0.3)<br/> (8;-0.2)<br/> (9;-0.1)<br/> (10;0.0))</pre>"}, {"lang": "Kotlin", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> FloatRange<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> start<span class=\"sy0\">:</span> Float, <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> endInclusive<span class=\"sy0\">:</span> Float<span class=\"br0\">)</span> <span class=\"sy0\">:</span> ClosedRange<span class=\"sy0\">&lt;</span>Float<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun mapRange<span class=\"br0\">(</span>range1<span class=\"sy0\">:</span> FloatRange, range2<span class=\"sy0\">:</span> FloatRange, value<span class=\"sy0\">:</span> Float<span class=\"br0\">)</span><span class=\"sy0\">:</span> Float <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">!</span>in range1<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"value is not within the first range\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>range1.<span class=\"me1\">endInclusive</span> <span class=\"sy0\">==</span> range1.<span class=\"me1\">start</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"first range cannot be single-valued\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> range2.<span class=\"me1\">start</span> + <span class=\"br0\">(</span>value - range1.<span class=\"me1\">start</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>range2.<span class=\"me1\">endInclusive</span> - range2.<span class=\"me1\">start</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>range1.<span class=\"me1\">endInclusive</span> - range1.<span class=\"me1\">start</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mappedValue <span class=\"sy0\">=</span> mapRange<span class=\"br0\">(</span>FloatRange<span class=\"br0\">(</span>0.0f, 10.0f<span class=\"br0\">)</span>, FloatRange<span class=\"br0\">(</span>-1.0f, 0.0f<span class=\"br0\">)</span>, i.<span class=\"me1\">toFloat</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d  maps to\u00a0%+4.2f\"</span>, i, mappedValue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 15, "block": "<pre class=\"text highlighted_source\">define map_range(<br/>\ta1,<br/>\ta2,<br/>\tb1,<br/>\tb2,<br/>\tnumber<br/>) =&gt; (decimal(#b1) + (decimal(#number) - decimal(#a1)) * (decimal(#b2) - decimal(#b1)) / (decimal(#a2) - decimal(#a1))) -&gt; asstring(-Precision = 1)<br/>\u00a0<br/>with number in generateSeries(1,10) do {^<br/>\t#number<br/>\t': '<br/>\tmap_range( 0, 10, -1, 0, #number)<br/>\t'&lt;br /&gt;'<br/>\u00a0<br/>^}'</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to interpolate\u00a0:s\u00a0:a1\u00a0:a2\u00a0:b1\u00a0:b2<br/>  output (:s-:a1) / (:a2-:a1) * (:b2-:b1) +\u00a0:b1<br/>end<br/>\u00a0<br/>for [i 0 10] [print interpolate\u00a0:i 0 10 -1 0]</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> map_range<span class=\"br0\">(</span> a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> s <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2<span class=\"sy0\">-</span>b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"f(%d) =\u00a0%f\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> map_range<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Map:=proc(a1,a2,b1,b2,s);<br/>\treturn (b1+((s-a1)*(b2-b1)/(a2-a1)));<br/>end proc;<br/>\u00a0<br/>for i from 0 to 10 do<br/>\tprintf(\"%a  maps to \",i);<br/>\tprintf(\"%a\\n\",Map(0,10,-1,0,i));<br/>end do;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Rescale[#,{0,10},{-1,0}]&amp;/@Range[0,10]<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">maprange(a, b, c, d)\u00a0:= buildq([e: ratsimp(('x - a)*(d - c)/(b - a) + c)],<br/>   lambda([x], e))$<br/>\u00a0<br/>f: maprange(0, 10, -1, 0);</pre>"}, {"lang": "Nemerle", "loc": 18, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Maprange<br/>{<br/>    Maprange(a\u00a0: double * double, b\u00a0: double * double, s\u00a0: double)\u00a0: double<br/>    {<br/>        def (a1, a2) = a; def (b1, b2) = b;<br/>\u00a0<br/>        b1 + (((s - a1) * (b2 - b1))/(a2 - a1))<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        foreach (i in [0 .. 10]) <br/>            WriteLine(\"{0, 2:f0} maps to {1:f1}\", i, Maprange((0.0, 10.0), (-1.0, 0.0), i));<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 21, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>A    = <span class=\"br0\">[</span>  <span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span> <span class=\"br0\">]</span><br/>B    = <span class=\"br0\">[</span> -<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">0.0</span> <span class=\"br0\">]</span><br/>incr = <span class=\"nu0\">1.0</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Mapping ['</span>A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"st0\">','</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"st0\">'] to ['</span>B<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"st0\">','</span> B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"st0\">'] in increments of'</span> incr<span class=\"st0\">':'</span><br/><span class=\"kw1\">loop</span> sVal = A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> by incr<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'  f('</span>sVal.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">') ='</span>  mapRange<span class=\"br0\">(</span>A, B, sVal<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> sVal<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method mapRange<span class=\"br0\">(</span>a = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span>, b = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span>, s_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> mapRange<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, s_<span class=\"br0\">)</span><br/>\u00a0<br/>method mapRange<span class=\"br0\">(</span>a1, a2, b1, b2, s_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  t_ = b1 + <span class=\"br0\">(</span><span class=\"br0\">(</span>s_ - a1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b2 - b1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a2 - a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> t_<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>type FloatRange = tuple[s,e: float]<br/>\u00a0<br/>proc mapRange(a,b: FloatRange, s): float =<br/>  b.s + (s - a.s) * (b.e - b.s) / (a.e - a.s)<br/>\u00a0<br/>for i in 0..10:<br/>  let m = mapRange((0.0,10.0), (-1.0, 0.0), float(i))<br/>  echo i, \" maps to \", formatFloat(m, precision = 0)</pre>"}, {"lang": "Objeck", "loc": 16, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Range <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> MapRange<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span><span class=\"kw2\">Float</span><span class=\"sy0\">,</span> a2<span class=\"sy0\">:</span><span class=\"kw2\">Float</span><span class=\"sy0\">,</span> b1<span class=\"sy0\">:</span><span class=\"kw2\">Float</span><span class=\"sy0\">,</span> b2<span class=\"sy0\">:</span><span class=\"kw2\">Float</span><span class=\"sy0\">,</span> s<span class=\"sy0\">:</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2<span class=\"sy0\">-</span>b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2<span class=\"sy0\">-</span>a1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"Mapping [0,10] to [-1,0] at intervals of 1:\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10.0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"f(\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>i<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\") = \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>MapRange<span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> map_range <span class=\"br0\">(</span>a1, a2<span class=\"br0\">)</span> <span class=\"br0\">(</span>b1, b2<span class=\"br0\">)</span> s <span class=\"sy0\">=</span><br/>  b1 <span class=\"sy0\">+.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">-.</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-.</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"br0\">(</span>a2 <span class=\"sy0\">-.</span> a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Mapping [0,10] to [-1,0] at intervals of 1:\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"f(%d) =\u00a0%g\\n\"</span> i <span class=\"br0\">(</span>map_range <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">: mapRange(p1, p2, s) <br/>   s p1 first - p2 second p2 first - * p1 second p1 first - asFloat / <br/>   p2 first +\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">map<span class=\"br0\">(</span>r1<span class=\"sy0\">,</span>r2<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span>r2<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span>r1<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r2<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>r2<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>r1<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>r1<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 13, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Map<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> MapRange<span class=\"br0\">(</span>fromRange<span class=\"sy1\">,</span> toRange<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> value<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    MapRange <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>value<span class=\"sy3\">-</span>fromRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span>toRange<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">-</span>toRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span>fromRange<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">-</span>fromRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> toRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' maps to: '</span><span class=\"sy1\">,</span> MapRange<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">10.0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"sy3\">-</span><span class=\"nu0\">1.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> i<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mapValue <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$range1</span> <span class=\"sy0\">,</span> <span class=\"re0\">$range2</span> <span class=\"sy0\">,</span> <span class=\"re0\">$number</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span> <span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span> <span class=\"re0\">$range2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re0\">$number</span> <span class=\"sy0\">-</span> <span class=\"re0\">$range1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"re0\">$range2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$range2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"re0\">$range1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span> <br/>      <span class=\"sy0\">-</span> <span class=\"re0\">$range1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@numbers</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@interval</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The mapped value for $_ is \"</span> <span class=\"sy0\">.</span> mapValue<span class=\"br0\">(</span> <span class=\"re0\">\\@numbers</span> <span class=\"sy0\">,</span> <span class=\"re0\">\\@interval</span> <span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"\u00a0!<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@numbers</span> <span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> the_function<span class=\"br0\">(</span>Range <span class=\"re0\">$a</span><span class=\"sy0\">,</span> Range <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$a2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">bounds</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b1</span><span class=\"sy0\">,</span> <span class=\"re0\">$b2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">bounds</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$b1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">-</span><span class=\"re0\">$a1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$b2</span><span class=\"sy0\">-</span><span class=\"re0\">$b1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$a2</span><span class=\"sy0\">-</span><span class=\"re0\">$a1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">11</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$x maps to {the_function(0..10, -1..0, $x)}\"</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 7, "block": "<pre class=\"text highlighted_source\">function MapRange(atom s, a1, a2, b1, b2)<br/>    return b1+(s-a1)*(b2-b1)/(a2-a1)<br/>end function<br/>\u00a0<br/>for i=0 to 10 by 2 do<br/>    printf(1,\"%2d\u00a0:\u00a0%g\\n\",{i,MapRange(i,0,10,-1,0)})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(scl 1)<br/>\u00a0<br/>(de mapRange (Val A1 A2 B1 B2)<br/>   (+ B1 (*/ (- Val A1) (- B2 B1) (- A2 A1))) )<br/>\u00a0<br/>\u00a0<br/>(for Val (range 0 10.0 1.0)<br/>   (prinl<br/>      (format (mapRange Val 0 10.0 -1.0 0) *Scl) ) )</pre>"}, {"lang": "PL/I", "loc": 15, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/>map<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* 24/11/2011 */</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"br0\">)</span> <span class=\"kw1\">float</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> d <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">by</span> <span class=\"nu0\">0.9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> d<span class=\"sy0\">,</span> <span class=\"st0\">' maps to '</span><span class=\"sy0\">,</span> map<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>map<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"kw1\">float</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> map<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> map<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 38, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Group<span class=\"sy0\">-</span>Range<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateCount<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Range1</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateCount<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>double<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Range2</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Map</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Map</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                Index   <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><br/>                Mapping <span class=\"sy0\">=</span> <span class=\"re0\">$Range2</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Range1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$Range2</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Range2</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$Range1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Range1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 23, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> RR<br/>  a.f<br/>  b.f<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.f MapRange<span class=\"br0\">(</span><span class=\"sy0\">*</span>a.RR, <span class=\"sy0\">*</span>b.RR, s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.f a1, a2, b1, b2 <br/>  a1<span class=\"sy0\">=*</span>a<span class=\"sy0\">\\</span>a:  a2<span class=\"sy0\">=*</span>a<span class=\"sy0\">\\</span>b<br/>  b1<span class=\"sy0\">=*</span>b<span class=\"sy0\">\\</span>a:  b2<span class=\"sy0\">=*</span>b<span class=\"sy0\">\\</span>b<br/>  <span class=\"kw1\">ProcedureReturn</span> b1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">-</span> b1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a2 <span class=\"sy0\">-</span> a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;- Test the function</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.RR Range1, Range2<br/>  Range1<span class=\"sy0\">\\</span>a<span class=\"sy0\">=</span><span class=\"nu0\">0</span>: Range1<span class=\"sy0\">\\</span>b<span class=\"sy0\">=</span><span class=\"nu0\">10</span><br/>  Range2<span class=\"sy0\">\\</span>a<span class=\"sy0\">=-</span><span class=\"nu0\">1</span>:Range2<span class=\"sy0\">\\</span>b<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" maps to \"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrF</span><span class=\"br0\">(</span>MapRange<span class=\"br0\">(</span>@Range1, @Range2, i<span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> maprange<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>\t<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> a2<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>b1<span class=\"sy0\">,</span> b2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span> b<br/>\t<span class=\"kw1\">return</span>  b1 + <span class=\"br0\">(</span><span class=\"br0\">(</span>s - a1<span class=\"br0\">)</span> * <span class=\"br0\">(</span>b2 - b1<span class=\"br0\">)</span> / <span class=\"br0\">(</span>a2 - a1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%2g maps to\u00a0%g\"</span>\u00a0% <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> maprange<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/> <span class=\"nu0\">0</span> maps to -<span class=\"nu0\">1</span><br/> <span class=\"nu0\">1</span> maps to -<span class=\"nu0\">0.9</span><br/> <span class=\"nu0\">2</span> maps to -<span class=\"nu0\">0.8</span><br/> <span class=\"nu0\">3</span> maps to -<span class=\"nu0\">0.7</span><br/> <span class=\"nu0\">4</span> maps to -<span class=\"nu0\">0.6</span><br/> <span class=\"nu0\">5</span> maps to -<span class=\"nu0\">0.5</span><br/> <span class=\"nu0\">6</span> maps to -<span class=\"nu0\">0.4</span><br/> <span class=\"nu0\">7</span> maps to -<span class=\"nu0\">0.3</span><br/> <span class=\"nu0\">8</span> maps to -<span class=\"nu0\">0.2</span><br/> <span class=\"nu0\">9</span> maps to -<span class=\"nu0\">0.1</span><br/><span class=\"nu0\">10</span> maps to <span class=\"nu0\">0</span></pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (make-range-map a1 a2 b1 b2)<br/> \u00a0;; returns a mapping function, doing computing the differences in<br/> \u00a0;; advance so it's fast<br/>  (let ([a (- a2 a1)] [b (- b2 b1)])<br/>    (\u03bb(s) (exact-&gt;inexact (+ b1 (/ (* (- s a1) b) a))))))<br/>\u00a0<br/>(define map (make-range-map 0 10 -1 0))<br/>(for ([i (in-range 0 11)]) (printf \"~a --&gt; ~a\\n\" i (map i)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program maps and displays a  range of numbers from  one range  to  another range.*/</span><br/>rangeA =   <span class=\"nu0\">0</span>   <span class=\"nu0\">10</span>                                      <span class=\"coMULTI\">/*or:   rangeA =   '  0  10 '    */</span><br/>rangeB =  -<span class=\"nu0\">1</span>    <span class=\"nu0\">0</span>                                      <span class=\"coMULTI\">/*or:   rangeB =   \" -1   0 \"    */</span><br/><span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>   rangeA  L  H<br/>inc= <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">do</span> j=L  <span class=\"kw2\">to</span> H  <span class=\"kw2\">by</span> inc <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw6\">sign</span><span class=\"br0\">(</span>H<span class=\"sy0\">&lt;</span>L<span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"coMULTI\">/*BY:   either   +inc  or  -inc  */</span><br/>          <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, <span class=\"nu0\">9</span><span class=\"br0\">)</span>      <span class=\"st0\">' maps to '</span>      mapR<span class=\"br0\">(</span>rangeA, rangeB, j<span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mapR: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a1 a2,b1 b2,s;$=b1+<span class=\"br0\">(</span>s-a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2-b1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a2-a1<span class=\"br0\">)</span>;<span class=\"kw1\">return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,$<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">)</span>$</pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Map range<br/>\u00a0<br/>decimals(1)<br/>al = 0 <br/>ah = 10<br/>bl = -1 <br/>bh = 0<br/>for n = 0 to 10<br/>     see \"\" + n + \" maps to \" + maprange(al, bl, n) + nl<br/>next<br/>\u00a0<br/>func maprange(al, bl, s)<br/>       return bl + (s - al) * (bh - bl) / (ah - al) <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> map_range<span class=\"br0\">(</span>a, b, s<span class=\"br0\">)</span><br/>  af, al, bf, bl = a.<span class=\"me1\">first</span>, a.<span class=\"me1\">last</span>, b.<span class=\"me1\">first</span>, b.<span class=\"me1\">last</span><br/>  bf <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> af<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>bl <span class=\"sy0\">-</span> bf<span class=\"br0\">)</span>.<span class=\"me1\">quo</span><span class=\"br0\">(</span>al <span class=\"sy0\">-</span> af<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"%s maps to\u00a0%g\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>s, map_range<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>..<span class=\"nu0\">0</span>, s<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 13, "block": "<pre class=\"text highlighted_source\">use std::f64;<br/>\u00a0<br/>fn map_range(from_range: (f64, f64), to_range: (f64, f64), s: f64) -&gt; f64 {<br/>    to_range.0 + (s - from_range.0) * (to_range.1 - to_range.0) / (from_range.1 - from_range.0)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let input: Vec&lt;f64&gt; = vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];<br/>    let result = input.into_iter()<br/>        .map(|x| map_range((0.0, 10.0), (-1.0, 0.0), x))<br/>        .collect::&lt;Vec&lt;f64&gt;&gt;();<br/>    print!(\"{:?}\", result);<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mapRange<span class=\"br0\">(</span>a1<span class=\"sy0\">:</span>Double, a2<span class=\"sy0\">:</span>Double, b1<span class=\"sy0\">:</span>Double, b2<span class=\"sy0\">:</span>Double, x<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">:</span>Double<span class=\"sy0\">=</span>b1+<span class=\"br0\">(</span>x-a1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b2-b1<span class=\"br0\">)</span>/<span class=\"br0\">(</span>a2-a1<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%2d in [0, 10] maps to\u00a0%5.2f in [-1, 0]\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i, mapRange<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">10</span>, -<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 15, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const func float: mapRange (in float: a1, in float: a2, in float: b1, in float: b2, ref float: s) is<br/>    return b1 + (s-a1)*(b2-b1)/(a2-a1);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    writeln(\"Mapping [0,10] to [-1,0] at intervals of 1:\");<br/>    for number range 0 to 10 do<br/>      writeln(\"f(\" &lt;&amp; number &lt;&amp; \") = \" &lt;&amp; mapRange(0.0, 10.0, -1.0, 0.0, flt(number)) digits 1);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func map_range<span class=\"br0\">(</span>a, b, x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>a1, a2, b1, b2<span class=\"br0\">)</span> = <span class=\"br0\">(</span>a.<span class=\"me1\">bounds</span>, b.<span class=\"me1\">bounds</span><span class=\"br0\">)</span>;<br/>    x<span class=\"sy0\">-</span>a1 <span class=\"sy0\">*</span> b2<span class=\"sy0\">-</span>b1 <span class=\"sy0\">/</span> a2<span class=\"sy0\">-</span>a1 <span class=\"sy0\">+</span> b1;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var a = <span class=\"nu0\">0</span>..<span class=\"nu0\">10</span>;<br/>var b = <span class=\"sy0\">-</span><span class=\"nu0\">1</span>..<span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> a <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"#{x} maps to #{map_range(a, b, x)}\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 22, "block": "<pre class=\"text highlighted_source\">program define maprange<br/>\tversion 15.1<br/>\tsyntax varname(numeric) [if] [in], ///<br/>\t\tfrom(numlist min=2 max=2) to(numlist min=2 max=2) ///<br/>\t\tGENerate(name) [REPLACE]<br/>\ttempname a b c d h<br/>\tsca `a'=`:word 1 of `from''<br/>\tsca `b'=`:word 2 of `from''<br/>\tsca `c'=`:word 1 of `to''<br/>\tsca `d'=`:word 2 of `to''<br/>\tsca `h'=(`d'-`c')/(`b'-`a')<br/>\tcap confirm variable `generate'<br/>\tif \"`replace'\"==\"replace\" &amp;\u00a0!_rc {<br/>\t\tqui replace `generate'=(`varlist'-`a')*`h'+`c' `if' `in'<br/>\t}<br/>\telse {<br/>\t\tif \"`replace'\"==\"replace\" {<br/>\t\t\tdi in gr `\"(note: variable `generate' not found)\"'<br/>\t\t}<br/>\t\tqui gen `generate'=(`varlist'-`a')*`h'+`c' `if' `in'<br/>\t}<br/>end</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> rangemap <span class=\"br0\">{</span>rangeA rangeB value<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"re0\">$rangeA</span> a1 a2<br/>    lassign <span class=\"re0\">$rangeB</span> b1 b2<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$b1</span> + <span class=\"br0\">(</span><span class=\"re0\">$value</span> - <span class=\"re0\">$a1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>double<span class=\"br0\">(</span><span class=\"re0\">$b2</span> - <span class=\"re0\">$b1</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span><span class=\"re0\">$a2</span> - <span class=\"re0\">$a1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import flo<br/>\u00a0<br/>f(((\"a1\",\"a2\"),(\"b1\",\"b2\")),\"s\") = plus(\"b1\",div(minus(\"s\",\"a1\"),minus(\"a2\",\"a1\")))<br/>\u00a0<br/>#cast\u00a0%eL<br/>\u00a0<br/>test = f* ((0.,10.),(-1.,0.))-* ari11/0. 10.</pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func real Map(A1, A2, B1, B2, S);<br/>real A1, A2, B1, B2, S;<br/>return B1 + (S-A1)*(B2-B1)/(A2-A1);<br/>\u00a0<br/>int I;<br/>[for I:= 0 to 10 do<br/>    [if I&lt;10 then ChOut(0, ^ );  IntOut(0, I);<br/>    RlOut(0, Map(0., 10., -1., 0., float(I)));<br/>    CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn mapRange([(a1,a2)], [(b1,b2)], s) // a1a2 is List(a1,a2)<br/>   { b1 + ((s - a1) * (b2 - b1) / (a2 - a1)) }<br/>\u00a0<br/>r1:=T(0.0, 10.0); r2:=T(-1.0, 0.0);<br/>foreach s in ([0.0 .. 10]){<br/>   \"%2d maps to\u00a0%5.2f\".fmt(s,mapRange(r1,r2, s)).println();<br/>}</pre>"}]}