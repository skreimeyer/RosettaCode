{"task": "Cholesky_decomposition", "blocks": [{"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Real_Arrays</span>;<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">package</span> Matrix <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Real_Arrays</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;<br/><span class=\"kw3\">package</span> Decomposition <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"co1\">-- decompose a square matrix A by A = L * Transpose (L)</span><br/>   <span class=\"kw3\">procedure</span> Decompose <span class=\"br0\">(</span>A\u00a0: Matrix.<span class=\"me1\">Real_Matrix</span>; L\u00a0: <span class=\"kw3\">out</span> Matrix.<span class=\"me1\">Real_Matrix</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Decomposition;</pre>"}, {"lang": "ALGOL 68", "loc": 59, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> FIELD<span class=\"sy1\">=</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>FIELD<span class=\"br0\">)</span>FIELD field <span class=\"kw24\">sqrt</span> <span class=\"sy1\">=</span> <span class=\"kw24\">long sqrt</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> field prec <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> field fmt <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"br0\">(</span>2<span class=\"sy1\">+</span>1<span class=\"sy1\">+</span>field prec<span class=\"br0\">)</span><span class=\"sy1\">,</span>field prec<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> MAT <span class=\"sy1\">=</span> <span class=\"br0\">[</span>0<span class=\"sy1\">,</span>0<span class=\"br0\">]</span>FIELD<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> cholesky <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MAT a<span class=\"br0\">)</span> MAT<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">UPB</span> a<span class=\"br0\">]</span>FIELD l<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> i <span class=\"kw2\">DO</span><br/>            FIELD s <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> j<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>                s <span class=\"sy1\">+:=</span> l<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>k<span class=\"br0\">]</span> <span class=\"sy1\">*</span> l<span class=\"br0\">[</span>j<span class=\"sy1\">,</span>k<span class=\"br0\">]</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            l<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> i <span class=\"sy1\">=</span> j <br/>                      <span class=\"kw2\">THEN</span> field <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>i<span class=\"br0\">]</span> <span class=\"sy1\">-</span> s<span class=\"br0\">)</span> <br/>                      <span class=\"kw2\">ELSE</span> <span class=\"re1\">1.0</span> <span class=\"sy1\">/</span> l<span class=\"br0\">[</span>j<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">-</span> s<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> i<span class=\"sy1\">+</span>1 <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> <br/>            l<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>0 <span class=\"coMULTI\"># Not required if matrix is declared as triangular #</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    l<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> matrix v1 <span class=\"sy1\">=</span><span class=\"br0\">(</span>MAT a<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"br0\">(</span>2<span class=\"sy1\">+</span>1<span class=\"sy1\">+</span>field prec<span class=\"br0\">)</span><span class=\"sy1\">,</span>field prec<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> a<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span>$l$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> matrix <span class=\"sy1\">=</span><span class=\"br0\">(</span>MAT a<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> vector fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>f<span class=\"br0\">(</span>field  fmt<span class=\"br0\">)</span>n<span class=\"br0\">(</span>2 <span class=\"kw8\">UPB</span> a<span class=\"sy1\">-</span>2 <span class=\"kw8\">LWB</span> a<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span> f<span class=\"br0\">(</span>field  fmt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw6\">FORMAT</span> matrix fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>f<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span>n<span class=\"br0\">(</span>  <span class=\"kw8\">UPB</span> a<span class=\"sy1\">-</span>  <span class=\"kw8\">LWB</span> a<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>lxf<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matrix fmt<span class=\"sy1\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    MAT m1 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>25<span class=\"sy1\">,</span> 15<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>5<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">(</span>15<span class=\"sy1\">,</span> 18<span class=\"sy1\">,</span>  0<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">(</span><span class=\"sy1\">-</span>5<span class=\"sy1\">,</span>  0<span class=\"sy1\">,</span> 11<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    MAT c1 <span class=\"sy1\">=</span> cholesky<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span>$l$<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    MAT m2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>18<span class=\"sy1\">,</span> 22<span class=\"sy1\">,</span>  54<span class=\"sy1\">,</span>  42<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">(</span>22<span class=\"sy1\">,</span> 70<span class=\"sy1\">,</span>  86<span class=\"sy1\">,</span>  62<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">(</span>54<span class=\"sy1\">,</span> 86<span class=\"sy1\">,</span> 174<span class=\"sy1\">,</span> 134<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">(</span>42<span class=\"sy1\">,</span> 62<span class=\"sy1\">,</span> 134<span class=\"sy1\">,</span> 106<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    MAT c2 <span class=\"sy1\">=</span> cholesky<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span>c2<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 46, "block": "<pre class=\"text highlighted_source\">      DIM m1(2,2)<br/>      m1() = 25, 15, -5, \\<br/>      \\      15, 18,  0, \\<br/>      \\      -5,  0, 11<br/>      PROCcholesky(m1())<br/>      PROCprint(m1())<br/>      PRINT<br/>\u00a0<br/>      @% = &amp;2050A<br/>      DIM m2(3,3)<br/>      m2() = 18, 22,  54,  42, \\<br/>      \\      22, 70,  86,  62, \\<br/>      \\      54, 86, 174, 134, \\<br/>      \\      42, 62, 134, 106<br/>      PROCcholesky(m2())<br/>      PROCprint(m2())<br/>      END<br/>\u00a0<br/>      DEF PROCcholesky(a())<br/>      LOCAL i%, j%, k%, l(), s<br/>      DIM l(DIM(a(),1),DIM(a(),2))<br/>      FOR i% = 0 TO DIM(a(),1)<br/>        FOR j% = 0 TO i%<br/>          s = 0<br/>          FOR k% = 0 TO j%-1<br/>            s += l(i%,k%) * l(j%,k%)<br/>          NEXT<br/>          IF i% = j% THEN<br/>            l(i%,j%) = SQR(a(i%,i%) - s)<br/>          ELSE<br/>            l(i%,j%) = (a(i%,j%) - s) / l(j%,j%)<br/>          ENDIF<br/>        NEXT j%<br/>      NEXT i%<br/>      a() = l()<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCprint(a())<br/>      LOCAL row%, col%<br/>      FOR row% = 0 TO DIM(a(),1)<br/>        FOR col% = 0 TO DIM(a(),2)<br/>          PRINT a(row%,col%);<br/>        NEXT<br/>        PRINT<br/>      NEXT row%<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 51, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cholesky<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>A<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>L <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>L <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> j<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                s <span class=\"sy0\">+=</span> L<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> L<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            L<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>                           <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>                           <span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> L<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> L<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_matrix<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>A<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2.5f \"</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> m1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                   <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>c1 <span class=\"sy0\">=</span> cholesky<span class=\"br0\">(</span>m1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    show_matrix<span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> m2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span>  <span class=\"nu0\">62</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>c2 <span class=\"sy0\">=</span> cholesky<span class=\"br0\">(</span>m2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    show_matrix<span class=\"br0\">(</span>c2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 106, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using System;<br/>using System.Collections.Generic;<br/>using System.Linq;<br/>using System.Text;<br/>\u00a0<br/>namespace Cholesky<br/>{<br/>    class Program<br/>    {<br/>        /// &lt;summary&gt;<br/>        /// This is example is written in C#, and compiles with .NET Framework 4.0<br/>        /// &lt;/summary&gt;<br/>        /// &lt;param name=\"args\"&gt;&lt;/param&gt;<br/>        static void Main(string[] args)<br/>        {<br/>            double[,] test1 = new double[,]<br/>            {<br/>                {25, 15, -5},<br/>                {15, 18, 0},<br/>                {-5, 0, 11},<br/>            };<br/>\u00a0<br/>            double[,] test2 = new double[,]<br/>            {<br/>                {18, 22, 54, 42},<br/>                {22, 70, 86, 62},<br/>                {54, 86, 174, 134},<br/>                {42, 62, 134, 106},<br/>            };<br/>\u00a0<br/>            double[,] chol1 = Cholesky(test1);<br/>            double[,] chol2 = Cholesky(test2);<br/>\u00a0<br/>            Console.WriteLine(\"Test 1: \");<br/>            Print(test1);<br/>            Console.WriteLine(\"\");<br/>            Console.WriteLine(\"Lower Cholesky 1: \");<br/>            Print(chol1);<br/>            Console.WriteLine(\"\");<br/>            Console.WriteLine(\"Test 2: \");<br/>            Print(test2);<br/>            Console.WriteLine(\"\");<br/>            Console.WriteLine(\"Lower Cholesky 2: \");<br/>            Print(chol2);<br/>\u00a0<br/>        }<br/>\u00a0<br/>        public static void Print(double[,] a)<br/>        {<br/>            int n = (int)Math.Sqrt(a.Length);<br/>\u00a0<br/>            StringBuilder sb = new StringBuilder();<br/>            for (int r = 0; r &lt; n; r++)<br/>            {<br/>                string s = \"\";<br/>                for (int c = 0; c &lt; n; c++)<br/>                {<br/>                    s += a[r, c].ToString(\"f5\").PadLeft(9) + \",\";<br/>                }<br/>                sb.AppendLine(s);<br/>            }<br/>\u00a0<br/>            Console.WriteLine(sb.ToString());<br/>        }<br/>\u00a0<br/>        /// &lt;summary&gt;<br/>        /// Returns the lower Cholesky Factor, L, of input matrix A. <br/>        /// Satisfies the equation: L*L^T = A.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;param name=\"a\"&gt;Input matrix must be square, symmetric, <br/>        /// and positive definite. This method does not check for these properties,<br/>        /// and may produce unexpected results of those properties are not met.&lt;/param&gt;<br/>        /// &lt;returns&gt;&lt;/returns&gt;<br/>        public static double[,] Cholesky(double[,] a)<br/>        {<br/>            int n = (int)Math.Sqrt(a.Length);<br/>\u00a0<br/>            double[,] ret = new double[n, n];<br/>            for (int r = 0; r &lt; n; r++)<br/>                for (int c = 0; c &lt;= r; c++)<br/>                {<br/>                    if (c == r)<br/>                    {<br/>                        double sum = 0;<br/>                        for (int j = 0; j &lt; c; j++)<br/>                        {<br/>                            sum += ret[c, j] * ret[c, j];<br/>                        }<br/>                        ret[c, c] = Math.Sqrt(a[c, c] - sum);<br/>                    }<br/>                    else<br/>                    {<br/>                        double sum = 0;<br/>                        for (int j = 0; j &lt; c; j++)<br/>                            sum += ret[r, j] * ret[c, j];<br/>                        ret[r, c] = 1.0 / ret[c, c] * (a[r, c] - sum);<br/>                    }<br/>                }<br/>\u00a0<br/>            return ret;<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cholesky<br/>  <span class=\"br0\">[</span>matrix<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">count</span> matrix<span class=\"br0\">)</span><br/>        A <span class=\"br0\">(</span><span class=\"kw1\">to-array-2d</span> matrix<span class=\"br0\">)</span><br/>        L <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>array Double<span class=\"sy0\">/</span>TYPE n n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span><span class=\"kw1\">range</span> n<span class=\"br0\">)</span> j <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>k <span class=\"br0\">(</span><span class=\"kw1\">range</span> j<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> L i k<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> L j k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">aset</span> L i j <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i j<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> A i i<span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> L j j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> A i j<span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vec</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; Calculates the Cholesky decomposition matrix L </span><br/><span class=\"co1\">;; for a positive-definite, symmetric nxn matrix A.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> chol <span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">L</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>n <span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"nu0\">0</span> <span class=\"br0\">(</span>incf k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> k <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">;; First, calculate diagonal elements L_kk.</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k k<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">aref</span> A k k<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"nu0\">0</span> <span class=\"br0\">(</span>incf j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span>sum <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k j<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>                                  <span class=\"br0\">(</span>incf sum <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k j<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> j <span class=\"br0\">(</span>- k <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">;; Then, all elements below a diagonal element, L_ik, i=k+1..n.</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>+ k <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>incf i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> i k<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">aref</span> A i k<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"nu0\">0</span> <span class=\"br0\">(</span>incf j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>sum <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>incf sum <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> j <span class=\"br0\">(</span>- k <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">;; Return the calculated matrix L.</span><br/>    <span class=\"kw1\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> cholesky<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> L <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> A.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> L<span class=\"br0\">)</span><br/>        row<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">A</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> dotProduct<span class=\"br0\">(</span>L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> L<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span> <span class=\"sy0\">:</span><br/>                                 <span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> L<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> L<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                               <span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                               <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%2.0f\u00a0%)<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> m1.<span class=\"me1\">cholesky</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                               <span class=\"br0\">[</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span>  <span class=\"nu0\">62</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                               <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                               <span class=\"br0\">[</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%2.3f\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> m2.<span class=\"me1\">cholesky</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 46, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Cholesky<span class=\"br0\">(</span>a <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Float<span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> n <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>   s <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   n<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">Round</span><span class=\"br0\">(</span><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>a<span class=\"sy1\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span>new Float<span class=\"br0\">[</span>n<span class=\"sy3\">*</span>n<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         s<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"sy1\">;</span><br/>         <span class=\"kw1\">for</span> k<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> j<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            s<span class=\"sy3\">+=</span>Result<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>k<span class=\"br0\">]</span> <span class=\"sy3\">*</span> Result<span class=\"br0\">[</span>j<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">if</span> i<span class=\"sy3\">=</span>j <span class=\"kw1\">then</span><br/>            Result<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>i<span class=\"br0\">]</span><span class=\"sy3\">-</span>s<span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> Result<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span>Result<span class=\"br0\">[</span>j<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"br0\">]</span><span class=\"sy3\">*</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"br0\">]</span><span class=\"sy3\">-</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ShowMatrix<span class=\"br0\">(</span>a <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Float<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> n <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   n<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">Round</span><span class=\"br0\">(</span><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>a<span class=\"sy1\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>         Print<span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%2.5f '</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>a<span class=\"br0\">[</span>i<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> new Float<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>m1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">25.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">15.0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">5.0</span><span class=\"sy1\">,</span> <br/>        <span class=\"nu0\">15.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">18.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">0.0</span><span class=\"sy1\">,</span> <br/>        <span class=\"sy3\">-</span><span class=\"nu0\">5.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">0.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">11.0</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> c1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Cholesky<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>ShowMatrix<span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m2 <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Float <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">18.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">22.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">54.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">42.0</span><span class=\"sy1\">,</span><br/>                             <span class=\"nu0\">22.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">70.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">86.0</span><span class=\"sy1\">,</span>  <span class=\"nu0\">62.0</span><span class=\"sy1\">,</span><br/>                             <span class=\"nu0\">54.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">86.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">174.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">134.0</span><span class=\"sy1\">,</span><br/>                             <span class=\"nu0\">42.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">62.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">134.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">106.0</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> c2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Cholesky<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>ShowMatrix<span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Fantom", "loc": 55, "block": "<pre class=\"text highlighted_source\">**<br/>** Cholesky decomposition<br/>**<br/>\u00a0<br/>class Main<br/>{<br/>  // create an array of Floats, initialised to 0.0<br/>  Float[][] makeArray (Int i, Int j)<br/>  {<br/>    Float[][] result\u00a0:= [,]<br/>    i.times { result.add ([,]) }<br/>    i.times |Int x|<br/>    {<br/>      j.times<br/>      { <br/>        result[x].add(0f)<br/>      }<br/>    }<br/>    return result<br/>  }<br/>\u00a0<br/>  // perform the Cholesky decomposition<br/>  Float[][] cholesky (Float[][] array)<br/>  {<br/>    m\u00a0:= array.size<br/>    Float[][] l\u00a0:= makeArray (m, m)<br/>    m.times |Int i|<br/>    {<br/>      (i+1).times |Int k|<br/>      {<br/>        Float sum\u00a0:= (0..&lt;k).toList.reduce (0f) |Float a, Int j -&gt; Float| <br/>        { <br/>          a + l[i][j] * l[k][j] <br/>        }<br/>        if (i == k)<br/>          l[i][k] = (array[i][i]-sum).sqrt<br/>        else<br/>          l[i][k] = (1.0f / l[k][k]) * (array[i][k] - sum)<br/>      }<br/>    }<br/>    return l<br/>  }<br/>\u00a0<br/>  Void runTest (Float[][] array)<br/>  {<br/>    echo (array)<br/>    echo (cholesky (array))<br/>  }<br/>\u00a0<br/>  Void main ()<br/>  {<br/>    runTest ([[25f,15f,-5f],[15f,18f,0f],[-5f,0f,11f]])<br/>    runTest ([[18f,22f,54f,42f],[22f,70f,86f,62f],[54f,86f,174f,134f],[42f,62f,134f,106f]])<br/>  }<br/>}</pre>"}, {"lang": "Fortran", "loc": 70, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">Program</span> Cholesky_decomp<br/><span class=\"co1\">! *************************************************!</span><br/><span class=\"co1\">! LBH @ ULPGC 06/03/2014</span><br/><span class=\"co1\">! Compute the Cholesky decomposition for a matrix A</span><br/><span class=\"co1\">! after the attached </span><br/><span class=\"co1\">! http://rosettacode.org/wiki/Cholesky_decomposition</span><br/><span class=\"co1\">! note that the matrix A is complex since there might</span><br/><span class=\"co1\">! be values, where the sqrt has complex solutions.</span><br/><span class=\"co1\">! Here, only the real values are taken into account</span><br/><span class=\"co1\">!*************************************************! </span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"co1\">!rows</span><br/><span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"co1\">!cols</span><br/><span class=\"co1\">COMPLEX, DIMENSION(m,n)\u00a0:: A </span><br/><span class=\"kw3\">REAL</span>, <span class=\"kw3\">DIMENSION</span><span class=\"br0\">(</span>m,n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">L</span><br/><span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">sum1</span>, sum2<br/><span class=\"kw3\">INTEGER</span> i,j,k<br/>\u00a0<br/><span class=\"co1\">! Assign values to the matrix</span><br/>A<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">25</span>,  <span class=\"nu0\">15</span>,  <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span>   <br/>A<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">15</span>,  <span class=\"nu0\">18</span>,   <span class=\"nu0\">0</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span>  <br/>A<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span>,   <span class=\"nu0\">0</span>,  <span class=\"nu0\">11</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/><span class=\"co1\">!\u00a0!!!!!!!!!!!another example!!!!!!!</span><br/><span class=\"co1\">! A(1,:) = (/ 18,  22,   54,   42 /) </span><br/><span class=\"co1\">! A(2,:) = (/ 22,  70,   86,   62 /) </span><br/><span class=\"co1\">! A(3,:) = (/ 54,  86,  174,  134 /) </span><br/><span class=\"co1\">! A(4,:) = (/ 42,  62,  134,  106 /)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">! Initialize values</span><br/>L<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>L<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>L<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>L<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>L<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>L<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>L<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>L<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co1\">! for greater order than m,n=3 add initial row value</span><br/><span class=\"co1\">! for instance if m,n=4 then add the following line</span><br/><span class=\"co1\">! L(4,1)=A(4,1)/L(1,1)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/>    <span class=\"kw1\">do</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,i<br/>        sum1<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        sum2<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span>k<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            sum1<span class=\"sy0\">=</span>sum1<span class=\"sy0\">+</span><span class=\"br0\">(</span>L<span class=\"br0\">(</span>k,j<span class=\"br0\">)</span><span class=\"sy0\">*</span>L<span class=\"br0\">(</span>k,j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            L<span class=\"br0\">(</span>k,k<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>k,k<span class=\"br0\">)</span><span class=\"sy0\">-</span>sum1<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>        <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>i &gt; k<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            sum2<span class=\"sy0\">=</span>sum2<span class=\"sy0\">+</span><span class=\"br0\">(</span>L<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">*</span>L<span class=\"br0\">(</span>k,j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            L<span class=\"br0\">(</span>i,k<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>L<span class=\"br0\">(</span>k,k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>i,k<span class=\"br0\">)</span><span class=\"sy0\">-</span>sum2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>            L<span class=\"br0\">(</span>i,k<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">! write output</span><br/><span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,m<br/>    print <span class=\"st0\">\"(3(1X,F6.1))\"</span>,L<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">program</span> Cholesky_decomp</pre>"}, {"lang": "FreeBASIC", "loc": 66, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-01-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Cholesky_decomp<span class=\"br0\">(</span>array<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, k<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> s, l<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>, <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> i<br/>            s = <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">For</span> k = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> j -<span class=\"nu0\">1</span><br/>                s += l<span class=\"br0\">(</span>i, k<span class=\"br0\">)</span> * l<span class=\"br0\">(</span>j, k<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">If</span> i = j <span class=\"kw1\">Then</span><br/>                l<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>i, i<span class=\"br0\">)</span> - s<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Else</span><br/>                l<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = <span class=\"br0\">(</span>array<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> - s<span class=\"br0\">)</span> / l<span class=\"br0\">(</span>j, j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Swap</span> array<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span>, l<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Print_<span class=\"br0\">(</span>array<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###.#####\"</span>;array<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span>  m1<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>  =&gt; <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">25</span>, <span class=\"nu0\">15</span>, -<span class=\"nu0\">5</span><span class=\"br0\">}</span>, _<br/>                            <span class=\"br0\">{</span><span class=\"nu0\">15</span>, <span class=\"nu0\">18</span>,  <span class=\"nu0\">0</span><span class=\"br0\">}</span>, _<br/>                            <span class=\"br0\">{</span>-<span class=\"nu0\">5</span>,  <span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> m2<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> =&gt; <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">18</span>, <span class=\"nu0\">22</span>,  <span class=\"nu0\">54</span>,  <span class=\"nu0\">42</span><span class=\"br0\">}</span>, _<br/>                           <span class=\"br0\">{</span><span class=\"nu0\">22</span>, <span class=\"nu0\">70</span>,  <span class=\"nu0\">86</span>,  <span class=\"nu0\">62</span><span class=\"br0\">}</span>, _<br/>                           <span class=\"br0\">{</span><span class=\"nu0\">54</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">174</span>, <span class=\"nu0\">134</span><span class=\"br0\">}</span>, _<br/>                           <span class=\"br0\">{</span><span class=\"nu0\">42</span>, <span class=\"nu0\">62</span>, <span class=\"nu0\">134</span>, <span class=\"nu0\">106</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>Cholesky_decomp<span class=\"br0\">(</span>m1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Print_<span class=\"br0\">(</span>m1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>Cholesky_decomp<span class=\"br0\">(</span>m2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Print_<span class=\"br0\">(</span>m2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 105, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// symmetric and lower use a packed representation that stores only</span><br/><span class=\"co1\">// the lower triangle.</span><br/>\u00a0<br/><span class=\"kw1\">type</span> symmetric <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    order <span class=\"kw4\">int</span><br/>    ele   <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> lower <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    order <span class=\"kw4\">int</span><br/>    ele   <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// symmetric.print prints a square matrix from the packed representation,</span><br/><span class=\"co1\">// printing the upper triange as a transpose of the lower.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>symmetric<span class=\"sy1\">)</span> <span class=\"kw3\">print</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> eleFmt <span class=\"sy2\">=</span> <span class=\"st0\">\"%10.5f \"</span><br/>    row<span class=\"sy1\">,</span> diag <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>eleFmt<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> diag <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> col <span class=\"sy2\">:=</span> diag<span class=\"sy3\">+</span>row<span class=\"sy1\">,</span> row<span class=\"sy1\">;</span> col &lt; s<span class=\"sy3\">.</span>order<span class=\"sy1\">;</span> j <span class=\"sy2\">+=</span> col <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>eleFmt<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span><br/>                col<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>            row<span class=\"sy2\">++</span><br/>            diag <span class=\"sy2\">+=</span> row<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// lower.print prints a square matrix from the packed representation,</span><br/><span class=\"co1\">// printing the upper triangle as all zeros.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>l <span class=\"sy3\">*</span>lower<span class=\"sy1\">)</span> <span class=\"kw3\">print</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> eleFmt <span class=\"sy2\">=</span> <span class=\"st0\">\"%10.5f \"</span><br/>    row<span class=\"sy1\">,</span> diag <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> l<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>eleFmt<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> diag <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> row<span class=\"sy1\">;</span> j &lt; l<span class=\"sy3\">.</span>order<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>eleFmt<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>            row<span class=\"sy2\">++</span><br/>            diag <span class=\"sy2\">+=</span> row<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// choleskyLower returns the cholesky decomposition of a symmetric real</span><br/><span class=\"co1\">// matrix.  The matrix must be positive definite but this is not checked.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>symmetric<span class=\"sy1\">)</span> choleskyLower<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>lower <span class=\"sy1\">{</span><br/>    l <span class=\"sy2\">:=</span> &amp;lower<span class=\"sy1\">{</span>a<span class=\"sy3\">.</span>order<span class=\"sy1\">,</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>ele<span class=\"sy1\">))}</span><br/>    row<span class=\"sy1\">,</span> col <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>    dr <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">// index of diagonal element at end of row</span><br/>    dc <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">// index of diagonal element at top of column</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; dr <span class=\"sy1\">{</span><br/>            d <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">-</span> l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span> <span class=\"sy3\">/</span> l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>dc<span class=\"sy1\">]</span><br/>            l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<br/>            ci<span class=\"sy1\">,</span> cx <span class=\"sy2\">:=</span> col<span class=\"sy1\">,</span> dc<br/>            <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> dr<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                cx <span class=\"sy2\">+=</span> ci<br/>                ci<span class=\"sy2\">++</span><br/>                l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> d <span class=\"sy3\">*</span> l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>cx<span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>            col<span class=\"sy2\">++</span><br/>            dc <span class=\"sy2\">+=</span> col<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>e <span class=\"sy3\">-</span> l<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>            row<span class=\"sy2\">++</span><br/>            dr <span class=\"sy2\">+=</span> row<br/>            col <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>            dc <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> l<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    demo<span class=\"sy1\">(</span>&amp;symmetric<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"nu0\">25</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">15</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"sy1\">,</span><br/>        <span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">}})</span><br/>    demo<span class=\"sy1\">(</span>&amp;symmetric<span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"nu0\">18</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">22</span><span class=\"sy1\">,</span> <span class=\"nu0\">70</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">54</span><span class=\"sy1\">,</span> <span class=\"nu0\">86</span><span class=\"sy1\">,</span> <span class=\"nu0\">174</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">42</span><span class=\"sy1\">,</span> <span class=\"nu0\">62</span><span class=\"sy1\">,</span> <span class=\"nu0\">134</span><span class=\"sy1\">,</span> <span class=\"nu0\">106</span><span class=\"sy1\">}})</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> demo<span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>symmetric<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"A:\"</span><span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"L:\"</span><span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span>choleskyLower<span class=\"sy1\">()</span><span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 29, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Cholesky <span class=\"br0\">(</span>Arr<span class=\"sy0\">,</span> cholesky<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>IArray<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>MArray<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>Unboxed<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST<br/>\u00a0<br/><span class=\"kw1\">type</span> Idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Arr <span class=\"sy0\">=</span> UArray Idx <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>\u00a0<br/><span class=\"co1\">-- Return the (i,j) element of the lower triangular matrix.  (We assume the</span><br/><span class=\"co1\">-- lower array bound is (0,0).)</span><br/>get <span class=\"sy0\">::</span> Arr <span class=\"sy0\">-&gt;</span> Arr <span class=\"sy0\">-&gt;</span> Idx <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>get a l <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">|</span> i <span class=\"sy0\">==</span> j <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> a<span class=\"sy0\">!</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">-</span> dot<br/>              <span class=\"sy0\">|</span> i  <span class=\"sy0\">&gt;</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">-</span> dot<span class=\"br0\">)</span> <span class=\"sy0\">/</span> l<span class=\"sy0\">!</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><br/>              <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">where</span> dot <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span>l<span class=\"sy0\">!</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<span class=\"sy0\">!</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"sy0\">|</span> k <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Return the lower triangular matrix of a Cholesky decomposition.  We assume</span><br/><span class=\"co1\">-- the input is a real, symmetric, positive-definite matrix, with lower array</span><br/><span class=\"co1\">-- bounds of (0,0).</span><br/>cholesky <span class=\"sy0\">::</span> Arr <span class=\"sy0\">-&gt;</span> Arr<br/>cholesky a <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> maxBnd a<br/>             <span class=\"kw1\">in</span> runSTUArray <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>               l <span class=\"sy0\">&lt;-</span> thaw a<br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>update a l<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> l<br/>  <span class=\"kw1\">where</span> maxBnd <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> bounds<br/>        update a l i <span class=\"sy0\">=</span> unsafeFreeze l <span class=\"sy0\">&gt;&gt;=</span> \\l<span class=\"st0\">' -&gt; writeArray l i (get a l'</span> i<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 41, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> cholesky <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> make_square_array <span class=\"br0\">(</span><span class=\"sy1\">*</span>array<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>array<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>k <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> i<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <br/>      sum <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">every</span> <span class=\"br0\">(</span>j <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>k<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy1\">+:=</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">*</span> result<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> k<span class=\"br0\">)</span> <br/>        <span class=\"kw1\">then</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">-</span> sum<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1.0</span> <span class=\"sy1\">/</span> result<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">-</span> sum<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> make_square_array <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">push</span> <span class=\"br0\">(</span>result<span class=\"sy1\">,</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> print_array <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>row <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>array<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>row <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> do_cholesky <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Input:\"</span><span class=\"br0\">)</span><br/>  print_array <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> cholesky <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Result:\"</span><span class=\"br0\">)</span><br/>  print_array <span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  do_cholesky <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">15</span><span class=\"sy1\">,-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"sy1\">,</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  do_cholesky <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span><span class=\"nu0\">22</span><span class=\"sy1\">,</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span><span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">22</span><span class=\"sy1\">,</span><span class=\"nu0\">70</span><span class=\"sy1\">,</span><span class=\"nu0\">86</span><span class=\"sy1\">,</span><span class=\"nu0\">62</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span><span class=\"nu0\">86</span><span class=\"sy1\">,</span><span class=\"nu0\">174</span><span class=\"sy1\">,</span><span class=\"nu0\">134</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">42</span><span class=\"sy1\">,</span><span class=\"nu0\">62</span><span class=\"sy1\">,</span><span class=\"nu0\">134</span><span class=\"sy1\">,</span><span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Idris", "loc": 68, "block": "<pre class=\"text highlighted_source\">module Main<br/>\u00a0<br/>import Data.Vect<br/>\u00a0<br/>Matrix\u00a0: Nat -&gt; Nat -&gt; Type -&gt; Type<br/>Matrix m n t = Vect m (Vect n t)<br/>\u00a0<br/>\u00a0<br/>zeros\u00a0: (m\u00a0: Nat) -&gt; (n\u00a0: Nat) -&gt; Matrix m n Double<br/>zeros m n = replicate m (replicate n 0.0)<br/>\u00a0<br/>\u00a0<br/>indexM\u00a0: (Fin m, Fin n) -&gt; Matrix m n t -&gt; t<br/>indexM (i, j) a = index j (index i a)<br/>\u00a0<br/>\u00a0<br/>replaceAtM\u00a0: (Fin m, Fin n) -&gt; t -&gt; Matrix m n t -&gt; Matrix m n t<br/>replaceAtM (i, j) e a = replaceAt i (replaceAt j e (index i a)) a<br/>\u00a0<br/>\u00a0<br/>get\u00a0: Matrix m m Double -&gt; Matrix m m Double -&gt; (Fin m, Fin m) -&gt; Double<br/>get a l (i, j) {m} =  if i == j then sqrt $ indexM (j, j) a - dot<br/>             else if i &gt; j  then (indexM (i, j) a - dot) / indexM (j, j) l <br/>             else 0.0<br/>\u00a0<br/>  where        <br/>        -- Obtain indicies 0 to j -1 <br/>        ks\u00a0: List (Fin m)<br/>        ks = case (findIndices (\\_ =&gt; True) a) of<br/>          [] =&gt; []<br/>          (x::xs) =&gt; init (x::xs) <br/>\u00a0<br/>        dot\u00a0: Double<br/>        dot = sum [(indexM (i, k) l) * (indexM (j, k) l) | k &lt;- ks]<br/>\u00a0<br/>\u00a0<br/>updateL\u00a0: Matrix m m Double -&gt; Matrix m m Double -&gt; (Fin m, Fin m) -&gt; Matrix m m Double<br/>updateL a l idx = replaceAtM idx (get a l idx) l<br/>\u00a0<br/>\u00a0<br/>cholesky\u00a0: Matrix m m Double -&gt; Matrix m m Double<br/>cholesky a {m} = <br/>    foldl (\\l',i =&gt; <br/>        foldl (\\l'',j =&gt; updateL a l'' (i, j)) l' (js i)) <br/>          l is<br/>  where  l = zeros m m<br/>\u00a0<br/>         is\u00a0: List (Fin m) <br/>         is = findIndices (\\_ =&gt; True) a<br/>\u00a0<br/>         js\u00a0: Fin m -&gt; List (Fin m)<br/>         js n = filter (&lt;= n) is<br/>\u00a0<br/>\u00a0<br/>ex1\u00a0: Matrix 3 3 Double<br/>ex1 = cholesky [[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]] <br/>\u00a0<br/>ex2\u00a0: Matrix 4 4 Double<br/>ex2 = cholesky [[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0],<br/>                [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]] <br/>\u00a0<br/>main\u00a0: IO () <br/>main = do<br/>  print ex1<br/>  putStrLn \"\\n\"<br/>  print ex2<br/>  putStrLn \"\\n\"<br/>\u00a0</pre>"}, {"lang": "J", "loc": 15, "block": "<pre class=\"j highlighted_source\">mp=: +/ . *  <span class=\"co1\">NB. matrix product</span><br/>h =: <a class=\"__cf_email__\" data-cfemail=\"ac87ec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>|:    <span class=\"co1\">NB. conjugate transpose</span><br/>\u00a0<br/>cholesky=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/> <span class=\"kw2\">n</span>=. #A=. <span class=\"kw2\">y</span><br/> <span class=\"kw1\">if.</span> <span class=\"nu0\">1</span>&gt;:<span class=\"kw2\">n</span> <span class=\"kw1\">do.</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span>A=|A<span class=\"sy0\">)</span>&gt;<span class=\"nu0\">0</span>=A  <span class=\"co1\">NB. check for positive definite</span><br/> \u00a0%:A<br/> <span class=\"kw1\">else.</span><br/>  <span class=\"st_h\">'X Y t Z'</span>=. , <span class=\"sy0\">(</span>;~<span class=\"kw2\">n</span>$<span class=\"sy0\">(</span>&gt;.-:<span class=\"kw2\">n</span><span class=\"sy0\">)</span>{.<span class=\"nu0\">1</span><span class=\"sy0\">)</span> &lt;;.<span class=\"nu0\">1</span> A<br/>  L0=. cholesky X<br/>  L1=. cholesky Z-<span class=\"sy0\">(</span>T=.<span class=\"sy0\">(</span>h Y<span class=\"sy0\">)</span> mp\u00a0%.X<span class=\"sy0\">)</span> mp Y<br/>  L0,<span class=\"sy0\">(</span>T mp L0<span class=\"sy0\">)</span>,.L1<br/> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Cholesky <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> chol<span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">int</span> m = a.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> l = <span class=\"kw2\">new</span> <span class=\"kw3\">double</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//automatically initialzed to 0's</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> k = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> k++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw3\">double</span> sum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\tsum += l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> = <span class=\"br0\">(</span>i == k<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> - sum<span class=\"br0\">)</span>\u00a0:<br/>\t\t\t\t\t<span class=\"br0\">(</span><span class=\"nu0\">1.0</span> / l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> - sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> l<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> test1 = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">25</span>, <span class=\"nu0\">15</span>, -<span class=\"nu0\">5</span><span class=\"br0\">}</span>,<br/>\t\t\t\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">15</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>,<br/>\t\t\t\t\t\t\t<span class=\"br0\">{</span>-<span class=\"nu0\">5</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">deepToString</span><span class=\"br0\">(</span>chol<span class=\"br0\">(</span>test1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> test2 = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">18</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">54</span>, <span class=\"nu0\">42</span><span class=\"br0\">}</span>,<br/>\t\t\t\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">22</span>, <span class=\"nu0\">70</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">62</span><span class=\"br0\">}</span>,<br/>\t\t\t\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">54</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">174</span>, <span class=\"nu0\">134</span><span class=\"br0\">}</span>,<br/>\t\t\t\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">42</span>, <span class=\"nu0\">62</span>, <span class=\"nu0\">134</span>, <span class=\"nu0\">106</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">deepToString</span><span class=\"br0\">(</span>chol<span class=\"br0\">(</span>test2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 39, "block": "<pre class=\"text highlighted_source\"># Create an m x n matrix<br/> def matrix(m; n; init):<br/>   if m == 0 then []<br/>   elif m == 1 then [range(0; n)] | map(init)<br/>   elif m &gt; 0 then<br/>     matrix(1; n; init) as $row<br/>     | [range(0; m)] | map( $row )<br/>   else error(\"matrix\\(m);_;_) invalid\")<br/>   end\u00a0;<br/>\u00a0<br/># Print a matrix neatly, each cell ideally occupying n spaces,<br/># but without truncation<br/>def neatly(n):<br/>  def right: tostring | ( \" \" * (n-length) + .);<br/>  . as $in<br/>  | length as $length<br/>  | reduce range (0; $length) as $i<br/>      (\"\"; . + reduce range(0; $length) as $j<br/>      (\"\"; \"\\(.) \\($in[$i][$j] | right )\" ) + \"\\n\" )\u00a0;<br/>\u00a0<br/>def is_square:<br/>  type == \"array\" and (map(type == \"array\") | all) and<br/>    length == 0 or ( (.[0]|length) as $l | map(length == $l) | all)\u00a0;<br/>\u00a0<br/># This implementation of is_symmetric/0 uses a helper function that circumvents<br/># limitations of jq 1.4:<br/>def is_symmetric:<br/>    # [matrix, i,j, len]<br/>    def test:<br/>       if .[1] &gt; .[3] then true<br/>       elif .[1] == .[2] then [ .[0], .[1] + 1, 0, .[3]] | test<br/>       elif .[0][.[1]][.[2]] == .[0][.[2]][.[1]]<br/>         then [ .[0], .[1], .[2]+1, .[3]] | test<br/>      else false<br/>      end;<br/>    if is_square|not then false <br/>    else [ ., 0, 0, length ] | test<br/>    end\u00a0;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = [25 15 5; 15 18 0; -5 0 11]<br/>b = [18 22 54 22; 22 70 86 62; 54 86 174 134; 42 62 134 106]<br/>\u00a0<br/>println(a, \"\\n =&gt; \\n\", chol(a,\u00a0:L))<br/>println(b, \"\\n =&gt; \\n\", chol(b,\u00a0:L))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun cholesky<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> DoubleArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a.<span class=\"me1\">size</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s<span class=\"sy0\">:</span> Double<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> .. <span class=\"me1\">i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until j<span class=\"br0\">)</span> s +<span class=\"sy0\">=</span> l<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n + k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> l<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n + k<span class=\"br0\">]</span><br/>            l<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n + j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>                <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n + i<span class=\"br0\">]</span> - s<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>     -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span> / l<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n + j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n + j<span class=\"br0\">]</span> - s<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> l<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun showMatrix<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a.<span class=\"me1\">size</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%8.5f \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n + j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m1 <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">25.0</span>, <span class=\"nu0\">15.0</span>, -<span class=\"nu0\">5.0</span>,<br/>                           <span class=\"nu0\">15.0</span>, <span class=\"nu0\">18.0</span>,  <span class=\"nu0\">0.0</span>,<br/>                           -<span class=\"nu0\">5.0</span>,  <span class=\"nu0\">0.0</span>, <span class=\"nu0\">11.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c1 <span class=\"sy0\">=</span> cholesky<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><br/>    showMatrix<span class=\"br0\">(</span>c1<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m2 <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">18.0</span>, <span class=\"nu0\">22.0</span>,  <span class=\"nu0\">54.0</span>,  <span class=\"nu0\">42.0</span>,<br/>                           <span class=\"nu0\">22.0</span>, <span class=\"nu0\">70.0</span>,  <span class=\"nu0\">86.0</span>,  <span class=\"nu0\">62.0</span>,<br/>                           <span class=\"nu0\">54.0</span>, <span class=\"nu0\">86.0</span>, <span class=\"nu0\">174.0</span>, <span class=\"nu0\">134.0</span>,<br/>                           <span class=\"nu0\">42.0</span>, <span class=\"nu0\">62.0</span>, <span class=\"nu0\">134.0</span>, <span class=\"nu0\">106.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c2 <span class=\"sy0\">=</span> cholesky<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><br/>    showMatrix<span class=\"br0\">(</span>c2<span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 52, "block": "<pre class=\"text highlighted_source\">&gt; A\u00a0:= &lt;&lt; 25, 15, -5; 15, 18, 0; -5, 0, 11 &gt;&gt;;<br/>                              [25    15    -5]<br/>                              [              ]<br/>                         A\u00a0:= [15    18     0]<br/>                              [              ]<br/>                              [-5     0    11]<br/>\u00a0<br/>&gt; B\u00a0:= &lt;&lt; 18, 22, 54, 42; 22, 70, 86, 62; 54, 86, 174, 134; 42, 62, 134, 106&gt;&gt;;<br/>                          [18    22     54     42]<br/>                          [                      ]<br/>                          [22    70     86     62]<br/>                     B\u00a0:= [                      ]<br/>                          [54    86    174    134]<br/>                          [                      ]<br/>                          [42    62    134    106]<br/>\u00a0<br/>&gt; use LinearAlgebra in<br/>&gt;       LUDecomposition( A, method = Cholesky );<br/>&gt;       LUDecomposition( B, method = Cholesky );<br/>&gt;       evalf(\u00a0% );<br/>&gt; end use;<br/>                             [ 5    0    0]<br/>                             [            ]<br/>                             [ 3    3    0]<br/>                             [            ]<br/>                             [-1    1    3]<br/>\u00a0<br/>             [   1/2                                      ]<br/>             [3 2           0            0            0   ]<br/>             [                                            ]<br/>             [    1/2        1/2                          ]<br/>             [11 2       2 97                             ]<br/>             [-------    -------         0            0   ]<br/>             [   3          3                             ]<br/>             [                                            ]<br/>             [                1/2          1/2            ]<br/>             [   1/2     30 97       2 6402               ]<br/>             [9 2        --------    ---------        0   ]<br/>             [              97          97                ]<br/>             [                                            ]<br/>             [                1/2           1/2        1/2]<br/>             [   1/2     16 97       74 6402       8 33   ]<br/>             [7 2        --------    ----------    -------]<br/>             [              97          3201         33   ]<br/>\u00a0<br/>       [4.242640686        0.             0.             0.     ]<br/>       [                                                        ]<br/>       [5.185449728    6.565905202        0.             0.     ]<br/>       [                                                        ]<br/>       [12.72792206    3.046038495    1.649742248        0.     ]<br/>       [                                                        ]<br/>       [9.899494934    1.624553864    1.849711006    1.392621248]</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">CholeskyDecomposition[{{25, 15, -5}, {15, 18, 0}, {-5, 0, 11}}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 14, "block": "<pre class=\"matlab highlighted_source\">  A = <span class=\"br0\">[</span><br/>  <span class=\"nu0\">25</span>  <span class=\"nu0\">15</span>  -<span class=\"nu0\">5</span><br/>  <span class=\"nu0\">15</span>  <span class=\"nu0\">18</span>   <span class=\"nu0\">0</span><br/>  -<span class=\"nu0\">5</span>   <span class=\"nu0\">0</span>  <span class=\"nu0\">11</span> <span class=\"br0\">]</span>;<br/>\u00a0<br/>  B  = <span class=\"br0\">[</span> <br/>  <span class=\"nu0\">18</span>  <span class=\"nu0\">22</span>   <span class=\"nu0\">54</span>   <span class=\"nu0\">42</span><br/>  <span class=\"nu0\">22</span>  <span class=\"nu0\">70</span>   <span class=\"nu0\">86</span>   <span class=\"nu0\">62</span><br/>  <span class=\"nu0\">54</span>  <span class=\"nu0\">86</span>  <span class=\"nu0\">174</span>  <span class=\"nu0\">134</span><br/>  <span class=\"nu0\">42</span>  <span class=\"nu0\">62</span>  <span class=\"nu0\">134</span>  <span class=\"nu0\">106</span>   <span class=\"br0\">]</span>;<br/>\u00a0<br/>  <span class=\"br0\">[</span>L<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/chol.html\"><span class=\"kw2\">chol</span></a><span class=\"br0\">(</span>A,<span class=\"co2\">'lower'</span><span class=\"br0\">)</span>  <br/>  <span class=\"br0\">[</span>L<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/chol.html\"><span class=\"kw2\">chol</span></a><span class=\"br0\">(</span>B,<span class=\"co2\">'lower'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 12, "block": "<pre class=\"text highlighted_source\">/* Cholesky decomposition is built-in */<br/>\u00a0<br/>a: hilbert_matrix(4)$<br/>\u00a0<br/>b: cholesky(a);<br/>/* matrix([1,   0,             0,             0             ],<br/>          [1/2, 1/(2*sqrt(3)), 0,             0             ],<br/>          [1/3, 1/(2*sqrt(3)), 1/(6*sqrt(5)), 0             ],<br/>          [1/4, 3^(3/2)/20,    1/(4*sqrt(5)), 1/(20*sqrt(7))]) */<br/>\u00a0<br/>b . transpose(b) - a;<br/>matrix([0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0])</pre>"}, {"lang": "Nim", "loc": 28, "block": "<pre class=\"text highlighted_source\">import math, strutils<br/>\u00a0<br/>proc cholesky[T](a: T): T =<br/>  for i in 0 .. &lt; a[0].len:<br/>    for j in 0 .. i:<br/>      var s = 0.0<br/>      for k in 0 .. &lt; j:<br/>        s += result[i][k] * result[j][k]<br/>      result[i][j] = if i == j: sqrt(a[i][i]-s)<br/>        else: (1.0 / result[j][j] * (a[i][j] - s))<br/>\u00a0<br/>proc `$`(a): string =<br/>  result = \"\"<br/>  for b in a:<br/>    for c in b:<br/>      result.add c.formatFloat(ffDecimal, 5) &amp; \" \"<br/>    result.add \"\\n\"<br/>\u00a0<br/>let m1 = [[25.0, 15.0, -5.0],<br/>          [15.0, 18.0,  0.0],<br/>          [-5.0,  0.0, 11.0]]<br/>echo cholesky(m1)<br/>\u00a0<br/>let m2 = [[18.0, 22.0,  54.0,  42.0],<br/>          [22.0, 70.0,  86.0,  62.0],<br/>          [54.0, 86.0, 174.0, 134.0],<br/>          [42.0, 62.0, 134.0, 106.0]]<br/>echo cholesky(m2)</pre>"}, {"lang": "Objeck", "loc": 45, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Cholesky <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    m1 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">25.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">15.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">15.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">18.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    c1 <span class=\"sy0\">:=</span> Cholesky<span class=\"br0\">(</span>m1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ShowMatrix<span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    n <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    m2 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">18.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">22.0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54.0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">22.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">70.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">86.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">62.0</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">54.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">86.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">174.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">134.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">42.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">62.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">134.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">106.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    c2 <span class=\"sy0\">:=</span> Cholesky<span class=\"br0\">(</span>m2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ShowMatrix<span class=\"br0\">(</span>c2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> ShowMatrix<span class=\"br0\">(</span>A <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>'\\t'<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Cholesky<span class=\"br0\">(</span>A <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    L <span class=\"sy0\">:=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> j<span class=\"sy0\">;</span> k<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          s <span class=\"sy0\">+=</span> L<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> L<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        L<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j<span class=\"br0\">)</span>\u00a0?<br/>          <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> L<span class=\"br0\">[</span>j <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> L<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 30, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> cholesky inp <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length inp <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n n <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> factor i k <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> sum j <span class=\"sy0\">=</span><br/>         <span class=\"kw1\">if</span> j <span class=\"sy0\">=</span> k <span class=\"kw1\">then</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">else</span><br/>         res<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> res<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+.</span> sum <span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      inp<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">-.</span> sum <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">for</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      res<span class=\"sy0\">.</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>factor col col<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> row <span class=\"sy0\">=</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>         res<span class=\"sy0\">.</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span>factor row col<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> res<span class=\"sy0\">.</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><br/>   <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>   res<br/>\u00a0<br/><span class=\"kw1\">let</span> pr_vec v <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%9.5f\"</span><span class=\"br0\">)</span> v<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> show <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter pr_vec<br/><span class=\"kw1\">let</span> test a <span class=\"sy0\">=</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"\\nin:\"</span><span class=\"sy0\">;</span> show a<span class=\"sy0\">;</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"out:\"</span><span class=\"sy0\">;</span> show <span class=\"br0\">(</span>cholesky a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span><br/>   test <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">25.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">15.0</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">15.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">18.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">0.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">[</span><span class=\"sy0\">|-</span><span class=\"nu0\">5.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">11.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   test <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">18.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">22.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">54.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">42.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">22.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">70.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">86.0</span><span class=\"sy0\">;</span>  <span class=\"nu0\">62.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">54.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">86.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">174.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">134.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">42.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">62.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">134.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">106.0</span><span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "ooRexx", "loc": 51, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs the  Cholesky  decomposition  on a square matrix.     */</span><br/>niner =  <span class=\"st0\">'25  15  -5'</span> ,                              <span class=\"coMULTI\">/*define a  3x3  matrix. */</span><br/>         <span class=\"st0\">'15  18   0'</span> ,<br/>         <span class=\"st0\">'-5   0  11'</span><br/>                           <span class=\"kw1\">call</span> Cholesky niner<br/>hexer =  <span class=\"nu0\">18</span>  <span class=\"nu0\">22</span>  <span class=\"nu0\">54</span>  <span class=\"nu0\">42</span>,                             <span class=\"coMULTI\">/*define a  4x4  matrix. */</span><br/>         <span class=\"nu0\">22</span>  <span class=\"nu0\">70</span>  <span class=\"nu0\">86</span>  <span class=\"nu0\">62</span>,<br/>         <span class=\"nu0\">54</span>  <span class=\"nu0\">86</span> <span class=\"nu0\">174</span> <span class=\"nu0\">134</span>,<br/>         <span class=\"nu0\">42</span>  <span class=\"nu0\">62</span> <span class=\"nu0\">134</span> <span class=\"nu0\">106</span><br/>                           <span class=\"kw1\">call</span> Cholesky hexer<br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*----------------------------------------------------------------------------*/</span><br/>Cholesky: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> mat;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">call</span> tell <span class=\"st0\">'input matrix'</span>,mat<br/>             <span class=\"kw1\">do</span>    r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord<br/>                <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> r; d=<span class=\"nu0\">0</span>;  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> c-<span class=\"nu0\">1</span>; d=d+!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>i<span class=\"sy0\">*</span>!<span class=\"sy0\">.</span>c<span class=\"sy0\">.</span>i; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span><br/>                <span class=\"kw1\">if</span> r=c  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>r=sqrt<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>r-d<span class=\"br0\">)</span><br/>                        <span class=\"kw3\">else</span>\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=<span class=\"nu0\">1</span><span class=\"sy0\">/</span>!<span class=\"sy0\">.</span>c<span class=\"sy0\">.</span>c<span class=\"sy0\">*</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c-d<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>             <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">call</span> tell  <span class=\"st0\">'Cholesky factor'</span>,,!<span class=\"sy0\">.</span>,<span class=\"st0\">'-'</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*----------------------------------------------------------------------------*/</span><br/>err:   <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'***error***!'</span>;    <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*----------------------------------------------------------------------------*/</span><br/>tell:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> hdr,x,y,sep;   n=<span class=\"nu0\">0</span>;             <span class=\"kw1\">if</span> sep==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> sep=<span class=\"st0\">'-'</span><br/>       dPlaces= <span class=\"nu0\">5</span>                    <span class=\"coMULTI\">/*n decimal places past the decimal point*/</span><br/>       width  =<span class=\"nu0\">10</span>                    <span class=\"coMULTI\">/*width of field used to display elements*/</span><br/>       <span class=\"kw1\">if</span> y==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>                 <span class=\"kw3\">else</span> <span class=\"kw1\">do</span> row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord; <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord; x=x\u00a0!<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col; <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span><br/>       w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>           <span class=\"kw1\">do</span> ord=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> ord<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">&gt;</span>=w; <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*a fast way to find matrix's order*/</span><br/>       <span class=\"kw1\">say</span><br/>       <span class=\"kw1\">if</span> ord<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">\\</span>==w  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">\"matrix elements don't form a square matrix.\"</span><br/>       <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>hdr, <span class=\"br0\">(</span><span class=\"br0\">(</span>width+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>w<span class=\"br0\">)</span>%ord, sep<span class=\"br0\">)</span><br/>       <span class=\"kw1\">say</span><br/>               <span class=\"kw1\">do</span>   row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;       z=<span class=\"st0\">''</span><br/>                 <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;       n=n+<span class=\"nu0\">1</span><br/>                                    a<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x,n<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">if</span> col<span class=\"sy0\">&lt;</span>=row  <span class=\"kw3\">then</span> \u00a0!<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col=a<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col<br/>                 z=z  <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col,, dPlaces<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>,   width<span class=\"br0\">)</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span><br/>               <span class=\"kw1\">say</span> z<br/>               <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*row*/</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*----------------------------------------------------------------------------*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  i=<span class=\"st0\">''</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span>; <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">do</span>; x=-x; i=<span class=\"st0\">'i'</span>; <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;       g=g<span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_%2<br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;              h=h%2+<span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k; g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;     <span class=\"kw1\">return</span> <span class=\"br0\">(</span>g<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>i            <span class=\"coMULTI\">/*make complex if X &lt; 0.*/</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">cholesky<span class=\"br0\">(</span>M<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>  my <span class=\"br0\">(</span>L <span class=\"sy0\">=</span> <span class=\"kw1\">matrix</span><span class=\"br0\">(</span>#M<span class=\"sy0\">,</span>#M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> #M<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span><br/>      s <span class=\"sy0\">=</span> <span class=\"kw1\">sum</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> L<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> L<span class=\"br0\">[</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      L<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"sy0\">,</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span> <span class=\"sy0\">/</span> L<span class=\"br0\">[</span>j<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  L<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 64, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Cholesky<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  D2Array <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> double<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> cholesky<span class=\"br0\">(</span><span class=\"kw1\">const</span> A<span class=\"sy1\">:</span> D2Array<span class=\"br0\">)</span><span class=\"sy1\">:</span> D2Array<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    s<span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    setlength<span class=\"br0\">(</span>cholesky<span class=\"sy1\">,</span> length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">,</span> length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>cholesky<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>cholesky<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>\ts <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t  s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s <span class=\"sy3\">+</span> cholesky<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy3\">*</span> cholesky<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">if</span> i <span class=\"sy3\">=</span> j <span class=\"kw1\">then</span><br/>\t  cholesky<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">-</span> s<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">else</span><br/>          cholesky<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">-</span> s<span class=\"br0\">)</span> <span class=\"sy3\">/</span> cholesky<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span>  <span class=\"co1\">// save one multiplication compared to the original</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span>  <br/>\u00a0<br/><span class=\"kw1\">procedure</span> printM<span class=\"br0\">(</span><span class=\"kw1\">const</span> A<span class=\"sy1\">:</span> D2Array<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  low<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  m1<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> double <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span> <span class=\"nu0\">15</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                    <span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"sy1\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t            <span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span>  <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  m2<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> double <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span> <span class=\"nu0\">22</span><span class=\"sy1\">,</span>  <span class=\"nu0\">54</span><span class=\"sy1\">,</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                    <span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"sy1\">,</span> <span class=\"nu0\">70</span><span class=\"sy1\">,</span>  <span class=\"nu0\">86</span><span class=\"sy1\">,</span>  <span class=\"nu0\">62</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t\t    <span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span> <span class=\"nu0\">86</span><span class=\"sy1\">,</span> <span class=\"nu0\">174</span><span class=\"sy1\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t\t    <span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy1\">,</span> <span class=\"nu0\">62</span><span class=\"sy1\">,</span> <span class=\"nu0\">134</span><span class=\"sy1\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  <span class=\"kw1\">index</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  cIn<span class=\"sy1\">,</span> cOut<span class=\"sy1\">:</span> D2Array<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  setlength<span class=\"br0\">(</span>cIn<span class=\"sy1\">,</span> length<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"sy1\">,</span> length<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">index</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>m1<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>m1<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    cIn<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> m1<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  cOut <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cholesky<span class=\"br0\">(</span>cIn<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  printM<span class=\"br0\">(</span>cOut<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  setlength<span class=\"br0\">(</span>cIn<span class=\"sy1\">,</span> length<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"sy1\">,</span> length<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">index</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>m2<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>m2<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    cIn<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> m2<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  cOut <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cholesky<span class=\"br0\">(</span>cIn<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  printM<span class=\"br0\">(</span>cOut<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 26, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> cholesky <span class=\"br0\">{</span> <br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$matrix</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$chol</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"re0\">@$matrix</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@$matrix</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">@$matrix</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$$matrix</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$col</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/>      <span class=\"re0\">$x</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$$chol</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"re0\">$$chol</span><span class=\"br0\">[</span><span class=\"re0\">$col</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$col</span><span class=\"sy0\">;</span> <br/>      <span class=\"re0\">$$chol</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$col</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$row</span> <span class=\"sy0\">==</span> <span class=\"re0\">$col</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">/</span><span class=\"re0\">$$chol</span><span class=\"br0\">[</span><span class=\"re0\">$col</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$col</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span> <br/>  <span class=\"br0\">}</span> <br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$chol</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span> <br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$example1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>\t\t <span class=\"br0\">[</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>\t\t <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Example 1:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">+</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%7.4f<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> cholesky <span class=\"re0\">$example1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> <br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$example2</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>\t\t <span class=\"br0\">[</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span>  <span class=\"nu0\">62</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>\t\t <span class=\"br0\">[</span> <span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>\t\t <span class=\"br0\">[</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Example 2:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">+</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%7.4f<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> cholesky <span class=\"re0\">$example2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> cholesky<span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@L</span> <span class=\"sy0\">=</span> <span class=\"re0\">@A</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@A</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$i</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">@L</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span> <span class=\"sy0\">??</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">sqrt</span> <span class=\"sy0\">!!</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"re0\">@L</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span><span class=\"br0\">(</span><br/>\t\t<span class=\"re0\">@A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"re0\">@L</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;*</span><span class=\"br0\">]</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@L</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">;*</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@L</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> cholesky <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> cholesky <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>       <br/>    <span class=\"br0\">[</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span>  <span class=\"nu0\">62</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>       <br/>    <span class=\"br0\">[</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function cholesky(sequence matrix)<br/>integer l = length(matrix)<br/>sequence chol = repeat(repeat(0,l),l)<br/>    for row=1 to l do<br/>        for col=1 to row do<br/>            atom x = matrix[row][col]<br/>            for i=1 to col do<br/>                x -= chol[row][i] * chol[col][i]<br/>            end for<br/>            chol[row][col] = iff(row == col\u00a0? sqrt(x)\u00a0: x/chol[col][col])<br/>        end for<br/>    end for<br/>    return chol<br/>end function<br/>\u00a0<br/>ppOpt({pp_Nest,1})<br/>pp(cholesky({{ 25, 15, -5 },<br/>             { 15, 18,  0 },<br/>             { -5,  0, 11 }}))<br/>pp(cholesky({{ 18, 22,  54,  42},<br/>             { 22, 70,  86,  62},<br/>             { 54, 86, 174, 134},<br/>             { 42, 62, 134, 106}}))</pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(scl 9)<br/>(load \"@lib/math.l\")<br/>\u00a0<br/>(de cholesky (A)<br/>   (let L (mapcar '(() (need (length A) 0)) A)<br/>      (for (I . R) A<br/>         (for J I<br/>            (let S (get R J)<br/>               (for K (inc J)<br/>                  (dec 'S (*/ (get L I K) (get L J K) 1.0)) )<br/>               (set (nth L I J)<br/>                  (if (= I J)<br/>                     (sqrt S 1.0)<br/>                     (*/ S 1.0 (get L J J)) ) ) ) ) )<br/>      (for R L<br/>         (for N R (prin (align 9 (round N 5))))<br/>         (prinl) ) ) )</pre>"}, {"lang": "PL/I", "loc": 47, "block": "<pre class=\"text highlighted_source\">(subscriptrange):<br/>decompose: procedure options (main);   /* 31 October 2013 */<br/>   declare a(*,*) float controlled;<br/>\u00a0<br/>   allocate a(3,3) initial (25, 15, -5,<br/>                            15, 18,  0,<br/>                            -5,  0, 11);<br/>    put skip list ('Original matrix:');<br/>    put edit (a) (skip, 3 f(4));<br/>\u00a0<br/>    call cholesky(a);<br/>    put skip list ('Decomposed matrix');<br/>    put edit (a) (skip, 3 f(4));<br/>    free a;<br/>    allocate a(4,4) initial (18, 22,  54,  42,<br/>                             22, 70,  86,  62,<br/>                             54, 86, 174, 134,<br/>                             42, 62, 134, 106);<br/>    put skip list ('Original matrix:');<br/>    put edit (a) (skip, (hbound(a,1)) f(12) );<br/>    call cholesky(a);<br/>    put skip list ('Decomposed matrix');<br/>    put edit (a) (skip, (hbound(a,1)) f(12,5) );<br/>\u00a0<br/>cholesky: procedure(a);<br/>   declare a(*,*) float;<br/>   declare L(hbound(a,1), hbound(a,2)) float;<br/>   declare s float;<br/>   declare (i, j, k) fixed binary;<br/>\u00a0<br/>   L = 0;<br/>   do i = lbound(a,1) to hbound(a,1);<br/>      do j = lbound(a,2) to i;<br/>         s = 0;<br/>         do k = lbound(a,2) to j-1;<br/>            s = s + L(i,k) * L(j,k);<br/>         end;<br/>         if i = j then<br/>            L(i,j) = sqrt(a(i,i) - s);<br/>         else<br/>            L(i,j) = (a(i,j) - s) / L(j,j);<br/>      end;<br/>   end;<br/>   a = L;<br/>end cholesky;<br/>\u00a0<br/>end decompose;</pre>"}, {"lang": "PowerShell", "loc": 58, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> cholesky <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.count<br/>        <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span>  <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sum</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$l</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$l</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> show<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$a</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"st0\">\"$($a[$_])\"</span><span class=\"br0\">}</span><span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/><span class=\"st0\">\"a1 =\"</span><br/>show <span class=\"re0\">$a1</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"l1 =\"</span><br/>show <span class=\"br0\">(</span>cholesky <span class=\"re0\">$a1</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"re0\">$a2</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/><span class=\"st0\">\"a2 =\"</span><br/>show <span class=\"re0\">$a2</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"l2 =\"</span><br/>show <span class=\"br0\">(</span>cholesky <span class=\"re0\">$a2</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">import</span> <span class=\"kw3\">pprint</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> cholesky<span class=\"br0\">(</span>A<span class=\"br0\">)</span>:<br/>    L <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.0</span><span class=\"br0\">]</span> * <span class=\"kw2\">len</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            s <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> * L<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> - s<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> <span class=\"kw1\">else</span> \\<br/>                      <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> / L<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> * <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> - s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> L<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    m1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> -<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span>-<span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">pprint</span><span class=\"br0\">(</span>cholesky<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    m2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span>  <span class=\"nu0\">54</span><span class=\"sy0\">,</span>  <span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span>  <span class=\"nu0\">86</span><span class=\"sy0\">,</span>  <span class=\"nu0\">62</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">174</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">134</span><span class=\"sy0\">,</span> <span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">pprint</span><span class=\"br0\">(</span>cholesky<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"sy0\">,</span> width<span class=\"sy0\">=</span><span class=\"nu0\">120</span><span class=\"br0\">)</span></pre>"}, {"lang": "q", "loc": 16, "block": "<pre class=\"q highlighted_source\">solve:<span class=\"br0\">{</span><span class=\"br0\">[</span>A;B<span class=\"br0\">]</span> <span class=\"sy0\">$</span><span class=\"br0\">[</span>0h&gt;<span class=\"kw1\">type</span> A;B<span class=\"sy0\">%</span>A;<span class=\"kw1\">inv</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"kw1\">mmu</span> B<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>ak:<span class=\"br0\">{</span><span class=\"br0\">[</span>m;k<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,/:</span>m<span class=\"br0\">[</span>;k<span class=\"br0\">]</span><span class=\"kw1\">til</span> k:k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>akk:<span class=\"br0\">{</span><span class=\"br0\">[</span>m;k<span class=\"br0\">]</span> m<span class=\"br0\">[</span>k;k:k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>transpose:<span class=\"br0\">{</span><span class=\"sy0\">$</span><span class=\"br0\">[</span>0h=<span class=\"kw1\">type</span> x;<span class=\"kw1\">flip</span> x;<span class=\"kw1\">enlist</span> <span class=\"kw1\">each</span> x<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>mult:<span class=\"br0\">{</span><span class=\"br0\">[</span>A;B<span class=\"br0\">]</span><span class=\"sy0\">$</span><span class=\"br0\">[</span>0h=<span class=\"kw1\">type</span> A;A <span class=\"kw1\">mmu</span> B;A<span class=\"sy0\">*</span>B<span class=\"br0\">]</span><span class=\"br0\">}</span>\t\t<br/>cholesky:<span class=\"br0\">{</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">[</span>A;L;n<span class=\"br0\">]</span><br/>\t\tl<span class=\"sy0\">_</span>k:solve<span class=\"br0\">[</span>L;ak<span class=\"br0\">[</span>A;n<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>\t\tl<span class=\"sy0\">_</span>kk:<span class=\"kw1\">first</span> <span class=\"kw1\">over</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">[</span>akk<span class=\"br0\">[</span>A;n<span class=\"br0\">]</span> <span class=\"sy0\">-</span> mult<span class=\"br0\">[</span>transpose l<span class=\"sy0\">_</span>k;l<span class=\"sy0\">_</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy0\">$</span><span class=\"br0\">[</span>0h&lt;<span class=\"kw1\">type</span> x;<span class=\"kw1\">enlist</span> x;x<span class=\"br0\">]</span><span class=\"br0\">}</span>L<span class=\"sy0\">,'</span>0f<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">enlist</span> <span class=\"kw1\">raze</span> transpose<span class=\"br0\">[</span>l<span class=\"sy0\">_</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span>l<span class=\"sy0\">_</span>kk<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span>/<span class=\"br0\">[</span><span class=\"kw1\">sqrt</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span>;<span class=\"nu0\">0</span><span class=\"br0\">]</span>;<span class=\"nu0\">1</span><span class=\"sy0\">_</span>1<span class=\"sy0\">+</span><span class=\"kw1\">til</span> <span class=\"kw1\">count</span> <span class=\"kw1\">first</span> A<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">show</span> cholesky <span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"nu0\">15</span> <span class=\"sy0\">-</span>5f;<span class=\"nu0\">15</span> <span class=\"nu0\">18</span> 0f;<span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"nu0\">0</span> 11f<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"st0\">\"\"</span>;<br/><span class=\"kw1\">show</span> cholesky <span class=\"br0\">(</span><span class=\"nu0\">18</span> <span class=\"nu0\">22</span> <span class=\"nu0\">54</span> 42f;<span class=\"nu0\">22</span> <span class=\"nu0\">70</span> <span class=\"nu0\">86</span> 62f;<span class=\"nu0\">54</span> <span class=\"nu0\">86</span> <span class=\"nu0\">174</span> 134f;<span class=\"nu0\">42</span> <span class=\"nu0\">62</span> <span class=\"nu0\">134</span> 106f<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">t(chol(matrix(c(25, 15, -5, 15, 18, 0, -5, 0, 11), nrow=3, ncol=3)))<br/>#      [,1] [,2] [,3]<br/># [1,]    5    0    0<br/># [2,]    3    3    0<br/># [3,]   -1    1    3<br/>\u00a0<br/>t(chol(matrix(c(18, 22, 54, 42, 22, 70, 86, 62, 54, 86, 174, 134, 42, 62, 134, 106), nrow=4, ncol=4)))<br/>#           [,1]     [,2]     [,3]     [,4]<br/># [1,]  4.242641 0.000000 0.000000 0.000000<br/># [2,]  5.185450 6.565905 0.000000 0.000000<br/># [3,] 12.727922 3.046038 1.649742 0.000000<br/># [4,]  9.899495 1.624554 1.849711 1.392621</pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define (cholesky A)<br/>  (define mref matrix-ref)<br/>  (define n (matrix-num-rows A))<br/>  (define L (for/vector ([_ n]) (for/vector ([_ n]) 0)))<br/>  (define (set L i j x) (vector-set! (vector-ref L i) j x))<br/>  (define (ref L i j) (vector-ref (vector-ref L i) j))<br/>  (for* ([i n] [k n])<br/>    (set L i k<br/>         (cond <br/>           [(= i k) <br/>            (sqrt (- (mref A i i) (for/sum ([j k]) (sqr (ref L k j)))))]<br/>           [(&gt; i k) <br/>            (/ (- (mref A i k) (for/sum ([j k]) (* (ref L i j) (ref L k j))))<br/>               (ref L k k))]<br/>           [else 0])))<br/>  L)<br/>\u00a0<br/>(cholesky (matrix [[25 15 -5]<br/>                   [15 18  0]<br/>                   [-5  0 11]]))<br/>\u00a0<br/>(cholesky (matrix [[18 22  54 42]<br/>                   [22 70  86 62]<br/>                   [54 86 174 134]<br/>                   [42 62 134 106]]))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 49, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs the Cholesky decomposition on a square matrix &amp; displays results*/</span><br/>niner =  <span class=\"st0\">'25  15  -5'</span> ,                          <span class=\"coMULTI\">/*define a  3x3  matrix with elements. */</span><br/>         <span class=\"st0\">'15  18   0'</span> ,<br/>         <span class=\"st0\">'-5   0  11'</span><br/>                           <span class=\"kw1\">call</span> Cholesky niner<br/>hexer =  <span class=\"nu0\">18</span>  <span class=\"nu0\">22</span>  <span class=\"nu0\">54</span>  <span class=\"nu0\">42</span>,                         <span class=\"coMULTI\">/*define a  4x4  matrix with elements. */</span><br/>         <span class=\"nu0\">22</span>  <span class=\"nu0\">70</span>  <span class=\"nu0\">86</span>  <span class=\"nu0\">62</span>,<br/>         <span class=\"nu0\">54</span>  <span class=\"nu0\">86</span> <span class=\"nu0\">174</span> <span class=\"nu0\">134</span>,<br/>         <span class=\"nu0\">42</span>  <span class=\"nu0\">62</span> <span class=\"nu0\">134</span> <span class=\"nu0\">106</span><br/>                           <span class=\"kw1\">call</span> Cholesky hexer<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Cholesky: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> mat;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">call</span> tell <span class=\"st0\">'input array'</span>,mat<br/>              <span class=\"kw1\">do</span>    r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord<br/>                 <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> r; $=<span class=\"nu0\">0</span>;  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> c-<span class=\"nu0\">1</span>;  $= $  + \u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>i <span class=\"sy0\">*</span>\u00a0!<span class=\"sy0\">.</span>c<span class=\"sy0\">.</span>i;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span><br/>                 <span class=\"kw1\">if</span> r=c  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>r= sqrt<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>r - $<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span><br/>                         <span class=\"kw3\">else</span>\u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c= <span class=\"nu0\">1</span> <span class=\"sy0\">/</span>\u00a0!<span class=\"sy0\">.</span>c<span class=\"sy0\">.</span>c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c - $<span class=\"br0\">)</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">call</span> tell  <span class=\"st0\">'Cholesky factor'</span>,,!<span class=\"sy0\">.</span>,<span class=\"st0\">'\u2500'</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>err:   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'***error***!'</span>;      <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span>;    <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> hdr,x,y,sep;   #=<span class=\"nu0\">0</span>;          <span class=\"kw1\">if</span> sep==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> sep= <span class=\"st0\">'\u2550'</span><br/>       dPlaces= <span class=\"nu0\">5</span>                                <span class=\"coMULTI\">/*# dec. places past the decimal point.*/</span><br/>       width  =<span class=\"nu0\">10</span>                                <span class=\"coMULTI\">/*field width used to display elements.*/</span><br/>       <span class=\"kw1\">if</span> y==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>                 <span class=\"kw3\">else</span> <span class=\"kw1\">do</span> row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;  <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;  x=x\u00a0!<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col;  <span class=\"kw3\">end</span>;   <span class=\"kw3\">end</span><br/>       w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>               <span class=\"kw1\">do</span> ord=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> ord<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">&gt;</span>=w;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*a fast way to find the matrix's order*/</span><br/>       <span class=\"kw1\">say</span><br/>       <span class=\"kw1\">if</span> ord<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">\\</span>==w  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">\"matrix elements don't form a square matrix.\"</span><br/>       <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>hdr, <span class=\"br0\">(</span><span class=\"br0\">(</span>width + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span>\u00a0% ord,  sep<span class=\"br0\">)</span><br/>       <span class=\"kw1\">say</span><br/>               <span class=\"kw1\">do</span>   row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;         z=<br/>                 <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> ord;         #= # + <span class=\"nu0\">1</span><br/>                                    @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col= <span class=\"kw6\">word</span><span class=\"br0\">(</span>x, #<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">if</span> col<span class=\"sy0\">&lt;</span>=row  <span class=\"kw3\">then</span> \u00a0!<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col= @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col<br/>                 z=z  <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col, , dPlaces<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>,   width<span class=\"br0\">)</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                   <span class=\"coMULTI\">/*       \u2191\u2191\u2191                           */</span><br/>               <span class=\"kw1\">say</span> z                             <span class=\"coMULTI\">/*       \u2514\u2534\u2534\u2500\u2500\u25c4\u2500\u2500normalization for zero*/</span><br/>               <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*row*/</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;  h=d+<span class=\"nu0\">6</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span> <span class=\"kw2\">with</span> g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>; g=g<span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0%2<br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;              h=h%2+<span class=\"nu0\">1</span>;       <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k; g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>;   <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Cholesky decomposition<br/>\u00a0<br/>load \"stdlib.ring\"<br/>decimals(5)<br/>m1 = [[25, 15, -5], <br/>          [15, 18,  0], <br/>          [-5,  0, 11]]<br/>cholesky(m1)<br/>printarray(m1)<br/>see nl<br/>\u00a0<br/>m2 = [[18, 22,  54,  42], <br/>          [22, 70,  86,  62], <br/>          [54, 86, 174, 134], <br/>          [42, 62, 134, 106]]<br/>cholesky(m2)<br/>printarray(m2)<br/>\u00a0<br/>func cholesky(a)<br/>l = newlist(len(a), len(a))<br/>for i = 1 to len(a)<br/>     for j = 1 to i<br/>         s = 0<br/>         for k = 1 to j<br/>             s = s + l[i][k] * l[j][k]<br/>         next<br/>         if i = j <br/>            l[i][j] = sqrt(a[i][i] - s)<br/>         else<br/>            l[i][j] = (a[i][j] - s) / l[j][j]<br/>         ok<br/>    next <br/>next <br/>a = l<br/>\u00a0<br/>func printarray(a)<br/>       for row = 1 to len(a)<br/>            for col = 1 to len(a)<br/>                 see \"\" + a[row][col] + \"  \"<br/>            next<br/>            see nl<br/>       next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 38, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw4\">Matrix</span><br/>  <span class=\"kw1\">def</span> symmetric?<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> square?<br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> ... <span class=\"me1\">row_size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">i</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>i,j<span class=\"br0\">]</span>\u00a0!= <span class=\"kw2\">self</span><span class=\"br0\">[</span>j,i<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> cholesky_factor<br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"must provide symmetric matrix\"</span> <span class=\"kw1\">unless</span> symmetric?<br/>    l = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>row_size<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>row_size, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> ... <span class=\"me1\">row_size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span> ... <span class=\"me1\">row_size</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> i == k<br/>          sum = <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">k</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, j<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>          val = <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">[</span>k,k<span class=\"br0\">]</span> <span class=\"sy0\">-</span> sum<span class=\"br0\">)</span><br/>          l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> = val<br/>        <span class=\"kw1\">elsif</span> i <span class=\"sy0\">&gt;</span> k<br/>          sum = <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">k</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, j<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>          val = <span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">[</span>k,i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> sum<span class=\"br0\">)</span> <span class=\"sy0\">/</span> l<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>          l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> = val<br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>l<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">25</span>,<span class=\"nu0\">15</span>,<span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">15</span>,<span class=\"nu0\">18</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">cholesky_factor</span><br/><span class=\"kw3\">puts</span> <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">18</span>, <span class=\"nu0\">22</span>,  <span class=\"nu0\">54</span>,  <span class=\"nu0\">42</span><span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span><span class=\"nu0\">22</span>, <span class=\"nu0\">70</span>,  <span class=\"nu0\">86</span>,  <span class=\"nu0\">62</span><span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span><span class=\"nu0\">54</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">174</span>, <span class=\"nu0\">134</span><span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span><span class=\"nu0\">42</span>, <span class=\"nu0\">62</span>, <span class=\"nu0\">134</span>, <span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">cholesky_factor</span></pre>"}, {"lang": "Rust", "loc": 41, "block": "<pre class=\"text highlighted_source\">fn cholesky(mat: Vec&lt;f64&gt;, n: usize) -&gt; Vec&lt;f64&gt; {<br/>    let mut res = vec![0.0; mat.len()];<br/>    for i in 0..n {<br/>        for j in 0..(i+1){<br/>            let mut s = 0.0;<br/>            for k in 0..j {<br/>                s += res[i * n + k] * res[j * n + k];<br/>            }<br/>            res[i * n + j] = if i == j { (mat[i * n + i] - s).sqrt() } else { (1.0 / res[j * n + j] * (mat[i * n + j] - s)) };<br/>        }<br/>    }<br/>    res<br/>}<br/>\u00a0<br/>fn show_matrix(matrix: Vec&lt;f64&gt;, n: usize){<br/>    for i in 0..n {<br/>        for j in 0..n {<br/>            print!(\"{:.4}\\t\", matrix[i * n + j]);<br/>        }<br/>        println!(\"\");<br/>    }<br/>    println!(\"\");<br/>}<br/>\u00a0<br/>fn main(){<br/>    let dimension = 3 as usize;<br/>    let m1 = vec![25.0, 15.0, -5.0,<br/>                  15.0, 18.0,  0.0,<br/>                  -5.0,  0.0, 11.0];<br/>    let res1 = cholesky(m1, dimension);<br/>    show_matrix(res1, dimension);<br/>\u00a0<br/>    let dimension = 4 as usize;<br/>    let m2 = vec![18.0, 22.0,  54.0,  42.0,<br/>                  22.0, 70.0,  86.0,  62.0,<br/>                  54.0, 86.0, 174.0, 134.0,<br/>                  42.0, 62.0, 134.0, 106.0];<br/>    let res2 = cholesky(m2, dimension);<br/>    show_matrix(res2, dimension);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 61, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Matrix<span class=\"br0\">(</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> matrix<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// Assuming matrix is positive-definite, symmetric and not empty...</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows,cols <span class=\"sy0\">=</span> matrix.<span class=\"me1\">size</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> getOption<span class=\"br0\">(</span> r<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> r <span class=\"sy0\">&lt;</span> rows <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;</span> rows <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>matrix<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> None<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isLowerTriangle<span class=\"br0\">(</span> r<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span> c <span class=\"sy0\">&lt;=</span> r <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isDiagonal<span class=\"br0\">(</span> r<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span> r <span class=\"sy0\">==</span> c<span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> matrix.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Perform Cholesky Decomposition of this matrix<br/>   */</span><br/>  lazy <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cholesky <span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span>rows<span class=\"sy0\">*</span>cols<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until rows<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until cols<span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">{</span> <br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> k <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">{</span> l<span class=\"br0\">(</span>i<span class=\"sy0\">*</span>rows+k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<span class=\"br0\">(</span>j<span class=\"sy0\">*</span>rows+k<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><br/>\u00a0<br/>      l<span class=\"br0\">(</span>i<span class=\"sy0\">*</span>rows+j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> isDiagonal<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> scala.<span class=\"me1\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>matrix<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> - s<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> isLowerTriangle<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> / l<span class=\"br0\">(</span>j<span class=\"sy0\">*</span>rows+j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>matrix<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> - s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span>rows,cols<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until rows<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until cols<span class=\"br0\">)</span> <span class=\"br0\">)</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> l<span class=\"br0\">(</span>i<span class=\"sy0\">*</span>rows+j<span class=\"br0\">)</span><br/>    Matrix<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A little test...</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">25</span>,<span class=\"nu0\">15</span>,-<span class=\"nu0\">5</span><span class=\"br0\">)</span>,Array<span class=\"br0\">(</span><span class=\"nu0\">15</span>,<span class=\"nu0\">18</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,Array<span class=\"br0\">(</span>-<span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2 <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">18</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">54</span>,<span class=\"nu0\">42</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">22</span>,<span class=\"nu0\">70</span>,<span class=\"nu0\">86</span>,<span class=\"nu0\">62</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">54</span>,<span class=\"nu0\">86</span>,<span class=\"nu0\">174</span>,<span class=\"nu0\">134</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">42</span>,<span class=\"nu0\">62</span>,<span class=\"nu0\">134</span>,<span class=\"nu0\">106</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l1 <span class=\"sy0\">=</span> a1.<span class=\"me1\">cholesky</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l2 <span class=\"sy0\">=</span> a2.<span class=\"me1\">cholesky</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// Given test results</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r1 <span class=\"sy0\">=</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">0</span>,-<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r2 <span class=\"sy0\">=</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">4.24264</span>,<span class=\"nu0\">0.00000</span>,<span class=\"nu0\">0.00000</span>,<span class=\"nu0\">0.00000</span>,<span class=\"nu0\">5.18545</span>,<span class=\"nu0\">6.56591</span>,<span class=\"nu0\">0.00000</span>,<span class=\"nu0\">0.00000</span>,<br/>                        <span class=\"nu0\">12.72792</span>,<span class=\"nu0\">3.04604</span>,<span class=\"nu0\">1.64974</span>,<span class=\"nu0\">0.00000</span>,<span class=\"nu0\">9.89949</span>,<span class=\"nu0\">1.62455</span>,<span class=\"nu0\">1.84971</span>,<span class=\"nu0\">1.39262</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Verify assertions\t\t\t\t\t\t</span><br/><span class=\"br0\">(</span>l1.<span class=\"me1\">matrix</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>r1<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>result,test<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>  assert<span class=\"br0\">(</span>math.<span class=\"me1\">round</span><span class=\"br0\">(</span> result <span class=\"sy0\">*</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.00001</span> <span class=\"sy0\">==</span> math.<span class=\"me1\">round</span><span class=\"br0\">(</span> test <span class=\"sy0\">*</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span>l2.<span class=\"me1\">matrix</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>r2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>result,test<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>  assert<span class=\"br0\">(</span>math.<span class=\"me1\">round</span><span class=\"br0\">(</span> result <span class=\"sy0\">*</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.00001</span> <span class=\"sy0\">==</span> math.<span class=\"me1\">round</span><span class=\"br0\">(</span> test <span class=\"sy0\">*</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 19, "block": "<pre class=\"scilab highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">25</span> <span class=\"nu0\">15</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">15</span> <span class=\"nu0\">18</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"nu0\">0</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">chol</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/> <a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">ans</span></a>  <span class=\"sy0\">=</span><br/>\u00a0<br/>   <span class=\"nu0\">5</span>.   <span class=\"nu0\">3</span>.  <span class=\"sy0\">-</span><span class=\"nu0\">1</span>.<br/>   <span class=\"nu0\">0</span>.   <span class=\"nu0\">3</span>.   <span class=\"nu0\">1</span>.<br/>   <span class=\"nu0\">0</span>.   <span class=\"nu0\">0</span>.   <span class=\"nu0\">3</span>.<br/>\u00a0<br/>\u00a0<br/>a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">18</span> <span class=\"nu0\">22</span> <span class=\"nu0\">54</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span> <span class=\"nu0\">22</span> <span class=\"nu0\">70</span> <span class=\"nu0\">86</span> <span class=\"nu0\">62</span><span class=\"sy0\">;</span><br/>     <span class=\"nu0\">54</span> <span class=\"nu0\">86</span> <span class=\"nu0\">174</span> <span class=\"nu0\">134</span><span class=\"sy0\">;</span> <span class=\"nu0\">42</span> <span class=\"nu0\">62</span> <span class=\"nu0\">134</span> <span class=\"nu0\">106</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">chol</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/> <a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">ans</span></a>  <span class=\"sy0\">=</span><br/>\u00a0<br/>   <span class=\"nu0\">4.2426407</span>   <span class=\"nu0\">5.1854497</span>   <span class=\"nu0\">12.727922</span>   <span class=\"nu0\">9.8994949</span><br/>   <span class=\"nu0\">0</span>.          <span class=\"nu0\">6.5659052</span>   <span class=\"nu0\">3.0460385</span>   <span class=\"nu0\">1.6245539</span><br/>   <span class=\"nu0\">0</span>.          <span class=\"nu0\">0</span>.          <span class=\"nu0\">1.6497422</span>   <span class=\"nu0\">1.849711</span> <br/>   <span class=\"nu0\">0</span>.          <span class=\"nu0\">0</span>.          <span class=\"nu0\">0</span>.          <span class=\"nu0\">1.3926212</span></pre>"}, {"lang": "Seed7", "loc": 60, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const type: matrix is array array float;<br/>\u00a0<br/>const func matrix: cholesky (in matrix: a) is func<br/>  result<br/>    var matrix: cholesky is 0 times 0 times 0.0;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>    var integer: k is 0;<br/>    var float: sum is 0.0;<br/>  begin<br/>    cholesky\u00a0:= length(a) times length(a) times 0.0;<br/>    for key i range cholesky do<br/>      for j range 1 to i do<br/>\tsum\u00a0:= 0.0;<br/>\tfor k range 1 to j do<br/>\t  sum +:= cholesky[i][k] * cholesky[j][k];<br/>        end for;<br/>\tif i = j then<br/>\t  cholesky[i][i]\u00a0:= sqrt(a[i][i] - sum)<br/>\telse<br/>          cholesky[i][j]\u00a0:= (a[i][j] - sum) / cholesky[j][j];<br/>        end if;<br/>      end for;<br/>    end for;<br/>  end func;  <br/>\u00a0<br/>const proc: writeMat (in matrix: a) is func<br/>  local<br/>    var integer: i is 0;<br/>    var float: num is 0.0;<br/>  begin<br/>    for key i range a do<br/>      for num range a[i] do<br/>        write(num digits 5 lpad 8);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const matrix: m1 is [] (<br/>    [] (25.0, 15.0, -5.0),<br/>    [] (15.0, 18.0,  0.0),<br/>    [] (-5.0,  0.0, 11.0));<br/>const matrix: m2 is [] (<br/>    [] (18.0, 22.0,  54.0,  42.0),<br/>    [] (22.0, 70.0,  86.0,  62.0),<br/>    [] (54.0, 86.0, 174.0, 134.0),<br/>    [] (42.0, 62.0, 134.0, 106.0));<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeMat(cholesky(m1));<br/>    writeln;<br/>    writeMat(cholesky(m2));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">func cholesky<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var chol = matrix.<span class=\"me1\">len</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> matrix.<span class=\"me1\">len</span>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> ^matrix <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> col <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var x = matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">col</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">-</span>= <span class=\"br0\">(</span>chol<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> chol<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            chol<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> = <span class=\"br0\">(</span>row == col\u00a0? x.<span class=\"me1\">sqrt</span>\u00a0: x<span class=\"sy0\">/</span>chol<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> chol<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 24, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re0\">FloatMatrix</span>&gt;&gt;<span class=\"re1\">#cholesky</span><br/>\t|<span class=\"re3\"> l </span>|<br/>\t<span class=\"re6\">l</span> <span class=\"sy0\">:=</span> <span class=\"re0\">FloatMatrix</span> zero: <span class=\"re5\">numRows</span>.<br/>\t<span class=\"re5\">1</span> to: <span class=\"re5\">numRows</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">i</span> | <br/>\t\t<span class=\"nu0\">1</span> to: <span class=\"re5\">i</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">k</span> | | rowSum lkk factor aki partialSum |<br/>\t\t\ti <span class=\"sy0\">=</span> <span class=\"re5\">k</span><br/>\t\t\t\tifTrue: <span class=\"br0\">[</span><br/>\t\t\t\t\t<span class=\"re5\">rowSum</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re5\">k</span> - <span class=\"re5\">1</span><span class=\"br0\">)</span> sum: <span class=\"br0\">[</span>:<span class=\"re5\">j</span> | | lkj |<br/>\t\t\t\t\t\t<span class=\"re6\">lkj</span> <span class=\"sy0\">:=</span> <span class=\"re5\">l</span> at: <span class=\"re5\">j</span> @ k.<br/>\t\t\t\t\t\t<span class=\"re5\">lkj</span> squared<span class=\"br0\">]</span>.<br/>\t\t\t\t\t<span class=\"re5\">lkk</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw1\">self</span> at: <span class=\"re5\">k</span> @ k<span class=\"br0\">)</span> - <span class=\"re5\">rowSum</span>.<br/>\t\t\t\t\t<span class=\"re5\">lkk</span> <span class=\"sy0\">:=</span> <span class=\"re5\">lkk</span> sqrt.<br/>\t\t\t\t\t<span class=\"re5\">l</span> at: <span class=\"re5\">k</span> @ k put: <span class=\"re5\">lkk</span><span class=\"br0\">]</span><br/>\t\t\t\tifFalse: <span class=\"br0\">[</span><br/>\t\t\t\t\t<span class=\"re5\">factor</span> <span class=\"sy0\">:=</span> <span class=\"re5\">l</span> at: <span class=\"re5\">k</span> @ k.<br/>\t\t\t\t\t<span class=\"re5\">aki</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> at: <span class=\"re5\">k</span> @ i.<br/>\t\t\t\t\t<span class=\"re5\">partialSum</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re5\">k</span> - <span class=\"re5\">1</span><span class=\"br0\">)</span> sum: <span class=\"br0\">[</span>:<span class=\"re5\">j</span> | | ljk lji |<br/>\t\t\t\t\t\t<span class=\"re6\">lji</span> <span class=\"sy0\">:=</span> <span class=\"re5\">l</span> at: <span class=\"re5\">j</span> @ i.<br/>\t\t\t\t\t\t<span class=\"re5\">ljk</span> <span class=\"sy0\">:=</span> <span class=\"re5\">l</span> at: <span class=\"re5\">j</span> @ k.<br/>\t\t\t\t\t\t<span class=\"re5\">lji</span> * <span class=\"re5\">ljk</span><span class=\"br0\">]</span>.<br/>\t\t\t\t\t<span class=\"re5\">l</span> at: <span class=\"re5\">k</span> @ i put: <span class=\"re5\">aki</span> - <span class=\"re5\">partialSum</span> * <span class=\"re5\">factor</span> reciprocal<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>\t^l<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 40, "block": "<pre class=\"text highlighted_source\">mata<br/>: a=25,15,-5\\15,18,0\\-5,0,11<br/>\u00a0<br/>: a<br/>[symmetric]<br/>        1    2    3<br/>    +----------------+<br/>  1 |  25            |<br/>  2 |  15   18       |<br/>  3 |  -5    0   11  |<br/>    +----------------+<br/>\u00a0<br/>: cholesky(a)<br/>        1    2    3<br/>    +----------------+<br/>  1 |   5    0    0  |<br/>  2 |   3    3    0  |<br/>  3 |  -1    1    3  |<br/>    +----------------+<br/>\u00a0<br/>: a=18,22,54,42\\22,70,86,62\\54,86,174,134\\42,62,134,106<br/>\u00a0<br/>: a<br/>[symmetric]<br/>         1     2     3     4<br/>    +-------------------------+<br/>  1 |   18                    |<br/>  2 |   22    70              |<br/>  3 |   54    86   174        |<br/>  4 |   42    62   134   106  |<br/>    +-------------------------+<br/>\u00a0<br/>: cholesky(a)<br/>                 1             2             3             4<br/>    +---------------------------------------------------------+<br/>  1 |  4.242640687             0             0             0  |<br/>  2 |  5.185449729   6.565905201             0             0  |<br/>  3 |  12.72792206   3.046038495   1.649742248             0  |<br/>  4 |  9.899494937   1.624553864   1.849711005   1.392621248  |<br/>    +---------------------------------------------------------+</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> cholesky a <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> l <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$m</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$m</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0.0</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$k</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"re0\">$k</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lset</span> l <span class=\"re0\">$i</span> <span class=\"re0\">$k</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$i</span> == <span class=\"re0\">$k</span><br/>\t\t<span class=\"sy0\">?</span> sqrt<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> - <span class=\"re0\">$sum</span><span class=\"br0\">)</span><br/>\t\t: <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> / <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"re0\">$k</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"re0\">$i</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> - <span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$l</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 53, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Cholesky(Mat <span class=\"kw4\">As</span> Range) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>\u00a0<br/><span class=\"kw4\">Dim</span> A() <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, L() <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, sum <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, sum2 <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">Dim</span> m <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, k <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span><br/>\u00a0<br/><span class=\"co1\">'Ensure matrix is square<br/></span>    <span class=\"kw3\">If</span> Mat.Rows.Count &lt;&gt; Mat.Columns.Count <span class=\"kw3\">Then</span><br/>        MsgBox (<span class=\"st0\">\"Correlation matrix is not square\"</span>)<br/>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>    m = Mat.Rows.Count<br/>\u00a0<br/><span class=\"co1\">'Initialize and populate matrix A of values and matrix L which will be the lower Cholesky<br/></span>    <span class=\"kw4\">ReDim</span> A(0 <span class=\"kw3\">To</span> m - 1, 0 <span class=\"kw3\">To</span> m - 1)<br/>    <span class=\"kw4\">ReDim</span> L(0 <span class=\"kw3\">To</span> m - 1, 0 <span class=\"kw3\">To</span> m - 1)<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> m - 1<br/>        <span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> m - 1<br/>            A(i, j) = Mat(i + 1, j + 1).Value2<br/>            L(i, j) = 0<br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>\u00a0<br/><span class=\"co1\">'Handle the simple cases explicitly to save time<br/></span>    <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> m<br/>        <span class=\"kw3\">Case</span> <span class=\"kw3\">Is</span> = 1<br/>            L(0, 0) = Sqr(A(0, 0))<br/>\u00a0<br/>        <span class=\"kw3\">Case</span> <span class=\"kw3\">Is</span> = 2<br/>            L(0, 0) = Sqr(A(0, 0))<br/>            L(1, 0) = A(1, 0) / L(0, 0)<br/>            L(1, 1) = Sqr(A(1, 1) - L(1, 0) * L(1, 0))<br/>\u00a0<br/>        <span class=\"kw3\">Case</span> <span class=\"kw3\">Else</span><br/>            L(0, 0) = Sqr(A(0, 0))<br/>            L(1, 0) = A(1, 0) / L(0, 0)<br/>            L(1, 1) = Sqr(A(1, 1) - L(1, 0) * L(1, 0))<br/>            <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> m - 1<br/>                sum2 = 0<br/>                <span class=\"kw3\">For</span> k = 0 <span class=\"kw3\">To</span> i - 1<br/>                    sum = 0<br/>                    <span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> k<br/>                        sum = sum + L(i, j) * L(k, j)<br/>                    <span class=\"kw3\">Next</span> j<br/>                    L(i, k) = (A(i, k) - sum) / L(k, k)<br/>                    sum2 = sum2 + L(i, k) * L(i, k)<br/>                <span class=\"kw3\">Next</span> k<br/>                L(i, i) = Sqr(A(i, i) - sum2)<br/>            <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>    Cholesky = L<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>fcn lowerCholesky(m){  // trans: C<br/>   rows:=m.rows;<br/>   lcm:=GSL.Matrix(rows,rows);\t// zero filled<br/>   foreach i,j in (rows,i+1){ <br/>      s:=(0).reduce(j,'wrap(s,k){ s + lcm[i,k]*lcm[j,k] },0.0);<br/>      lcm[i,j]=( if(i==j)(m[i,i] - s).sqrt()<br/>\t         else     1.0/lcm[j,j]*(m[i,j] - s) );<br/>   }<br/>   lcm<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 35, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> d=<span class=\"nu0\">2000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">4000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">5000</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> d=<span class=\"nu0\">3000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">4000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">5000</span><br/><span class=\"nu0\">30</span> STOP <br/><span class=\"nu0\">1000</span> RESTORE d<br/><span class=\"nu0\">1010</span> READ a,b<br/><span class=\"nu0\">1020</span> <span class=\"kw1\">DIM</span> m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> a<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> b<br/><span class=\"nu0\">1060</span> READ m<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><br/><span class=\"nu0\">1070</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">1080</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1090</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">2000</span> DATA <span class=\"nu0\">3</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">25</span>,<span class=\"nu0\">15</span>,-<span class=\"nu0\">5</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">18</span>,<span class=\"nu0\">0</span>,-<span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">11</span><br/><span class=\"nu0\">3000</span> DATA <span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">18</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">54</span>,<span class=\"nu0\">42</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">70</span>,<span class=\"nu0\">86</span>,<span class=\"nu0\">62</span>,<span class=\"nu0\">54</span>,<span class=\"nu0\">86</span>,<span class=\"nu0\">174</span>,<span class=\"nu0\">134</span>,<span class=\"nu0\">42</span>,<span class=\"nu0\">62</span>,<span class=\"nu0\">134</span>,<span class=\"nu0\">106</span><br/><span class=\"nu0\">4000</span> <span class=\"co3\">REM Cholesky decomposition</span><br/><span class=\"nu0\">4005</span> <span class=\"kw1\">DIM</span> l<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/><span class=\"nu0\">4010</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> a<br/><span class=\"nu0\">4020</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> i<br/><span class=\"nu0\">4030</span> <span class=\"kw1\">LET</span> s=<span class=\"nu0\">0</span><br/><span class=\"nu0\">4050</span> <span class=\"kw1\">FOR</span> k=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> j-<span class=\"nu0\">1</span><br/><span class=\"nu0\">4060</span> <span class=\"kw1\">LET</span> s=s+l<span class=\"br0\">(</span>i,k<span class=\"br0\">)</span>*l<span class=\"br0\">(</span>j,k<span class=\"br0\">)</span><br/><span class=\"nu0\">4070</span> <span class=\"kw1\">NEXT</span> k<br/><span class=\"nu0\">4080</span> <span class=\"kw1\">IF</span> i=j <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> l<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>=<span class=\"kw3\">SQR</span> <span class=\"br0\">(</span>m<span class=\"br0\">(</span>i,i<span class=\"br0\">)</span>-s<span class=\"br0\">)</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4100</span><br/><span class=\"nu0\">4090</span> <span class=\"kw1\">LET</span> l<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>=<span class=\"br0\">(</span>m<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>-s<span class=\"br0\">)</span>/l<span class=\"br0\">(</span>j,j<span class=\"br0\">)</span><br/><span class=\"nu0\">4100</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">4110</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">4120</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">5000</span> <span class=\"co3\">REM Print</span><br/><span class=\"nu0\">5010</span> <span class=\"kw1\">FOR</span> r=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> a<br/><span class=\"nu0\">5020</span> <span class=\"kw1\">FOR</span> c=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> b<br/><span class=\"nu0\">5030</span> <span class=\"kw1\">PRINT</span> l<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">5040</span> <span class=\"kw1\">NEXT</span> c<br/><span class=\"nu0\">5050</span> <span class=\"kw1\">PRINT</span> <br/><span class=\"nu0\">5060</span> <span class=\"kw1\">NEXT</span> r<br/><span class=\"nu0\">5070</span> <span class=\"kw1\">RETURN</span></pre>"}]}