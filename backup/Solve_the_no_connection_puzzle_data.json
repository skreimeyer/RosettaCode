{"task": "Solve_the_no_connection_puzzle", "blocks": [{"lang": "Ada", "loc": 11, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">With</span><br/>Ada.<span class=\"me1\">Text_IO</span>,<br/>Connection_Types,<br/>Connection_Combinations;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> main <span class=\"kw1\">is</span><br/>   Result\u00a0: Connection_Types.<span class=\"me1\">Partial_Board</span> <span class=\"kw3\">renames</span> Connection_Combinations;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span> Connection_Types.<span class=\"me1\">Image</span><span class=\"br0\">(</span>Result<span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span>;</pre>"}, {"lang": "AutoHotkey", "loc": 73, "block": "<pre class=\"autohotkey highlighted_source\">oGrid <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span>\t\t\t\t\t\t\t<span class=\"co1\">; setup oGrid</span><br/>\t<span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span><br/>\t<span class=\"sy0\">,</span><span class=\"br0\">[</span>  <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <br/>\u00a0<br/>oNeighbor <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> oCell <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> \toRoute <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span> oVisited <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\t\t\t<span class=\"co1\">; initialize objects</span><br/>\u00a0<br/>for row<span class=\"sy0\">,</span> oRow in oGrid<br/>\tfor col<span class=\"sy0\">,</span> val in oRow<br/>\t\t<span class=\"kw1\">if</span> val\t\t\t\t\t\t\t\t<span class=\"co1\">; for each valid cell in oGrid</span><br/>\t\t\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Neighbors<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> oGrid<span class=\"br0\">)</span>\t<span class=\"co1\">; list valid no-connection neighbors</span><br/>\u00a0<br/><span class=\"re2\">Solve:<br/></span>for row<span class=\"sy0\">,</span> oRow in oGrid<br/>\tfor col <span class=\"sy0\">,</span> val in oRow<br/>\t\t<span class=\"kw1\">if</span> val\t\t\t\t\t\t\t\t<span class=\"co1\">; for each valid cell in oGrid</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>oSolution <span class=\"sy0\">:=</span> SolveNoConnect<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>8\t\t<span class=\"co1\">; solve for this cell</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><span class=\"sy0\">,</span> Solve\t\t\t\t\t<span class=\"co1\">; if solution found stop</span><br/>\u00a0<br/><span class=\"co1\">; show solution</span><br/>for i <span class=\"sy0\">,</span> val in oSolution<br/>\toCell<span class=\"br0\">[</span>StrSplit<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1 <span class=\"sy0\">,</span> StrSplit<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<br/>\u00a0<br/>\t\t  A <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> B <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>C <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> D <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> E <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> \tF <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\t\t  G <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> H <span class=\"sy0\">:=</span> oCell<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>sol <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"re0\">%A%</span>   <span class=\"re0\">%B%</span><br/>   <span class=\"sy0\">/</span>|\\ <span class=\"sy0\">/</span>|\\<br/>  <span class=\"sy0\">/</span> | X | \\<br/> <span class=\"sy0\">/</span>  |<span class=\"sy0\">/</span> \\|  \\<br/><span class=\"re0\">%C%</span> <span class=\"sy0\">-</span> <span class=\"re0\">%D%</span> <span class=\"sy0\">-</span> <span class=\"re0\">%E%</span> <span class=\"sy0\">-</span> <span class=\"re0\">%F%</span><br/> \\  |\\ <span class=\"sy0\">/</span>|  <span class=\"sy0\">/</span><br/>  \\ | X | <span class=\"sy0\">/</span><br/>   \\|<span class=\"sy0\">/</span> \\|<span class=\"sy0\">/</span><br/>    <span class=\"re0\">%G%</span>   <span class=\"re0\">%H%</span><br/><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% sol<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>SolveNoConnect<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglobal<br/>\toRoute<span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row <span class=\"st0\">\":\"</span> col<span class=\"br0\">)</span>\t\t\t\t\t\t<span class=\"co1\">; save route</span><br/>\toVisited<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true\t\t\t\t\t\t<span class=\"co1\">; mark this cell visited</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> oRoute<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; if solution found</span><br/>\t\t<span class=\"kw1\">return</span> true\t\t\t\t\t\t\t<span class=\"co1\">; end recursion</span><br/>\u00a0<br/>\tfor each<span class=\"sy0\">,</span> nn in StrSplit<span class=\"br0\">(</span>oNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> \t\t\t<span class=\"co1\">; for each no-connection neighbor of cell</span><br/>\t<span class=\"br0\">{</span><br/>\t\trowX <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>nn<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t<span class=\"sy0\">,</span> colX <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>nn<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t<span class=\"co1\">; get coords of this neighbor</span><br/>\t\t<span class=\"kw1\">if</span>\u00a0!oVisited<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span> colX<span class=\"br0\">]</span>\t\t\t\t\t<span class=\"co1\">; if not previously visited</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\toVisited<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span> colX<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true\t\t\t\t<span class=\"co1\">; mark this cell visited</span><br/>\t\t\tval<span class=\"sy0\">++</span>\t\t\t\t\t\t\t<span class=\"co1\">; increment</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>SolveNoConnect<span class=\"br0\">(</span>rowX<span class=\"sy0\">,</span> colX<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; recurse </span><br/>\t\t\t\t<span class=\"kw1\">return</span> oRoute\t\t\t\t\t<span class=\"co1\">; if solution found return route</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\toRoute<span class=\"sy0\">.</span>pop<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; Solution not found, backtrack oRoute</span><br/>\toVisited<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> false\t\t\t\t\t\t<span class=\"co1\">; Solution not found, remove mark</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>Neighbors<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> oGrid<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t\t\t<span class=\"co1\">; return distant neighbors of oGrid[row,col]</span><br/>\tfor r <span class=\"sy0\">,</span> oRow in oGrid<br/>\t\tfor c<span class=\"sy0\">,</span> v in oRow<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">abs</span></a><span class=\"br0\">(</span>row<span class=\"sy0\">-</span>r<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> || <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">abs</span></a><span class=\"br0\">(</span>col<span class=\"sy0\">-</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tlist <span class=\"sy0\">.=</span> r <span class=\"st0\">\":\"</span>c <span class=\"st0\">\",\"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>row<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> oGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\tlist <span class=\"sy0\">.=</span> oGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0? row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span>\u00a0: oGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0? row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span>\u00a0: <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">return</span> Trim<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Chapel", "loc": 79, "block": "<pre class=\"text highlighted_source\">type hole = int;<br/>param A\u00a0: hole = 1;<br/>param B\u00a0: hole = A+1;<br/>param C\u00a0: hole = B+1;<br/>param D\u00a0: hole = C+1;<br/>param E\u00a0: hole = D+1;<br/>param F\u00a0: hole = E+1;<br/>param G\u00a0: hole = F+1;<br/>param H\u00a0: hole = G+1;<br/>param starting\u00a0: int = 0;<br/>const holes\u00a0: domain(hole) = { A,B,C,D,E,F,G,H };<br/>const graph\u00a0: [holes] domain(hole) = [  A =&gt; { C,D,E },<br/>                                        B =&gt; { D,E,F },<br/>                                        C =&gt; { A,D,G },<br/>                                        D =&gt; { A,B,C,E,G,H },<br/>                                        E =&gt; { A,B,D,F,G,H },<br/>                                        F =&gt; { B,E,H },<br/>                                        G =&gt; { C,D,E },<br/>                                        H =&gt; { D,E,F } <br/>                                      ];<br/>\u00a0<br/>proc check( configuration\u00a0: [] int, idx\u00a0: hole )\u00a0: bool {<br/>  var good = true;<br/>  for adj in graph[idx] {<br/>    if adj &gt;= idx then continue;<br/>    if abs( configuration[idx] - configuration[adj] ) &lt;= 1 {<br/>      good = false;<br/>      break;<br/>    }<br/>  }<br/>\u00a0<br/>  return good;<br/>}<br/>\u00a0<br/>proc solve( configuration\u00a0: [] int, pegs\u00a0: domain(int), idx\u00a0: hole = A )\u00a0: bool {<br/>  for value in pegs {<br/>    configuration[idx] = value;<br/>    if check( configuration, idx ) {<br/>      if idx &lt; holes.size {<br/>        var prePegs = pegs;<br/>        if solve( configuration, prePegs - value, idx + 1 ){<br/>          return true;  <br/>        }<br/>      } else {<br/>        return true;<br/>      }<br/>    }<br/>  }<br/>  configuration[idx] = starting;<br/>  return false;<br/>}<br/>\u00a0<br/>proc printBoard( configuration\u00a0: [] int ){<br/>return <br/>\"\\n       \" + configuration[A] + \"   \" + configuration[B]+ \"\\n\" +<br/>\"      /|\\\\ /|\\\\ \\n\"+<br/>\"     / | X | \\\\ \\n\"+<br/>\"    /  |/ \\\\|  \\\\ \\n\"+<br/>\"   \" + configuration[C] +\" - \" + configuration[D] + \" - \" + configuration[E] + \" - \" + configuration[F] + \" \\n\"+<br/>\"    \\\\  |\\\\ /|  / \\n\"+<br/>\"     \\\\ | X | / \\n\"+<br/>\"      \\\\|/ \\\\|/ \\n\"+<br/>\"       \" + configuration[G] + \"   \" + configuration[H]+ \"\\n\";<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>proc main(){<br/>  var configuration\u00a0: [holes] int;<br/>  for idx in holes do configuration[idx] = starting;<br/>\u00a0<br/>  var pegs\u00a0: domain(int) = {1,2,3,4,5,6,7,8};<br/>  solve( configuration, pegs );<br/>\u00a0<br/>  writeln( printBoard( configuration ) );<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> Peg <span class=\"br0\">{</span> A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> E<span class=\"sy0\">,</span> F<span class=\"sy0\">,</span> G<span class=\"sy0\">,</span> H <span class=\"br0\">}</span><br/>    <span class=\"kw4\">immutable</span> Peg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> connections <span class=\"sy0\">=</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">[</span>Peg.<span class=\"me1\">A</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">C</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">A</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">D</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">A</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">E</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span>Peg.<span class=\"me1\">B</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">D</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">B</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">E</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">B</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">F</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span>Peg.<span class=\"me1\">C</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">D</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">D</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">E</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">E</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">F</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span>Peg.<span class=\"me1\">G</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">C</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">G</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">D</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">G</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">E</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span>Peg.<span class=\"me1\">H</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">D</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">H</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">E</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Peg.<span class=\"me1\">H</span><span class=\"sy0\">,</span> Peg.<span class=\"me1\">F</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> board <span class=\"sy0\">=</span> <span class=\"co4\">r\"<br/>        A   B<br/>       /|\\ /|\\<br/>      / | X | \\<br/>     /  |/ \\|  \\<br/>    C - D - E - F<br/>     \\  |\\ /|  /<br/>      \\ | X | /<br/>       \\|/ \\|/<br/>        G   H\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Peg<span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Peg.<span class=\"me1\">length</span><span class=\"br0\">]</span> perm <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Peg<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>connections<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>con <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>perm<span class=\"br0\">[</span>con<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> perm<span class=\"br0\">[</span>con<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> board.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"%(%d%)\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>perm<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>perm<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">nextPermutation</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 26, "block": "<pre class=\"text highlighted_source\"># It solved if connected A and B, connected G and H (according to the video).<br/>\u00a0<br/># require HLPsolver<br/>\u00a0<br/>adjacent = for i &lt;- -2..2, j &lt;- -2..2, not(i in -1..1 and j in -1..1), do: {i,j}<br/>layout = ~S\"\"\"<br/>       A - B<br/>      /|\\ /|\\ <br/>     / | X | \\ <br/>    /  |/ \\|  \\ <br/>   C - D - E - F<br/>    \\  |\\ /|  /<br/>     \\ | X | /<br/>      \\|/ \\|/<br/>       G - H<br/>\"\"\"<br/>board = \"\"\"<br/>  . 0 0 .<br/>  0 1 0 0 <br/>  . 0 0 .<br/>\"\"\"<br/>HLPsolver.solve(board, adjacent, false)<br/>|&gt; Enum.sort |&gt; Enum.map(fn {_,cell} -&gt; cell.value end)<br/>|&gt; Enum.zip(~w[A B C D E F G H])<br/>|&gt; Enum.reduce(layout, fn {n,c},acc -&gt; String.replace(acc, c, to_string(n)) end)<br/>|&gt; IO.puts</pre>"}, {"lang": "Go", "loc": 90, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tp<span class=\"sy1\">,</span> tests<span class=\"sy1\">,</span> swaps <span class=\"sy2\">:=</span> Solution<span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Tested\"</span><span class=\"sy1\">,</span> tests<span class=\"sy1\">,</span> <span class=\"st0\">\"positions and did\"</span><span class=\"sy1\">,</span> swaps<span class=\"sy1\">,</span> <span class=\"st0\">\"swaps.\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Holes A=0, B=1, \u2026, H=7</span><br/><span class=\"co1\">// With connections:</span><br/><span class=\"kw1\">const</span> conn <span class=\"sy2\">=</span> <span class=\"co2\">`<br/>       A   B<br/>      /|\\ /|\\<br/>     / | X | \\<br/>    /  |/ \\|  \\<br/>   C - D - E - F<br/>    \\  |\\ /|  /<br/>     \\ | X | /<br/>      \\|/ \\|/<br/>       G   H`</span><br/>\u00a0<br/><span class=\"kw1\">var</span> connections <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span><span class=\"sy1\">{</span> a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span> <span class=\"sy1\">}{</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"co1\">// A to C,D,E</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"co1\">// B to D,E,F</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"co1\">// G to C,D,E</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"co1\">// H to D,E,F</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"co1\">// C-D, D-E, E-F</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pegs <span class=\"sy1\">[</span><span class=\"nu0\">8</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"co1\">// Valid checks if the pegs are a valid solution.</span><br/><span class=\"co1\">// If the absolute difference between any pair of connected pegs is</span><br/><span class=\"co1\">// greater than one it is a valid solution.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>pegs<span class=\"sy1\">)</span> Valid<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> connections <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> absdiff<span class=\"sy1\">(</span>p<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>a<span class=\"sy1\">],</span> p<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>b<span class=\"sy1\">])</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Solution is a simple recursive brute force solver,</span><br/><span class=\"co1\">// it stops at the first found solution.</span><br/><span class=\"co1\">// It returns the solution, the number of positions tested,</span><br/><span class=\"co1\">// and the number of pegs swapped.</span><br/><span class=\"kw4\">func</span> Solution<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>pegs<span class=\"sy1\">,</span> tests<span class=\"sy1\">,</span> swaps <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> recurse <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/>\trecurse <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\ttests<span class=\"sy2\">++</span><br/>\t\t\t<span class=\"kw1\">return</span> p<span class=\"sy3\">.</span>Valid<span class=\"sy1\">()</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"co1\">// Try each remain peg from p[i:] in p[i]</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tswaps<span class=\"sy2\">++</span><br/>\t\t\tp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t\t<span class=\"kw1\">if</span> recurse<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\tp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\tp <span class=\"sy2\">=</span> &amp;pegs<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">}</span><br/>\trecurse<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>pegs<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>Map<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>r rune<span class=\"sy1\">)</span> rune <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&lt;=</span> r <span class=\"sy3\">&amp;&amp;</span> r <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'H'</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> rune<span class=\"sy1\">(</span>p<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"st0\">'A'</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">'0'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> r<br/>\t<span class=\"sy1\">},</span> conn<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> absdiff<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> a &gt; b <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> a <span class=\"sy3\">-</span> b<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> b <span class=\"sy3\">-</span> a<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 37, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>permutations<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/>solution <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>solution<span class=\"sy0\">@</span><span class=\"br0\">(</span>a:b:c:d:e:f:g:h:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isSolution <span class=\"br0\">(</span>permutations <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    isSolution <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>    isSolution <span class=\"br0\">(</span>a:b:c:d:e:f:g:h:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span> a <span class=\"sy0\">-</span> d<br/>        <span class=\"sy0\">,</span> c <span class=\"sy0\">-</span> d<br/>        <span class=\"sy0\">,</span> g <span class=\"sy0\">-</span> d<br/>        <span class=\"sy0\">,</span> e <span class=\"sy0\">-</span> d<br/>        <span class=\"sy0\">,</span> a <span class=\"sy0\">-</span> c<br/>        <span class=\"sy0\">,</span> c <span class=\"sy0\">-</span> g<br/>        <span class=\"sy0\">,</span> g <span class=\"sy0\">-</span> e<br/>        <span class=\"sy0\">,</span> e <span class=\"sy0\">-</span> a<br/>        <span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> e<br/>        <span class=\"sy0\">,</span> d <span class=\"sy0\">-</span> e<br/>        <span class=\"sy0\">,</span> h <span class=\"sy0\">-</span> e<br/>        <span class=\"sy0\">,</span> f <span class=\"sy0\">-</span> e<br/>        <span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> d<br/>        <span class=\"sy0\">,</span> d <span class=\"sy0\">-</span> h<br/>        <span class=\"sy0\">,</span> h <span class=\"sy0\">-</span> f<br/>        <span class=\"sy0\">,</span> f <span class=\"sy0\">-</span> b<br/>        <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"kw1\">let</span> rightShift s<br/>        <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> s<br/>        <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">++</span> s<br/>  <span class=\"kw1\">in</span> intercalate<br/>       <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>       <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'H'</span><span class=\"br0\">]</span> solution<span class=\"br0\">)</span>\u00a0:<br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>rightShift <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> f<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>g<span class=\"sy0\">,</span> h<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 34, "block": "<pre class=\"j highlighted_source\">holes=:;:<span class=\"st_h\">'A B C D E F G H'</span><br/>\u00a0<br/>connections=:\".;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/> holes e.;:<span class=\"st_h\">'C D E'</span>          <span class=\"co1\">NB. A</span><br/> holes e.;:<span class=\"st_h\">'D E F'</span>          <span class=\"co1\">NB. B</span><br/> holes e.;:<span class=\"st_h\">'A D G'</span>          <span class=\"co1\">NB. C</span><br/> holes e.;:<span class=\"st_h\">'A B C E G H'</span>    <span class=\"co1\">NB. D</span><br/> holes e.;:<span class=\"st_h\">'A B D F G H'</span>    <span class=\"co1\">NB. E</span><br/> holes e.;:<span class=\"st_h\">'B E H'</span>          <span class=\"co1\">NB. F</span><br/> holes e.;:<span class=\"st_h\">'C D E'</span>          <span class=\"co1\">NB. G</span><br/> holes e.;:<span class=\"st_h\">'D E F'</span>          <span class=\"co1\">NB. H</span><br/><span class=\"sy0\">)</span><br/>assert <span class=\"sy0\">(</span>-:|:<span class=\"sy0\">)</span> connections <span class=\"co1\">NB. catch typos</span><br/>\u00a0<br/>pegs=: <span class=\"nu0\">1</span>+<span class=\"sy0\">(</span>A.&amp;i.~\u00a0!<span class=\"sy0\">)</span><span class=\"nu0\">8</span><br/>\u00a0<br/>attempt=: [: &lt;./@<span class=\"sy0\">(</span>-.&amp;<span class=\"nu0\">0</span><span class=\"sy0\">)</span>@,@:| connections * -/~<br/>\u00a0<br/>\u00a0<br/>box=:<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/>        A   B<br/>       /|\\ /|\\<br/>      / | X | \\<br/>     /  |/ \\|  \\<br/>    C - D - E - F<br/>     \\  |\\ /|  /<br/>      \\ | X | /<br/>       \\|/ \\|/<br/>        G   H<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>disp=:verb define<br/>  rplc&amp;<span class=\"sy0\">(</span>,holes;&amp;\":&amp;&gt;<span class=\"kw2\">y</span><span class=\"sy0\">)</span> box<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 46, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">IntStream</span>.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> NoConnection <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// adopted from Go</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> links <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"co1\">// A to C,D,E</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"co1\">// B to D,E,F</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>,    <span class=\"co1\">// D to C, E</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"br0\">}</span>,       <span class=\"co1\">// E to F</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"co1\">// G to C,D,E</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"co1\">// H to D,E,F</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pegs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> vals <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> i<span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>vals<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> pegs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                pegs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> vals.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>solved<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solved<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> links.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> peg <span class=\"sy0\">:</span> links<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>pegs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> peg<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%s\u00a0%s%n\"</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%s\u00a0%s%n\"</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%s\u00a0%s%n\"</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>, pegs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 121, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// abs\u00a0:: Num a =&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> abs <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// all\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> all <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">every</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> concatMap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// delete_\u00a0:: Eq a =&gt; a -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> delete_ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        deleteBy<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> b<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// deleteBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; a -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> deleteBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>deleteBy<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Enum a =&gt; a -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"br0\">[</span>tm<span class=\"sy0\">,</span> tn<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">typeof</span> m<span class=\"sy0\">,</span> <span class=\"kw1\">typeof</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> tm <span class=\"sy0\">!==</span> tn <span class=\"sy0\">?</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span><br/>                blnS <span class=\"sy0\">=</span> <span class=\"br0\">(</span>tm <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span>base<span class=\"sy0\">,</span> end<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>blnS <span class=\"sy0\">?</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">codePointAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>                length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>end <span class=\"sy0\">-</span> base<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> blnS <span class=\"sy0\">?</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCodePoint</span><span class=\"br0\">(</span>base <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">:</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// id\u00a0:: a -&gt; a</span><br/>    <span class=\"kw1\">const</span> id <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/>    <span class=\"kw1\">const</span> justifyRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        n <span class=\"sy0\">&gt;</span> strText.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>cFiller.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> strText<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// permutations\u00a0:: [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> permutations <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> concatMap<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> concatMap<span class=\"br0\">(</span>ys <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>ys<span class=\"br0\">)</span><br/>            <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            permutations<span class=\"br0\">(</span>delete_<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unlines <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unwords\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unwords <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/>    <span class=\"kw1\">const</span> zipWith <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> ny <span class=\"sy0\">=</span> ys.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> ny <span class=\"sy0\">?</span> xs <span class=\"sy0\">:</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// CONNECTION PUZZLE ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// universe\u00a0:: [[Int]]</span><br/>    <span class=\"kw1\">const</span> universe <span class=\"sy0\">=</span> permutations<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// isSolution\u00a0:: [Int] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> isSolution <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> h<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        all<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>a <span class=\"sy0\">-</span> d<span class=\"sy0\">,</span> c <span class=\"sy0\">-</span> d<span class=\"sy0\">,</span> g <span class=\"sy0\">-</span> d<span class=\"sy0\">,</span> e <span class=\"sy0\">-</span> d<span class=\"sy0\">,</span> a <span class=\"sy0\">-</span> c<span class=\"sy0\">,</span> c <span class=\"sy0\">-</span> g<span class=\"sy0\">,</span> g <span class=\"sy0\">-</span> e<span class=\"sy0\">,</span><br/>            e <span class=\"sy0\">-</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> e<span class=\"sy0\">,</span> d <span class=\"sy0\">-</span> e<span class=\"sy0\">,</span> h <span class=\"sy0\">-</span> e<span class=\"sy0\">,</span> f <span class=\"sy0\">-</span> e<span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> d<span class=\"sy0\">,</span> d <span class=\"sy0\">-</span> h<span class=\"sy0\">,</span> h <span class=\"sy0\">-</span> f<span class=\"sy0\">,</span> f <span class=\"sy0\">-</span> b<br/>        <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// firstSolution\u00a0:: [Int]</span><br/>    <span class=\"kw1\">const</span> firstSolution <span class=\"sy0\">=</span> universe<span class=\"br0\">[</span>until<span class=\"br0\">(</span><br/>        i <span class=\"sy0\">=&gt;</span> isSolution<span class=\"br0\">(</span>universe<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        i <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"nu0\">0</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// [Int]</span><br/>    <span class=\"kw1\">const</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> h<span class=\"br0\">]</span> <span class=\"sy0\">=</span> firstSolution<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span><br/>        zipWith<span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> <span class=\"st0\">' = '</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            enumFromTo<span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'H'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            firstSolution<br/>        <span class=\"br0\">)</span><br/>        .<span class=\"me1\">concat</span><span class=\"br0\">(</span><br/>            <span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span>c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> f<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span>g<span class=\"sy0\">,</span> h<span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>xs <span class=\"sy0\">=&gt;</span> justifyRight<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> unwords<span class=\"br0\">(</span>xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>show<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 24, "block": "<pre class=\"text highlighted_source\"># Short-circuit determination of whether (a|condition)<br/># is true for all a in array:<br/>def forall(array; condition):<br/>  def check:<br/>    . as $ix<br/>    | if $ix == (array|length) then true<br/>      elif (array[$ix] | condition) then ($ix + 1) | check<br/>      else false<br/>      end;<br/>  0 | check;<br/>\u00a0<br/># permutations of 0 .. (n-1)<br/>def permutations(n):<br/>  # Given a single array, generate a stream by inserting n at different positions:<br/>  def insert(m;n):<br/>     if m &gt;= 0 then (.[0:m] + [n] + .[m:]), insert(m-1;n) else empty end;<br/>  if n==0 then []<br/>  elif n == 1 then [1]<br/>  else<br/>    permutations(n-1) | insert(n-1; n)<br/>  end;<br/>\u00a0<br/># Count the number of items in a stream<br/>def count(f): reduce f as $_ (0; .+1);</pre>"}, {"lang": "Kotlin", "loc": 84, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">math</span>.<span class=\"me1\">abs</span><br/>\u00a0<br/><span class=\"co1\">// Holes A=0, B=1, \u2026, H=7</span><br/><span class=\"co1\">// With connections:</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> conn <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>       A   B<br/>      /|<span class=\"es0\">\\ </span>/|<span class=\"es1\">\\<br/></span>     / | X | <span class=\"es1\">\\<br/></span>    /  |/ <span class=\"es0\">\\|</span>  <span class=\"es1\">\\<br/></span>   C - D - E - F<br/>    <span class=\"es0\">\\ </span> |<span class=\"es0\">\\ </span>/|  /<br/>     <span class=\"es0\">\\ </span>| X | /<br/>      <span class=\"es0\">\\|</span>/ <span class=\"es0\">\\|</span>/<br/>       G   H<br/>\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> connections <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"nu0\">0</span> to <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span> to <span class=\"nu0\">4</span>,   <span class=\"co1\">// A to C, D, E</span><br/>    <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> to <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span> to <span class=\"nu0\">5</span>,   <span class=\"co1\">// B to D, E, F</span><br/>    <span class=\"nu0\">6</span> to <span class=\"nu0\">2</span>, <span class=\"nu0\">6</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span> to <span class=\"nu0\">4</span>,   <span class=\"co1\">// G to C, D, E</span><br/>    <span class=\"nu0\">7</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span> to <span class=\"nu0\">4</span>, <span class=\"nu0\">7</span> to <span class=\"nu0\">5</span>,   <span class=\"co1\">// H to D, E, F</span><br/>    <span class=\"nu0\">2</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> to <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span> to <span class=\"nu0\">5</span>    <span class=\"co1\">// C-D, D-E, E-F</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// 'isValid' checks if the pegs are a valid solution.</span><br/><span class=\"co1\">// If the absolute difference between any pair of connected pegs is</span><br/><span class=\"co1\">// greater than one it is a valid solution.</span><br/>fun isValid<span class=\"br0\">(</span>pegs<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> in connections<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>pegs<span class=\"br0\">[</span>a<span class=\"br0\">]</span> - pegs<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun swap<span class=\"br0\">(</span>pegs<span class=\"sy0\">:</span> IntArray, i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> pegs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    pegs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pegs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    pegs<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// 'solve' is a simple recursive brute force solver,</span><br/><span class=\"co1\">// it stops at the first found solution.</span><br/><span class=\"co1\">// It returns the solution, the number of positions tested,</span><br/><span class=\"co1\">// and the number of pegs swapped.</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Triple<span class=\"sy0\">&lt;</span>IntArray, Int, Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pegs <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it + <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tests <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> swaps <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    fun recurse<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> pegs.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tests++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> isValid<span class=\"br0\">(</span>pegs<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// Try each remaining peg from pegs[i] onwards</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i until pegs.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            swaps++<br/>            swap<span class=\"br0\">(</span>pegs, i, j<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>recurse<span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            swap<span class=\"br0\">(</span>pegs, i, j<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    recurse<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Triple<span class=\"br0\">(</span>pegs, tests, swaps<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun pegsAsString<span class=\"br0\">(</span>pegs<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ca <span class=\"sy0\">=</span> conn.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, c<span class=\"br0\">)</span> in ca.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c in <span class=\"st0\">'A'</span>..<span class=\"st0\">'H'</span><span class=\"br0\">)</span> ca<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> + pegs<span class=\"br0\">[</span>c - <span class=\"st0\">'A'</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> String<span class=\"br0\">(</span>ca<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>p, tests, swaps<span class=\"br0\">)</span> <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>pegsAsString<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Tested $tests positions and did $swaps swaps.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">sol = Fold[<br/>    Select[#, <br/>      Function[perm, Abs[perm[[#2[[1]]]] - perm[[#2[[2]]]]] &gt; 1]] &amp;, <br/>    Permutations[<br/>     Range[8]], {{1, 3}, {1, 4}, {1, 5}, {2, 4}, {2, 5}, {2, 6}, {3, <br/>      4}, {3, 7}, {4, 5}, {4, 7}, {4, 8}, {5, 6}, {5, 7}, {5, 8}, {6, <br/>      8}}][[1]];<br/>Print[StringForm[<br/>   \"    ``   ``\\n   /|\\\\ /|\\\\\\n  / | X | \\\\\\n /  |/ \\\\|  \\\\\\n`` - `` \\<br/>- `` - ``\\n \\\\  |\\\\ /|  /\\n  \\\\ | X | /\\n   \\\\|/ \\\\|/\\n    ``   ``\", <br/>   Sequence @@ sol]];</pre>"}, {"lang": "Perl 6", "loc": 95, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@adjacent</span> <span class=\"sy0\">=</span> gather <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>    take <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">|</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">for</span> flat <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span> <span class=\"kw1\">X</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    <span class=\"sy0\">.</span> _ <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> _ <span class=\"sy0\">.</span><br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span><br/>    _ <span class=\"sy0\">.</span> _ <span class=\"nu0\">1</span> <span class=\"sy0\">.</span> _<br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span><br/>    <span class=\"sy0\">.</span> _ <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> _ <span class=\"sy0\">.</span><br/>    <span class=\"kw2\">END</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solveboard<span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@known</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@neigh</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@degree</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"co2\">/^_/</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">??</span> Rat <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span> <span class=\"sy0\">--&gt;</span> List<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eager gather <span class=\"kw1\">for</span> <span class=\"re0\">@adjacent</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            take <span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">defined</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H<span class=\"es0\">\\e</span>[0J\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    try_fill <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> try_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tries</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">$old</span> <span class=\"kw1\">and</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span>               <span class=\"co1\"># conjecture grid value</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H\"</span><span class=\"sy0\">;</span>                    <span class=\"co1\"># show conjectured board</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Rat <span class=\"br0\">{</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"nu0\">0</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'_'</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span>  <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$width}d\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># conjecture new degrees</span><br/>            <span class=\"kw3\">push</span> <span class=\"re0\">@degrees</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<span class=\"sy0\">;</span>         <span class=\"co1\"># and categorize by degree</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">defined</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ties</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@ties</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">{</span>           <span class=\"co1\"># reverse works better for this hidato anyway</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> try_fill <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>          <span class=\"co1\"># undo degree conjectures</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span>             <span class=\"co1\"># undo grid value conjecture</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$tries tries\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>constant txt = \"\"\"<br/>        A   B<br/>       /|\\ /|\\<br/>      / | X | \\<br/>     /  |/ \\|  \\<br/>    C - D - E - F<br/>     \\  |\\ /|  /<br/>      \\ | X | /<br/>       \\|/ \\|/<br/>        G   H\"\"\"<br/>--constant links = \"CA DA DB DC EA EB ED FB FE GC GD GE HD HE HF\"<br/>constant links = {\"\",\"\",\"A\",\"ABC\",\"ABD\",\"BE\",\"CDE\",\"DEF\"}<br/>\u00a0<br/>function solve(sequence s, integer idx, sequence part)<br/>object res<br/>integer v, p<br/>    for i=1 to length(s) do<br/>        v = s[i]<br/>        for j=1 to length(links[idx]) do<br/>            p = links[idx][j]-'@'<br/>            if abs(v-part[p])&lt;2 then v=0 exit end if<br/>        end for<br/>        if v then<br/>            if length(s)=1 then return part&amp;v end if<br/>            res = solve(s[1..i-1]&amp;s[i+1..$],idx+1,part&amp;v)<br/>            if sequence(res) then return res end if<br/>        end if<br/>    end for<br/>    return 0<br/>end function<br/>\u00a0<br/>printf(1,substitute_all(txt,\"ABCDEFGH\",solve(\"12345678\",1,\"\")))</pre>"}, {"lang": "Prolog", "loc": 56, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>edge<span class=\"br0\">(</span>a<span class=\"sy4\">,</span> c<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>a<span class=\"sy4\">,</span> d<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>a<span class=\"sy4\">,</span> e<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>b<span class=\"sy4\">,</span> d<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>b<span class=\"sy4\">,</span> e<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>b<span class=\"sy4\">,</span> f<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>c<span class=\"sy4\">,</span> d<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>c<span class=\"sy4\">,</span> g<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>d<span class=\"sy4\">,</span> e<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>d<span class=\"sy4\">,</span> g<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>d<span class=\"sy4\">,</span> h<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>e<span class=\"sy4\">,</span> f<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>e<span class=\"sy4\">,</span> g<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>e<span class=\"sy4\">,</span> h<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>edge<span class=\"br0\">(</span>f<span class=\"sy4\">,</span> h<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>connected<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   edge<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">;</span> edge<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>no_connection_puzzle<span class=\"br0\">(</span>Vs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% construct the arranged list of the nodes</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B^<span class=\"br0\">(</span>edge<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">;</span> edge<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Lst<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsort<span class=\"br0\">(</span>Lst<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% construct the list of the values</span><br/>\tlength<span class=\"br0\">(</span>Vs<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tVs ins <span class=\"nu0\">1</span><span class=\"sy4\">..</span>Len<span class=\"sy4\">,</span><br/>\tall_distinct<span class=\"br0\">(</span>Vs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% two connected nodes must have values different for more than 1</span><br/>\tset_constraints<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Vs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlabel<span class=\"br0\">(</span>Vs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>set_constraints<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>set_constraints<span class=\"br0\">(</span><span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>VH <span class=\"sy5\">|</span> VT<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tset_constraint<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> VH<span class=\"sy4\">,</span> VT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tset_constraints<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> VT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>set_constraint<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>set_constraint<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H1 <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>VH <span class=\"sy5\">|</span> VT<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tconnected<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   V <span class=\"sy3\">-</span> VH #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> VH <span class=\"sy3\">-</span> V #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tset_constraint<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> T1<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> VT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>set_constraint<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H1 <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_VH <span class=\"sy5\">|</span> VT<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"sy2\">\\+</span>connected<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tset_constraint<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> T1<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> VT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/><span class=\"kw1\">from</span> enum <span class=\"kw1\">import</span> Enum<br/>\u00a0<br/>A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> E<span class=\"sy0\">,</span> F<span class=\"sy0\">,</span> G<span class=\"sy0\">,</span> H <span class=\"sy0\">=</span> Enum<span class=\"br0\">(</span><span class=\"st0\">'Peg'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A, B, C, D, E, F, G, H'</span><span class=\"br0\">)</span><br/>\u00a0<br/>connections <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>A<span class=\"sy0\">,</span> C<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">(</span>B<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>B<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>B<span class=\"sy0\">,</span> F<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">(</span>G<span class=\"sy0\">,</span> C<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>G<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>G<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">(</span>H<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>H<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>H<span class=\"sy0\">,</span> F<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">(</span>C<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>D<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>E<span class=\"sy0\">,</span> F<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> ok<span class=\"br0\">(</span>conn<span class=\"sy0\">,</span> perm<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Connected numbers ok?\"\"\"</span><br/>    this<span class=\"sy0\">,</span> that <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c.<span class=\"me1\">value</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> conn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>perm<span class=\"br0\">[</span>this<span class=\"br0\">]</span> - perm<span class=\"br0\">[</span>that<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>perm <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>ok<span class=\"br0\">(</span>conn<span class=\"sy0\">,</span> perm<span class=\"br0\">)</span> <span class=\"kw1\">for</span> conn <span class=\"kw1\">in</span> connections<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    solutions <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"A, B, C, D, E, F, G, H =\"</span><span class=\"sy0\">,</span> <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> solutions<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 43, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Solve the no connection puzzle. Tim Brown Oct. 2014<br/>\u00a0<br/>;; absolute difference of a and b if they are both true<br/>(define (and- a b) (and a b (abs (- a b))))<br/>\u00a0<br/>;; Finds the differences of all established connections in the network<br/>(define (network-diffs (A #f) (B #f) (C #f) (D #f) (E #f) (F #f) (G #f) (H #f))<br/>  (list (and- A C) (and- A D) (and- A E)<br/>        (and- B D) (and- B E) (and- B F)<br/>        (and- C D) (and- C G)<br/>        (and- D E) (and- D G) (and- D H)<br/>        (and- E F) (and- E G) (and- E H)<br/>        (and- F G)))<br/>\u00a0<br/>;; Make sure there is \u201cno connection\u201d in the network N; return N if good<br/>(define (good-network? N)<br/>  (and (for/and ((d (filter values (apply network-diffs N)))) (&gt; d 1)) N))<br/>\u00a0<br/>;; possible optimisation is to reverse the arguments to network-diffs, reverse the return value from<br/>;; this function and make this a cons but we're pretty quick here as it is.              <br/>(define (find-good-network pegs (n/w null))<br/>  (if (null? pegs) n/w<br/>      (for*/or ((p pegs))<br/>        (define n/w+ (append n/w (list p)))<br/>        (and (good-network? n/w+)<br/>             (find-good-network (remove p pegs =) n/w+)))))<br/>\u00a0<br/>(define (render-puzzle pzl)<br/>  (apply printf (regexp-replace* \"O\" #&lt;&lt;EOS<br/>    O   O<br/>   /|\\ /|\\<br/>  / | X | \\<br/> /  |/ \\|  \\<br/>O - O - O - O<br/> \\  |\\ /|  /<br/>  \\ | X | /<br/>   \\|/ \\|/<br/>    O   O~%<br/>EOS<br/>                                 \"~a\") pzl))<br/>\u00a0<br/>(render-puzzle (find-good-network '(1 2 3 4 5 6 7 8)))</pre>"}, {"lang": "REXX", "loc": 57, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  solves  the  \"no-connection\"  puzzle   (the puzzle has eight pegs).     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> limit <span class=\"sy0\">.</span>    <span class=\"coMULTI\">/*number of solutions wanted.*/</span>   <span class=\"coMULTI\">/* \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 */</span><br/><span class=\"kw1\">if</span> limit==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> limit==<span class=\"st0\">\".\"</span>  <span class=\"kw3\">then</span> limit=<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/* \u2551          A    B           \u2551 */</span><br/>                                                       <span class=\"coMULTI\">/* \u2551         /\u2502\\  /\u2502\\          \u2551 */</span><br/>@<span class=\"sy0\">.</span>  =                                                  <span class=\"coMULTI\">/* \u2551        / \u2502 \\/ \u2502 \\         \u2551 */</span><br/>@<span class=\"sy0\">.</span>1 = <span class=\"st0\">'A   C D E'</span>                                      <span class=\"coMULTI\">/* \u2551       /  \u2502 /\\ \u2502  \\        \u2551 */</span><br/>@<span class=\"sy0\">.</span>2 = <span class=\"st0\">'B   D E F'</span>                                      <span class=\"coMULTI\">/* \u2551      /   \u2502/  \\\u2502   \\       \u2551 */</span><br/>@<span class=\"sy0\">.</span>3 = <span class=\"st0\">'C   A D G'</span>                                      <span class=\"coMULTI\">/* \u2551     C\u2500\u2500\u2500\u2500D\u2500\u2500\u2500\u2500E\u2500\u2500\u2500\u2500F      \u2551 */</span><br/>@<span class=\"sy0\">.</span>4 = <span class=\"st0\">'D   A B C E G'</span>                                  <span class=\"coMULTI\">/* \u2551      \\   \u2502\\  /\u2502   /       \u2551 */</span><br/>@<span class=\"sy0\">.</span>5 = <span class=\"st0\">'E   A B D F H'</span>                                  <span class=\"coMULTI\">/* \u2551       \\  \u2502 \\/ \u2502  /        \u2551 */</span><br/>@<span class=\"sy0\">.</span>6 = <span class=\"st0\">'F   B E H'</span>                                      <span class=\"coMULTI\">/* \u2551        \\ \u2502 /\\ \u2502 /         \u2551 */</span><br/>@<span class=\"sy0\">.</span>7 = <span class=\"st0\">'G   C D E'</span>                                      <span class=\"coMULTI\">/* \u2551         \\\u2502/  \\\u2502/          \u2551 */</span><br/>@<span class=\"sy0\">.</span>8 = <span class=\"st0\">'H   D E F'</span>                                      <span class=\"coMULTI\">/* \u2551          G    H           \u2551 */</span><br/>cnt=<span class=\"nu0\">0</span>                                                  <span class=\"coMULTI\">/* \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d */</span><br/>                  <span class=\"kw1\">do</span> pegs=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  @<span class=\"sy0\">.</span>pegs<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;    _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>pegs,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                  subs=<span class=\"nu0\">0</span><br/>                             <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  <span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>pegs<span class=\"br0\">)</span> -<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*create list of node paths.*/</span><br/>                             __=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>pegs, # + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span> __<span class=\"sy0\">&gt;</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                             subs=subs + <span class=\"nu0\">1</span>;            \u00a0!<span class=\"sy0\">.</span>_<span class=\"sy0\">.</span>subs=__<br/>                             <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*#*/</span><br/>                 \u00a0!<span class=\"sy0\">.</span>_<span class=\"sy0\">.</span>0=subs                     <span class=\"coMULTI\">/*assign the number of the node paths. */</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*pegs*/</span><br/>pegs=pegs-<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*the number of pegs to be seated.     */</span><br/>_=<span class=\"st0\">'    '</span>                                         <span class=\"coMULTI\">/*_   is used for indenting the output.*/</span><br/>        <span class=\"kw1\">do</span>        a=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>         <span class=\"kw1\">do</span>       b=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>          <span class=\"kw1\">do</span>      c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>           <span class=\"kw1\">do</span>     d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>            <span class=\"kw1\">do</span>    e=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>             <span class=\"kw1\">do</span>   f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>              <span class=\"kw1\">do</span>  g=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'G'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>               <span class=\"kw1\">do</span> h=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pegs;     <span class=\"kw1\">if</span>\u00a0?<span class=\"br0\">(</span><span class=\"st0\">'H'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>               <span class=\"kw1\">say</span> _ <span class=\"st0\">'a='</span>a _  <span class=\"st0\">'b='</span><span class=\"sy0\">||</span>b _  <span class=\"st0\">'c='</span>c _  <span class=\"st0\">'d='</span>d _  <span class=\"st0\">'e='</span>e _  <span class=\"st0\">'f='</span>f _  <span class=\"st0\">'g='</span>g _ <span class=\"st0\">'h='</span>h<br/>               cnt=cnt+<span class=\"nu0\">1</span>;        <span class=\"kw1\">if</span> cnt==limit  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> a<br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*h*/</span><br/>              <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*g*/</span><br/>             <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*f*/</span><br/>            <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*e*/</span><br/>           <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*d*/</span><br/>          <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*c*/</span><br/>         <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*b*/</span><br/>        <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*a*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*display a blank line to the terminal.*/</span><br/>s= <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'s'</span>, cnt<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*handle the case of plurals  (or not).*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'found '</span>   cnt   <span class=\"st0\">\" solution\"</span>s<span class=\"st0\">'.'</span>             <span class=\"coMULTI\">/*display the number of solutions found*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>?: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> node;  nn=<span class=\"kw2\">value</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>   nH=nn+<span class=\"nu0\">1</span><br/>             <span class=\"kw1\">do</span> cn=<span class=\"kw6\">c2d</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">c2d</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>;    <span class=\"kw1\">if</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span> <span class=\"kw6\">d2c</span><span class=\"br0\">(</span>cn<span class=\"br0\">)</span> <span class=\"br0\">)</span>==nn  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cn*/</span>                       <span class=\"coMULTI\">/* [\u2191]  see if there any are duplicates.*/</span><br/>   nL=nn-<span class=\"nu0\">1</span><br/>             <span class=\"kw1\">do</span> ch=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>\u00a0!<span class=\"sy0\">.</span>node<span class=\"sy0\">.</span>0              <span class=\"coMULTI\">/* [\u2193]  see if there any  \u00ac= \u00b11  values.*/</span><br/>             $=!<span class=\"sy0\">.</span>node<span class=\"sy0\">.</span>ch;        fn=<span class=\"kw2\">value</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*the node name  and  its current peg #.*/</span><br/>             <span class=\"kw1\">if</span> nL==fn <span class=\"sy0\">|</span> nH==fn  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*if \u2261 \u00b11,  then the node can't be used.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*ch*/</span>                       <span class=\"coMULTI\">/* [\u2191]  looking for suitable number.    */</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                     <span class=\"coMULTI\">/*the subroutine arg value passed is OK.*/</span></pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"co1\">#  Solve No Connection Puzzle</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#  Nigel_Galloway</span><br/><span class=\"co1\">#  October 6th., 2014</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'HLPSolver'</span><br/>ADJACENT = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>A,B,C,D,E,F,G,H = <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/>board1 = <span class=\"co4\">&lt;&lt;EOS<br/>  . 0 0 .<br/>  0 0 1 0 <br/>  . 0 0 .<br/>\u00a0<br/>EOS</span><br/>g = HLPsolver.<span class=\"me1\">new</span><span class=\"br0\">(</span>board1<span class=\"br0\">)</span><br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>B,G,H,F<span class=\"br0\">]</span>            <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>B<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>A,C,G,H<span class=\"br0\">]</span>            <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>C<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>C<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>B,E,F,H<span class=\"br0\">]</span>          <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>D<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>D<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>F<span class=\"br0\">]</span>                <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>E<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>E<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>C<span class=\"br0\">]</span>                <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>F<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>F<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>A,C,D,G<span class=\"br0\">]</span>          <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>G<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>G<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>A,B,F,H<span class=\"br0\">]</span>            <br/>g.<span class=\"me1\">board</span><span class=\"br0\">[</span>H<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>H<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">adj</span> = <span class=\"br0\">[</span>A,B,C,G<span class=\"br0\">]</span>            <br/>g.<span class=\"me1\">solve</span><br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 45, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> haveAdjacent <span class=\"br0\">{</span>a b c d e f g h<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$a</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$a</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$a</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$b</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$b</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$b</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$c</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$c</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$d</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$d</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$d</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$e</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$e</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$e</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span> ||<br/>\t<span class=\"br0\">[</span>edge <span class=\"re0\">$f</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> edge <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$x</span>-<span class=\"re0\">$y</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> layout <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"br0\">{</span><br/>        A   B<br/>       /|\\ /|\\ <br/>      / | X | \\ <br/>     /  |/ \\|  \\ <br/>    C - D - E - F<br/>     \\  |\\ /|  /<br/>      \\ | X | /<br/>       \\|/ \\|/<br/>        G   H<br/><span class=\"br0\">}</span> \\n<span class=\"br0\">]</span><br/>struct::<span class=\"kw2\">list</span> foreachperm p <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>haveAdjacent <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><br/>\t    lmap name <span class=\"br0\">{</span>A B C D E F G H<span class=\"br0\">}</span> val <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"kw2\">list</span> <span class=\"re0\">$name</span> <span class=\"re0\">$val</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$layout</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XPL0", "loc": 37, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>int     Hole, Max, I;<br/>char    Box(8), Str;<br/>def     A, B, C, D, E, F, G, H;<br/>[for Hole:= 0 to 7 do Box(Hole):= Hole+1;<br/>Max:= 7;<br/>while   abs(Box(D)-Box(A)) &lt; 2  or  abs(Box(D)-Box(C)) &lt; 2  or<br/>        abs(Box(D)-Box(G)) &lt; 2  or  abs(Box(D)-Box(E)) &lt; 2  or<br/>        abs(Box(A)-Box(C)) &lt; 2  or  abs(Box(C)-Box(G)) &lt; 2  or<br/>        abs(Box(G)-Box(E)) &lt; 2  or  abs(Box(E)-Box(A)) &lt; 2  or<br/>        abs(Box(E)-Box(B)) &lt; 2  or  abs(Box(E)-Box(H)) &lt; 2  or<br/>        abs(Box(E)-Box(F)) &lt; 2  or  abs(Box(B)-Box(D)) &lt; 2  or<br/>        abs(Box(D)-Box(H)) &lt; 2  or  abs(Box(H)-Box(F)) &lt; 2  or<br/>        abs(Box(F)-Box(B)) &lt; 2  do<br/>           loop [I:= Box(0);                    \\next permutation<br/>                for Hole:= 0 to Max-1 do Box(Hole):= Box(Hole+1);<br/>                Box(Max):= I;<br/>                if I # Max+1 then [Max:= 7;  quit]<br/>                else Max:= Max-1];<br/>Str:= \"<br/>    #   #<br/>   /|\\ /|\\<br/>  / | X | \\<br/> /  |/ \\|  \\<br/># - # - # - #<br/> \\  |\\ /|  /<br/>  \\ | X | /<br/>   \\|/ \\|/<br/>    #   #<br/>\";<br/>Hole:= 0;  I:= 0;<br/>repeat  if Str(I)=^# then [Str(I):= Box(Hole)+^0;  Hole:= Hole+1];<br/>        I:= I+1;<br/>until   Hole = 8;<br/>Text(0, Str);<br/>]</pre>"}, {"lang": "zkl", "loc": 27, "block": "<pre class=\"text highlighted_source\">const PegA=0, PegB=1, PegC=2, PegD=3, PegE=4, PegF=5, PegG=6, PegH=7;<br/>connections:=T( <br/>   T(PegA, PegC), T(PegA, PegD), T(PegA, PegE),<br/>   T(PegB, PegD), T(PegB, PegE), T(PegB, PegF),<br/>   T(PegC, PegD), T(PegD, PegE), T(PegE, PegF),<br/>   T(PegG, PegC), T(PegG, PegD), T(PegG, PegE),<br/>   T(PegH, PegD), T(PegH, PegE), T(PegH, PegF) );<br/>CZ:=connections.len();<br/>#&lt;&lt;&lt;   // Use \"raw\" string in a \"here doc\" so \\ isn't a quote char<br/>board:=<br/>0'$        A   B<br/>       /|\\ /|\\<br/>      / | X | \\<br/>     /  |/ \\|  \\<br/>    C - D - E - F<br/>     \\  |\\ /|  /<br/>      \\ | X | /<br/>       \\|/ \\|/<br/>        G   H$;<br/>#&lt;&lt;&lt;\t// end \"here doc\"<br/>\u00a0<br/>perm:=T(PegA,PegB,PegC,PegD,PegE,PegF,PegG,PegH); // Peg[8]<br/>foreach p in (Utils.Helpers.permuteW(perm)){ // permutation iterator<br/>   if(connections.filter1('wrap([(a,b)]){ (p[a] - p[b]).abs()&lt;=1 })) continue;<br/>   board.translate(\"ABCDEFGH\",p.apply('+(1)).concat()).println(); <br/>   break;  // comment out to see all 16 solutions<br/>}</pre>"}]}