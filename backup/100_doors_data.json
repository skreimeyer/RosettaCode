{"task": "100_doors", "blocks": [{"lang": "360 Assembly", "loc": 38, "block": "<pre class=\"text highlighted_source\">*        100 doors                 13/08/2015<br/>HUNDOOR  CSECT<br/>         USING  HUNDOOR,R12<br/>         LR     R12,R15<br/>         LA     R6,0<br/>         LA     R8,1               step 1<br/>         LA     R9,100<br/>LOOPI    BXH    R6,R8,ELOOPI       do ipass=1 to 100 (R6)<br/>         LR     R7,R6<br/>         SR     R7,R6<br/>         LR     R10,R6             step ipass<br/>         LA     R11,100<br/>LOOPJ    BXH    R7,R10,ELOOPJ      do idoor=ipass to 100 by ipass (R7)<br/>         LA     R5,DOORS-1<br/>         AR     R5,R7<br/>         XI     0(R5),X'01'        doors(idoor)=not(doors(idoor))<br/>NEXTJ    B      LOOPJ<br/>ELOOPJ   B      LOOPI<br/>ELOOPI   LA     R10,BUFFER         R10 address of the buffer<br/>         LA     R5,DOORS           R5 address of doors item<br/>         LA     R6,1               idoor=1 (R6)<br/>         LA     R9,100             loop counter<br/>LOOPN    CLI    0(R5),X'01'        if doors(idoor)=1<br/>         BNE    NEXTN<br/>         XDECO  R6,XDEC            idoor to decimal<br/>         MVC    0(4,R10),XDEC+8    move decimal to buffer<br/>         LA     R10,4(R10)<br/>NEXTN\t LA     R6,1(R6)           idoor=idoor+1<br/>         LA     R5,1(R5)<br/>         BCT    R9,LOOPN           loop<br/>ELOOPN   XPRNT  BUFFER,80<br/>RETURN   XR     R15,R15<br/>         BR     R14<br/>DOORS    DC     100X'00'<br/>BUFFER   DC     CL80' '<br/>XDEC     DS     CL12<br/>         YREGS<br/>         END    HUNDOOR</pre>"}, {"lang": "4DOS Batch", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>set doors=%@repeat[C,100]<br/>do step = 1 to 100<br/>  do door =\u00a0%step to 100 by\u00a0%step<br/>    set doors=%@left[%@eval[%door-1],%doors]%@if[%@instr[%@eval[%door-1],1,%doors]==C,O,C]%@right[%@eval[100-%door],%doors]<br/>  enddo<br/>enddo<br/>\u00a0</pre>"}, {"lang": "6502 Assembly", "loc": 48, "block": "<pre class=\"text highlighted_source\">; 100 DOORS in  6502 assembly language for: http://www.6502asm.com/beta/index.html<br/>; Written for the original MOS Technology, Inc. NMOS version of the 6502, but should work with any version.<br/>; Based on BASIC QB64 unoptimized version: http://rosettacode.org/wiki/100_doors#BASIC<br/>;<br/>; Notes:<br/>;    Doors array[1..100] is at $0201..$0264. On the specified emulator, this is in video memory, so tbe results will <br/>; be directly shown as pixels in the display.<br/>;    $0200 (door 0) is cleared for display purposes but is not involved in the open/close loops.<br/>;    Y register holds Stride<br/>;    X register holds Index<br/>;    Zero Page address $01 used to add Stride to Index (via A) because there's no add-to-X or add-Y-to-A instruction.<br/>\u00a0<br/> \u00a0; First, zero door array<br/>    LDA #00<br/>    LDX #100<br/>Z_LOOP:<br/>    STA 200,X<br/>    DEX<br/>    BNE Z_LOOP<br/>    STA 200,X<br/>\u00a0<br/> \u00a0; Now do doors repeated open/close<br/>    LDY #01       \u00a0; Initial value of Stride<br/>S_LOOP:<br/>    CPY #101<br/>    BCS S_DONE<br/>    TYA           \u00a0; Initial value of Index<br/>I_LOOP:<br/>    CMP #101<br/>    BCS I_DONE<br/>    TAX           \u00a0; Use as Door array index<br/>    INC $200,X    \u00a0; Toggle bit 0 to reverse state of door<br/>    STY 01        \u00a0; Add stride (Y) to index (X, via A)<br/>    ADC 01<br/>    BCC I_LOOP<br/>I_DONE:<br/>    INY<br/>    BNE S_LOOP<br/>S_DONE:<br/>\u00a0<br/> \u00a0; Finally, format array values for output: 0 for closed, 1 for open<br/>    LDX #100<br/>C_LOOP:<br/>    LDA $200,X<br/>    AND #$01<br/>    STA $200,X<br/>    DEX<br/>    BNE C_LOOP</pre>"}, {"lang": "68000 Assembly", "loc": 112, "block": "<pre class=\"_68000devpac highlighted_source\"><span class=\"sy0\">*-----------------------------------------------------------</span><br/><span class=\"sy0\">*</span> Title     \u00a0: 100Doors.X68<br/><span class=\"sy0\">*</span> Written by\u00a0: G. A. Tippery<br/><span class=\"sy0\">*</span> Date      \u00a0: <span class=\"nu0\">2014</span><span class=\"sy0\">-</span>01<span class=\"sy0\">-</span><span class=\"nu0\">17</span><br/><span class=\"sy0\">*</span> Description: Solves <span class=\"st0\">\"100 Doors\"</span> problem, see: http:<span class=\"sy0\">//</span>rosettacode.<span class=\"kw1\">org</span><span class=\"sy0\">/</span>wiki<span class=\"sy0\">/</span><span class=\"nu0\">100</span>_doors<br/><span class=\"sy0\">*</span> Notes     \u00a0: Translated from C <span class=\"st0\">\"Unoptimized\"</span> version, http:<span class=\"sy0\">//</span>rosettacode.<span class=\"kw1\">org</span><span class=\"sy0\">/</span>wiki<span class=\"sy0\">/</span><span class=\"nu0\">100</span>_doors#unoptimized<br/><span class=\"sy0\">*</span>           \u00a0: No optimizations done relative to C version<span class=\"co1\">; \"for(\"-equivalent loops could be optimized.</span><br/><span class=\"sy0\">*-----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   System<span class=\"sy0\">-</span>specific general console I<span class=\"sy0\">/</span>O macros <span class=\"br0\">(</span>Sim68K, in this case<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">PUTS </span>   <span class=\"kw1\">MACRO</span><br/>    <span class=\"sy0\">**</span> Print a null<span class=\"sy0\">-</span>terminated string <span class=\"kw3\">w</span><span class=\"sy0\">/</span>o CRLF <span class=\"sy0\">**</span><br/>    <span class=\"sy0\">**</span> Usage: PUTS stringaddress<br/>    <span class=\"sy0\">**</span> Returns with <span class=\"kw4\">D0</span>, <span class=\"kw4\">A1</span> modified<br/>        <span class=\"kw2\">MOVEQ</span>   #<span class=\"nu0\">14</span>,<span class=\"kw4\">D0</span>      <span class=\"co1\">; task number 14 (display null string)</span><br/>        <span class=\"kw2\">LEA</span>     \\<span class=\"nu0\">1</span>,<span class=\"kw4\">A1</span>       <span class=\"co1\">; address of string</span><br/>        <span class=\"kw2\">TRAP</span>    #<span class=\"nu0\">15</span>         <span class=\"co1\">; display it</span><br/>        <span class=\"kw1\">ENDM</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">PRINTN </span> <span class=\"kw1\">MACRO</span><br/>    <span class=\"sy0\">**</span> Print decimal integer from number in register<br/>    <span class=\"sy0\">**</span> Usage: PRINTN register<br/>    <span class=\"sy0\">**</span> Returns with <span class=\"kw4\">D0</span>,<span class=\"kw4\">D1</span> modified<br/>        <span class=\"kw1\">IFNC</span> <span class=\"st0\">'\\1'</span>,<span class=\"st0\">'D1'</span>      <span class=\"co1\">;if some register other than D1</span><br/>          <span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span> \\<span class=\"nu0\">1</span>,<span class=\"kw4\">D1</span>      <span class=\"co1\">;put number to display in D1</span><br/>        <span class=\"kw1\">ENDC</span><br/>        <span class=\"kw2\">MOVE</span>.<span class=\"kw3\">B</span>  #<span class=\"nu0\">3</span>,<span class=\"kw4\">D0</span><br/>        <span class=\"kw2\">TRAP</span>    #<span class=\"nu0\">15</span>         <span class=\"co1\">;display number in D1</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   Generic constants<br/><span class=\"sy0\">*</span><br/><span class=\"re0\">CR </span>     <span class=\"kw1\">EQU</span>     <span class=\"nu0\">13</span>      <span class=\"co1\">;ASCII Carriage Return</span><br/><span class=\"re0\">LF </span>     <span class=\"kw1\">EQU</span>     <span class=\"nu0\">10</span>      <span class=\"co1\">;ASCII Line Feed</span><br/>\u00a0<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   Definitions specific to this program<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   Register usage:<br/><span class=\"sy0\">*</span>   <span class=\"kw4\">D3</span> <span class=\"sy0\">==</span> pass <span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>   <span class=\"kw4\">D4</span> <span class=\"sy0\">==</span> door <span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>   <span class=\"kw4\">A2</span> <span class=\"sy0\">==</span> Doors array pointer<br/><span class=\"sy0\">*</span><br/><span class=\"re0\">SIZE </span>   <span class=\"kw1\">EQU</span>     <span class=\"nu0\">100</span>             <span class=\"co1\">;Define a symbolic constant for # of doors</span><br/>\u00a0<br/>        <span class=\"kw1\">ORG</span>     <span class=\"nu13\">$1000</span>           <span class=\"co1\">;Specify load address for program -- actual address system-specific</span><br/><span class=\"re0\">START: </span>                         <span class=\"co1\">; Execution starts here</span><br/>        <span class=\"kw2\">LEA</span>     Doors,<span class=\"kw4\">A2</span>        <span class=\"co1\">; make A2 point to Doors byte array</span><br/>        <span class=\"kw2\">MOVEQ</span>   #<span class=\"nu0\">0</span>,<span class=\"kw4\">D3</span><br/><span class=\"re0\">PassLoop:<br/></span>        <span class=\"kw2\">CMP</span>     #SIZE,<span class=\"kw4\">D3</span><br/>        <span class=\"kw2\">BCC</span>     ExitPassLoop    <span class=\"co1\">; Branch on Carry Clear - being used as Branch on Higher or Equal</span><br/>        <span class=\"kw2\">MOVE</span>    <span class=\"kw4\">D3</span>,<span class=\"kw4\">D4</span><br/><span class=\"re0\">DoorLoop:<br/></span>        <span class=\"kw2\">CMP</span>     #SIZE,<span class=\"kw4\">D4</span><br/>        <span class=\"kw2\">BCC</span>     ExitDoorLoop<br/>        <span class=\"kw2\">NOT</span>.<span class=\"kw3\">B</span>   <span class=\"nu0\">0</span><span class=\"br0\">(</span><span class=\"kw4\">A2</span>,<span class=\"kw4\">D4</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">ADD</span>     <span class=\"kw4\">D3</span>,<span class=\"kw4\">D4</span><br/>        <span class=\"kw2\">ADDQ</span>    #<span class=\"nu0\">1</span>,<span class=\"kw4\">D4</span><br/>        <span class=\"kw2\">BRA</span>     DoorLoop<br/><span class=\"re0\">ExitDoorLoop:<br/></span>        <span class=\"kw2\">ADDQ</span>    #<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span><br/>        <span class=\"kw2\">BRA</span>     PassLoop<br/><span class=\"re0\">ExitPassLoop:<br/></span><br/><span class=\"sy0\">*</span> <span class=\"nu13\">$28</span> <span class=\"sy0\">=</span> <span class=\"nu0\">40</span>. bytes of code to this point. <span class=\"nu0\">32626</span> cycles so far.<br/><span class=\"sy0\">*</span>   At this point, the result exists as the <span class=\"nu0\">100</span> bytes starting at address Doors.<br/><span class=\"sy0\">*</span> To get <span class=\"kw1\">output</span>, we must use methods specific to the particular hardware, OS, <span class=\"kw2\">or</span><br/><span class=\"sy0\">*</span> emulator system that the code is running on.  I use macros to <span class=\"st0\">\"hide\"</span> some of the<br/><span class=\"sy0\">*</span> system<span class=\"sy0\">-</span>specific details<span class=\"co1\">; equivalent macros would be written for another system.</span><br/>\u00a0<br/>        <span class=\"kw2\">MOVEQ</span>   #<span class=\"nu0\">0</span>,<span class=\"kw4\">D4</span><br/><span class=\"re0\">PrintLoop:<br/></span>        <span class=\"kw2\">CMP</span>     #SIZE,<span class=\"kw4\">D4</span><br/>        <span class=\"kw2\">BCC</span>     ExitPrintLoop<br/>        PUTS    DoorMsg1<br/>        <span class=\"kw2\">MOVE</span>    <span class=\"kw4\">D4</span>,<span class=\"kw4\">D1</span><br/>        <span class=\"kw2\">ADDQ</span>    #<span class=\"nu0\">1</span>,<span class=\"kw4\">D1</span>           <span class=\"co1\">; Convert index to 1-based instead of 0-based</span><br/>        PRINTN  <span class=\"kw4\">D1</span><br/>        PUTS    DoorMsg2<br/>        <span class=\"kw2\">TST</span>.<span class=\"kw3\">B</span>   <span class=\"nu0\">0</span><span class=\"br0\">(</span><span class=\"kw4\">A2</span>,<span class=\"kw4\">D4</span><span class=\"br0\">)</span>        <span class=\"co1\">; Is this door open (!= 0)?</span><br/>        <span class=\"kw2\">BNE</span>     ItsOpen<br/>        PUTS    DoorMsgC<br/>        <span class=\"kw2\">BRA</span>     Next<br/><span class=\"re0\">ItsOpen:<br/></span>        PUTS    DoorMsgO<br/><span class=\"re0\">Next:<br/></span>        <span class=\"kw2\">ADDQ</span>    #<span class=\"nu0\">1</span>,<span class=\"kw4\">D4</span><br/>        <span class=\"kw2\">BRA</span>     PrintLoop<br/><span class=\"re0\">ExitPrintLoop:<br/></span><br/><span class=\"sy0\">*</span>  What to do at <span class=\"kw1\">end</span> of program is also system<span class=\"sy0\">-</span>specific<br/>        SIMHALT             <span class=\"co1\">;Halt simulator</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span> <span class=\"nu13\">$78</span> <span class=\"sy0\">=</span> <span class=\"nu0\">120</span>. bytes of code to this point, but this will depend on how the I<span class=\"sy0\">/</span>O macros are actually written.<br/><span class=\"sy0\">*</span> Cycle count is nearly meaningless, as the I<span class=\"sy0\">/</span>O hardware <span class=\"kw2\">and</span> routines will dominate the timing.<br/>\u00a0<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   <span class=\"kw1\">Data</span> memory usage<br/><span class=\"sy0\">*</span><br/>        <span class=\"kw1\">ORG</span>     <span class=\"nu13\">$2000</span><br/><span class=\"re0\">Doors </span>  <span class=\"kw1\">DCB.B</span>   SIZE,<span class=\"nu0\">0</span>      <span class=\"co1\">;Reserve 100 bytes, prefilled with zeros</span><br/>\u00a0<br/><span class=\"re0\">DoorMsg1 </span><span class=\"kw1\">DC.B</span>   <span class=\"st0\">'Door '</span>,<span class=\"nu0\">0</span><br/><span class=\"re0\">DoorMsg2 </span><span class=\"kw1\">DC.B</span>   <span class=\"st0\">' is '</span>,<span class=\"nu0\">0</span><br/><span class=\"re0\">DoorMsgC </span><span class=\"kw1\">DC.B</span>   <span class=\"st0\">'closed'</span>,CR,LF,<span class=\"nu0\">0</span><br/><span class=\"re0\">DoorMsgO </span><span class=\"kw1\">DC.B</span>   <span class=\"st0\">'open'</span>,CR,LF,<span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"kw1\">END</span>     START       <span class=\"co1\">;last line of source</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "8086 Assembly", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ Array of doors; init to empty; accessing a non-extant member will return<br/>\\ 'null', which is treated as 'false', so we don't need to initialize it:<br/>[] var, doors    <br/>\u00a0<br/>\\ given a door number, get the value and toggle it:<br/>: toggle-door \\ n --<br/>\tdoors @ over a:@<br/>\tnot rot swap a:! drop\u00a0;<br/>\u00a0<br/>\\ print which doors are open:<br/>: .doors<br/>\t( <br/>\t\tdoors @ over a:@ nip<br/>\t\tif . space else drop then<br/>\t) 1 100 loop\u00a0;<br/>\u00a0<br/>\\ iterate over the doors, skipping 'n':<br/>: main-pass \\ n --<br/>\t0<br/>\ttrue<br/>\trepeat<br/>\t\tdrop<br/>\t\tdup toggle-door<br/>\t\tover n:+<br/>\t\tdup 101 &lt;<br/>\twhile 2drop drop\u00a0;<br/>\u00a0<br/>\\ calculate the first 100 doors:<br/>' main-pass 1 100 loop<br/>\\ print the results:<br/>.doors cr bye<br/>\u00a0</pre>"}, {"lang": "8th", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ Array of doors; init to empty; accessing a non-extant member will return<br/>\\ 'null', which is treated as 'false', so we don't need to initialize it:<br/>[] var, doors    <br/>\u00a0<br/>\\ given a door number, get the value and toggle it:<br/>: toggle-door \\ n --<br/>\tdoors @ over a:@<br/>\tnot rot swap a:! drop\u00a0;<br/>\u00a0<br/>\\ print which doors are open:<br/>: .doors<br/>\t( <br/>\t\tdoors @ over a:@ nip<br/>\t\tif . space else drop then<br/>\t) 1 100 loop\u00a0;<br/>\u00a0<br/>\\ iterate over the doors, skipping 'n':<br/>: main-pass \\ n --<br/>\t0<br/>\ttrue<br/>\trepeat<br/>\t\tdrop<br/>\t\tdup toggle-door<br/>\t\tover n:+<br/>\t\tdup 101 &lt;<br/>\twhile 2drop drop\u00a0;<br/>\u00a0<br/>\\ calculate the first 100 doors:<br/>' main-pass 1 100 loop<br/>\\ print the results:<br/>.doors cr bye<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 30, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> open_doors_unopt<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_door  <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_count <span class=\"kw4\">type</span> i <span class=\"kw4\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lt_doors <span class=\"kw4\">type</span> <span class=\"kw9\">standard <span class=\"kw4\">table</span> of</span> c <span class=\"kw9\"><span class=\"kw4\">initial</span> size</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPFIELD-SYMBOLS.htm\"><span class=\"kw2\">field-symbols</span></a><span class=\"sy0\">:</span> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"kw4\">type</span> c<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a> <span class=\"nu0\">100</span> <span class=\"kw4\">times</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> <span class=\"kw9\"><span class=\"kw4\">initial</span> line</span> <span class=\"kw4\">to</span> lt_doors <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span><span class=\"sy0\">.</span><br/>    <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">while</span></a> lv_count <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>    lv_count <span class=\"sy1\">=</span> lv_count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    lv_door <span class=\"sy1\">=</span> lv_count<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">while</span></a> lv_door <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>      <span class=\"kw8\">read table</span> lt_doors <span class=\"kw4\">index</span> lv_door <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">.</span><br/>        <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">else</span></a><span class=\"sy0\">.</span><br/>        <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPADD.htm\"><span class=\"kw3\">add</span></a> lv_count <span class=\"kw4\">to</span> lv_door<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">endwhile</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">endwhile</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">loop</span></a> at</span> lt_doors <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> <span class=\"sy1\">&lt;</span>wa_door<span class=\"sy1\">&gt;</span> <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">'Door'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> sy<span class=\"sy0\">-</span>tabix right<span class=\"sy0\">-</span>justified<span class=\"sy0\">,</span> <span class=\"st0\">'is open'</span> <span class=\"kw4\">no-gap</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">endloop</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rep <span class=\"br0\">(</span>n x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x<br/>             <span class=\"br0\">(</span>rep <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> toggle-every-r <span class=\"br0\">(</span>n i bs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp bs<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>first bs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>first bs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>toggle-every-r n <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest bs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> toggle-every <span class=\"br0\">(</span>n bs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>toggle-every-r n <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> bs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"nu0\">100</span>-doors <span class=\"br0\">(</span>i doors<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span><br/>       doors<br/>       <span class=\"br0\">(</span><span class=\"nu0\">100</span>-doors <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span> <span class=\"br0\">(</span>toggle-every i doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 21, "block": "<pre class=\"actionscript highlighted_source\">package <span class=\"br0\">{</span>                                                                                <br/>    <span class=\"kw3\">import</span> flash.<span class=\"me1\">display</span>.<span class=\"me1\">Sprite</span>;                                              <br/>\u00a0<br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> Doors <span class=\"kw3\">extends</span> Sprite <span class=\"br0\">{</span><br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> Doors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"co1\">// Initialize the array</span><br/>            <span class=\"kw2\">var</span> doors:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span>; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">false</span>;<br/>\u00a0<br/>            <span class=\"co1\">// Do the work</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> pass:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>; pass <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span>; pass++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> j:<span class=\"kw3\">Number</span> = pass; j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span>; j += <span class=\"br0\">(</span>pass+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span>;<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>doors<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Acurity Architect", "loc": 1, "block": "<pre>Using #HASH-OFF, OPTION OICC =\"^\" , CICC =\"^\"\n</pre>"}, {"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/> <span class=\"kw3\">procedure</span> Doors <span class=\"kw1\">is</span><br/>    <span class=\"kw3\">type</span> Door_State <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Closed, Open<span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">type</span> Door_List <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Door_State;<br/>    The_Doors\u00a0: Door_List\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Closed<span class=\"br0\">)</span>;<br/> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> <span class=\"kw1\">loop</span><br/>       <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> The_Doors'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>          <span class=\"kw1\">if</span> J <span class=\"kw2\">mod</span> I = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>             <span class=\"kw1\">if</span> The_Doors<span class=\"br0\">(</span>J<span class=\"br0\">)</span> = Closed <span class=\"kw1\">then</span><br/>                 The_Doors<span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= Open;<br/>             <span class=\"kw1\">else</span><br/>                The_Doors<span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= Closed;<br/>             <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> The_Doors'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>       Put_Line<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is \"</span> &amp; Door_State'Image<span class=\"br0\">(</span>The_Doors<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/> <span class=\"kw1\">end</span> Doors;</pre>"}, {"lang": "Agena", "loc": 19, "block": "<pre class=\"text highlighted_source\"># find the first few squares via the unoptimised door flipping method<br/>scope<br/>\u00a0<br/>    local doorMax\u00a0:= 100;<br/>    local door;<br/>    create register door( doorMax );<br/>\u00a0<br/>    # set all doors to closed<br/>    for i to doorMax do door[ i ]\u00a0:= false od;<br/>\u00a0<br/>    # repeatedly flip the doors<br/>    for i to doorMax do<br/>        for j from i to doorMax by i do door[ j ]\u00a0:= not door[ j ] od<br/>    od;<br/>\u00a0<br/>    # display the results<br/>    for i to doorMax do if door[ i ] then write( \" \", i ) fi od; print()<br/>\u00a0<br/>epocs</pre>"}, {"lang": "Aikido", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var doors = new int [100]<br/>\u00a0<br/>foreach pass 100 {<br/>    for (var door = pass\u00a0; door &lt; 100\u00a0; door += pass+1) {<br/>        doors[door] =\u00a0!doors[door]<br/>    }<br/>}<br/>\u00a0<br/>var d = 1<br/>foreach door doors {<br/>    println (\"door \" + d++ + \" is \" + (door\u00a0? \"open\"\u00a0: \"closed\"))<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># declare some constants #</span><br/><span class=\"kw3\">INT</span> limit <span class=\"sy1\">=</span> 100<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> doors <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw4\">MODE</span> DOORSTATE <span class=\"sy1\">=</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">BOOL</span> closed <span class=\"sy1\">=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">BOOL</span> <span class=\"kw22\">open</span> <span class=\"sy1\">=</span> <span class=\"kw8\">NOT</span> closed<span class=\"sy1\">;</span><br/>  <span class=\"kw4\">MODE</span> DOORLIST <span class=\"sy1\">=</span> <span class=\"br0\">[</span>limit<span class=\"br0\">]</span>DOORSTATE<span class=\"sy1\">;</span><br/>\u00a0<br/>  DOORLIST the doors<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> the doors <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> the doors <span class=\"kw2\">DO</span> the doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:=</span>closed <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> the doors <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> the doors <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> the doors <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> the doors <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">IF</span> j <span class=\"kw12\">MOD</span> i <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>        the doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span>  <span class=\"kw8\">NOT</span> the doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>      <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> the doors <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> the doors <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"st0\">\" is \"</span>gl$<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span><span class=\"br0\">(</span>the doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">|</span><span class=\"st0\">\"opened\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>doors<span class=\"sy1\">;</span></pre>"}, {"lang": "ALGOL W", "loc": 32, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% find the first few squares via the unoptimised door flipping method  \u00a0%<br/>\u00a0<br/>    integer doorMax;<br/>    doorMax\u00a0:= 100;<br/>\u00a0<br/>    begin<br/>       \u00a0% need to start a new block so the array can have variable bounds  \u00a0%<br/>\u00a0<br/>       \u00a0% array of doors - door( i ) is true if open, false if closed      \u00a0%<br/>        logical array door( 1\u00a0:: doorMax );<br/>\u00a0<br/>       \u00a0% set all doors to closed                                          \u00a0%<br/>        for i\u00a0:= 1 until doorMax do door( i )\u00a0:= false;<br/>\u00a0<br/>       \u00a0% repeatedly flip the doors                                        \u00a0%<br/>        for i\u00a0:= 1 until doorMax<br/>        do begin<br/>            for j\u00a0:= i step j until doorMax<br/>            do begin<br/>                door( j )\u00a0:= not door( j )<br/>            end<br/>        end;<br/>\u00a0<br/>       \u00a0% display the results                                              \u00a0%<br/>        i_w\u00a0:= 1;\u00a0% set integer field width                                \u00a0%<br/>        s_w\u00a0:= 1;\u00a0% and separator width                                    \u00a0%<br/>        for i\u00a0:= 1 until doorMax do if door( i ) then writeon( i )<br/>\u00a0<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "AmigaE", "loc": 14, "block": "<pre class=\"text highlighted_source\">PROC main()<br/>  DEF t[100]: ARRAY,<br/>      pass, door<br/>  FOR door\u00a0:= 0 TO 99 DO t[door]\u00a0:= FALSE<br/>  FOR pass\u00a0:= 0 TO 99<br/>    door\u00a0:= pass<br/>    WHILE door &lt;= 99<br/>      t[door]\u00a0:= Not(t[door])<br/>      door\u00a0:= door + pass + 1<br/>    ENDWHILE<br/>  ENDFOR<br/>  FOR door\u00a0:= 0 TO 99 DO WriteF('\\d is \\s\\n', door+1,<br/>                                IF t[door] THEN 'open' ELSE 'closed')<br/>ENDPROC</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">doors\u2190{100\u2374((\u2375-1)\u23740),1}<br/>\u2260\u233f\u2283doors\u00a8 \u2373100</pre>"}, {"lang": "AppleScript", "loc": 17, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> is_open <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"nu0\">100</span> <span class=\"kw3\">times</span><br/>   <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> is_open <span class=\"kw3\">to</span> <span class=\"kw1\">false</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> pass <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> door <span class=\"kw3\">from</span> pass <span class=\"kw3\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">by</span> pass<br/>    <span class=\"kw3\">set</span> <span class=\"kw1\">item</span> door <span class=\"kw3\">of</span> is_open <span class=\"kw3\">to</span> <span class=\"kw2\">not</span> <span class=\"kw1\">item</span> door <span class=\"kw3\">of</span> is_open<br/>  <span class=\"kw3\">end</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw3\">set</span> open_doors <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> door <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"nu0\">100</span><br/>   <span class=\"kw3\">if</span> <span class=\"kw1\">item</span> door <span class=\"kw3\">of</span> is_open <span class=\"kw3\">then</span><br/>     <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> open_doors <span class=\"kw3\">to</span> door<br/>   <span class=\"kw3\">end</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw3\">set</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> <span class=\"st0\">\", \"</span><br/><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Open doors: \"</span> <span class=\"sy0\">&amp;</span> open_doors</pre>"}, {"lang": "Arbre", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>openshut(n):<br/>  for x in [1..n]<br/>    x%n==0<br/>\u00a0<br/>pass(n):<br/>  if n==100<br/>    openshut(n)<br/>  else<br/>    openshut(n) xor pass(n+1)<br/>\u00a0<br/>100doors():<br/>  pass(1) -&gt; io<br/>\u00a0</pre>"}, {"lang": "Argile", "loc": 16, "block": "<pre class=\"text highlighted_source\">use std, array<br/>\u00a0<br/>close all doors<br/>for each pass from 1 to 100<br/>  for (door = pass) (door &lt;= 100) (door += pass)<br/>    toggle door<br/>\u00a0<br/>let int pass, door.<br/>\u00a0<br/>.: close all doors\u00a0:. {memset doors 0 size of doors}<br/>.:toggle &lt;int door&gt;:. {   \u00a0!!(doors[door - 1])     }<br/>\u00a0<br/>let doors be an array of 100 bool<br/>\u00a0<br/>for each door from 1 to 100<br/>  printf \"#%.3d\u00a0%s\\n\" door (doors[door - 1])\u00a0? \"[ ]\", \"[X]\"</pre>"}, {"lang": "Astro", "loc": 8, "block": "<pre class=\"python highlighted_source\">var doors <span class=\"sy0\">=</span> falses<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span>: <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> a..<span class=\"me1\">a</span>..<span class=\"nu0\">100</span>:<br/>    doors<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> doors<span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Door $a is ${(doors[a])\u00a0? 'open.': 'closed.'}\"</span><br/>\u00a0</pre>"}, {"lang": "ATS", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include \"share/atspre_staload.hats\"<br/>\u00a0<br/>implement<br/>main0((*void*)) = let<br/>//<br/>var A = @[bool][100](false)<br/>val A = $UNSAFE.cast{arrayref(bool,100)}(<a class=\"__cf_email__\" data-cfemail=\"8dece9e9ffcdcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>//<br/>fnx<br/>loop<br/>(<br/>  pass: intGte(0)<br/>)\u00a0: void =<br/>  if pass &lt; 100<br/>    then loop2 (pass, pass)<br/>  // end of [if]<br/>and<br/>loop2<br/>(<br/>  pass: natLt(100), door: intGte(0)<br/>)\u00a0: void =<br/>  if door &lt; 100<br/>    then (A[door]\u00a0:= ~A[door]; loop2(pass, door+pass+1))<br/>    else loop(pass+1)<br/>  // end of [if]<br/>//<br/>fun<br/>loop3<br/>(<br/>  door: intGte(0)<br/>)\u00a0: void =<br/>  if door &lt; 100<br/>    then (<br/>      println!(\"door #\", door+1, \" is \", (if A[door] then \"open\" else \"closed\"): string, \".\");<br/>      loop3(door+1)<br/>    ) (* end of [then] *)<br/>  // end of [if]<br/>//<br/>in<br/>  loop(0); loop3 (0)<br/>end // end of [main0]<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 27, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/>  Door<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"closed\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">{</span><br/>  x <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> y <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>  <span class=\"kw1\">While</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    CurrentDoor <span class=\"sy0\">:=</span> Door<span class=\"re0\">%x%</span><br/>    <span class=\"kw1\">If</span> CurrentDoor contains closed<br/>    <span class=\"br0\">{</span><br/>      Door<span class=\"re0\">%x%</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"open\"</span><br/>      x <span class=\"sy0\">+=</span> y<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> CurrentDoor contains open<br/>    <span class=\"br0\">{</span><br/>      Door<span class=\"re0\">%x%</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"closed\"</span><br/>      x <span class=\"sy0\">+=</span> y<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">{</span><br/>   CurrentDoor <span class=\"sy0\">:=</span> Door<span class=\"re0\">%A_Index%</span><br/>   <span class=\"kw1\">If</span> CurrentDoor contains open<br/>      Res <span class=\"sy0\">.=</span> <span class=\"st0\">\"Door \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\" is open`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Res</pre>"}, {"lang": "AutoIt", "loc": 19, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;array.au3&gt;</span><br/><span class=\"re0\">$doors</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"co0\">;door array, 0 = closed, 1 = open</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$door</span><span class=\"br0\">[</span><span class=\"re0\">$doors</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$ii</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$doors</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ii</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$doors</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"re0\">$ii</span><br/>\t\t<span class=\"re0\">$door</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <span class=\"re0\">$door</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">next</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><span class=\"co0\">;display to screen</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$doors</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Number.htm\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span><span class=\"re0\">$door</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Mod.htm\"><span class=\"kw3\">Mod</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0</pre>"}, {"lang": "Axiom", "loc": 7, "block": "<pre class=\"text highlighted_source\">(open,closed,change,open?)\u00a0:= (true,false,not,test);<br/>doors\u00a0:= bits(100,closed);<br/>for i in 1..#doors repeat<br/>  for j in i..#doors by i repeat<br/>    doors.j\u00a0:= change doors.j<br/>[i for i in 1..#doors | open? doors.i]<br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">100</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">0</span> <span class=\"co1\"># close the doors</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">100</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j=i; j <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">100</span>; j <span class=\"sy3\">+</span>= i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"br0\">(</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">%</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">100</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> i, doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"close\"</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> 100\u00a0:<br/> 110  REM  100 DOORS PROBLEM<br/> 120\u00a0:<br/> 130  DIM D(100)<br/> 140  FOR P = 1 TO 100<br/> 150  FOR T = P TO 100 STEP P<br/> 160  D(T) =  NOT D(T): NEXT T<br/> 170  NEXT P<br/> 180  FOR I = 1 TO 100<br/> 190  IF D(I) THEN  PRINT I;\" \";<br/> 200  NEXT I<br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 15, "block": "<pre class=\"qbasic highlighted_source\">\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckoption.shtml\"><span class=\"kw3\">OPTION</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckbase.shtml\"><span class=\"kw3\">BASE</span></a> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> doors<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> size <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">FOR</span> pass <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">STEP</span> size<br/>\tdoors<span class=\"br0\">[</span>pass<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a><span class=\"br0\">(</span>doors<span class=\"br0\">[</span>pass<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> which <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">IF</span> doors<span class=\"br0\">[</span>which<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> which<br/><span class=\"kw1\">NEXT</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 12, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enableDelayedExpansion<br/><span class=\"co2\">:: 0 = closed</span><br/><span class=\"co2\">:: 1 = open</span><br/><span class=\"co2\">:: SET /A treats undefined variable as 0</span><br/><span class=\"co2\">:: Negation operator\u00a0! must be escaped because delayed expansion is enabled</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">p</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1 1 100<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">d</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%%</span><span class=\"re3\">p</span> <span class=\"sy0\">%%</span><span class=\"re3\">p</span> 100<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"door<span class=\"sy0\">%%</span><span class=\"re3\">d</span>=<span class=\"co3\">^!</span>door<span class=\"sy0\">%%</span><span class=\"re3\">d</span>\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">d</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1 1 100<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">door%%<span class=\"re3\">d</span></span><span class=\"sy0\">!</span>==1 <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> door <span class=\"sy0\">%%</span><span class=\"re3\">d</span> is open<br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> door <span class=\"sy0\">%%</span><span class=\"re3\">d</span> is closed<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      DIM doors%(100)<br/>\u00a0<br/>      FOR pass% = 1 TO 100<br/>        FOR door% = pass% TO 100 STEP pass%<br/>          doors%(door%) = NOT doors%(door%)<br/>        NEXT door%<br/>      NEXT pass%<br/>\u00a0<br/>      FOR door% = 1 TO 100<br/>        IF doors%(door%) PRINT \"Door \"\u00a0; door% \" is open\"<br/>      NEXT door%</pre>"}, {"lang": "bc", "loc": 12, "block": "<pre class=\"text highlighted_source\">/* 0 means door is closed, 1 means door is open */<br/>for (i = 0; i &lt; 100; i++) {<br/>    for (j = i; j &lt; 100; j += (i + 1)) {<br/>        d[j] = 1 - d[j]     /* Toggle door */<br/>    }<br/>}<br/>\u00a0<br/>\"Open doors:<br/>\"<br/>for (i = 0; i &lt; 100; i++) {<br/>    if (d[i] == 1) (i + 1)<br/>}</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;\"d\"&gt;:00p1-:&gt;:::9%\\9/9+g2%!\\:9v<br/>$.v_^#!$::$_^#`\"c\":+g00p+9/9\\%&lt;<br/>::&lt;<a class=\"__cf_email__\" data-cfemail=\"f3acb3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#`$:\\*:+55:+1p27g1g+9/9\\%9<br/>\u00a0</pre>"}, {"lang": "BlitzMax", "loc": 10, "block": "<pre class=\"text highlighted_source\">Graphics 640,480<br/>i=1<br/>While ((i*i)&lt;=100)<br/>\ta$=i*i<br/>\tDrawText a$,10,20*i<br/>\tPrint i*i<br/>\ti=i+1 <br/>Wend<br/>Flip <br/>WaitKey </pre>"}, {"lang": "Bracmat", "loc": 26, "block": "<pre class=\"text highlighted_source\">( 100doors-tbl<br/>=   door step<br/>  .   tbl$(doors.101) { Create an array. Indexing is 0-based. Add one extra for addressing element nr. 100 }<br/>    &amp; 0:?step<br/>    &amp;   whl<br/>      ' ( 1+!step:~&gt;100:?step   { ~&gt; means 'not greater than', i.e. 'less than or equal' }<br/>        &amp; 0:?door<br/>        &amp;   whl<br/>          ' (\u00a0!step+!door:~&gt;100:?door<br/>            &amp; 1+-1*!(!door$doors):?doors  { &lt;number&gt;$&lt;variable&gt; sets the current index, which stays the same until explicitly changed. }<br/>            )<br/>        )<br/>    &amp; 0:?door<br/>    &amp;   whl<br/>      ' ( 1+!door:~&gt;100:?door<br/>        &amp;   out<br/>          $ ( door<br/>             \u00a0!door<br/>              is<br/>              (\u00a0!(!door$doors):1&amp;open<br/>              | closed<br/>              )<br/>            )<br/>        )<br/>    &amp; tbl$(doors.0)  { clean up the array }<br/>)</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 10ro2?^<br/>{1 4 9 16 25 36 49 64 81 100}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> is_open<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> pass<span class=\"sy0\">,</span> door<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* do the 100 passes */</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>pass <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> pass <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>pass<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>door <span class=\"sy0\">=</span> pass<span class=\"sy0\">;</span> door <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> door <span class=\"sy0\">+=</span> pass<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* output the result */</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>door <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> door <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>door<span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"door #%d is\u00a0%s.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> door<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span><span class=\"sy0\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">bool</span> is_open<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"kw2\">false</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// do the 100 passes</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> pass <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> pass <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>pass<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> door <span class=\"sy1\">=</span> pass<span class=\"sy4\">;</span> door <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span> door <span class=\"sy2\">+</span><span class=\"sy1\">=</span> pass<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy3\">!</span>is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// output the result</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> door <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> door <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>door<span class=\"br0\">)</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"door #\"</span> <span class=\"sy1\">&lt;&lt;</span> door<span class=\"sy2\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span><span class=\"sy4\">?</span> <span class=\"st0\">\" is open.\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\" is closed.\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 42, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> ConsoleApplication1<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> doors <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">//Close all doors to start.</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">//For each pass...</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"co1\">//number of passes</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">//For each door to toggle...</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"co1\">//door number</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>d <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">//Output the results.</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Passes Completed!!!  Here are the results: <span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"Door #{0}: Open\"</span>, d <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"Door #{0}: Closed\"</span>, d <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 23, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>    print(\"Open doors (naive):     ``naive()``<br/>           Open doors (optimized): ``optimized()``\");<br/>\u00a0<br/>}<br/>\u00a0<br/>shared {Integer*} naive(Integer count = 100) {<br/>    variable value doors = [ for (_ in 1..count) closed ];<br/>    for (step in 1..count) {<br/>        doors = [for (i-&gt;door in doors.indexed) let (index = i+1) if (step == 1 || step.divides(index)) then door.toggle() else door ];<br/>    }<br/>    return doors.indexesWhere((door) =&gt; door == opened).map(1.plusInteger);<br/>}<br/>\u00a0<br/>shared {Integer*} optimized(Integer count = 100) =&gt;<br/>        { for (i in 1..count) i*i }.takeWhile(count.notSmallerThan);<br/>\u00a0<br/>\u00a0<br/>shared abstract class Door(shared actual String string) of opened | closed {<br/>    shared formal Door toggle();<br/>}<br/>object opened extends Door(\"opened\") { toggle() =&gt; closed; }<br/>object closed extends Door(\"closed\") { toggle() =&gt; opened; }</pre>"}, {"lang": "C1R", "loc": 1, "block": "<pre class=\"c highlighted_source\"><span class=\"nu0\">100</span>_doors</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> for i=1:1:100 {<br/>\t set doors(i) = 0<br/> }<br/> for i=1:1:100 {<br/>\t for door=i:i:100 {<br/>\t\t  Set doors(door)='doors(door)<br/>\t }<br/> }<br/> for i = 1:1:100<br/> {<br/>\tif doors(i)=1 write i_\": open\",!<br/> }<br/>\u00a0</pre>"}, {"lang": "Clarion", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    program<br/>\u00a0<br/>    map<br/>    end<br/>\u00a0<br/>MAX_DOOR_NUMBER         equate(100)<br/>CRLF                    equate('&lt;13,10&gt;')<br/>\u00a0<br/>Doors                   byte,dim(MAX_DOOR_NUMBER)<br/>Pass                    byte<br/>DoorNumber              byte<br/>DisplayString           cstring(2000)<br/>\u00a0<br/>ResultWindow            window('Result'),at(,,133,291),center,double,auto<br/>                            prompt('Door states:'),at(8,4),use(?PromptTitle)<br/>                            text,at(8,16,116,266),use(DisplayString),boxed,vscroll,font('Courier New',,,,CHARSET:ANSI),readonly<br/>                        end<br/>\u00a0<br/>    code<br/>\u00a0<br/>    Doors\u00a0:=: false<br/>    loop Pass = 1 to MAX_DOOR_NUMBER<br/>        loop DoorNumber = Pass to MAX_DOOR_NUMBER by Pass<br/>            Doors[DoorNumber] = choose(Doors[DoorNumber], false, true)<br/>        end<br/>    end<br/>\u00a0<br/>    clear(DisplayString)<br/>    loop DoorNumber = 1 to MAX_DOOR_NUMBER<br/>        DisplayString = DisplayString &amp; format(DoorNumber, @n3) &amp; ' is ' &amp; choose(Doors[DoorNumber], 'opened', 'closed') &amp; CRLF<br/>    end<br/>    open(ResultWindow)<br/>    accept<br/>    end<br/>    close(ResultWindow)<br/>\u00a0<br/>    return<br/>\u00a0</pre>"}, {"lang": "CLIPS", "loc": 64, "block": "<pre class=\"text highlighted_source\">(deffacts initial-state<br/>  (door-count 100)<br/>)<br/>\u00a0<br/>(deffunction toggle<br/>  (?state)<br/>  (switch\u00a0?state<br/>    (case \"open\" then \"closed\")<br/>    (case \"closed\" then \"open\")<br/>  )<br/>)<br/>\u00a0<br/>(defrule create-doors-and-visits<br/>  (door-count\u00a0?count)<br/>  =&gt;<br/>  (loop-for-count (?num 1\u00a0?count) do<br/>    (assert (door\u00a0?num \"closed\"))<br/>    (assert (visit-from\u00a0?num\u00a0?num))<br/>  )<br/>  (assert (doors initialized))<br/>)<br/>\u00a0<br/>(defrule visit<br/>  (door-count\u00a0?max)<br/> \u00a0?visit &lt;- (visit-from\u00a0?num\u00a0?step)<br/> \u00a0?door &lt;- (door\u00a0?num\u00a0?state)<br/>  =&gt;<br/>  (retract\u00a0?visit)<br/>  (retract\u00a0?door)<br/>  (assert (door\u00a0?num (toggle\u00a0?state)))<br/>  (if<br/>    (&lt;= (+\u00a0?num\u00a0?step)\u00a0?max)<br/>    then<br/>    (assert (visit-from (+\u00a0?num\u00a0?step)\u00a0?step))<br/>  )<br/>)<br/>\u00a0<br/>(defrule start-printing<br/>  (doors initialized)<br/>  (not (visit-from\u00a0?\u00a0?))<br/>  =&gt;<br/>  (printout t \"These doors are open:\" crlf)<br/>  (assert (print-from 1))<br/>)<br/>\u00a0<br/>(defrule print-door<br/>  (door-count\u00a0?max)<br/> \u00a0?pf &lt;- (print-from\u00a0?num)<br/>  (door\u00a0?num\u00a0?state)<br/>  =&gt;<br/>  (retract\u00a0?pf)<br/>  (if<br/>    (= 0 (str-compare \"open\"\u00a0?state))<br/>    then<br/>    (printout t\u00a0?num \" \")<br/>  )<br/>  (if<br/>    (&lt;\u00a0?num\u00a0?max)<br/>    then<br/>    (assert (print-from (+\u00a0?num 1)))<br/>    else<br/>    (printout t crlf \"All other doors are closed.\" crlf)<br/>  )<br/>)</pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> doors <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>doors <span class=\"br0\">(</span><span class=\"kw1\">into-array</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"nu0\">100</span> false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>pass   <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">101</span><span class=\"br0\">)</span> <br/>            i      <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> pass<span class=\"br0\">)</span> <span class=\"nu0\">100</span> pass<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">aset</span> doors i <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> doors i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    doors<span class=\"br0\">)</span><span class=\"br0\">)</span>   <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> open<span class=\"sy0\">-</span>doors <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>d n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> <span class=\"br0\">(</span>doors<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"kw1\">inc</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:<span class=\"kw1\">when</span> d<span class=\"br0\">]</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> print<span class=\"sy0\">-</span>open<span class=\"sy0\">-</span>doors <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <br/>    <span class=\"st0\">\"Open doors after 100 passes:\"</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span>open<span class=\"sy0\">-</span>doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 33, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> 100Doors<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> Current-n      <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> StepSize       <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> DoorTable<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">02</span> Doors       <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">100</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">88</span> ClosedDoor          <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> Idx            <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       Begin<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">INITIALIZE</span> DoorTable<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> StepSize <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> StepSize &gt; <span class=\"nu0\">100</span><br/>             <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> Current-n <span class=\"kw3\">FROM</span> StepSize <span class=\"kw3\">BY</span> StepSize<br/>                     <span class=\"kw2\">UNTIL</span> Current-n &gt; <span class=\"nu0\">100</span><br/>               <span class=\"kw3\">SUBTRACT</span> Doors <span class=\"br0\">(</span>Current-n<span class=\"br0\">)</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw2\">GIVING</span> Doors <span class=\"br0\">(</span>Current-n<span class=\"br0\">)</span><br/>             END-<span class=\"kw2\">PERFORM</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> Idx <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> Idx &gt; <span class=\"nu0\">100</span><br/>             <span class=\"kw1\">IF</span> ClosedDoor <span class=\"br0\">(</span>Idx<span class=\"br0\">)</span><br/>               <span class=\"kw2\">DISPLAY</span> Idx <span class=\"st0\">\" is closed.\"</span><br/>             <span class=\"kw3\">ELSE</span><br/>               <span class=\"kw2\">DISPLAY</span> Idx <span class=\"st0\">\" is open.\"</span><br/>             END-<span class=\"kw1\">IF</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Coco", "loc": 8, "block": "<pre class=\"text highlighted_source\">doors = [false] * 100<br/>\u00a0<br/>for pass til doors.length<br/>    for i from pass til doors.length by pass + 1<br/>       \u00a0! = doors[i]<br/>\u00a0<br/>for i til doors.length<br/>    console.log 'Door\u00a0%d is\u00a0%s.', i + 1, if doors[i] then 'open' else 'closed'</pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">doors = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> pass <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span>pass..<span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">by</span> pass<br/>    doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Doors #{index for index, open of doors when open} are open\"</span><br/>\u00a0<br/><span class=\"co1\"># matrix output</span><br/>console.<span class=\"me1\">log</span> doors.<span class=\"me1\">map</span> <span class=\"br0\">(</span>open<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">+</span>open<br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\tdoorCount = 1;<br/>\tdoorList = \"\";<br/>\t// create all doors and set all doors to open<br/>\twhile (doorCount LTE 100) {<br/>\t\tdoorList = ListAppend(doorList,\"1\");<br/>\t\tdoorCount = doorCount + 1;<br/>\t}<br/>\tloopCount = 2;<br/>\tdoorListLen = ListLen(doorList);<br/>\twhile (loopCount LTE 100) {<br/>\t\tloopDoorListCount = 1;<br/>\t\twhile (loopDoorListCount LTE 100) {<br/>\t\t\ttestDoor = loopDoorListCount / loopCount;<br/>\t\t\tif (testDoor EQ Int(testDoor)) {<br/>\t\t\t\tcheckOpen = ListGetAt(doorList,loopDoorListCount);<br/>\t\t\t\tif (checkOpen EQ 1) {<br/>\t\t\t\t\tdoorList = ListSetAt(doorList,loopDoorListCount,\"0\");<br/>\t\t\t\t} else {<br/>\t\t\t\t\tdoorList = ListSetAt(doorList,loopDoorListCount,\"1\");<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t\tloopDoorListCount = loopDoorListCount + 1;<br/>\t\t}<br/>\t\tloopCount = loopCount + 1;<br/>\t}<br/>\u00a0</pre>"}, {"lang": "Commodore BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>10 D=100: DIMD(D): P=1<br/>20 PRINT CHR$(147);\"PASS: \";P<br/>22 FOR I=P TO D STEP P: D(I)=NOTD(I): NEXT<br/>30 IF P=100 THEN 40<br/>32 P=P+1: GOTO20<br/>40 PRINT: PRINT\"THE FOLLOWING DOORS ARE OPEN: \"<br/>42 FOR I=1 TO D: IF D(I)=-1 THEN PRINTI;<br/>44 NEXT<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> visit-door <span class=\"br0\">(</span>doors doornum value1 value2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"visits a door, swapping the value1 to value2 or vice-versa\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>d <span class=\"br0\">(</span>copy-<span class=\"kw1\">list</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>n <span class=\"br0\">(</span>- doornum <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span>  <span class=\"br0\">(</span><span class=\"kw1\">nth</span> n d<span class=\"br0\">)</span> value1<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> n d<span class=\"br0\">)</span> value2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> n d<span class=\"br0\">)</span> value1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> visit-every <span class=\"br0\">(</span>doors num iter value1 value2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"visits every 'num' door in the list\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>* iter num<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      doors<br/>    <span class=\"br0\">(</span>visit-every <span class=\"br0\">(</span>visit-door doors <span class=\"br0\">(</span>* num iter<span class=\"br0\">)</span> value1 value2<span class=\"br0\">)</span><br/>                 num<br/>                 <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> iter<span class=\"br0\">)</span><br/>                 value1<br/>                 value2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> do-all-visits <span class=\"br0\">(</span>doors cnt value1 value2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Visits all doors changing the values accordingly\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> cnt <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      doors<br/>    <span class=\"br0\">(</span>do-all-visits <span class=\"br0\">(</span>visit-every doors cnt <span class=\"nu0\">1</span> value1 value2<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>- cnt <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   value1<br/>                   value2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-doors <span class=\"br0\">(</span>doors<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Pretty prints the doors list\"</span><br/>  <span class=\"br0\">(</span>format T <span class=\"st0\">\"~{~A ~A ~A ~A ~A ~A ~A ~A ~A ~A~%~}~%\"</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> start <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>size <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Start the program\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>open <span class=\"st0\">\"_\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>shut <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>doors <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> size <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> shut<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>print-doors <span class=\"br0\">(</span>do-all-visits doors size open shut<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 29, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Doors100;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tclosed<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">101</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"coMULTI\">(* initilization of close to true *)</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>closed<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> closed<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"coMULTI\">(* process *)</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>closed<span class=\"br0\">)</span>  <span class=\"kw1\">DO</span>;<br/>\t\tj <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> j &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>closed<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> j <span class=\"kw1\">MOD</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> closed<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">~</span>closed<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">END</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"coMULTI\">(* print results *)</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\t<span class=\"kw1\">WHILE</span>  i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>closed<span class=\"br0\">)</span>  <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">Ln</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">IF</span> closed<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"C \"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"O \"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <br/>\t<span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> Doors100.<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Coq", "loc": 26, "block": "<pre class=\"text highlighted_source\">Require Import List.<br/>\u00a0<br/>Fixpoint rep {A} (a\u00a0: A) n\u00a0:=<br/>  match n with<br/>    | O =&gt; nil<br/>    | S n' =&gt; a::(rep a n')<br/>  end.<br/>\u00a0<br/>Fixpoint flip (l\u00a0: list bool) (n k\u00a0: nat)\u00a0: list bool\u00a0:=<br/>  match l with<br/>    | nil =&gt; nil<br/>    | cons h t =&gt; match k with<br/>                | O =&gt; (negb h)\u00a0:: (flip t n n)<br/>                | S k' =&gt; h\u00a0:: (flip t n k')<br/>              end<br/>  end.<br/>\u00a0<br/>Definition flipeach l n\u00a0:= flip l n n.<br/>\u00a0<br/>Fixpoint flipwhile l n\u00a0:=<br/>  match n with<br/>    | O =&gt; flipeach l 0<br/>    | S n' =&gt; flipwhile (flipeach l (S n')) n'<br/>  end.<br/>\u00a0<br/>Definition prison cells\u00a0:= flipwhile (rep false cells) cells.</pre>"}, {"lang": "Crystal", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">doors = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  i.<span class=\"me1\">step</span><span class=\"br0\">(</span>by: i, limit: <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>    doors<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> =\u00a0!doors<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>doors.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"kw3\">open</span>, i<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Door #{i + 1} is #{open\u00a0? \"</span><span class=\"kw3\">open</span><span class=\"st0\">\"\u00a0: \"</span>closed<span class=\"st0\">\"}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> DoorState <span class=\"sy0\">:</span> <span class=\"kw4\">bool</span> <span class=\"br0\">{</span> closed<span class=\"sy0\">,</span> open <span class=\"br0\">}</span><br/><span class=\"kw2\">alias</span> Doors <span class=\"sy0\">=</span> DoorState<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Doors flipUnoptimized<span class=\"br0\">(</span>Doors doors<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    doors<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> DoorState.<span class=\"me1\">closed</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">doors</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> doors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> DoorState.<span class=\"me1\">open</span><span class=\"br0\">)</span><br/>                doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> DoorState.<span class=\"me1\">closed</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> DoorState.<span class=\"me1\">open</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> doors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Doors flipOptimized<span class=\"br0\">(</span>Doors doors<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    doors<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> DoorState.<span class=\"me1\">closed</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> doors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        doors<span class=\"br0\">[</span>i <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> DoorState.<span class=\"me1\">open</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> doors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> doors <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Doors<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> open<span class=\"sy0\">;</span> <span class=\"br0\">[</span>doors.<span class=\"me1\">dup</span>.<span class=\"me1\">flipUnoptimized</span><span class=\"sy0\">,</span><br/>                          doors.<span class=\"me1\">dup</span>.<span class=\"me1\">flipOptimized</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> open.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> open<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dafny", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>datatype Door = Closed | Open<br/>\u00a0<br/>method InitializeDoors(n:int) returns (doors:array&lt;Door&gt;)<br/>  // Precondition: n must be a valid array size.<br/>  requires n &gt;= 0<br/>  // Postcondition: doors is an array, which is not an alias for any other<br/>  // object, with a length of n, all of whose elements are Closed. The \"fresh\"<br/>  // (non-alias) condition is needed to allow doors to be modified by the<br/>  // remaining code.<br/>  ensures doors\u00a0!= null &amp;&amp; fresh(doors) &amp;&amp; doors.Length == n<br/>  ensures forall j\u00a0:: 0 &lt;= j &lt; doors.Length ==&gt; doors[j] == Closed;<br/>{<br/>  doors\u00a0:= new Door[n];<br/>  var i\u00a0:= 0;<br/>  // Invariant: i is always a valid index inside the loop, and all doors less<br/>  // than i are Closed. These invariants are needed to ensure the second<br/>  // postcondition.<br/>  while i &lt; doors.Length<br/>    invariant i &lt;= doors.Length<br/>    invariant forall j\u00a0:: 0 &lt;= j &lt; i ==&gt; doors[j] == Closed;<br/>  {<br/>    doors[i]\u00a0:= Closed;<br/>    i\u00a0:= i + 1;<br/>  }<br/>}<br/>\u00a0<br/>method Main ()<br/>{<br/>  var doors\u00a0:= InitializeDoors(100);<br/>\u00a0<br/>  var pass\u00a0:= 1;<br/>  while pass &lt;= doors.Length<br/>  {<br/>    var door\u00a0:= pass;<br/>    while door &lt; doors.Length<br/>    {<br/>      doors[door]\u00a0:= if doors[door] == Closed then Open else Closed;<br/>      door\u00a0:= door + pass;<br/>    }<br/>    pass\u00a0:= pass + 1;<br/>  }<br/>  var i\u00a0:= 0;<br/>  while i &lt; doors.Length<br/>  {<br/>    print i, \" is \", if doors[i] == Closed then \"closed\\n\" else \"open\\n\";<br/>    i\u00a0:= i + 1;<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Dart", "loc": 7, "block": "<pre class=\"text highlighted_source\">main() {<br/>    for (var k = 1, x = new List(101); k &lt;= 100; k++) {<br/>        for (int i = k; i &lt;= 100; i += k)<br/>            x[i] =\u00a0!x[i];<br/>        if (x[k]) print(\"$k open\");<br/>    }<br/>}</pre>"}, {"lang": "DCL", "loc": 18, "block": "<pre class=\"dcl highlighted_source\">\u00a0<br/><span class=\"co0\">$! doors.com</span><br/><span class=\"co0\">$! Excecute by running @doors at prompt.</span><br/>$ square <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ incr <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>$ count2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ LOOP2:<br/>$       count2 <span class=\"sy0\">=</span> count2 + <span class=\"nu0\">1</span><br/>$       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>d <span class=\"sy0\">.NE.</span> square<span class=\"br0\">)</span><br/>$               <span class=\"kw1\">THEN</span> <span class=\"kw1\">WRITE</span> <span class=\"kw3\">SYS$OUTPUT</span> <span class=\"st0\">\"door <span class=\"es1\">''d'</span> is closed\"</span><br/>$       <span class=\"kw1\">ELSE</span> <span class=\"kw1\">WRITE</span> <span class=\"kw3\">SYS$OUTPUT</span> <span class=\"st0\">\"door <span class=\"es1\">''d'</span> is open\"</span><br/>$               square <span class=\"sy0\">=</span> incr + square<br/>$               incr <span class=\"sy0\">=</span> incr + <span class=\"nu0\">2</span><br/>$       <span class=\"kw1\">ENDIF</span><br/>$       d <span class=\"sy0\">=</span> d + <span class=\"nu0\">1</span><br/>$       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>count2 <span class=\"sy0\">.LT.</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOTO</span> LOOP2<br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 12, "block": "<pre class=\"text highlighted_source\">local\u00a0:open-doors [ rep 101 false ]<br/>\u00a0<br/>for i range 1 100:<br/>\tlocal\u00a0:j i<br/>\twhile &lt;= j 100:<br/>\t\tset-to open-doors j not open-doors! j<br/>\t\tset\u00a0:j + j i<br/>\u00a0<br/>!print\\ \"Open doors: \"<br/>for i range 1 100:<br/>\tif open-doors! i:<br/>\t\t!print\\( to-str i \" \" )</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 12, "block": "<pre class=\"text highlighted_source\">local\u00a0:open-doors [ rep 101 false ]<br/>\u00a0<br/>for i range 1 100:<br/>\tlocal\u00a0:j i<br/>\twhile &lt;= j 100:<br/>\t\tset-to open-doors j not open-doors! j<br/>\t\tset\u00a0:j + j i<br/>\u00a0<br/>!print\\ \"Open doors: \"<br/>for i range 1 100:<br/>\tif open-doors! i:<br/>\t\t!print\\( to-str i \" \" )</pre>"}, {"lang": "DUP", "loc": 5, "block": "<pre class=\"text highlighted_source\">100[$][0^:1-]#                                                  {initialize doors}<br/>%<br/>[s;[$101&lt;][$$;~\\:s;+]#%]d:                                     {function d, switch door state function}<br/>1s:[s;101&lt;][d;!s;1+s:]#                                        {increment step width from 1 to 100, execute function d each time}<br/>1[$101&lt;][$$.' ,;['o,'p,'e,'n,10,]['c,'l,'o,'s,'e,'d,10,]?1+]#  {loop through doors, print door number and state}</pre>"}, {"lang": "DWScript", "loc": 11, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> doors <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i<span class=\"sy1\">,</span> j <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"kw1\">mod</span> i<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">not</span> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span>F<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">if</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">'Door '</span><span class=\"sy3\">+</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"st0\">' is open'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Dylan", "loc": 13, "block": "<pre class=\"text highlighted_source\">define method doors()<br/>  let doors = make(&lt;array&gt;, fill: #f, size: 100);<br/>  for (x from 0 below 100)<br/>    for (y from x below 100 by x + 1)<br/>      doors[y]\u00a0:= ~doors[y]<br/>    end<br/>  end;<br/>  for (x from 1 to 100) <br/>    if (doors[x - 1]) <br/>      format-out(\"door\u00a0%d open\\n\", x)<br/>    end<br/>  end<br/>end</pre>"}, {"lang": "E", "loc": 45, "block": "<pre class=\"e highlighted_source\"><span class=\"co1\">#!/usr/bin/env rune</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> toggles <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> gets <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Set up GUI (and data model)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> frame <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>swing<span class=\"sy0\">:</span>makeJFrame<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"100 doors\"</span><span class=\"br0\">)</span><br/>frame.<span class=\"me1\">getContentPane</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setLayout</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>awt<span class=\"sy0\">:</span>makeGridLayout<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> component <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>javax.<span class=\"me1\">swing</span>.<span class=\"me1\">makeJCheckBox</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  toggles with<span class=\"sy0\">=</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span> component.<span class=\"me1\">setSelected</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>component.<span class=\"me1\">isSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  gets with<span class=\"sy0\">=</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span> component.<span class=\"me1\">isSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  frame.<span class=\"me1\">getContentPane</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>component<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Set up termination condition</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> done<br/>frame.<span class=\"me1\">addWindowListener</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> _ <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> windowClosing<span class=\"br0\">(</span>event<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/bind\"><span class=\"kw4\">bind</span></a> done <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Open and close doors</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> loop<span class=\"br0\">(</span>step<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  toggles<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> next <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> step<br/>  <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">whenPast</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>next <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>step <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Done.</span><br/>      <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        loop <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span>step <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> step<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>      loop <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span>step<span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> step<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>    <br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>loop<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>frame.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>frame.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">waitAtTop</span><span class=\"br0\">(</span>done<span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">; initial state = closed = #f</span><br/><span class=\"br0\">(</span>define doors <span class=\"br0\">(</span>make-vector <span class=\"nu0\">101</span> #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; run pass 100 to 1</span><br/><span class=\"br0\">(</span>for* <br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span>pass <span class=\"br0\">(</span>in-range <span class=\"nu0\">100</span> <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   <span class=\"br0\">(</span>door <span class=\"br0\">(</span>in-range <span class=\"nu0\">0</span> <span class=\"nu0\">101</span> pass<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <br/>        <span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> doors door <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>vector-ref doors door<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span><span class=\"sy0\">=</span> pass <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>writeln door <span class=\"st0\">\"is open\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"nu0\">1</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">4</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">9</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">16</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">25</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">36</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">49</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">64</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">81</span>     <span class=\"st0\">\"is open\"</span>    <br/><span class=\"nu0\">100</span>     <span class=\"st0\">\"is open\"</span>    <br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Doors\u00a0:= RECORD<br/> UNSIGNED1 DoorNumber;<br/> STRING6   State;<br/>END;<br/>\u00a0<br/>AllDoors\u00a0:= DATASET([{0,0}],Doors);<br/>\u00a0<br/>Doors  OpenThem(AllDoors L,INTEGER Cnt)\u00a0:= TRANSFORM<br/> SELF.DoorNumber\u00a0:= Cnt;<br/> SELF.State     \u00a0:= IF((CNT * 10)\u00a0% (SQRT(CNT)*10)&lt;&gt;0,'Closed','Opened');<br/>END;<br/>\u00a0<br/>OpenDoors\u00a0:= NORMALIZE(AllDoors,100,OpenThem(LEFT,COUNTER));<br/>\u00a0<br/>OpenDoors;<br/>\u00a0</pre>"}, {"lang": "Eero", "loc": 18, "block": "<pre class=\"objc highlighted_source\">\u00a0<br/><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  square <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>, increment <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"kw4\">int</span> door <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">100</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"door #%d\"</span>, door<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> door <span class=\"sy0\">==</span> square<br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\" is open.\"</span><span class=\"br0\">)</span><br/>      square <span class=\"sy0\">+=</span> increment<br/>      increment <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">else</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\" is closed.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Egel", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import \"prelude.eg\"<br/>\u00a0<br/>using System<br/>using List<br/>\u00a0<br/>data open, closed<br/>\u00a0<br/>def toggle =<br/>    [ open N -&gt; closed N | closed N -&gt; open N ]<br/>\u00a0<br/>def doors =<br/>    [ N -&gt; map [ N -&gt; closed N ] (fromto 1 N) ]<br/>\u00a0<br/>def toggleK =<br/>    [ K nil              -&gt; nil<br/>    | K (cons (D N) DD)  -&gt; <br/>         let DOOR = if (N%K) == 0 then toggle (D N) else D N in<br/>             cons DOOR (toggleK K DD) ]<br/>\u00a0<br/>def toggleEvery =<br/>    [ nil DOORS -&gt; DOORS<br/>    | (cons K KK) DOORS -&gt; toggleEvery KK (toggleK K DOORS) ]<br/>\u00a0<br/>def run =<br/>    [ N -&gt; toggleEvery (fromto 1 N) (doors N) ]<br/>\u00a0<br/>def main = run 100<br/>\u00a0</pre>"}, {"lang": "EGL", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>program OneHundredDoors<br/>\u00a0<br/>   function main()<br/>\u00a0<br/>      doors boolean[] = new boolean[100];<br/>      n int = 100;<br/>\u00a0<br/>      for (i int from 1 to n)<br/>         for (j int from i to n by i)<br/>            doors[j] =\u00a0!doors[j];<br/>         end<br/>      end<br/>\u00a0<br/>      for (i int from 1 to n)<br/>         if (doors[i])<br/>            SysLib.writeStdout( \"Door \" + i + \" is open\" );<br/>         end<br/>      end<br/>\u00a0<br/>   end<br/>\u00a0<br/>end<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 92, "block": "<pre class=\"eiffel highlighted_source\">note<br/>\tdescription<span class=\"sy0\">:</span> <span class=\"st0\">\"100 Doors problem\"</span><br/>\tdate<span class=\"sy0\">:</span> <span class=\"st0\">\"08-JUL-2015\"</span><br/>\trevision<span class=\"sy0\">:</span> <span class=\"st0\">\"1.1\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Main application routine.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tinitialize_closed_doors<br/>\t\t\ttoggle_doors<br/>\t\t\toutput_door_states<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tdoors<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arrayed_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAYED_LIST</span></a> <span class=\"br0\">[</span>DOOR<span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- A set of doors (self-initialized to capacity of `max_door_count').</span><br/>\t\tattribute<br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span>max_door_count<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Basic Operations</span><br/>\u00a0<br/>\tinitialize_closed_doors<br/>\t\t\t<span class=\"co1\">-- Initialize all `doors'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross min_door_count <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> max_door_count <span class=\"kw2\">as</span> ic_address_list <span class=\"kw2\">loop</span><br/>\t\t\t\tdoors.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>DOOR<span class=\"br0\">}</span>.<span class=\"me1\">make_closed</span> <span class=\"br0\">(</span>ic_address_list.<span class=\"me1\">item</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\thas_all_closed_doors<span class=\"sy0\">:</span> across doors <span class=\"kw2\">as</span> ic_doors_list <span class=\"kw5\">all</span> <span class=\"kw2\">not</span> ic_doors_list.<span class=\"me1\">item</span>.<span class=\"me1\">is_open</span> <span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\ttoggle_doors<br/>\t\t\t<span class=\"co1\">-- Toggle all `doors'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross min_door_count <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> max_door_count <span class=\"kw2\">as</span> ic_addresses_list <span class=\"kw2\">loop</span><br/>\t\t\t\tacross doors <span class=\"kw2\">as</span> ic_doors_list <span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> is_door_to_toggle <span class=\"br0\">(</span>ic_doors_list.<span class=\"me1\">item</span>.<span class=\"me1\">address</span>, ic_addresses_list.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tic_doors_list.<span class=\"me1\">item</span>.<span class=\"me1\">toggle_door</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\toutput_door_states<br/>\t\t\t<span class=\"co1\">-- Output the state of all `doors'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tdoors.<span class=\"me1\">do_all</span> <span class=\"br0\">(</span><span class=\"kw2\">agent</span> door_state_out<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Status Report</span><br/>\u00a0<br/>\tis_door_to_toggle <span class=\"br0\">(</span>a_door_address, a_index_address<span class=\"sy0\">:</span> <span class=\"kw2\">like</span> <span class=\"br0\">{</span>DOOR<span class=\"br0\">}</span>.<span class=\"me1\">address</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is the door at `a_door_address' needing to be toggled, when compared to `a_index_address'?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> a_door_address \\\\ a_index_address <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tonly_modulus_zero<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a_door_address \\\\ a_index_address <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Outputs</span><br/>\u00a0<br/>\tdoor_state_out <span class=\"br0\">(</span>a_door<span class=\"sy0\">:</span> DOOR<span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Output the state of `a_door'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"Door \"</span> <span class=\"sy0\">+</span> a_door.<span class=\"me1\">address</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">if</span> a_door.<span class=\"me1\">is_open</span> <span class=\"kw2\">then</span><br/>\t\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"open.\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"closed.\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span>DOOR<span class=\"br0\">}</span> <span class=\"co1\">-- Constants</span><br/>\u00a0<br/>\tmin_door_count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"co1\">-- Minimum number of doors.</span><br/>\u00a0<br/>\tmax_door_count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\t\t\t<span class=\"co1\">-- Maximum number of doors.</span><br/>\u00a0<br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 11, "block": "<pre class=\"text highlighted_source\">open generic<br/>\u00a0<br/>type Door = Open | Closed<br/>  deriving Show<br/>\u00a0<br/>gate [] _ = []<br/>gate (x::xs) (y::ys) <br/>  | x == y = Open\u00a0:: gate xs ys<br/>  | else = Closed\u00a0:: gate xs ys<br/>\u00a0<br/>run n = gate [1..n] [&amp; k*k \\\\ k &lt;- [1..]]</pre>"}, {"lang": "Elena", "loc": 22, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>public program<br/>[<br/>    var Doors\u00a0:= Array new:100; populate(:n)( false ).<br/>\u00a0<br/>    0 till:100 do(:i)<br/>    [<br/>        i till:100 by(i + 1) do(:j)<br/>        [  <br/>            Doors[j]\u00a0:= Doors[j] not<br/>        ]<br/>    ].<br/>\u00a0<br/>    0 till:100 do(:i)<br/>    [<br/>        console printLine(\"Door #\",i + 1,\"\u00a0:\",Doors[i] iif(\"Open\",\"Closed\"))<br/>    ].<br/>\u00a0<br/>    console readChar.<br/>]</pre>"}, {"lang": "Elixir", "loc": 30, "block": "<pre class=\"text highlighted_source\">defmodule HundredDoors do<br/>  def doors(n \\\\ 100) do<br/>    List.duplicate(false, n)<br/>  end<br/>\u00a0<br/>  def toggle(doors, n) do<br/>    List.update_at(doors, n, &amp;(!&amp;1))<br/>  end<br/>\u00a0<br/>  def toggle_every(doors, n) do<br/>    Enum.reduce( Enum.take_every((n-1)..99, n), doors, fn(n, acc) -&gt; toggle(acc, n) end )<br/>  end<br/>end<br/>\u00a0<br/># unoptimized<br/>final_state = Enum.reduce(1..100, HundredDoors.doors, fn(n, acc) -&gt; HundredDoors.toggle_every(acc, n) end)<br/>\u00a0<br/>open_doors = Enum.with_index(final_state)<br/>             |&gt; Enum.filter_map(fn {door,_} -&gt; door end, fn {_,index} -&gt; index+1 end)<br/>\u00a0<br/>IO.puts \"All doors are closed except these: #{inspect open_doors}\"<br/>\u00a0<br/>\u00a0<br/># optimized <br/>final_state = Enum.reduce(1..10, HundredDoors.doors, fn(n, acc) -&gt; HundredDoors.toggle(acc, n*n-1) end)<br/>\u00a0<br/>open_doors = Enum.with_index(final_state)<br/>             |&gt; Enum.filter_map(fn {door,_} -&gt; door end, fn {_,index} -&gt; index+1 end)<br/>\u00a0<br/>IO.puts \"All doors are closed except these: #{inspect open_doors}\"</pre>"}, {"lang": "Elm", "loc": 18, "block": "<pre class=\"text highlighted_source\">-- Unoptimized<br/>import List exposing (indexedMap, foldl, repeat, range)<br/>import Html exposing (text)<br/>\u00a0<br/>type Door = Open | Closed<br/>\u00a0<br/>toggle d = if d == Open then Closed else Open<br/>\u00a0<br/>toggleEvery\u00a0: Int -&gt; List Door -&gt; List Door<br/>toggleEvery k doors = indexedMap <br/>  (\\i door -&gt; if i\u00a0% k == 0 then toggle door else door)<br/>  doors<br/>\u00a0<br/>n = 100<br/>\u00a0<br/>main = <br/>  text (toString (foldl toggleEvery (repeat n Closed) (range 1 n)))<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 83, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> create-doors <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Returns a list of closed doors<br/>\u00a0<br/>Each door only has two status: open or closed.<br/>If a door is closed it has the value 0, if it's open it has the value 1.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>return_value '<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"co1\">;; There is already a door in the return_value, so k starts at 1</span><br/>         <span class=\"co1\">;; otherwise we would need to compare k against 99 and not 100 in</span><br/>         <span class=\"co1\">;; the while loop</span><br/>         <span class=\"br0\">(</span>k <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> k <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> return_value <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> return_value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> k <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    return_value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> toggle-single-door <span class=\"br0\">(</span>doors<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Toggle the stat of the door at the `car' position of the DOORS list<br/>\u00a0<br/>DOORS is a list of integers with either the value 0 or 1 and it represents<br/>a row of doors.<br/>\u00a0<br/>Returns a list where the `car' of the list has it's value toggled (if open<br/>it becomes closed, if closed it becomes open).\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> doors<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> toggle-doors <span class=\"br0\">(</span>doors step original-step<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Step through all elements of the doors' list and toggle a door when step is 1<br/>\u00a0<br/>DOORS is a list of integers with either the value 0 or 1 and it represents<br/>a row of doors.<br/>STEP is the number of doors we still need to transverse before we arrive<br/>at a door that has to be toggled.<br/>ORIGINAL-STEP is the value of the argument step when this function is<br/>called for the first time.<br/>\u00a0<br/>Returns a list of doors\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> doors<span class=\"br0\">)</span><br/>          '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> step <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>toggle-single-door doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>toggle-doors <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> doors<span class=\"br0\">)</span> original-step original-step<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>t<br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> doors<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>toggle-doors <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> doors<span class=\"br0\">)</span> <span class=\"br0\">(</span>- step <span class=\"nu0\">1</span><span class=\"br0\">)</span> original-step<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main-program <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"The main loop for the program\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>doors_list <span class=\"br0\">(</span>create-doors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>k <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"co1\">;; We need to define max-specpdl-size and max-specpdl-size to big</span><br/>         <span class=\"co1\">;; numbers otherwise the loop reaches the max recursion depth and</span><br/>         <span class=\"co1\">;; throws an error.</span><br/>         <span class=\"co1\">;; If you want more information about these variables, press Ctrl</span><br/>         <span class=\"co1\">;; and h at the same time and then press v and then type the name</span><br/>         <span class=\"co1\">;; of the variable that you want to read the documentation.</span><br/>         <span class=\"br0\">(</span>max-specpdl-size <span class=\"nu0\">5000</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>max-lisp-eval-depth <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> k <span class=\"nu0\">101</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> doors_list <span class=\"br0\">(</span>toggle-doors doors_list k k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> k <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    doors_list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-doors <span class=\"br0\">(</span>doors<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"This function prints the values of the doors into the current buffer.<br/>\u00a0<br/>DOORS is a list of integers with either the value 0 or 1 and it represents<br/>a row of doors.<br/>\"</span><br/>  <span class=\"co1\">;; As in the main-program function, we need to set the variable</span><br/>  <span class=\"co1\">;; max-lisp-eval-depth to a big number so it doesn't reach max recursion</span><br/>  <span class=\"co1\">;; depth.</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>max-lisp-eval-depth <span class=\"nu0\">5000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">null</span> doors<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>insert <span class=\"br0\">(</span>int-to-string <span class=\"br0\">(</span><span class=\"kw1\">car</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>print-doors <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Returns a list with the final solution</span><br/><span class=\"br0\">(</span>main-program<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Print the final solution on the buffer</span><br/><span class=\"br0\">(</span>print-doors <span class=\"br0\">(</span>main-program<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>hundoors<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>go<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">toggle</span><span class=\"br0\">(</span>closed<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">open</span><span class=\"sy1\">;</span><br/><span class=\"re3\">toggle</span><span class=\"br0\">(</span>open<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">closed</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"br0\">[</span>closed <span class=\"sy3\">||</span> <span class=\"re5\">_</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_I</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">101</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_I</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">go</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">H2</span> <span class=\"sy3\">=</span> <span class=\"kw1\">case</span> <span class=\"re5\">I</span> <span class=\"kw2\">rem</span> <span class=\"re5\">N</span> <span class=\"kw1\">of</span><br/>    <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">toggle</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">H</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">go</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">H2</span>|L<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>! \"100 Doors\" program for ERRE LANGUAGE<br/>! Author: Claudio Larini<br/>! Date: 21-Nov-2014<br/>!<br/>! PC Unoptimized version translated from a QB version<br/>\u00a0<br/>PROGRAM 100DOORS<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>CONST N=100<br/>\u00a0<br/>DIM DOOR[N]<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>FOR STRIDE=1 TO N DO<br/>    FOR INDEX=STRIDE TO N STEP STRIDE DO<br/>        DOOR[INDEX]=NOT(DOOR[INDEX])<br/>    END FOR<br/>END FOR<br/>\u00a0<br/>PRINT(\"Open doors:\";)<br/>FOR INDEX=1 TO N DO<br/>    IF DOOR[INDEX] THEN PRINT(INDEX;) END IF<br/>END FOR<br/>PRINT<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function Doors () ...<br/>$  doors:=zeros(1,100);<br/>$  for i=1 to 100<br/>$    for j=i to 100 step i<br/>$      doors[j]=!doors[j];<br/>$    end;<br/>$  end;<br/>$  return doors<br/>$endfunction<br/>&gt;nonzeros(Doors())<br/> [ 1  4  9  16  25  36  49  64  81  100 ]<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 24, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">-- doors.ex</span><br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>console.e<br/><span class=\"kw2\">sequence</span> doors<br/>doors <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span> <span class=\"co1\">-- 1 to 100, initialised to false </span><br/>\u00a0<br/><span class=\"kw1\">for</span> pass <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">for</span> door <span class=\"sy1\">=</span> pass <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">by</span> pass <span class=\"kw1\">do</span><br/>\t\t<span class=\"co1\">--printf( 1, \"%d\", doors[door] )</span><br/>\t\t<span class=\"co1\">--printf( 1, \"%d\", not doors[door] )</span><br/>\t\tdoors<span class=\"br0\">[</span>door<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw1\">not</span> doors<span class=\"br0\">[</span>door<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> oc<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\toc <span class=\"sy1\">=</span> <span class=\"st0\">\"open\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\toc <span class=\"sy1\">=</span> <span class=\"st0\">\"closed\"</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/> \t<span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"door\u00a0%d is\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span> i<span class=\"sy2\">,</span> oc <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0</pre>"}, {"lang": "Excel", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=IF($A2/C$1=INT($A2/C$1),IF(B2=0,1,IF(B2=1,0)),B2)<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> answerDoors <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> ToggleNth n <span class=\"br0\">(</span>lst:<span class=\"kw4\">bool</span> array<span class=\"br0\">)</span> <span class=\"sy0\">=</span>                  <span class=\"co1\">// Toggle every n'th door</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> .. <span class=\"me1\">n</span> .. <span class=\"nu0\">99</span><span class=\"br0\">]</span>                              <span class=\"co1\">// For each appropriate door</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> lst.<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">not</span> lst.<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"co1\">// toggle it</span><br/>    <span class=\"kw1\">let</span> doors <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">create</span> <span class=\"nu0\">100</span> <span class=\"kw1\">false</span>                  <span class=\"co1\">// Initialize all doors to closed</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> ToggleNth n doors<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span>      <span class=\"co1\">// toggle the appropriate doors for each pass</span><br/>    doors                                               <span class=\"co1\">// Initialize all doors to closed</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 25, "block": "<pre class=\"text highlighted_source\">USING: bit-arrays formatting fry kernel math math.ranges<br/>sequences\u00a0;<br/>IN: rosetta.doors<br/>\u00a0<br/>CONSTANT: number-of-doors 100<br/>\u00a0<br/>: multiples ( n -- range )<br/>    0 number-of-doors rot &lt;range&gt;\u00a0;<br/>\u00a0<br/>: toggle-multiples ( n doors -- )<br/>    [ multiples ] dip '[ _ [ not ] change-nth ] each\u00a0;<br/>\u00a0<br/>: toggle-all-multiples ( doors -- )<br/>    [ number-of-doors [1,b] ] dip '[ _ toggle-multiples ] each\u00a0;<br/>\u00a0<br/>: print-doors ( doors -- )<br/>    [<br/>        swap \"open\" \"closed\"\u00a0? \"Door\u00a0%d is\u00a0%s\\n\" printf<br/>    ] each-index\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    number-of-doors 1 + &lt;bit-array&gt;<br/>    [ toggle-all-multiples ] [ print-doors ] bi\u00a0;<br/>\u00a0<br/>main</pre>"}, {"lang": "Falcon", "loc": 12, "block": "<pre class=\"falcon highlighted_source\">doors <span class=\"sy0\">=</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#arrayBuffer\"><span class=\"kw6\">arrayBuffer</span></a><span class=\"br0\">(</span> <span class=\"nu0\">101</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> pass <span class=\"kw3\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> doors.<a href=\"http://falconpl.org/project_docs/core/functions.html#len\"><span class=\"kw6\">len</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> door <span class=\"kw3\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> doors.<a href=\"http://falconpl.org/project_docs/core/functions.html#len\"><span class=\"kw6\">len</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> pass<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>    doors<span class=\"br0\">[</span> door <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">not</span> doors<span class=\"br0\">[</span> door <span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> door <span class=\"kw3\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> doors.<a href=\"http://falconpl.org/project_docs/core/functions.html#len\"><span class=\"kw6\">len</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>  <span class=\"co1\">// Show Output</span><br/>  <span class=\"sy0\">&gt;</span>  <span class=\"st0\">\"Door \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">$</span>door<span class=\"sy0\">,</span> <span class=\"st0\">\" is: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> doors<span class=\"br0\">[</span> door <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"closed\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "FALSE", "loc": 7, "block": "<pre class=\"text highlighted_source\">100[$][0 1\u00f8:1-]#              {initialize doors}<br/>%<br/>[s;[$101\\&gt;][$$;~\\:s;+]#%]d:   {function d, switch door state function}<br/>1s:[s;101\\&gt;][d;!s;1+s:]#      {increment step width from 1 to 100, execute function d each time}<br/>1[$101\\&gt;][$$.\" \";$[\"open<br/>\"]?~[\"closed<br/>\"]?1+]#                       {loop through doors, print door number and state}</pre>"}, {"lang": "Fantom", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    states\u00a0:= (1..100).toList<br/>    100.times |i| {<br/>      states = states.map |state| { state\u00a0% (i+1) == 0\u00a0? -state\u00a0: +state }<br/>    }<br/>    echo(\"Open doors are \" + states.findAll { it &lt; 0 }.map { -it })<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 15, "block": "<pre class=\"qbasic highlighted_source\">#AppType Console<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> doors<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>\t<span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> j <span class=\"sy0\">=</span> i <span class=\"kw1\">TO</span> n <span class=\"kw1\">STEP</span> i<br/>\t\tdoors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>\t<span class=\"kw1\">IF</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Door \"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" is open\"</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>Pause</pre>"}, {"lang": "friendly interactive shell", "loc": 27, "block": "<pre class=\"text highlighted_source\"># Set doors to empty list<br/>set doors<br/>\u00a0<br/># Initialize doors arrays<br/>for i in (seq 100)<br/>    set doors[$i] 0<br/>end<br/>\u00a0<br/>for i in (seq 100)<br/>    set j $i<br/>    while test $j -le 100<br/>        # Logical not on doors<br/>        set doors[$j] (math\u00a0!$doors[$j])<br/>        set j (math $j + $i)<br/>    end<br/>end<br/>\u00a0<br/># Print every door<br/>for i in (seq (count $doors))<br/>    echo -n \"$i \"<br/>    if test $doors[$i] -eq 0<br/>        echo closed<br/>    else<br/>        echo open<br/>    end<br/>end<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 18, "block": "<pre class=\"text highlighted_source\">: toggle ( c-addr -- )  \\ toggle the byte at c-addr<br/>    dup <a class=\"__cf_email__\" data-cfemail=\"d9ba99\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1 xor swap c!\u00a0;<br/>\u00a0<br/>100  1+ ( 1-based indexing ) constant ndoors<br/>create doors  ndoors allot<br/>\u00a0<br/>: init ( -- )  doors ndoors erase\u00a0;  \\ close all doors<br/>\u00a0<br/>: pass ( n -- )  \\ toggle every nth door<br/>    ndoors over do<br/>        doors i + toggle<br/>    dup ( n ) +loop drop\u00a0;<br/>\u00a0<br/>: run ( -- )  ndoors 1 do  i pass  loop\u00a0;<br/>: display ( -- )  \\ display open doors<br/>    ndoors 1 do  doors i + <a class=\"__cf_email__\" data-cfemail=\"fa99ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if  i .  then loop cr\u00a0;<br/>\u00a0<br/>init run display</pre>"}, {"lang": "Fortran", "loc": 15, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> doors<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">door</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"closed\"</span>, <span class=\"st0\">\"open  \"</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>\u00a0<br/>    print <span class=\"st0\">\"(A)\"</span>, <span class=\"st0\">\"Number of doors?\"</span><br/>    read <span class=\"sy0\">*</span>, n<br/>    <span class=\"kw1\">allocate</span> <span class=\"br0\">(</span>door<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    door <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>        door<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>n<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> door<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>n<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>        print <span class=\"st0\">\"(A,G0,2A)\"</span>, <span class=\"st0\">\"door \"</span>, i, <span class=\"st0\">\" is \"</span>, s<span class=\"br0\">(</span>door<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 32, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 27-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define max_doors 100</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong c, n, n1, door<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max_doors<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' toggle, at start all doors are closed (0)</span><br/><span class=\"co1\">' 0 = door closed, 1 = door open</span><br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max_doors<br/>    <span class=\"kw1\">For</span> n1 = n <span class=\"kw1\">To</span> max_doors <span class=\"kw1\">Step</span> n<br/>        door<span class=\"br0\">(</span>n1<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> - door<span class=\"br0\">(</span>n1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' count the doors that are open (1)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"doors that are open nr: \"</span>;<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max_doors<br/>    <span class=\"kw1\">If</span> door<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> n; <span class=\"st0\">\" \"</span>;<br/>        c = c + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"There are \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> + <span class=\"st0\">\" doors open\"</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>doors = new array[[101], false]<br/>for pass=1 to 100<br/>   for door=pass to 100 step pass<br/>      <a class=\"__cf_email__\" data-cfemail=\"ec8883839e9fac8883839e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =\u00a0! <a class=\"__cf_email__\" data-cfemail=\"ea8e85859899aa8e858598\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>print[\"Open doors:  \"]<br/>for door=1 to 100<br/>   if <a class=\"__cf_email__\" data-cfemail=\"1e7a71716c6d5e7a71716c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      print[\"$door \"]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">for i &lt;- 1..100<br/>  r = foldl1( \\a, b -&gt; a xor b, [(a|i) | a &lt;- 1..100] )<br/>  println( i + ' ' + (if r then 'open' else 'closed') )</pre>"}, {"lang": "Futhark", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun main(n: int): [n]bool =<br/>  let is_open = replicate n False<br/>  loop (is_open) = for i &lt; n do<br/>    let js = map (*i+1) (iota n)<br/>    let flips = map (fn j =&gt;<br/>                       if j &lt; n<br/>                       then unsafe\u00a0!is_open[j]<br/>                       else True -- Doesn't matter.<br/>                    ) js<br/>    in write js flips is_open<br/>  in is_open<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as short door, square\u00a0: square = 1<br/>dim as short increment\u00a0: increment = 3<br/>\u00a0<br/>for door = 1 to 100<br/>   if (door == square)<br/>      print \"Door\"; door; \" is open.\"<br/>      square += increment<br/>      increment += 2<br/>   else<br/>      print \"Door\"; door; \" is closed.\"<br/>   end if<br/>next<br/>\u00a0</pre>"}, {"lang": "FUZE BASIC", "loc": 10, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Open doors: \"</span>;x;<span class=\"st0\">\" \"</span>;<br/>CYCLE<br/>    z<span class=\"sy0\">=</span>x<span class=\"sy0\">+</span>y<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> z;<span class=\"st0\">\" \"</span>;<br/>    x<span class=\"sy0\">=</span>z<br/>    y<span class=\"sy0\">=</span>y<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>REPEAT <span class=\"kw1\">UNTIL</span> z<span class=\"sy0\">&gt;=</span><span class=\"nu0\">100</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a></pre>"}, {"lang": "Gambas", "loc": 16, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> bDoor <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a><span class=\"br0\">[</span><span class=\"nu0\">101</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount1, siCount2, siStart <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">100</span><br/>  <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siStart<br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount2 <span class=\"sy0\">=</span> siStart <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">100</span> <a href=\"http://gambasdoc.org/help/lang/step\"><span class=\"kw1\">Step</span></a> siCount1<br/>    bDoor<span class=\"br0\">[</span>siCount2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/not\"><span class=\"kw5\">Not</span></a> bDoor<span class=\"br0\">[</span>siCount2<span class=\"br0\">]</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">100</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> bDoor<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> siCount1;;<br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 18, "block": "<pre class=\"text highlighted_source\">doors\u00a0:= function(n)<br/>  local a,j,s;<br/>  a\u00a0:= [ ];<br/>  for j in [1 .. n] do<br/>    a[j]\u00a0:= 0;<br/>  od;<br/>  for s in [1 .. n] do<br/>    j\u00a0:= s;<br/>    while j &lt;= n do<br/>      a[j]\u00a0:= 1 - a[j];<br/>      j\u00a0:= j + s;<br/>    od;<br/>  od;<br/>  return Filtered([1 .. n], j -&gt; a[j] = 1);<br/>end;<br/>\u00a0<br/>doors(100);<br/># [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]</pre>"}, {"lang": "GFA Basic", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' 100 doors problem<br/>'<br/>DIM doors!(101)\u00a0! use indices 1 to 100<br/>@close_doors<br/>@do_passes<br/>@show_doors<br/>'<br/>PROCEDURE close_doors<br/>  ARRAYFILL doors!(),FALSE<br/>RETURN<br/>'<br/>PROCEDURE do_passes<br/>  LOCAL i%,j%<br/>  FOR i%=1 TO 100<br/>    FOR j%=i% TO 100 STEP i%<br/>      doors!(j%)=NOT doors!(j%)<br/>    NEXT j%<br/>  NEXT i%<br/>RETURN<br/>'<br/>PROCEDURE show_doors<br/>  LOCAL i%<br/>  OPENW 1<br/>  CLEARW 1<br/>  FOR i%=1 TO 100<br/>    IF doors!(i%)<br/>      PRINT \"Door \";i%;\" is open\"<br/>    ENDIF<br/>  NEXT i%<br/>  PRINT \"(press a key to end program)\"<br/>  ~INP(2)<br/>  CLOSEW 1<br/>RETURN<br/>\u00a0</pre>"}, {"lang": "Glee", "loc": 5, "block": "<pre class=\"text highlighted_source\">100` *=0=&gt;d                      $$ create vector 1..100, create bit pattern d, marking all equal to 0<br/>:for (1..100[.s]){               $$ loop s from 1 to 100<br/>  d^(100`\u00a0%s *=0 )=&gt;d;}          $$ d = d xor (bit pattern of vector 1..100\u00a0% s)<br/>d                                $$ output d<br/>\u00a0</pre>"}, {"lang": "GML", "loc": 30, "block": "<pre class=\"gml highlighted_source\"><span class=\"kw1\">var</span> doors<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/><span class=\"co1\">//Sets up the array for all of the doors.</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//This first for loop goes through and passes the interval down to the next for loop.</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">//This for loop opens or closes the doors and uses the interval(if interval is 2 it only uses every other etc..)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> a <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">//Opens or closes a door.</span><br/>        doors<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>open_doors <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//This for loop goes through the array and checks for open doors.</span><br/><span class=\"co1\">//If the door is open it adds it to the string then displays the string.</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        open_doors <span class=\"sy0\">+=</span> \"Door Number \"<span class=\"sy0\">+</span><span class=\"kw3\">string</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>\" is open#\"<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw3\">show_message</span><span class=\"br0\">(</span>open_doors<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">game_end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    doors <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// the 100 passes called for in the task description</span><br/>    <span class=\"kw1\">for</span> pass <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> pass &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span> pass<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> door <span class=\"sy2\">:=</span> pass<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> door &lt; <span class=\"nu0\">100</span><span class=\"sy1\">;</span> door <span class=\"sy2\">+=</span> pass <span class=\"sy1\">{</span><br/>            doors<span class=\"sy1\">[</span>door<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">!</span>doors<span class=\"sy1\">[</span>door<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// one more pass to answer the question</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> doors <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> v <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">10</span> <span class=\"sy3\">==</span> <span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 4, "block": "<pre class=\"text highlighted_source\">100:c;[{0}c*]:d;<br/>c,{.c,&gt;\\)%{.d&lt;\\.d=1^\\)d&gt;++:d;}/}/<br/>[c,{)\"door \"\\+\" is\"+}%d{{\"open\"}{\"closed\"}if}%]zip<br/>{\" \"*puts}/</pre>"}, {"lang": "Gosu", "loc": 19, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>uses java.<span class=\"me1\">util</span>.<span class=\"me1\">Arrays</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> doors <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"kw2\">boolean</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>Arrays.<span class=\"me1\">fill</span><span class=\"br0\">(</span> doors, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> pass in <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> counter <span class=\"sy0\">=</span> pass-<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span> counter <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        doors<span class=\"br0\">[</span>counter<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>counter<span class=\"br0\">]</span><br/>        counter +<span class=\"sy0\">=</span> pass<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> door in doors index i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span> <span class=\"st0\">\"door ${i+1} is ${door\u00a0? 'open'\u00a0: 'closed'}\"</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\">doors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">99</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>   it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span><span class=\"nu0\">100</span>, it <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      doors<span class=\"br0\">[</span>it<span class=\"br0\">]</span> ^<span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">99</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>   <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Door #${it + 1} is ${doors[it]\u00a0? 'open'\u00a0: 'closed'}.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 10, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> A<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"co3\">20</span> <span class=\"kw1\">FOR</span> OFFSET <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/><span class=\"co3\">30</span>      <span class=\"kw1\">FOR</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">STEP</span> OFFSET<br/><span class=\"co3\">40</span>              A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">50</span>      <span class=\"kw1\">NEXT</span> I<br/><span class=\"co3\">60</span> <span class=\"kw1\">NEXT</span> OFFSET<br/><span class=\"co3\">70</span> <span class=\"co1\">' Print \"opened\" doors</span><br/><span class=\"co3\">80</span> <span class=\"kw1\">FOR</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/><span class=\"co3\">90</span>      <span class=\"kw1\">IF</span> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> I<br/><span class=\"co3\">100</span> <span class=\"kw1\">NEXT</span> I</pre>"}, {"lang": "Harbour", "loc": 13, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">#define</span> ARRAY_ELEMENTS <span class=\"nu0\">100</span><br/><span class=\"kw1\">PROCEDURE</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> aDoors <span class=\"sy0\">:=</span> <span class=\"kw2\">Array</span><span class=\"br0\">(</span> ARRAY_ELEMENTS <span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> i<span class=\"sy0\">,</span> j<br/>\u00a0<br/>   AFill<span class=\"br0\">(</span> aDoors<span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"kw2\">F</span><span class=\"sy0\">.</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">TO</span> ARRAY_ELEMENTS<br/>      <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> i <span class=\"kw3\">TO</span> ARRAY_ELEMENTS <span class=\"kw3\">STEP</span> i<br/>         aDoors<span class=\"br0\">[</span> j <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span> aDoors<span class=\"br0\">[</span> j <span class=\"br0\">]</span><br/>      <span class=\"kw1\">NEXT</span><br/>   <span class=\"kw1\">NEXT</span><br/>   AEval<span class=\"br0\">(</span> aDoors<span class=\"sy0\">,</span> <span class=\"br0\">{</span>|e<span class=\"sy0\">,</span> <span class=\"kw2\">n</span>| QQout<span class=\"br0\">(</span> <span class=\"kw2\">Padl</span><span class=\"br0\">(</span><span class=\"kw2\">n</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">Iif</span><span class=\"br0\">(</span>aDoors<span class=\"br0\">[</span><span class=\"kw2\">n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*open*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"closed\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">Iif</span><span class=\"br0\">(</span> n<span class=\"sy0\">%</span>5 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Qout<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> e<span class=\"sy0\">:=</span>NIL<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>   <span class=\"kw2\">RETURN</span></pre>"}, {"lang": "Haskell", "loc": 21, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Door<br/>  <span class=\"sy0\">=</span> Open<br/>  <span class=\"sy0\">|</span> Closed<br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>toggle <span class=\"sy0\">::</span> Door <span class=\"sy0\">-&gt;</span> Door<br/>toggle Open <span class=\"sy0\">=</span> Closed<br/>toggle Closed <span class=\"sy0\">=</span> Open<br/>\u00a0<br/>toggleEvery <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Door<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Door<span class=\"br0\">]</span><br/>toggleEvery k <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> toggleK <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    toggleK n door<br/>      <span class=\"sy0\">|</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> toggle door<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> door<br/>\u00a0<br/>run <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Door<span class=\"br0\">]</span><br/>run n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> toggleEvery <span class=\"br0\">(</span>replicate n Closed<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> n<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Open<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>run <span class=\"nu0\">100</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haxe", "loc": 18, "block": "<pre class=\"text highlighted_source\">class RosettaDemo<br/>{<br/>    static public function main()<br/>    {<br/>        findOpenLockers(100);<br/>    }<br/>\u00a0<br/>    static function findOpenLockers(n\u00a0: Int)<br/>    {<br/>        var i = 1;<br/>\u00a0<br/>        while((i*i) &lt;= n)<br/>        {<br/>            Sys.print(i*i + \"\\n\");<br/>            i++;<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "HicEst", "loc": 9, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> n<span class=\"sy1\">=</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"kw1\">open</span><span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> door<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>door <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-</span> <span class=\"kw1\">open</span> <span class=\"co1\">! = closed</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<br/>  <span class=\"kw1\">DO</span> j <span class=\"sy1\">=</span> i<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> i<br/>    door<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"kw1\">open</span> <span class=\"sy1\">-</span> door<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>door<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span><span class=\"kw1\">SUM</span><span class=\"br0\">(</span>door<span class=\"br0\">)</span><span class=\"sy1\">//</span><span class=\"st0\">\" doors open\"</span><span class=\"br0\">)</span> </pre>"}, {"lang": "HolyC", "loc": 15, "block": "<pre class=\"text highlighted_source\">U8 is_open[100];<br/>U8 pass = 0, door = 0;<br/>\u00a0<br/>/* do the 100 passes */<br/>for (pass = 0; pass &lt; 100; ++pass)<br/>  for (door = pass; door &lt; 100; door += pass + 1)<br/>    is_open[door] =\u00a0!is_open[door];<br/>\u00a0<br/>/* output the result */<br/>for (door = 0; door &lt; 100; ++door)<br/>  if (is_open[door])<br/>    Print(\"Door #%d is open.\\n\", door + 1);<br/>  else<br/>    Print(\"Door #%d is closed.\\n\", door + 1);<br/>\u00a0</pre>"}, {"lang": "Huginn", "loc": 26, "block": "<pre class=\"text highlighted_source\">#! /bin/sh<br/>exec huginn --no-argv -E \"${0}\"<br/>#! huginn<br/>\u00a0<br/>import Algorithms as algo;<br/>\u00a0<br/>main() {<br/>        doorCount = 100;<br/>        doors = [].resize( doorCount, false );<br/>\u00a0<br/>        for ( pass\u00a0: algo.range( doorCount ) ) {<br/>                i = 0;<br/>                step = pass + 1;<br/>                while ( i &lt; doorCount ) {<br/>                        doors[i] =\u00a0! doors[i];<br/>                        i += step;<br/>                }<br/>        }<br/>\u00a0<br/>        for ( i\u00a0: algo.range( doorCount ) ) {<br/>                if ( doors[i] ) {<br/>                        print( \"door {} is open\\n\".format( i ) );<br/>                }<br/>        }<br/>        return ( 0 );<br/>}</pre>"}, {"lang": "Hy", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def doors <span class=\"br0\">(</span>* <span class=\"br0\">[</span>False<span class=\"br0\">]</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">[</span>pass <span class=\"br0\">(</span>range <span class=\"br0\">(</span>len doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>for <span class=\"br0\">[</span>i <span class=\"br0\">(</span>range pass <span class=\"br0\">(</span>len doors<span class=\"br0\">)</span> <span class=\"br0\">(</span>inc pass<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> doors i <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> doors i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">[</span>i <span class=\"br0\">(</span>range <span class=\"br0\">(</span>len doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>format <span class=\"st0\">\"Door {} is {}.\"</span><br/>    <span class=\"br0\">(</span>inc i<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> doors i<span class=\"br0\">)</span> <span class=\"st0\">\"open\"</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "I", "loc": 18, "block": "<pre class=\"text highlighted_source\">software {<br/>\tvar doors = len(100)<br/>\u00a0<br/>\tfor pass over [1, 100]<br/>\t\tvar door = pass - 1<br/>\t\tloop door &lt; len(doors) {<br/>\t\t\tdoors[door] = doors[door]/0<br/>\t\t\tdoor += pass<br/>\t\t}<br/>\tend<br/>\u00a0<br/>\tfor door,isopen in doors<br/>\t\tif isopen<br/>\t\t\tprint(\"Door \",door+1,\": open\")<br/>\t\tend<br/>\tend<br/>\tprint(\"All other doors are closed\")<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    door <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>    <span class=\"co1\"># default value of entries is 0</span><br/>    <span class=\"kw1\">every</span> pass <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">every</span> door<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> pass <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> by pass<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-</span> door<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Door \"</span><span class=\"sy1\">,</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"st0\">\" is \"</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> door<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"open\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Idris", "loc": 35, "block": "<pre class=\"text highlighted_source\">import Data.Vect<br/>\u00a0<br/>-- Creates list from 0 to n (not including n) <br/>upTo\u00a0: (m\u00a0: Nat) -&gt; Vect m (Fin m)<br/>upTo Z = []<br/>upTo (S n) = 0\u00a0:: (map FS (upTo n))<br/>\u00a0<br/>data DoorState = DoorOpen | DoorClosed<br/>\u00a0<br/>toggleDoor\u00a0: DoorState -&gt; DoorState<br/>toggleDoor DoorOpen = DoorClosed<br/>toggleDoor DoorClosed = DoorOpen<br/>\u00a0<br/>isOpen\u00a0: DoorState -&gt; Bool<br/>isOpen DoorOpen = True<br/>isOpen DoorClosed = False<br/>\u00a0<br/>initialDoors\u00a0: Vect 100 DoorState<br/>initialDoors = fromList $ map (\\_ =&gt; DoorClosed) [1..100]<br/>\u00a0<br/>iterate\u00a0: (n\u00a0: Fin m) -&gt; Vect m DoorState -&gt; Vect m DoorState<br/>iterate n doors {m} = <br/>  map (\\(idx, doorState) =&gt; <br/>          if ((S (finToNat idx)) `mod` (S (finToNat n))) == Z <br/>              then toggleDoor doorState <br/>              else doorState)  <br/>      (zip (upTo m) doors)<br/>\u00a0<br/>-- Returns all doors left open at the end<br/>solveDoors\u00a0: List (Fin 100)<br/>solveDoors = <br/>  findIndices isOpen $ foldl (\\doors,val =&gt; iterate val doors) initialDoors (upTo 100)<br/>\u00a0<br/>main\u00a0: IO ()<br/>main = print $ map (\\n =&gt; S (finToNat n)) solveDoors</pre>"}, {"lang": "Inform 7", "loc": 29, "block": "<pre class=\"text highlighted_source\">Hallway is a room.<br/>\u00a0<br/>A toggle door is a kind of thing.<br/>A toggle door can be open or closed. It is usually closed.<br/>A toggle door has a number called the door number.<br/>Understand the door number property as referring to a toggle door.<br/>Rule for printing the name of a toggle door: say \"door #[door number]\".<br/>\u00a0<br/>There are 100 toggle doors.<br/>\u00a0<br/>When play begins (this is the initialize doors rule):<br/>\tlet the next door number be 1;<br/>\trepeat with D running through toggle doors:<br/>\t\tnow the door number of D is the next door number;<br/>\t\tincrement the next door number.<br/>\u00a0<br/>To toggle (D - open toggle door): now D is closed.<br/>To toggle (D - closed toggle door): now D is open.<br/>\u00a0<br/>When play begins (this is the solve puzzle rule):<br/>\tlet the door list be the list of toggle doors;<br/>\tlet the door count be the number of entries in the door list;<br/>\trepeat with iteration running from 1 to 100:<br/>\t\tlet N be the iteration;<br/>\t\twhile N is less than the door count:<br/>\t\t\ttoggle entry N in the door list;<br/>\t\t\tincrease N by the iteration;<br/>\tsay \"Doors left open: [list of open toggle doors].\";<br/>\tend the story.</pre>"}, {"lang": "Informix 4GL", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MAIN<br/>    DEFINE<br/>        i, pass SMALLINT,<br/>        doors ARRAY[100] OF SMALLINT<br/>\u00a0<br/>    FOR i = 1 TO 100<br/>        LET doors[i] = FALSE<br/>    END FOR<br/>\u00a0<br/>    FOR pass = 1 TO 100<br/>        FOR i = pass TO 100 STEP pass<br/>            LET doors[i] = NOT doors[i]<br/>        END FOR<br/>    END FOR<br/>\u00a0<br/>    FOR i = 1 TO 100<br/>        IF doors[i]<br/>          THEN DISPLAY i USING \"Door &lt;&lt;&amp; is open\"<br/>          ELSE DISPLAY i USING \"Door &lt;&lt;&amp; is closed\"<br/>        END IF<br/>    END FOR<br/>END MAIN<br/>\u00a0</pre>"}, {"lang": "Io", "loc": 6, "block": "<pre class=\"io highlighted_source\">doors\u00a0:= <span class=\"kw2\">List</span> <span class=\"kw2\">clone</span><br/><span class=\"nu0\">100</span> repeat<span class=\"br0\">(</span>doors append<span class=\"br0\">(</span>false<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x,i,<span class=\"nu0\">100</span>, i, doors atPut<span class=\"br0\">(</span>x - <span class=\"nu0\">1</span>, doors at<span class=\"br0\">(</span>x - <span class=\"nu0\">1</span><span class=\"br0\">)</span> not<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>doors <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i, x, <span class=\"kw1\">if</span><span class=\"br0\">(</span>x, <span class=\"st0\">\"Door #{i + 1} is open\"</span> interpolate println<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ioke", "loc": 21, "block": "<pre class=\"text highlighted_source\">NDoors = Origin mimic<br/>\u00a0<br/>NDoors Toggle = Origin mimic do(<br/>  initialize = method(toggled?, @toggled? = toggled?)<br/>  toggle! = method(@toggled? =\u00a0!toggled?. self)<br/>)<br/>\u00a0<br/>NDoors Doors = Origin mimic do(<br/>  initialize = method(n,<br/>    @n = n<br/>    @doors = {} addKeysAndValues(1..n, (1..n) map(_, NDoors Toggle mimic(false)))<br/>  )<br/>  numsToToggle = method(n, for(x &lt;- (<a class=\"__cf_email__\" data-cfemail=\"c9f8e7e789a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>), (x\u00a0% n) zero?, x))<br/>  toggleThese = method(nums, nums each(x, @doors[x] = @doors at(x) toggle))<br/>  show = method(@doors filter:dict(value toggled?) keys sort println)<br/>)<br/>\u00a0<br/>; Test code<br/>x = NDoors Doors mimic(100)<br/>(1..100) each(n, x toggleThese(x numsToToggle(n)))<br/>x show</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   ~:/ <span class=\"sy0\">(</span><span class=\"nu0\">100</span> $ - {. 1:<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> &gt;:i.<span class=\"nu0\">100</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> ...<br/>   ~:/ <span class=\"nu0\">0</span>=|/~ &gt;:i.<span class=\"nu0\">100</span>  <span class=\"co1\">NB. alternative</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> ...</pre>"}, {"lang": "Java", "loc": 17, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> HundredDoors <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> doors <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"nu0\">101</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> doors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> doors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> doors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Door\u00a0%d is open.%n\"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> doors<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span>             <span class=\"co1\">//create doors</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i2<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>g<span class=\"sy0\">;</span>i2<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span>i2<span class=\"sy0\">+=</span>i<span class=\"br0\">)</span><br/>  doors<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"sy0\">=!</span>doors<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"sy0\">;</span>      <span class=\"co1\">//toggle doors</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>      <span class=\"co1\">//read doors</span><br/> console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Door\u00a0%d is\u00a0%s\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>doors<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"st0\">\"open\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Solution for n doors:<br/>def doors(n):<br/>\u00a0<br/>  def print:<br/>    . as $doors<br/>    | range(1; length+1)<br/>    | if $doors[.] then \"Door \\(.) is open\" else empty end;<br/>\u00a0<br/>    [range(n+1)|null] as $doors<br/>  | reduce range(1; n+1) as $run<br/>      ( $doors; reduce range($run; n+1; $run ) as $door<br/>                  ( .; .[$door] = (.[$door] | not) ) )<br/>  | print\u00a0;<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">doors = falses(100)<br/>for a in 1:100, b in a:a:100<br/>    doors[b] =\u00a0!doors[b]<br/>end<br/>for a = 1:100<br/>    println(\"Door $a is \" * (doors[a]\u00a0? \"open.\"\u00a0: \"closed.\")) <br/>end</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\"> `closed `open\u00a0![\u00a0; 2 ] @ #:' 1 _ = ,/ &amp;:' 0 = t\u00a0!\\:/: t\u00a0:\u00a0! 101</pre>"}, {"lang": "Klong", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>flip::{,/{(1-*x),1_x}'x:#y}<br/>i::0;(100{i::i+1;flip(i;x)}:*100:^0)?1<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\">fun oneHundredDoors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> doors <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i..<span class=\"nu0\">99</span> step <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> doors<br/>        .<span class=\"me1\">mapIndexed</span> <span class=\"br0\">{</span> i, b -<span class=\"sy0\">&gt;</span> i to b <span class=\"br0\">}</span><br/>        .<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span><br/>        .<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> + <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 5, "block": "<pre class=\"text highlighted_source\">loop(100) =&gt; {^<br/>\tlocal(root = math_sqrt(loop_count))<br/>\tlocal(state = (#root == math_ceil(#root)\u00a0? '&lt;strong&gt;open&lt;/strong&gt;' | 'closed'))<br/>\t#state\u00a0!= 'closed'\u00a0? 'Door ' + loop_count + ': ' + #state + '&lt;br&gt;'<br/>^}</pre>"}, {"lang": "Lasso", "loc": 5, "block": "<pre class=\"text highlighted_source\">loop(100) =&gt; {^<br/>\tlocal(root = math_sqrt(loop_count))<br/>\tlocal(state = (#root == math_ceil(#root)\u00a0? '&lt;strong&gt;open&lt;/strong&gt;' | 'closed'))<br/>\t#state\u00a0!= 'closed'\u00a0? 'Door ' + loop_count + ': ' + #state + '&lt;br&gt;'<br/>^}</pre>"}, {"lang": "Lhogho", "loc": 30, "block": "<pre class=\"text highlighted_source\">to doors<br/>\t;Problem 100 Doors <br/>\t;Lhogho<br/>\u00a0<br/>\tfor \"p [1 100] <br/>\t[<br/>\t\tmake\u00a0:p \"false<br/>\t]<br/>\u00a0<br/>\tfor \"a [1 100 1]<br/>\t[<br/>\t\tfor \"b [:a 100\u00a0:a]<br/>\t\t[<br/>\t\t\tif\u00a0:b &lt; 101 <br/>\t\t\t[<br/>\t\t\t\tmake\u00a0:b not thing\u00a0:b<br/>\t\t\t]<br/>\t\t]<br/>\t]<br/>\u00a0<br/>\tfor \"c [1 100]<br/>\t[<br/>\t\tif thing\u00a0:c <br/>\t\t[ <br/>\t\t\t(print \"door\u00a0:c \"is \"open) <br/>\t\t]<br/>\t] <br/>end<br/>\u00a0<br/>doors</pre>"}, {"lang": "Liberty BASIC", "loc": 10, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">dim</span> doors<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> pass <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">for</span> door <span class=\"sy0\">=</span> pass <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> step pass<br/>        doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span>doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> door<br/><span class=\"kw1\">next</span> pass<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"open doors \"</span>;<br/><span class=\"kw1\">for</span> door <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">if</span> doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> door;<span class=\"st0\">\"  \"</span>;<br/><span class=\"kw1\">next</span> door</pre>"}, {"lang": "Lily", "loc": 15, "block": "<pre class=\"text highlighted_source\">var doors = List.fill(100, false)<br/>\u00a0<br/>for i in 0...99:<br/>    for j in i...99 by i + 1:<br/>        doors[j] =\u00a0!doors[j]<br/>\u00a0<br/># The type must be specified since the list starts off empty.<br/>var open_doors: List[Integer] = []<br/>\u00a0<br/>doors.each_index{|i|<br/>    if doors[i]:<br/>        open_doors.push(i + 1)<br/>}<br/>\u00a0<br/>print($\"Open doors: ^(open_doors)\")</pre>"}, {"lang": "LiveCode", "loc": 11, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">on</span> mouseUp   <br/>   repeat with tStep <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><br/>      repeat with tDoor <span class=\"sy0\">=</span> tStep <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> step tStep<br/>         <span class=\"kw1\">put</span> not tDoors<span class=\"br0\">[</span>tDoor<span class=\"br0\">]</span> into tDoors<span class=\"br0\">[</span>tDoor<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span> repeat<br/>      <span class=\"kw1\">if</span> tDoors<span class=\"br0\">[</span>tStep<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">put</span> <span class=\"st0\">\"Door \"</span> &amp; tStep &amp; <span class=\"st0\">\" is open\"</span> &amp; cr after tList<br/>   <span class=\"kw1\">end</span> repeat<br/>   set the <span class=\"kw1\">text</span> of <span class=\"kw1\">field</span> <span class=\"st0\">\"Doors\"</span> <span class=\"kw1\">to</span> tList<br/><span class=\"kw1\">end</span> mouseUp<br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 14, "block": "<pre class=\"text highlighted_source\">to doors<br/>;Problem 100 Doors <br/>;FMSLogo<br/>;lrcvs 2010<br/>\u00a0<br/>make \"door (vector 100 1) <br/>for [p 1 100][setitem\u00a0:p\u00a0:door 0] <br/>\u00a0<br/>for [a 1 100 1][for [b\u00a0:a 100\u00a0:a][make \"x item\u00a0:b\u00a0:door <br/>\t                          ifelse\u00a0:x  = 0 [setitem\u00a0:b\u00a0:door 1][setitem\u00a0:b\u00a0:door 0] ] ] <br/>\u00a0<br/>for [c 1 100][make \"y item\u00a0:c\u00a0:door <br/>\t      ifelse\u00a0:y = 0 [pr (list\u00a0:c \"Close)] [pr (list\u00a0:c \"Open)] ] <br/>end</pre>"}, {"lang": "LOLCODE", "loc": 27, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> doors <span class=\"kw1\">ITZ</span> A BUKKIT<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> hallway <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> door TIL <span class=\"kw2\">BOTH SAEM</span> door <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><br/>    doors <span class=\"kw1\">HAS</span> A SRS door <span class=\"kw1\">ITZ</span> FAIL <span class=\"co1\">BTW, INISHULIZE ALL TEH DOORZ AS CLOZD</span><br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> hallway<br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> hallway <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> pass TIL <span class=\"kw2\">BOTH SAEM</span> pass <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">I HAS A</span> door <span class=\"kw1\">ITZ</span> pass<br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> passer<br/>        doors'Z SRS door <span class=\"kw1\">R</span> <span class=\"kw4\">NOT</span> doors'Z SRS door<br/>        door <span class=\"kw1\">R</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> door <span class=\"kw4\">AN</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> pass <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">DIFFRINT</span> door <span class=\"kw4\">AN</span> <span class=\"kw4\">SMALLR</span> <span class=\"kw2\">OF</span> door <span class=\"kw4\">AN</span> <span class=\"nu0\">99</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>            YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><br/>        OIC<br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> passer<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> hallway<br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> printer <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> door TIL <span class=\"kw2\">BOTH SAEM</span> door <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"Door #\"</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> door <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"st0\">\" is \"</span>!<br/>    doors'Z SRS door<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>        YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"open.\"</span><br/>        NO WAI<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"closed.\"</span><br/>    OIC<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> printer<br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> is_open <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> pass <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> door <span class=\"sy0\">=</span> pass<span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span>pass <span class=\"kw1\">do</span><br/>        is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">not</span> is_open<span class=\"br0\">[</span>door<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>is_open <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'Door '</span><span class=\"sy0\">..</span>i<span class=\"sy0\">..</span><span class=\"st0\">':'</span><span class=\"sy0\">,</span>v <span class=\"kw2\">and</span> <span class=\"st0\">'open'</span> <span class=\"kw2\">or</span> <span class=\"st0\">'close'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 10, "block": "<pre class=\"text highlighted_source\">define(`_set', `define(`$1[$2]', `$3')')dnl<br/>define(`_get', `defn(`$1[$2]')')dnl<br/>define(`for',`ifelse($#,0,``$0'',`ifelse(eval($2&lt;=$3),1,<br/>`pushdef(`$1',$2)$5`'popdef(`$1')$0(`$1',eval($2+$4),$3,$4,`$5')')')')dnl<br/>define(`opposite',`_set(`door',$1,ifelse(_get(`door',$1),`closed',`open',`closed'))')dnl<br/>define(`upper',`100')dnl<br/>for(`x',`1',upper,`1',`_set(`door',x,`closed')')dnl<br/>for(`x',`1',upper,`1',`for(`y',x,upper,x,`opposite(y)')')dnl<br/>for(`x',`1',upper,`1',`door x is _get(`door',x)<br/>')dnl</pre>"}, {"lang": "Maple", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>NDoors\u00a0:= proc( N\u00a0:: posint )<br/>        # Initialise, using 0 to represent \"closed\"<br/>        local pass, door, doors\u00a0:= Array( 1 .. N, 'datatype' = 'integer'[ 1 ] );<br/>        # Now do N passes<br/>        for pass from 1 to N do<br/>                for door from pass by pass while door &lt;= N do<br/>                        doors[ door ]\u00a0:= 1 - doors[ door ]<br/>                end do<br/>        end do;<br/>        # Output<br/>        for door from 1 to N do<br/>                printf( \"Door\u00a0%d is\u00a0%s.\\n\", door, `if`( doors[ door ] = 0, \"closed\", \"open\" ) )<br/>        end do;<br/>        # Since this is a printing routine, return nothing.<br/>        NULL<br/>end proc:<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">n=100;<br/>tmp=ConstantArray[-1,n];<br/>Do[tmp[[i;;;;i]]*=-1;,{i,n}];<br/>Do[Print[\"door \",i,\" is \",If[tmp[[i]]==-1,\"closed\",\"open\"]],{i,1,Length[tmp]}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 8, "block": "<pre class=\"matlab highlighted_source\">a = false<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> b=<span class=\"nu0\">1</span>:<span class=\"nu0\">100</span><br/>  <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = b:b:<span class=\"nu0\">100</span><br/>    a<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span> = ~a<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>a<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">doors(n)\u00a0:= block([v], local(v),<br/>  v: makelist(true, n),<br/>  for i: 2 thru n do<br/>  for j: i step i thru n do v[j]: not v[j],<br/>  sublist_indices(v, 'identity));</pre>"}, {"lang": "MAXScript", "loc": 14, "block": "<pre class=\"text highlighted_source\">doorsOpen = for i in 1 to 100 collect false<br/>\u00a0<br/>for pass in 1 to 100 do<br/>(<br/>    for door in pass to 100 by pass do<br/>    (<br/>        doorsOpen[door] = not doorsOpen[door]<br/>    )<br/>)<br/>\u00a0<br/>for i in 1 to doorsOpen.count do<br/>(<br/>    format (\"Door\u00a0% is open?:\u00a0%\\n\") i doorsOpen[i]<br/>)</pre>"}, {"lang": "Mercury", "loc": 33, "block": "<pre class=\"text highlighted_source\">:- module doors.<br/>:- interface.<br/>:- import_module array, io, int.<br/>\u00a0<br/>:- type door ---&gt; open\u00a0; closed.<br/>:- type doors == array(door).<br/>\u00a0<br/>:- func toggle(door) = door.<br/>:- pred walk(int::in, doors::in, doors::out) is semidet.<br/>:- pred walks(int::in, int::in, doors::in, doors::out) is det.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>toggle(open) = closed.<br/>toggle(closed) = open.<br/>\u00a0<br/>walk(N,\u00a0!D)\u00a0:- walk(N, N,\u00a0!D).<br/>\u00a0<br/>:- pred walk(int::in, int::in, doors::in, doors::out) is semidet.<br/>walk(At, By,\u00a0!D)\u00a0:-<br/>        semidet_lookup(!.D, At - 1, Door),<br/>        slow_set(At - 1, toggle(Door),\u00a0!D),<br/>        ( walk(At + By, By,\u00a0!D) -&gt; true\u00a0; true ).<br/>\u00a0<br/>walks(N, End,\u00a0!D)\u00a0:-<br/>        ( N =&lt; End, walk(N,\u00a0!D) -&gt; walks(N + 1, End,\u00a0!D)\u00a0; true ).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>        io.write(Doors1,\u00a0!IO), io.nl(!IO),<br/>        array.init(100, closed, Doors0),<br/>        walks(1, 100, Doors0, Doors1).</pre>"}, {"lang": "Metafont", "loc": 11, "block": "<pre class=\"text highlighted_source\">boolean doors[];<br/>for i = 1 upto 100: doors[i]\u00a0:= false; endfor<br/>for i = 1 upto 100:<br/>  for j = 1 step i until 100:<br/>    doors[j]\u00a0:= not doors[j];<br/>  endfor<br/>endfor<br/>for i = 1 upto 100:<br/>  message decimal(i) &amp; \" \" &amp; if doors[i]: \"open\" else: \"close\" fi;<br/>endfor<br/>end</pre>"}, {"lang": "Microsoft Small Basic", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>For offset = 1 To 100<br/>  For i = 0 To 100 Step offset<br/>    a[i] = a[i] + 1<br/>  EndFor<br/>EndFor<br/>' Print \"opened\" doors<br/>For i = 1 To 100<br/>  If math.Remainder(a[i], 2) = 1 Then <br/>    TextWindow.WriteLine(i)<br/>  EndIf  <br/>EndFor<br/>\u00a0</pre>"}, {"lang": "MIPS Assembly", "loc": 64, "block": "<pre class=\"text highlighted_source\">.data<br/>  doors:     .space 100<br/>  num_str:   .asciiz \"Number \"<br/>  comma_gap: .asciiz \" is \"<br/>  newline:   .asciiz \"\\n\"<br/>\u00a0<br/>.text<br/>main:<br/># Clear all the cells to zero<br/>  li $t1, 100<br/>  la $t2, doors<br/>clear_loop:<br/>  sb $0, ($t2)<br/>  add $t2, $t2, 1<br/>  sub $t1, $t1, 1<br/>  bnez $t1, clear_loop<br/>\u00a0<br/># Now start the loops<br/>  li $t0, 1         # This will the the step size<br/>  li $t4, 1         # just an arbitrary 1<br/>loop1:<br/>  move $t1, $t0      # Counter<br/>  la $t2, doors      # Current pointer<br/>  add $t2, $t2, $t0<br/>  addi $t2, $t2, -1<br/>loop2:<br/>  lb $t3, ($t2)<br/>  sub $t3, $t4, $t3<br/>  sb $t3, ($t2)<br/>  add $t1, $t1, $t0<br/>  add $t2, $t2, $t0<br/>  ble $t1, 100, loop2<br/>\u00a0<br/>  addi $t0, $t0, 1<br/>  ble $t0, 100, loop1<br/>\u00a0<br/>  # Now display everything<br/>  la $t0, doors<br/>  li $t1, 1<br/>loop3:<br/>  li $v0, 4<br/>  la $a0, num_str<br/>  syscall<br/>\u00a0<br/>  li $v0, 1<br/>  move $a0, $t1<br/>  syscall<br/>\u00a0<br/>  li $v0, 4<br/>  la $a0, comma_gap<br/>  syscall<br/>\u00a0<br/>  li $v0, 1<br/>  lb $a0, ($t0)<br/>  syscall<br/>\u00a0<br/>  li $v0, 4,<br/>  la $a0, newline<br/>  syscall<br/>\u00a0<br/>  addi $t0, $t0, 1<br/>  addi $t1, $t1, 1<br/>  bne $t1, 101 loop3<br/>\u00a0</pre>"}, {"lang": "Mirah", "loc": 45, "block": "<pre class=\"text highlighted_source\">import java.util.ArrayList<br/>\u00a0<br/>class Door<br/>\t:state<br/>\u00a0<br/>\tdef initialize<br/>\t\t@state=false<br/>\tend<br/>\u00a0<br/>\tdef closed?;\u00a0<a class=\"__cf_email__\" data-cfemail=\"7253320106130617\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; end<br/>\tdef open?; @state; end<br/>\u00a0<br/>\tdef close; @state=false; end<br/>\tdef open; @state=true; end<br/>\u00a0<br/>\tdef toggle<br/>\t\tif closed?<br/>\t\t\topen<br/>\t\telse<br/>\t\t\tclose<br/>\t\tend<br/>\tend<br/>\u00a0<br/>\tdef toString; Boolean.toString(@state); end<br/>end<br/>\u00a0<br/>doors=ArrayList.new<br/>1.upto(100) do<br/>    doors.add(Door.new)<br/>end <br/>\u00a0<br/>1.upto(100) do |multiplier|<br/>    index = 0<br/>    doors.each do |door|<br/>        Door(door).toggle if (index+1)%multiplier == 0<br/>        index += 1<br/>    end<br/>end<br/>\u00a0<br/>i = 0<br/>doors.each do |door| <br/>    puts \"Door #{i+1} is #{door}.\"<br/>    i+=1<br/>end<br/>\u00a0</pre>"}, {"lang": "mIRC Scripting Language", "loc": 16, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw2\">var</span> <span class=\"re1\">%d</span> = <span class=\"re0\">$str</span><span class=\"br0\">(</span>0 $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,100<span class=\"br0\">)</span>, <span class=\"re1\">%m</span> = 1<br/><span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"re1\">%m</span> &lt;= 100<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">var</span> <span class=\"re1\">%n</span> = 1<br/>  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$calc</span><span class=\"br0\">(</span><span class=\"re1\">%n</span> * <span class=\"re1\">%m</span><span class=\"br0\">)</span> &lt;= 100<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">var</span> <span class=\"re1\">%d</span> = <span class=\"re0\">$puttok</span><span class=\"br0\">(</span><span class=\"re1\">%d</span>,<span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$gettok</span><span class=\"br0\">(</span><span class=\"re1\">%d</span>,<span class=\"re0\">$calc</span><span class=\"br0\">(</span><span class=\"re1\">%n</span> * <span class=\"re1\">%m</span><span class=\"br0\">)</span>,32<span class=\"br0\">)</span>,0,1<span class=\"br0\">)</span>,<span class=\"re0\">$calc</span><span class=\"br0\">(</span><span class=\"re1\">%n</span> * <span class=\"re1\">%m</span><span class=\"br0\">)</span>,32<span class=\"br0\">)</span><br/>    inc <span class=\"re1\">%n</span><br/>  <span class=\"br0\">}</span><br/>  inc <span class=\"re1\">%m</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> All Doors <span class=\"br0\">(</span>Boolean<span class=\"br0\">)</span>: <span class=\"re1\">%d</span><br/><span class=\"kw2\">var</span> <span class=\"re1\">%n</span> = 1<br/><span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"re1\">%n</span> &lt;= <span class=\"re0\">$findtok</span><span class=\"br0\">(</span><span class=\"re1\">%d</span>,1,0,32<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">var</span> <span class=\"re1\">%t</span> = <span class=\"re1\">%t</span> <span class=\"re0\">$findtok</span><span class=\"br0\">(</span><span class=\"re1\">%d</span>,1,<span class=\"re1\">%n</span>,32<span class=\"br0\">)</span><br/>  inc <span class=\"re1\">%n</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> Open Door Numbers: <span class=\"re1\">%t</span></pre>"}, {"lang": "ML/I", "loc": 41, "block": "<pre class=\"text highlighted_source\">MCSKIP \"WITH\" NL<br/>\"\" 100 doors<br/>MCINS\u00a0%.<br/>MCSKIP MT,&lt;&gt;<br/>\"\" Doors represented by P1-P100, 0 is closed<br/>MCPVAR 100<br/>\"\" Set P variables to 0<br/>MCDEF ZEROPS WITHS NL AS &lt;MCSET T1=1<br/>%L1.MCSET PT1=0<br/>MCSET T1=T1+1<br/>MCGO L1 UNLESS T1 EN 101<br/>&gt;<br/>ZEROPS<br/>\"\" Generate door state<br/>MCDEF STATE WITHS () AS &lt;MCSET T1=%A1.<br/>MCGO L1 UNLESS T1 EN 0<br/>closed&lt;&gt;MCGO L0<br/>%L1.open&gt;<br/>\"\" Main macro - no arguments<br/>\"\" T1 is pass number<br/>\"\" T2 is door number<br/>MCDEF DOORS WITHS NL<br/>AS &lt;MCSET T1=1<br/>\"\" pass loop<br/>%L1.MCGO L4 IF T1 GR 100<br/>\"\" door loop<br/>MCSET T2=T1<br/>%L2.MCGO L3 IF T2 GR 100<br/>MCSET PT2=1-PT2<br/>MCSET T2=T2+T1<br/>MCGO L2<br/>%L3.MCSET T1=T1+1<br/>MCGO L1<br/>%L4.\"\" now output the result<br/>MCSET T1=1<br/>%L5.door\u00a0%T1. is STATE(%PT1.)<br/>MCSET T1=T1+1<br/>MCGO L5 UNLESS T1 GR 100<br/>&gt;<br/>\"\" Do it<br/>DOORS</pre>"}, {"lang": "MMIX", "loc": 36, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Doors;<br/><span class=\"kw1\">IMPORT</span> InOut;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> State <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Closed<span class=\"sy0\">,</span> Open<span class=\"br0\">)</span>;<br/><span class=\"kw1\">TYPE</span> List <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> State;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  Doors<span class=\"sy0\">:</span> List;<br/>  I<span class=\"sy0\">,</span> J<span class=\"sy0\">:</span>  <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> I <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">FOR</span> J <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> J <span class=\"kw1\">MOD</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Closed <span class=\"kw1\">THEN</span><br/>          Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Open<br/>        <span class=\"kw1\">ELSE</span><br/>          Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Closed<br/>        <span class=\"kw1\">END</span><br/>      <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> I <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>    InOut.WriteCard<span class=\"br0\">(</span>I<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>    InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">' is '</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> Doors<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Closed <span class=\"kw1\">THEN</span><br/>      InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">'Closed.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ELSE</span><br/>      InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">'Open.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    InOut.WriteLn<br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Doors.</pre>"}, {"lang": "Modula-2", "loc": 36, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Doors;<br/><span class=\"kw1\">IMPORT</span> InOut;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> State <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Closed<span class=\"sy0\">,</span> Open<span class=\"br0\">)</span>;<br/><span class=\"kw1\">TYPE</span> List <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> State;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  Doors<span class=\"sy0\">:</span> List;<br/>  I<span class=\"sy0\">,</span> J<span class=\"sy0\">:</span>  <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> I <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">FOR</span> J <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> J <span class=\"kw1\">MOD</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Closed <span class=\"kw1\">THEN</span><br/>          Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Open<br/>        <span class=\"kw1\">ELSE</span><br/>          Doors<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Closed<br/>        <span class=\"kw1\">END</span><br/>      <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> I <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>    InOut.WriteCard<span class=\"br0\">(</span>I<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>    InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">' is '</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> Doors<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Closed <span class=\"kw1\">THEN</span><br/>      InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">'Closed.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ELSE</span><br/>      InOut.WriteString<span class=\"br0\">(</span><span class=\"st_h\">'Open.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    InOut.WriteLn<br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Doors.</pre>"}, {"lang": "Modula-3", "loc": 31, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Doors <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> State <span class=\"sy0\">=</span> <span class=\"br0\">{</span>Closed<span class=\"sy0\">,</span> Open<span class=\"br0\">}</span>;<br/><span class=\"kw1\">TYPE</span> List <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> State;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> doors <span class=\"sy0\">:=</span> List<span class=\"br0\">{</span>State.<span class=\"me1\">Closed</span><span class=\"sy0\">,</span> ..<span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>doors<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>doors<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> j <span class=\"kw1\">MOD</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> State.<span class=\"me1\">Closed</span> <span class=\"kw1\">THEN</span><br/>          doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> State.<span class=\"me1\">Open</span>;<br/>        <span class=\"kw1\">ELSE</span><br/>          doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> State.<span class=\"me1\">Closed</span>;<br/>        <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>doors<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>doors<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is \"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> State.<span class=\"me1\">Closed</span> <span class=\"kw1\">THEN</span><br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Closed.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Open.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Doors.</pre>"}, {"lang": "MOO", "loc": 14, "block": "<pre class=\"text highlighted_source\">is_open = make(100);<br/>for pass in [1..100]<br/>  for door in [pass..100]<br/>    if (door\u00a0% pass)<br/>      continue;<br/>    endif<br/>    is_open[door] =\u00a0!is_open[door];<br/>  endfor<br/>endfor<br/>\u00a0<br/>\"output the result\";<br/>for door in [1..100]<br/>  player:tell(\"door #\", door, \" is \", (is_open[door]\u00a0? \"open\"\u00a0: \"closed\"), \".\");<br/>endfor</pre>"}, {"lang": "MoonScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">is_open = [false for door = 1,100]<br/>\u00a0<br/>for pass = 1,100 <br/>    for door = pass,100,pass<br/>        is_open[door] = not is_open[door]<br/>\u00a0<br/>for i,v in ipairs is_open<br/>    print \"Door #{i}: \" .. if v then 'open' else 'closed'</pre>"}, {"lang": "MUMPS", "loc": 18, "block": "<pre class=\"text highlighted_source\">doors\tnew door,pass<br/>\tFor door=1:1:100 Set door(door)=0<br/>\tFor pass=1:1:100 For door=pass:pass:100 Set door(door)='door(door)<br/>\tFor door=1:1:100 If door(door) Write\u00a0!,\"Door\",$j(door,4),\" is open\"<br/>\tWrite\u00a0!,\"All other doors are closed.\"<br/>\tQuit<br/>Do doors<br/>Door   1 is open<br/>Door   4 is open<br/>Door   9 is open<br/>Door  16 is open<br/>Door  25 is open<br/>Door  36 is open<br/>Door  49 is open<br/>Door  64 is open<br/>Door  81 is open<br/>Door 100 is open<br/>All other doors are closed.</pre>"}, {"lang": "Myrddin", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std<br/>\u00a0<br/>const main = {<br/>\tvar isopen\t: bool[100]<br/>\u00a0<br/>\tstd.slfill(isopen[:], false)<br/>\tfor var i = 0; i &lt; isopen.len; i++<br/>\t\tfor var j = i; j &lt; isopen.len; j += i + 1<br/>\t\t\tisopen[j] =\u00a0!isopen[j]<br/>\t\t;;<br/>\t;;<br/>\u00a0<br/>\tfor var i = 0; i &lt; isopen.len; i++<br/>\t\tif isopen[i]<br/>\t\t\tstd.put(\"door {} is open\\n\", i + 1)<br/>\t\t;;<br/>\t;;<br/>}<br/>\u00a0</pre>"}, {"lang": "MySQL", "loc": 39, "block": "<pre class=\"mysql highlighted_source\">\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DROP\"><span class=\"kw1\">DROP</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=EXISTS\"><span class=\"kw1\">EXISTS</span></a> one_hundred_doors<span class=\"sy2\">;</span><br/>\u00a0<br/>DELIMITER <span class=\"sy1\">|</span><br/>\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> one_hundred_doors <span class=\"br0\">(</span>n <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a><span class=\"br0\">)</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DROP\"><span class=\"kw1\">DROP</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=TEMPORARY\"><span class=\"kw1\">TEMPORARY</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=TABLE\"><span class=\"kw1\">TABLE</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=EXISTS\"><span class=\"kw1\">EXISTS</span></a> doors<span class=\"sy2\">;</span> <br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=TEMPORARY\"><span class=\"kw1\">TEMPORARY</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=TABLE\"><span class=\"kw1\">TABLE</span></a> doors <span class=\"br0\">(</span><br/>    id <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTEGER\"><span class=\"kw4\">INTEGER</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/non-typed-operators.html\"><span class=\"kw10\">NOT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=NULL\"><span class=\"kw3\">NULL</span></a><span class=\"sy2\">,</span><br/>    open <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BOOLEAN\"><span class=\"kw4\">BOOLEAN</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FALSE\"><span class=\"kw3\">FALSE</span></a><span class=\"sy2\">,</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=PRIMARY%20KEY\"><span class=\"kw1\">PRIMARY KEY</span></a> <span class=\"br0\">(</span>id<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>  create_doors: LOOP<br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INSERT\"><span class=\"kw2\">INSERT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> doors <span class=\"br0\">(</span>id<span class=\"sy2\">,</span> open<span class=\"br0\">)</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=VALUES\"><span class=\"kw1\">values</span></a> <span class=\"br0\">(</span>@i<span class=\"sy2\">,</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FALSE\"><span class=\"kw3\">FALSE</span></a><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @i <span class=\"sy1\">=</span> @i <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> @i <span class=\"sy1\">&gt;</span> n <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>      LEAVE create_doors<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> LOOP create_doors<span class=\"sy2\">;</span><br/>\u00a0<br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>  toggle_doors: LOOP<br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UPDATE\"><span class=\"kw1\">UPDATE</span></a> doors <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> open <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/non-typed-operators.html\"><span class=\"kw10\">NOT</span></a> open <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">MOD</span></a><span class=\"br0\">(</span>id<span class=\"sy2\">,</span> @i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @i <span class=\"sy1\">=</span> @i <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> @i <span class=\"sy1\">&gt;</span> n <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>      LEAVE toggle_doors<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> LOOP toggle_doors<span class=\"sy2\">;</span><br/>\u00a0<br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> id <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> doors <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> open<span class=\"sy2\">;</span><br/><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a><span class=\"sy1\">|</span><br/>\u00a0<br/>DELIMITER <span class=\"sy2\">;</span><br/>\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CALL\"><span class=\"kw1\">CALL</span></a> one_hundred_doors<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 20, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>True  = Rexx<span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>False = Rexx<span class=\"br0\">(</span><span class=\"sy0\">\\</span>True<span class=\"br0\">)</span><br/>\u00a0<br/>doors = False<br/>\u00a0<br/><span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> = <span class=\"br0\">(</span>j_ <span class=\"sy0\">//</span> i_<span class=\"br0\">)</span> <span class=\"kw3\">then</span> doors<span class=\"br0\">[</span>j_<span class=\"br0\">]</span> = <span class=\"sy0\">\\</span>doors<span class=\"br0\">[</span>j_<span class=\"br0\">]</span><br/>    <span class=\"kw3\">end</span> j_<br/>  <span class=\"kw3\">end</span> i_<br/>\u00a0<br/><span class=\"kw1\">loop</span> d_ = <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">if</span> doors<span class=\"br0\">[</span>d_<span class=\"br0\">]</span> <span class=\"kw3\">then</span>  state = <span class=\"st0\">'open'</span><br/>  <span class=\"kw3\">else</span>  state = <span class=\"st0\">'closed'</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Door Nr.'</span> Rexx<span class=\"br0\">(</span>d_<span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"st0\">'is'</span> state<br/>  <span class=\"kw3\">end</span> d_</pre>"}, {"lang": "NewLISP", "loc": 9, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>status door<span class=\"sy1\">-</span>num<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#int\"><span class=\"kw1\">int</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sqrt\"><span class=\"kw1\">sqrt</span></a> door<span class=\"sy1\">-</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a><br/>       <span class=\"br0\">(</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> x x<span class=\"br0\">)</span> door<span class=\"sy1\">-</span>num<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"st0\">\"Door \"</span> door<span class=\"sy1\">-</span>num <span class=\"st0\">\" Open\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"st0\">\"Door \"</span> door<span class=\"sy1\">-</span>num <span class=\"st0\">\" Closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dolist\"><span class=\"kw1\">dolist</span></a> <span class=\"br0\">(</span>n <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> status <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sequence\"><span class=\"kw1\">sequence</span></a> <span class=\"nu0\">1</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 4, "block": "<pre class=\"text highlighted_source\">     n:=100;reduce xor (count n eachright mod count n eachall&lt;1)<br/>looloooolooooooloooooooolooooooooooloooooooooooolooooooooooooooloooooooooooooooo<br/>\u00a0<br/>looooooooooooooooool</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\">from strutils import format<br/>\u00a0<br/>proc check_doors() =<br/>  const n = 100<br/>  var is_open\u00a0: array[1..n, bool] # auto-initialized to false<br/>  # pass over the doors n times<br/>  for pass in 1..n:<br/>    var i = pass<br/>    while i &lt;= n:<br/>      is_open[i] = not is_open[i]<br/>      i += pass<br/>  # print the result<br/>  for door in 1..n:<br/>    echo format(\"door $1 is $2.\", door, (if is_open[door]: \"open\" else: \"closed\"))<br/>\u00a0<br/>check_doors()</pre>"}, {"lang": "Objeck", "loc": 23, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Doors <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      doors <span class=\"sy0\">:=</span> Bool<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>pass <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> pass <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> pass <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        doors<span class=\"br0\">[</span><span class=\"br0\">(</span>pass <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>pass <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>        IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Door #\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" is \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"st0\">\"open.\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>          <span class=\"st0\">\"closed.\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@import Foundation;<br/>\u00a0<br/>int main(int argc, const char * argv[]) {<br/>    @autoreleasepool {<br/>\u00a0<br/>        // Create a mutable array<br/>        NSMutableArray *doorArray = [@[] mutableCopy];<br/>\u00a0<br/>        // Fill the doorArray with 100 closed doors<br/>        for (NSInteger i = 0; i &lt; 100; ++i) {<br/>            doorArray[i] = @NO;<br/>        }<br/>\u00a0<br/>        // Do the 100 passes<br/>        for (NSInteger pass = 0; pass &lt; 100; ++pass) {<br/>            for (NSInteger door = pass; door &lt; 100; door += pass+1) {<br/>                doorArray[door] = [doorArray[door]  isEqual: @YES]\u00a0? @NO\u00a0: @YES;<br/>            }<br/>        }<br/>\u00a0<br/>        // Print the results<br/>        [doorArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {<br/>            if ([obj isEqual: @YES]) {<br/>                NSLog(@\"Door number\u00a0%lu is open\", idx + 1);<br/>            }<br/>        }];<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 19, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> max_doors <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show_doors <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i x <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Door\u00a0%d is\u00a0%s\\n\"</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                        <span class=\"br0\">(</span><span class=\"kw1\">if</span> x <span class=\"kw1\">then</span> <span class=\"st0\">\"open\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> flip_doors doors <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> max_doors <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> flip idx <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> idx <span class=\"sy0\">&lt;</span> max_doors <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        doors<span class=\"sy0\">.</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">not</span> doors<span class=\"sy0\">.</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        flip <span class=\"br0\">(</span>idx <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">in</span> flip <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  doors<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  show_doors <span class=\"br0\">(</span>flip_doors <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make max_doors <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 14, "block": "<pre class=\"octave highlighted_source\">doors <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">100</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy4\">:</span><span class=\"nu0\">100</span><br/>    doors<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfor</span><br/><span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">100</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> doors<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    s <span class=\"sy3\">=</span> <span class=\"co4\">\"open\"</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    s <span class=\"sy3\">=</span> <span class=\"co4\">\"closed\"</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\u00a0%s\\n\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">,</span> s<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfor</span></pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: doors<br/>| i j l |<br/>   100 #[ false ] Array init dup -&gt;l<br/>   100 loop: i [ <br/>      i 100 i step: j [ l put(j, l at(j) not) ] <br/>      ] <br/>   l .\u00a0;<br/>\u00a0</pre>"}, {"lang": "Onyx", "loc": 9, "block": "<pre class=\"text highlighted_source\">$Door dict def<br/>1 1 100 {Door exch false put} for<br/>$Toggle {dup Door exch get not Door up put} def<br/>$EveryNthDoor {dup 100 {Toggle} for} def<br/>$Run {1 1 100 {EveryNthDoor} for} def<br/>$ShowDoor {dup `Door no. ' exch cvs cat ` is ' cat<br/>  exch Door exch get {`open.\\n'}{`shut.\\n'} ifelse cat<br/>  print flush} def<br/>Run 1 1 100 {ShowDoor} for</pre>"}, {"lang": "ooRexx", "loc": 38, "block": "<pre class=\"oorexx highlighted_source\">doors = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>    <span class=\"co1\">-- array containing all of the doors</span><br/><span class=\"kw1\">do</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> doors~size     <span class=\"co1\">-- initialize with a collection of closed doors</span><br/>   doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"sy0\">.</span>door~new<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">do</span> inc = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> doors~size<br/>  <span class=\"kw1\">do</span> d = inc <span class=\"kw2\">to</span> doors~size <span class=\"kw2\">by</span> inc<br/>    doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span>~toggle<br/>  <span class=\"kw3\">end</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"The open doors after 100 passes:\"</span><br/><span class=\"kw1\">do</span> door <span class=\"kw2\">over</span> doors<br/>  <span class=\"kw1\">if</span> door~isopen <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> door<br/><span class=\"kw3\">end</span><br/>\u00a0<br/>::class door           <span class=\"co1\">-- simple class to represent a door</span><br/>::method init          <span class=\"co1\">-- initialize an instance of a door</span><br/>  <span class=\"kw1\">expose</span> id state      <span class=\"co1\">-- instance variables of a door</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> id    <span class=\"co1\">-- set the id</span><br/>  state = <span class=\"sy0\">.</span>false       <span class=\"co1\">-- initial state is closed</span><br/>\u00a0<br/>::method toggle        <span class=\"co1\">-- toggle the state of the door</span><br/>  <span class=\"kw1\">expose</span> state<br/>  state = <span class=\"sy0\">\\</span>state<br/>\u00a0<br/>::method isopen        <span class=\"co1\">-- test if the door is open</span><br/>  <span class=\"kw1\">expose</span> state<br/>  <span class=\"kw1\">return</span> state<br/>\u00a0<br/>::method string        <span class=\"co1\">-- return a string value for a door</span><br/>  <span class=\"kw1\">expose</span> state id<br/>  <span class=\"kw1\">if</span> state <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Door\"</span> id <span class=\"st0\">\"is open\"</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Door\"</span> id <span class=\"st0\">\"is closed\"</span><br/>\u00a0<br/>::method state         <span class=\"co1\">-- return door state as a descriptive string</span><br/>  <span class=\"kw1\">expose</span> state<br/>  <span class=\"kw1\">if</span> state <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"open\"</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"closed\"</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 22, "block": "<pre class=\"text highlighted_source\">DEFINE VARIABLE lopen   AS LOGICAL     NO-UNDO EXTENT 100.<br/>DEFINE VARIABLE idoor   AS INTEGER     NO-UNDO.<br/>DEFINE VARIABLE ipass   AS INTEGER     NO-UNDO.<br/>DEFINE VARIABLE cresult AS CHARACTER   NO-UNDO.<br/>\u00a0<br/>DO ipass = 1 TO 100:<br/>   idoor = 0.<br/>   DO WHILE idoor &lt;= 100:<br/>      idoor = idoor + ipass.<br/>      IF idoor &lt;= 100 THEN<br/>         lopen[ idoor ] = NOT lopen[ idoor ].<br/>   END.<br/>END.<br/>\u00a0<br/>DO idoor = 1 TO 100:<br/>   cresult = cresult + STRING( lopen[ idoor ], \"1  /0  \" ).<br/>   IF idoor MODULO 10 = 0 THEN<br/>      cresult = cresult + \"~r\":U.<br/>END.<br/>\u00a0<br/>MESSAGE cresult VIEW-AS ALERT-BOX.<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 1, "block": "<pre>def    doors 100\nint    door[doors],i ,j, c\nstring cr,tab,pr\n'\nfor i=1 to doors\n  for j=i to doors step i\n    door[j]=1-door[j]\n    if door[j] then c++ else c--\n  next\nnext\n'\ncr=chr(13) chr(10)\npr=\"Doors Open: \" c cr cr \n'\nfor i=1 to doors\n   if door[i] then pr+=i cr\nnext\nprint pr\n</pre>"}, {"lang": "Oz", "loc": 34, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  NumDoors = 100<br/>  NumPasses = 100<br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NewDoor</span><span class=\"br0\">}</span> closed <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Toggle</span> Door<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> Door <span class=\"kw1\">of</span> closed <span class=\"kw1\">then</span> open<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> open <span class=\"kw1\">then</span> closed<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Pass</span> Doors I<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>mapInd Doors<br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Index Door<span class=\"br0\">}</span><br/>         <span class=\"kw1\">if</span> Index <span class=\"kw1\">mod</span> I <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Toggle Door<span class=\"br0\">}</span><br/>         <span class=\"kw1\">else</span> Door<br/>         <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Doors0 = <span class=\"br0\">{</span>MakeList NumDoors<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>ForAll Doors0 NewDoor<span class=\"br0\">}</span><br/>\u00a0<br/>  DoorsN = <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 NumPasses 1<span class=\"br0\">}</span> Pass Doors0<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% print open doors</span><br/>  <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>forAllInd DoorsN<br/>   <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Index Door<span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> Door <span class=\"sy0\">==</span> open <span class=\"kw1\">then</span><br/>\t <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Door \"</span><span class=\"sy0\">#</span>Index<span class=\"sy0\">#</span><span class=\"st0\">\" is open.\"</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"nu1\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"coMULTI\">/*set 100 closed doors*/</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><span class=\"kw1\">forstep</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Door \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">\" is open.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 24, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> OneHundredDoors<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>   doors <span class=\"sy1\">:</span> <span class=\"kw4\">Array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>   i<span class=\"sy1\">,</span> j\t <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>      doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> j &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>\t doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">not</span> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> i<br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Write</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'open'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>\t <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'closed'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@doors</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pass</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"re0\">$pass</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Door $_ is \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"closed\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl5i", "loc": 81, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use perl5i::2;<br/>\u00a0<br/>package doors {<br/>\u00a0<br/>  use perl5i::2;<br/>  use Const::Fast;<br/>\u00a0<br/>  const my $OPEN   =&gt; 1;<br/>  const my $CLOSED =&gt; 0;<br/>\u00a0<br/>  # ----------------------------------------<br/>  # Constructor: door-&gt;new( @args );<br/>  # input: N - how many doors?<br/>  # returns: door object<br/>  #<br/>  method new($class: @args ) {<br/>    my $self = bless {}, $class;<br/>    $self-&gt;_init( @args );<br/>    return $self;<br/>  }<br/>\u00a0<br/>  # ----------------------------------------<br/>  # class initializer.<br/>  # input: how many doors?<br/>  # sets N, creates N+1 doors ( door zero is not used ).<br/>  #<br/>  method _init( $N ) {<br/>    $self-&gt;{N} = $N;<br/>    $self-&gt;{doors} = [ ($CLOSED) x ($N+1) ];<br/>  }<br/>\u00a0<br/>  # ----------------------------------------<br/>  # $self-&gt;toggle( $door_number );<br/>  # input: number of door to toggle.<br/>  # OPEN a CLOSED door; CLOSE an OPEN  door.<br/>  #<br/>  method toggle( $which ) {<br/>    $self-&gt;{doors}[$which] = ( $self-&gt;{doors}[$which] == $OPEN<br/>                              \u00a0? $CLOSED<br/>                              \u00a0: $OPEN<br/>        \t\t     );<br/>  }<br/>\u00a0<br/>  # ----------------------------------------<br/>  # $self-&gt;toggle_n( $cycle );<br/>  # input: number.<br/>  # Toggle doors 0, $cycle, 2 * $cycle, 3 * $cycle, .. $self-&gt;{N}<br/>  #<br/>  method toggle_n( $n ) {<br/>    $self-&gt;toggle($_)<br/>      for map { $n * $_ }<br/>          ( 1 .. int( $self-&gt;{N} / $n) );<br/>\u00a0<br/>  }<br/>\u00a0<br/>  # ----------------------------------------<br/>  # $self-&gt;toggle_all();<br/>  # Toggle every door, then every other door, every third door, ...<br/>  #<br/>  method toggle_all() {<br/>    $self-&gt;toggle_n( $_ ) for ( 1 .. $self-&gt;{N} );<br/>  }<br/>\u00a0<br/>\u00a0<br/>  # ----------------------------------------<br/>  # $self-&gt;print_open();<br/>  # Print list of which doors are open.<br/>  #<br/>  method print_open() {<br/>    say join ', ', grep { $self-&gt;{doors}[$_] == $OPEN } ( 1 ... $self-&gt;{N} );<br/>  }<br/>}<br/>\u00a0<br/># ----------------------------------------------------------------------<br/># Main Thread<br/>#<br/>my $doors = doors-&gt;new(100);<br/>$doors-&gt;toggle_all();<br/>$doors-&gt;print_open();<br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@doors</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">101</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">.=</span><span class=\"kw1\">not</span> <span class=\"kw1\">for</span> <span class=\"re0\">@doors</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"sy0\">...</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Door $_ is \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span>closed open<span class=\"sy0\">&gt;</span><span class=\"br0\">[</span> <span class=\"re0\">@doors</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">sequence doors = repeat(false,100)<br/>\u00a0<br/>for i=1 to 100 do<br/>    for j=i to 100 by i do<br/>        doors[j] = not doors[j]<br/>    end for<br/>end for<br/>\u00a0<br/>for i=1 to 100 do<br/>    if doors[i] == true then<br/>        printf(1,\"Door #%d is open.\\n\", i)<br/>    end if<br/>end for</pre>"}, {"lang": "PHL", "loc": 22, "block": "<pre class=\"text highlighted_source\">module doors;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>@Integer main [<br/>\t@Array&lt;@Boolean&gt; doors = new @Array&lt;@Boolean&gt;.init(100);<br/>\tvar i = 1;<br/>\twhile (i &lt;= 100) {<br/>\t\tvar j = i-1;<br/>\t\twhile (j &lt; 100) {<br/>\t\t\tdoors.set(j, doors.get(j)::not);<br/>\t\t\tj = j + i;<br/>\t\t}<br/>\t\ti = i::inc;<br/>\t}<br/>\ti = 0;<br/>\twhile (i &lt; 100) {<br/>\t\tprintf(\"%i\u00a0%s\\n\", i+1, iif(doors.get(i), \"open\", \"closed\"));<br/>\t\ti = i::inc;<br/>\t}<br/>\treturn 0;<br/>]</pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$root</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$state</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$root</span> <span class=\"sy0\">==</span> <a href=\"http://www.php.net/ceil\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span><span class=\"re0\">$root</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'open'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'closed'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">echo</span> <span class=\"st0\">\"Door <span class=\"es4\">{$i}</span>: <span class=\"es4\">{$state}</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(let Doors (need 100)<br/>   (for I 100<br/>      (for (D (nth Doors I)  D  (cdr (nth D I)))<br/>         (set D (not (car D))) ) )<br/>   (println Doors) )</pre>"}, {"lang": "Piet", "loc": 8, "block": "<pre class=\"pike highlighted_source\">array onehundreddoors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array doors <span class=\"sy0\">=</span> allocate<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>doors<span class=\"sy0\">;</span> int i<span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>int j<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span> j&lt;<span class=\"nu0\">100</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> doors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pike", "loc": 8, "block": "<pre class=\"pike highlighted_source\">array onehundreddoors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array doors <span class=\"sy0\">=</span> allocate<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>doors<span class=\"sy0\">;</span> int i<span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>int j<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span> j&lt;<span class=\"nu0\">100</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> doors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 21, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">declare</span> door<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">aligned</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> closed <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">open</span>   <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> inc<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>door <span class=\"sy0\">=</span> closed<span class=\"sy0\">;</span><br/>inc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span>inc <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> inc <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">by</span> inc<span class=\"sy0\">;</span><br/>      door<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">^</span>door<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* close door if open; open it if closed. */</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   inc <span class=\"sy0\">=</span> inc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">'Door '</span><span class=\"sy0\">,</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' is '</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> door<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">' open.'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">else</span> <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">' closed.'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PL/SQL", "loc": 33, "block": "<pre class=\"plsql highlighted_source\">\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DECLARE\"><span class=\"kw1\">DECLARE</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> doorsarray <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a> VARRAY<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OF\"><span class=\"kw1\">OF</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BOOLEAN\"><span class=\"kw1\">BOOLEAN</span></a><span class=\"sy0\">;</span><br/>  doors doorsarray <span class=\"sy0\">:=</span> doorsarray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>\u00a0<br/>doors<span class=\"sy0\">.</span>EXTEND<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">--ACCOMMODATE 100 DOORS</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> doors<span class=\"sy0\">.</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a>  <span class=\"co1\">--MAKE ALL 100 DOORS FALSE TO INITIALISE</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>     doors<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FALSE\"><span class=\"kw1\">FALSE</span></a><span class=\"sy0\">;</span>                    <br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> j <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span> <span class=\"co1\">--ITERATE THRU USING MOD LOGIC AND FLIP THE DOOR RIGHT OPEN OR CLOSE</span><br/> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> k <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>                  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IF\"><span class=\"kw1\">IF</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=MOD\"><span class=\"kw2\">MOD</span></a><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a> <br/>                     doors<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NOT\"><span class=\"kw1\">NOT</span></a> doors<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>                  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IF\"><span class=\"kw1\">IF</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> l <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> doors<span class=\"sy0\">.</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a>  <span class=\"co1\">--PRINT THE STATUS IF ALL 100 DOORS AFTER ALL ITERATION</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>PUT_LINE<span class=\"br0\">(</span><span class=\"st0\">'DOOR '</span><span class=\"sy0\">||</span>l<span class=\"sy0\">||</span><span class=\"st0\">' IS --&gt;&gt; '</span><span class=\"sy0\">||</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CASE\"><span class=\"kw1\">CASE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> SYS<span class=\"sy0\">.</span>DBMS_SQLTCB_INTERNAL<span class=\"sy0\">.</span>I_CONVERT_FROM_BOOLEAN<span class=\"br0\">(</span>doors<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'TRUE'</span> <br/>                                                                <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a> <span class=\"st0\">'OPEN'</span> <br/>                                                              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ELSE\"><span class=\"kw1\">ELSE</span></a> <span class=\"st0\">'CLOSED'</span> <br/>                                                        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 12, "block": "<pre class=\"text highlighted_source\">lvars i;<br/>lvars doors = {% for i from 1 to 100 do false endfor\u00a0%};<br/>for i from 1 to 100 do<br/>   for j from i by i to 100 do<br/>      not(doors(j)) -&gt; doors(j);<br/>   endfor;<br/>endfor;<br/>;;; Print state<br/>for i from 1 to 100 do<br/>   printf('Door ' &gt;&lt; i &gt;&lt; ' is ' &gt;&lt;<br/>            if doors(i) then 'open' else 'closed' endif, '%s\\n');<br/>endfor;</pre>"}, {"lang": "PostScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">/doors [ 100 { false } repeat ] def<br/>\u00a0<br/>1 1 100 { dup 1 sub exch 99 {<br/>        dup doors exch get not doors 3 1 roll put<br/>} for } for<br/>doors pstack</pre>"}, {"lang": "Potion", "loc": 7, "block": "<pre class=\"text highlighted_source\">square=1, i=3<br/>1 to 100(door):<br/>  if (door == square):<br/>    (\"door\", door, \"is open\") say<br/>    square += i<br/>    i += 2.<br/>.</pre>"}, {"lang": "PowerShell", "loc": 14, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$doors</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">99</span><span class=\"br0\">)</span><br/><span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">100</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"co1\"># start with all doors closed</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">100</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$step</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">100</span>; <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"re0\">$step</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>bxor <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$doornum</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$doors</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$doornum</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"st0\">\"$doornum open\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"st0\">\"$doornum closed\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ProDOS", "loc": 13, "block": "<pre class=\"text highlighted_source\">enableextensions <br/>enabledelayedexpansion<br/>editvar /newvar /value=0 /title=closed<br/>editvar /newvar /value=1 /title=open<br/>editvar /newvar /range=1-100 /increment=1 /from=2<br/>editvar /newvar /value=2 /title=next<br/>:doors<br/>for /alloccurrences (!next!-!102!) do editvar /modify /value=-open-<br/>editvar /modify /value=-next-=+1<br/>if -next- /hasvalue=100 goto\u00a0:cont else goto\u00a0:doors<br/>:cont<br/>printline\u00a0!1!-!102!<br/>stoptask</pre>"}, {"lang": "Prolog", "loc": 22, "block": "<pre class=\"prolog highlighted_source\">main <span class=\"sy1\">:-</span><br/>    forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">100</span><span class=\"sy4\">,</span>Door<span class=\"br0\">)</span><span class=\"sy4\">,</span> ignore<span class=\"br0\">(</span>display<span class=\"br0\">(</span>Door<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% show output if door is open after the 100th pass</span><br/>display<span class=\"br0\">(</span>Door<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    status<span class=\"br0\">(</span>Door<span class=\"sy4\">,</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span>\"Door ~d <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a>~n\"<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Door<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% true if Door has Status after Pass is done</span><br/>status<span class=\"br0\">(</span>Door<span class=\"sy4\">,</span> Pass<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    Pass <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>    Remainder <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Door <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> Pass<span class=\"sy4\">,</span><br/>    toggle<span class=\"br0\">(</span>Remainder<span class=\"sy4\">,</span> OldStatus<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    OldPass <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Pass <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    status<span class=\"br0\">(</span>Door<span class=\"sy4\">,</span> OldPass<span class=\"sy4\">,</span> OldStatus<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>status<span class=\"br0\">(</span>_Door<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> closed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>toggle<span class=\"br0\">(</span>Remainder<span class=\"sy4\">,</span> Status<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    Remainder <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">.</span><br/>toggle<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"sy4\">,</span> closed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>toggle<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> closed<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 19, "block": "<pre class=\"text highlighted_source\">boolean[] doors = new boolean[100];<br/>\u00a0<br/>void setup() {<br/>  for (int i = 0; i &lt; 100; i++) {<br/>    doors[i] = false;<br/>  }<br/>  for (int i = 1; i &lt; 100; i++) {<br/>    for (int j = 0; j &lt; 100; j += i) {<br/>      doors[j] =\u00a0!doors[j];<br/>    }<br/>  }<br/>  println(\"Open:\");<br/>  for (int i = 1; i &lt; 100; i++) {<br/>    if (doors[i]) {<br/>      println(i);<br/>    }<br/>  }<br/>  exit();<br/>}</pre>"}, {"lang": "Pure", "loc": 24, "block": "<pre class=\"text highlighted_source\">using system;<br/>\u00a0<br/>// initialize doors as pairs: number, status where 0 means open<br/>let doors = zip (1..100) (repeat 1);<br/>\u00a0<br/>toogle (x,y) = x,~y;<br/>\u00a0<br/>toogleEvery n d = map (tooglep n) d with<br/>                    tooglep n <a class=\"__cf_email__\" data-cfemail=\"f89cb8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>((x,_)) = toogle d if ~(x mod n);<br/>                                        = d otherwise; end;<br/>\u00a0<br/>// show description of given doors<br/>status (n,x) = (str n) + (case x of<br/>                            1 = \" close\";<br/>                            0 = \" open\"; end);<br/>\u00a0<br/>let result = foldl (\\a n -&gt; toogleEvery n a) doors (1..100);<br/>\u00a0<br/>// pretty print the result (only open doors)<br/>showResult = do (puts.status) final when<br/>               final = filter open result with<br/>                         open (_,x) = ~x;<br/>                       end; end;<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 18, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Dim</span> doors.i<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">100</span><br/>  y <span class=\"sy0\">=</span> x<br/>  <span class=\"kw1\">While</span> y <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><br/>    doors<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> doors<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">+</span> x<br/>  <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Following Doors are open:\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">If</span> doors<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pyret", "loc": 72, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data Door:<br/>  | open<br/>  | closed<br/>end<br/>\u00a0<br/>fun flip-door(d\u00a0:: Door) -&gt; Door:<br/>  cases(Door) d:<br/>    | open =&gt; closed<br/>    | closed =&gt; open<br/>  end<br/>end<br/>\u00a0<br/>\u00a0<br/>fun flip-doors(doors\u00a0:: List&lt;Door&gt;) -&gt; List&lt;Door&gt;:<br/>  doc:```Given a list of door positions, repeatedly switch the positions of<br/>      every nth door for every nth pass, and return the final list of door<br/>      positions```<br/>  for fold(flipped-doors from doors, n from range(1, doors.length() + 1)):<br/>    for map_n(m from 1, d from flipped-doors):<br/>      if num-modulo(m, n) == 0:<br/>        flip-door(d)<br/>      else:<br/>        d<br/>      end<br/>    end<br/>  end<br/>where:<br/>    flip-doors([list: closed, closed, closed]) is<br/>  [list: open, closed, closed]<br/>\u00a0<br/>  flip-doors([list: closed, closed, closed, closed]) is<br/>  [list: open, closed, closed, open]<br/>\u00a0<br/>  flip-doors([list: closed, closed, closed, closed, closed, closed]) is<br/>  [list: open, closed, closed, open, closed, closed]<br/>\u00a0<br/>  closed-100 = for map(_ from range(1, 101)): closed end<br/>  answer-100 = for map(n from range(1, 101)):<br/>    if num-is-integer(num-sqrt(n)): open<br/>    else: closed<br/>    end<br/>  end<br/>\u00a0<br/>  flip-doors(closed-100) is answer-100<br/>end<br/>\u00a0<br/>fun find-indices&lt;A&gt;(pred\u00a0:: (A -&gt; Boolean), xs\u00a0:: List&lt;A&gt;) -&gt; List&lt;Number&gt;:<br/>    doc:```Given a list and a predicate function, produce a list of index<br/>      positions where there's a match on the predicate```<br/>  ps = map_n(lam(n,e): if pred(e): n else: -1 end end, 1, xs)<br/>  ps.filter(lam(x): x &gt;= 0 end)<br/>where:<br/>  find-indices((lam(i): i == true end), [list: true,false,true]) is [list:1,3]<br/>end<br/>\u00a0<br/>\u00a0<br/>fun run(n):<br/>  doc:```Given a list of doors that are closed, make repeated passes <br/>      over the list, switching the positions of every nth door for <br/>      each nth pass. Return a list of positions in the list where the<br/>      door is Open.```<br/>  doors = repeat(n, closed)<br/>  ys = flip-doors(doors)<br/>  find-indices((lam(y): y == open end), ys)<br/>where:<br/>  run(4) is [list: 1,4]<br/>end<br/>\u00a0<br/>run(100)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\">\u00a0<br/>doors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * <span class=\"nu0\">100</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>       doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>   <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Door\u00a0%d:\"</span>\u00a0% <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'open'</span> <span class=\"kw1\">if</span> doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"st0\">'close'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Q", "loc": 1, "block": "<pre class=\"q highlighted_source\"><span class=\"re2\">`closed`open</span> <span class=\"kw1\">mod</span><span class=\"br0\">[</span>;<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"kw1\">count</span> <span class=\"kw1\">each</span> <span class=\"nu0\">1</span> <span class=\"sy0\">_</span> <span class=\"kw1\">group</span> <span class=\"kw1\">raze</span> <span class=\"kw2\">where</span> <span class=\"kw1\">each</span> <span class=\"nu0\">0</span>=t <span class=\"kw1\">mod</span><span class=\"sy0\">\\:/:</span>t:<span class=\"kw1\">til</span> <span class=\"nu0\">101</span></pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">doors_puzzle &lt;- function(ndoors=100,passes=100) {<br/>    doors &lt;- rep(FALSE,ndoors)<br/>    for (ii in seq(1,passes)) {<br/>        mask &lt;- seq(0,ndoors,ii)<br/>        doors[mask] &lt;-\u00a0!doors[mask]\t<br/>    }<br/>    return (which(doors == TRUE))<br/>}<br/>\u00a0<br/>doors_puzzle()</pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Applies fun to every step-th element of seq, leaving the others unchanged.<br/>(define (map-step fun step seq)<br/>  (for/list ([elt seq] [i (in-naturals)])<br/>    ((if (zero? (modulo i step)) fun values) elt)))<br/>\u00a0<br/>(define (toggle-nth n seq)<br/>  (map-step not n seq))<br/>\u00a0<br/>(define (solve seq)<br/>  (for/fold ([result seq]) ([_ seq] [pass (in-naturals 1)])<br/>    (toggle-nth pass result)))<br/>\u00a0<br/>(for ([door (solve (make-vector 101 #f))] [index (in-naturals)]<br/>      #:when (and door (&gt; index 0)))<br/>  (printf \"~a is open~%\" index))<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">dim</span> x <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span>, y <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw4\">dim</span> door(1 <span class=\"kw3\">to</span> 100) <span class=\"kw4\">as</span> <span class=\"kw1\">byte</span><br/>\u00a0<br/><span class=\"co1\">'initialize array<br/></span><span class=\"kw3\">for</span> x = 1 <span class=\"kw3\">to</span> 100\u00a0: door(x) = 0\u00a0: <span class=\"kw3\">next</span><br/>\u00a0<br/><span class=\"co1\">'set door values<br/></span><span class=\"kw3\">for</span> y = 1 <span class=\"kw3\">to</span> 100<br/>    <span class=\"kw3\">for</span> x = y <span class=\"kw3\">to</span> 100 <span class=\"kw3\">step</span> y<br/>        door(x) = <span class=\"kw3\">not</span> door(x)<br/>    <span class=\"kw3\">next</span> x<br/><span class=\"kw3\">next</span> y<br/>\u00a0<br/><span class=\"co1\">'print result<br/></span><span class=\"kw3\">for</span> x = 1 <span class=\"kw3\">to</span> 100<br/>    <span class=\"kw3\">if</span> door(x) <span class=\"kw3\">then</span> <span class=\"kw4\">print</span> <span class=\"st0\">\"Door \"</span> + str$(x) + <span class=\"st0\">\" = open\"</span><br/><span class=\"kw3\">next</span> <br/>\u00a0<br/><span class=\"kw3\">while</span> inkey$=<span class=\"st0\">\"\"</span>:wend<br/><span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 7, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'True=Open; False=Closed<br/></span>  <span class=\"kw4\">Dim</span> doors(100) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>   <span class=\"co1\">'Booleans default to false<br/></span>  <span class=\"kw3\">For</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 1 <span class=\"kw3\">To</span> 100<br/>    <span class=\"kw3\">For</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 1 <span class=\"kw3\">to</span> 100<br/>      <span class=\"kw3\">If</span> i <span class=\"kw4\">Mod</span> j = 0 <span class=\"kw3\">Then</span> doors(i) = <span class=\"kw3\">Not</span> doors(i)<br/>    <span class=\"kw3\">Next</span><br/>  <span class=\"kw3\">Next</span></pre>"}, {"lang": "REBOL", "loc": 5, "block": "<pre class=\"rebol highlighted_source\">doors: <span class=\"kw3\">array</span><span class=\"sy0\">/</span>initial <span class=\"nu0\">100</span> 'closed<br/><span class=\"kw2\">repeat</span> i <span class=\"nu0\">100</span> <span class=\"br0\">[</span><br/>    door: <span class=\"kw3\">at</span> doors i<br/>    <span class=\"kw2\">forskip</span> door i <span class=\"br0\">[</span><span class=\"kw3\">change</span> door <span class=\"kw2\">either</span> '<span class=\"kw3\">open</span> = <span class=\"kw3\">first</span> door <span class=\"br0\">[</span>'closed<span class=\"br0\">]</span> <span class=\"br0\">[</span>'<span class=\"kw3\">open</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 21, "block": "<pre class=\"text highlighted_source\">Red [<br/>  Purpose: \"100 Doors Problem (Perfect Squares)\"<br/>  Author: \"Barry Arthur\"<br/>  Date: \"07-Oct-2016\"<br/>]<br/>doors: make vector! [char! 8 100]<br/>repeat i 100 [change at doors i #\".\"]<br/>\u00a0<br/>repeat i 100 [<br/>    j: i<br/>    while [j &lt;= 100] [<br/>      door: at doors j<br/>      change door either #\"O\" = first door [#\".\"] [#\"O\"]<br/>      j: j + i<br/>    ]<br/>]<br/>\u00a0<br/>repeat i 10 [<br/>  print copy/part at doors (i - 1 * 10 + 1) 10<br/>]<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 3, "block": "<pre class=\"text highlighted_source\">: squared ( n-n  ) dup *\u00a0;<br/>: doors   ( n-   ) [ 1 repeat 2over squared &gt; 0; drop dup squared putn space 1+ again ] do 2drop\u00a0;<br/>100 doors</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm solves the  100 doors puzzle, doing it the hard way by opening/closing doors.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> doors <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain the optional argument from CL.*/</span><br/><span class=\"kw1\">if</span> doors==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> doors==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> doors=<span class=\"nu0\">100</span>        <span class=\"coMULTI\">/*not specified?  Then assume 100 doors*/</span><br/>                                                 <span class=\"coMULTI\">/*        0 =  the door is  closed.    */</span><br/>                                                 <span class=\"coMULTI\">/*        1 =   \"    \"   \"  open.      */</span><br/>door<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*assume all doors are closed at start.*/</span><br/>                <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> doors                <span class=\"coMULTI\">/*process a pass\u2500through for all doors.*/</span><br/>                    <span class=\"kw1\">do</span> j=#  <span class=\"kw2\">by</span> #  <span class=\"kw2\">to</span> doors       <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 every Jth door from this point.*/</span><br/>                    door<span class=\"sy0\">.</span>j= <span class=\"sy0\">\\</span>door<span class=\"sy0\">.</span>j              <span class=\"coMULTI\">/*toggle the  \"openness\"  of the door. */</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*#*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'After '</span>                doors          <span class=\"st0\">\" passes, the following doors are open:\"</span><br/><span class=\"kw1\">say</span><br/>                <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> doors<br/>                <span class=\"kw1\">if</span> door<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>k, <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*add some indentation for the output. */</span><br/>                <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*k*/</span>                     <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">doors = list(100)<br/>for i = 1 to 100<br/>doors[i] = false<br/>next<br/>\u00a0<br/>For pass = 1 To 100<br/>         For door = pass To 100<br/>             if doors[door] doors[door] = false else doors[door] = true ok<br/>         door += pass-1<br/>         Next<br/>Next<br/>\u00a0<br/>For door = 1 To 100<br/>     see \"Door (\" + door + \") is \"<br/>     If doors[door] see \"Open\" else see \"Closed\" ok<br/>     see nl<br/>Next</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">doors = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">101</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Open doors \"</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/><span class=\"br0\">(</span>i..<span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>    doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span> = doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span>^= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> i == d <span class=\"kw1\">and</span> doors<span class=\"br0\">[</span>d<span class=\"br0\">]</span> == <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">\"#{i} \"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">dim doors(100)<br/>print \"Open doors \";<br/>for i = 1 to 100 <br/>    for door = i to 100 step i<br/>        doors(door) = (doors(door) &lt;&gt; 1)<br/>        if i = door and doors(door) = 1 then   print i;\" \";<br/>    next door<br/>next i</pre>"}, {"lang": "Rust", "loc": 14, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let mut door_open = [false; 100];<br/>    for pass in 1..100 {<br/>        let mut door = pass;<br/>        while door &lt;= 100 {<br/>            door_open[door - 1] =\u00a0!door_open[door - 1];<br/>            door += pass;<br/>        }<br/>    }<br/>    for (i, &amp;is_open) in door_open.iter().enumerate() {<br/>        println!(\"Door {} is {}.\", i + 1, if is_open {\"open\"} else {\"closed\"});<br/>    }<br/>}<br/>}</pre>"}, {"lang": "S-lang", "loc": 21, "block": "<pre class=\"text highlighted_source\">variable door,<br/>    isOpen = Char_Type [101],<br/>    pass;<br/>\u00a0<br/>for (door = 1; door &lt;= 100; door++) {<br/>    isOpen[door] = 0;<br/>}<br/>\u00a0<br/>for (pass = 1; pass &lt;= 100; pass++) {<br/>    for (door = pass; door &lt;= 100; door += pass) {<br/>        isOpen[door] = not isOpen[door];<br/>    }<br/>}<br/>\u00a0<br/>for (door = 1; door &lt;= 100; door++) {<br/>    if (isOpen[door]) {<br/>        print(\"Door \" + string(door) + \":open\");<br/>    } else {<br/>        print(\"Door \" + string(door) + \":close\");<br/>    }<br/>}</pre>"}, {"lang": "Salmon", "loc": 7, "block": "<pre class=\"text highlighted_source\">variable open\u00a0:= &lt;&lt;(* --&gt; false)&gt;&gt;;<br/>for (pass; 1; pass &lt;= 100)<br/>    for (door_num; pass; door_num &lt;= 100; pass)<br/>        open[door_num]\u00a0:=\u00a0!(open[door_num]);;;<br/>iterate (door_num; [1...100])<br/>    print(\"Door \", door_num, \" is \",<br/>          (open[door_num]\u00a0? \"open.\\n\"\u00a0: \"closed.\\n\"));;</pre>"}, {"lang": "SAS", "loc": 14, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>   <span class=\"kw3\">open</span>=<span class=\"nu0\">1</span>;<br/>   <span class=\"kw3\">close</span>=<span class=\"nu0\">0</span>;<br/>   <span class=\"kw4\">array</span> Door<span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"br0\">}</span>;<br/>   <span class=\"kw5\">do</span> Pass = <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span>;<br/>      <span class=\"kw5\">do</span> Current = Pass to <span class=\"nu0\">100</span> <span class=\"kw4\">by</span> Pass;<br/>         <span class=\"kw5\">if</span> Door<span class=\"br0\">{</span>Current<span class=\"br0\">}</span> ne <span class=\"kw3\">open</span> <br/>            <span class=\"kw5\">then</span> Door<span class=\"br0\">{</span>Current<span class=\"br0\">}</span> = <span class=\"kw3\">open</span>;<br/>            <span class=\"kw5\">else</span> Door<span class=\"br0\">{</span>Current<span class=\"br0\">}</span> = <span class=\"kw3\">close</span>;<br/>      <span class=\"kw5\">end</span>;<br/>   <span class=\"kw5\">end</span>;<br/>   NumberOfOpenDoors = <span class=\"kw3\">sum</span><span class=\"br0\">(</span>of Door<span class=\"br0\">{</span><span class=\"coMULTI\">*});</span><br/>   <span class=\"kw3\">put</span> <span class=\"st0\">\"Number of Open Doors:  \"</span> NumberOfOpenDoors; <br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>      r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span> map <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"sy0\">_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> reduceLeft <span class=\"br0\">(</span><span class=\"sy0\">_</span>^<span class=\"sy0\">_</span><span class=\"br0\">)</span>                 <br/>    <span class=\"br0\">}</span> println <span class=\"br0\">(</span>i +<span class=\"st0\">\" \"</span>+ <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"st0\">\"open\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sather", "loc": 22, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    pass, door\u00a0:INT;<br/>    doors\u00a0:ARRAY{BOOL}\u00a0:= #(100);<br/>    loop <br/>      doors[0.upto!(99)]\u00a0:= false;<br/>    end;<br/>    pass\u00a0:= 0;<br/>    loop while!(pass &lt; 100);<br/>      door\u00a0:= pass;<br/>      loop while! (door &lt; 100);<br/>        doors[door]\u00a0:= ~doors[door];<br/>\tdoor\u00a0:= door + pass + 1<br/>      end;<br/>      pass\u00a0:= pass + 1;<br/>    end;<br/>    loop<br/>      door\u00a0:= 0.upto!(99);<br/>      #OUT + (door+1) + \" \" + doors[door] + \"\\n\";<br/>    end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scheme", "loc": 26, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>doors<span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>doors doors<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> door <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> doors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"kw1\">l</span><span class=\"br0\">)</span> <br/>           <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <br/>           <span class=\"br0\">(</span>printf <span class=\"st0\">\"~nDoor ~a is ~a\"</span> <br/>                   <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>                   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> doors i<span class=\"br0\">)</span> <span class=\"st0\">\"open\"</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>door <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>doors doors<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>all i<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>doors<span class=\"sy0\">*</span><span class=\"br0\">)</span> doors<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <br/>           <span class=\"br0\">(</span><span class=\"kw1\">let</span> flip <span class=\"br0\">(</span><span class=\"br0\">(</span>idx <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> idx <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>doors<span class=\"sy0\">*</span><span class=\"br0\">)</span> <br/>                    <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>all <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                   <span class=\"br0\">(</span><span class=\"kw1\">else</span> <br/>                    <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> doors idx <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> doors idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>flip <span class=\"br0\">(</span><span class=\"sy0\">+</span> idx i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>all <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>doors <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>doors <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>doors<span class=\"sy0\">*</span> #f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 14, "block": "<pre class=\"text highlighted_source\">doors=zeros(1,100);<br/>for i = 1:100<br/>  for j = i:i:100<br/>    doors(j) = ~doors(j);<br/>  end<br/>end<br/>for i = 1:100<br/>  if ( doors(i) )<br/>    s = \"open\";<br/>  else<br/>    s = \"closed\";<br/>  end<br/>  printf(\"%d\u00a0%s\\n\", i, s);<br/>end</pre>"}, {"lang": "Scratch", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array boolean: doorOpen is 100 times FALSE;<br/>    var integer: pass is 0;<br/>    var integer: index is 0;<br/>    var array[boolean] string: closedOrOpen is [boolean] (\"closed\", \"open\");<br/>  begin<br/>    for pass range 1 to 100 do<br/>      for key index range doorOpen do<br/>        if index rem pass = 0 then<br/>          doorOpen[index]\u00a0:= not doorOpen[index];<br/>        end if;<br/>      end for;<br/>    end for;<br/>    for key index range doorOpen do<br/>      write(index lpad 3 &lt;&amp; \" is \" &lt;&amp; closedOrOpen[doorOpen[index]] rpad 7);<br/>      if index rem 5 = 0 then<br/>        writeln;<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Seed7", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array boolean: doorOpen is 100 times FALSE;<br/>    var integer: pass is 0;<br/>    var integer: index is 0;<br/>    var array[boolean] string: closedOrOpen is [boolean] (\"closed\", \"open\");<br/>  begin<br/>    for pass range 1 to 100 do<br/>      for key index range doorOpen do<br/>        if index rem pass = 0 then<br/>          doorOpen[index]\u00a0:= not doorOpen[index];<br/>        end if;<br/>      end for;<br/>    end for;<br/>    for key index range doorOpen do<br/>      write(index lpad 3 &lt;&amp; \" is \" &lt;&amp; closedOrOpen[doorOpen[index]] rpad 7);<br/>      if index rem 5 = 0 then<br/>        writeln;<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>main:=<br/>\tlet<br/>\t\tdoors\u00a0:= flipDoors(duplicate(false, 100), 1);<br/>\t\topen[i]\u00a0:= i when doors[i];<br/>\tin<br/>\t\topen;<br/>\u00a0<br/>flipDoors(doors(1), count)\u00a0:=<br/>\tlet<br/>\t\tnewDoors[i]\u00a0:= not doors[i] when i mod count = 0 else doors[i];<br/>\tin<br/>\t\tdoors when count &gt;= 100 else flipDoors(newDoors, count + 1);<br/>\u00a0</pre>"}, {"lang": "SETL", "loc": 18, "block": "<pre class=\"text highlighted_source\">program hundred_doors;<br/>\u00a0<br/>const toggle\u00a0:= {['open', 'closed'], ['closed', 'open']};<br/>\u00a0<br/>doorStates\u00a0:= ['closed'] * 100;<br/>\u00a0<br/>(for interval in [1..100])<br/>  doorStates\u00a0:= [if i mod interval = 0 then<br/>                    toggle(prevState) else<br/>                    prevState end:<br/>                 prevState = doorStates(i)];<br/>end;<br/>\u00a0<br/>(for finalState = doorStates(i))<br/>  print('door', i, 'is', finalState);<br/>end;<br/>\u00a0<br/>end program;</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">var doors = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>pass<span class=\"sy0\">|</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pass <span class=\"st0\">`divides`</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\u00a0:= <span class=\"kw2\">false</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">not</span>!<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">\"Door\u00a0%3d is\u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i, doors<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\u00a0? <span class=\"st0\">'open'</span>\u00a0: <span class=\"st0\">'closed'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span></pre>"}, {"lang": "Simula", "loc": 16, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    INTEGER LIMIT = 100, door, stride;<br/>    BOOLEAN ARRAY DOORS(1:LIMIT);<br/>    TEXT intro;<br/>\u00a0<br/>    FOR stride\u00a0:= 1 STEP 1 UNTIL LIMIT DO<br/>        FOR door\u00a0:= stride STEP stride UNTIL LIMIT DO<br/>            DOORS(door)\u00a0:= NOT DOORS(door);<br/>\u00a0<br/>    intro\u00a0:- \"All doors closed but \";<br/>    FOR door\u00a0:= 1 STEP 1 UNTIL LIMIT DO<br/>        IF DOORS(door) THEN BEGIN<br/>            OUTTEXT(intro); OUTINT(door, 0); intro\u00a0:- \", \"<br/>        END;<br/>    OUTIMAGE<br/>END.</pre>"}, {"lang": "Slate", "loc": 9, "block": "<pre class=\"text highlighted_source\">define: #a -&gt; (Array newSize: 100).<br/>a infect: [|\u00a0:_ | False].<br/>\u00a0<br/>a keysDo: [|\u00a0:pass |<br/>  pass to: a indexLast by: pass do: [|\u00a0:door |<br/>    a at: door infect: #not `er]].<br/>\u00a0<br/>a keysAndValuesDo: [|\u00a0:door\u00a0:isOpen |<br/>  inform: 'door #'\u00a0; door\u00a0; ' is '\u00a0; (isOpen ifTrue: ['open'] ifFalse: ['closed'])].</pre>"}, {"lang": "Smalltalk", "loc": 15, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">a</span>|<br/><span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Array</span> new: <span class=\"re5\">100</span> .<br/><span class=\"re5\">1</span> to: <span class=\"re5\">100</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | a at: <span class=\"re5\">i</span> put: <span class=\"kw1\">false</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">1</span> to: <span class=\"re5\">100</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">pass</span> |<br/>  pass to: <span class=\"re5\">100</span> by: <span class=\"re5\">pass</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">door</span> |<br/>    a at: <span class=\"re5\">door</span> put: <span class=\"br0\">(</span><span class=\"re5\">a</span> at: <span class=\"re5\">door</span><span class=\"br0\">)</span> not .<br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"output\"</span><br/><span class=\"nu0\">1</span> to: <span class=\"re5\">100</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">door</span> |<br/>   <span class=\"br0\">(</span> <span class=\"st0\">'door #%1 is\u00a0%2'</span>\u00a0%<br/>     <span class=\"br0\">{</span> door . <span class=\"br0\">(</span><span class=\"re5\">a</span> at: <span class=\"re5\">door</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span> <span class=\"st0\">'open'</span> <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> <span class=\"st0\">'closed'</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> displayNl<br/><span class=\"br0\">]</span></pre>"}, {"lang": "smart BASIC", "loc": 9, "block": "<pre class=\"qbasic highlighted_source\">x<span class=\"sy0\">=</span><span class=\"nu0\">1</span>!y<span class=\"sy0\">=</span><span class=\"nu0\">3</span>!z<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Open doors: \"</span>;x;<span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">DO</span><br/>    z<span class=\"sy0\">=</span>x<span class=\"sy0\">+</span>y<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> z;<span class=\"st0\">\" \"</span>;<br/>    x<span class=\"sy0\">=</span>z<br/>    y<span class=\"sy0\">=</span>y<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">UNTIL</span> z<span class=\"sy0\">&gt;=</span><span class=\"nu0\">100</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a></pre>"}, {"lang": "SNOBOL4", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\t\tDEFINE('PASS(A,I),O')\t\t:(PASS.END)<br/>PASS\t\tO = 0<br/>PASS.LOOP\tO = O + I<br/>\t\tEQ(A&lt;O&gt;,1)\t\t\t:S(PASS.1)F(PASS.0)<br/>PASS.0\t\tA&lt;O&gt; = 1\t\t\t:S(PASS.LOOP)F(RETURN)<br/>PASS.1\t\tA&lt;O&gt; = 0\t\t\t:S(PASS.LOOP)F(RETURN)<br/>PASS.END<br/>\u00a0<br/>MAIN\t\tD = ARRAY(100,0)<br/>\t\tI = 0<br/>\u00a0<br/>MAIN.LOOP\tI = LE(I,100) I + 1\t\t:F(OUTPUT)<br/>\t\tPASS(D,I)\t\t\t:(MAIN.LOOP)<br/>\u00a0<br/>OUTPUT\t\tI = 1\u00a0; OPEN = 'Opened doors are: '<br/>OUTPUT.LOOP\tOPEN = OPEN EQ(D&lt;I&gt;,1) \" \" I<br/>\t\tI = LE(I,100) I + 1\t\t:S(OUTPUT.LOOP)F(OUTPUT.WRITE)<br/>OUTPUT.WRITE\tOUTPUT = OPEN<br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "Sparkling", "loc": 21, "block": "<pre class=\"text highlighted_source\">/* declare the variables */<br/>var isOpen = {};<br/>var pass, door;<br/>\u00a0<br/>/* initialize the doors */<br/>for door = 0; door &lt; 100; door++ {<br/>\tisOpen[door] = true;<br/>}<br/>\u00a0<br/>/* do the 99 remaining passes */<br/>for pass = 1; pass &lt; 100; ++pass {<br/>\tfor door = pass; door &lt; 100; door += pass+1 {<br/>  \t\tisOpen[door] =\u00a0!isOpen[door];<br/>\t}<br/>}<br/>\u00a0<br/>/* print the results */<br/>var states = { true: \"open\", false: \"closed\" };<br/>for door = 0; door &lt; 100; door++ {<br/>\tprintf(\"Door #%d is\u00a0%s.\\n\", door+1, states[isOpen[door]]);<br/>}</pre>"}, {"lang": "SQL", "loc": 25, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">DECLARE</span>\t@sqr <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>\t\t@i <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>\t\t@door <span class=\"kw1\">INT</span>;<br/>\u00a0<br/><span class=\"kw1\">SELECT</span> @sqr <span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>\t@i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>\t@door <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;\t<br/>\u00a0<br/>WHILE<span class=\"br0\">(</span>@door <span class=\"sy0\">&lt;=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">IF</span><span class=\"br0\">(</span>@door <span class=\"sy0\">=</span> @sqr<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tPRINT <span class=\"st0\">'Door '</span> <span class=\"sy0\">+</span> RTRIM<span class=\"br0\">(</span><span class=\"kw1\">CAST</span><span class=\"br0\">(</span>@door <span class=\"kw1\">AS</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">' is open.'</span>;<br/>\t\t<span class=\"kw1\">SET</span> @sqr<span class=\"sy0\">=</span> @sqr<span class=\"sy0\">+</span>@i;<br/>\t\t<span class=\"kw1\">SET</span> @i<span class=\"sy0\">=</span>@i<span class=\"sy0\">+</span><span class=\"nu0\">2</span>;<br/>\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tPRINT <span class=\"st0\">'Door '</span> <span class=\"sy0\">+</span> RTRIM<span class=\"br0\">(</span><span class=\"kw1\">CONVERT</span><span class=\"br0\">(</span><span class=\"kw1\">CHAR</span><span class=\"sy0\">,</span>@door<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">' is closed.'</span>;<br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">SET</span> @door <span class=\"sy0\">=</span> @door <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "SQL PL", "loc": 43, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">SET</span> SERVEROUTPUT <span class=\"kw1\">ON</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">TYPE</span> DOORS_ARRAY <span class=\"kw1\">AS</span> <span class=\"kw1\">BOOLEAN</span> ARRAY <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span>;<br/> <span class=\"kw1\">DECLARE</span> DOORS DOORS_ARRAY;<br/> <span class=\"kw1\">DECLARE</span> I <span class=\"kw1\">SMALLINT</span>;<br/> <span class=\"kw1\">DECLARE</span> J <span class=\"kw1\">SMALLINT</span>;<br/> <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">STATUS</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/> <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">SIZE</span> <span class=\"kw1\">SMALLINT</span> <span class=\"kw1\">DEFAULT</span> <span class=\"nu0\">100</span>;<br/>\u00a0<br/> <span class=\"co1\">-- Initializes the array, with all spaces (doors) as false (closed).</span><br/> <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/> WHILE <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">SIZE</span><span class=\"br0\">)</span> DO<br/>  <span class=\"kw1\">SET</span> DOORS<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">FALSE</span>;<br/>  <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/> <span class=\"kw1\">END</span> WHILE;<br/>\u00a0<br/> <span class=\"co1\">-- Processes the doors.</span><br/> <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/> WHILE <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">SIZE</span><span class=\"br0\">)</span> DO<br/>  <span class=\"kw1\">SET</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>  WHILE <span class=\"br0\">(</span>J <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">SIZE</span><span class=\"br0\">)</span> DO<br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>J<span class=\"sy0\">,</span> I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>DOORS<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>     <span class=\"kw1\">SET</span> DOORS<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">FALSE</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>     <span class=\"kw1\">SET</span> DOORS<span class=\"br0\">[</span>J<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">TRUE</span>;<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>;<br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>;<br/>   <span class=\"kw1\">SET</span> J <span class=\"sy0\">=</span> J <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">END</span> WHILE;<br/>  <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/> <span class=\"kw1\">END</span> WHILE;<br/>\u00a0<br/> <span class=\"co1\">-- Prints the final status o the doors.</span><br/> <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/> WHILE <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">SIZE</span><span class=\"br0\">)</span> DO<br/>  <span class=\"kw1\">SET</span> <span class=\"kw1\">STATUS</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">CASE</span> <span class=\"kw1\">WHEN</span> <span class=\"br0\">(</span>DOORS<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"st0\">'OPEN'</span> <span class=\"kw1\">ELSE</span> <span class=\"st0\">'CLOSED'</span> <span class=\"kw1\">END</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">CALL</span> DBMS_OUTPUT<span class=\"sy0\">.</span>PUT_LINE<span class=\"br0\">(</span><span class=\"st0\">'Door '</span> <span class=\"sy0\">||</span> I <span class=\"sy0\">||</span> <span class=\"st0\">' is '</span><span class=\"sy0\">||</span> <span class=\"kw1\">STATUS</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/> <span class=\"kw1\">END</span> WHILE;<br/><span class=\"kw1\">END</span> @</pre>"}, {"lang": "Standard ML", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>datatype Door = Closed | Opened<br/>\u00a0<br/>fun toggle Closed = Opened<br/>  | toggle Opened = Closed<br/>\u00a0<br/>fun pass (steps, doors) = List.mapi (fn (k, door) =&gt; if (k+1) mod steps = 0 then toggle door else door) doors<br/>\u00a0<br/>(* [1..n] *)<br/>fun runs n = List.tabulate (n, fn k =&gt; k+1)<br/>\u00a0<br/>fun run n =<br/>\tlet<br/>\t\tval initialdoors = List.tabulate (n, fn _ =&gt; Closed)<br/>\t\tval runs = runs n<br/>\tin <br/>\t\tfoldl pass initialdoors runs<br/>\tend<br/>\u00a0<br/>fun opened_doors n = List.mapPartiali (fn (k, Closed) =&gt; NONE | (k, Opened) =&gt; SOME (k+1)) (run n)<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 22, "block": "<pre class=\"text highlighted_source\">clear<br/>set obs 100<br/>gen doors=0<br/>gen index=_n<br/>forvalues i=1/100 {<br/>\tquietly replace doors=1-doors if mod(_n,`i')==0<br/>}<br/>list index if doors, noobs noheader<br/>\u00a0<br/>  +-------+<br/>  |     1 |<br/>  |     4 |<br/>  |     9 |<br/>  |    16 |<br/>  |    25 |<br/>  |-------|<br/>  |    36 |<br/>  |    49 |<br/>  |    64 |<br/>  |    81 |<br/>  |   100 |<br/>  +-------+</pre>"}, {"lang": "SuperCollider", "loc": 6, "block": "<pre class=\"text highlighted_source\">(<br/>var n = 100, doors = false\u00a0! n;<br/>var pass = { |j| (0, j .. n-1).do { |i| doors[i] = doors[i].not } };<br/>(1..n-1).do(pass);<br/>doors.selectIndices { |open| open }; // all are closed except [ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81 ]<br/>)</pre>"}, {"lang": "Swift", "loc": 21, "block": "<pre class=\"text highlighted_source\">/* declare enum to identify the state of a door */<br/>enum DoorState\u00a0: String {<br/>    case Opened = \"Opened\"<br/>    case Closed = \"Closed\"<br/>}<br/>\u00a0<br/>/* declare list of doors state and initialize them */<br/>var doorsStateList = [DoorState](count: 100, repeatedValue: DoorState.Closed)<br/>\u00a0<br/>/* do the 100 passes */<br/>for i in 1...100 {<br/>    /* map on a strideTo instance to only visit the needed doors on each iteration */<br/>    map(stride(from: i - 1, to: 100, by: i)) {<br/>        doorsStateList[$0] = doorsStateList[$0] == .Opened\u00a0? .Closed\u00a0: .Opened<br/>    }<br/>}<br/>\u00a0<br/>/* print the results */<br/>for (index, item) in enumerate(doorsStateList) {<br/>    println(\"Door \\(index+1) is \\(item.rawValue)\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 11, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">set</span> n <span class=\"nu0\">100</span><br/><span class=\"kw1\">set</span> doors <span class=\"br0\">[</span><span class=\"kw2\">concat</span> - <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> step <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$step</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> step<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$step</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"re0\">$step</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lset</span> doors <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$doors</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"door\u00a0%d is\u00a0%s\"</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$doors</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"open\"</span>\u00a0: <span class=\"st0\">\"closed\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre>seq(0,X,1,100\nFor(X,1,100\n0 or Ans-not(fPart(cumSum(1 or Ans)/A\nEnd\nPause Ans\n</pre>"}, {"lang": "TI-89 BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">Define doors(fast) = Func<br/>  Local doors,i,j<br/>  seq(false,x,1,100)\u00a0? doors<br/>  If fast Then<br/>    For i,1,10,1<br/>      true\u00a0? doors[i^2]<br/>    EndFor<br/>  Else<br/>    For i,1,100,1<br/>      For j,i,100,i<br/>        not doors[j]\u00a0? doors[j]<br/>      EndFor<br/>    EndFor<br/>  EndIf<br/>  Return doors<br/>EndFunc</pre>"}, {"lang": "TorqueScript", "loc": 5, "block": "<pre class=\"text highlighted_source\">for(%steps = 1;\u00a0%a &lt;= 100;\u00a0%a++)<br/>\tfor(%current =\u00a0%steps;\u00a0%current &lt;= 100;\u00a0%current +=\u00a0%steps)<br/>\t\t%door[%current] =\u00a0!%door[%current];<br/>for(%a = 1;\u00a0%a &lt;= 100;\u00a0%a++)<br/>\techo(\"Door #\" @\u00a0%a @ \" is\" SPC\u00a0%door[%current]\u00a0? \"Open\"\u00a0: \"Closed\" @ \".\");</pre>"}, {"lang": "TSE SAL", "loc": 89, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>// library: math: get: task: door: open: close100 &lt;description&gt;&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.11&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmaocl.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, mo, 31-12-2012 22:03:16]<br/>PROC PROCMathGetTaskDoorOpenClose( INTEGER doorMaxI, INTEGER passMaxI )<br/> // e.g. PROC Main()<br/> // e.g.  PROCMathGetTaskDoorOpenClose( 100, 100 )<br/> // e.g. END<br/> // e.g.<br/> // e.g. &lt;F12&gt; Main()<br/> //<br/> // ===<br/> //<br/> // The output will be:<br/> //<br/> // door 1 is open<br/> // door 4 is open<br/> // door 9 is open<br/> // door 16 is open<br/> // door 25 is open<br/> // door 36 is open<br/> // door 49 is open<br/> // door 64 is open<br/> // door 81 is open<br/> // door 100 is open<br/> // all other doors are closed<br/> //<br/> // ===<br/> //<br/> INTEGER passMinI = 1<br/> INTEGER passI = 0<br/> //<br/> INTEGER doorminI = 1<br/> INTEGER doorI = 0<br/> //<br/> STRING s[255] = \"\"<br/> //<br/> INTEGER bufferI = 0<br/> //<br/> PushPosition()<br/> bufferI = CreateTempBuffer()<br/> PopPosition()<br/> //<br/> FOR doorI = doorMinI TO doorMaxI<br/>  //<br/>  SetGlobalInt( Format( \"doorsI\", doorI ), 0 )<br/>  //<br/> ENDFOR<br/> //<br/> FOR passI = passMinI TO passMaxI<br/>  //<br/>  doorI = passI - passI<br/>  //<br/>  REPEAT<br/>   //<br/>   doorI = doorI + passI<br/>   //<br/>   SetGlobalInt( Format( \"doorsI\", doorI ), NOT( GetGlobalInt( Format( \"doorsI\", doorI ) ) ) )<br/>   //<br/>  UNTIL ( doorI &gt;= doorMaxI )<br/>  //<br/> ENDFOR<br/> //<br/> FOR doorI = doorMinI TO doorMaxI<br/>  //<br/>  IF ( GetGlobalInt( Format( \"doorsI\", doorI ) ) &gt; 0 )<br/>   //<br/>   s = \"open\"<br/>   //<br/>   AddLine( Format( \"door\", \" \", doorI, \" \", \"is\", \" \", s ), bufferI )<br/>   //<br/>  ELSE<br/>   //<br/>   s = \"closed\"<br/>   //<br/>  ENDIF<br/>  //<br/> ENDFOR<br/> //<br/> AddLine( \"all other doors are closed\", bufferI )<br/> //<br/> GotoBufferId( bufferI )<br/> //<br/>END<br/>\u00a0<br/>PROC Main()<br/> PROCMathGetTaskDoorOpenClose( 100, 100 )<br/>END<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "True BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>! Optimized solution with True BASIC<br/>\u00a0<br/>OPTION NOLET<br/>x = 1 <br/>y = 3 <br/>z = 0<br/>PRINT STR$(x) &amp; \" Open\"<br/>DO UNTIL z &gt;= 100<br/>z = x + y<br/>PRINT STR$(z) &amp; \" Open\"<br/>x = z <br/>y = y + 2<br/>LOOP<br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>DICT doors create<br/>COMPILE<br/>LOOP door=1,100<br/> LOOP pass=1,100<br/> SET go=MOD (door,pass)<br/> DICT doors lookup door,num,cnt,status<br/>   IF (num==0) THEN<br/>     SET status=\"open\"<br/>     DICT doors add  door,num,cnt,status<br/>   ELSE<br/>    IF (go==0) THEN<br/>       IF (status==\"closed\") THEN<br/>         SET status=\"open\"<br/>       ELSE<br/>         SET status=\"closed\"<br/>       ENDIF<br/>     DICT doors update door,num,cnt,status<br/>     ENDIF<br/>   ENDIF<br/> ENDLOOP<br/>ENDLOOP<br/>ENDCOMPILE<br/>DICT doors unload door,num,cnt,status<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 10, "block": "<pre class=\"text highlighted_source\">(defun hyaku-mai-tobira ()<br/>  (let ((doors (vector 100)))<br/>    (each ((i (range 0 99)))<br/>      (each ((j (range i 99 (+ i 1))))<br/>        (flip [doors j])))<br/>    doors))<br/>\u00a0<br/>(each ((counter (range 1))<br/>       (door (hyaku-mai-tobira)))<br/>  (put-line `door @counter is @(if door \"open\" \"closed\")`))</pre>"}, {"lang": "uBasic/4tH", "loc": 9, "block": "<pre class=\"text highlighted_source\">FOR p = 1 TO 100<br/>  FOR d = p TO 100 STEP p<br/>    @(d) = @(d) = 0<br/>  NEXT d<br/>NEXT p<br/>\u00a0<br/>FOR d= 1 TO 100<br/>  IF @(d) PRINT \"Door \";d;\" is open\"<br/>NEXT d</pre>"}, {"lang": "Uniface", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>entry LP_DO_IT<br/>\u00a0<br/>    variables<br/>        string  V_DOORS<br/>        boolean V_DOOR_STATE<br/>        string  V_DOOR_STATE_S<br/>        numeric V_IDX<br/>        numeric V_TOTAL_DOORS<br/>        string  V_DOOR_STATE_LIST<br/>        numeric V_LOOP_COUNT<br/>    endvariables<br/>\u00a0<br/>    V_TOTAL_DOORS = 100<br/>    putitem V_DOORS, V_TOTAL_DOORS, 0<br/>\u00a0<br/>    V_DOORS = $replace (V_DOORS, 1, \"\u00b7;\", \"\u00b7;0\", -1)<br/>\u00a0<br/>    putitem/id V_DOOR_STATE_LIST, \"1\", \"Open\"<br/>    putitem/id V_DOOR_STATE_LIST, \"0\", \"Close\"<br/>\u00a0<br/>    V_LOOP_COUNT = 1<br/>    while (V_LOOP_COUNT &lt;= V_TOTAL_DOORS)<br/>        V_IDX = 0<br/>        V_IDX = V_IDX + V_LOOP_COUNT<br/>\u00a0<br/>        getitem V_DOOR_STATE, V_DOORS, V_IDX<br/>        while (V_IDX &lt;= V_TOTAL_DOORS)<br/>\u00a0<br/>            V_DOOR_STATE =\u00a0!V_DOOR_STATE<br/>            getitem/id V_DOOR_STATE_S, V_DOOR_STATE_LIST, $number(V_DOOR_STATE)<br/>            putitem V_DOORS, V_IDX, V_DOOR_STATE<br/>\u00a0<br/>            V_IDX = V_IDX + V_LOOP_COUNT<br/>            getitem V_DOOR_STATE, V_DOORS, V_IDX<br/>        endwhile<br/>\u00a0<br/>        V_LOOP_COUNT = V_LOOP_COUNT + 1<br/>\u00a0<br/>    endwhile<br/>\u00a0<br/>    V_IDX = 1<br/>    getitem V_DOOR_STATE, V_DOORS, V_IDX<br/>    while (V_IDX &lt;= V_TOTAL_DOORS)<br/>        getitem/id V_DOOR_STATE_S, V_DOOR_STATE_LIST, $number(V_DOOR_STATE)<br/>        if (V_DOOR_STATE)<br/>            putmess \"Door\u00a0%%V_IDX%%% is finally\u00a0%%V_DOOR_STATE_S%%%\"<br/>        endif<br/>\u00a0<br/>        V_IDX = V_IDX + 1<br/>        getitem V_DOOR_STATE, V_DOORS, V_IDX<br/>    endwhile<br/>\u00a0<br/>end\u00a0; LP_DO_IT<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 22, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#! /bin/bash</span><br/>\u00a0<br/><span class=\"kw3\">declare</span> <span class=\"re5\">-a</span> doors<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    doors<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">j</span>=i; j <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span>; j += i<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"re1\">$i</span> <span class=\"re1\">$j</span><br/>\tdoors<span class=\"br0\">[</span><span class=\"re1\">$j</span><span class=\"br0\">]</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span> doors<span class=\"br0\">[</span>j<span class=\"br0\">]</span> ^ <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${doors[$i]}</span> <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t<span class=\"re2\">op</span>=<span class=\"st0\">\"closed\"</span><br/>    <span class=\"kw1\">else</span><br/>\t<span class=\"re2\">op</span>=<span class=\"st0\">\"open\"</span><br/>    <span class=\"kw1\">fi</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$i</span> <span class=\"re1\">$op</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Ursa", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#<br/># 100 doors<br/>#<br/>\u00a0<br/>decl int i j<br/>decl boolean&lt;&gt; doors<br/>\u00a0<br/># append 101 boolean values to doors stream<br/>for (set i 0) (or (&lt; i 100) (= i 100)) (inc i)<br/>        append false doors<br/>end for<br/>\u00a0<br/># loop through, opening and closing doors<br/>for (set i 1) (or (&lt; i 100) (= i 100)) (inc i)<br/>        for (set j i) (or (&lt; j 100) (= j 100)) (inc j)<br/>                if (= (mod j i) 0)<br/>                        set doors&lt;j&gt; (not doors&lt;j&gt;)<br/>                end if<br/>        end for<br/>end for<br/>\u00a0<br/># loop through and output which doors are open<br/>for (set i 1) (or (&lt; i 100) (= i 100)) (inc i)<br/>        out \"Door \" i \": \" console<br/>        if doors&lt;i&gt;<br/>                out \"open\" endl console<br/>        else<br/>                out \"closed\" endl console<br/>        end if<br/>end if<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 10, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>doors = 0!* iota 100<br/>\u00a0<br/>pass(\"n\",\"d\") = remainder\\\"n\"?l(~&amp;r,not ~&amp;r)* num \"d\"<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>main = ~&amp;rFlS num pass=&gt;doors nrange(100,1)</pre>"}, {"lang": "UTFool", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00b7\u00b7\u00b7<br/>http://rosettacode.org/wiki/100_doors<br/>\u00b7\u00b7\u00b7<br/>\u25a0 HundredDoors <br/>  \u00a7 static<br/>    \u25b6 main<br/>    \u2022 args\u2982 String[]<br/>      open\u2982   boolean: true<br/>      closed\u2982 boolean: false<br/>      doors\u2982  boolean[1+100] \u00b7 all initially closed<br/>      \ud83d\udd01 pass from 1 to 100<br/>         \u2200 visited \u2208 pass\u2025100 by pass<br/>         \u00b7 toggle the visited doors<br/>           if the doors[visited] are closed<br/>              let the doors[visited] be open<br/>           else<br/>              let the doors[visited] be closed<br/>      for each door #n in doors\u2982 boolean<br/>        if the door is open<br/>           System.out.println \"Door #\u2e28n\u2e29 is open.\"<br/>\u00a0</pre>"}, {"lang": "Vala", "loc": 10, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">bool</span> doors_open<span class=\"br0\">[</span><span class=\"nu0\">101</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> doors_open.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">*</span>j <span class=\"sy0\">&lt;</span> doors_open.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tdoors_open<span class=\"br0\">[</span>i<span class=\"sy0\">*</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>doors_open<span class=\"br0\">[</span>i<span class=\"sy0\">*</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, <span class=\"br0\">(</span>doors_open<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VAX Assembly", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>                           00000064  0000     1 n = 100<br/>                               0000  0000     2 .entry\tdoors, ^m&lt;&gt;<br/>                         26'AF   9F  0002     3 \tpushab\tb^arr\t\t\t\t; offset signed byte<br/>                    50   64 8F   9A  0005     4 \tmovzbl\t#n, r0<br/>                            50   DD  0009     5 \tpushl\tr0\t\t\t\t; (sp) -&gt; .ascid arr<br/>                                     000B     6 10$:<br/>                       51   50   D0  000B     7 \tmovl\tr0, r1\t\t\t\t; step = start index<br/>                                     000E     8 20$:<br/>                  25'AF41   01   8C  000E     9 \txorb2\t#^a\"0\" \\^a\"1\", b^arr-1[r1]\t; \\ xor toggle \"1\"&lt;-&gt;\"0\"<br/>             FFF5 51   50   6E   F1  0013    10 \tacbl\t(sp), r0, r1, 20$\t\t; limit, step, index<br/>                         EF 50   F5  0019    11 \tsobgtr\tr0, 10$\t\t\t\t; n..1<br/>                                     001C    12 <br/>                            5E   DD  001C    13 \tpushl\tsp\t\t\t\t; descriptor by reference<br/>              00000000'GF   01   FB  001E    14 \tcalls\t#1, g^lib$put_output\t\t; show result<br/>                                 04  0025    15 \tret<br/>                                     0026    16 <br/>30'30'30'30'30'30'30'30'30'30'30'30' 0026    17 arr:\t.byte\t^a\"0\"[n]<br/>30'30'30'30'30'30'30'30'30'30'30'30' 0032       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 003E       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 004A       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 0056       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 0062       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 006E       <br/>30'30'30'30'30'30'30'30'30'30'30'30' 007A       <br/>                        30'30'30'30' 0086       <br/>                                     008A    18 .end\tdoors<br/>$ run doors<br/>1001000010000001000000001000000000010000000000001000000000000001000000000000000010000000000000000001<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 54, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> Rosetta_100Doors()<br/><span class=\"kw4\">Dim</span> Door(100) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> 1<br/>    <span class=\"kw3\">For</span> j = i <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> i<br/>        Door(j) = <span class=\"kw3\">Not</span> Door(j)<br/>    <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">If</span> Door(i) = <span class=\"kw5\">True</span> <span class=\"kw3\">Then</span><br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Door \"</span> &amp; i &amp; <span class=\"st0\">\" is Open\"</span><br/>    <span class=\"kw3\">Else</span><br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Door \"</span> &amp; i &amp; <span class=\"st0\">\" is Closed\"</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>&lt;!-- /lang --&gt;<br/>\u00a0<br/>*** USE THIS ONE, SEE COMMENTED LINES, DONT KNOW WHY EVERYBODY FOLLOWED OTHERS ANSWERS <span class=\"kw3\">AND</span> CODED THE PROBLEM DIFFERENTLY ***<br/>*** ALWAYS USE <span class=\"kw3\">AND</span> TEST A READABLE, EASY <span class=\"kw3\">TO</span> COMPREHEND CODING BEFORE <span class=\"co1\">'OPTIMIZING' YOUR CODE AND TEST THE 'OPTIMIZED' CODE AGAINST THE 'READABLE' ONE.<br/></span>Panikkos Savvides.<br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">Sub</span> Rosetta_100Doors2()<br/><span class=\"kw4\">Dim</span> Door(100) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw4\">Dim</span> strAns <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"co1\">' There are 100 doors in a row that are all initially closed.<br/></span><span class=\"co1\">' You make 100 passes by the doors.<br/></span><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 100<br/>    <span class=\"co1\">' The first time through, visit every door and toggle the door<br/></span>    <span class=\"co1\">' (if the door is closed, open it; if it is open, close it).<br/></span>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> 1<br/>      Door(i) = <span class=\"kw3\">Not</span> Door(i)<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"co1\">' The second time, only visit every 2nd door (door #2, #4, #6, ...), and toggle it.<br/></span>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> 2<br/>      Door(i) = <span class=\"kw3\">Not</span> Door(i)<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"co1\">' The third time, visit every 3rd door (door #3, #6, #9, ...), etc, until you only visit the 100th door.<br/></span>    <span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> 3<br/>      Door(i) = <span class=\"kw3\">Not</span> Door(i)<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">Next</span> j<br/>\u00a0<br/><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 100<br/>    <span class=\"kw3\">If</span> Door(j) = <span class=\"kw5\">True</span> <span class=\"kw3\">Then</span><br/>        strAns = j &amp; strAns &amp; <span class=\"st0\">\", \"</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span> j<br/>\u00a0<br/><span class=\"kw3\">If</span> Right(strAns, 2) = <span class=\"st0\">\", \"</span> <span class=\"kw3\">Then</span> strAns = Left(strAns, Len(strAns) - 2)<br/><span class=\"kw3\">If</span> Len(strAns) = 0 <span class=\"kw3\">Then</span> strAns = <span class=\"st0\">\"0\"</span><br/>Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Doors [\"</span> &amp; strAns &amp; <span class=\"st0\">\"] are open, the rest are closed.\"</span><br/><span class=\"co1\">' Doors [0] are open, the rest are closed., AKA ZERO DOORS OPEN<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"text highlighted_source\">Dim doorIsOpen(100), pass, currentDoor, text<br/>\u00a0<br/>For currentDoor = 0 To 99<br/>\tdoorIsOpen(currentDoor) = False<br/>Next<br/>\u00a0<br/>For pass = 0 To 99<br/>\tFor currentDoor = pass To 99 Step pass + 1<br/>\t\tdoorIsOpen(currentDoor) = Not doorIsOpen(currentDoor)<br/>\tNext<br/>Next<br/>\u00a0<br/>For currentDoor = 0 To 99<br/>\ttext = \"Door #\" &amp; currentDoor + 1 &amp; \" is \"<br/>\tIf doorIsOpen(currentDoor) Then<br/>\t\ttext = text &amp; \"open.\"<br/>\tElse<br/>\t\ttext = text &amp; \"closed.\"<br/>\tEnd If<br/>\tWScript.Echo(text)<br/>Next</pre>"}, {"lang": "Vedit macro language", "loc": 8, "block": "<pre class=\"vedit highlighted_source\">Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>                      <span class=\"co1\">// All doors closed</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span> <span class=\"sy0\">+=</span> #<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        Ins_Char<span class=\"br0\">(</span><span class=\"br0\">(</span>Cur_Char<span class=\"sy0\">^</span>0x62<span class=\"br0\">)</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>   <span class=\"co1\">// Toggle between '-' and 'O'</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VHDL", "loc": 29, "block": "<pre class=\"vhdl highlighted_source\"><span class=\"kw1\">library</span> <span class=\"kw2\">IEEE</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">use</span> <span class=\"kw2\">IEEE</span>.<span class=\"kw2\">STD_LOGIC_1164</span>.<span class=\"kw1\">ALL</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> DOORS <span class=\"kw1\">is</span><br/>\t<span class=\"kw1\">port</span> <span class=\"br0\">(</span>CLK<span class=\"sy0\">:</span> <span class=\"kw1\">in</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span> OUTPUT<span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">std_logic_vector</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> DOORS<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">architecture</span> Behavioral <span class=\"kw1\">of</span> DOORS <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>\t<span class=\"kw1\">process</span> <span class=\"br0\">(</span>CLK<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">variable</span> TEMP<span class=\"sy0\">:</span> <span class=\"kw2\">std_logic_vector</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">begin</span><br/>\t\t<span class=\"co1\">--setup closed doors</span><br/>\t\tTEMP <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw1\">others</span> <span class=\"sy0\">=&gt;</span> '<span class=\"nu0\">0</span>'<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">--looping through</span><br/>\t\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> TEMP<span class=\"re2\">'length</span> <span class=\"kw1\">loop</span><br/>\t\t\t<span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> i <span class=\"kw1\">to</span> TEMP<span class=\"re2\">'length</span> <span class=\"kw1\">loop</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"kw3\">mod</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t\t\t\tTEMP<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">not</span> TEMP<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">loop</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">loop</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">--assign output</span><br/>\t\tOUTPUT <span class=\"sy0\">&lt;=</span> TEMP<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">process</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> Behavioral<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 19, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Doors100()<br/>  <span class=\"co1\">' the state of a door is represented by the data type boolean (false = door closed, true = door opened)<br/></span>  <span class=\"kw4\">Dim</span> doorstate(1 <span class=\"kw3\">To</span> 100) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span> <span class=\"co1\">' the doorstate()-array is initialized by VB with value 'false'<br/></span>  <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>  <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 100<br/>      <span class=\"kw3\">For</span> j = i <span class=\"kw3\">To</span> 100 <span class=\"kw3\">Step</span> i<br/>          doorstate(j) = <span class=\"kw3\">Not</span> doorstate(j)<br/>      <span class=\"kw3\">Next</span> j<br/>  <span class=\"kw3\">Next</span> i<br/>\u00a0<br/>  Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The following doors are open:\"</span><br/>  <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 100<br/>      <span class=\"co1\">' print number if door is openend<br/></span>      <span class=\"kw3\">If</span> doorstate(i) <span class=\"kw3\">Then</span> Debug.<span class=\"kw4\">Print</span> CStr(i)<br/>  <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 19, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Module</span> Module1<br/>\u00a0<br/>   <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> doors<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span> <span class=\"co1\">'Door 1 is at index 0</span><br/>\u00a0<br/>       <span class=\"kw1\">For</span> pass <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">100</span><br/>           <span class=\"kw1\">For</span> door <span class=\"sy0\">=</span> pass <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">99</span> <span class=\"kw1\">Step</span> pass<br/>               doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Not</span> doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span><br/>           <span class=\"kw1\">Next</span><br/>       <span class=\"kw1\">Next</span><br/>\u00a0<br/>       <span class=\"kw1\">For</span> door <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">99</span><br/>           Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Door # \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>door <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>doors<span class=\"br0\">(</span>door<span class=\"br0\">)</span>, <span class=\"st0\">\"Open\"</span>, <span class=\"st0\">\"Closed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Next</span><br/>\u00a0<br/>       Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "Wart", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>doors n<span class=\"br0\">)</span><br/>  let door <span class=\"br0\">(</span>table<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> step <span class=\"nu0\">1</span> <span class=\"br0\">(</span>step <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> ++step<br/>      <span class=\"kw1\">for</span> j <span class=\"nu0\">0</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- j+step<span class=\"br0\">)</span><br/>        zap<span class=\"sy0\">!</span> <span class=\"kw1\">not</span> door.<span class=\"me1\">j</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"nu0\">0</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> ++j<br/>      when door.<span class=\"me1\">j</span><br/>        pr j<br/>        pr <span class=\"st0\">\" \"</span></pre>"}, {"lang": "WDTE", "loc": 27, "block": "<pre class=\"text highlighted_source\">let a =&gt; import 'arrays';<br/>let s =&gt; import 'stream';<br/>let io =&gt; import 'io';<br/>\u00a0<br/>let toggle doors m =&gt;<br/>\ta.stream doors<br/>\t-&gt; s.enumerate<br/>\t-&gt; s.map (@ s n =&gt; [+ (a.at n 0) 1; a.at n 1])<br/>\t-&gt; s.map (@ s n =&gt; switch n {<br/>\t\t\t(@ s n =&gt; == (% (a.at n 0) m) 0) =&gt;\u00a0! (a.at n 1);<br/>\t\t\ttrue =&gt; a.at n 1;<br/>\t\t})<br/>\t-&gt; s.collect<br/>\t;<br/>\u00a0<br/>s.range 100<br/>-&gt; s.map false<br/>-&gt; s.collect\u00a0: doors<br/>-&gt; s.range 1 100<br/>-&gt; s.reduce doors toggle<br/>-&gt; a.stream<br/>-&gt; s.map (@ s n =&gt; switch 0 {<br/>\t\tn =&gt; 'Open';<br/>\t\ttrue =&gt; 'Closed';<br/>\t} -- io.writeln io.stdout)<br/>-&gt; s.drain<br/>;</pre>"}, {"lang": "Wortel", "loc": 14, "block": "<pre class=\"text highlighted_source\">; unoptimized<br/>+^[<br/>  @var doors []<br/>\u00a0<br/>  @for i rangei [1 100]<br/>    @for j rangei [i 100 i]<br/>     \u00a0:<a class=\"__cf_email__\" data-cfemail=\"b293f2dcddc6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> `j doors<br/>\u00a0<br/>  @for i rangei [1 100]<br/>    @if `i doors<br/>     \u00a0!console.log \"door {i} is open\"<br/>]<br/>; optimized, map square over 1 to 10<br/>!*^@sq @to 10</pre>"}, {"lang": "Wrapl", "loc": 15, "block": "<pre class=\"text highlighted_source\">MOD Doors;<br/>\u00a0<br/>IMP Agg.Table;<br/>IMP Std.String;<br/>IMP IO.Terminal USE Out;<br/>\u00a0<br/>VAR door &lt;- {}; EVERY door[1:to(100), \"closed\"];<br/>\u00a0<br/>DEF toggle(num) door[num] &lt;- door[num] = \"open\" =&gt; \"closed\" // \"open\";<br/>\u00a0<br/>EVERY WITH pass &lt;- 1:to(100), num &lt;- pass:to(100, pass) DO toggle(num);<br/>\u00a0<br/>Out:write('Doors {door @ String.T}.');<br/>\u00a0<br/>END Doors.</pre>"}, {"lang": "Wren", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var doors = [true] * 100<br/>for (i in 1..100) {<br/>    var j = i<br/>    while(j &lt; 100) {<br/>        doors[j] =\u00a0!doors[j]<br/>        j = j + i + 1<br/>    }<br/>}<br/>\u00a0<br/>for (i in 0...100) {<br/>    if (doors[i]) System.print(i + 1)<br/>}<br/>\u00a0</pre>"}, {"lang": "X86_64 Assembly", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; linux x86_64<br/>\u00a0<br/>section .data<br/>open: db \"open\", 10<br/>closed: db \"closed\", 10<br/>\u00a0<br/>section .bss<br/>doors resb 101<br/>\u00a0<br/>section .text<br/>\u00a0<br/>global _start<br/>\u00a0<br/>_start:<br/>mov rax, 1<br/>  mov bl, 0<br/>  zeroset_door:<br/>    mov [doors + rax], bl<br/>    inc rax<br/>    cmp rax, 101<br/>    jl zeroset_door<br/>\u00a0<br/>  mov rax, 0<br/>  set_doors:<br/>    inc rax<br/>    cmp rax, 101<br/>    je display_result<br/>    mov rbx, 0<br/>\u00a0<br/>    make_pass:<br/>      add rbx, rax<br/>      cmp rbx, 101<br/>      jge set_doors<br/>      not byte [doors + rbx]<br/>      jmp make_pass<br/>\u00a0<br/>  display_result:<br/>    mov rbx, 0<br/>    display_door:<br/>      inc rbx<br/>      cmp rbx, 101<br/>      je exit<br/>      cmp byte [doors + rbx], 0<br/>      je print_closed<br/>      jmp print_open<br/>\u00a0<br/>  print_open:<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, open<br/>    mov rdx, 5<br/>    syscall<br/>    jmp display_door<br/>\u00a0<br/>  print_closed:<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, closed<br/>    mov rdx, 7<br/>    syscall<br/>    jmp display_door<br/>\u00a0<br/>  exit:<br/>    mov rax, 60<br/>    mov rdi, 0<br/>    syscall<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 37, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int     Door(100);              \\You have 100 doors in a row<br/>define  Open, Closed;<br/>int     D, Pass, Step;<br/>\u00a0<br/>[for D:= 0 to 100-1 do          \\that are all initially closed<br/>        Door(D):= Closed;<br/>\u00a0<br/>Step:= 1;                       \\The first time through, you visit every door<br/>for Pass:= 1 to 100 do          \\You make 100 passes by the doors<br/>        [D:= Step-1;<br/>        repeat  \\if the door is closed, you open it; if it is open, you close it<br/>                if Door(D)=Closed then Door(D):= Open else Door(D):= Closed;<br/>                D:= D+Step;<br/>        until   D&gt;=100;<br/>        Step:= Step+1;          \\The second time you only visit every 2nd door<br/>        ];                      \\The third time, every 3rd door<br/>                                \\until you only visit the 100th door<br/>\\What state are the doors in after the last pass?<br/>Text(0, \"Open: \");              \\Which are open?<br/>for D:= 0 to 100-1 do <br/>        if Door(D)=Open then [IntOut(0, D+1); ChOut(0,^ )];<br/>CrLf(0);<br/>\u00a0<br/>Text(0, \"Closed: \");            \\Which are closed?<br/>for D:= 0 to 100-1 do <br/>        if Door(D)=Closed then [IntOut(0, D+1); ChOut(0,^ )];<br/>CrLf(0);<br/>\u00a0<br/>\\Optimized: The only doors that remain open are those that are perfect squares<br/>Text(0, \"Open: \");<br/>D:= 1;<br/>repeat  IntOut(0, D*D); ChOut(0,^ );<br/>        D:= D+1;<br/>until   D*D&gt;100;<br/>CrLf(0);<br/>]</pre>"}, {"lang": "XSLT 1.0", "loc": 8, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;hallway<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"1\"</span><span class=\"re2\">&gt;</span></span>closed<span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"2\"</span><span class=\"re2\">&gt;</span></span>closed<span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"3\"</span><span class=\"re2\">&gt;</span></span>closed<span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"4\"</span><span class=\"re2\">&gt;</span></span>closed<span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/>  ... etc ...<br/>  <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"100\"</span><span class=\"re2\">&gt;</span></span>closed<span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;hallway<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "XSLT 2.0", "loc": 18, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"2.0\"</span></span><br/><span class=\"sc3\">  <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span><span class=\"re2\">&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:output</span> <span class=\"re0\">method</span>=<span class=\"st0\">\"xml\"</span> <span class=\"re0\">indent</span>=<span class=\"st0\">\"yes\"</span> <span class=\"re0\">omit-xml-declaration</span>=<span class=\"st0\">\"yes\"</span><span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;hallway<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:for-each</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"1 to 100\"</span><span class=\"re2\">&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:variable</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"door-num\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"position()\"</span> <span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;door</span> <span class=\"re0\">number</span>=<span class=\"st0\">\"{$door-num}\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"('closed','open')[</span><br/><span class=\"sc3\">\t    number( sum( for $pass in 1 to 100 return</span><br/><span class=\"sc3\">\t    number(($door-num mod $pass) = 0)) mod 2 = 1) + 1]\"</span> <span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;/door<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:for-each<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/hallway<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "Yabasic", "loc": 14, "block": "<pre class=\"text highlighted_source\">n = 100\t// doors<br/>ppa = 1\t// next open door<br/>p2 = 1<br/>\u00a0<br/>for i = 1 to n<br/>\tprint \"Door \", i, \" is \";<br/>\tif i &lt; p2 then<br/>\t\tprint \"closed.\"<br/>\telse<br/>\t\tppa = ppa + 1<br/>\t\tp2 = ppa^2<br/>\t\tprint \"OPEN.\"<br/>\tend if<br/>next</pre>"}, {"lang": "Yorick", "loc": 5, "block": "<pre class=\"text highlighted_source\">doors = array(0, 100);<br/>for(i = 1; i &lt;= 100; i++)<br/>    for(j = i; j &lt;= 100; j += i)<br/>        doors(j) ~= 1;<br/>print, where(doors);</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">doors:=List.createLong(100,False);\t// list of 100 Falses<br/>foreach n,m in (100,[n..99,n+1]){ doors[m]=(not doors[m]); } //foreach{ foreach{} }<br/>doors.filterNs().apply('+(1)).println();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 1, "block": "<pre> 10 REM 100 doors open/closed?\n 20 DIM d(100)\n 25 LET o=0\n 30 FOR a=1 TO 100\n 40 FOR b=a TO 100 STEP a\n 50 LET d(b)=NOT d(b)\n 55 LET o=o+(d(b)=1)-(d(b)=0)\n 60 NEXT b\n 70 NEXT a\n 80 PRINT o;\" open doors\"\n</pre>"}, {"lang": "SheerPower 4GL", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>!         I n i t i a l i z a t i o n<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>doors% = 100<br/>\u00a0<br/>dim doorArray?(doors%)<br/>\u00a0<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>!         M a i n   L o g i c   A r e a<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>\u00a0<br/>// Initialize Array<br/>for index% = 1 to doors%<br/>  doorArray?(index%) = false<br/>next index%<br/>\u00a0<br/>// Execute routine<br/>toggle_doors<br/>\u00a0<br/>// Print results<br/>for index% = 1 to doors%<br/>  if doorArray?(index%) = true then print index%, ' is open'<br/>next index%<br/>\u00a0<br/>\u00a0<br/>stop<br/>\u00a0<br/>\u00a0<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>!         R o u t i n e s<br/>!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br/>routine toggle_doors<br/>  for index_outer% = 1 to doors%<br/>    for index_inner% = 1 to doors%<br/>      if mod(index_inner%, index_outer%) = 0 then<br/>        doorArray?(index_inner%) = not doorArray?(index_inner%) <br/>      end if<br/>    next index_inner%<br/>  next index_outer%<br/>end routine<br/>\u00a0<br/>\u00a0<br/>end<br/>\u00a0</pre>"}]}