{"task": "Formal_power_series", "blocks": [{"lang": "Ada", "loc": 23, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Generic_Rational;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">package</span> Rational_Numbers <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Generic_Rational <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;<br/><span class=\"kw3\">package</span> Generic_Taylor_Series <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Rational_Numbers;<br/>   <span class=\"kw3\">type</span> Taylor_Series <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Rational;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>A\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>A\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>A, B\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>A, B\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>A, B\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Integral <span class=\"br0\">(</span>A\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>   <span class=\"kw3\">function</span> Differential <span class=\"br0\">(</span>A\u00a0: Taylor_Series<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Taylor_Series;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Value <span class=\"br0\">(</span>A\u00a0: Taylor_Series; X\u00a0: Rational<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Rational;<br/>\u00a0<br/>   Zero\u00a0: <span class=\"kw3\">constant</span> Taylor_Series\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span> =&gt; Rational_Numbers.<span class=\"me1\">Zero</span><span class=\"br0\">)</span>;<br/>   One \u00a0: <span class=\"kw3\">constant</span> Taylor_Series\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span> =&gt; Rational_Numbers.<span class=\"me1\">One</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Generic_Taylor_Series;</pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> ps<span class=\"sy0\">+</span> <span class=\"br0\">[</span>ps0 ps1<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">+</span>zs   <span class=\"br0\">[</span>ps<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">concat</span> ps <span class=\"br0\">(</span><span class=\"kw1\">repeat</span>\u00a0:<span class=\"me1\">z</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>notz? <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">z</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>nval  <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>notz? a<span class=\"br0\">)</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>z<span class=\"sy0\">+</span>    <span class=\"br0\">[</span>a0 a1<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">z</span> a0 a1<span class=\"br0\">)</span>\u00a0:<span class=\"me1\">z</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>nval a0<span class=\"br0\">)</span> <span class=\"br0\">(</span>nval a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> notz? <span class=\"br0\">(</span><span class=\"kw1\">map</span> z<span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span>zs ps0<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span>zs ps1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> ps<span class=\"sy0\">-</span> <span class=\"br0\">[</span>ps0 ps1<span class=\"br0\">]</span> <span class=\"br0\">(</span>ps<span class=\"sy0\">+</span> ps0 <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">-</span> ps1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defpackage #<span class=\"sy0\">:</span><span class=\"me1\">formal-power-series</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">nicknames</span> #<span class=\"sy0\">:</span><span class=\"me1\">fps</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"st0\">\"COMMON-LISP\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">shadow</span><br/>   #<span class=\"sy0\">:</span>+ #<span class=\"sy0\">:</span>- #<span class=\"sy0\">:</span>* #<span class=\"sy0\">:</span>/<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package #<span class=\"sy0\">:</span><span class=\"me1\">formal-power-series</span><span class=\"br0\">)</span></pre>"}, {"lang": "C", "loc": 142, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt; /* for NaN */</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> fps_type <span class=\"br0\">{</span><br/>        FPS_CONST <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        FPS_ADD<span class=\"sy0\">,</span><br/>        FPS_SUB<span class=\"sy0\">,</span><br/>        FPS_MUL<span class=\"sy0\">,</span><br/>        FPS_DIV<span class=\"sy0\">,</span><br/>        FPS_DERIV<span class=\"sy0\">,</span><br/>        FPS_INT<span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> fps_t <span class=\"sy0\">*</span>fps<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> fps_t <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> type<span class=\"sy0\">;</span><br/>        fps s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> a0<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> fps_t<span class=\"sy0\">;</span><br/>\u00a0<br/>fps fps_new<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        fps x <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>fps_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>a0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>s1 <span class=\"sy0\">=</span> x<span class=\"sy0\">-&gt;</span>s2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* language limit of C; when self or mutual recursive definition is needed,<br/> * one has to be defined, then defined again after it's used.  See how<br/> * sin and cos are defined this way below<br/> */</span><br/><span class=\"kw4\">void</span> fps_redefine<span class=\"br0\">(</span>fps x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> op<span class=\"sy0\">,</span> fps y<span class=\"sy0\">,</span> fps z<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        x<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> op<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>s1 <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>s2 <span class=\"sy0\">=</span> z<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fps _binary<span class=\"br0\">(</span>fps x<span class=\"sy0\">,</span> fps y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> op<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        fps s <span class=\"sy0\">=</span> fps_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>s1 <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>s2 <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> op<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fps _unary<span class=\"br0\">(</span>fps x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> op<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        fps s <span class=\"sy0\">=</span> fps_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>s1 <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> op<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Taking the n-th term of series.  This is where actual work is done. */</span><br/><span class=\"kw4\">double</span> term<span class=\"br0\">(</span>fps x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>type<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> FPS_CONST<span class=\"sy0\">:</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> x<span class=\"sy0\">-&gt;</span>a0<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> FPS_ADD<span class=\"sy0\">:</span><br/>                ret <span class=\"sy0\">=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> FPS_SUB<span class=\"sy0\">:</span><br/>                ret <span class=\"sy0\">=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> FPS_MUL<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        ret <span class=\"sy0\">+=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> FPS_DIV<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> NAN<span class=\"sy0\">;</span><br/>\u00a0<br/>                ret <span class=\"sy0\">=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        ret <span class=\"sy0\">-=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s2<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> FPS_DERIV<span class=\"sy0\">:</span><br/>                ret <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> FPS_INT<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">-&gt;</span>a0<span class=\"sy0\">;</span><br/>                ret <span class=\"sy0\">=</span> term<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>s1<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Unknown operator\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span>type<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define _add(x, y) _binary(x, y, FPS_ADD)</span><br/><span class=\"co2\">#define _sub(x, y) _binary(x, y, FPS_SUB)</span><br/><span class=\"co2\">#define _mul(x, y) _binary(x, y, FPS_MUL)</span><br/><span class=\"co2\">#define _div(x, y) _binary(x, y, FPS_DIV)</span><br/><span class=\"co2\">#define _integ(x)  _unary(x, FPS_INT)</span><br/><span class=\"co2\">#define _deriv(x)  _unary(x, FPS_DERIV)</span><br/>\u00a0<br/>fps fps_const<span class=\"br0\">(</span><span class=\"kw4\">double</span> a0<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        fps x <span class=\"sy0\">=</span> fps_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> FPS_CONST<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>a0 <span class=\"sy0\">=</span> a0<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        fps one <span class=\"sy0\">=</span> fps_const<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fps fcos <span class=\"sy0\">=</span> fps_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* cosine */</span><br/>        fps fsin <span class=\"sy0\">=</span> _integ<span class=\"br0\">(</span>fcos<span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"coMULTI\">/* sine */</span><br/>        fps ftan <span class=\"sy0\">=</span> _div<span class=\"br0\">(</span>fsin<span class=\"sy0\">,</span> fcos<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* tangent */</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* redefine cos to complete the mutual recursion; maybe it looks<br/>         * better if I said<br/>         *     *fcos = *( _sub(one, _integ(fsin)) );<br/>         */</span><br/>        fps_redefine<span class=\"br0\">(</span>fcos<span class=\"sy0\">,</span> FPS_SUB<span class=\"sy0\">,</span> one<span class=\"sy0\">,</span> _integ<span class=\"br0\">(</span>fsin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        fps fexp <span class=\"sy0\">=</span> fps_const<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"coMULTI\">/* exponential */</span><br/>        <span class=\"coMULTI\">/* make exp recurse on self */</span><br/>        fps_redefine<span class=\"br0\">(</span>fexp<span class=\"sy0\">,</span> FPS_INT<span class=\"sy0\">,</span> fexp<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Sin:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%g\"</span><span class=\"sy0\">,</span> term<span class=\"br0\">(</span>fsin<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Cos:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%g\"</span><span class=\"sy0\">,</span> term<span class=\"br0\">(</span>fcos<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Tan:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%g\"</span><span class=\"sy0\">,</span> term<span class=\"br0\">(</span>ftan<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Exp:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%g\"</span><span class=\"sy0\">,</span> term<span class=\"br0\">(</span>fexp<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 51, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'math<span class=\"br0\">)</span><br/><span class=\"co1\">;; converts a finite polynomial (a_0 a_1 .. a_n) to an infinite serie (a_0 ..a_n 0 0 0 ...)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>poly<span class=\"sy0\">-&gt;</span>stream <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> <span class=\"kw1\">list</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; c = a + b , c_n = a_n + b_n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>add a b<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; c = a * b , c_n = \u2211 (0 ..n) a_i * b_n-i</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>sigma <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a i<span class=\"br0\">)</span><span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul a b<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = 1/a\u00a0; b_0 = 1/a_0, b_n =  - \u2211 (1..n) a_i * b_n-i / a_0</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>sigma <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a i<span class=\"br0\">)</span><span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; note the self keyword which refers to b = (s-inv a)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv a<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv<span class=\"sy0\">-</span>coeff n a self <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-k-add k a) = k + a_0, a_1, a_2, ...</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>k<span class=\"sy0\">-</span>add k a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> k <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-neg a) = -a_0,-a_1, ....</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>neg a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-int a) = \u222b a\u00a0; b_0 = 0 by convention, b_n = a_n-1/n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int a<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; value of power serie at x, n terms</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>value a x <span class=\"br0\">(</span>n <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>poly x <span class=\"br0\">(</span>take a n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; stream-cons allows mutual delayed references</span><br/><span class=\"co1\">;; sin = \u222b cos</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> sin<span class=\"sy0\">-</span>x <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>rest <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int cos<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; cos = 1 - \u222b sin</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> cos<span class=\"sy0\">-</span>x <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>rest <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>k<span class=\"sy0\">-</span>add <span class=\"nu0\">1</span>  <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>neg <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int sin<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 51, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'math<span class=\"br0\">)</span><br/><span class=\"co1\">;; converts a finite polynomial (a_0 a_1 .. a_n) to an infinite serie (a_0 ..a_n 0 0 0 ...)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>poly<span class=\"sy0\">-&gt;</span>stream <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> <span class=\"kw1\">list</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; c = a + b , c_n = a_n + b_n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>add a b<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; c = a * b , c_n = \u2211 (0 ..n) a_i * b_n-i</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>sigma <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a i<span class=\"br0\">)</span><span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul a b<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>mul<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = 1/a\u00a0; b_0 = 1/a_0, b_n =  - \u2211 (1..n) a_i * b_n-i / a_0</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv<span class=\"sy0\">-</span>coeff n a b<span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>sigma <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a i<span class=\"br0\">)</span><span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref b <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; note the self keyword which refers to b = (s-inv a)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv a<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>inv<span class=\"sy0\">-</span>coeff n a self <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-k-add k a) = k + a_0, a_1, a_2, ...</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>k<span class=\"sy0\">-</span>add k a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> k <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-neg a) = -a_0,-a_1, ....</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>neg a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; b = (s-int a) = \u222b a\u00a0; b_0 = 0 by convention, b_n = a_n-1/n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int a<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>ref a <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; value of power serie at x, n terms</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>value a x <span class=\"br0\">(</span>n <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>poly x <span class=\"br0\">(</span>take a n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; stream-cons allows mutual delayed references</span><br/><span class=\"co1\">;; sin = \u222b cos</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> sin<span class=\"sy0\">-</span>x <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>rest <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int cos<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; cos = 1 - \u222b sin</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> cos<span class=\"sy0\">-</span>x <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>rest <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>k<span class=\"sy0\">-</span>add <span class=\"nu0\">1</span>  <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>neg <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>int sin<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 232, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Task:  Formal power series type</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Go does not have a concept of numeric types other than the built in</span><br/><span class=\"co1\">// integers, floating points, and so on.  Nor does it have function or</span><br/><span class=\"co1\">// operator overloading, or operator defintion.  The type use to implement</span><br/><span class=\"co1\">// fps here is an interface with a single method, extract.</span><br/><span class=\"co1\">// While not named in the task description, extract is described in the</span><br/><span class=\"co1\">// WP article as \"important.\"  In fact, by representing a way to index</span><br/><span class=\"co1\">// all of the coefficients of a fps, any type that implements the interface</span><br/><span class=\"co1\">// represents a formal power series.</span><br/>\u00a0<br/><span class=\"kw1\">type</span> fps <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    extract<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Task:  Operations on FPS</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Separate operations are implemented with separate extract methods.</span><br/><span class=\"co1\">// This requires each operation on the fps type to have a concrete type.</span><br/><span class=\"co1\">// Executing a fps operation is the act of instantiating the concrete type.</span><br/><span class=\"co1\">// This is implemented here with constructor functions that construct a</span><br/><span class=\"co1\">// new fps from fps arguments.</span><br/>\u00a0<br/><span class=\"co1\">// Constructor functions are shown here as a group, followed by concrete</span><br/><span class=\"co1\">// type definitions and associated extract methods.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> one<span class=\"sy1\">()</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;oneFps<span class=\"sy1\">{}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> add<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> s2 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;sum<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> s2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sub<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> s2 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;diff<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> s2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> mul<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> s2 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;prod<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> s2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> div<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> s2 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;quo<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> s2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> differentiate<span class=\"sy1\">(</span>s1 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;deriv<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> integrate<span class=\"sy1\">(</span>s1 fps<span class=\"sy1\">)</span> fps <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;integ<span class=\"sy1\">{</span>s1<span class=\"sy1\">:</span> s1<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Example:  Mutually recursive defintion of sine and cosine.</span><br/><span class=\"co1\">// This is a constructor just as those above.  It is nullary and returns</span><br/><span class=\"co1\">// two fps.  Note sin and cos implemented as instances of other fps defined</span><br/><span class=\"co1\">// above, and so do not need new concrete types.  Note also the constant</span><br/><span class=\"co1\">// term of the integration fps provides the case that terminates recursion</span><br/><span class=\"co1\">// of the extract function.</span><br/><span class=\"kw4\">func</span> sinCos<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>fps<span class=\"sy1\">,</span> fps<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    sin <span class=\"sy2\">:=</span> &amp;integ<span class=\"sy1\">{}</span><br/>    cos <span class=\"sy2\">:=</span> sub<span class=\"sy1\">(</span>one<span class=\"sy1\">(),</span> integrate<span class=\"sy1\">(</span>sin<span class=\"sy1\">))</span><br/>    sin<span class=\"sy3\">.</span>s1 <span class=\"sy2\">=</span> cos<br/>    <span class=\"kw1\">return</span> sin<span class=\"sy1\">,</span> cos<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Following are type definitions and extract methods for fps operators</span><br/><span class=\"co1\">// (constructor functions) just defined.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Goal:  lazy evaluation</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Go has no built in support for lazy evaluation, so we make it from</span><br/><span class=\"co1\">// scratch here.  Types contain, at a minimum, their fps operands and</span><br/><span class=\"co1\">// representation neccessary to implement lazy evaluation.  Typically</span><br/><span class=\"co1\">// this is a coefficient slice, although constant terms are not stored,</span><br/><span class=\"co1\">// so in the case of a constant fps, no slice is needed at all.</span><br/><span class=\"co1\">// Coefficients are generated only as they are requested.  Computed</span><br/><span class=\"co1\">// coefficients are stored in the slice and if requested subsequently,</span><br/><span class=\"co1\">// are returned immediately rather than recomputed.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Types can also contain any other intermediate values useful for</span><br/><span class=\"co1\">// computing coefficients.</span><br/>\u00a0<br/><span class=\"co1\">// Constant one:  A constant is a nullary function and no coefficent</span><br/><span class=\"co1\">// storage is needed so an empty struct is used for the type.</span><br/><span class=\"kw1\">type</span> oneFps <span class=\"kw4\">struct</span><span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"co1\">// The extract method implements the fps interface.  It simply has to</span><br/><span class=\"co1\">// return 1 for the first term and return 0 for all other terms.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>oneFps<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Addition is a binary function so the sum type stores its two fps operands</span><br/><span class=\"co1\">// and its computed terms.</span><br/><span class=\"kw1\">type</span> sum <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s      <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    s1<span class=\"sy1\">,</span> s2 fps<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>sum<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">+</span>s<span class=\"sy3\">.</span>s2<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Subtraction and other binary operations are similar.</span><br/><span class=\"co1\">// (The common field definitions could be factored out with an embedded</span><br/><span class=\"co1\">// struct, but the clutter of the extra syntax required doesn't seem</span><br/><span class=\"co1\">// to be worthwhile.)</span><br/><span class=\"kw1\">type</span> diff <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s      <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    s1<span class=\"sy1\">,</span> s2 fps<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>diff<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">-</span>s<span class=\"sy3\">.</span>s2<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> prod <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s      <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    s1<span class=\"sy1\">,</span> s2 fps<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>prod<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            c <span class=\"sy2\">+=</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span>k<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Note a couple of fields in addition to those of other binary operators.</span><br/><span class=\"co1\">// They simply optimize computations a bit.</span><br/><span class=\"kw1\">type</span> quo <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s1<span class=\"sy1\">,</span> s2 fps<br/>    inv    <span class=\"kw4\">float64</span>   <span class=\"co1\">// optimizes a divide</span><br/>    c      <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"co1\">// saves multiplications</span><br/>    s      <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// WP formula.  Note the limitation s2[0] cannot be 0.  In this case</span><br/><span class=\"co1\">// the function returns NaN for all terms.  The switch statement catches</span><br/><span class=\"co1\">// this case and avoids storing a slice of all NaNs.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>quo<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy3\">!</span>math<span class=\"sy3\">.</span>IsInf<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>inv<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">):</span><br/>        a0 <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>s2<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>        s<span class=\"sy3\">.</span>inv <span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> a0<br/>        <span class=\"kw1\">if</span> a0 <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">fallthrough</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>NaN<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            c <span class=\"sy2\">+=</span> s<span class=\"sy3\">.</span>s2<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> s<span class=\"sy3\">.</span>c<span class=\"sy1\">[</span>n<span class=\"sy3\">-</span>k<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        c <span class=\"sy2\">=</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy3\">-</span> c<span class=\"sy3\">*</span>s<span class=\"sy3\">.</span>inv<br/>        s<span class=\"sy3\">.</span>c <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>c<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> c<span class=\"sy3\">*</span>s<span class=\"sy3\">.</span>inv<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Note differentiation and integration are unary so their types contain</span><br/><span class=\"co1\">// only a single fps operand.</span><br/>\u00a0<br/><span class=\"kw1\">type</span> deriv <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s   <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    s1  fps<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>deriv<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> integ <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    s   <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    s1  fps<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>integ<span class=\"sy1\">)</span> extract<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"co1\">// constant term C=0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// with constant term handled, s starts at 1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        s<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>s1<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>s<span class=\"sy1\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Demonstrate working sin, cos.</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Format several terms in a way that is easy to compare visually.</span><br/>    partialSeries <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>f fps<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">6</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            s <span class=\"sy2\">=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%s\u00a0%8.5f \"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> f<span class=\"sy3\">.</span>extract<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    sin<span class=\"sy1\">,</span> cos <span class=\"sy2\">:=</span> sinCos<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"sin:\"</span><span class=\"sy1\">,</span> partialSeries<span class=\"sy1\">(</span>sin<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"cos:\"</span><span class=\"sy1\">,</span> partialSeries<span class=\"sy1\">(</span>cos<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Elisa", "loc": 60, "block": "<pre class=\"text highlighted_source\">component FormalPowerSeries(Number);<br/>  type PowerSeries;<br/>       PowerSeries(Size = integer) -&gt; PowerSeries;<br/>\u00a0<br/>       + PowerSeries -&gt; PowerSeries;<br/>       - PowerSeries -&gt; PowerSeries;  <br/>\u00a0<br/>       PowerSeries + PowerSeries -&gt; PowerSeries; <br/>       PowerSeries - PowerSeries -&gt; PowerSeries;<br/>       PowerSeries * PowerSeries -&gt; PowerSeries; <br/>\u00a0<br/>       Integral(PowerSeries)     -&gt; PowerSeries;<br/>       Differential(PowerSeries) -&gt; PowerSeries;<br/>\u00a0<br/>       Zero -&gt; PowerSeries;<br/>       One  -&gt; PowerSeries;<br/>\u00a0<br/>       Array(PowerSeries) -&gt; array(Number);<br/> begin<br/>       PowerSeries(Size) = PowerSeries:[T = array(Number, Size); Size];<br/>\u00a0<br/>       + A = A;<br/>\u00a0<br/>       - A = [ C = PowerSeries(A.Size); <br/>\t\t       [ i = 1 .. A.Size; C.T[i]\u00a0:= - A.T[i] ];<br/>\t\t     C];<br/>\u00a0<br/>       A + B = [ if A.Size &gt; B.Size then return(B + A);<br/>\t\t         C = PowerSeries(B.Size);<br/>\t\t         [ i = 1 .. A.Size; C.T[i]\u00a0:= A.T[i] + B.T[i] ];<br/>\t\t         [ i = (A.Size +1) .. B.Size;  C.T[i]\u00a0:= B.T[i] ];<br/>\t\t       C];<br/>\u00a0<br/>       A - B = A + (- B );<br/>\u00a0<br/>       A * B = [ C = PowerSeries(A.Size + B.Size - 1);<br/> \t         [ i = 1 .. A.Size; <br/>\t\t     [j = 1.. B.Size; <br/>\t\t         C.T[i + j - 1]\u00a0:= C.T[i + j - 1] + A.T[i] * B.T[j] ] ];<br/>\t          C];<br/>\u00a0<br/>      Integral(A) = [ if A.Size == 0 then return (A);<br/> \t\t      C = PowerSeries(A.Size + 1);<br/>\t\t      [ i = 1 .. A.Size; C.T[i +1]\u00a0:= A.T[i] / Number( i )];<br/>\t\t      C.T[1]:= Number(0); <br/>\t\t      C ];<br/>\u00a0<br/>      Differential(A) = [ if A.Size == 1 then return (A);<br/>\t\t          C = PowerSeries(A.Size - 1);<br/>\t\t          [ i = 1 .. C.Size; C.T[i]\u00a0:= A.T[i + 1] * Number( i )];<br/>\t\t          C ];<br/>\u00a0<br/>      Zero = [ C = PowerSeries (1); C.T[1]:= Number(0);  C];\t<br/>      One =  [ C = PowerSeries (1); C.T[1]:= Number(1);  C];\t<br/>\u00a0<br/>      Array(PowerSeries) -&gt; array(Number);<br/>      Array(TS) = TS.T;<br/>\u00a0<br/>end component FormalPowerSeries;<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">newtype</span> Series a <span class=\"sy0\">=</span> S <span class=\"br0\">{</span> coeffs <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/><span class=\"co1\">-- Invariant: coeffs must be an infinite list</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> <span class=\"br0\">(</span>Series a<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> n <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> n\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> <span class=\"br0\">(</span>S fs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> fs<br/>  S fs <span class=\"sy0\">+</span> S gs   <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> fs gs<br/>  S <span class=\"br0\">(</span>f:ft<span class=\"br0\">)</span> <span class=\"sy0\">*</span> S gs<span class=\"sy0\">@</span><span class=\"br0\">(</span>g:gt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> f<span class=\"sy0\">*</span>g\u00a0: coeffs <span class=\"br0\">(</span>S ft <span class=\"sy0\">*</span> S gs <span class=\"sy0\">+</span> S <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>f<span class=\"sy0\">*</span><span class=\"br0\">)</span> gt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> <span class=\"br0\">(</span>Series a<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromRational\"><span class=\"kw3\">fromRational</span></a> n <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromRational\"><span class=\"kw3\">fromRational</span></a> n\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"nu0\">0</span><br/>  S <span class=\"br0\">(</span>f:ft<span class=\"br0\">)</span> <span class=\"sy0\">/</span> S <span class=\"br0\">(</span>g:gt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> S qs <span class=\"kw1\">where</span> qs <span class=\"sy0\">=</span> f<span class=\"sy0\">/</span>g\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/</span>g<span class=\"br0\">)</span> <span class=\"br0\">(</span>coeffs <span class=\"br0\">(</span>S ft <span class=\"sy0\">-</span> S qs <span class=\"sy0\">*</span> S gt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- utility function to convert from a finite polynomial</span><br/>fromFiniteList xs <span class=\"sy0\">=</span> S <span class=\"br0\">(</span>xs <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>int <span class=\"br0\">(</span>S fs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <span class=\"nu0\">0</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">)</span> fs <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>diff <span class=\"br0\">(</span>S <span class=\"br0\">(</span><span class=\"sy0\">_</span>:ft<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> S <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> ft <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>sinx<span class=\"sy0\">,</span>cosx <span class=\"sy0\">::</span> Series <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational\"><span class=\"kw4\">Rational</span></a><br/>sinx <span class=\"sy0\">=</span> int cosx<br/>cosx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> int sinx<br/>\u00a0<br/>fiboS <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> fromFiniteList <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">Ai=: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"c2abec82\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]  =/ <a class=\"__cf_email__\" data-cfemail=\"99f0b7d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ -/ <a class=\"__cf_email__\" data-cfemail=\"11783f51\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:@-<span class=\"sy0\">)</span>&amp;#<br/>divide=: [ +/ .*~ [:%.&amp;.x: ] +/ .* Ai<br/>diff=: <span class=\"nu0\">1</span> }. ] * <a class=\"__cf_email__\" data-cfemail=\"6b02452b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<br/>intg=: <span class=\"nu0\">0</span> ,  ]\u00a0% <span class=\"nu0\">1</span> + <a class=\"__cf_email__\" data-cfemail=\"d1b8ff91\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<br/>mult=: +//<a class=\"__cf_email__\" data-cfemail=\"705e30\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>*/<span class=\"sy0\">)</span><br/>plus=: +/@,:<br/>minus=: -/@,:</pre>"}, {"lang": "Java", "loc": 166, "block": "<pre class=\"text highlighted_source\">module FormalPowerSeries<br/>\u00a0<br/>_div(a, b) = a / b<br/>_div(a::Union{Integer,Rational}, b::Union{Integer,Rational}) = a // b<br/>\u00a0<br/>abstract type AbstractFPS{T&lt;:Number} end<br/>\u00a0<br/>Base.iteratorsize(::AbstractFPS) = Base.IsInfinite()<br/>Base.done(::AbstractFPS,\u00a0::Any) = false<br/>Base.iteratoreltype(::AbstractFPS) = Base.HasEltype()<br/>Base.eltype(::AbstractFPS{T}) where T = T<br/>Base.one(::AbstractFPS{T}) where T = ConstantFPS(one(T))<br/>\u00a0<br/>function Base.show(io::IO, fps::AbstractFPS{T}) where T<br/>    itr = Iterators.take(fps, 8)<br/>    s = start(itr)<br/>    a, s = next(itr, s)<br/>    print(io, a)<br/>    a, s = next(itr, s)<br/>    @printf(io, \"\u00a0%s\u00a0%s\u22c5x\",<br/>        ifelse(sign(a) \u2265 0, '+', '-'), abs(a))<br/>    local i = 2<br/>    while\u00a0!done(itr, s)<br/>        a, s = next(itr, s)<br/>        @printf(io, \"\u00a0%s\u00a0%s\u22c5x^%i\",<br/>            ifelse(sign(a) \u2265 0, '+', '-'), abs(a), i)<br/>        i += 1<br/>    end<br/>    print(io, \"...\")<br/>end<br/>\u00a0<br/>struct MinusFPS{T,A&lt;:AbstractFPS{T}} &lt;: AbstractFPS{T}<br/>    a::A<br/>end<br/>Base.:-(a::AbstractFPS{T}) where T = MinusFPS{T,typeof(a)}(a)<br/>\u00a0<br/>Base.start(fps::MinusFPS) = start(fps.a)<br/>function Base.next(fps::MinusFPS, st)<br/>    v, s = next(fps.a, st)<br/>    return -v, s<br/>end<br/>\u00a0<br/>struct SumFPS{T,A&lt;:AbstractFPS,B&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    b::B<br/>end<br/>Base.:+(a::AbstractFPS{A}, b::AbstractFPS{B}) where {A,B} =<br/>    SumFPS{promote_type(A, B),typeof(a),typeof(b)}(a, b)<br/>Base.:-(a::AbstractFPS, b::AbstractFPS) = a + (-b)<br/>\u00a0<br/>Base.start(fps::SumFPS) = (start(fps.a), start(fps.b))<br/>function Base.next(fps::SumFPS{T,A,B}, st) where {T,A,B}<br/>    stateA, stateB = st<br/>    valueA, stateA = next(fps.a, stateA)<br/>    valueB, stateB = next(fps.b, stateB)<br/>    return T(valueA + valueB), (stateA, stateB)<br/>end<br/>\u00a0<br/>struct ProductFPS{T,A&lt;:AbstractFPS,B&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    b::B<br/>end<br/>Base.:*(a::AbstractFPS{A}, b::AbstractFPS{B}) where {A,B} =<br/>    ProductFPS{promote_type(A, B),typeof(a),typeof(b)}(a, b)<br/>\u00a0<br/>Base.start(fps::ProductFPS{T}) where T = (start(fps.a), start(fps.b), T[], T[])<br/>function Base.next(fps::ProductFPS{T,A,B}, st) where {T,A,B}<br/>    stateA, stateB, listA, listB = st<br/>    valueA, stateA = next(fps.a, stateA)<br/>    valueB, stateB = next(fps.b, stateB)<br/>    push!(listA, valueA)<br/>    unshift!(listB, valueB)<br/>    return T(sum(listA .* listB)), (stateA, stateB, listA, listB)<br/>end<br/>\u00a0<br/>struct DifferentiatedFPS{T,A&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>end<br/>differentiate(fps::AbstractFPS{T}) where T = DifferentiatedFPS{T,typeof(fps)}(fps)<br/>\u00a0<br/>function Base.start(fps::DifferentiatedFPS{T,A}) where {T,A}<br/>    s = start(fps.a)<br/>    _, s = next(fps.a, s)<br/>    n = zero(T)<br/>    return n, s<br/>end<br/>function Base.next(fps::DifferentiatedFPS{T,A}, st) where {T,A}<br/>    n, s = st<br/>    n += one(n)<br/>    v, s = next(fps.a, s)<br/>    return n * v, (n, s)<br/>end<br/>\u00a0<br/>struct IntegratedFPS{T,A&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    k::T<br/>end<br/>integrate(fps::AbstractFPS{T}, k::T=zero(T)) where T = IntegratedFPS{T,typeof(fps)}(fps, k)<br/>integrate(fps::AbstractFPS{T}, k::T=zero(T)) where T &lt;: Integer =<br/>    IntegratedFPS{Rational{T},typeof(fps)}(fps, k)<br/>\u00a0<br/>Base.start(fps::IntegratedFPS{T,A}) where {T,A} = zero(T), start(fps.a)<br/>function Base.next(fps::IntegratedFPS{T,A}, st) where {T,A}<br/>    n, s = st<br/>    iszero(n) &amp;&amp; return fps.k, (one(n), s)<br/>    v, s = next(fps.a, s)<br/>    r::T = _div(v, n)<br/>    n += one(n)<br/>    return r, (n, s)<br/>end<br/>\u00a0<br/># Examples of FPS: constant<br/>\u00a0<br/>struct FiniteFPS{T} &lt;: AbstractFPS{T}<br/>    v::NTuple{N,T} where N<br/>end<br/>Base.start(fps::FiniteFPS) = 1<br/>Base.next(fps::FiniteFPS{T}, st) where T =<br/>    st &gt; endof(fps.v)\u00a0? (zero(T), st)\u00a0: (fps.v[st], st + 1)<br/>Base.convert(::Type{FiniteFPS}, x::Real) = FiniteFPS{typeof(x)}((x,))<br/>for op in (:+,\u00a0:-,\u00a0:*)<br/>    @eval Base.$op(x::Number, a::AbstractFPS) = $op(FiniteFPS(x), a)<br/>    @eval Base.$op(a::AbstractFPS, x::Number) = $op(a, FiniteFPS(x))<br/>end<br/>\u00a0<br/>struct ConstantFPS{T} &lt;: AbstractFPS{T}<br/>    k::T<br/>end<br/>Base.start(::ConstantFPS) = nothing<br/>Base.next(c::ConstantFPS,\u00a0::Any) = c.k, nothing<br/>\u00a0<br/>struct SineFPS{T} &lt;: AbstractFPS{T} end<br/>SineFPS() = SineFPS{Rational{Int}}()<br/>Base.start(::SineFPS) = 0, 1, 1<br/>function Base.next(::SineFPS{T}, st) where T<br/>    n, fac, s = st<br/>    local r::T<br/>    if iseven(n)<br/>        r = zero(T)<br/>    else<br/>        r = _div(one(T), (s * fac))<br/>        s = -s<br/>    end<br/>    n += 1<br/>    fac *= n<br/>    return r, (n, fac, s)<br/>end<br/>\u00a0<br/>struct CosineFPS{T} &lt;: AbstractFPS{T} end<br/>CosineFPS() = CosineFPS{Rational{Int}}()<br/>Base.start(::CosineFPS) = 0, 1, 1<br/>function Base.next(::CosineFPS{T}, st) where T<br/>    n, fac, s = st<br/>    local r::T<br/>    if iseven(n)<br/>        r = _div(one(T), (s * fac))<br/>    else<br/>        r = zero(T)<br/>        s = -s<br/>    end<br/>    n += 1<br/>    fac *= n<br/>    return r, (n, fac, s)<br/>end<br/>\u00a0<br/>end  # module FormalPowerSeries</pre>"}, {"lang": "Julia", "loc": 166, "block": "<pre class=\"text highlighted_source\">module FormalPowerSeries<br/>\u00a0<br/>_div(a, b) = a / b<br/>_div(a::Union{Integer,Rational}, b::Union{Integer,Rational}) = a // b<br/>\u00a0<br/>abstract type AbstractFPS{T&lt;:Number} end<br/>\u00a0<br/>Base.iteratorsize(::AbstractFPS) = Base.IsInfinite()<br/>Base.done(::AbstractFPS,\u00a0::Any) = false<br/>Base.iteratoreltype(::AbstractFPS) = Base.HasEltype()<br/>Base.eltype(::AbstractFPS{T}) where T = T<br/>Base.one(::AbstractFPS{T}) where T = ConstantFPS(one(T))<br/>\u00a0<br/>function Base.show(io::IO, fps::AbstractFPS{T}) where T<br/>    itr = Iterators.take(fps, 8)<br/>    s = start(itr)<br/>    a, s = next(itr, s)<br/>    print(io, a)<br/>    a, s = next(itr, s)<br/>    @printf(io, \"\u00a0%s\u00a0%s\u22c5x\",<br/>        ifelse(sign(a) \u2265 0, '+', '-'), abs(a))<br/>    local i = 2<br/>    while\u00a0!done(itr, s)<br/>        a, s = next(itr, s)<br/>        @printf(io, \"\u00a0%s\u00a0%s\u22c5x^%i\",<br/>            ifelse(sign(a) \u2265 0, '+', '-'), abs(a), i)<br/>        i += 1<br/>    end<br/>    print(io, \"...\")<br/>end<br/>\u00a0<br/>struct MinusFPS{T,A&lt;:AbstractFPS{T}} &lt;: AbstractFPS{T}<br/>    a::A<br/>end<br/>Base.:-(a::AbstractFPS{T}) where T = MinusFPS{T,typeof(a)}(a)<br/>\u00a0<br/>Base.start(fps::MinusFPS) = start(fps.a)<br/>function Base.next(fps::MinusFPS, st)<br/>    v, s = next(fps.a, st)<br/>    return -v, s<br/>end<br/>\u00a0<br/>struct SumFPS{T,A&lt;:AbstractFPS,B&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    b::B<br/>end<br/>Base.:+(a::AbstractFPS{A}, b::AbstractFPS{B}) where {A,B} =<br/>    SumFPS{promote_type(A, B),typeof(a),typeof(b)}(a, b)<br/>Base.:-(a::AbstractFPS, b::AbstractFPS) = a + (-b)<br/>\u00a0<br/>Base.start(fps::SumFPS) = (start(fps.a), start(fps.b))<br/>function Base.next(fps::SumFPS{T,A,B}, st) where {T,A,B}<br/>    stateA, stateB = st<br/>    valueA, stateA = next(fps.a, stateA)<br/>    valueB, stateB = next(fps.b, stateB)<br/>    return T(valueA + valueB), (stateA, stateB)<br/>end<br/>\u00a0<br/>struct ProductFPS{T,A&lt;:AbstractFPS,B&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    b::B<br/>end<br/>Base.:*(a::AbstractFPS{A}, b::AbstractFPS{B}) where {A,B} =<br/>    ProductFPS{promote_type(A, B),typeof(a),typeof(b)}(a, b)<br/>\u00a0<br/>Base.start(fps::ProductFPS{T}) where T = (start(fps.a), start(fps.b), T[], T[])<br/>function Base.next(fps::ProductFPS{T,A,B}, st) where {T,A,B}<br/>    stateA, stateB, listA, listB = st<br/>    valueA, stateA = next(fps.a, stateA)<br/>    valueB, stateB = next(fps.b, stateB)<br/>    push!(listA, valueA)<br/>    unshift!(listB, valueB)<br/>    return T(sum(listA .* listB)), (stateA, stateB, listA, listB)<br/>end<br/>\u00a0<br/>struct DifferentiatedFPS{T,A&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>end<br/>differentiate(fps::AbstractFPS{T}) where T = DifferentiatedFPS{T,typeof(fps)}(fps)<br/>\u00a0<br/>function Base.start(fps::DifferentiatedFPS{T,A}) where {T,A}<br/>    s = start(fps.a)<br/>    _, s = next(fps.a, s)<br/>    n = zero(T)<br/>    return n, s<br/>end<br/>function Base.next(fps::DifferentiatedFPS{T,A}, st) where {T,A}<br/>    n, s = st<br/>    n += one(n)<br/>    v, s = next(fps.a, s)<br/>    return n * v, (n, s)<br/>end<br/>\u00a0<br/>struct IntegratedFPS{T,A&lt;:AbstractFPS} &lt;: AbstractFPS{T}<br/>    a::A<br/>    k::T<br/>end<br/>integrate(fps::AbstractFPS{T}, k::T=zero(T)) where T = IntegratedFPS{T,typeof(fps)}(fps, k)<br/>integrate(fps::AbstractFPS{T}, k::T=zero(T)) where T &lt;: Integer =<br/>    IntegratedFPS{Rational{T},typeof(fps)}(fps, k)<br/>\u00a0<br/>Base.start(fps::IntegratedFPS{T,A}) where {T,A} = zero(T), start(fps.a)<br/>function Base.next(fps::IntegratedFPS{T,A}, st) where {T,A}<br/>    n, s = st<br/>    iszero(n) &amp;&amp; return fps.k, (one(n), s)<br/>    v, s = next(fps.a, s)<br/>    r::T = _div(v, n)<br/>    n += one(n)<br/>    return r, (n, s)<br/>end<br/>\u00a0<br/># Examples of FPS: constant<br/>\u00a0<br/>struct FiniteFPS{T} &lt;: AbstractFPS{T}<br/>    v::NTuple{N,T} where N<br/>end<br/>Base.start(fps::FiniteFPS) = 1<br/>Base.next(fps::FiniteFPS{T}, st) where T =<br/>    st &gt; endof(fps.v)\u00a0? (zero(T), st)\u00a0: (fps.v[st], st + 1)<br/>Base.convert(::Type{FiniteFPS}, x::Real) = FiniteFPS{typeof(x)}((x,))<br/>for op in (:+,\u00a0:-,\u00a0:*)<br/>    @eval Base.$op(x::Number, a::AbstractFPS) = $op(FiniteFPS(x), a)<br/>    @eval Base.$op(a::AbstractFPS, x::Number) = $op(a, FiniteFPS(x))<br/>end<br/>\u00a0<br/>struct ConstantFPS{T} &lt;: AbstractFPS{T}<br/>    k::T<br/>end<br/>Base.start(::ConstantFPS) = nothing<br/>Base.next(c::ConstantFPS,\u00a0::Any) = c.k, nothing<br/>\u00a0<br/>struct SineFPS{T} &lt;: AbstractFPS{T} end<br/>SineFPS() = SineFPS{Rational{Int}}()<br/>Base.start(::SineFPS) = 0, 1, 1<br/>function Base.next(::SineFPS{T}, st) where T<br/>    n, fac, s = st<br/>    local r::T<br/>    if iseven(n)<br/>        r = zero(T)<br/>    else<br/>        r = _div(one(T), (s * fac))<br/>        s = -s<br/>    end<br/>    n += 1<br/>    fac *= n<br/>    return r, (n, fac, s)<br/>end<br/>\u00a0<br/>struct CosineFPS{T} &lt;: AbstractFPS{T} end<br/>CosineFPS() = CosineFPS{Rational{Int}}()<br/>Base.start(::CosineFPS) = 0, 1, 1<br/>function Base.next(::CosineFPS{T}, st) where T<br/>    n, fac, s = st<br/>    local r::T<br/>    if iseven(n)<br/>        r = _div(one(T), (s * fac))<br/>    else<br/>        r = zero(T)<br/>        s = -s<br/>    end<br/>    n += 1<br/>    fac *= n<br/>    return r, (n, fac, s)<br/>end<br/>\u00a0<br/>end  # module FormalPowerSeries</pre>"}, {"lang": "Kotlin", "loc": 208, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/>fun gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Long, b<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> gcd<span class=\"br0\">(</span>b, a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Frac <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num<span class=\"sy0\">:</span> Long<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom<span class=\"sy0\">:</span> Long<br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ZERO <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ONE  <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long, d<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        require<span class=\"br0\">(</span>d <span class=\"sy0\">!=</span> 0L<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dd <span class=\"sy0\">=</span> d<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn <span class=\"sy0\">=</span> -nn<br/>            dd <span class=\"sy0\">=</span> -dd<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>nn, dd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>g <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn /<span class=\"sy0\">=</span> g<br/>            dd /<span class=\"sy0\">=</span> g<br/>        <span class=\"br0\">}</span><br/>        num <span class=\"sy0\">=</span> nn<br/>        denom <span class=\"sy0\">=</span> dd<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>n.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, d.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun plus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Frac<span class=\"br0\">(</span>num <span class=\"sy0\">*</span> other.<span class=\"me1\">denom</span> + denom <span class=\"sy0\">*</span> other.<span class=\"me1\">num</span>, other.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> denom<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun unaryPlus<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>\u00a0<br/>    operator fun unaryMinus<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span>-num, denom<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun minus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + <span class=\"br0\">(</span>-other<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun times<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Frac<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">num</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">num</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">denom</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun rem<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - Frac<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> / other<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> other<br/>\u00a0<br/>    operator fun inc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + ONE<br/>    operator fun dec<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - ONE<br/>\u00a0<br/>    fun inverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac <span class=\"br0\">{</span><br/>        require<span class=\"br0\">(</span>num <span class=\"sy0\">!=</span> 0L<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Frac<span class=\"br0\">(</span>denom, num<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun div<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> other.<span class=\"me1\">inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun abs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - other.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> when <span class=\"br0\">{</span><br/>            diff <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span>  -<span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span><br/>            diff <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span>  -<span class=\"sy0\">&gt;</span> +<span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>        -<span class=\"sy0\">&gt;</span>  <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun equals<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Any<span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>other <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || other <span class=\"sy0\">!</span>is Frac<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun hashCode<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span> xor denom.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>denom <span class=\"sy0\">==</span> 1L<span class=\"br0\">)</span> <span class=\"st0\">\"$num\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"$num/$denom\"</span><br/>\u00a0<br/>    fun toDouble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> / denom<br/>\u00a0<br/>    fun toLong<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num / denom<br/><span class=\"br0\">}</span><br/>\u00a0<br/>interface Gene <span class=\"br0\">{</span><br/>    fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gene<span class=\"sy0\">:</span> Gene<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cache <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun get<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Frac.<span class=\"me1\">ZERO</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> cache.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in cache.<span class=\"me1\">size</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> cache.<span class=\"me1\">add</span><span class=\"br0\">(</span>gene.<span class=\"me1\">coef</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> cache<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> FormalPS <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> term<span class=\"sy0\">:</span> Term<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> DISP<span class=\"sy0\">_</span>TERM <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><br/>        const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> X<span class=\"sy0\">_</span>VAR <span class=\"sy0\">=</span> <span class=\"st0\">\"x\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>term<span class=\"sy0\">:</span> Term<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">term</span> <span class=\"sy0\">=</span> term<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>polynomial<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || n <span class=\"sy0\">&gt;=</span> polynomial.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>                    Frac.<span class=\"me1\">ZERO</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                    polynomial<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun copyFrom<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> FormalPS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        term <span class=\"sy0\">=</span> other.<span class=\"me1\">term</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun inverseCoef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> res <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Frac.<span class=\"me1\">ZERO</span> <span class=\"br0\">}</span><br/>        res<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> term<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until i<span class=\"br0\">)</span> res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> term<span class=\"br0\">[</span>i - j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> res<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> -res<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> res<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun plus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> FormalPS<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> term<span class=\"br0\">[</span>n<span class=\"br0\">]</span> + other.<span class=\"me1\">term</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun minus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> FormalPS<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> term<span class=\"br0\">[</span>n<span class=\"br0\">]</span> - other.<span class=\"me1\">term</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun times<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> FormalPS<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> res <span class=\"sy0\">=</span> Frac.<span class=\"me1\">ZERO</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> res +<span class=\"sy0\">=</span> term<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">term</span><span class=\"br0\">[</span>n - i<span class=\"br0\">]</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> res<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun div<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> FormalPS<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Frac <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> res <span class=\"sy0\">=</span> Frac.<span class=\"me1\">ZERO</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> res +<span class=\"sy0\">=</span> term<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">inverseCoef</span><span class=\"br0\">(</span>n - i<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> res<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun diff<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> term<span class=\"br0\">[</span>n + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> Frac<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun intg<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        FormalPS<span class=\"br0\">(</span>Term<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Gene <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun coef<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> Frac.<span class=\"me1\">ZERO</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> term<span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> toString<span class=\"br0\">(</span>DISP<span class=\"sy0\">_</span>TERM<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun toString<span class=\"br0\">(</span>dpTerm<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c <span class=\"sy0\">=</span> term<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">!=</span> Frac.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until dpTerm<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c <span class=\"sy0\">=</span> term<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">!=</span> Frac.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> Frac.<span class=\"me1\">ZERO</span> <span class=\"sy0\">&amp;&amp;</span> sb.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><br/>                sb.<span class=\"me1\">append</span> <span class=\"br0\">(</span>when <span class=\"br0\">{</span><br/>                    c <span class=\"sy0\">==</span> Frac.<span class=\"me1\">ONE</span>  -<span class=\"sy0\">&gt;</span> X<span class=\"sy0\">_</span>VAR<br/>                    c <span class=\"sy0\">==</span> -Frac.<span class=\"me1\">ONE</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\" - $X_VAR\"</span><br/>                    c.<span class=\"me1\">num</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>      -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\" - ${-c}$X_VAR\"</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>           -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"$c$X_VAR\"</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"^$i\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sb.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" + ...\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cos <span class=\"sy0\">=</span> FormalPS<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sin <span class=\"sy0\">=</span> cos.<span class=\"me1\">intg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    cos.<span class=\"me1\">copyFrom</span><span class=\"br0\">(</span>FormalPS<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>Frac.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - sin.<span class=\"me1\">intg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"SIN(x) = $sin\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"COS(x) = $cos\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">1/(1+.)</pre>"}, {"lang": "Maxima", "loc": 14, "block": "<pre class=\"text highlighted_source\">deftaylor(f(x), sum(n! * x^n, n, 0, inf))$<br/>\u00a0<br/>taylor(f(x), x, 0, 10);<br/>/ * 1 + x + 2 * x^2 + 6 * x^3 + 24 * x^4 + 120 * x^5 + 720 * x^6 + 5040 * x^7 + 40320 * x^8 + 362880 * x^9 + 3628800 * x^10 + ... * /<br/>\u00a0<br/>taylor(f(x)^2, x, 0, 10);<br/>/ * 1 + 2 * x + 5 * x^2 + 16 * x^3 + 64 * x^4 + 312 * x^5 + 1812 * x^6 + 12288 * x^7 + 95616 * x^8 + 840960 * x^9 + 8254080 * x^10 + ... * /<br/>\u00a0<br/>\u00a0<br/>deftaylor(fcos(x), sum((-1)^n * x^(2 * n) / (2 * n)!, n, 0, inf))$<br/>deftaylor(fsin(x), sum((-1)^n * x^(2 * n + 1) / (2 * n + 1)!, n, 0, inf))$<br/>\u00a0<br/>taylor(fcos(x)^2 + fsin(x)^2, x, 0, 20);<br/>/ * 1 + ... * /</pre>"}, {"lang": "Lua", "loc": 56, "block": "<pre class=\"lua highlighted_source\">powerseries <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>__add <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"sy0\">,</span> z2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__sub <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"sy0\">,</span> z2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__mul <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"sy0\">,</span> z2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>    ret <span class=\"sy0\">=</span> ret <span class=\"sy0\">+</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__div <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"sy0\">,</span> z2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> coeffs<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> c <span class=\"sy0\">=</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> c <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> coeffs<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>a<span class=\"sy0\">-</span>j<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> c <span class=\"sy0\">/</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    ret <span class=\"sy0\">=</span> ret <span class=\"sy0\">-</span> coeffs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret <span class=\"sy0\">/</span> z2<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__pow <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"co1\">-- for a series z, z^n returns the nth derivative of z. negative values take integrals.</span><br/>  <span class=\"kw1\">if</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> z1<br/>  <span class=\"kw1\">elseif</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">return</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">return</span> z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>i <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__unm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z1<span class=\"br0\">)</span> <span class=\"kw1\">return</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>z1<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> z<span class=\"sy0\">.</span>coeff<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span> <span class=\"kw1\">do</span> <span class=\"co1\">--we do 20 terms, which is simpler than trying to check error bounds</span><br/>    ret <span class=\"sy0\">=</span> ret <span class=\"sy0\">+</span> z<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">^</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">{</span>__call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span>coeff <span class=\"sy0\">=</span> f<span class=\"br0\">}</span><span class=\"sy0\">,</span> z<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>cosine <span class=\"sy0\">=</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"br0\">(</span>sine<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">--defer to the integral of sine function</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>\u00a0<br/>sine <span class=\"sy0\">=</span> powerseries<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>cosine<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"co1\">--defer to the integral of cosine function</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sine<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> sine<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> sine<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> sine<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sine<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sine<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> cosine<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>tangent <span class=\"sy0\">=</span> sine <span class=\"sy0\">/</span> cosine<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>tangent<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> tangent<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> tangent<span class=\"br0\">(</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">--something like 30000 function calls!</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">cos = Series[Cos[x], {x, 0, 10}];<br/>sin = Series[Sin[x], {x, 0, 8}];<br/>sin - Integrate[cos, x]</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">sin</span><span class=\"br0\">(</span><span class=\"re1\">'x</span><span class=\"br0\">)</span><br/><span class=\"kw1\">cos</span><span class=\"br0\">(</span><span class=\"re1\">'x</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 116, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> FPS<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigRat</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"co5\">@_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span> <span class=\"kw1\">unless</span> <span class=\"co5\">@_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$arg</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> more <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$arg</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span> <span class=\"kw1\">if</span> <span class=\"st_h\">'CODE'</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$arg</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> coeff <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$arg</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span> <span class=\"kw1\">if</span> <span class=\"st_h\">'ARRAY'</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$arg</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> coeff <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$arg</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> coeff <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$cache</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>coeff<span class=\"br0\">}</span> <span class=\"sy0\">||=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$more</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>more<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span> <span class=\"re0\">@$cache</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">last</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$more</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$cache</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$more</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span> <span class=\"re0\">$self</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"re0\">$cache</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> invert <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$orig</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$orig</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$self</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">unless</span><span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$a0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$orig</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Cannot invert power series with zero constant term.\"</span><br/>            <span class=\"kw1\">unless</span> <span class=\"re0\">$a0</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">(</span>Math<span class=\"sy0\">::</span><span class=\"me2\">BigRat</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$a0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$terms</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>coeff<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$orig</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$terms</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>         <span class=\"sy0\">-</span><span class=\"re0\">$terms</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fixargs <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$swap</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$class</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> UNIVERSAL<span class=\"sy0\">::</span><span class=\"me2\">isa</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$swap</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> overload <span class=\"st_h\">'+'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;fixargs</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$class</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;fixargs</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$class</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'*'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;fixargs</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$class</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'/'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;fixargs</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">invert</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\"\"'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"st0\">\" - \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"sy0\">.</span><span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"x^$i\"</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> differentiate <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$orig</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$orig</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$orig</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> integrate <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$orig</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$orig</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> coeff <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> more <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$orig</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">coeff</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigRat</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$sin</span> <span class=\"sy0\">=</span> __PACKAGE__<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$cos</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sin</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">integrate</span><span class=\"sy0\">;</span><br/><span class=\"re0\">%$sin</span> <span class=\"sy0\">=</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"re0\">$cos</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">integrate</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$tan</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sin</span> <span class=\"sy0\">/</span> <span class=\"re0\">$cos</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> __PACKAGE__<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">%$exp</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"re0\">$exp</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">integrate</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> coeff <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"sin(x) ~= $sin<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"cos(x) ~= $cos<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"tan(x) ~= $tan<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"exp(x) ~= $exp<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"sin^2 + cos^s = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$sin</span><span class=\"re0\">*$sin</span> <span class=\"sy0\">+</span> <span class=\"re0\">$cos</span><span class=\"re0\">*$cos</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">__END__</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 84, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> DerFPS <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">class</span> IntFPS <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">role</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw2\">method</span> coeffs        <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> differentiate <span class=\"br0\">{</span> DerFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"kw1\">x</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> integrate     <span class=\"br0\">{</span> IntFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"kw1\">x</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> pretty<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">sub</span> super<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$i</span><span class=\"sy0\">.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span><span class=\"st_h\">'0123456789'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'\u2070\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"kw1\">Z</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">when</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\" + {(+$_).perl}\u2219x{super($i)}\"</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">when</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\" - {(-$_).perl}\u2219x{super($i)}\"</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> ExplicitFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span> <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> SumFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">,</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> <span class=\"kw1\">Z</span><span class=\"sy0\">+</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> DifFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">,</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> Z<span class=\"sy0\">-</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> ProFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">,</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">...</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> InvFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span><br/>        <span class=\"co1\"># see http://en.wikipedia.org/wiki/Formal_power_series#Inverting_series</span><br/>        gather <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"kw1\">fail</span> <span class=\"st0\">\"Cannot invert power series with zero constant term.\"</span><span class=\"sy0\">;</span><br/>            take <span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">...</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> DerFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">*</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> IntFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> DeferredFPS <span class=\"kw1\">does</span> FPS <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> FPS <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">realized</span> <span class=\"kw1\">is</span> rw<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> coeffs <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">realized</span><span class=\"sy0\">.</span><span class=\"me1\">coeffs</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># some arithmetic operations for formal power series</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;+&gt;</span><span class=\"br0\">(</span>FPS <span class=\"re0\">$x</span><span class=\"sy0\">,</span> FPS <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> SumFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;-&gt;</span><span class=\"br0\">(</span>FPS <span class=\"re0\">$x</span><span class=\"sy0\">,</span> FPS <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> DifFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;*&gt;</span><span class=\"br0\">(</span>FPS <span class=\"re0\">$x</span><span class=\"sy0\">,</span> FPS <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> ProFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;/&gt;</span><span class=\"br0\">(</span>FPS <span class=\"re0\">$x</span><span class=\"sy0\">,</span> FPS <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> InvFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"kw1\">x</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># an example of a mixed-type operator:</span><br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;-&gt;</span><span class=\"br0\">(</span>Numeric <span class=\"re0\">$x</span><span class=\"sy0\">,</span> FPS <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> ExplicitFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>coeffs<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># define sine and cosine in terms of each other</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$sin</span>       <span class=\"sy0\">=</span> DeferredFPS<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$cos</span>       <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sin</span><span class=\"sy0\">.</span><span class=\"me1\">integrate</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$sin</span><span class=\"sy0\">.</span><span class=\"me1\">realized</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cos</span><span class=\"sy0\">.</span><span class=\"me1\">integrate</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># define tangent in terms of sine and cosine</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$tan</span>       <span class=\"sy0\">=</span> <span class=\"re0\">$sin</span> <span class=\"sy0\">/</span> <span class=\"re0\">$cos</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'sin(x) \u2248 '</span><span class=\"sy0\">,</span> <span class=\"re0\">$sin</span><span class=\"sy0\">.</span><span class=\"me1\">pretty</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'cos(x) \u2248 '</span><span class=\"sy0\">,</span> <span class=\"re0\">$cos</span><span class=\"sy0\">.</span><span class=\"me1\">pretty</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'tan(x) \u2248 '</span><span class=\"sy0\">,</span> <span class=\"re0\">$tan</span><span class=\"sy0\">.</span><span class=\"me1\">pretty</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de lazy Args<br/>   (def (car Args)<br/>      (list (cadr Args)<br/>         (cons 'cache (lit (cons))<br/>            (caadr Args)<br/>            (cddr Args) ) ) ) )</pre>"}, {"lang": "Python", "loc": 96, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">''' <span class=\"es0\">\\</span><br/>For a discussion on pipe() and head() see<br/>  http://paddy3118.blogspot.com/2009/05/pipe-fitting-with-python-generators.html<br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> islice<br/><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/><span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> izip <span class=\"kw1\">as</span> <span class=\"kw2\">zip</span> <span class=\"co1\"># for 2.6</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/><span class=\"kw1\">def</span> head<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">''' return a generator that passes through at most n items<br/>    '''</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> seq: islice<span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> pipe<span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> *cmds<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">''' pipe(a,b,c,d, ...) -&gt; yield from ...d(c(b(a)))<br/>    '''</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> gen<span class=\"sy0\">,</span> <span class=\"kw3\">cmd</span>: <span class=\"kw3\">cmd</span><span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"sy0\">,</span> cmds<span class=\"sy0\">,</span> gen<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sinepower<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    fac <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    sign <span class=\"sy0\">=</span> +<span class=\"nu0\">1</span><br/>    zero <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">yield</span> zero<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        n +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        fac *<span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">yield</span> Fraction<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> fac*sign<span class=\"br0\">)</span><br/>        sign <span class=\"sy0\">=</span> -sign<br/>        n +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        fac *<span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">yield</span> zero<br/><span class=\"kw1\">def</span> cosinepower<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    fac <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    sign <span class=\"sy0\">=</span> +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">yield</span> Fraction<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>fac<span class=\"br0\">)</span><br/>    zero <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        n +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        fac *<span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">yield</span> zero<br/>        sign <span class=\"sy0\">=</span> -sign<br/>        n +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        fac *<span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">yield</span> Fraction<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> fac*sign<span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> pluspower<span class=\"br0\">(</span>*powergenerators<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> elements <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*powergenerators<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">yield</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>elements<span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> minuspower<span class=\"br0\">(</span>*powergenerators<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> elements <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*powergenerators<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">yield</span> elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - <span class=\"kw2\">sum</span><span class=\"br0\">(</span>elements<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> mulpower<span class=\"br0\">(</span>fgen<span class=\"sy0\">,</span>ggen<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'From: http://en.wikipedia.org/wiki/Power_series#Multiplication_and_division'</span><br/>    a<span class=\"sy0\">,</span>b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>g <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>fgen<span class=\"sy0\">,</span> ggen<span class=\"br0\">)</span>:<br/>        a.<span class=\"me1\">append</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        b.<span class=\"me1\">append</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f*g <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>g <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw2\">reversed</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> constpower<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> n<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">yield</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">def</span> diffpower<span class=\"br0\">(</span>gen<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'differentiatiate power series'</span><br/>    next<span class=\"br0\">(</span>gen<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> an <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">yield</span> an*n<br/><span class=\"kw1\">def</span> intgpower<span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'integrate power series with constant k'</span><br/>    <span class=\"kw1\">def</span> _intgpower<span class=\"br0\">(</span>gen<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">yield</span> k<br/>        <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> an <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">yield</span> an * Fraction<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> _intgpower<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"cosine\"</span><span class=\"br0\">)</span><br/>c <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>pipe<span class=\"br0\">(</span>cosinepower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> head<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"sine\"</span><span class=\"br0\">)</span><br/>s <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>pipe<span class=\"br0\">(</span>sinepower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> head<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"co1\"># integrate cosine</span><br/>integc <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>pipe<span class=\"br0\">(</span>cosinepower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>intgpower<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> head<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\"># 1 - (integrate sine)</span><br/>integs1 <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>minuspower<span class=\"br0\">(</span>pipe<span class=\"br0\">(</span>constpower<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> head<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                          pipe<span class=\"br0\">(</span>sinepower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>intgpower<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> head<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">assert</span> s <span class=\"sy0\">==</span> integc<span class=\"sy0\">,</span> <span class=\"st0\">\"The integral of cos should be sin\"</span><br/><span class=\"kw1\">assert</span> c <span class=\"sy0\">==</span> integs1<span class=\"sy0\">,</span> <span class=\"st0\">\"1 minus the integral of sin should be cos\"</span></pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang lazy<br/>\u00a0<br/>(require racket/match)<br/>\u00a0<br/>;; element-wise addition and subtraction<br/>(define (&lt;+&gt; s1 s2) (map + s1 s2))<br/>(define (&lt;-&gt; s1 s2) (map - s1 s2))<br/>\u00a0<br/>;; element-wise scaling<br/>(define (scale a s) (map (\u03bb (x) (* a x)) s))<br/>\u00a0<br/>;; series multiplication<br/>(define (&lt;*&gt; fs gs)<br/>  (match-let ([(cons f ft) (! fs)]<br/>              [(cons g gt) (! gs)])<br/>    (cons (* f g) (&lt;+&gt; (scale f gt) (&lt;*&gt; ft gs)))))<br/>\u00a0<br/>;; series division<br/>(define (&lt;/&gt; fs gs)<br/>  (match-letrec ([(cons f ft) (! fs)]<br/>                 [(cons g gt) (! gs)]<br/>                 [qs (cons (/ f g) (scale (/ g) (&lt;-&gt; ft (&lt;*&gt; qs gt))))])<br/>      qs))<br/>\u00a0<br/>;; integration and differentiation<br/>(define (int f) (map / f (enum 1)))<br/>(define (diff f) (map * (cdr f) (enum 1)))<br/>\u00a0<br/>;; series of natural numbers greater then n<br/>(define (enum n) (cons n (enum (+ 1 n ))))<br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 23, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define-syntax</span> lons<br/>  <span class=\"br0\">(</span><span class=\"kw1\">syntax-rules</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>_ lar ldr<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">delay</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> lar <span class=\"br0\">(</span><span class=\"kw1\">delay</span> ldr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>lar lons<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span><span class=\"kw1\">force</span> lons<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ldr lons<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">force</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">force</span> lons<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>lap proc . llists<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lons <span class=\"br0\">(</span>apply proc <span class=\"br0\">(</span><span class=\"kw1\">map</span> lar llists<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>apply lap proc <span class=\"br0\">(</span><span class=\"kw1\">map</span> ldr llists<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>take n llist<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>lar llist<span class=\"br0\">)</span> <span class=\"br0\">(</span>take <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ldr llist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>iota n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lons n <span class=\"br0\">(</span>iota <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>repeat n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lons n <span class=\"br0\">(</span>repeat n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 137, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create PowerSeries <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> name<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">{</span>body <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Use the body to adapt the methods of the _object_</span><br/>\too::<span class=\"me1\">objdefine</span> <span class=\"br0\">[</span>self<span class=\"br0\">]</span> <span class=\"re0\">$body</span><br/>        <span class=\"co1\"># Use the rest to configure variables in the object</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>var val<span class=\"br0\">}</span> <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> <span class=\"br0\">[</span>my varname <span class=\"re0\">$var</span><span class=\"br0\">]</span> <span class=\"re0\">$val</span><br/>\t<span class=\"br0\">}</span><br/>        <span class=\"co1\"># Guess the name if not already set</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists <span class=\"br0\">[</span>my varname name<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> name <span class=\"br0\">[</span><span class=\"kw1\">namespace</span> tail <span class=\"br0\">[</span>self<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> name <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$name</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> term i <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> inf<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># A pretty-printer, that prints the first $terms non-zero terms</span><br/>    <span class=\"kw1\">method</span> print <span class=\"br0\">{</span>terms<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> result <span class=\"st0\">\"${name}(x) == \"</span><br/>\t<span class=\"kw1\">set</span> limit <span class=\"br0\">[</span>my limit<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$limit</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># Special case</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"br0\">[</span>my term <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> tCount <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$tCount</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$terms</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span>my term <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw2\">incr</span> tCount<br/>\t    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>.4g <span class=\"re0\">$t</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> eq <span class=\"st0\">\"1\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> t <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">append</span> result <span class=\"st0\">\"$t + \"</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">append</span> result <span class=\"st0\">\"${t}x + \"</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> p <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><br/>\t\t    <span class=\"nu0\">0</span> \\u2070 <span class=\"nu0\">1</span> \\u00b9 <span class=\"nu0\">2</span> \\u00b2 <span class=\"nu0\">3</span> \\u00b3 <span class=\"nu0\">4</span> \\u2074<br/>\t\t    <span class=\"nu0\">5</span> \\u2075 <span class=\"nu0\">6</span> \\u2076 <span class=\"nu0\">7</span> \\u2077 <span class=\"nu0\">8</span> \\u2078 <span class=\"nu0\">9</span> \\u2079<br/>\t\t<span class=\"br0\">}</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">append</span> result <span class=\"st0\">\"${t}x$p + \"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trimright <span class=\"re0\">$result</span> <span class=\"st0\">\"+ \"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Evaluate (a prefix of) the series at a particular x</span><br/>    <span class=\"co1\"># The terms parameter gives the number; 5 is enough for show</span><br/>    <span class=\"kw1\">method</span> evaluate <span class=\"br0\">{</span>x <span class=\"br0\">{</span>terms <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> result <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">set</span> limit <span class=\"br0\">[</span>my limit<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> tCount <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$tCount</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$terms</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span>my term <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw2\">incr</span> tCount<br/>\t    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> + <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Operations to build new sequences from old ones</span><br/>    <span class=\"kw1\">method</span> add <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tPowerSeries new <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">variable</span> S1 S2<br/>\t    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$S1</span> limit<span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"re0\">$S2</span> limit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">method</span> term i <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> t1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$S1</span> limit<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"re0\">$S1</span> term <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> t2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$S2</span> limit<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"re0\">$S2</span> term <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$t1</span> + <span class=\"re0\">$t2</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> S1 <span class=\"br0\">[</span>self<span class=\"br0\">]</span> S2 <span class=\"re0\">$s</span> name <span class=\"st0\">\"$name+[$s name]\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> subtract <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tPowerSeries new <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">variable</span> S1 S2<br/>\t    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$S1</span> limit<span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"re0\">$S2</span> limit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">method</span> term i <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> t1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$S1</span> limit<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"re0\">$S1</span> term <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> t2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$S2</span> limit<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"br0\">[</span><span class=\"re0\">$S2</span> term <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$t1</span> - <span class=\"re0\">$t2</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> S1 <span class=\"br0\">[</span>self<span class=\"br0\">]</span> S2 <span class=\"re0\">$s</span> name <span class=\"st0\">\"$name-[$s name]\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> integrate <span class=\"br0\">{</span><span class=\"br0\">{</span>Name <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Name</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> Name <span class=\"st0\">\"Integrate<span class=\"es0\">\\[</span>[my name]<span class=\"es0\">\\]</span>\"</span><span class=\"br0\">}</span><br/>\tPowerSeries new <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">variable</span> S limit<br/>\t    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists limit<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$limit</span><span class=\"br0\">}</span><br/>\t\ttry <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$S</span> limit<span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span> on <span class=\"kw1\">error</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"co1\"># If the limit spirals out of control, it's infinite!</span><br/>\t\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> limit inf<span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">method</span> term i <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"re0\">$S</span> term <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> / double<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> S <span class=\"br0\">[</span>self<span class=\"br0\">]</span> name <span class=\"re0\">$Name</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> differentiate <span class=\"br0\">{</span><span class=\"br0\">{</span>Name <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$Name</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> Name <span class=\"st0\">\"Differentiate<span class=\"es0\">\\[</span>[my name]<span class=\"es0\">\\]</span>\"</span><span class=\"br0\">}</span><br/>\tPowerSeries new <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">variable</span> S<br/>\t    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$S</span> limit<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"re0\">$S</span> limit<span class=\"br0\">]</span> - <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">method</span> term  i  <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"re0\">$S</span> term <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> S <span class=\"br0\">[</span>self<span class=\"br0\">]</span> name <span class=\"re0\">$Name</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Special constructor for making constants</span><br/>    self <span class=\"kw1\">method</span> constant n <span class=\"br0\">{</span><br/>\tPowerSeries new <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">variable</span> n<br/>\t    <span class=\"kw1\">method</span> limit <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">method</span> term i <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> n <span class=\"re0\">$n</span> name <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Define the two power series in terms of each other</span><br/>PowerSeries create cos <span class=\"sy0\">;</span><span class=\"co1\"># temporary dummy object...</span><br/><span class=\"kw1\">rename</span> <span class=\"br0\">[</span>cos integrate <span class=\"st0\">\"sin\"</span><span class=\"br0\">]</span> sin<br/>cos destroy            <span class=\"sy0\">;</span><span class=\"co1\"># remove the dummy to make way for the real one...</span><br/><span class=\"kw1\">rename</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>PowerSeries constant <span class=\"nu0\">1</span><span class=\"br0\">]</span> subtract <span class=\"br0\">[</span>sin integrate<span class=\"br0\">]</span><span class=\"br0\">]</span> cos</pre>"}, {"lang": "zkl", "loc": 29, "block": "<pre class=\"text highlighted_source\">class IPS{<br/>   var [protected] w;   // the coefficients of the infinite series<br/>   fcn init(w_or_a,b,c,etc){  // IPS(1,2,3) --&gt; (1,2,3,0,0,...)<br/>      switch [arglist]{<br/>\t case(Walker)\t\t{ w=w_or_a.tweak(Void,0) }<br/>\t else\t\t\t{ w=vm.arglist.walker().tweak(Void,0) }<br/>      }<br/>   }<br/>   fcn __opAdd(ipf){   //IPS(1,2,3)+IPS(4,5)--&gt;IPS(5,6,3,0,...), returns modified self<br/>      switch[arglist]{<br/>         case(1){ addConst(ipf) }         // IPS + int/float<br/>\t else   { w=w.zipWith('+,ipf.w) } // IPS + IPS<br/>      }<br/>      self<br/>   }<br/>   fcn __opSub(ipf){ w=w.zipWith('-,ipf.w); self } // IPS - IPSHaskell<br/>   fcn __opMul(ipf){ }  // stub<br/>   fcn __opDiv(x){ w.next().toFloat()/x } // *IPS/x, for integtate()<br/>   fcn __opNegate  { w=w.tweak(Op(\"--\")); self }<br/>   // integtate: b0 = 0 by convention, bn = an-1/n<br/>   fcn integrate{ w=w.zipWith('/,[1..]).push(0.0); self }<br/>   fcn diff     { w=w.zipWith('*,[1..]); \t   self }<br/>   fcn facts{ (1).walker(*).tweak(fcn(n){ (1).reduce(n,'*,1) }) } // 1!,2!...<br/>   fcn walk(n){ w.walk(n) }<br/>   fcn value(x,N=15){ ns:=[1..]; w.reduce(N,'wrap(s,an){ s + an*x.pow(ns.next()) }) }<br/>   fcn cons(k){ w.push(k); self }  //--&gt; k, a0, a1, a2, ...<br/>   // addConst(k) --&gt; k + a0, a1, a2, ..., same as k + IPS<br/>   fcn addConst(k){ (w.next() + k)\u00a0: w.push(_); self }<br/>}</pre>"}]}