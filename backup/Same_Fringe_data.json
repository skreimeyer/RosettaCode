{"task": "Same_Fringe", "blocks": [{"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Data <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/><span class=\"kw3\">package</span> Bin_Trees <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Tree_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Empty<span class=\"br0\">(</span>Tree: Tree_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/>   <span class=\"kw3\">function</span> Left <span class=\"br0\">(</span>Tree: Tree_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Tree_Type;<br/>   <span class=\"kw3\">function</span> Right<span class=\"br0\">(</span>Tree: Tree_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Tree_Type;<br/>   <span class=\"kw3\">function</span> Item <span class=\"br0\">(</span>Tree: Tree_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Data;<br/>   <span class=\"kw3\">function</span> Empty <span class=\"kw1\">return</span> Tree_Type;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Destroy_Tree<span class=\"br0\">(</span>N: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Tree_Type<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Tree<span class=\"br0\">(</span>Value: Data<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Tree_Type;<br/>   <span class=\"kw3\">function</span> Tree<span class=\"br0\">(</span>Value: Data; Left, Right\u00a0: Tree_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Tree_Type;<br/>\u00a0<br/><span class=\"kw3\">private</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Node;<br/>   <span class=\"kw3\">type</span> Tree_Type <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Node;<br/>   <span class=\"kw3\">type</span> Node <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Left, Right: Tree_Type\u00a0:= <span class=\"kw3\">null</span>;<br/>      Item: Data;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Bin_Trees;</pre>"}, {"lang": "Bracmat", "loc": 38, "block": "<pre class=\"text highlighted_source\">( ( T<br/>  =   <br/>    .   ( next<br/>        =   node stack rhs<br/>          .  \u00a0!arg:%?node\u00a0?stack<br/>            &amp;   whl<br/>              ' (\u00a0!node:(?node.?rhs)<br/>                &amp;\u00a0!rhs\u00a0!stack:?stack<br/>                )<br/>            &amp; (!node.!stack)<br/>        )<br/>      &amp;\u00a0!arg:(?stackA,?stackB)<br/>      &amp;   whl<br/>        ' (\u00a0!stackA:~<br/>          &amp;\u00a0!stackB:~<br/>          &amp; next$!stackA:(?leafA.?stackA)<br/>          &amp; next$!stackB:(?leafB.?stackB)<br/>          &amp;\u00a0!leafA:!leafB<br/>          )<br/>      &amp; out$!arg<br/>      &amp; (  \u00a0!stackA:!stackB:<br/>          &amp;\u00a0!leafA:!leafB<br/>          &amp; out$equal<br/>        | out$\"not equal\"<br/>        )<br/>  )<br/>&amp; T$(x,x)<br/>&amp; T$((x.y),(x.y))<br/>&amp; T$(((x.y).z),(x.y.z))<br/>&amp; T$((x.y.z),(x.y.q))<br/>&amp; T$((x.y),(x.y.q))<br/>&amp; T$((x.y.z),(x.y))<br/>&amp; T$(((x.y).z),(x.z.y))<br/>&amp;   T<br/>  $ ( (a.b.c.(x.y).z)<br/>    , (((a.b).c).x.y.z)<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 121, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;ucontext.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\tucontext_t caller<span class=\"sy0\">,</span> callee<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> stack<span class=\"br0\">[</span><span class=\"nu0\">8192</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">void</span> <span class=\"sy0\">*</span>in<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> co_t<span class=\"sy0\">;</span><br/>\u00a0<br/>co_t <span class=\"sy0\">*</span> co_new<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tco_t <span class=\"sy0\">*</span> c <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgetcontext<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>callee<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tc<span class=\"sy0\">-&gt;</span>in <span class=\"sy0\">=</span> data<span class=\"sy0\">;</span><br/>\u00a0<br/>\tc<span class=\"sy0\">-&gt;</span>callee.<span class=\"me1\">uc_stack</span>.<span class=\"me1\">ss_sp</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">-&gt;</span>stack<span class=\"sy0\">;</span><br/>\tc<span class=\"sy0\">-&gt;</span>callee.<span class=\"me1\">uc_stack</span>.<span class=\"me1\">ss_size</span> <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span>stack<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tc<span class=\"sy0\">-&gt;</span>callee.<span class=\"me1\">uc_link</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>caller<span class=\"sy0\">;</span><br/>\tmakecontext<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>callee<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> co_del<span class=\"br0\">(</span>co_t <span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">void</span><br/>co_yield<span class=\"br0\">(</span>co_t <span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tc<span class=\"sy0\">-&gt;</span>out <span class=\"sy0\">=</span> data<span class=\"sy0\">;</span><br/>\tswapcontext<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>callee<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>caller<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span><br/>co_collect<span class=\"br0\">(</span>co_t <span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tc<span class=\"sy0\">-&gt;</span>out <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tswapcontext<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>caller<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>c<span class=\"sy0\">-&gt;</span>callee<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy0\">-&gt;</span>out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// end of coroutine stuff</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> node node<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> node <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> v<span class=\"sy0\">;</span><br/>\tnode <span class=\"sy0\">*</span>left<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>right<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>node <span class=\"sy0\">*</span>newnode<span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tnode <span class=\"sy0\">*</span>n <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tn<span class=\"sy0\">-&gt;</span>left <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tn<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tree_insert<span class=\"br0\">(</span>node <span class=\"sy0\">**</span>root<span class=\"sy0\">,</span> node <span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>root<span class=\"br0\">)</span> root <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>root<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">&gt;</span> n<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">?</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>root<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>left<br/>\t\t\t\t<span class=\"sy0\">:</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>root<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>root <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tree_trav<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tco_t <span class=\"sy0\">*</span>c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>co_t <span class=\"sy0\">*</span><span class=\"br0\">)</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> trav<span class=\"br0\">(</span>node <span class=\"sy0\">*</span>root<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>root<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\ttrav<span class=\"br0\">(</span>root<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tco_yield<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> root<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttrav<span class=\"br0\">(</span>root<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\ttrav<span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span>in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> tree_eq<span class=\"br0\">(</span>node <span class=\"sy0\">*</span>t1<span class=\"sy0\">,</span> node <span class=\"sy0\">*</span>t2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tco_t <span class=\"sy0\">*</span>c1 <span class=\"sy0\">=</span> co_new<span class=\"br0\">(</span>tree_trav<span class=\"sy0\">,</span> t1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tco_t <span class=\"sy0\">*</span>c2 <span class=\"sy0\">=</span> co_new<span class=\"br0\">(</span>tree_trav<span class=\"sy0\">,</span> t2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tnode <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\tp <span class=\"sy0\">=</span> co_collect<span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tq <span class=\"sy0\">=</span> co_collect<span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&amp;&amp;</span> q <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">==</span> q<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tco_del<span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tco_del<span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">!</span>p <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>q<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> z<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tnode <span class=\"sy0\">*</span>t1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>t2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>t3 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> mktree<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">,</span> node <span class=\"sy0\">**</span>root<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\ttree_insert<span class=\"br0\">(</span>root<span class=\"sy0\">,</span> newnode<span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tmktree<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>t1<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// ordered binary tree, result of traversing</span><br/>\tmktree<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>t2<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// should be independent of insertion, so t1 == t2</span><br/>\tmktree<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>t3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"t1 == t2:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tree_eq<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> t2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"yes\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"t1 == t3:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tree_eq<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> t3<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"yes\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 136, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Same_Fringe<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> Program<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"nu0\">110456</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">var</span> randList <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">var</span> bt1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>randList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\">// Shuffling will create a tree with the same values but different topology</span><br/>\t\t\tShuffle<span class=\"br0\">(</span>randList, <span class=\"nu0\">428</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">var</span> bt2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>randList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>bt1<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>bt2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"True compare worked\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"True compare failed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\">// Insert a 0 in the first tree which should cause a failure</span><br/>\t\t\tbt1<span class=\"sy0\">.</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>bt1<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>bt2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"False compare failed\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"False compare worked\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Shuffle<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values, <span class=\"kw4\">int</span> seed<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> values<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">var</span> iSwap <span class=\"sy0\">=</span> rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>values<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">var</span> tmp <span class=\"sy0\">=</span> values<span class=\"br0\">[</span>iSwap<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tvalues<span class=\"br0\">[</span>iSwap<span class=\"br0\">]</span> <span class=\"sy0\">=</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tvalues<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Define other methods and classes here</span><br/>\t<span class=\"kw4\">class</span> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"kw1\">where</span> T<span class=\"sy0\">:</span>IComparable<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">private</span> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> _left<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">private</span> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> _right<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">private</span> T _value<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">private</span> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Left<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _left<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">private</span> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Right<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _right<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// On interior nodes, any value greater than or equal to Value goes in the</span><br/>\t\t<span class=\"co1\">// right subtree, everything else in the left.</span><br/>\t\t<span class=\"kw1\">private</span> T <span class=\"kw1\">Value</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _value<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> IsLeaf <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Left <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">private</span> BinTree<span class=\"br0\">(</span>BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left, BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right, T <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t_left <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>\t\t\t_right <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>\t\t\t_value <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> BinTree<span class=\"br0\">(</span>T <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"kw1\">null</span>, <span class=\"kw1\">null</span>, <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> BinTree<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">// ReSharper disable PossibleMultipleEnumeration</span><br/>\t\t\t_value <span class=\"sy0\">=</span> values<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> values<span class=\"sy0\">.</span><span class=\"me1\">Skip</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tInsert<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"co1\">// ReSharper restore PossibleMultipleEnumeration</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Insert<span class=\"br0\">(</span>T <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsLeaf<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t_left <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t_right <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t_left <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t_right <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t_value <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tLeft<span class=\"sy0\">.</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tRight<span class=\"sy0\">.</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> GetLeaves<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsLeaf<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> val <span class=\"kw1\">in</span> Left<span class=\"sy0\">.</span><span class=\"me1\">GetLeaves</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> val <span class=\"kw1\">in</span> Right<span class=\"sy0\">.</span><span class=\"me1\">GetLeaves</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">internal</span> <span class=\"kw4\">bool</span> CompareTo<span class=\"br0\">(</span>BinTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> other<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> other<span class=\"sy0\">.</span><span class=\"me1\">GetLeaves</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Zip</span><span class=\"br0\">(</span>GetLeaves<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span>t1, t2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t1<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>t2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">All</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fringe<span class=\"sy0\">-</span>seq <span class=\"br0\">[</span>branch? children content tree<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>walk <span class=\"br0\">[</span>node<span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq<br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>branch? node<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"br0\">(</span>children node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>list <span class=\"br0\">(</span>content node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> walk <span class=\"br0\">(</span>children node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>list node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>walk tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">struct</span> Node<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T data<span class=\"sy0\">;</span><br/>    Node<span class=\"sy0\">*</span> L<span class=\"sy0\">,</span> R<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> sameFringe<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>Node<span class=\"sy0\">!</span>T<span class=\"sy0\">*</span> t1<span class=\"sy0\">,</span> Node<span class=\"sy0\">!</span>T<span class=\"sy0\">*</span> t2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span> scan<span class=\"br0\">(</span>Node<span class=\"sy0\">!</span>T<span class=\"sy0\">*</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>t.<span class=\"me1\">L</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>t.<span class=\"me1\">R</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>t.<span class=\"me1\">data</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> scan<span class=\"br0\">(</span>t.<span class=\"me1\">L</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> scan<span class=\"br0\">(</span>t.<span class=\"me1\">R</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> scan<span class=\"br0\">(</span>t1<span class=\"br0\">)</span> <span class=\"sy0\">==</span> scan<span class=\"br0\">(</span>t2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> N <span class=\"sy0\">=</span> Node<span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> t1 <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> t2 <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>sameFringe<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> t2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> t3 <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">new</span> N<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>sameFringe<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> t3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 71, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> node <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw4\">int</span><br/>    left<span class=\"sy1\">,</span> right <span class=\"sy3\">*</span>node<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// function returns a channel that yields the leaves of the tree.</span><br/><span class=\"co1\">// the channel is closed after all leaves are received.</span><br/><span class=\"kw4\">func</span> leaves<span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> <span class=\"kw4\">chan</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    ch <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// recursive function to walk tree.</span><br/>    <span class=\"kw1\">var</span> f <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>node<span class=\"sy1\">)</span><br/>    f <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// leaves are identified by having no children.</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>left <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> &amp;&amp; n<span class=\"sy3\">.</span>right <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            ch &lt;<span class=\"sy3\">-</span> n<span class=\"sy3\">.</span><span class=\"kw4\">int</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            f<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>left<span class=\"sy1\">)</span><br/>            f<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>right<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// goroutine runs concurrently with others.</span><br/>    <span class=\"co1\">// it walks the tree then closes the channel.</span><br/>    <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/>        <span class=\"kw3\">close</span><span class=\"sy1\">(</span>ch<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}()</span><br/>    <span class=\"kw1\">return</span> ch<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sameFringe<span class=\"sy1\">(</span>t1<span class=\"sy1\">,</span> t2 <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    f1 <span class=\"sy2\">:=</span> leaves<span class=\"sy1\">(</span>t1<span class=\"sy1\">)</span><br/>    f2 <span class=\"sy2\">:=</span> leaves<span class=\"sy1\">(</span>t2<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> l1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f1 <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// both trees must yield a leaf, and the leaves must be equal.</span><br/>        <span class=\"kw1\">if</span> l2<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>f2<span class=\"sy1\">;</span> <span class=\"sy3\">!</span>ok <span class=\"sy3\">||</span> l1 <span class=\"sy2\">!=</span> l2 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// there must be nothing left in f2 after consuming all of f1.</span><br/>    _<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>f2<br/>    <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>ok<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// the different shapes of the trees is shown with indention.</span><br/>    <span class=\"co1\">// the leaves are easy to spot by the int: key.</span><br/>    t1 <span class=\"sy2\">:=</span> &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">}},</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">13</span><span class=\"sy1\">}}}</span><br/>    <span class=\"co1\">// t2 with negative values for internal nodes that can't possibly match</span><br/>    <span class=\"co1\">// positive values in t1, just to show that only leaves are being compared.</span><br/>    t2 <span class=\"sy2\">:=</span> &amp;node<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>                &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>                &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">}},</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">5</span><span class=\"sy1\">}},</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"kw4\">int</span><span class=\"sy1\">:</span> <span class=\"nu0\">13</span><span class=\"sy1\">}}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>sameFringe<span class=\"sy1\">(</span>t1<span class=\"sy1\">,</span> t2<span class=\"sy1\">))</span> <span class=\"co1\">// prints true.</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 29, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Tree a<br/>  <span class=\"sy0\">=</span> Leaf a<br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>fringe <span class=\"sy0\">::</span> Tree a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>fringe <span class=\"br0\">(</span>Leaf x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>fringe <span class=\"br0\">(</span>Node n1 n2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fringe n1 <span class=\"sy0\">++</span> fringe n2<br/>\u00a0<br/>sameFringe<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> Tree a <span class=\"sy0\">-&gt;</span> Tree a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>sameFringe t1 t2 <span class=\"sy0\">=</span> fringe t1 <span class=\"sy0\">==</span> fringe t2<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      b <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      c <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      x <span class=\"sy0\">=</span><br/>        Node<br/>          <span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>Node<br/>             <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      y <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      z <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>Leaf <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Leaf <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> sameFringe a <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 30, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    aTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    bTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"aTree and bTree \"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>sameFringe<span class=\"br0\">(</span>aTree<span class=\"sy0\">,</span>bTree<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"have\"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"don't have\"</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">\" the same leaves.\"</span><span class=\"br0\">)</span><br/>    cTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    dTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"cTree and dTree \"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>sameFringe<span class=\"br0\">(</span>cTree<span class=\"sy0\">,</span>dTree<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"have\"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"don't have\"</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">\" the same leaves.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> sameFringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> same<span class=\"br0\">{</span>genLeaves<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span>genLeaves<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> same<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>   <span class=\"kw1\">while</span> n1 <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>L<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      n2 <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">fail</span><br/>      <span class=\"kw1\">if</span> n1 <span class=\"sy0\">~==</span> n2 <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">not</span> <span class=\"sy0\">@</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> genLeaves<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">suspend</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>node <span class=\"sy0\">:=</span> preorder<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"kw1\">procedure</span> preorder<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>L <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> L <span class=\"sy0\">|</span> preorder<span class=\"br0\">(</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">|</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">sameFringe=: -:&amp;<span class=\"sy0\">(</span>[:\u00a0; &lt;S:<span class=\"nu0\">0</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 121, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> SameFringe<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> Node<span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">super</span> T<span class=\"sy0\">&gt;&gt;</span><br/>  <span class=\"br0\">{</span><br/>    Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> getLeft<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> getRight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">boolean</span> isLeaf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    T getData<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> SimpleNode<span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">super</span> T<span class=\"sy0\">&gt;&gt;</span> <span class=\"kw1\">implements</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> T data<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SimpleNode<span class=\"br0\">(</span>T data<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">this</span><span class=\"br0\">(</span>data, <span class=\"kw2\">null</span>, <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SimpleNode<span class=\"br0\">(</span>T data, SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left, SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> data<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> getLeft<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> left<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> getRight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> right<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isLeaf<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>left <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>right <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> T getData<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> data<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> addToTree<span class=\"br0\">(</span>T data<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> cmp <span class=\"sy0\">=</span> data.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmp <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Same data!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmp <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"br0\">(</span>left <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> left.<span class=\"me1\">addToTree</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>right <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>right <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> right.<span class=\"me1\">addToTree</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">super</span> T<span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">boolean</span> areLeavesSame<span class=\"br0\">(</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> node1, Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> node2<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    Stack<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> stack1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Stack<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> stack2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    stack1.<span class=\"me1\">push</span><span class=\"br0\">(</span>node1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    stack2.<span class=\"me1\">push</span><span class=\"br0\">(</span>node2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// NOT using short-circuit operator</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>node1 <span class=\"sy0\">=</span> advanceToLeaf<span class=\"br0\">(</span>stack1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>node2 <span class=\"sy0\">=</span> advanceToLeaf<span class=\"br0\">(</span>stack2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>node1.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>node2.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Return true if finished at same time</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>node1 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>node2 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">super</span> T<span class=\"sy0\">&gt;&gt;</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> advanceToLeaf<span class=\"br0\">(</span>Stack<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>stack.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> node <span class=\"sy0\">=</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node.<span class=\"me1\">isLeaf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> node<span class=\"sy0\">;</span><br/>      Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> rightNode <span class=\"sy0\">=</span> node.<span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rightNode <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>rightNode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> leftNode <span class=\"sy0\">=</span> node.<span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>leftNode <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>leftNode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> headNode1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">35</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">25</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">45</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> headNode2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">24</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">14</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"kw2\">null</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">34</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">42</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">56</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span>, <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> headNode3 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">24</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">14</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"kw2\">null</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">34</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">42</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">50</span>, <span class=\"kw2\">null</span>, <span class=\"kw1\">new</span> SimpleNode<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">56</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Leaves for set 1: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    simpleWalk<span class=\"br0\">(</span>headNode1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Leaves for set 2: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    simpleWalk<span class=\"br0\">(</span>headNode2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Leaves for set 3: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    simpleWalk<span class=\"br0\">(</span>headNode3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"areLeavesSame(1, 2)? \"</span> <span class=\"sy0\">+</span> areLeavesSame<span class=\"br0\">(</span>headNode1, headNode2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"areLeavesSame(2, 3)? \"</span> <span class=\"sy0\">+</span> areLeavesSame<span class=\"br0\">(</span>headNode2, headNode3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> simpleWalk<span class=\"br0\">(</span>Node<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> node<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node.<span class=\"me1\">isLeaf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>node.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      Node<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> left <span class=\"sy0\">=</span> node.<span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        simpleWalk<span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Node<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> right <span class=\"sy0\">=</span> node.<span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        simpleWalk<span class=\"br0\">(</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">(t|flatten) == (s|flatten)</pre>"}, {"lang": "Julia", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Lazy<br/>\u00a0<br/>\"\"\"<br/>    Input a tree for display as a fringed structure.<br/>\"\"\"<br/>function fringe(tree)<br/>    fringey(node::Pair) = [fringey(i) for i in node]<br/>    fringey(leaf::Int) = leaf<br/>    fringey(tree)<br/>end<br/>\u00a0<br/>\u00a0<br/>\"\"\"<br/>    equalsfringe() uses a reduction to a lazy 1D list via <br/>    getleaflist() for its \"equality\" of fringes<br/>\"\"\"<br/>getleaflist(tree::Int) = [tree]<br/>getleaflist(tree::Pair) = vcat(getleaflist(seq(tree[1])), getleaflist(seq(tree[2])))<br/>getleaflist(tree::Lazy.LazyList) = vcat(getleaflist(tree[1]), getleaflist(tree[2]))<br/>getleaflist(tree::Void) = []<br/>equalsfringe(t1, t2) = (getleaflist(t1) == getleaflist(t2))<br/>\u00a0<br/>\u00a0<br/>a = 1 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 5 =&gt; 6 =&gt; 7 =&gt; 8<br/>b = 1 =&gt; (( 2 =&gt; 3 ) =&gt; (4 =&gt; (5 =&gt; ((6 =&gt; 7) =&gt; 8))))<br/>c = (((1 =&gt; 2) =&gt; 3) =&gt; 4) =&gt; 5 =&gt; 6 =&gt; 7 =&gt; 8<br/>\u00a0<br/>x = 1 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 5 =&gt; 6 =&gt; 7 =&gt; 8 =&gt; 9<br/>y = 0 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 5 =&gt; 6 =&gt; 7 =&gt; 8<br/>z = 1 =&gt; 2 =&gt; (4 =&gt; 3) =&gt; 5 =&gt; 6 =&gt; 7 =&gt; 8<br/>\u00a0<br/>prettyprint(s) = println(replace(\"$s\", r\"\\{Any,1\\}|Any|Array\\{T,1\\}\\swhere\\sT|Array|\", \"\"))<br/>prettyprint(fringe(a))<br/>prettyprint(fringe(b))<br/>prettyprint(fringe(c))<br/>prettyprint(fringe(x))<br/>prettyprint(fringe(y))<br/>prettyprint(fringe(z))<br/>\u00a0<br/>prettyprint(getleaflist(a))<br/>prettyprint(getleaflist(b))<br/>prettyprint(getleaflist(c))<br/>\u00a0<br/>println(equalsfringe(a, a))<br/>println(equalsfringe(a, b))<br/>println(equalsfringe(a, c))<br/>println(equalsfringe(b, c))<br/>println(equalsfringe(a, x) == false)<br/>println(equalsfringe(a, y) == false)<br/>println(equalsfringe(a, z) == false)<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 23, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> <span class=\"sy0\">'</span>a btree <span class=\"sy0\">=</span> Leaf <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">|</span> BTree <span class=\"kw1\">of</span> <span class=\"br0\">(</span><span class=\"sy0\">'</span>a btree <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a btree<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> next <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"sy0\">|</span> h <span class=\"sy0\">::</span> t <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> h <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> Leaf x <span class=\"sy0\">-&gt;</span> Some <span class=\"br0\">(</span>x,t<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> BTree<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> next <span class=\"br0\">(</span>a<span class=\"sy0\">::</span>b<span class=\"sy0\">::</span>t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> samefringe t1 t2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux s1 s2 <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> <span class=\"br0\">(</span>next s1, next s2<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> None, None <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>    <span class=\"sy0\">|</span> None, _ <span class=\"sy0\">|</span> _, None <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>    <span class=\"sy0\">|</span> Some<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>, Some<span class=\"br0\">(</span>c,d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">=</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> aux b d <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span>t1<span class=\"br0\">]</span> <span class=\"br0\">[</span>t2<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">(* Test: *)</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> u <span class=\"sy0\">=</span> BTree<span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span>, BTree<span class=\"br0\">(</span>Leaf <span class=\"nu0\">2</span>, Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> BTree<span class=\"br0\">(</span>BTree<span class=\"br0\">(</span>Leaf <span class=\"nu0\">1</span>, Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span>, Leaf <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> w <span class=\"sy0\">=</span> BTree<span class=\"br0\">(</span>BTree<span class=\"br0\">(</span>Leaf <span class=\"nu0\">3</span>, Leaf <span class=\"nu0\">2</span><span class=\"br0\">)</span>, Leaf <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> check a b <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><span class=\"kw1\">if</span> samefringe a b <span class=\"kw1\">then</span> <span class=\"st0\">\"same\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"different\"</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  check u v<span class=\"sy0\">;</span> check v u<span class=\"sy0\">;</span> check v w<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 39, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@trees</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"co1\"># 0..2 are same</span><br/>    <span class=\"br0\">[</span> <span class=\"st_h\">'d'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st_h\">'d'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st_h\">'d'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"co1\"># and this one's different!</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st_h\">'a'</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'d'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'e'</span><span class=\"sy0\">,</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'f'</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$tree_idx</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#trees</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"tree[\"</span><span class=\"sy0\">,</span><span class=\"re0\">$tree_idx</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"] vs tree[$tree_idx]: \"</span><span class=\"sy0\">,</span><br/>           cmp_fringe<span class=\"br0\">(</span><span class=\"re0\">$trees</span><span class=\"br0\">[</span><span class=\"re0\">$tree_idx</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$trees</span><span class=\"br0\">[</span><span class=\"re0\">$tree_idx</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cmp_fringe <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ti1</span> <span class=\"sy0\">=</span> get_tree_iterator<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ti2</span> <span class=\"sy0\">=</span> get_tree_iterator<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$L</span><span class=\"sy0\">,</span> <span class=\"re0\">$R</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$ti1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$ti2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$L</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$R</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"re0\">$L</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$R</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"Same\"</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$L</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$R</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"Different\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> get_tree_iterator <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rtrees</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tree</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$tree</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@rtrees</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$tree</span><span class=\"sy0\">,</span> <span class=\"re0\">$rtrees</span><span class=\"br0\">[</span><span class=\"re0\">@rtrees</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$tree</span> <span class=\"kw1\">while</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$tree</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$tree</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 26, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> fringe <span class=\"br0\">(</span><span class=\"re0\">$tree</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> fringey <span class=\"br0\">(</span>Pair <span class=\"re0\">$node</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> fringey <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">$node</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> fringey <span class=\"br0\">(</span> Any <span class=\"re0\">$leaf</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> take <span class=\"re0\">$leaf</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    gather fringey <span class=\"re0\">$tree</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> samefringe <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> fringe<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> eqv fringe<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span>  so samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span>  so samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span>  so samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw1\">not</span> samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">not</span> samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">not</span> samefringe <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 79, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Same_Fringe.exw<br/>-- ============================<br/>--<br/>--  Requires 0.7.5 or later (implementation revealed that task_yield did not<br/>--                           have side effects of e_all properly set.)<br/>--<br/>constant tests = {{0,1,{0,2,0}},<br/>                  {{0,1,0},2,0},<br/>                  {{0,1,0},2,{0,3,0}},<br/>                 }<br/>\u00a0<br/>sequence tasks<br/>integer res = 0<br/>sequence sdata = repeat(0,2)<br/>\u00a0<br/>integer active_tasks<br/>integer show_details = 1<br/>\u00a0<br/>procedure scan(sequence tree, integer level, integer tidx)<br/>object {left,data,right} = tree<br/>    if res=0 then<br/>        if left!=0 then scan(left,level+1,tidx) end if<br/>        sdata[tidx] = data<br/>        if show_details then<br/>            printf(1,\"task[%d] sets sdata[%d] to \",tidx)<br/>           \u00a0?data<br/>        end if<br/>        if res=0 then<br/>            task_suspend(task_self())<br/>            task_yield()<br/>        end if<br/>        if right!=0 then scan(right,level+1,tidx) end if<br/>    end if<br/>    if level=1 then<br/>        if show_details then<br/>            printf(1,\"task[%d] ends\\n\",tidx)<br/>        end if<br/>        active_tasks -= 1<br/>        tasks[tidx] = 0<br/>        sdata[tidx] = -1 -- (or use a separate flag)<br/>    end if<br/>end procedure<br/>\u00a0<br/>?\"started\"<br/>procedure test(integer t1, integer t2)<br/>    tasks = {task_create(routine_id(\"scan\"),{tests[t1],1,1}),<br/>             task_create(routine_id(\"scan\"),{tests[t2],1,2})}<br/>    active_tasks = 2<br/>    res = 0<br/>    while active_tasks&gt;0 do<br/>        if tasks[1] then<br/>            task_schedule(tasks[1],1)<br/>            task_yield()<br/>        end if<br/>        if tasks[2] then<br/>            task_schedule(tasks[2],1)<br/>            task_yield()<br/>        end if<br/>        if res=0 then<br/>            res = compare(sdata[1],sdata[2])<br/>            if show_details then<br/>               \u00a0?{res,sdata[1],sdata[2],active_tasks}<br/>            end if<br/>        end if<br/>    end while<br/>    printf(1,\"test(%d,%d):%d\\n\",{t1,t2,res})<br/>end procedure<br/>\u00a0<br/>test(1,1)<br/>show_details = 0<br/>test(1,2)<br/>test(1,3)<br/>test(2,1)<br/>test(2,2)<br/>test(2,3)<br/>test(3,1)<br/>test(3,2)<br/>test(3,3)</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(de nextLeaf (Rt Tree)<br/>   (co Rt<br/>      (recur (Tree)<br/>         (when Tree<br/>            (recurse (cadr Tree))<br/>            (yield (car Tree))<br/>            (recurse (cddr Tree)) ) ) ) )<br/>\u00a0<br/>(de cmpTrees (Tree1 Tree2)<br/>   (prog1<br/>      (use (Node1 Node2)<br/>         (loop<br/>            (setq<br/>               Node1 (nextLeaf \"rt1\" Tree1)<br/>               Node2 (nextLeaf \"rt2\" Tree2) )<br/>            (T (nor Node1 Node2) T)<br/>            (NIL (= Node1 Node2)) ) )<br/>      (co \"rt1\")<br/>      (co \"rt2\") ) )</pre>"}, {"lang": "Python", "loc": 35, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> zip_longest <span class=\"kw1\">as</span> izip_longest <span class=\"co1\"># Python 3.x</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> izip_longest                <span class=\"co1\"># Python 2.6+</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fringe<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Yield tree members L-to-R depth first,<br/>    as if stored in a binary tree\"\"\"</span><br/>    <span class=\"kw1\">for</span> node1 <span class=\"kw1\">in</span> tree:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">isinstance</span><span class=\"br0\">(</span>node1<span class=\"sy0\">,</span> <span class=\"kw2\">tuple</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> node2 <span class=\"kw1\">in</span> fringe<span class=\"br0\">(</span>node1<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">yield</span> node2<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">yield</span> node1<br/>\u00a0<br/><span class=\"kw1\">def</span> same_fringe<span class=\"br0\">(</span>tree1<span class=\"sy0\">,</span> tree2<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>node1 <span class=\"sy0\">==</span> node2 <span class=\"kw1\">for</span> node1<span class=\"sy0\">,</span> node2 <span class=\"kw1\">in</span><br/>               izip_longest<span class=\"br0\">(</span>fringe<span class=\"br0\">(</span>tree1<span class=\"br0\">)</span><span class=\"sy0\">,</span> fringe<span class=\"br0\">(</span>tree2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>    y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>    z <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>    <span class=\"kw1\">assert</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> same_fringe<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> z<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(module same-fringe lazy<br/>  (provide same-fringe?)<br/>  (define (same-fringe? t1 t2)<br/>    (! (equal? (flatten t1) (flatten t2))))<br/>  (define (flatten tree)<br/>    (if (list? tree)<br/>      (apply append (map flatten tree))<br/>      (list tree))))<br/>\u00a0<br/>(require 'same-fringe)<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-true (same-fringe? '((1 2 3) ((4 5 6) (7 8)))<br/>                            '(((1 2 3) (4 5 6)) (7 8))))<br/>  (check-false (same-fringe? '((1 2 3) ((4 5 6) (7 8)))<br/>                             '(((1 2 3) (4 6)) (8)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 176, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* Same Fringe<br/>*           1                A                 A<br/>*          / \\              / \\               / \\<br/>*         /   \\            /   \\             /   \\<br/>*        /     \\          /     \\           /     \\<br/>*       2       3        B       C         B       C<br/>*      / \\     /        / \\     /         / \\     /<br/>*     4   5   6        D   E   F         D   E   F<br/>*    /       / \\      /       / \\       /       / \\<br/>*   7       8   9    G       H   I     G       *   I<br/>*<br/>* 23.08.2012 Walter Pachl derived from<br/>*                            http://rosettacode.org/wiki/Tree_traversal<br/>* Tree A: A B D G E C F H I<br/>* Tree B: A B D G E C F * I<br/>**********************************************************************/</span><br/>debug=<span class=\"nu0\">0</span><br/>node<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>lvl=<span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> mktree <span class=\"st0\">'A'</span><br/><span class=\"kw1\">Call</span> mktree <span class=\"st0\">'B'</span><br/>\u00a0<br/>done<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>za=root<span class=\"sy0\">.</span>a; leafa=node<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>za<span class=\"sy0\">.</span>0name<br/>zb=root<span class=\"sy0\">.</span>a; leafb=node<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>zb<span class=\"sy0\">.</span>0name<br/>done<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>za=<span class=\"nu0\">1</span><br/>done<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>zb=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">12</span><br/>  <span class=\"kw1\">if</span> leafa=leafb <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> leafa=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">Say</span> <span class=\"st0\">'Fringes are equal'</span><br/>      <span class=\"kw1\">Leave</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Say</span> leafa <span class=\"st0\">'='</span> leafb<br/>    <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">12</span> <span class=\"kw2\">Until</span> done<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>za=<span class=\"nu0\">0</span><br/>      za=go_next<span class=\"br0\">(</span>za,<span class=\"st0\">'A'</span><span class=\"br0\">)</span>; leafa=node<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>za<span class=\"sy0\">.</span>0name<br/>      <span class=\"kw3\">End</span><br/>    done<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>za=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">12</span> <span class=\"kw2\">Until</span> done<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>zb=<span class=\"nu0\">0</span><br/>      zb=go_next<span class=\"br0\">(</span>zb,<span class=\"st0\">'B'</span><span class=\"br0\">)</span>; leafb=node<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>zb<span class=\"sy0\">.</span>0name<br/>      <span class=\"kw3\">End</span><br/>    done<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>zb=<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Select</span><br/>      <span class=\"kw3\">When</span> leafa=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>        <span class=\"kw1\">Say</span> leafb <span class=\"st0\">'exceeds leaves in tree A'</span><br/>      <span class=\"kw3\">When</span> leafb=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>        <span class=\"kw1\">Say</span> leafa <span class=\"st0\">'exceeds leaves in tree B'</span><br/>      <span class=\"kw3\">Otherwise</span><br/>        <span class=\"kw1\">Say</span> <span class=\"st0\">'First difference'</span> leafa <span class=\"st0\">'&lt;&gt;'</span> leafb<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>\u00a0<br/>note:<br/><span class=\"coMULTI\">/**********************************************************************<br/>* add the node to the preorder list unless it's already there<br/>* add the node to the level list<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z,t<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span>,                           <span class=\"coMULTI\">/* it's a node                */</span><br/>     done<span class=\"sy0\">.</span>z=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                  <span class=\"coMULTI\">/* not yet done               */</span><br/>    wl<span class=\"sy0\">.</span>t=wl<span class=\"sy0\">.</span>t z                        <span class=\"coMULTI\">/* add it to the preorder list*/</span><br/>    ll<span class=\"sy0\">.</span>lvl=ll<span class=\"sy0\">.</span>lvl z                    <span class=\"coMULTI\">/* add it to the level list   */</span><br/>    done<span class=\"sy0\">.</span>z=<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/* remember it's done         */</span><br/>    leafl=leafl node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0name<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>go_next: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span> lvl<br/><span class=\"coMULTI\">/**********************************************************************<br/>* find the next node to visit in the treewalk<br/>**********************************************************************/</span><br/>  next=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">arg</span> z,t<br/>  <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>         <span class=\"coMULTI\">/* there is a left son        */</span><br/>    <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">.</span>done=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>   <span class=\"coMULTI\">/* we have not visited it     */</span><br/>      next=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left              <span class=\"coMULTI\">/* so we go there             */</span><br/>      node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">.</span>done=<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/* note we were here          */</span><br/>      lvl=lvl+<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* increase the level         */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> next=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                    <span class=\"coMULTI\">/* not moved yet              */</span><br/>    <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>       <span class=\"coMULTI\">/* there is a right son       */</span><br/>      <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">.</span>done=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span> <span class=\"coMULTI\">/* we have not visited it     */</span><br/>        next=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite            <span class=\"coMULTI\">/* so we go there             */</span><br/>        node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">.</span>done=<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/* note we were here          */</span><br/>        lvl=lvl+<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* increase the level         */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> next=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                    <span class=\"coMULTI\">/* not moved yet              */</span><br/>    next=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father              <span class=\"coMULTI\">/* go to the father           */</span><br/>    lvl=lvl-<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* decrease the level         */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> next                          <span class=\"coMULTI\">/* that's the next node       */</span><br/>                                       <span class=\"coMULTI\">/* or zero if we are done     */</span><br/>\u00a0<br/>mknode: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* create a new node<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> <span class=\"kw2\">name</span>,t<br/>  z=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0name=<span class=\"kw2\">name</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left =<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite =<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>0=z<br/>  <span class=\"kw1\">Return</span> z                        <span class=\"coMULTI\">/* number of the node just created */</span><br/>\u00a0<br/>attleft: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* make son the left son of father<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> son,father,t<br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0father=father<br/>  z=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=son<br/>    node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0left=z<br/>    <span class=\"kw3\">End</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left=son<br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>attrite: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* make son the right son of father<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> son,father,t<br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0father=father<br/>  z=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=son<br/>    node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0rite=z<br/>    <span class=\"kw3\">End</span><br/>  node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite=son<br/>  le=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left<br/>  <span class=\"kw1\">If</span> le<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>le<span class=\"sy0\">.</span>0brother=node<span class=\"sy0\">.</span>t<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>mktree: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span> root<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* build the tree according to the task<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> t<br/>  <span class=\"kw1\">If</span> t=<span class=\"st0\">'A'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    a=mknode<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,t<span class=\"br0\">)</span>; root<span class=\"sy0\">.</span>t=a<br/>    b=mknode<span class=\"br0\">(</span><span class=\"st0\">'B'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft b,a,t<br/>    c=mknode<span class=\"br0\">(</span><span class=\"st0\">'C'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite c,a,t<br/>    d=mknode<span class=\"br0\">(</span><span class=\"st0\">'D'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft d,b,t<br/>    e=mknode<span class=\"br0\">(</span><span class=\"st0\">'E'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite e,b,t<br/>    f=mknode<span class=\"br0\">(</span><span class=\"st0\">'F'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft f,c,t<br/>    g=mknode<span class=\"br0\">(</span><span class=\"st0\">'G'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft g,d,t<br/>    h=mknode<span class=\"br0\">(</span><span class=\"st0\">'H'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft h,f,t<br/>    i=mknode<span class=\"br0\">(</span><span class=\"st0\">'I'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite i,f,t<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    a=mknode<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,t<span class=\"br0\">)</span>; root<span class=\"sy0\">.</span>t=a<br/>    b=mknode<span class=\"br0\">(</span><span class=\"st0\">'B'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft b,a,t<br/>    c=mknode<span class=\"br0\">(</span><span class=\"st0\">'C'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite c,a,t<br/>    d=mknode<span class=\"br0\">(</span><span class=\"st0\">'D'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft d,b,t<br/>    e=mknode<span class=\"br0\">(</span><span class=\"st0\">'E'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite e,b,t<br/>    f=mknode<span class=\"br0\">(</span><span class=\"st0\">'F'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft f,c,t<br/>    g=mknode<span class=\"br0\">(</span><span class=\"st0\">'G'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft g,d,t<br/>    h=mknode<span class=\"br0\">(</span><span class=\"st0\">'*'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft h,f,t<br/>    i=mknode<span class=\"br0\">(</span><span class=\"st0\">'I'</span>,t<span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite i,f,t<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span></pre>"}, {"lang": "Scheme", "loc": 35, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; binary tree helpers from \"Structure and Interpretation of Computer Programs\" 2.3.3</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>entry tree<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>branch tree<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>right<span class=\"sy0\">-</span>branch tree<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>tree entry left right<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">list</span> entry left right<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; returns a list of leftmost nodes from each level of the tree</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>descend tree ls<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>branch tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> tree ls<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>descend <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>branch tree<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> tree ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; updates the list to contain leftmost nodes from each remaining level</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ascend ls<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>right<span class=\"sy0\">-</span>branch <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>right<span class=\"sy0\">-</span>branch <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ls <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>right<span class=\"sy0\">-</span>branch <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>branch <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      ls<br/>\t      <span class=\"br0\">(</span>descend <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>branch <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; loops thru each list until the end (true) or nodes are unequal (false)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>same<span class=\"sy0\">-</span>fringe? t1 t2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> next <span class=\"br0\">(</span><span class=\"br0\">(</span>l1 <span class=\"br0\">(</span>descend t1 '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>l2 <span class=\"br0\">(</span>descend t2 '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> l1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> l2<span class=\"br0\">)</span><span class=\"br0\">)</span> #t<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> l1<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">null?</span> l2<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span>entry <span class=\"br0\">(</span><span class=\"kw1\">car</span> l1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>entry <span class=\"br0\">(</span><span class=\"kw1\">car</span> l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #f<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>next <span class=\"br0\">(</span>ascend l1<span class=\"br0\">)</span> <span class=\"br0\">(</span>ascend l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">var trees = <span class=\"br0\">[</span><br/>    <span class=\"co1\"># 0..2 are same</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">'d'</span>, <span class=\"br0\">[</span> <span class=\"st0\">'c'</span>, <span class=\"br0\">[</span> <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"br0\">]</span>, <span class=\"br0\">]</span>, <span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st0\">'d'</span>, <span class=\"st0\">'c'</span> <span class=\"br0\">]</span>, <span class=\"br0\">[</span> <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st0\">'d'</span>, <span class=\"st0\">'c'</span>, <span class=\"br0\">]</span>, <span class=\"st0\">'a'</span>, <span class=\"br0\">]</span>, <span class=\"st0\">'b'</span>, <span class=\"br0\">]</span>,<br/>    <span class=\"co1\"># and this one's different!</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"st0\">'a'</span> <span class=\"br0\">]</span>, <span class=\"st0\">'b'</span> <span class=\"br0\">]</span>, <span class=\"st0\">'c'</span>, <span class=\"br0\">]</span>, <span class=\"st0\">'d'</span>, <span class=\"br0\">]</span>, <span class=\"st0\">'e'</span>, <span class=\"br0\">]</span>, <span class=\"st0\">'f'</span> <span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span>;<br/>\u00a0<br/>func get_tree_iterator<span class=\"br0\">(</span><span class=\"sy0\">*</span>rtrees<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var tree;<br/>    func <span class=\"br0\">{</span><br/>        tree = rtrees.<span class=\"me1\">pop</span>;<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">defined</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> tree.<span class=\"me1\">is_an</span><span class=\"br0\">(</span><span class=\"kw3\">Array</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rtrees.<span class=\"me1\">append</span><span class=\"br0\">(</span>tree<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>            tree = tree<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> tree;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func cmp_fringe<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var ti1 = get_tree_iterator<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>    var ti2 = get_tree_iterator<span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        var <span class=\"br0\">(</span>L, R<span class=\"br0\">)</span> = <span class=\"br0\">(</span>ti1<span class=\"br0\">(</span><span class=\"br0\">)</span>, ti2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">defined</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>  <span class=\"kw1\">defined</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>L == R<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span>;<br/>       \u00a0!<span class=\"kw1\">defined</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"kw1\">defined</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"st0\">\"Same\"</span>;<br/>        <span class=\"kw2\">return</span> <span class=\"st0\">\"Different\"</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, trees.<span class=\"kw1\">end</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>tree_idx<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">\"tree[#{tree_idx-1}] vs tree[#{tree_idx}]: \"</span>,<br/>           cmp_fringe<span class=\"br0\">(</span>trees<span class=\"br0\">[</span>tree_idx<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, trees<span class=\"br0\">[</span>tree_idx<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 33, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">tree</span><br/>\u00a0<br/><span class=\"co1\"># A wrapper round a coroutine for iterating over the leaves of a tree in order</span><br/><span class=\"kw1\">proc</span> leafiterator <span class=\"br0\">{</span>tree<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    coroutine coro<span class=\"br0\">[</span><span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">coroutines</span><span class=\"br0\">]</span> apply <span class=\"br0\">{</span>tree <span class=\"br0\">{</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>\t<span class=\"re0\">$tree</span> walk <span class=\"br0\">[</span><span class=\"re0\">$tree</span> rootname<span class=\"br0\">]</span> node <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$tree</span> isleaf <span class=\"re0\">$node</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tyield <span class=\"re0\">$node</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tyieldto <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$tree</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Compare two trees for equality of their leaf node names</span><br/><span class=\"kw1\">proc</span> samefringe <span class=\"br0\">{</span>tree1 tree2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> c1 <span class=\"br0\">[</span>leafiterator <span class=\"re0\">$tree1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> c2 <span class=\"br0\">[</span>leafiterator <span class=\"re0\">$tree2</span><span class=\"br0\">]</span><br/>    try <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> l1 <span class=\"br0\">[</span><span class=\"re0\">$c1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> ne <span class=\"br0\">[</span><span class=\"kw1\">set</span> l2 <span class=\"br0\">[</span><span class=\"re0\">$c2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$l1\u00a0!= $l2\"</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Just so we can see where we failed</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> finally <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">rename</span> <span class=\"re0\">$c1</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">rename</span> <span class=\"re0\">$c2</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 27, "block": "<pre class=\"text highlighted_source\">var G=Utils.Generator;<br/>//Tree: (node,left,right) or (leaf) or (node,left) ...<br/>aTree\u00a0:= T(1, T(2, T(4, T(7)), T(5)), T(3, T(6, T(8), T(9))));<br/>bTree\u00a0:= aTree;<br/>println(\"aTree and bTree \",sameFringe(aTree,bTree) and \"have\" or \"don't have\",<br/>          \" the same leaves.\");<br/>cTree\u00a0:= T(1, T(2, T(4, T(7)), T(5)), T(3, T(6, T(8))));<br/>dTree\u00a0:= T(1, T(2, T(4, T(7)), T(5)), T(3, T(6, T(8), T(9))));<br/>println(\"cTree and dTree \",sameFringe(cTree,dTree) and \"have\"or\"don't have\",<br/>          \" the same leaves.\");<br/>\u00a0<br/>fcn sameFringe(a,b){ same(G(genLeaves,a),G(genLeaves,b)) }<br/>\u00a0<br/>fcn same(g1,g2){ //(Generator,Generator)<br/>   foreach n1,n2 in (g1.zip(g2)){ //--&gt;(int,int) ...<br/>      if(n1\u00a0!= n2) return(); // == return(Void)<br/>   }<br/>   return(not (g2._next() or g2._next())); //--&gt;False if g1 or g2 has leaves<br/>}<br/>\u00a0<br/>fcn genLeaves(tree){<br/>   switch(tree.len()){ // (), (leaf), (node,left, [right])<br/>      case(1){ vm.yield(tree[0]) } // leaf: int<br/>      case(2){ genLeaves(tree[1]); }<br/>      else   { genLeaves(tree[1]); genLeaves(tree[2]); }<br/>   }<br/>}</pre>"}]}