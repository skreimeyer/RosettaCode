{"task": "Sierpinski_pentagon", "blocks": [{"lang": "C", "loc": 63, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define pi M_PI</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\ttime_t t<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> side<span class=\"sy0\">,</span> <span class=\"sy0\">**</span>vertices<span class=\"sy0\">,</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span>windowSide <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span>sumX<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>sumY<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>iter<span class=\"sy0\">,</span>choice<span class=\"sy0\">,</span>numSides<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of sides\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>numSides<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter polygon side length\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of iterations\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>iter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tinitwindow<span class=\"br0\">(</span>windowSide<span class=\"sy0\">,</span>windowSide<span class=\"sy0\">,</span><span class=\"st0\">\"Polygon Chaos\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tvertices <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>numSides<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>numSides<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tvertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tvertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> windowSide<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> side<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span>numSides<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> windowSide<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> side<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span>numSides<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsumX<span class=\"sy0\">+=</span> vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tsumY<span class=\"sy0\">+=</span> vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tputpixel<span class=\"br0\">(</span>vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tseedX <span class=\"sy0\">=</span> sumX<span class=\"sy0\">/</span>numSides<span class=\"sy0\">;</span><br/>\tseedY <span class=\"sy0\">=</span> sumY<span class=\"sy0\">/</span>numSides<span class=\"sy0\">;</span><br/>\u00a0<br/>\tputpixel<span class=\"br0\">(</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>iter<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tchoice <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>numSides<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tseedX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seedX <span class=\"sy0\">+</span> <span class=\"br0\">(</span>numSides<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>vertices<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>numSides<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tseedY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seedY <span class=\"sy0\">+</span> <span class=\"br0\">(</span>numSides<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>vertices<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>numSides<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tputpixel<span class=\"br0\">(</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>vertices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getch.html\"><span class=\"kw3\">getch</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 155, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Convert degrees into radians, as that is the accepted unit for sin/cos etc...</span><br/><span class=\"kw4\">real</span> degrees<span class=\"br0\">(</span><span class=\"kw4\">real</span> deg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> tau <span class=\"sy0\">=</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">*</span> PI<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> deg <span class=\"sy0\">*</span> tau <span class=\"sy0\">/</span> <span class=\"nu16\">360.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> part_ratio <span class=\"sy0\">=</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"nu0\">72</span>.<span class=\"me1\">degrees</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> side_ratio <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>part_ratio <span class=\"sy0\">+</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Use the provided turtle to draw a pentagon of the specified size</span><br/><span class=\"kw4\">void</span> pentagon<span class=\"br0\">(</span>Turtle turtle<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    turtle.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">36</span>.<span class=\"me1\">degrees</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    turtle.<span class=\"me1\">begin_fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        turtle.<span class=\"me1\">forward</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        turtle.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">72</span>.<span class=\"me1\">degrees</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    turtle.<span class=\"me1\">end_fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Draw a sierpinski pentagon of the desired order</span><br/><span class=\"kw4\">void</span> sierpinski<span class=\"br0\">(</span><span class=\"kw4\">int</span> order<span class=\"sy0\">,</span> Turtle turtle<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    turtle.<span class=\"me1\">setheading</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> new_size <span class=\"sy0\">=</span> size <span class=\"sy0\">*</span> side_ratio<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>order<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// create four more turtles</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            turtle.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">36</span>.<span class=\"me1\">degrees</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">real</span> small <span class=\"sy0\">=</span> size <span class=\"sy0\">*</span> side_ratio <span class=\"sy0\">/</span> part_ratio<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">auto</span> dist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>small<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> small<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">auto</span> spawn <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Turtle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            spawn.<span class=\"me1\">setposition</span><span class=\"br0\">(</span>turtle.<span class=\"me1\">position</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            spawn.<span class=\"me1\">setheading</span><span class=\"br0\">(</span>turtle.<span class=\"me1\">heading</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            spawn.<span class=\"me1\">forward</span><span class=\"br0\">(</span>dist<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// recurse for each spawned turtle</span><br/>            sierpinski<span class=\"br0\">(</span>order<span class=\"sy0\">,</span> spawn<span class=\"sy0\">,</span> new_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// recurse for the original turtle</span><br/>        sierpinski<span class=\"br0\">(</span>order<span class=\"sy0\">,</span> turtle<span class=\"sy0\">,</span> new_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// The bottom has been reached for this turtle</span><br/>        pentagon<span class=\"br0\">(</span>turtle<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Run the generation of a P(5) sierpinksi pentagon</span><br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> order <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">real</span> size <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> turtle <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Turtle<span class=\"br0\">(</span>size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Write the header to an SVG file for the image</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st_h\">`&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st_h\">`&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st_h\">`    \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st_h\">`&lt;svg height=\"%s\" width=\"%s\" style=\"fill:blue\" transform=\"translate(%s,%s) rotate(-36)\"`</span><span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st_h\">`    version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"&gt;`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Write the close tag when the interior points have been written</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>success<span class=\"br0\">)</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/svg&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Scale the initial turtle so that it stays in the inner pentagon</span><br/>    size <span class=\"sy0\">*=</span> part_ratio<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Begin rendering</span><br/>    sierpinski<span class=\"br0\">(</span>order<span class=\"sy0\">,</span> turtle<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Define a position</span><br/><span class=\"kw4\">struct</span> Point <span class=\"br0\">{</span><br/>    <span class=\"kw4\">real</span> x<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">real</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co2\">/// When a point is written, do it in the form \"x,y \" to three decimal places</span><br/>    <span class=\"kw4\">void</span> toString<span class=\"br0\">(</span><span class=\"kw2\">scope</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> sink<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        formattedWrite<span class=\"br0\">(</span>sink<span class=\"sy0\">,</span> <span class=\"st0\">\"%0.3f\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        formattedWrite<span class=\"br0\">(</span>sink<span class=\"sy0\">,</span> <span class=\"st0\">\"%0.3f\"</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Mock turtle implementation sufficiant to handle \"drawing\" the pentagons</span><br/><span class=\"kw4\">class</span> Turtle <span class=\"br0\">{</span><br/>    <span class=\"co2\">/////////////////////////////////</span><br/>    <span class=\"kw4\">private</span><span class=\"sy0\">:</span><br/>\u00a0<br/>    Point pos<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">real</span> theta<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> tracing<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co2\">/////////////////////////////////</span><br/>    <span class=\"kw4\">public</span><span class=\"sy0\">:</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// empty</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">real</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        pos.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        pos.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Get/Set the turtle position</span><br/>    Point position<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> pos<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setposition<span class=\"br0\">(</span>Point pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">pos</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Get/Set the turtle's heading</span><br/>    <span class=\"kw4\">real</span> heading<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> theta<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setheading<span class=\"br0\">(</span><span class=\"kw4\">real</span> angle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        theta <span class=\"sy0\">=</span> angle<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Move the turtle through space</span><br/>    <span class=\"kw4\">void</span> forward<span class=\"br0\">(</span><span class=\"kw4\">real</span> dist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Calculate both components at once for the specified angle</span><br/>        <span class=\"kw4\">auto</span> delta <span class=\"sy0\">=</span> dist <span class=\"sy0\">*</span> expi<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        pos.<span class=\"me1\">x</span> <span class=\"sy0\">+=</span> delta.<span class=\"me1\">re</span><span class=\"sy0\">;</span><br/>        pos.<span class=\"me1\">y</span> <span class=\"sy0\">+=</span> delta.<span class=\"me1\">im</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tracing<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Turn the turle</span><br/>    <span class=\"kw4\">void</span> right<span class=\"br0\">(</span><span class=\"kw4\">real</span> angle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        theta <span class=\"sy0\">=</span> theta <span class=\"sy0\">-</span> angle<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Start/Stop exporting the points of the polygon</span><br/>    <span class=\"kw4\">void</span> begin_fill<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span><span class=\"st_h\">`&lt;polygon points=\"`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tracing <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> end_fill<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st_h\">`\"/&gt;`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tracing <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss <br/>\u00a0<br/>pentaflake <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Picture<br/>pentaflake order <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> transformation pentagon <span class=\"sy0\">!!</span> order<br/>  <span class=\"kw1\">where</span><br/>    transformation <span class=\"sy0\">=</span> Scale s s <span class=\"sy0\">.</span> foldMap copy <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">72</span><span class=\"sy0\">..</span><span class=\"nu0\">288</span><span class=\"br0\">]</span><br/>    copy a <span class=\"sy0\">=</span> Rotate a <span class=\"sy0\">.</span> Translate <span class=\"nu0\">0</span> x<br/>    pentagon <span class=\"sy0\">=</span> Polygon <span class=\"br0\">[</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">|</span> a <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>x<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> display dc white <span class=\"br0\">(</span>Color blue <span class=\"sy0\">$</span> Scale <span class=\"nu0\">300</span> <span class=\"nu0\">300</span> <span class=\"sy0\">$</span> pentaflake <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> dc <span class=\"sy0\">=</span> InWindow <span class=\"st0\">\"Pentaflake\"</span> <span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Java", "loc": 109, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.ActionEvent</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.geom.Path2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"sy0\">*;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SierpinskiPentagon <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// exterior angle</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> degrees072 <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span><span class=\"nu0\">72</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* After scaling we'll have 2 sides plus a gap occupying the length<br/>       of a side before scaling. The gap is the base of an isosceles triangle<br/>       with a base angle of 72 degrees. */</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> scaleFactor <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> cos<span class=\"br0\">(</span>degrees072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> margin <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SierpinskiPentagon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Atimer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Timer</span></a><span class=\"br0\">(</span><span class=\"nu0\">3000</span>, <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aactionevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ActionEvent</span></a> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            limit<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawPentagon<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <span class=\"kw4\">double</span> x, <span class=\"kw4\">double</span> y, <span class=\"kw4\">double</span> side, <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> angle <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> degrees072<span class=\"sy0\">;</span> <span class=\"co1\">// starting angle</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            Path2D p <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Path2D.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            p.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// draw from the top</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> cos<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side<span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side<span class=\"sy0\">;</span><br/>                p.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                angle <span class=\"sy0\">+=</span> degrees072<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>RandomHue.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            side <span class=\"sy0\">*=</span> scaleFactor<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"coMULTI\">/* Starting at the top of the highest pentagon, calculate<br/>               the top vertices of the other pentagons by taking the<br/>               length of the scaled side plus the length of the gap. */</span><br/>            <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> side <span class=\"sy0\">+</span> side <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>degrees072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"coMULTI\">/* The top positions form a virtual pentagon of their own,<br/>               so simply move from one to the other by changing direction. */</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> cos<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance<span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance<span class=\"sy0\">;</span><br/>                drawPentagon<span class=\"br0\">(</span>g, x, y, side, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                angle <span class=\"sy0\">+=</span> degrees072<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> w <span class=\"sy0\">=</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> radius <span class=\"sy0\">=</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> side <span class=\"sy0\">=</span> radius <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>PI <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawPentagon<span class=\"br0\">(</span>g, w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> margin, side, limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Sierpinski Pentagon\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> SierpinskiPentagon<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RandomHue <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* Try to avoid random color values clumping together */</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> goldenRatioConjugate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> hue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hue <span class=\"sy0\">+</span> goldenRatioConjugate<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> hue, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 90, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;script type=\"application/x-javascript\"&gt;<br/>// Globals<br/>var cvs, ctx, scale=500, p0, ord=0, clr='blue', jc=0;<br/>var clrs=['blue','navy','green','darkgreen','red','brown','yellow','cyan'];<br/>\u00a0<br/>function p5f() {<br/>  cvs = document.getElementById(\"cvsid\");<br/>  ctx = cvs.getContext(\"2d\");<br/>  cvs.onclick=iter;<br/>  pInit(); //init plot<br/>}<br/>\u00a0<br/>function iter() {<br/>  if(ord&gt;5) {resetf(0)};<br/>  ctx.clearRect(0,0,cvs.width,cvs.height);<br/>  p0.forEach(iter5);<br/>  p0.forEach(pIter5);<br/>  ord++; document.getElementById(\"p1id\").innerHTML=ord;<br/>}<br/>\u00a0<br/>function iter5(v, i, a) {<br/>  if(typeof(v[0][0]) == \"object\") {a[i].forEach(iter5)}<br/>  else {a[i] = meta5(v)}<br/>}<br/>\u00a0<br/>function pIter5(v, i, a) {<br/>  if(typeof(v[0][0]) == \"object\") {v.forEach(pIter5)}<br/>  else {pPoly(v)}<br/>}<br/>\u00a0<br/>function pInit() {<br/>  p0 = [make5([.5,.5], .5)];<br/>  pPoly(p0[0]);<br/>}<br/>\u00a0<br/>function meta5(h) {<br/>  c=h[0]; p1=c; p2=h[1]; z1=p1[0]-p2[0]; z2=p1[1]-p2[1];<br/>  dist = Math.sqrt(z1*z1 + z2*z2)/2.65;<br/>  nP=[];<br/>  for(k=1; k&lt;h.length; k++) {<br/>    p1=h[k]; p2=c; a=Math.atan2(p2[1]-p1[1], p2[0]-p1[0]);<br/>    nP[k] = make5(ppad(a, dist, h[k]), dist)<br/>  }<br/>  nP[0]=make5(c, dist);<br/>  return nP;<br/>}<br/>\u00a0<br/>function make5(c, r) {<br/>  vs=[]; j = 1;<br/>  for(i=1/10; i&lt;2; i+=2/5) {<br/>    vs[j]=ppad(i*Math.PI, r, c); j++;<br/>  }<br/>  vs[0] = c; return vs;<br/>}<br/>\u00a0<br/>function pPoly(s) {<br/>  ctx.beginPath();<br/>  ctx.moveTo(s[1][0]*scale, s[1][1]*-scale+scale);<br/>  for(i=2; i&lt;s.length; i++)<br/>    ctx.lineTo(s[i][0]*scale, s[i][1]*-scale+scale);<br/>  ctx.fillStyle=clr; ctx.fill()<br/>}<br/>\u00a0<br/>// a - angle, d - distance, p - point<br/>function ppad(a, d, p) {<br/>  x=p[0]; y=p[1];<br/>  x2=d*Math.cos(a)+x; y2=d*Math.sin(a)+y;<br/>  return [x2,y2]<br/>}<br/>\u00a0<br/>function resetf(rord) {<br/>  ctx.clearRect(0,0,cvs.width,cvs.height);<br/>  ord=rord; jc++; if(jc&gt;7){jc=0}; clr=clrs[jc];<br/>  document.getElementById(\"p1id\").innerHTML=ord;<br/>  p5f();<br/>}<br/>&lt;/script&gt;<br/>&lt;/head&gt;<br/> &lt;body onload=\"p5f()\" style=\"font-family: arial, helvatica, sans-serif;\"&gt;<br/> \t&lt;b&gt;Click Pentaflake to iterate.&lt;/b&gt;&amp;nbsp; Order: &lt;label id='p1id'&gt;0&lt;/label&gt;&amp;nbsp;&amp;nbsp;<br/> \t&lt;input type=\"submit\" value=\"RESET\" onclick=\"resetf(0);\"&gt;&amp;nbsp;&amp;nbsp;<br/> \t(Reset anytime: to start new Pentaflake and change color.)<br/> \t&lt;br /&gt;&lt;br /&gt;<br/>    &lt;canvas id=\"cvsid\" width=640 height=640&gt;&lt;/canvas&gt;<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 104, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Path2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SierpinskiPentagon <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// exterior angle</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> degrees072 <span class=\"sy0\">=</span> Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span><span class=\"nu0\">72.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* After scaling we'll have 2 sides plus a gap occupying the length<br/>       of a side before scaling. The gap is the base of an isosceles triangle<br/>       with a base angle of 72 degrees. */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> scaleFactor <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span><span class=\"nu0\">2.0</span> + Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>degrees072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> margin <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        Timer<span class=\"br0\">(</span><span class=\"nu0\">3000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            limit++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawPentagon<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double, s<span class=\"sy0\">:</span> Double, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> angle <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span> <span class=\"sy0\">*</span> degrees072  <span class=\"co1\">// starting angle</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> xx <span class=\"sy0\">=</span> x<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> yy <span class=\"sy0\">=</span> y<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> side <span class=\"sy0\">=</span> s<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Path2D.<span class=\"me1\">Double</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            p.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>xx, yy<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">// draw from the top</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                xx +<span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side<br/>                yy -<span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side<br/>                p.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>xx, yy<span class=\"br0\">)</span><br/>                angle +<span class=\"sy0\">=</span> degrees072<br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> RandomHue.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            side <span class=\"sy0\">*=</span> scaleFactor<br/>            <span class=\"coMULTI\">/* Starting at the top of the highest pentagon, calculate<br/>               the top vertices of the other pentagons by taking the<br/>               length of the scaled side plus the length of the gap. */</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> side + side <span class=\"sy0\">*</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>degrees072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><br/>\u00a0<br/>            <span class=\"coMULTI\">/* The top positions form a virtual pentagon of their own,<br/>               so simply move from one to the other by changing direction. */</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                xx +<span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance<br/>                yy -<span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance<br/>                drawPentagon<span class=\"br0\">(</span>g, xx, yy, side, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                angle +<span class=\"sy0\">=</span> degrees072<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hw <span class=\"sy0\">=</span> width / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> radius <span class=\"sy0\">=</span> hw - <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> margin<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> side <span class=\"sy0\">=</span> radius <span class=\"sy0\">*</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> / <span class=\"nu0\">5.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><br/>        drawPentagon<span class=\"br0\">(</span>g, hw.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">3.0</span> <span class=\"sy0\">*</span> margin, side, limit<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RandomHue <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* Try to avoid random color values clumping together */</span><br/>        companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> goldenRatioConjugate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span> - <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hue <span class=\"sy0\">=</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>            fun next<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Color <span class=\"br0\">{</span><br/>                hue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hue + goldenRatioConjugate<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue.<span class=\"me1\">toFloat</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, 1.0f, 1.0f<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">defaultCloseOperation</span> <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>        f.<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Sierpinski Pentagon\"</span><br/>        f.<span class=\"me1\">isResizable</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        f.<span class=\"me1\">add</span><span class=\"br0\">(</span>SierpinskiPentagon<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">pentaFlake[0] = RegularPolygon[5];<br/>pentaFlake[n_]\u00a0:= <br/> GeometricTransformation[pentaFlake[n - 1], <br/>  TranslationTransform /@ <br/>   CirclePoints[{GoldenRatio^(2 n - 1), Pi/10}, 5]]<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"ca8db8abbaa2a3a9b98abaafa4beab8ca6aba1af\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[4]</pre>"}, {"lang": "MATLAB", "loc": 6, "block": "<pre class=\"matlab highlighted_source\"><span class=\"br0\">[</span>x, x0<span class=\"br0\">]</span> = deal<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/exp.html\"><span class=\"kw2\">exp</span></a><span class=\"br0\">(</span><span class=\"re0\">1i</span>*<span class=\"br0\">(</span><span class=\"nu0\">0.5</span>:.4:<span class=\"nu0\">2.1</span><span class=\"br0\">)</span>*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">4</span><br/>  x = x<span class=\"br0\">(</span>:<span class=\"br0\">)</span> + x0 * <span class=\"br0\">(</span><span class=\"nu0\">1</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> * <span class=\"br0\">(</span><span class=\"nu0\">3</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ^<span class=\"br0\">(</span>k - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span> ^ k;<br/><span class=\"kw1\">end</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/patch.html\"><span class=\"kw2\">patch</span></a><span class=\"br0\">(</span><span class=\"co2\">'Faces'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">5</span> * <span class=\"nu0\">5</span> ^ k, <span class=\"nu0\">5</span>, <span class=\"co2\">''</span><span class=\"br0\">)</span>', <span class=\"co2\">'Vertices'</span>, <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/real.html\"><span class=\"kw2\">real</span></a><span class=\"br0\">(</span>x<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/imag.html\"><span class=\"kw2\">imag</span></a><span class=\"br0\">(</span>x<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/image.html\"><span class=\"kw2\">image</span></a> off</pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> order  <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$dim</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$sides</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> scaling<span class=\"sy0\">-</span>factor <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span> <span class=\"nu0\">5</span><span class=\"sy0\">**.</span>5 <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@orders</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> scaling<span class=\"sy0\">-</span>factor<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dim</span><span class=\"br0\">)</span> \u00ab<span class=\"sy0\">*</span>\u00bb scaling<span class=\"sy0\">-</span>factor \u00ab<span class=\"sy0\">**</span>\u00bb <span class=\"br0\">(</span><span class=\"sy0\">^</span>order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">INIT</span> <span class=\"kw3\">say</span> qq<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span>STOP<span class=\"sy0\">/;</span><br/>    <span class=\"sy0\">&lt;?</span>xml version<span class=\"sy0\">=</span><span class=\"st0\">\"1.0\"</span> standalone<span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"sy0\">?&gt;</span><br/>    <span class=\"sy0\">&lt;!</span>DOCTYPE svg PUBLIC <span class=\"st0\">\"-//W3C//DTD SVG 1.1//EN\"</span> <span class=\"st0\">\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>svg height<span class=\"sy0\">=</span><span class=\"st0\">\"{$dim*2}\"</span> width<span class=\"sy0\">=</span><span class=\"st0\">\"{$dim*2}\"</span> style<span class=\"sy0\">=</span><span class=\"st0\">\"fill:blue\"</span> transform<span class=\"sy0\">=</span><span class=\"st0\">\"translate($dim,$dim) rotate(-18)\"</span><br/>      version<span class=\"sy0\">=</span><span class=\"st0\">\"1.1\"</span> xmlns<span class=\"sy0\">=</span><span class=\"st0\">\"http://www.w3.org/2000/svg\"</span><span class=\"sy0\">&gt;</span><br/>    STOP<br/><span class=\"kw2\">END</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'&lt;/svg&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@vertices</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"kw3\">cis</span><span class=\"br0\">(</span> <span class=\"re0\">$_</span> <span class=\"sy0\">*</span> \u03c4 <span class=\"sy0\">/</span> <span class=\"re0\">$sides</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">$sides</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$sides</span> <span class=\"sy0\">**</span> order <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$vector</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@vertices</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"re0\">$sides</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{order}d\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">]</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">@orders</span><span class=\"sy0\">;</span><br/>   <span class=\"kw3\">say</span> pgon <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">@orders</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> scaling<span class=\"sy0\">-</span>factor<span class=\"br0\">)</span><span class=\"br0\">)</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">@vertices</span> \u00ab<span class=\"sy0\">+</span>\u00bb <span class=\"re0\">$vector</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">reals</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%0.3f\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pgon <span class=\"br0\">(</span><span class=\"re0\">@q</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> qq<span class=\"sy0\">|&lt;</span>polygon points<span class=\"sy0\">=</span><span class=\"st0\">\"{@q}\"</span><span class=\"sy0\">/&gt;|</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 75, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">turtle</span> <span class=\"kw1\">import</span> *<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>speed<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>      <span class=\"co1\"># 0 is the fastest speed. Otherwise, 1 (slow) to 10 (fast)</span><br/>hideturtle<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># hide the default turtle</span><br/>\u00a0<br/>part_ratio <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> * <span class=\"kw3\">math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">radians</span><span class=\"br0\">(</span><span class=\"nu0\">72</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>side_ratio <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> / <span class=\"br0\">(</span>part_ratio + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>hide_turtles <span class=\"sy0\">=</span> <span class=\"kw2\">True</span>   <span class=\"co1\"># show/hide turtles as they draw</span><br/>path_color <span class=\"sy0\">=</span> <span class=\"st0\">\"black\"</span>  <span class=\"co1\"># path color</span><br/>fill_color <span class=\"sy0\">=</span> <span class=\"st0\">\"black\"</span>  <span class=\"co1\"># fill color</span><br/>\u00a0<br/><span class=\"co1\"># turtle, size</span><br/><span class=\"kw1\">def</span> pentagon<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>  t.<span class=\"me1\">color</span><span class=\"br0\">(</span>path_color<span class=\"sy0\">,</span> fill_color<span class=\"br0\">)</span><br/>  t.<span class=\"me1\">pendown</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">begin_fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>    t.<span class=\"me1\">forward</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    t.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">72</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">end_fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># iteration, turtle, size</span><br/><span class=\"kw1\">def</span> sierpinski<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>  t.<span class=\"me1\">setheading</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  new_size <span class=\"sy0\">=</span> s * side_ratio<br/>\u00a0<br/>  <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>    i -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\"># create four more turtles</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>:<br/>      t.<span class=\"me1\">right</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>      short <span class=\"sy0\">=</span> s * side_ratio / part_ratio<br/>      dist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>short<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> short<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"co1\"># spawn a turtle</span><br/>      spawn <span class=\"sy0\">=</span> Turtle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> hide_turtles:spawn.<span class=\"me1\">hideturtle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      spawn.<span class=\"me1\">penup</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      spawn.<span class=\"me1\">setposition</span><span class=\"br0\">(</span>t.<span class=\"me1\">position</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      spawn.<span class=\"me1\">setheading</span><span class=\"br0\">(</span>t.<span class=\"me1\">heading</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      spawn.<span class=\"me1\">forward</span><span class=\"br0\">(</span>dist<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"co1\"># recurse for spawned turtles</span><br/>      sierpinski<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> spawn<span class=\"sy0\">,</span> new_size<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># recurse for parent turtle</span><br/>    sierpinski<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> new_size<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">else</span>:<br/>    <span class=\"co1\"># draw a pentagon</span><br/>    pentagon<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>    <span class=\"co1\"># delete turtle</span><br/>    <span class=\"kw1\">del</span> t<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  t <span class=\"sy0\">=</span> Turtle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">hideturtle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">penup</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  screen <span class=\"sy0\">=</span> t.<span class=\"me1\">getscreen</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  y <span class=\"sy0\">=</span> screen.<span class=\"me1\">window_height</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  t.<span class=\"me1\">goto</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> y/<span class=\"nu0\">2</span>-<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/>  i <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>       <span class=\"co1\"># depth. i &gt;= 1</span><br/>  size <span class=\"sy0\">=</span> <span class=\"nu0\">300</span>  <span class=\"co1\"># side length</span><br/>\u00a0<br/>  <span class=\"co1\"># so the spawned turtles move only the distance to an inner pentagon</span><br/>  size *<span class=\"sy0\">=</span> part_ratio<br/>\u00a0<br/>  <span class=\"co1\"># begin recursion</span><br/>  sierpinski<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 57, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require racket/draw pict racket/math racket/class)<br/>\u00a0<br/>;; exterior angle<br/>(define 72-degrees (degrees-&gt;radians 72))<br/>;; After scaling we'll have 2 sides plus a gap occupying the length<br/>;; of a side before scaling. The gap is the base of an isosceles triangle<br/>;; with a base angle of 72 degrees. <br/>(define scale-factor (/ (+ 2 (* (cos 72-degrees) 2))))<br/>;; Starting at the top of the highest pentagon, calculate<br/>;; the top vertices of the other pentagons by taking the<br/>;; length of the scaled side plus the length of the gap.       <br/>(define dist-factor (+ 1 (* (cos 72-degrees) 2)))<br/>\u00a0<br/>;; don't use scale, since it scales brushes too (making lines all tiny)<br/>(define (draw-pentagon x y side depth dc)<br/>  (let recur ((x x) (y y) (side side) (depth depth))<br/>    (cond<br/>      [(zero? depth)<br/>       (define p (new dc-path%))<br/>       (send p move-to x y)<br/>       (for/fold ((x x) (y y) (\u03b1 (* 3 72-degrees))) ((i 5))<br/>         (send p line-to x y)<br/>         (values (+ x (* side (cos \u03b1)))<br/>                 (- y (* side (sin \u03b1)))<br/>                 (+ \u03b1 72-degrees)))<br/>       (send p close)<br/>       (send dc draw-path p)]<br/>      [else<br/>       (define side/ (* side scale-factor))<br/>       (define dist (* side/ dist-factor))<br/>      \u00a0;; The top positions form a virtual pentagon of their own,<br/>      \u00a0;; so simply move from one to the other by changing direction.<br/>       (for/fold ((x x) (y y) (\u03b1 (* 3 72-degrees))) ((i 5))<br/>         (recur x y side/ (sub1 depth))<br/>         (values (+ x (* dist (cos \u03b1)))<br/>                 (- y (* dist (sin \u03b1)))<br/>                 (+ \u03b1 72-degrees)))])))<br/>\u00a0<br/>(define (dc-draw-pentagon depth w h #:margin (margin 4))<br/>  (dc (lambda (dc dx dy)<br/>        (define old-brush (send dc get-brush))<br/>        (send dc set-brush (make-brush #:style 'transparent))<br/>        (draw-pentagon (/ w 2)<br/>                       (* 3 margin)<br/>                       (* (- (/ w 2) (* 2 margin))<br/>                          (sin (/ pi 5)) 2)<br/>                       depth<br/>                       dc)<br/>        (send dc set-brush old-brush))<br/>      w h))<br/>\u00a0<br/>(dc-draw-pentagon 1 120 120)<br/>(dc-draw-pentagon 2 120 120)<br/>(dc-draw-pentagon 3 120 120)<br/>(dc-draw-pentagon 4 120 120)<br/>(dc-draw-pentagon 5 640 640)</pre>"}, {"lang": "Scala", "loc": 107, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">ActionEvent</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Path2D</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"br0\">{</span>Pi, cos, sin, sqrt<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SierpinskiPentagon <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SierpinskiPentagon <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>\u00a0<br/>      <span class=\"coMULTI\">/* Try to avoid random color values clumping together */</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hue <span class=\"sy0\">=</span> math.<span class=\"me1\">random</span><br/>\u00a0<br/>      <span class=\"co1\">// exterior angle</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> deg072 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Pi / 5d <span class=\"co1\">//toRadians(72)</span><br/>      <span class=\"coMULTI\">/* After scaling we'll have 2 sides plus a gap occupying the length<br/>         of a side before scaling. The gap is the base of an isosceles triangle<br/>         with a base angle of 72 degrees. */</span><br/>      <span class=\"co1\">//private val scaleFactor = 1 / (2 + cos(deg072) * 2)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawPentagon<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double, side<span class=\"sy0\">:</span> Double, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> scaleFactor <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> / <span class=\"br0\">(</span><span class=\"nu0\">2</span> + cos<span class=\"br0\">(</span>deg072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"co1\">// draw from the top</span><br/>          <span class=\"sy0\">@</span>tailrec<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter0<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double, angle<span class=\"sy0\">:</span> Double, p<span class=\"sy0\">:</span> Path2D.<span class=\"me1\">Double</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Path2D.<span class=\"me1\">Double</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> p<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>              p.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>              iter0<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, x + cos<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side, y - sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> side, angle + deg072, p<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> p1<span class=\"sy0\">:</span> Path2D.<span class=\"me1\">Double</span> <span class=\"sy0\">=</span> iter0<span class=\"br0\">(</span><span class=\"nu0\">4</span>, x, y, <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> deg072, <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Path2D.<span class=\"me1\">Double</span><br/>            p.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>            p<br/>          <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> p<span class=\"sy0\">:</span> Path2D.<span class=\"me1\">Double</span> <span class=\"sy0\">=</span> iter0<span class=\"br0\">(</span><span class=\"nu0\">4</span>, x, y, <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> deg072, p1<span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"sy0\">:</span> Color <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            hue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hue + <span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><br/>            Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue.<span class=\"me1\">toFloat</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>          g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"sy0\">_</span>side <span class=\"sy0\">=</span> side <span class=\"sy0\">*</span> scaleFactor<br/>          <span class=\"coMULTI\">/* Starting at the top of the highest pentagon, calculate<br/>             the top vertices of the other pentagons by taking the<br/>             length of the scaled side plus the length of the gap. */</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>side + <span class=\"sy0\">_</span>side <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>deg072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>          <span class=\"coMULTI\">/* The top positions form a virtual pentagon of their own,<br/>             so simply move from one to the other by changing direction. */</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter1<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double, angle<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>              drawPentagon<span class=\"br0\">(</span>g, x, y, <span class=\"sy0\">_</span>side, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>              iter1<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, x + cos<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance, y - sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance, angle + deg072<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          iter1<span class=\"br0\">(</span><span class=\"nu0\">4</span>, x + cos<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> deg072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance, y - sin<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> deg072<span class=\"br0\">)</span> <span class=\"sy0\">*</span> distance, <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> deg072<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>g, margin<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> side <span class=\"sy0\">=</span> <span class=\"br0\">(</span>getWidth / <span class=\"nu0\">2</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>Pi / <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        drawPentagon<span class=\"br0\">(</span>g, getWidth / <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> margin, side, limit<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Timer<span class=\"br0\">(</span><span class=\"nu0\">3000</span>, <span class=\"br0\">(</span><span class=\"sy0\">_:</span> ActionEvent<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        limit +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>      setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Sierpinski Pentagon\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> SierpinskiPentagon, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">define order = <span class=\"nu0\">5</span><br/>define sides = <span class=\"nu0\">5</span><br/>define dim   = <span class=\"nu0\">500</span><br/>define scaling_factor = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">-</span> <span class=\"nu0\">5</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>var orders = order.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>scaling_factor<span class=\"br0\">)</span> <span class=\"sy0\">*</span> dim<span class=\"br0\">)</span> <span class=\"sy0\">*</span> scaling_factor<span class=\"sy0\">**</span>i <span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\"STOP\"</span>;<br/><span class=\"sy0\">&lt;</span>?xml version=<span class=\"st0\">\"1.0\"</span> standalone=<span class=\"st0\">\"no\"</span>?<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>!DOCTYPE svg PUBLIC <span class=\"st0\">\"-//W3C//DTD SVG 1.1//EN\"</span><br/>    <span class=\"st0\">\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>svg height=<span class=\"st0\">\"#{dim*2}\"</span> width=<span class=\"st0\">\"#{dim*2}\"</span><br/>    style=<span class=\"st0\">\"fill:blue\"</span> transform=<span class=\"st0\">\"translate(#{dim},#{dim}) rotate(-18)\"</span><br/>    version=<span class=\"st0\">\"1.1\"</span> xmlns=<span class=\"st0\">\"http://www.w3.org/2000/svg\"</span><span class=\"sy0\">&gt;</span><br/>STOP<br/>\u00a0<br/>var vertices = sides.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw4\">Complex</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i <span class=\"sy0\">*</span> Number.<span class=\"me1\">tau</span> <span class=\"sy0\">/</span> sides<span class=\"br0\">)</span>.<span class=\"me1\">exp</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> ^<span class=\"br0\">(</span>sides<span class=\"sy0\">**</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   var vector = <span class=\"br0\">(</span><span class=\"br0\">[</span>vertices<span class=\"br0\">[</span><span class=\"st0\">\"%#{order}d\"</span> <span class=\"sy0\">%</span> i.<span class=\"me1\">base</span><span class=\"br0\">(</span>sides<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> chars<span class=\"br0\">]</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0orders \u00ab<span class=\"sy0\">+</span>\u00bb<span class=\"br0\">)</span><br/>   var points = <span class=\"br0\">(</span>vertices\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb orders<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>scaling_factor<span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb vector\u00a0\u00bbreals<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00bb \u00ab<span class=\"sy0\">%</span>\u00ab\u00a0<span class=\"st0\">'%0.3f'</span><span class=\"br0\">)</span><br/>   say <span class=\"br0\">(</span><span class=\"st0\">'&lt;polygon points=\"'</span> <span class=\"sy0\">+</span> points.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'\"/&gt;'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">'&lt;/svg&gt;'</span></pre>"}, {"lang": "zkl", "loc": 30, "block": "<pre class=\"text highlighted_source\">const order=5, sides=5, dim=250, scaleFactor=((3.0 - (5.0).pow(0.5))/2);<br/>const tau=(0.0).pi*2; // 2*pi*r<br/>orders:=order.pump(List,fcn(n){ (1.0 - scaleFactor)*dim*scaleFactor.pow(n) });<br/>\u00a0<br/>println(<br/>#&lt;&lt;&lt;<br/>0'|&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;<br/>&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"<br/>    \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;<br/>&lt;svg height=\"%d\" width=\"%d\" style=\"fill:blue\" transform=\"translate(%d,%d) rotate(-18)\"<br/>    version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"&gt;|<br/>#&lt;&lt;&lt;<br/>   .fmt(dim*2,dim*2,dim,dim));<br/>\u00a0<br/>vertices:=sides.pump(List,fcn(s){ (1.0).toRectangular(tau*s/sides) }); // points on unit circle<br/>vx:=vertices.apply('wrap([(a,b)]v,x){ return(a*x,b*x) },  // scaled points<br/>\t\torders[-1]*(1.0 - scaleFactor));<br/>fmt:=\"%%0%d.%dB\".fmt(sides,order).fmt; //--&gt;%05.5B (leading zeros, 5 places, base 5)<br/>sides.pow(order).pump(Console.println,'wrap(i){<br/>   vector:=fmt(i).pump(List,vertices.get)  // \"00012\"--&gt;(vertices[0],..,vertices[2])<br/>     .zipWith(fcn([(a,b)]v,x){ return(a*x,b*x) },orders) // ((a,b)...)*x --&gt;((ax,bx)...)<br/>     .reduce(fcn(vsum,v){ vsum[0]+=v[0]; vsum[1]+=v[1]; vsum },L(0.0, 0.0)); //--&gt;(x,y)<br/>   pgon(vx.apply(fcn([(a,b)]v,c,d){ return(a+c,b+d) },vector.xplode()));<br/>});<br/>println(\"&lt;/svg&gt;\");  // 3,131 lines<br/>\u00a0<br/>fcn pgon(vertices){  // eg ( ((250,0),(248.595,1.93317),...), len 5<br/>   0'|&lt;polygon points=\"%s\"/&gt;|.fmt(<br/>       vertices.pump(String,fcn(v){ \"%.3f\u00a0%.3f \".fmt(v.xplode()) }) )<br/>}</pre>"}]}