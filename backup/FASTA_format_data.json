{"task": "FASTA_format", "blocks": [{"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Simple_FASTA <span class=\"kw1\">is</span><br/>\u00a0<br/>   Current: Character;<br/>\u00a0<br/><span class=\"kw1\">begin</span> <br/>   Get<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>; <br/>   <span class=\"kw1\">if</span> Current /= '&gt;' <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">raise</span> Constraint_Error <span class=\"kw3\">with</span> <span class=\"st0\">\"'&gt;' expected\"</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> End_Of_File <span class=\"kw1\">loop</span> <span class=\"co1\">-- read name and string</span><br/>      Put<span class=\"br0\">(</span>Get_Line &amp; <span class=\"st0\">\": \"</span><span class=\"br0\">)</span>; <span class=\"co1\">-- read name and write directly to output</span><br/>      Read_String:<br/>      <span class=\"kw1\">loop</span><br/>\t <span class=\"kw3\">exit</span> Read_String <span class=\"kw3\">when</span> End_Of_File; <span class=\"co1\">-- end of input</span><br/>\t Get<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">if</span> Current = '&gt;' <span class=\"kw1\">then</span> <span class=\"co1\">-- next name</span><br/>\t    New_Line; <br/>\t    <span class=\"kw3\">exit</span> Read_String;<br/>\t <span class=\"kw1\">else</span><br/>\t    Put<span class=\"br0\">(</span>Current &amp; Get_Line<span class=\"br0\">)</span>; <br/>\t    <span class=\"co1\">-- read part of string and write directly to output</span><br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span> Read_String;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Simple_FASTA;</pre>"}, {"lang": "Aime", "loc": 15, "block": "<pre class=\"text highlighted_source\">file f;<br/>text n, s;<br/>\u00a0<br/>f.affix(argv(1));<br/>\u00a0<br/>while (f.line(s) ^ -1) {<br/>    if (s[0] == '&gt;') {<br/>        o_(n, s, \": \");<br/>        n = \"\\n\";<br/>    } else {<br/>        o_(s);<br/>    }<br/>}<br/>\u00a0<br/>o_(n);</pre>"}, {"lang": "ALGOL W", "loc": 26, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% reads FASTA format data from standard input and write the results to standard output\u00a0%<br/>   \u00a0% only handles the \"&gt;\" line start                                                     \u00a0%<br/>    string(256) line;<br/>   \u00a0% allow the program to continue after reaching end-of-file\u00a0%<br/>    ENDFILE\u00a0:= EXCEPTION( false, 1, 0, false, \"EOF\" );<br/>   \u00a0% handle the input\u00a0%<br/>    readcard( line );<br/>    while not XCPNOTED(ENDFILE) do begin<br/>       \u00a0% strings are fixed length in Algol W - we need to find the line lengh with trailing spaces removed\u00a0%<br/>        integer len;<br/>        len\u00a0:= 255;<br/>        while len &gt; 0 and line( len // 1 ) = \" \" do len\u00a0:= len - 1;<br/>        if len &gt; 0 then begin\u00a0% non-empty line\u00a0%<br/>            integer pos;<br/>            pos\u00a0:= 0;<br/>            if line( 0 // 1 ) = \"&gt;\" then begin\u00a0% header line\u00a0%<br/>                write();<br/>                pos\u00a0:= 1;<br/>            end if_header_line\u00a0;<br/>            for cPos\u00a0:= pos until len do writeon( line( cPos // 1 ) );<br/>            if line( 0 // 1 ) = \"&gt;\" then writeon( \": \" )<br/>        end if_non_empty_line\u00a0;<br/>        readcard( line );<br/>    end while_not_eof<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">Data <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/><span class=\"sy0\">&gt;</span>Rosetta_Example_1<br/>THERECANBENOSPACE<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED<br/><span class=\"br0\">)</span><br/>\u00a0<br/>Data <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Data<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\\V+\\K\\v+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\\v+(?!&gt;)\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> w700<span class=\"sy0\">,</span> \u00a0% Data <br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "AWK", "loc": 53, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f FASTA_FORMAT.AWK filename</span><br/><span class=\"co1\"># stop processing each file when an error is encountered</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">FNR</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      header_found = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span>;<span class=\"sy2\">&gt;</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        error<span class=\"br0\">(</span><span class=\"st0\">\"record is not valid\"</span><span class=\"br0\">)</span><br/>        nextfile<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span>;<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> next <span class=\"br0\">}</span> <span class=\"co1\"># comment begins with a \";\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># header</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>header_found <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"co1\"># EOL for previous sequence</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s: \"</span>,<span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      header_found = <span class=\"nu0\">1</span><br/>      next<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span> \\t<span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> next <span class=\"br0\">}</span> <span class=\"co1\"># ignore records with whitespace</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/</span>\\<span class=\"sy3\">*</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># sequence may end with an \"*\"</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>header_found <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,<span class=\"nu0\">1</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        header_found = <span class=\"nu0\">0</span><br/>        next<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        error<span class=\"br0\">(</span><span class=\"st0\">\"end of sequence found but header is missing\"</span><span class=\"br0\">)</span><br/>        nextfile<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>header_found <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>,<span class=\"re0\">$0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      error<span class=\"br0\">(</span><span class=\"st0\">\"header not found\"</span><span class=\"br0\">)</span><br/>      nextfile<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>ENDFILE <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>header_found <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    exit <span class=\"br0\">(</span>errors <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">0</span> <span class=\"sy5\">:</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> error<span class=\"br0\">(</span>message<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"error: FILENAME=%s, FNR=%d,\u00a0%s,\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">FILENAME</span>,<span class=\"kw3\">FNR</span>,message,<span class=\"re0\">$0</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span><span class=\"st0\">\"con\"</span><br/>    errors<span class=\"sy3\">++</span><br/>    <span class=\"kw6\">return</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 38, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span> fp<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> line <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tssize_t read<span class=\"sy0\">;</span><br/>\u00a0<br/>\tfp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fasta.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fp <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> state <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>read <span class=\"sy0\">=</span> getline<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>line<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>len<span class=\"sy0\">,</span> fp<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* Delete trailing newline */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">[</span>read <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>\t\t\tline<span class=\"br0\">[</span>read <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"coMULTI\">/* Handle comment lines*/</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>state <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s: \"</span><span class=\"sy0\">,</span> line<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tstate <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/* Print everything else */</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 41, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>argv <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> argc <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Usage: \"</span><span class=\"sy1\">&lt;&lt;</span>argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" [infile]\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> input<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>input.<span class=\"me1\">good</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error opening '\"</span><span class=\"sy1\">&lt;&lt;</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"'. Bailing out.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line, name, content<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span> input, line <span class=\"br0\">)</span>.<span class=\"me1\">good</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> line.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'&gt;'</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">// Identifier marker</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>name.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">// Print out what we read from the last entry</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> content <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>                name.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>line.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                name <span class=\"sy1\">=</span> line.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            content.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>name.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> line.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">// Invalid sequence--no spaces allowed</span><br/>                name.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                content.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                content <span class=\"sy2\">+</span><span class=\"sy1\">=</span> line<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>name.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">// Print out what we read from the last entry</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> content <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 52, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> FastaEntry<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> StringBuilder Sequence <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>FastaEntry<span class=\"sy0\">&gt;</span> ParseFasta<span class=\"br0\">(</span>StreamReader fastaFile<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        FastaEntry f <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> line<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> fastaFile<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// ignore comment lines</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"sy0\">.</span><span class=\"me1\">StartsWith</span><span class=\"br0\">(</span><span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"sy0\">.</span><span class=\"me1\">StartsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> f<span class=\"sy0\">;</span><br/>                f <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FastaEntry <span class=\"br0\">{</span> Name <span class=\"sy0\">=</span> line<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Sequence <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                f<span class=\"sy0\">.</span><span class=\"me1\">Sequence</span><span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> f<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> fastaFile <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamReader<span class=\"br0\">(</span><span class=\"st0\">\"fasta.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>FastaEntry f <span class=\"kw1\">in</span> ParseFasta<span class=\"br0\">(</span>fastaFile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}: {1}\"</span>, f<span class=\"sy0\">.</span><span class=\"me1\">Name</span>, f<span class=\"sy0\">.</span><span class=\"me1\">Sequence</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>FileNotFoundException e<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fasta <span class=\"br0\">[</span>pathname<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>r <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">/</span>reader pathname<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>line <span class=\"br0\">(</span><span class=\"kw1\">line-seq</span> r<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> line<span class=\"br0\">)</span> \\<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%n%s: \"</span> <span class=\"br0\">(</span>subs line <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">print</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fasta <span class=\"br0\">(</span>pathname<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s pathname<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line s <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>          while line<br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>char<span class=\"sy0\">=</span> #\\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>char line <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;~A: \"</span> <span class=\"br0\">(</span>subseq line <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">princ</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          finally <span class=\"br0\">(</span>fresh-line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> fileName <span class=\"sy0\">=</span> <span class=\"st0\">\"fasta_format_data.fasta\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> first <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> line<span class=\"sy0\">;</span> fileName.<span class=\"me1\">File</span>.<span class=\"me1\">byLine</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                first <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                writeln<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            write<span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">strip</span><span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            line.<span class=\"me1\">strip</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 38, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> checkNoSpaces<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">32</span> OrElse s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span>  <span class=\"co1\">'' check for spaces or tabs</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"input.fasta\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\"># 1</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> ln, seq<br/><span class=\"kw1\">Dim</span> first <span class=\"kw1\">As</span> Boolean = <span class=\"kw1\">True</span><br/>\u00a0<br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, ln</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>ln, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"st0\">\"&gt;\"</span>  <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> first <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>ln, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"st0\">\": \"</span>;       <br/>    <span class=\"kw1\">If</span> first <span class=\"kw1\">Then</span> first = <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">ElseIf</span> first <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span>: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error\u00a0: File does not begin with '&gt;'\"</span>;<br/>    <span class=\"kw1\">Exit</span> <span class=\"kw1\">While</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">If</span> checkNoSpaces<span class=\"br0\">(</span>ln<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Print</span> ln;<br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error\u00a0: Sequence contains space(s)\"</span>;<br/>      <span class=\"kw1\">Exit</span> <span class=\"kw1\">While</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 16, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><span class=\"st0\">\"../FASTA\"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp, sOutput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sList, gb.<span class=\"me1\">NewLine</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sTemp Begins <span class=\"st0\">\"&gt;\"</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sOutput <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sOutput<br/>    sOutput <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span>sTemp, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\": \"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a><br/>    sOutput <span class=\"sy0\">&amp;=</span> sTemp<br/>  <a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sOutput<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 43, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"bufio\"</span><br/>        <span class=\"st0\">\"fmt\"</span><br/>        <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span><span class=\"st0\">\"rc.fasta\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">defer</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>        s <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewScanner<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>        headerFound <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>        <span class=\"kw1\">for</span> s<span class=\"sy3\">.</span>Scan<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                line <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>Text<span class=\"sy1\">()</span><br/>                <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">case</span> line <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">:</span><br/>                        <span class=\"kw1\">continue</span><br/>                <span class=\"kw1\">case</span> line<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"st0\">'&gt;'</span><span class=\"sy1\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>headerFound <span class=\"sy1\">{</span><br/>                                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"missing header\"</span><span class=\"sy1\">)</span><br/>                                <span class=\"kw1\">return</span><br/>                        <span class=\"sy1\">}</span><br/>                        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>line<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">case</span> headerFound<span class=\"sy1\">:</span><br/>                        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>                        <span class=\"kw1\">fallthrough</span><br/>                <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s: \"</span><span class=\"sy1\">,</span> line<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span><br/>                        headerFound <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> headerFound <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>Err<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span> groupBy <span class=\"br0\">)</span><br/>\u00a0<br/>parseFasta <span class=\"sy0\">::</span> FilePath <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>parseFasta fileName <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  file <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> fileName<br/>  <span class=\"kw1\">let</span> pairedFasta <span class=\"sy0\">=</span> readFasta <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> file<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> code<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> name <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">++</span> code<span class=\"br0\">)</span> pairedFasta<br/>\u00a0<br/>readFasta <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>readFasta <span class=\"sy0\">=</span> pair <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> groupBy <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> notName x <span class=\"sy0\">&amp;&amp;</span> notName y<span class=\"br0\">)</span><br/> <span class=\"kw1\">where</span><br/>  notName <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>  notName <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/=</span><span class=\"br0\">)</span> <span class=\"st0\">'&gt;'</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><br/>\u00a0<br/>  pair <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  pair <span class=\"br0\">[</span><span class=\"br0\">]</span>           <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  pair <span class=\"br0\">(</span>x\u00a0: y\u00a0: xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>\u00a0: pair xs</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'strings'</span>  <span class=\"co1\">NB. not needed for J versions greater than 6.</span><br/>parseFasta=: <span class=\"sy0\">((</span><span class=\"st_h\">': '</span> ,~ LF&amp;taketo<span class=\"sy0\">)</span> , <span class=\"sy0\">(</span>LF -.~ LF&amp;takeafter<span class=\"sy0\">))</span>;.<span class=\"nu0\">_1</span></pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ReadFastaFile <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilenotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileNotFoundException</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> first <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span>Scanner sc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"test.fasta\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first<span class=\"br0\">)</span><br/>                        first <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span><br/>                        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s: \"</span>, line.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def fasta:<br/>  foreach (inputs, \"&gt;\") as $line<br/>    # state: [accumulator, print ]<br/>    ( [null, null];<br/>      if $line[0:1] == \"&gt;\" then [($line[1:] + \": \"), .[0]]<br/>      else [ (.[0] + $line), false]<br/>      end;<br/>      if .[1] then .[1] else empty end )<br/>   \u00a0;<br/>\u00a0<br/>fasta</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">for line in eachline(\"data/fasta.txt\")<br/>    if startswith(line, '&gt;')<br/>        print(STDOUT, \"\\n$(line[2:end]): \")<br/>    else<br/>        print(STDOUT, \"$line\")<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun checkNoSpaces<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span> <span class=\"sy0\">!</span>in s <span class=\"sy0\">&amp;&amp;</span> <span class=\"st0\">'<span class=\"es1\">\\t</span>'</span> <span class=\"sy0\">!</span>in s<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> Scanner<span class=\"br0\">(</span>File<span class=\"br0\">(</span><span class=\"st0\">\"input.fasta\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>first<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"${line.substring(1)}: \"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Error\u00a0: File does not begin with '&gt;'\"</span><span class=\"br0\">)</span><br/>            break<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>checkNoSpaces<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Error\u00a0: Sequence contains space(s)\"</span><span class=\"br0\">)</span><br/>            break<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    sc.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 24, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> file <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> data <span class=\"sy0\">=</span> file<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"st0\">\"*a\"</span><span class=\"br0\">)</span><br/>file<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> output <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> key <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>\u00a0<br/><span class=\"co1\">-- iterate through lines</span><br/><span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> data<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"(.-)<span class=\"es1\">\\r</span>?<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> line<span class=\"sy0\">:</span>match<span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"line contained space\"</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">elseif</span> line<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"&gt;\"</span> <span class=\"kw1\">then</span><br/>\t\tkey <span class=\"sy0\">=</span> line<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">-- if key already exists, append to the previous input</span><br/>\t\toutput<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> output<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">elseif</span> key <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>\t\toutput<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> output<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">..</span> line<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- print result</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>k<span class=\"sy0\">..</span><span class=\"st0\">\": \"</span><span class=\"sy0\">..</span>v<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "OCaml", "loc": 42, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"co1\">(* This program reads from the standard input and writes to standard output.<br/> * Examples of use:<br/> *    $ ocaml fasta.ml &lt; fasta_file.txt<br/> *    $ ocaml fasta.ml &lt; fasta_file.txt &gt; my_result.txt<br/> *<br/> * The FASTA file is assumed to have a specific format, where the first line<br/> * contains a label in the form of '&gt;blablabla', i.e. with a '&gt;' as the first<br/> * character.<br/> *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> labelstart <span class=\"sy0\">=</span> <span class=\"sy0\">'&gt;'</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_label s <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> labelstart<br/><span class=\"kw1\">let</span> get_label s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub s <span class=\"nu0\">1</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> read_in channel <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> channel <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>trim<br/>\u00a0<br/><span class=\"kw1\">let</span> print_fasta chan <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> doloop currlabel line <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> is_label line <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">if</span> currlabel <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">let</span> newlabel <span class=\"sy0\">=</span> get_label line <span class=\"kw1\">in</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"br0\">(</span>newlabel <span class=\"sy0\">^</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        doloop newlabel <span class=\"br0\">(</span>read_in chan<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> line<span class=\"sy0\">;</span><br/>        doloop currlabel <span class=\"br0\">(</span>read_in chan<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">match</span> read_in chan <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> line <span class=\"kw1\">when</span> is_label line <span class=\"sy0\">-&gt;</span> doloop <span class=\"st0\">\"\"</span> line<br/>    <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"Badly formatted FASTA file?\"</span><br/>  <span class=\"kw1\">with</span><br/>    End_of_file <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  print_fasta <span class=\"kw1\">stdin</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 105, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Class FASTA_MACHINE {<br/>            Events \"GetBuffer\", \"header\", \"DataLine\", \"Quit\"<br/>      Public:<br/>            Module Run {<br/>                  Const lineFeed$=chr$(13)+chr$(10)<br/>                  Const WhiteSpace$=\" \"+chr$(9)+chrcode$(160)<br/>                  Def long state=1, idstate=1<br/>                  Def boolean Quit=False<br/>                  Def Buf$, waste$, Packet$<br/>            GetNextPacket:<br/>                        Call Event \"Quit\", &amp;Quit<br/>                        If Quit then exit<br/>                        Call Event \"GetBuffer\", &amp;Packet$<br/>                        Buf$+=Packet$<br/>                        If len(Buf$)=0 Then exit<br/>                        On State Goto GetStartIdentifier, GetIdentifier, GetStartData, GetData, GetStartIdentifier2<br/>                        exit<br/>            GetStartIdentifier:<br/>                        waste$=rightpart$(Buf$, \"&gt;\")<br/>            GetStartIdentifier2:<br/>                        If len(waste$)=0 Then waste$=rightpart$(Buf$, \";\")\u00a0: idstate=2<br/>                        If len(waste$)=0 Then idstate=1\u00a0: Goto GetNextPacket ' we have to read more<br/>                        buf$=waste$<br/>                        state=2            <br/>            GetIdentifier:<br/>                        If Len(Buf$)=len(lineFeed$) then {<br/>                              if buf$&lt;&gt;lineFeed$ then Goto GetNextPacket <br/>                              waste$=\"\"<br/>                        } Else {<br/>                              if instr(buf$, lineFeed$)=0 then Goto GetNextPacket<br/>                              waste$=rightpart$(Buf$, lineFeed$)<br/>                          }<br/>                        If idstate=2 Then {<br/>                            idstate=1<br/>                            \\\\ it's a comment, drop it<br/>                            state=1<br/>                            Goto GetNextPacket<br/>                        } Else Call Event \"header\", filter$(leftpart$(Buf$,lineFeed$), WhiteSpace$)<br/>                        Buf$=waste$<br/>                        State=3<br/>            GetStartData:<br/>                        while left$(buf$, 2)=lineFeed$ {buf$=Mid$(buf$,3)}<br/>                        waste$=Leftpart$(Buf$, lineFeed$)<br/>                        If len(waste$)=0 Then  Goto GetNextPacket ' we have to read more<br/>                        waste$=Filter$(waste$,WhiteSpace$)<br/>                        Call Event \"DataLine\", leftpart$(Buf$,lineFeed$)<br/>                        Buf$=Rightpart$(Buf$,lineFeed$)<br/>                        state=4<br/>            GetData:<br/>                        while left$(buf$, 2)=lineFeed$ {buf$=Mid$(buf$,3)}<br/>                        waste$=Leftpart$(Buf$, lineFeed$)<br/>                        If len(waste$)=0 Then  Goto GetNextPacket ' we have to read more<br/>                        If Left$(waste$,1)=\";\" Then wast$=\"\": state=5\u00a0: Goto GetStartIdentifier2<br/>                        If Left$(waste$,1)=\"&gt;\" Then state=1\u00a0: Goto GetStartIdentifier<br/>                        waste$=Filter$(waste$,WhiteSpace$)<br/>                        Call Event \"DataLine\", waste$<br/>                        Buf$=Rightpart$(Buf$,lineFeed$)<br/>                        Goto GetNextPacket<br/>            }     <br/>      }<br/>      Group WithEvents K=FASTA_MACHINE()<br/>      Document Final$, Inp$<br/>\u00a0<br/>      \\\\ In documents, \"=\"\" used for append data. Final$=\"append this\"<br/>      Const NewLine$=chr$(13)+chr$(10)<br/>      Const Center=2<br/>      \\\\ Event's Functions<br/>      Function K_GetBuffer (New &amp;a$) {<br/>            Input \"IN:\", a$<br/>            inp$=a$+NewLine$<br/>            while right$(a$, 1)=\"\\\" {<br/>                  Input \"IN:\", b$<br/>                  inp$=b$+NewLine$<br/>                  if b$=\"\" then b$=\"n\" <br/>                  a$+=b$<br/>            }<br/>            a$= replace$(\"\\N\",\"\\n\", a$)<br/>            a$= replace$(\"\\n\",NewLine$, a$)<br/>      }<br/>      Function K_header (New a$) {<br/>            iF Doc.Len(Final$)=0 then {<br/>                  Final$=a$+\": \"<br/>            } Else Final$=Newline$+a$+\": \"<br/>      }<br/>      Function K_DataLine (New a$) {<br/>            Final$=a$<br/>      }<br/>      Function K_Quit (New &amp;q) {<br/>            q=keypress(1) <br/>      }<br/>      Cls , 0<br/>      Report Center, \"FASTA Format\"<br/>      Report \"Simulate input channel in packets (\\n for new line). Use empty input to exit after new line, or press left mouse button and Enter to quit. Use\u00a0; to write comments. Use &gt; to open a title\"<br/>      Cls, row  ' scroll from current row<br/>      K.Run<br/>      Cls<br/>      Report Center, \"Input File\"<br/>      Report Inp$<br/>      Report Center, \"Output File\"<br/>      Report Final$<br/>}<br/>checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">ImportString[\"&gt;Rosetta_Example_1<br/> THERECANBENOSPACE<br/> &gt;Rosetta_Example_2<br/> THERECANBESEVERAL<br/> LINESBUTTHEYALLMUST<br/> BECONCATENATED<br/> \", \"FASTA\"]</pre>"}, {"lang": "Pascal", "loc": 41, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> FASTA_Format<span class=\"sy1\">;</span><br/><span class=\"co1\">// FPC 3.0.2</span><br/><span class=\"kw1\">var</span> InF<span class=\"sy1\">,</span><br/>    OutF<span class=\"sy1\">:</span> Text<span class=\"sy1\">;</span><br/>    ch<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>    First<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy3\">=</span><span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>    InDef<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy3\">=</span><span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Assign<span class=\"br0\">(</span>InF<span class=\"sy1\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Reset<span class=\"br0\">(</span>InF<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Assign<span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Rewrite<span class=\"br0\">(</span>OutF<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw3\">Eof</span><span class=\"br0\">(</span>InF<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Read</span><span class=\"br0\">(</span>InF<span class=\"sy1\">,</span>ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">Case</span> Ch <span class=\"kw1\">of</span><br/>      <span class=\"st0\">'&gt;'</span><span class=\"sy1\">:</span> <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>First<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>              <span class=\"kw3\">Write</span><span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"re1\">#13</span><span class=\"re1\">#10</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>              First<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>            InDef<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"re1\">#13</span><span class=\"sy1\">:</span> <span class=\"kw1\">Begin</span><br/>               <span class=\"kw1\">if</span> InDef <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">begin</span><br/>                 InDef<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw3\">Write</span><span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"st0\">': '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>               Ch<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"re1\">#0</span><span class=\"sy1\">;</span><br/>             <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"re1\">#10</span><span class=\"sy1\">:</span> ch<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"re1\">#0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span>Ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>OutF<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>InF<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$fasta_example</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"st_h\">'END_FASTA_EXAMPLE'</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&gt;</span>Rosetta_Example_1<br/>THERECANBENOSPACE<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED<br/>END_FASTA_EXAMPLE<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$num_newlines</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$fasta_example</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"co2\">/\\A\\&gt;(.*)/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> x <span class=\"re0\">$num_newlines</span><span class=\"sy0\">,</span> <span class=\"co3\">$1</span><span class=\"sy0\">,</span> <span class=\"st_h\">': '</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$num_newlines</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">grammar</span> FASTA <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">rule</span> TOP    <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>entry<span class=\"sy0\">&gt;+</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">rule</span> entry  <span class=\"br0\">{</span> \\<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>title<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>sequence<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> title <span class=\"br0\">{</span> <span class=\"sy0\">&lt;.</span><span class=\"me1\">alnum</span><span class=\"sy0\">&gt;+</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> sequence <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"sy0\">&lt;.</span><span class=\"me1\">alnum</span><span class=\"sy0\">&gt;+</span> <span class=\"br0\">)</span><span class=\"sy0\">+</span> <span class=\"sy0\">%</span> \\n <span class=\"br0\">{</span> make <span class=\"co3\">$0</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>FASTA<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"sy0\">:</span> q<span class=\"sy0\">:</span>to <span class=\"co2\">/\u00a7/</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&gt;</span>Rosetta_Example_1<br/>THERECANBENOSPACE<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED<br/>\u00a7<br/>\u00a0<br/><span class=\"kw1\">for</span> $<span class=\"sy0\">/&lt;</span>entry<span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"sy0\">~.&lt;</span>title<span class=\"sy0\">&gt;,</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.&lt;</span>sequence<span class=\"sy0\">&gt;.</span><span class=\"me1\">made</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de fasta (F)<br/>   (in F<br/>      (while (from \"&gt;\")<br/>         (prin (line T) \": \")<br/>         (until (or (= \"&gt;\" (peek)) (eof))<br/>            (prin (line T)) )<br/>         (prinl) ) ) )<br/>(fasta \"fasta.dat\")</pre>"}, {"lang": "PowerShell", "loc": 23, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"st0\">'<br/>&gt;Rosetta_Example_1<br/>THERECANBENOSPACE<br/>&gt;Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED<br/>'</span><span class=\"sy0\">@</span><br/>\u00a0<br/><span class=\"re0\">$lines</span> <span class=\"sy0\">=</span> <span class=\"re0\">$file</span>.Replace<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"~\"</span><span class=\"br0\">)</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>.<span class=\"kw3\">ForEach</span><span class=\"br0\">(</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.TrimEnd<span class=\"br0\">(</span><span class=\"st0\">\"~\"</span><span class=\"br0\">)</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>StringSplitOptions<span class=\"br0\">]</span>::RemoveEmptyEntries<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> PSObject<br/>\u00a0<br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span> <span class=\"kw3\">in</span> <span class=\"re0\">$lines</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"re0\">$value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$line</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\"~\"</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"kw3\">ForEach</span><span class=\"br0\">(</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Replace<span class=\"br0\">(</span><span class=\"st0\">\"~\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$output</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-MemberType</span> NoteProperty <span class=\"kw5\">-Name</span> <span class=\"re0\">$name</span> <span class=\"kw5\">-Value</span> <span class=\"re0\">$value</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$output</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-List</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 29, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Define</span> Hdl_File.i, <br/>       Frm_File.i,<br/>       c.c,         <br/>       header.b<br/>\u00a0<br/>Hdl_File<span class=\"sy0\">=</span><span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span>#PB_Any,<span class=\"st0\">\"c:\\code_pb\\rosettacode\\data\\FASTA_TEST.txt\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">IsFile</span><span class=\"br0\">(</span>Hdl_File<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">End</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>Frm_File<span class=\"sy0\">=</span><span class=\"kw2\">ReadStringFormat</span><span class=\"br0\">(</span>Hdl_File<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"FASTA format\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span>Hdl_File<span class=\"br0\">)</span><br/>    c<span class=\"sy0\">=</span><span class=\"kw2\">ReadCharacter</span><span class=\"br0\">(</span>Hdl_File,Frm_File<span class=\"br0\">)</span>  <br/>    <span class=\"kw1\">Select</span> c<br/>      <span class=\"kw1\">Case</span> '<span class=\"sy0\">&gt;</span>'<br/>        header<span class=\"sy0\">=</span>#True<br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Case</span> #LF, #CR<br/>        <span class=\"kw1\">If</span> header<br/>          <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>          header<span class=\"sy0\">=</span>#False        <br/>        <span class=\"kw1\">EndIf</span>      <br/>      <span class=\"kw1\">Default</span>      <br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndSelect</span>      <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span>Hdl_File<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>   <br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> io<br/>\u00a0<br/>FASTA<span class=\"sy0\">=</span><span class=\"st0\">'''<span class=\"es0\">\\</span><br/>&gt;Rosetta_Example_1<br/>THERECANBENOSPACE<br/>&gt;Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED'''</span><br/>\u00a0<br/>infile <span class=\"sy0\">=</span> io.<span class=\"kw3\">StringIO</span><span class=\"br0\">(</span>FASTA<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fasta_parse<span class=\"br0\">(</span>infile<span class=\"br0\">)</span>:<br/>    key <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> infile:<br/>        <span class=\"kw1\">if</span> line.<span class=\"me1\">startswith</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> key:<br/>                <span class=\"kw1\">yield</span> key<span class=\"sy0\">,</span> val<br/>            key<span class=\"sy0\">,</span> val <span class=\"sy0\">=</span> line<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>.<span class=\"me1\">rstrip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/>        <span class=\"kw1\">elif</span> key:<br/>            val +<span class=\"sy0\">=</span> line.<span class=\"me1\">rstrip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> key:<br/>        <span class=\"kw1\">yield</span> key<span class=\"sy0\">,</span> val<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%s:\u00a0%s'</span>\u00a0% keyval <span class=\"kw1\">for</span> keyval <span class=\"kw1\">in</span> fasta_parse<span class=\"br0\">(</span>infile<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(let loop ([m #t])<br/>  (when m<br/>    (when (regexp-try-match #rx\"^&gt;\" (current-input-port))<br/>      (unless (eq? #t m) (newline))<br/>      (printf \"~a: \" (read-line)))<br/>    (loop (regexp-match #rx\"\\n\" (current-input-port) 0 #f<br/>                        (current-output-port)))))<br/>(newline)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reads a (bio-informational)  FASTA  file  and  displays the contents.    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> iFID <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*iFID:  the input file to be read.    */</span><br/><span class=\"kw1\">if</span> iFID==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> iFID=<span class=\"st0\">'FASTA.IN'</span>                <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw2\">name</span>=                                            <span class=\"coMULTI\">/*the name of an output file (so far). */</span><br/>$=                                               <span class=\"coMULTI\">/*the value of the output file's stuff.*/</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                  <span class=\"coMULTI\">/*process the  FASTA  file contents.   */</span><br/>     x=<span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span>, <span class=\"st0\">'T'</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*read a line (a record) from the file,*/</span><br/>                                                 <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 and strip trailing blanks. */</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'&gt;'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>                              <span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw2\">name</span><span class=\"st0\">':'</span>  $<br/>                              <span class=\"kw2\">name</span>=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,  <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                              $=<br/>                              <span class=\"kw3\">end</span><br/>                         <span class=\"kw3\">else</span> $=$ <span class=\"sy0\">||</span> x<br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2193]  show output of last file used. */</span><br/><span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw2\">name</span><span class=\"st0\">':'</span>  $                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: FAST format<br/>\u00a0<br/>a = \"&gt;Rosetta_Example_1<br/>THERECANBENOSPACE<br/>&gt;Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED\"<br/>\u00a0<br/>i = 1<br/>while i &lt;= len(a)<br/>      if substr(a,i,17) = \"&gt;Rosetta_Example_\"  <br/>         see nl <br/>         see substr(a,i,18) + \": \" + nl<br/>         i = i + 17<br/>      else<br/>         if ascii(substr(a,i,1)) &gt; 20 <br/>            see a[i] <br/>         ok<br/>      ok<br/>      i = i + 1<br/>end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> fasta_format<span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>  out, text = <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"st0\">\"\"</span><br/>  strings.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == <span class=\"st0\">'&gt;'</span><br/>      out <span class=\"sy0\">&lt;&lt;</span> text <span class=\"kw1\">unless</span> text.<span class=\"me1\">empty</span>?<br/>      text = line<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span><br/>    <span class=\"kw1\">else</span><br/>      text <span class=\"sy0\">&lt;&lt;</span> line<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  out <span class=\"sy0\">&lt;&lt;</span> text <span class=\"kw1\">unless</span> text.<span class=\"me1\">empty</span>?<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>data = <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">'EOS'</span><br/><span class=\"sy0\">&gt;</span>Rosetta_Example_1<br/>THERECANBENOSPACE<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED<br/>EOS<br/>\u00a0<br/><span class=\"kw3\">puts</span> fasta_format<span class=\"br0\">(</span>data<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">a$ = \"&gt;Rosetta_Example_1<br/>THERECANBENOSPACE<br/>&gt;Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED\"<br/>\u00a0<br/>i = 1<br/>while i &lt;= len(a$)<br/>  if mid$(a$,i,17) = \"&gt;Rosetta_Example_\" then <br/>    print <br/>    print mid$(a$,i,18);\": \";<br/>    i = i + 17<br/>   else<br/>    if asc(mid$(a$,i,1)) &gt; 20 then print mid$(a$,i,1);<br/>  end if<br/>  i = i + 1<br/>wend</pre>"}, {"lang": "Rust", "loc": 65, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::env;<br/>use std::io::{BufReader, Lines};<br/>use std::io::prelude::*;<br/>use std::fs::File;<br/>\u00a0<br/>fn main() {<br/>    let args: Vec&lt;String&gt; = env::args().collect();<br/>    let f = File::open(&amp;args[1]).unwrap();<br/>    for line in FastaIter::new(f) {<br/>        println!(\"{}\", line);<br/>    }<br/>}<br/>\u00a0<br/>struct FastaIter&lt;T&gt; {<br/>    buffer_lines: Lines&lt;BufReader&lt;T&gt;&gt;,<br/>    current_name: Option&lt;String&gt;,<br/>    current_sequence: String<br/>}<br/>\u00a0<br/>impl&lt;T: Read&gt; FastaIter&lt;T&gt; {<br/>    fn new(file: T) -&gt; FastaIter&lt;T&gt; {<br/>        FastaIter { buffer_lines: BufReader::new(file).lines(),<br/>                    current_name: None,<br/>                    current_sequence: String::new() }<br/>    }<br/>}<br/>\u00a0<br/>impl&lt;T: Read&gt; Iterator for FastaIter&lt;T&gt; {<br/>    type Item = String;<br/>\u00a0<br/>    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {<br/>        while let Some(l) = self.buffer_lines.next() {<br/>            let line = l.unwrap();<br/>            if line.starts_with(\"&gt;\") {<br/>                if self.current_name.is_some() {                    <br/>                    let mut res = String::new();<br/>                    res.push_str(self.current_name.as_ref().unwrap());<br/>                    res.push_str(\": \");<br/>                    res.push_str(&amp;self.current_sequence);<br/>                    self.current_name = Some(String::from(&amp;line[1..]));<br/>                    self.current_sequence.clear();<br/>                    return Some(res);<br/>                } else {<br/>                    self.current_name = Some(String::from(&amp;line[1..]));<br/>                    self.current_sequence.clear();<br/>                }<br/>                continue;<br/>            }<br/>            self.current_sequence.push_str(line.trim());<br/>        }<br/>        if self.current_name.is_some() {<br/>            let mut res = String::new();<br/>            res.push_str(self.current_name.as_ref().unwrap());<br/>            res.push_str(\": \");<br/>            res.push_str(&amp;self.current_sequence);<br/>            self.current_name = None;<br/>            self.current_sequence.clear();<br/>            self.current_sequence.shrink_to_fit();<br/>            return Some(res);<br/>        }<br/>        None<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ReadFastaFile <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Scanner<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span><span class=\"st0\">\"test.fasta\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNextLine</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span>.<span class=\"me1\">trim</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"%s: \"</span>, line.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> print<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"~~~+~~~\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 16, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme file<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">with-input-from-file</span> <span class=\"co1\">; reads text from named file, one line at a time</span><br/>  <span class=\"st0\">\"fasta.txt\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>first<span class=\"sy0\">-</span>line? #t #f<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>line <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> line<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">char=?</span> #\\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> line <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; found a name</span><br/>             <span class=\"br0\">(</span>unless first<span class=\"sy0\">-</span>line? <span class=\"co1\">; no newline on first name</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-copy</span> line <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"co1\">; display the string directly</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">display</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">func fasta_format<span class=\"br0\">(</span>strings<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var out = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var text = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> <span class=\"br0\">(</span>strings.<span class=\"me1\">lines</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">begins_with</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            text.<span class=\"me1\">len</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>out <span class=\"sy0\">&lt;&lt;</span> text<span class=\"br0\">)</span><br/>            text = line.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">': '</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            text <span class=\"sy0\">+</span>= line<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    text.<span class=\"me1\">len</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>out <span class=\"sy0\">&lt;&lt;</span> text<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> out<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fasta_format<span class=\"br0\">(</span>DATA.<span class=\"me1\">slurp</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span><br/>\u00a0<br/>__DATA__<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_1<br/>THERECANBENOSPACE<br/><span class=\"sy0\">&gt;</span>Rosetta_Example_2<br/>THERECANBESEVERAL<br/>LINESBUTTHEYALLMUST<br/>BECONCATENATED</pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fastaReader <span class=\"br0\">{</span><span class=\"kw3\">filename</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> sep <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$f</span> line<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> match <span class=\"sy0\">&gt;*</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"$sep[string range $line 1 end]: \"</span><br/>\t    <span class=\"kw1\">set</span> sep <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"re0\">$line</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fastaReader ./rosettacode.fas</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn fasta(data){ // a lazy cruise through a FASTA file<br/>   fcn(w){      // one string at a time, --&gt;False garbage at front of file<br/>      line:=w.next().strip();<br/>      if(line[0]==\"&gt;\") w.pump(line[1,*]+\": \",'wrap(l){<br/>         if(l[0]==\"&gt;\") { w.push(l); Void.Stop } else l.strip()<br/>      })<br/>   }.fp(data.walker())\u00a0: Utils.Helpers.wap(_);<br/>}</pre>"}]}