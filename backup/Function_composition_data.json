{"task": "Function_composition", "blocks": [{"lang": "ActionScript", "loc": 6, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> compose<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, g:<span class=\"kw2\">Function</span><span class=\"br0\">)</span>:<span class=\"kw2\">Function</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span>x:<span class=\"kw3\">Object</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> test<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"kw3\">atan</span>, <span class=\"kw3\">Math</span>.<span class=\"kw3\">tan</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 13, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Argument <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;      <br/><span class=\"kw3\">package</span> Functions <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Primitive_Operation <span class=\"kw1\">is</span> <span class=\"kw2\">not</span> <span class=\"kw3\">null</span><br/>      <span class=\"kw3\">access</span> <span class=\"kw3\">function</span> <span class=\"br0\">(</span>Value\u00a0: Argument<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Argument;<br/>   <span class=\"kw3\">type</span> Func <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left\u00a0: Func; Right\u00a0: Argument<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Argument;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left\u00a0: Func; Right\u00a0: Primitive_Operation<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Func;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Primitive_Operation<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Func;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Func<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Func;<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Func <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Primitive_Operation;<br/><span class=\"kw1\">end</span> Functions;</pre>"}, {"lang": "Aikido", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import math<br/>\u00a0<br/>function compose (f, g) {<br/>    return function (x) { return f(g(x)) }<br/>}<br/>\u00a0<br/>var func = compose(Math.sin, Math.asin)<br/>println (func(0.5))   //  0.5<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 10, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> F <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># ALGOL 68 is strong typed #</span><br/>\u00a0<br/><span class=\"coMULTI\"># As a procedure for real to real functions #</span><br/><span class=\"kw4\">PROC</span> compose <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> g<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"br0\">(</span>F<span class=\"sy1\">,</span>F<span class=\"br0\">)</span>F O <span class=\"sy1\">=</span> compose<span class=\"sy1\">;</span> <span class=\"coMULTI\"># or an OPerator that can be overloaded #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Example use: #</span><br/>F <span class=\"kw24\">sin</span> <span class=\"kw24\">arc sin</span> <span class=\"sy1\">=</span> compose<span class=\"br0\">(</span><span class=\"kw24\">sin</span><span class=\"sy1\">,</span> <span class=\"kw24\">arc sin</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw24\">sin</span> <span class=\"kw24\">arc sin</span><span class=\"br0\">(</span><span class=\"re1\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw24\">sin</span> O <span class=\"kw24\">arc sin</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re1\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AntLang", "loc": 4, "block": "<pre class=\"text highlighted_source\">/Apply g to exactly one argument<br/>compose1: {f: x; g: y; {f[g[x]]}}<br/>/Extra: apply to multiple arguments<br/>compose: {f: x; g: y; {f[g apply args]}}</pre>"}, {"lang": "AppleScript", "loc": 24, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- Compose two functions where each function is</span><br/><span class=\"co1\">-- a script object with a call(x) handler.</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            f<span class=\"co2\">'</span>s call<span class=\"br0\">(</span>g<span class=\"co2\">'</span>s call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> call<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"kw3\">script</span> sqrt<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> twice<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> x<br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>compose<span class=\"br0\">(</span>sqrt, twice<span class=\"br0\">)</span>'s call<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- Result: 8.0</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">10 F$ = \"SIN\"<br/>20 DEF FN A(P) = ATN(P/SQR(-P*P+1))<br/>30 G$ = \"FN A\"<br/>40 GOSUB 100\"COMPOSE<br/>50 SA$ = E$<br/>\u00a0<br/>60 X = .5\u00a0: E$ = SA$<br/>70 GOSUB 200\"EXEC<br/>80 PRINT R<br/>90 END<br/>\u00a0<br/>100 E$ = F$ + \"(\" + G$ + \"(X))\"\u00a0: RETURN\u00a0: REMCOMPOSE F$ G$<br/>\u00a0<br/>200 D$ = CHR$(4)\u00a0: FI$ = \"TEMPORARY.EX\"\u00a0: M$ = CHR$(13)<br/>210 PRINT D$\"OPEN\"FI$M$D$\"CLOSE\"FI$M$D$\"DELETE\"FI$<br/>220 PRINT D$\"OPEN\"FI$M$D$\"WRITE\"FI$<br/>230 PRINT \"CALL-998:CALL-958:R=\"E$\":CONT\"<br/>240 PRINT D$\"CLOSE\"FI$M$D$\"EXEC\"FI$:CALL-998:END:RETURN</pre>"}, {"lang": "Argile", "loc": 43, "block": "<pre class=\"text highlighted_source\">use std, math<br/>\u00a0<br/>let my_asin = new Function (.:&lt;any,real x&gt;:. -&gt; real {asin x})<br/>let my__sin = new Function (.:&lt;any,real x&gt;:. -&gt; real { sin x})<br/>let sinasin = my__sin o my_asin<br/>print sin asin 0.5<br/>print *my__sin 0.0<br/>print *sinasin 0.5<br/>~my_asin<br/>~my__sin<br/>~sinasin<br/>\u00a0<br/>=: &lt;Function f&gt; o &lt;Function g&gt;\u00a0:= -&gt; Function {compose f g}<br/>\u00a0<br/>.:compose &lt;Function f, Function g&gt;:. -&gt; Function<br/>  use array<br/>  let d = (new array of 2 Function)<br/>  (d[0]) = f\u00a0; (d[1]) = g<br/>  let c = new Function (.:&lt;array of Function fg, real x&gt;:. -&gt; real {<br/>    *fg[0]( *fg[1](x) )<br/>  }) (d)<br/>  c.del = .:&lt;any&gt;:.{free any}<br/>  c<br/>\u00a0<br/>class Function<br/>  function(any)(real)-&gt;(real)\tfunc<br/>  any\t\t\t\tdata<br/>  function(any)\t\t\tdel<br/>\u00a0<br/>=: * &lt;Function f&gt; &lt;real x&gt;\u00a0:= -&gt; real<br/>   Cgen \"(*(\"(f.func)\"))(\"(f.data)\", \"(x)\")\"<br/>\u00a0<br/>.: del Function &lt;Function f&gt;\u00a0:.<br/>   unless f.del is nil<br/>     call f.del with f.data<br/>   free f<br/>=: ~ &lt;Function f&gt;\u00a0:= {del Function f}<br/>\u00a0<br/>.: new Function &lt;function(any)(real)-\\&gt;real func&gt; (&lt;any data&gt;):. -&gt; Function<br/>   let f = new Function<br/>   f.func = func<br/>   f.data = data<br/>   f</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% compose<span class=\"br0\">(</span><span class=\"st0\">\"sin\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"cos\"</span><span class=\"sy0\">,</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><br/>\u00a0<br/>compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; function composition</span><br/>   <span class=\"kw1\">Return</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span><span class=\"re0\">%g%</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      REM Create some functions for testing:<br/>      DEF FNsqr(a) = SQR(a)<br/>      DEF FNabs(a) = ABS(a)<br/>\u00a0<br/>      REM Create the function composition:<br/>      SqrAbs = FNcompose(FNsqr(), FNabs())<br/>\u00a0<br/>      REM Test calling the composition:<br/>      x = -2\u00a0: PRINT\u00a0; x, FN(SqrAbs)(x)<br/>      END<br/>\u00a0<br/>      DEF FNcompose(RETURN f%, RETURN g%)<br/>      LOCAL f$, p%\u00a0: DIM p% 7\u00a0: p%!0 = f%\u00a0: p%!4 = g%<br/>      f$ = \"(x)=\" + CHR$&amp;A4 + \"(&amp;\" + STR$~p% + \")(\" + \\<br/>      \\             CHR$&amp;A4 + \"(&amp;\" + STR$~(p%+4) + \")(x))\"<br/>      DIM p% LEN(f$) + 4\u00a0: $(p%+4) = f$\u00a0:\u00a0!p% = p%+4<br/>      = p%</pre>"}, {"lang": "Bori", "loc": 9, "block": "<pre class=\"text highlighted_source\">double sin (double v)\t{ return Math.sin(v); }<br/>double asin (double v)\t{ return Math.asin(v); }<br/>Var compose (Func f, Func g, double d)\t{ return f(g(d)); }<br/>\u00a0<br/>void button1_onClick (Widget widget)<br/>{<br/>\tdouble d = compose(sin, asin, 0.5);<br/>\tlabel1.setText(d.toString(9));<br/>}</pre>"}, {"lang": "Brat", "loc": 7, "block": "<pre class=\"text highlighted_source\">compose = { f, g | { x | f g x } }<br/>\u00a0<br/>#Test<br/>add1 = { x | x + 1 }<br/>double = { x | x * 2 }<br/>b = compose(-&gt;double -&gt;add1)<br/>p b 1 #should print 4</pre>"}, {"lang": "C", "loc": 64, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* generic interface for functors from double to double */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> double_to_double <span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>fn<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> double_to_double <span class=\"sy0\">*,</span> <span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> double_to_double<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define CALL(f, x) f-&gt;fn(f, x)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* functor returned by compose */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> compose_functor <span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>fn<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> compose_functor <span class=\"sy0\">*,</span> <span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  double_to_double <span class=\"sy0\">*</span>f<span class=\"sy0\">;</span><br/>  double_to_double <span class=\"sy0\">*</span>g<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> compose_functor<span class=\"sy0\">;</span><br/><span class=\"coMULTI\">/* function to be used in \"fn\" in preceding functor */</span><br/><span class=\"kw4\">double</span> compose_call<span class=\"br0\">(</span>compose_functor <span class=\"sy0\">*</span>this<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> CALL<span class=\"br0\">(</span>this<span class=\"sy0\">-&gt;</span>f<span class=\"sy0\">,</span> CALL<span class=\"br0\">(</span>this<span class=\"sy0\">-&gt;</span>g<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"coMULTI\">/* returns functor that is the composition of functors<br/>   f &amp; g. caller is responsible for deallocating memory */</span><br/>double_to_double <span class=\"sy0\">*</span>compose<span class=\"br0\">(</span>double_to_double <span class=\"sy0\">*</span>f<span class=\"sy0\">,</span><br/>                          double_to_double <span class=\"sy0\">*</span>g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  compose_functor <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>compose_functor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  result<span class=\"sy0\">-&gt;</span>fn <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>compose_call<span class=\"sy0\">;</span><br/>  result<span class=\"sy0\">-&gt;</span>f <span class=\"sy0\">=</span> f<span class=\"sy0\">;</span><br/>  result<span class=\"sy0\">-&gt;</span>g <span class=\"sy0\">=</span> g<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>double_to_double <span class=\"sy0\">*</span><span class=\"br0\">)</span>result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* we can make functors for sin and asin by using <br/>   the following as \"fn\" in a functor */</span><br/><span class=\"kw4\">double</span> sin_call<span class=\"br0\">(</span>double_to_double <span class=\"sy0\">*</span>this<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">double</span> asin_call<span class=\"br0\">(</span>double_to_double <span class=\"sy0\">*</span>this<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/asin.html\"><span class=\"kw3\">asin</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  double_to_double <span class=\"sy0\">*</span>my_sin <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>double_to_double<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  my_sin<span class=\"sy0\">-&gt;</span>fn <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>sin_call<span class=\"sy0\">;</span><br/>  double_to_double <span class=\"sy0\">*</span>my_asin <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>double_to_double<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  my_asin<span class=\"sy0\">-&gt;</span>fn <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>asin_call<span class=\"sy0\">;</span><br/>\u00a0<br/>  double_to_double <span class=\"sy0\">*</span>sin_asin <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span>my_sin<span class=\"sy0\">,</span> my_asin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> CALL<span class=\"br0\">(</span>sin_asin<span class=\"sy0\">,</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* prints \"0.500000\" */</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sin_asin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>my_sin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>my_asin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 35, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">// functor class to be returned by compose function</span><br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Fun1, <span class=\"kw2\">class</span> Fun2<span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">class</span> compose_functor <span class=\"sy4\">:</span><br/>  <span class=\"kw2\">public</span> std<span class=\"sy4\">::</span><span class=\"me2\">unary_function</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Fun2<span class=\"sy4\">::</span><span class=\"me2\">argument_type</span>,<br/>                             <span class=\"kw2\">typename</span> Fun1<span class=\"sy4\">::</span><span class=\"me2\">result_type</span><span class=\"sy1\">&gt;</span><br/><span class=\"br0\">{</span><br/><span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>  Fun1 f<span class=\"sy4\">;</span><br/>  Fun2 g<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  compose_functor<span class=\"br0\">(</span><span class=\"kw4\">const</span> Fun1<span class=\"sy3\">&amp;</span> _f, <span class=\"kw4\">const</span> Fun2<span class=\"sy3\">&amp;</span> _g<span class=\"br0\">)</span><br/>    <span class=\"sy4\">:</span> f<span class=\"br0\">(</span>_f<span class=\"br0\">)</span>, g<span class=\"br0\">(</span>_g<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">typename</span> Fun1<span class=\"sy4\">::</span><span class=\"me2\">result_type</span><br/>  operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw2\">typename</span> Fun2<span class=\"sy4\">::</span><span class=\"me2\">argument_type</span><span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// we wrap it in a function so the compiler infers the template arguments</span><br/><span class=\"co1\">// whereas if we used the class directly we would have to specify them explicitly</span><br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Fun1, <span class=\"kw2\">class</span> Fun2<span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">inline</span> compose_functor<span class=\"sy1\">&lt;</span>Fun1, Fun2<span class=\"sy1\">&gt;</span><br/>compose<span class=\"br0\">(</span><span class=\"kw4\">const</span> Fun1<span class=\"sy3\">&amp;</span> f, <span class=\"kw4\">const</span> Fun2<span class=\"sy3\">&amp;</span> g<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">return</span> compose_functor<span class=\"sy1\">&lt;</span>Fun1,Fun2<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> compose<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ptr_fun</span><span class=\"br0\">(</span><span class=\"sy4\">::</span><span class=\"kw3\">sin</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ptr_fun</span><span class=\"br0\">(</span><span class=\"sy4\">::</span><span class=\"kw3\">asin</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.5</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> outfunc <span class=\"sy0\">=</span> Composer<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Compose</span><span class=\"br0\">(</span>functA, functB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>outfunc<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Prints 100</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> functA<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> functB<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">class</span> Composer<span class=\"sy0\">&lt;</span>A, B, C<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Func<span class=\"sy0\">&lt;</span>C, A<span class=\"sy0\">&gt;</span> Compose<span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span>B, A<span class=\"sy0\">&gt;</span> a, Func<span class=\"sy0\">&lt;</span>C, B<span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">delegate</span><span class=\"br0\">(</span>C i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"br0\">(</span>b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compose <span class=\"br0\">[</span>f g<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Example</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> inc2 <span class=\"br0\">(</span>compose <span class=\"kw1\">inc</span> <span class=\"kw1\">inc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>inc2 <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints 7</span></pre>"}, {"lang": "CoffeeScript", "loc": 17, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>compose = <span class=\"br0\">(</span> f<span class=\"sy0\">,</span> g <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f g x<br/>\u00a0<br/><span class=\"co1\"># Example</span><br/>add2 = <span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>mul2 = <span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>mulFirst = compose add2<span class=\"sy0\">,</span> mul2<br/>addFirst = compose mul2<span class=\"sy0\">,</span> add2<br/>multiple = compose mul2<span class=\"sy0\">,</span> compose add2<span class=\"sy0\">,</span> mul2<br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"add2 2 #=&gt; #{ add2 2 }\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"mul2 2 #=&gt; #{ mul2 2 }\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"mulFirst 2 #=&gt; #{ mulFirst 2 }\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"addFirst 2 #=&gt; #{ addFirst 2 }\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"multiple 2 #=&gt; #{ multiple 2 }\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compose <span class=\"br0\">(</span>f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> compose<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> U<span class=\"sy0\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>U<span class=\"br0\">)</span> f<span class=\"sy0\">,</span><br/>                               <span class=\"kw2\">in</span> U <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> s <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 36, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> AnonCompose<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TFunc <span class=\"sy3\">=</span> reference <span class=\"kw1\">to</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Compose<span class=\"br0\">(</span>F<span class=\"sy1\">,</span> G<span class=\"sy1\">:</span> TFunc<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>  <span class=\"kw1\">begin</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"br0\">(</span>G<span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Func1<span class=\"sy1\">,</span> Func2<span class=\"sy1\">,</span> Func3<span class=\"sy1\">:</span> TFunc<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Func1<span class=\"sy1\">:</span><span class=\"sy3\">=</span><br/>    <span class=\"kw1\">function</span><span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>    <span class=\"kw1\">begin</span><br/>      Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Func2<span class=\"sy1\">:</span><span class=\"sy3\">=</span><br/>    <span class=\"kw1\">function</span><span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>    <span class=\"kw1\">begin</span><br/>      Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value <span class=\"sy3\">*</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Func3<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Compose<span class=\"br0\">(</span>Func1<span class=\"sy1\">,</span> Func2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>Func3<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>    <span class=\"co1\">// 36 = 6 * 3 * 2</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 3, "block": "<pre class=\"text highlighted_source\">compose f g:<br/>\tlabda:<br/>\t\tf g</pre>"}, {"lang": "Dylan", "loc": 3, "block": "<pre class=\"text highlighted_source\">define method compose(f,g)<br/>   method(x) f(g(x)) end<br/>end;</pre>"}, {"lang": "Ela", "loc": 1, "block": "<pre class=\"text highlighted_source\">let compose f g x = f (g x)</pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> x <span class=\"br0\">{</span> return f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; By decreasing order of performance</span><br/><span class=\"co1\">;; 1) user definition\u00a0: lambda and closure</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>ucompose f g <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span> f <span class=\"br0\">(</span> g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ucompose <span class=\"kw1\">sin</span> <span class=\"kw1\">cos</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span>\ud83d\udd12 \u03bb <span class=\"br0\">(</span>_x<span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g _x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; 2) built-in compose\u00a0: lambda</span><br/>\u00a0<br/><span class=\"br0\">(</span>compose <span class=\"kw1\">sin</span> <span class=\"kw1\">cos</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span>\u03bb <span class=\"br0\">(</span>_#<span class=\"sy0\">:</span><span class=\"me1\">g1002</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#apply-compose <span class=\"br0\">(</span>#list #cos #sin<span class=\"br0\">)</span> _#<span class=\"sy0\">:</span><span class=\"me1\">g1002</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; 3) compiled composition</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>sincos x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>sincos \u2192 <span class=\"br0\">(</span>\u03bb <span class=\"br0\">(</span>_x<span class=\"br0\">)</span> <span class=\"br0\">(</span>\u2b55\ufe0f #sin <span class=\"br0\">(</span>#cos _x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 1, "block": "<pre class=\"text highlighted_source\">compose f g x = f (g x)</pre>"}, {"lang": "Elena", "loc": 14, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>func1 extension op<br/>{<br/>    compose(BaseFunction1 f)<br/>        = (:x)(self(f(x))).<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var fg\u00a0:= (:x)(x + 1) compose(:x)(x * x).<br/>\u00a0<br/>    console printLine(fg(3)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def compose(f, g), do: fn(x) -&gt; f.(g.(x)) end<br/>\u00a0<br/>  def multicompose(fs), do: List.foldl(fs, fn(x) -&gt; x end, &amp;compose/2)<br/>end<br/>\u00a0<br/>sin_asin = RC.compose(&amp;:math.sin/1, &amp;:math.asin/1)<br/>IO.puts sin_asin.(0.5)<br/>\u00a0<br/>IO.puts RC.multicompose([&amp;:math.sin/1, &amp;:math.asin/1, fn x-&gt;1/x end]).(0.5)<br/>IO.puts RC.multicompose([&amp;(&amp;1*&amp;1), &amp;(1/&amp;1), &amp;(&amp;1*&amp;1)]).(0.5)</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compose <span class=\"br0\">(</span>f g<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>f <span class=\"br0\">(</span><span class=\"sy0\">,</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>func <span class=\"br0\">(</span>compose '<span class=\"nu0\">1</span>+ '<span class=\"nu0\">1</span>+<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> func <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span><br/><span class=\"nu0\">7</span></pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>compose<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> multicompose<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">compose</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">G</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multicompose</span><span class=\"br0\">(</span><span class=\"re5\">Fs</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> compose<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Fs</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> compose f g x <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">val</span> compose\u00a0: <span class=\"br0\">(</span><span class=\"st0\">'a -&gt; '</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">'c -&gt; '</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'c -&gt; '</span>b</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">( scratchpad ) [ 2 * ] [ 1 + ] compose .<br/>[ 2 * 1 + ]<br/>( scratchpad ) 4 [ 2 * ] [ 1 + ] compose call .<br/>9</pre>"}, {"lang": "Fantom", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Compose<br/>{<br/>  static |Obj -&gt; Obj| compose (|Obj -&gt; Obj| fn1, |Obj -&gt; Obj| fn2)<br/>  {<br/>    return |Obj x -&gt; Obj| { fn2 (fn1 (x)) }<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    double\u00a0:= |Int x -&gt; Int| { 2 * x }<br/>    |Int -&gt; Int| quad\u00a0:= compose(double, double)<br/>    echo (\"Double 3 = ${double(3)}\")<br/>    echo (\"Quadruple 3 = ${quad (3)}\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: compose ( xt1 xt2 -- xt3 )<br/>  &gt;r &gt;r\u00a0:noname<br/>     r&gt; compile,<br/>     r&gt; compile,<br/>     postpone\u00a0;<br/>;<br/>\u00a0<br/>' 2* ' 1+ compose  ( xt )<br/>3 swap execute .   \\ 7</pre>"}, {"lang": "Fortran", "loc": 81, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> functions_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">private</span> <span class=\"co1\">! all by default</span><br/>   <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span>,g<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>   pure <span class=\"kw1\">function</span>  f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>      f <span class=\"sy0\">=</span> <span class=\"kw4\">sin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> f<br/>\u00a0<br/>   pure <span class=\"kw1\">function</span>  g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">g</span><br/>      g <span class=\"sy0\">=</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> g<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> functions_module<br/>\u00a0<br/><span class=\"kw1\">module</span> compose_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">private</span> <span class=\"co1\">! all by default</span><br/>   <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">compose</span><br/>\u00a0<br/>   <span class=\"kw1\">interface</span><br/>      pure <span class=\"kw1\">function</span>  f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>         <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>         <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>         <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> f<br/>\u00a0<br/>      pure <span class=\"kw1\">function</span>  g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>         <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>         <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>         <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">g</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> g<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>   impure <span class=\"kw1\">function</span>  compose<span class=\"br0\">(</span>x, fi, gi<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">fi</span><br/>      <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">gi</span><br/>      <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">compose</span><br/>\u00a0<br/>      <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span>, <span class=\"kw3\">save</span> <span class=\"sy0\">::</span> <span class=\"me2\">fpi</span> <span class=\"sy0\">=</span>&gt; null<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>g<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span>, <span class=\"kw3\">save</span> <span class=\"sy0\">::</span> <span class=\"me2\">gpi</span> <span class=\"sy0\">=</span>&gt; null<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">present</span><span class=\"br0\">(</span>fi<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>gi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw1\">then</span><br/>         fpi <span class=\"sy0\">=</span>&gt; fi<br/>         gpi <span class=\"sy0\">=</span>&gt; gi<br/>         compose <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">return</span><br/>      <span class=\"kw1\">endif</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> associated<span class=\"br0\">(</span>fpi<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">error</span> <span class=\"kw1\">stop</span> <span class=\"st0\">\"fpi\"</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> associated<span class=\"br0\">(</span>gpi<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">error</span> <span class=\"kw1\">stop</span> <span class=\"st0\">\"gpi\"</span><br/>\u00a0<br/>      compose <span class=\"sy0\">=</span> fpi<span class=\"br0\">(</span>gpi<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> compose<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> compose_module<br/>\u00a0<br/><span class=\"kw1\">program</span> test_compose<br/>   <span class=\"kw3\">use</span> functions_module<br/>   <span class=\"kw3\">use</span> compose_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"prepare compose:\"</span>, compose<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, f,g<span class=\"br0\">)</span><br/>   write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"run compose:\"</span>, compose<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_compose<br/>\u00a0</pre>"}, {"lang": "Fortress", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  compose[\\A, B, C\\](f:A-&gt;B, g:B-&gt;C, i:Any): A-&gt;C = do<br/>    f(g(i))<br/>  end<br/>\u00a0<br/>  composed(i:RR64): RR64 = compose(sin, cos, i)<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 7, "block": "<pre class=\"text highlighted_source\">import math.{sin, asin}<br/>\u00a0<br/>def compose( f, g ) = x -&gt; f( g(x) )<br/>\u00a0<br/>sin_asin = compose( sin, asin )<br/>\u00a0<br/>println( sin_asin(0.5) )</pre>"}, {"lang": "GAP", "loc": 7, "block": "<pre class=\"text highlighted_source\">Composition\u00a0:= function(f, g)<br/>    return x -&gt; f(g(x));<br/>end;<br/>\u00a0<br/>h\u00a0:= Composition(x -&gt; x+1, x -&gt; x*x);<br/>h(5);<br/># 26</pre>"}, {"lang": "Go", "loc": 11, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Go doesn't have generics, but sometimes a type definition helps</span><br/><span class=\"co1\">// readability and maintainability.   This example is written to</span><br/><span class=\"co1\">// the following function type, which uses float64.</span><br/><span class=\"kw1\">type</span> ffType <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"co1\">// compose function requested by task</span><br/><span class=\"kw4\">func</span> compose<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> g ffType<span class=\"sy1\">)</span> ffType <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span>g<span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> times2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> plus1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> plus1_then_times2 <span class=\"sy0\">=</span> times2 <span class=\"sy0\">&lt;&lt;</span> plus1<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> times2_then_plus1 <span class=\"sy0\">=</span> times2 <span class=\"sy0\">&gt;&gt;</span> plus1<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> plus1_then_times2<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> times2_then_plus1<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">7</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">compose f g x <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span></pre>"}, {"lang": "Hy", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compose <span class=\"br0\">[</span>f g<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 2, "block": "<pre class=\"icon highlighted_source\">   x <span class=\"sy1\">@</span> f                      <span class=\"co1\"># use this syntax in Icon instead of the Unicon f(x) to call co-expressions</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">push</span><span class=\"br0\">(</span>fL <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,!</span>rfL<span class=\"br0\">)</span>  <span class=\"co1\"># use this instead of reverse(fL) as the Icon reverse applies only to strings</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">compose =: @</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Compose <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// Java doesn't have function type so we define an interface</span><br/>    <span class=\"co1\">// of function objects instead</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> Fun<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        B call<span class=\"br0\">(</span>A x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>A,B,C<span class=\"sy0\">&gt;</span> Fun<span class=\"sy0\">&lt;</span>A,C<span class=\"sy0\">&gt;</span> compose<span class=\"br0\">(</span><span class=\"kw1\">final</span> Fun<span class=\"sy0\">&lt;</span>B,C<span class=\"sy0\">&gt;</span> f, <span class=\"kw1\">final</span> Fun<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Fun<span class=\"sy0\">&lt;</span>A,C<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> C call<span class=\"br0\">(</span>A x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> f.<span class=\"me1\">call</span><span class=\"br0\">(</span>g.<span class=\"me1\">call</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Fun<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>,Double<span class=\"sy0\">&gt;</span> sin <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Fun<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>,Double<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> call<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        Fun<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>,Double<span class=\"sy0\">&gt;</span> asin <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Fun<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>,Double<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> call<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">asin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Fun<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>,Double<span class=\"sy0\">&gt;</span> sin_asin <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span>sin, asin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sin_asin.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"0.5\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">g f</pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># apply g first and then f<br/>def compose(f; g): g | f;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">@show (asin \u2218 sin)(0.5)</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">compose:{'[x;y]}</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun f<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/>fun g<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> x + <span class=\"nu0\">2</span><br/>\u00a0<br/>fun compose<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Int,  g<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Int  <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x  <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>   println<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"sy0\">::</span>f, <span class=\"sy0\">::</span>g<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compose <span class=\"br0\">(</span>f g<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f<br/>      <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compose <span class=\"br0\">(</span>funcs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">foldl</span> #'compose/<span class=\"nu0\">2</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>               funcs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> check <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>sin-asin <span class=\"br0\">(</span>compose #'math<span class=\"sy0\">:</span><span class=\"kw1\">sin</span>/<span class=\"nu0\">1</span> #'math<span class=\"sy0\">:</span><span class=\"me1\">asin</span>/<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>expected <span class=\"br0\">(</span>math<span class=\"sy0\">:</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span>math<span class=\"sy0\">:</span><span class=\"me1\">asin</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>compose-result <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> sin-asin <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>io<span class=\"sy0\">:</span><span class=\"me1\">format</span> '<span class=\"st0\">\"Expected answer: ~p~n\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> expected<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>io<span class=\"sy0\">:</span><span class=\"me1\">format</span> '<span class=\"st0\">\"Answer with compose: ~p~n\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> compose-result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 10, "block": "<pre class=\"text highlighted_source\">-- in some movie script<br/>----------------------------------------<br/>-- Composes 2 call-functions, returns a new call-function<br/>-- @param {symbol|instance} f<br/>-- @param {symbol|instance} g<br/>-- @return {instance}<br/>----------------------------------------<br/>on compose (f, g)<br/>  return script(\"Composer\").new(f, g)<br/>end</pre>"}, {"lang": "LOLCODE", "loc": 27, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> fx<span class=\"sy0\">,</span> <span class=\"kw1\">I HAS A</span> gx<br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I composin <span class=\"kw4\">YR</span> f <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> g<br/>    fx <span class=\"kw1\">R</span> f<span class=\"sy0\">,</span> gx <span class=\"kw1\">R</span> g<br/>    HOW <span class=\"kw2\">IZ</span> I composed <span class=\"kw4\">YR</span> x<br/>        <span class=\"kw1\">FOUND YR</span> I <span class=\"kw2\">IZ</span> fx <span class=\"kw4\">YR</span> I <span class=\"kw2\">IZ</span> gx <span class=\"kw4\">YR</span> x <span class=\"kw2\">MKAY</span> <span class=\"kw2\">MKAY</span><br/>    <span class=\"kw1\">IF U SAY SO</span><br/>    <span class=\"kw1\">FOUND YR</span> composed<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I incin <span class=\"kw4\">YR</span> num<br/>    <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> num <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I sqrin <span class=\"kw4\">YR</span> num<br/>    <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> num <span class=\"kw4\">AN</span> num<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> incsqrin <span class=\"kw1\">ITZ</span> I <span class=\"kw2\">IZ</span> composin <span class=\"kw4\">YR</span> incin <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> sqrin <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> incsqrin <span class=\"kw4\">YR</span> <span class=\"nu0\">10</span> <span class=\"kw2\">MKAY</span> <span class=\"co1\">BTW, prints 101</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> sqrincin <span class=\"kw1\">ITZ</span> I <span class=\"kw2\">IZ</span> composin <span class=\"kw4\">YR</span> sqrin <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> incin <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> sqrincin <span class=\"kw4\">YR</span> <span class=\"nu0\">10</span> <span class=\"kw2\">MKAY</span> <span class=\"co1\">BTW, prints 121</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Compose = lambda (f, g)-&gt;{<br/>            =lambda f, g (x)-&gt;f(g(x))<br/>      }<br/>      Add5=lambda (x)-&gt;x+5<br/>      Division2=lambda (x)-&gt;x/2<br/>      Add5Div2=compose(Division2, Add5)<br/>      Print Add5Div2(15)=10  ' True<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">Composition[f, g][x]<br/>Composition[f, g, h, i][x]</pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">/* built-in */<br/>load(to_poly_solver);<br/>\u00a0<br/>compose_functions([sin, cos]);<br/>/* lambda([%g0],sin(cos(%g0)))*/<br/>\u00a0<br/>/* An implementation, to show a use of buildq */<br/>compose(f, g)\u00a0:= buildq([f, g], lambda([x], f(g(x))));</pre>"}, {"lang": "Nemerle", "loc": 17, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Math;<br/>\u00a0<br/>module Composition<br/>{<br/>    Compose[T](f\u00a0: T -&gt; T, g\u00a0: T -&gt; T, x\u00a0: T)\u00a0: T<br/>    {<br/>        f(g(x))<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def SinAsin = Compose(Sin, Asin, _);<br/>        WriteLine(SinAsin(0.5));<br/>    }<br/>}</pre>"}, {"lang": "NewLISP", "loc": 5, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>compose f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#expand\"><span class=\"kw1\">expand</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re5\">'f</span> <span class=\"re5\">'g</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#expand\"><span class=\"kw1\">expand</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re5\">'f</span> <span class=\"re5\">'g</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>compose <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sin\"><span class=\"kw1\">sin</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#asin\"><span class=\"kw1\">asin</span></a><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0.5</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">import future<br/>\u00a0<br/>proc compose[A,B,C](f: A -&gt; B, g: B -&gt; C): A -&gt; C = (x: A) =&gt; f(g(x))<br/>\u00a0<br/>proc plustwo(x: int): int = x + 2<br/>proc minustwo(x: int): int = x - 2<br/>\u00a0<br/>var plusminustwo = compose(plustwo, minustwo)<br/>echo plusminustwo(10)</pre>"}, {"lang": "Objective-C", "loc": 42, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#include &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">id</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>Function<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co2\">// a commodity for \"encapsulating\" double f(double)</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func_t<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>;<br/>Function encapsulate<span class=\"br0\">(</span>func_t f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">id</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> @<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">[</span>x doubleValue<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Function compose<span class=\"br0\">(</span>Function a, Function b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">id</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"br0\">(</span>b<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">// functions outside...</span><br/><span class=\"kw4\">double</span> my_f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">+</span><span class=\"nu0\">1.0</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> my_g<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">*</span>x;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    Function f <span class=\"sy0\">=</span> encapsulate<span class=\"br0\">(</span>my_f<span class=\"br0\">)</span>;<br/>    Function g <span class=\"sy0\">=</span> encapsulate<span class=\"br0\">(</span>my_g<span class=\"br0\">)</span>;<br/>\u00a0<br/>    Function composed <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"g(2.0) =\u00a0%lf<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>g<span class=\"br0\">(</span>@<span class=\"nu0\">2.0</span><span class=\"br0\">)</span> doubleValue<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(2.0) =\u00a0%lf<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>f<span class=\"br0\">(</span>@<span class=\"nu0\">2.0</span><span class=\"br0\">)</span> doubleValue<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(g(2.0)) =\u00a0%lf<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>composed<span class=\"br0\">(</span>@<span class=\"nu0\">2.0</span><span class=\"br0\">)</span> doubleValue<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objeck", "loc": 31, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    @f <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    @g <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      compose <span class=\"sy0\">:=</span> Composer<span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> G<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      compose<span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> F<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">14</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> G<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Compose<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> @f<span class=\"br0\">(</span>@g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Composer<span class=\"br0\">(</span>f <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> g <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      @f <span class=\"sy0\">:=</span> f<span class=\"sy0\">;</span><br/>      @g <span class=\"sy0\">:=</span> g<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> Compose<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> compose f g x <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 6, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> compose<span class=\"br0\">(</span>f<span class=\"sy5\">,</span> g<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <span class=\"co7\">@</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>r <span class=\"sy3\">=</span> compose<span class=\"br0\">(</span><span class=\"co7\">@exp</span><span class=\"sy5\">,</span> <span class=\"co7\">@sin</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>r<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"sy1\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">g f</pre>"}, {"lang": "Order", "loc": 4, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8comp ORDER_PP_FN( \\<br/>8fn(8F, 8G, 8fn(8X, 8ap(8F, 8ap(8G, 8X)))) )</span></pre>"}, {"lang": "Oz", "loc": 10, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Compose</span> F G<span class=\"br0\">}</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>F <span class=\"br0\">{</span>G X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  SinAsin = <span class=\"br0\">{</span>Compose Float<span class=\"sy0\">.</span>sin Float<span class=\"sy0\">.</span>asin<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>SinAsin 0<span class=\"sy0\">.</span>5<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  x <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>compose<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> compose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$f</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$g</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Trig</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> compose<span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">\\&amp;asin</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> compose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$f</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$g</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Trig</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> compose<span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">\\&amp;asin</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> triple<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;f</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;triple</span> \u2218 <span class=\"re0\">&amp;prefix</span><span class=\"sy0\">:&lt;-&gt;</span> \u2218 <span class=\"br0\">{</span> <span class=\"re0\">$^n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">&amp;f</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"-21\".</span></pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">sequence ctable = {}<br/>\u00a0<br/>function compose(integer f, integer g)<br/>    ctable = append(ctable,{f,g})<br/>    return length(ctable)   <br/>end function<br/>\u00a0<br/>function call_composite(integer f, atom x)<br/>integer g<br/>    {f,g} = ctable[f]<br/>    return call_func(f,{call_func(g,{x})})<br/>end function<br/>\u00a0<br/>function plus1(atom x)<br/>    return x+1<br/>end function<br/>\u00a0<br/>function halve(atom x)<br/>    return x/2<br/>end function<br/>\u00a0<br/>constant m = compose(routine_id(\"halve\"),routine_id(\"plus1\"))<br/>\u00a0<br/>?call_composite(m,1)    -- displays 1<br/>?call_composite(m,4)    -- displays 2.5</pre>"}, {"lang": "PHP", "loc": 8, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> compose<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$trim_strlen</span> <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span><span class=\"st_h\">'strlen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'trim'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$trim_strlen</span><span class=\"br0\">(</span><span class=\"st_h\">' Test '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints 4</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(de compose (F G)<br/>   (curry (F G) (X)<br/>      (F (G X)) ) )</pre>"}, {"lang": "PostScript", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/compose {\u00a0% f g -&gt; { g f }<br/>  [ 3 1 roll exch<br/> \u00a0% procedures are not executed when encountered directly<br/> \u00a0% insert an 'exec' after procedures, but not after operators<br/>  1 index type /operatortype ne { /exec cvx exch } if<br/>  dup type /operatortype ne { /exec cvx } if<br/>  ] cvx<br/>} def<br/>\u00a0<br/>/square { dup mul } def<br/>/plus1  { 1 add } def<br/>/sqPlus1 /square load /plus1 load compose def<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 5, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compose<span class=\"br0\">(</span>F<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span> FG<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tFG <span class=\"sy6\">=</span>  \\X^Z^<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>G<span class=\"sy4\">,</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>F<span class=\"sy4\">,</span>Y<span class=\"sy4\">,</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> g <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> f <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><br/><span class=\"br0\">}</span>  <br/>f <span class=\"br0\">(</span>g <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 23, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;Declare how our function looks like</span><br/><span class=\"kw1\">Prototype</span>.i Func<span class=\"br0\">(</span>Arg.i<span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"co1\">; Make a procedure that composes any functions of type \"Func\"</span><br/><span class=\"kw1\">Procedure</span> Compose<span class=\"br0\">(</span><span class=\"sy0\">*</span>a.Func,<span class=\"sy0\">*</span>b.Func, x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>a<span class=\"br0\">(</span><span class=\"sy0\">*</span>b<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; Just a procedure fitting \"Func\"</span><br/><span class=\"kw1\">Procedure</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; Yet another procedure fitting \"Func\"</span><br/><span class=\"kw1\">Procedure</span> g<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;- Test it</span><br/>X<span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>Title$<span class=\"sy0\">=</span><span class=\"st0\">\"With x=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>Body$<span class=\"sy0\">=</span><span class=\"st0\">\"Compose(f(),g(), x) =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>Compose<span class=\"br0\">(</span>@f<span class=\"br0\">(</span><span class=\"br0\">)</span>,@g<span class=\"br0\">(</span><span class=\"br0\">)</span>,X<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span>Title$,Body$<span class=\"br0\">)</span></pre>"}, {"lang": "Purity", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data compose = f =&gt; g =&gt; $f . $g<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\">compose <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f<span class=\"sy0\">,</span> g: <span class=\"kw1\">lambda</span> x: f<span class=\"br0\">(</span> g<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define compose<br/>  F G -&gt; (/. X<br/>             (F (G X))))<br/>\u00a0<br/>((compose (+ 1) (+ 2)) 3)   \\ (Outputs 6) \\<br/>\u00a0</pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">compose &lt;- function(f,g) function(x) { f(g(x)) }<br/>r &lt;- compose(sin, cos)<br/>print(r(.5))</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (compose f g)<br/>  (lambda (x) (f (g x))))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 14, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Functional Composition\"<br/>\tURL: http://rosettacode.org/wiki/Functional_Composition<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; \"compose\" means something else in REBOL, therefore I use a 'compose-functions name. </span><br/>\u00a0<br/>compose-functions: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">{</span><span class=\"kw2\">compose</span> the given functions F <span class=\"kw3\">and</span> G<span class=\"br0\">}</span><br/>    f <span class=\"br0\">[</span>any-<span class=\"kw2\">function</span><span class=\"sy0\">!</span><span class=\"br0\">]</span><br/>    g <span class=\"br0\">[</span>any-<span class=\"kw2\">function</span><span class=\"sy0\">!</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw2\">compose</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>:f<span class=\"br0\">)</span> <span class=\"br0\">(</span>:g<span class=\"br0\">)</span> x<span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 3, "block": "<pre class=\"rexx highlighted_source\">compose: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> f,g,x;    <span class=\"kw1\">interpret</span>  <span class=\"st0\">'return'</span>  f<span class=\"st0\">\"(\"</span>  g<span class=\"st0\">'('</span>  x  <span class=\"st0\">\"))\"</span><br/>\u00a0<br/><span class=\"kw1\">exit</span>        <span class=\"coMULTI\">/*control should never gets here,  but this was added just in case.*/</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Function composition<br/>\u00a0<br/>sumprod = func1(:func2,2,3)<br/>see sumprod + nl<br/>\u00a0<br/>func func1(func2,x,y)<br/>        temp = call func2(x,y)<br/>        res = temp + x + y<br/>        return res<br/>\u00a0<br/>func func2(x,y)<br/>        res = x * y<br/>        return res<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> compose<span class=\"br0\">(</span>f,g<span class=\"br0\">)</span><br/>  <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> f<span class=\"br0\">[</span>g<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>s = compose<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:sin</span><span class=\"br0\">)</span>, <span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:cos</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> s<span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"br0\">]</span>  <span class=\"co1\"># =&gt; 0.769196354841008</span><br/>\u00a0<br/><span class=\"co1\"># verify</span><br/><span class=\"kw3\">p</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># =&gt; 0.769196354841008</span></pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn compose&lt;'a,F,G,T,U,V&gt;(f: F, g: G) -&gt; Box&lt;Fn(T) -&gt; V + 'a&gt;<br/>    where F: Fn(U) -&gt; V + 'a,<br/>          G: Fn(T) -&gt; U + 'a,<br/>{<br/>   Box::new(move |x| f(g(x)))<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compose<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> A, g<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> add1<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x+<span class=\"nu0\">1</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> add2 <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span>add1, add1<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 6, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>compose <span class=\"kw1\">f</span> g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; or:</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>compose <span class=\"kw1\">f</span> g<span class=\"br0\">)</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">func compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    func<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var fg = compose<span class=\"br0\">(</span>func<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span> sin<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span>, func<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span> cos<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>say fg<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>      <span class=\"co1\"># =&gt; 0.76919635484100842185251475805107</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">[|\u00a0:x | x + 1] ** [|\u00a0:x | x squared] applyTo: {3}</pre>"}, {"lang": "Smalltalk", "loc": 6, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> composer fg </span>|<br/><span class=\"re6\">composer</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">f</span>\u00a0:<span class=\"re5\">g</span> | <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | f value: <span class=\"br0\">(</span><span class=\"re5\">g</span> value: <span class=\"re5\">x</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/><span class=\"re5\">fg</span> <span class=\"sy0\">:=</span> <span class=\"re5\">composer</span> value: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | x + <span class=\"re5\">1</span> <span class=\"br0\">]</span><br/>               value: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | x * <span class=\"re5\">x</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re5\">fg</span> value:<span class=\"re5\">3</span><span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">fun compose (f, g) x = f (g x)</pre>"}, {"lang": "SuperCollider", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f = { |x| x + 1 };<br/>g = {\u00a0|x| x * 2 };<br/>h = g &lt;&gt; f;<br/>h.(8); // returns 18<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 6, "block": "<pre class=\"text highlighted_source\">func compose&lt;A,B,C&gt;(f: (B) -&gt; C, g: (A) -&gt; B) -&gt; (A) -&gt; C {<br/>  return { f(g($0)) }<br/>}<br/>\u00a0<br/>let sin_asin = compose(sin, asin)<br/>println(sin_asin(0.5))</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> compose <span class=\"br0\">{</span>f g<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">list</span> apply <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span>f g x<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$f</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$g</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$f</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> sin_asin <span class=\"br0\">[</span>compose sin asin<span class=\"br0\">]</span><br/><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$sin_asin</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 0.5</span><br/><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>compose abs int<span class=\"br0\">]</span> -<span class=\"nu0\">3.14</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 3</span></pre>"}, {"lang": "UNIX Shell", "loc": 9, "block": "<pre class=\"bash highlighted_source\">compose<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">eval</span> <span class=\"st0\">\"$1() { $3 | $2; }\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>downvowel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">tr</span> AEIOU aeiou; <span class=\"br0\">}</span><br/>upcase<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">tr</span> a-z A-Z; <span class=\"br0\">}</span><br/>compose c downvowel upcase<br/><span class=\"kw3\">echo</span> <span class=\"st_h\">'Cozy lummox gives smart squid who asks for job pen.'</span> <span class=\"sy0\">|</span> c<br/><span class=\"co0\"># =&gt; CoZY LuMMoX GiVeS SMaRT SQuiD WHo aSKS FoR JoB PeN.</span></pre>"}, {"lang": "Unlambda", "loc": 1, "block": "<pre>``s`ksk\n</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">compose(\"f\",\"g\") \"x\" = \"f\" \"g\" \"x\"</pre>"}, {"lang": "VBScript", "loc": 20, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">option</span> <span class=\"kw2\">explicit</span><br/>class closure<br/>\u00a0<br/>\t<span class=\"kw2\">private</span> composition<br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> compose( f1, f2 )<br/>\t\tcomposition = f2 &amp; <span class=\"st0\">\"(\"</span> &amp; f1 &amp; <span class=\"st0\">\"(p1))\"</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> default <span class=\"kw2\">function</span> apply( p1 )<br/>\t\tapply = eval( composition )<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> formula<br/>\t\tformula = composition<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/><span class=\"kw3\">end</span> class <br/>\u00a0</pre>"}, {"lang": "WDTE", "loc": 1, "block": "<pre class=\"text highlighted_source\">let compose f g =&gt; (@ c x =&gt; g x -&gt; f);</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">! @[f g] x\u00a0; f(g(x))</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">Utils.Helpers.fcomp('+(1),'*(2))(5) //--&gt;11</pre>"}]}