{"task": "String_comparison", "blocks": [{"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Equal_Case_Insensitive</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> String_Compare <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print_Comparison <span class=\"br0\">(</span>A, B\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>         <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span> &amp; A &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\" and \"</span><span class=\"st0\">\"\"</span> &amp; B &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\": \"</span> &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A = B <span class=\"kw1\">then</span><br/>              <span class=\"st0\">\"equal, \"</span><br/>           <span class=\"kw1\">elsif</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Equal_Case_Insensitive</span> <span class=\"br0\">(</span>A, B<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>              <span class=\"st0\">\"case-insensitive-equal, \"</span><br/>           <span class=\"kw1\">else</span> <span class=\"st0\">\"not equal at all, \"</span><span class=\"br0\">)</span>                   &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A /= B <span class=\"kw1\">then</span> <span class=\"st0\">\"/=, \"</span>     <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>           &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A &lt;  B <span class=\"kw1\">then</span> <span class=\"st0\">\"before, \"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>           &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A &gt;  B <span class=\"kw1\">then</span> <span class=\"st0\">\"after, \"</span>  <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>           &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A &lt;= B <span class=\"kw1\">then</span> <span class=\"st0\">\"&lt;=, \"</span>     <span class=\"kw1\">else</span> <span class=\"st0\">\"(not &lt;=), \"</span><span class=\"br0\">)</span> &amp;<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> A &gt;= B <span class=\"kw1\">then</span> <span class=\"st0\">\"&gt;=. \"</span>     <span class=\"kw1\">else</span> <span class=\"st0\">\"(not &gt;=).\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Print_Comparison;<br/><span class=\"kw1\">begin</span><br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"this\"</span>, <span class=\"st0\">\"that\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"that\"</span>, <span class=\"st0\">\"this\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"THAT\"</span>, <span class=\"st0\">\"That\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"this\"</span>, <span class=\"st0\">\"This\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"this\"</span>, <span class=\"st0\">\"this\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"the\"</span>, <span class=\"st0\">\"there\"</span><span class=\"br0\">)</span>;<br/>   Print_Comparison <span class=\"br0\">(</span><span class=\"st0\">\"there\"</span>, <span class=\"st0\">\"the\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> String_Compare;</pre>"}, {"lang": "Aime", "loc": 16, "block": "<pre class=\"text highlighted_source\">text s, t;<br/>\u00a0<br/>s = \"occidental\";<br/>t = \"oriental\";<br/>\u00a0<br/># operator case sensitive comparison<br/>o_form(\"~ vs ~ (==,\u00a0!=, &lt;, &lt;=, &gt;=, &gt;): ~ ~ ~ ~ ~ ~\\n\", s, t, s == t, s\u00a0!= t, s &lt; t, s &lt;= t, s &gt;= t, s &gt; t);<br/>\u00a0<br/>s = \"Oriental\";<br/>t = \"oriental\";<br/>\u00a0<br/># case sensitive comparison<br/>o_form(\"~ vs ~ (==,\u00a0!=, &lt;, &gt;): ~ ~ ~ ~\\n\", s, t,\u00a0!compare(s, t), compare(s, t), compare(s, t) &lt; 0, 0 &lt; compare(s, t));<br/>\u00a0<br/># case insensitive comparison<br/>o_form(\"~ vs ~ (==,\u00a0!=, &lt;, &gt;): ~ ~ ~ ~\\n\", s, t,\u00a0!icompare(s, t), icompare(s, t), icompare(s, t) &lt; 0, 0 &lt; icompare(s, t));</pre>"}, {"lang": "Apex", "loc": 35, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Compare<br/><span class=\"br0\">{</span><br/>\t<span class=\"co3\">/**<br/>\t * Test in the developer console:<br/>\t * Compare.compare('Hello', 'Hello');<br/>\t * Compare.compare('5', '5.0');<br/>\t * Compare.compare('java', 'Java');<br/>\t * Compare.compare('\u0134\u00c3V\u00c1', '\u0134\u00c3V\u00c1');<br/>\t*/</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> compare <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> A, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> B<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">equals</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' and  '</span> <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> <span class=\"st0\">' are lexically equal.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' and  '</span> <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> <span class=\"st0\">' are not lexically equal.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' and  '</span> <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> <span class=\"st0\">' are case-insensitive lexically equal.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' and  '</span> <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> <span class=\"st0\">' are not case-insensitive lexically equal.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' is lexically before '</span> <span class=\"sy0\">+</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' is lexically after '</span> <span class=\"sy0\">+</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' is not lexically before '</span> <span class=\"sy0\">+</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"st0\">' is not lexically after '</span> <span class=\"sy0\">+</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">debug</span><span class=\"br0\">(</span><span class=\"st0\">'The lexical relationship is: '</span> <span class=\"sy0\">+</span> A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AppleScript", "loc": 52, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">--Comparing two strings for exact equality</span><br/><span class=\"kw3\">set</span> s1 <span class=\"kw3\">to</span> <span class=\"st0\">\"this\"</span><br/><span class=\"kw3\">set</span> s2 <span class=\"kw3\">to</span> <span class=\"st0\">\"that\"</span><br/><span class=\"kw3\">if</span> s1 <span class=\"kw3\">is</span> s2 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- strings are equal</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"co1\">--Comparing two strings for inequality (i.e., the inverse of exact equality)</span><br/><span class=\"kw3\">if</span> s1 <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> s2 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- string are not equal</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"co1\">-- Comparing two strings to see if one is lexically ordered before than the other</span><br/><span class=\"kw3\">if</span> s1 <span class=\"sy0\">&lt;</span> s2 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- s1 is lexically ordered before s2</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"co1\">-- Comparing two strings to see if one is lexically ordered after than the other</span><br/><span class=\"kw3\">if</span> s1 &gt; s2 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- s1 is lexically ordered after s2</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"co1\">-- How to achieve both case sensitive comparisons and case insensitive comparisons within the language</span><br/><span class=\"kw3\">set</span> s1 <span class=\"kw3\">to</span> <span class=\"st0\">\"this\"</span><br/><span class=\"kw3\">set</span> s2 <span class=\"kw3\">to</span> <span class=\"st0\">\"This\"</span><br/>\u00a0<br/><span class=\"kw3\">considering</span> <span class=\"kw1\">case</span><br/>\t<span class=\"kw3\">if</span> s1 <span class=\"kw3\">is</span> s2 <span class=\"kw3\">then</span><br/>\t\t<span class=\"co1\">-- strings are equal with case considering</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">considering</span><br/>\u00a0<br/><span class=\"kw3\">ignoring</span> <span class=\"kw1\">case</span> <span class=\"co1\">-- default</span><br/>\t<span class=\"kw3\">if</span> s2 <span class=\"kw3\">is</span> s2 <span class=\"kw3\">then</span><br/>\t\t<span class=\"co1\">-- string are equal without case considering</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">ignoring</span><br/>\u00a0<br/><span class=\"co1\">-- Demonstrate any other kinds of string comparisons that the language provides, particularly as it relates to your type system. For example, you might demonstrate the difference between generic/polymorphic comparison and coercive/allomorphic comparison if your language supports such a distinction.</span><br/>\u00a0<br/><span class=\"co1\">-- When comparing the right object is coerced into the same type as the object left from the operator. This implicit coercion enables to compare integers with strings (containining integer values).</span><br/>\u00a0<br/><span class=\"kw3\">set</span> s1 <span class=\"kw3\">to</span> <span class=\"st0\">\"3\"</span><br/><span class=\"kw3\">set</span> int1 <span class=\"kw3\">to</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw3\">if</span> s1 <span class=\"sy0\">&lt;</span> int1 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- comparison is lexically</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"kw3\">if</span> int1 <span class=\"sy0\">&lt;</span> s1 <span class=\"kw3\">then</span><br/>\t<span class=\"co1\">-- comparison is numeric</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span></pre>"}, {"lang": "ALGOL 68", "loc": 67, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">STRING</span> a <span class=\"sy1\">:=</span> <span class=\"st0\">\"abc   \"</span><span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> <span class=\"st0\">\"ABC \"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># when comparing strings, Algol 68 ignores trailing blanks                    #</span><br/><span class=\"coMULTI\"># so e.g. \"a\" = \"a \" is true                                                  #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test procedure, prints message if condition is TRUE                         #</span><br/><span class=\"kw4\">PROC</span> test <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">BOOL</span> condition<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> message <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> condition <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> message<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># equality?                                                                   #</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">=</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a = b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># inequality?                                                                 #</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">/=</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a not = b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># lexically ordered before?                                                   #</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">&lt;</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a &lt; b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># lexically ordered after?                                                    #</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">&gt;</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a &gt; b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Algol 68's builtin string comparison operators are case-sensitive.          #</span><br/><span class=\"coMULTI\"># To perform case insensitive comparisons, procedures or operators            #</span><br/><span class=\"coMULTI\"># would need to be written                                                    #</span><br/><span class=\"coMULTI\"># e.g.                                                                        #</span><br/>\u00a0<br/><span class=\"coMULTI\"># compare two strings, ignoring case                                          #</span><br/><span class=\"coMULTI\"># Note the \"to upper\" PROC is an Algol 68G extension                          #</span><br/><span class=\"coMULTI\"># It could be written in standard Algol 68 (assuming ASCII) as e.g.           #</span><br/><span class=\"coMULTI\">#    PROC to upper = ( CHAR c )CHAR:                                          #</span><br/><span class=\"coMULTI\">#         IF c &lt; \"a\" OR c &gt; \"z\" THEN c                                        #</span><br/><span class=\"coMULTI\">#         ELSE REPR ( ( ABS c - ABS \"a\" ) + ABS \"A\" ) FI;                     #</span><br/><span class=\"kw4\">PROC</span> caseless comparison <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span> a max   <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> b max  <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> b<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> a pos  <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> a<span class=\"sy1\">,</span> b pos <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> b<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> result <span class=\"sy1\">=</span> 0<br/>           <span class=\"kw16\">AND</span> <span class=\"br0\">(</span> a pos <span class=\"sy1\">&lt;=</span> a max <span class=\"kw16\">OR</span> b pos <span class=\"sy1\">&lt;=</span> b max <span class=\"br0\">)</span><br/>         <span class=\"kw2\">DO</span><br/>             <span class=\"kw3\">CHAR</span> a char <span class=\"sy1\">:=</span> to upper<span class=\"br0\">(</span> <span class=\"kw2\">IF</span> a pos <span class=\"sy1\">&lt;=</span> a max <span class=\"kw2\">THEN</span> a<span class=\"br0\">[</span> a pos <span class=\"br0\">]</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\" \"</span> <span class=\"kw2\">FI</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             <span class=\"kw3\">CHAR</span> b char <span class=\"sy1\">:=</span> to upper<span class=\"br0\">(</span> <span class=\"kw2\">IF</span> b pos <span class=\"sy1\">&lt;=</span> b max <span class=\"kw2\">THEN</span> b<span class=\"br0\">[</span> b pos <span class=\"br0\">]</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\" \"</span> <span class=\"kw2\">FI</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             result <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> a char <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> b char<span class=\"sy1\">;</span><br/>             a pos <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>             b pos <span class=\"sy1\">+:=</span> 1<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">IF</span> result <span class=\"sy1\">&lt;</span> 0 <span class=\"kw2\">THEN</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">ELIF</span> result <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span> 1 <span class=\"kw2\">ELSE</span> 0 <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">END</span> <span class=\"sy1\">;</span> <span class=\"coMULTI\"># caseless comparison #</span><br/>\u00a0<br/><span class=\"coMULTI\"># compare two strings for equality, ignoring case                             #</span><br/><span class=\"kw4\">PROC</span> equal ignoring case <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> caseless comparison<span class=\"br0\">(</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span> <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># similar procedures for inequality and lexical ording ...                    #</span><br/>\u00a0<br/>test<span class=\"br0\">(</span> equal ignoring case<span class=\"br0\">(</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a = b (ignoring case)\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># Algol 68 is strongly typed - strings cannot be compared to e.g. integers    #</span><br/><span class=\"coMULTI\"># unless procedures or operators are written, e.g.                            #</span><br/><span class=\"coMULTI\"># e.g. OP = = ( STRING a, INT b )BOOL: a = whole( b, 0 );                     #</span><br/><span class=\"coMULTI\">#      OP = = ( INT a, STRING b )BOOL: b = a;                                 #</span><br/><span class=\"coMULTI\"># etc.                                                                        #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Algol 68 also has &lt;= and &gt;= comparison operators for testing for            #</span><br/><span class=\"coMULTI\"># \"lexically before or equal\" and \"lexically after or equal\"                  #</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">&lt;=</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a &lt;= b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test<span class=\"br0\">(</span> a <span class=\"sy1\">&gt;=</span> b<span class=\"sy1\">,</span> <span class=\"st0\">\"a &gt;= b\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># there are no other forms of string comparison builtin to Algol 68           #</span></pre>"}, {"lang": "ALGOL W", "loc": 67, "block": "<pre class=\"text highlighted_source\">begin<br/>    string(10) a;<br/>    string(12) b;<br/>\u00a0<br/>    a\u00a0:= \"abc\";<br/>    b\u00a0:= \"ABC\";<br/>\u00a0<br/>   \u00a0% when comparing strings, Algol W ignores trailing blanks                \u00a0%<br/>   \u00a0% so e.g. \"a\" = \"a \" is true                                             \u00a0%<br/>\u00a0<br/>   \u00a0% equality?                                                              \u00a0%<br/>    if a = b then write( \"a = b\" );<br/>   \u00a0% inequality?                                                            \u00a0%<br/>    if a not = b then write( \"a not = b\" );<br/>\u00a0<br/>   \u00a0% lexically ordered before?                                              \u00a0%<br/>    if a &lt; b then write( \"a &lt; b\" );<br/>\u00a0<br/>   \u00a0% lexically ordered after?                                               \u00a0%<br/>    if a &gt; b then write( \"a &gt; b\" );<br/>\u00a0<br/>   \u00a0% Algol W string comparisons are case-sensitive. To perform case         \u00a0%<br/>   \u00a0% insensitive comparisons, procedures would need to be written           \u00a0%<br/>   \u00a0% e.g. as in the following block (assuming the character set is ASCII)   \u00a0%<br/>    begin<br/>\u00a0<br/>       \u00a0% convert a character to upper-case                                  \u00a0%<br/>        integer procedure toupper( integer value c )\u00a0;<br/>            if c &lt; decode( \"a\" ) or c &gt; decode( \"z\" ) then c<br/>            else ( c - decode( \"a\" ) ) + decode( \"A\" );<br/>\u00a0<br/>       \u00a0% compare two strings, ignoring case                                 \u00a0%<br/>       \u00a0% note that strings can be at most 256 characters long in Algol W    \u00a0%<br/>        integer procedure caselessComparison ( string(256) value a, b )\u00a0;<br/>            begin<br/>                integer comparisonResult, pos;<br/>                comparisonResult\u00a0:= pos\u00a0:= 0;<br/>                while pos &lt; 256 and comparisonResult = 0 do begin<br/>                    comparisonResult\u00a0:= toupper( decode( a(pos//1) ) )<br/>                                      - toupper( decode( b(pos//1) ) );<br/>                    pos\u00a0:= pos + 1<br/>                end;<br/>                if      comparisonResult &lt; 0 then -1<br/>                else if comparisonResult &gt; 0 then  1<br/>                else                               0<br/>            end caselessComparison\u00a0;<br/>\u00a0<br/>       \u00a0% compare two strings for equality, ignoring case                    \u00a0%<br/>        logical procedure equalIgnoringCase ( string(256) value a, b )\u00a0;<br/>            ( caselessComparison( a, b ) = 0 );<br/>\u00a0<br/>       \u00a0% similar procedures for inequality and lexical ording ...          \u00a0%<br/>\u00a0<br/>        if equalIgnoringCase( a, b ) then write( \"a = b (ignoring case)\" )<br/>    end caselessComparison\u00a0;<br/>\u00a0<br/>   \u00a0% Algol W is strongly typed - strings cannot be compared to e.g. integers\u00a0%<br/>   \u00a0% e.g. \"if a = 23 then ...\" would be a syntax error                      \u00a0%<br/>\u00a0<br/>   \u00a0% Algol W also has &lt;= and &gt;= comparison operators for testing for        \u00a0%<br/>   \u00a0% \"lexically before or equal\" and \"lexically after or equal\"             \u00a0%<br/>    if a &lt;= b then write( \"a &lt;= b\" );<br/>    if a &gt;= b then write( \"a &gt;= b\" );<br/>\u00a0<br/>   \u00a0% there are no other forms of string comparison builtin to Algol W       \u00a0%<br/>\u00a0<br/>end.</pre>"}, {"lang": "ARM Assembly", "loc": 182, "block": "<pre class=\"arm highlighted_source\">\u00a0<br/><span class=\"sy0\">/*</span> ARM assembly Raspberry PI  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>  program comparString<span class=\"sy0\">.</span>s   <span class=\"sy0\">*/</span><br/>\u00a0<br/><span class=\"sy0\">/*</span> Constantes    <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>equ STDOUT<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>     @ Linux output console<br/><span class=\"sy0\">.</span>equ EXIT<span class=\"sy0\">,</span>   <span class=\"nu0\">1</span>     @ Linux syscall<br/><span class=\"sy0\">.</span>equ WRITE<span class=\"sy0\">,</span>  <span class=\"nu0\">4</span>     @ Linux syscall<br/><span class=\"sy0\">/*</span> Initialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>data<br/>szMessStringEqu<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"The strings are equals.\\n\"</span><br/>szMessStringNotEqu<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"The strings are not equals.\\n\"</span><br/>szCarriageReturn<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/>\u00a0<br/>szString1<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"ABCDE\"</span><br/>szString2<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"ABCDE\"</span><br/>szString3<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"ABCFG\"</span><br/>szString4<span class=\"sy0\">:</span>   <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"ABC\"</span><br/>szString5<span class=\"sy0\">:</span>   <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"abcde\"</span><br/>\u00a0<br/><span class=\"sy0\">/*</span> UnInitialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>bss <br/>\u00a0<br/><span class=\"sy0\">/*</span>  code section <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>text<br/><span class=\"sy0\">.</span>global main <br/>main<span class=\"sy0\">:</span>                <span class=\"sy0\">/*</span> entry of program  <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> saves <span class=\"nu0\">2</span> registers <span class=\"sy0\">*/</span><br/>\u00a0<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszString1<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrszString2<br/>    <span class=\"kw7\">bl</span> Comparaison<br/>\u00a0<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszString1<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrszString3<br/>    <span class=\"kw7\">bl</span> Comparaison<br/>\u00a0<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszString1<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrszString4<br/>    <span class=\"kw7\">bl</span> Comparaison<br/>\u00a0<br/>    @ case sensitive comparisons ABCDE et abcde<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszString1<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrszString5<br/>    <span class=\"kw7\">bl</span> Comparaison<br/>\u00a0<br/>    @ case insensitive comparisons  ABCDE et abcde<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszString1<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrszString5<br/>    <span class=\"kw7\">bl</span> comparStringsInsensitive<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span><br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1f</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessStringEqu<br/>    <span class=\"kw7\">bl</span> affichageMess<br/>    <span class=\"kw7\">b</span> <span class=\"nu0\">2f</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessStringNotEqu<br/>    <span class=\"kw7\">bl</span> affichageMess<br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>\u00a0<br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span>   <span class=\"sy0\">/*</span> standard end of the program <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                  @ return code<br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>                 @restaur <span class=\"nu0\">2</span> registers<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #EXIT              @ request to exit program<br/>    swi <span class=\"nu0\">0</span>                       @ perform the system call<br/>iAdrszString1<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szString1<br/>iAdrszString2<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szString2<br/>iAdrszString3<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szString3<br/>iAdrszString4<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szString4<br/>iAdrszString5<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szString5<br/>iAdrszMessStringEqu<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>int szMessStringEqu<br/>iAdrszMessStringNotEqu<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>int szMessStringNotEqu<br/>iAdrszCarriageReturn<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>int  szCarriageReturn<br/><span class=\"sy0\">/*********************************************/</span><br/><span class=\"sy0\">/*</span> comparaison                               <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*********************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains address String <span class=\"nu0\">1</span>           <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> contains address String <span class=\"nu0\">2</span>         <span class=\"sy0\">*/</span><br/>Comparaison<span class=\"sy0\">:</span> <br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t<span class=\"sy0\">/*</span> save  registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bl</span> comparStrings<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span><br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1f</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessStringEqu<br/>    <span class=\"kw7\">bl</span> affichageMess<br/>    <span class=\"kw7\">b</span> <span class=\"nu0\">2f</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessStringNotEqu<br/>    <span class=\"kw7\">bl</span> affichageMess<br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t\t<span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        \t\t\t<span class=\"sy0\">/*</span> return  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>     display text with size calculation                         <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the address of the message <span class=\"sy0\">*/</span><br/>affichageMess<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t<span class=\"sy0\">/*</span> save  registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>    \t\t<span class=\"sy0\">/*</span> save others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   \t\t\t\t<span class=\"sy0\">/*</span> counter length <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>      \t<span class=\"sy0\">/*</span> loop length calculation <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>  \t\t\t<span class=\"sy0\">/*</span> read octet start position <span class=\"sy0\">+</span> index <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       \t\t\t<span class=\"sy0\">/*</span> if <span class=\"nu0\">0</span> its over <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">addne</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   \t\t\t<span class=\"sy0\">/*</span> else <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> in the length <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1b</span>          \t\t\t<span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> loop <span class=\"sy0\">*/</span><br/>                                <span class=\"sy0\">/*</span> so here <span class=\"kw35\">r2</span> contains the length of the message <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>        \t\t\t<span class=\"sy0\">/*</span> address message in <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#STDOUT      \t\t<span class=\"sy0\">/*</span> code to write to the standard output Linux <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #WRITE             <span class=\"sy0\">/*</span> code call system <span class=\"st0\">\"write\"</span> <span class=\"sy0\">*/</span><br/>    swi #<span class=\"nu0\">0</span>                      <span class=\"sy0\">/*</span> call systeme <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>     \t\t<span class=\"sy0\">/*</span> restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t\t<span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        \t\t\t<span class=\"sy0\">/*</span> return  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/************************************/</span>\t   <br/><span class=\"sy0\">/*</span> Strings case sensitive comparisons  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/************************************/</span>\t  <br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> et <span class=\"kw35\">r1</span> contains the address of strings <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"nu0\">0</span> in <span class=\"kw35\">r0</span> if equals <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"sy0\">-</span><span class=\"nu0\">1</span> if string <span class=\"kw35\">r0</span> &lt; string <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"nu0\">1</span>  if string <span class=\"kw35\">r0</span> &gt; string <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>comparStrings<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span>  <span class=\"sy0\">/*</span> save des registres <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   <span class=\"sy0\">/*</span> counter <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>\t<br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>   <span class=\"sy0\">/*</span> byte string <span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>   <span class=\"sy0\">/*</span> byte string <span class=\"nu0\">2</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><br/>    <span class=\"kw2\">movlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t <span class=\"sy0\">/*</span> small <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw2\">movgt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>\t <span class=\"sy0\">/*</span> greather <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">100f</span>     <span class=\"sy0\">/*</span> not equals <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   <span class=\"sy0\">/*</span> <span class=\"nu0\">0</span> end string <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">moveq</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>    <span class=\"sy0\">/*</span> equals <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw8\">beq</span> <span class=\"nu0\">100f</span>     <span class=\"sy0\">/*</span>  end string <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">/*</span> else <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> in counter <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">b</span> <span class=\"nu0\">1b</span>         <span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> loop <span class=\"sy0\">*/</span><br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>   <br/>\u00a0<br/><span class=\"sy0\">/************************************/</span>\t   <br/><span class=\"sy0\">/*</span> Strings case insensitive comparisons    <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/************************************/</span>\t  <br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> et <span class=\"kw35\">r1</span> contains the address of strings <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"nu0\">0</span> in <span class=\"kw35\">r0</span> if equals <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"sy0\">-</span><span class=\"nu0\">1</span> if string <span class=\"kw35\">r0</span> &lt; string <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> return <span class=\"nu0\">1</span>  if string <span class=\"kw35\">r0</span> &gt; string <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>comparStringsInsensitive<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span>  <span class=\"sy0\">/*</span> save des registres <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   <span class=\"sy0\">/*</span> counter <span class=\"sy0\">*/</span><br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>\t<br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>   <span class=\"sy0\">/*</span> byte string <span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>   <span class=\"sy0\">/*</span> byte string <span class=\"nu0\">2</span> <span class=\"sy0\">*/</span><br/>    @ majuscules <span class=\"sy0\">--</span>&gt; minuscules  byte <span class=\"nu0\">1</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">65</span><br/>    <span class=\"kw8\">blt</span> <span class=\"nu0\">2f</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">90</span><br/>    <span class=\"kw8\">bgt</span> <span class=\"nu0\">2f</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">32</span><br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span>   \t@ majuscules <span class=\"sy0\">--</span>&gt; minuscules  byte <span class=\"nu0\">2</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">65</span><br/>    <span class=\"kw8\">blt</span> <span class=\"nu0\">3f</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">90</span><br/>    <span class=\"kw8\">bgt</span> <span class=\"nu0\">3f</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">32</span><br/><span class=\"nu0\">3</span><span class=\"sy0\">:</span>\t<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><br/>    <span class=\"kw2\">movlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t <span class=\"sy0\">/*</span> small <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw2\">movgt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>\t <span class=\"sy0\">/*</span> greather <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">100f</span>     <span class=\"sy0\">/*</span> not equals <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   <span class=\"sy0\">/*</span> <span class=\"nu0\">0</span> end string <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">moveq</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>    <span class=\"sy0\">/*</span> equal <span class=\"sy0\">*/</span> \t<br/>    <span class=\"kw8\">beq</span> <span class=\"nu0\">100f</span>     <span class=\"sy0\">/*</span> end strings <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">/*</span> else <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> in counter <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">b</span> <span class=\"nu0\">1b</span>         <span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> loop <span class=\"sy0\">*/</span><br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>   \t<span class=\"sy0\">/*</span> end procedure <span class=\"sy0\">*/</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Astro", "loc": 17, "block": "<pre class=\"python highlighted_source\">fun compare<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>$a is of type ${typeof(a)} and $b is of type ${typeof(b)}\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is strictly less than $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is less than or equal to $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span>  b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is strictly greater than $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is greater than or equal to $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">==</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is equal to $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">!=</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a is not equal to $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"kw1\">is</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a has object identity with $b\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> b: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"$a has negated object identity with $b\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st0\">\"YUP\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"YUP\"</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">\"24\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">123</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  a=<span class=\"st0\">\"BALL\"</span><br/>  b=<span class=\"st0\">\"BELL\"</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy2\">==</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The strings are equal\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy2\">!=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The strings are not equal\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a  <span class=\"sy2\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The first string is lexically after than the second\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a  <span class=\"sy2\">&lt;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The first string is lexically before than the second\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy2\">&gt;=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The first string is not lexically before than the second\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy2\">&lt;=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The first string is not lexically after than the second\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># to make a case insensitive comparison convert both strings to the same lettercase:</span><br/>  a=<span class=\"st0\">\"BALL\"</span><br/>  b=<span class=\"st0\">\"ball\"</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">tolower</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"kw4\">tolower</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"The first and second string are the same disregarding letter case\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">10 LET \"A$=\"BELL\"<br/>20 LET B$=\"BELT\"<br/>30 IF A$ = B$ THEN PRINT \"THE STRINGS ARE EQUAL\": REM TEST FOR EQUALITY<br/>40 IF A$ &lt;&gt; B$ THEN PRINT \"THE STRINGS ARE NOT EQUAL\": REM TEST FOR INEQUALITY<br/>50 IF A$ &gt; B$ THEN PRINT A$;\" IS LEXICALLY HIGHER THAN \";B$: REM TEST FOR LEXICALLY HIGHER<br/>60 IF A$ &lt; B$ THEN PRINT A$;\" IS LEXICALLY LOWER THAN \";B$: REM TEST FOR LEXICALLY LOWER<br/>70 IF A$ &lt;= B$ THEN PRINT A$;\" IS NOT LEXICALLY HIGHER THAN \";B$<br/>80 IF A$ &gt;= B$ THEN PRINT A$;\" IS NOT LEXICALLY LOWER THAN \";B$<br/>90 END</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">REM &gt;strcomp<br/>shav$ = \"Shaw, George Bernard\"<br/>shakes$ = \"Shakespeare, William\"<br/>:<br/>REM test equality<br/>IF shav$ = shakes$ THEN PRINT \"The two strings are equal\" ELSE PRINT \"The two strings are not equal\"<br/>:<br/>REM test inequality<br/>IF shav$ &lt;&gt; shakes$ THEN PRINT \"The two strings are unequal\" ELSE PRINT \"The two strings are not unequal\"<br/>:<br/>REM test lexical ordering<br/>IF shav$ &gt; shakes$ THEN PRINT shav$; \" is lexically higher than \"; shakes$ ELSE PRINT shav$; \" is not lexically higher than \"; shakes$<br/>IF shav$ &lt; shakes$ THEN PRINT shav$; \" is lexically lower than \"; shakes$ ELSE PRINT shav$; \" is not lexically lower than \"; shakes$<br/>REM the &gt;= and &lt;= operators can also be used, &amp; behave as expected<br/>:<br/>REM string comparison is case-sensitive by default, and BBC BASIC<br/>REM  does not provide built-in functions to convert to all upper<br/>REM or all lower case; but it is easy enough to define one<br/>:<br/>IF FN_upper(shav$) = FN_upper(shakes$) THEN PRINT \"The two strings are equal (disregarding case)\" ELSE PRINT \"The two strings are not equal (even disregarding case)\"<br/>END<br/>:<br/>DEF FN_upper(s$)<br/>LOCAL i%, ns$<br/>ns$ = \"\"<br/>FOR i% = 1 TO LEN s$<br/>  IF ASC(MID$(s$, i%, 1)) &gt;= ASC \"a\" AND ASC(MID$(s$, i%, 1)) &lt;= ASC \"z\" THEN ns$ += CHR$(ASC(MID$(s$, i%, 1)) - &amp;20) ELSE ns$ += MID$(s$, i%, 1)<br/>NEXT<br/>= ns$</pre>"}, {"lang": "Bracmat", "loc": 102, "block": "<pre class=\"text highlighted_source\">( {Comparing two strings for exact equality}<br/>&amp; ( ( @(abc:abc)<br/>    &amp; @(123:%123)<br/>    {Previous pairs of strings are exactly equal}<br/>    )<br/>  &amp; ( @(abc:Abc)<br/>    | @(123:%246/2)<br/>    | @(abc:ab)<br/>    | @(123:%12)<br/>    | {Previous pairs of strings are not exactly equal}<br/>    )<br/>  )<br/>  {Comparing two strings for inequality (i.e., the inverse of exact equality)}<br/>&amp; ( ( @(abc:~&lt;&gt;abc)<br/>    &amp; @(abc:~&lt;&gt;Abc)<br/>      {Previous pairs of strings are more or less equal}<br/>    )<br/>  &amp; ( @(abc:~&lt;&gt;ab)<br/>    | {Previous pairs of strings are not more or less equal}<br/>    )<br/>  )<br/>  {Comparing two strings to see if one is lexically ordered before than the other}<br/>&amp; ( ( @(Abc:&lt;abc)<br/>    &amp; @(Abc:&lt;a)<br/>    &amp; @(123:&lt;%246/2)<br/>    &amp; @(123:&lt;%2)<br/>    &amp; @(12:&lt;%123)<br/>    &amp; @(ab:&lt;abc)<br/>      {Previous pairs of strings are lexically ordered one before the other}<br/>    )<br/>  &amp; ( @(abc:&lt;abc)<br/>    | @(abc:&lt;Abc)<br/>    | @(246/2:&lt;%123)<br/>    | @(abc:&lt;ab)<br/>    | @(123:&lt;%12)<br/>    | @(123:&lt;%123)<br/>    | {Previous pairs of strings are not lexically ordered one before the other}<br/>    )<br/>  )<br/>  {Comparing two strings to see if one is lexically ordered after than the other}<br/>&amp; ( ( @(abc:&gt;Abc)<br/>    &amp; @(a:&gt;Abc)<br/>    &amp; @(246/2:&gt;%123)<br/>    &amp; @(2:&gt;%123)<br/>    &amp; @(123:&gt;%12)<br/>    &amp; @(abc:&gt;ab)<br/>      {Previous pairs of strings are lexically ordered one after the other}<br/>    )<br/>  &amp; ( @(abc:&gt;abc)<br/>    | @(Abc:&gt;abc)<br/>    | @(123:&gt;%246/2)<br/>    | @(ab:&gt;abc)<br/>    | @(12:&gt;%123)<br/>    | @(123:&gt;%123)<br/>    | {Previous pairs of strings are not lexically ordered one after the other}<br/>    )<br/>  )<br/>  {How to achieve both case sensitive comparisons and case insensitive comparisons within<br/>   the language}<br/>&amp; ( ( @(abc:~&lt;&gt;abc)<br/>    &amp; @(abc:~&lt;&gt;Abc)<br/>    &amp; @(\u0411\u042a\u041b\u0413\u0410\u0420\u0421\u041a\u0418:~&lt;&gt;\u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438)<br/>      {Previous pairs of strings are more or less equal}<br/>    )<br/>  &amp; ( @(abc:~&lt;&gt;ab)<br/>    | {Previous pairs of strings are not more or less equal}<br/>    )<br/>  )<br/>  {How the language handles comparison of numeric strings if these are not treated lexically}<br/>&amp; ( ( @(246/2:123)<br/>    &amp; @(2:&lt;123)<br/>    &amp; @(123:&gt;12)<br/>    &amp; @(123:246/2)<br/>    &amp; @(12:&lt;123)<br/>      {Previous numeric string comparisons succeed}<br/>    )<br/>  &amp; ( @(123:&lt;246/2)<br/>    | @(12:&gt;123)<br/>    | @(123:&gt;123)<br/>    | @(123:~123)<br/>    | {Previous numeric string comparisons fail}<br/>    )<br/>  )<br/>  {Demonstrate any other kinds of string comparisons that the language provides, particularly<br/>as it relates to your type system. For example, you might demonstrate the difference between<br/>generic/polymorphic comparison and coercive/allomorphic comparison if your language supports<br/>such a distinction.}<br/>&amp; ( ( @(246/2:&gt;12--3)<br/>    &amp; @(2:&gt;123kg)<br/>    &amp; @(123:&lt;12d)<br/>    &amp; @(123:~24/6/2)<br/>    &amp; @(12a:&gt;123)<br/>      {Previous coercive string comparisons succeed}<br/>    )<br/>  &amp; ( @(2013-05-01:20130501)<br/>    | @(246/2a:123a)<br/>    | @(1239:&lt;123-)<br/>    | {Previous coercive string comparisons fail}<br/>    )<br/>  )<br/>&amp; done<br/>);</pre>"}, {"lang": "Burlesque", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) \"abc\"\"abc\"==<br/>1<br/>blsq ) \"abc\"\"abc\"!=<br/>0<br/>blsq ) \"abc\"\"Abc\"cm<br/>1<br/>blsq ) \"ABC\"\"Abc\"cm<br/>-1<br/>\u00a0</pre>"}, {"lang": "C", "loc": 4, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* WRONG! */</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> action_on_equality<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> demo_compare<span class=\"br0\">(</span><span class=\"kw4\">const</span> T <span class=\"sy3\">&amp;</span>a, <span class=\"kw4\">const</span> T <span class=\"sy3\">&amp;</span>b, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>semantically<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" are \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy1\">==</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span><br/>              <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"exactly \"</span> <span class=\"sy1\">&lt;&lt;</span> semantically <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" equal.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" are \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy3\">!</span><span class=\"sy1\">=</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span><br/>              <span class=\"sy1\">&lt;&lt;</span> semantically <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"inequal.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> semantically<br/>              <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ordered before \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'.'</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> semantically<br/>              <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ordered after \"</span> <span class=\"sy1\">&lt;&lt;</span> b <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'.'</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Case-sensitive comparisons.</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> a<span class=\"br0\">(</span><span class=\"br0\">(</span>argc <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"1.2.Foo\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> b<span class=\"br0\">(</span><span class=\"br0\">(</span>argc <span class=\"sy1\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"1.3.Bar\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    demo_compare<span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>a, b, <span class=\"st0\">\"lexically\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Case-insensitive comparisons by folding both strings to a common case.</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy4\">::</span><span class=\"kw3\">tolower</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy4\">::</span><span class=\"kw3\">tolower</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    demo_compare<span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>a, b, <span class=\"st0\">\"lexically\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Numeric comparisons; here 'double' could be any type for which the</span><br/>    <span class=\"co1\">// relevant &gt;&gt; operator is defined, eg int, long, etc.</span><br/>    <span class=\"kw4\">double</span> numA, numB<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> numA<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> numB<span class=\"sy4\">;</span><br/>    demo_compare<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>numA, numB, <span class=\"st0\">\"numerically\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy1\">==</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clipper", "loc": 12, "block": "<pre class=\"text highlighted_source\">   IF s1 == s2<br/>     \u00a0? \"The strings are equal\"<br/>   ENDIF<br/>   IF .NOT. (s1 == s2)<br/>     \u00a0? \"The strings are not equal\"<br/>   ENDIF<br/>   IF s1 &gt; s2<br/>     \u00a0? \"s2 is lexically ordered before than s1\"<br/>   ENDIF<br/>   IF s1 &lt; s2<br/>     \u00a0? \"s2 is lexically ordered after than s1\"<br/>   ENDIF</pre>"}, {"lang": "COBOL", "loc": 3, "block": "<pre class=\"cobol highlighted_source\"><span class=\"st0\">\"hello\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span>   *&gt; equality<br/><span class=\"st0\">\"helloo\"</span> &lt;&gt; <span class=\"st0\">\"hello\"</span> *&gt; inequality<br/><span class=\"st0\">\"aello\"</span> &lt; <span class=\"st0\">\"hello\"</span>   *&gt; lexical ordering</pre>"}, {"lang": "ColdFusion", "loc": 24, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cffunction</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"CompareString\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"String1\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"string\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"String2\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"string\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">LT</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is less than '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">LTE</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is less than or equal to '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">GT</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is greater than '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">GTE</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is greater than or equal to '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">EQ</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is equal to '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> ARGUMENTS.String1 <span class=\"kw7\">NEQ</span> ARGUMENTS.String2 <span class=\"sy0\">&gt;</span></span><br/>\t    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> VARIABLES.Result <span class=\"sy0\">=</span> VARIABLES.Result <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"('\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String1 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is not equal to '\"</span> <span class=\"sy0\">&amp;</span> ARGUMENTS.String2 <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"')\"</span> <span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfreturn</span> VARIABLES.Result <span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cffunction</span><span class=\"sy0\">&gt;</span></span></pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/>T<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"FOO\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NIL</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string/<span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string/<span class=\"sy0\">=</span> <span class=\"st0\">\"bar\"</span> <span class=\"st0\">\"baz\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string/<span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NIL</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"Foo\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&lt;</span> <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"Foo\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NIL</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&gt;=</span> <span class=\"st0\">\"FOo\"</span> <span class=\"st0\">\"Foo\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NIL</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&lt;=</span> <span class=\"st0\">\"FOo\"</span> <span class=\"st0\">\"Foo\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span></pre>"}, {"lang": "Component Pascal", "loc": 31, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> StringComparision;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tstr1<span class=\"sy0\">,</span>str2<span class=\"sy0\">,</span>aux1<span class=\"sy0\">,</span>aux2<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tstr1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"abcde\"</span>;str2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"abcde\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 <span class=\"sy0\">=</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tstr2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"abcd\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 <span class=\"sy0\">=</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" greater than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &gt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" lower than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &lt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>\tstr2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"ABCDE\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 <span class=\"sy0\">=</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" greater than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &gt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" lower than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &lt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>\tStrings.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span>str1<span class=\"sy0\">,</span>aux1<span class=\"br0\">)</span>;Strings.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span>str2<span class=\"sy0\">,</span>aux2<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals (case insensitive) \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>aux1 <span class=\"sy0\">=</span> aux2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>\tstr1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"01234\"</span>;str2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"01234\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 <span class=\"sy0\">=</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tstr2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"0123\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" equals \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 <span class=\"sy0\">=</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" greater than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &gt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>str1<span class=\"sy0\">+</span><span class=\"st0\">\" lower than \"</span> <span class=\"sy0\">+</span> str2  <span class=\"sy0\">+</span> <span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>str1 &lt; str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> StringComparision.</pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Comparing two strings for exact equality */</span><br/>    <span class=\"kw2\">assert</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"st0\">\"abcd\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// same object</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Comparing two strings for inequality */</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s <span class=\"sy0\">!=</span> <span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// different objects</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Comparing the lexical order of two strings;<br/>    -1 means smaller, 0 means equal, 1 means larger */</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">icmp</span><span class=\"br0\">(</span><span class=\"st0\">\"Bcde\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case insensitive</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">cmp</span><span class=\"br0\">(</span><span class=\"st0\">\"Bcde\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case sensitive</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">icmp</span><span class=\"br0\">(</span><span class=\"st0\">\"Aabc\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case insensitive</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">cmp</span><span class=\"br0\">(</span><span class=\"st0\">\"Aabc\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case sensitive</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">icmp</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case insensitive</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">cmp</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// case sensitive    </span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 20, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>compareStrings = (:val1\u00a0:val2)<br/>[<br/>    if (val1 == val2) [ console printLine(\"The strings \",val1,\" and \",val2,\" are equal\") ].<br/>    if (val1\u00a0!= val2) [ console printLine(\"The strings \",val1,\" and \",val2,\" are not equal\") ].<br/>    if (val1  &gt; val2) [ console printLine(\"The string \",val1,\" is lexically after than \",val2) ].<br/>    if (val1  &lt; val2) [ console printLine(\"The string \",val1,\" is lexically before than \",val2) ].<br/>    if (val1 &gt;= val2) [ console printLine(\"The string \",val1,\" is not lexically before than \",val2) ].<br/>    if (val1 &lt;= val2) [ console printLine(\"The string \",val1,\" is not lexically after than \",val2) ].<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    var s1\u00a0:= \"this\".<br/>    var s2\u00a0:= \"that\".<br/>    compareStrings eval(s1,s2).<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">s = \"abcd\"<br/>s == \"abcd\"         #=&gt; true<br/>s == \"abce\"         #=&gt; false<br/>s\u00a0!= \"abcd\"         #=&gt; false<br/>s\u00a0!= \"abce\"         #=&gt; true<br/>s &gt;  \"abcd\"         #=&gt; false<br/>s &lt;  \"abce\"         #=&gt; true<br/>s &gt;= \"abce\"         #=&gt; false<br/>s &lt;= \"abce\"         #=&gt; true</pre>"}, {"lang": "Erlang", "loc": 14, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"nu0\">10</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">V</span> <span class=\"sy3\">=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy1\">.</span><br/><span class=\"st0\">\"abcd\"</span><br/><span class=\"nu0\">11</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">V</span> <span class=\"sy3\">=:=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy1\">.</span><br/>true<br/><span class=\"nu0\">12</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">V</span> <span class=\"sy3\">=/=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy1\">.</span><br/>false<br/><span class=\"nu0\">13</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">V</span> <span class=\"sy3\">&lt;</span> <span class=\"st0\">\"b\"</span><span class=\"sy1\">.</span><br/>true<br/><span class=\"nu0\">15</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">V</span> <span class=\"sy3\">&gt;</span> <span class=\"st0\">\"aa\"</span><span class=\"sy1\">.</span><br/>true<br/><span class=\"nu0\">16</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>true<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 2, "block": "<pre class=\"fortran highlighted_source\">      PRINT <span class=\"nu0\">42</span>,N<br/>   <span class=\"nu0\">42</span> FORMAT <span class=\"br0\">(</span>14HThe answer is ,I9<span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 40, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0</span><br/>\u00a0<br/><span class=\"co1\">' Strings in FB natively support the relational operators which compare lexically on a case-sensitive basis.</span><br/><span class=\"co1\">' There are no special provisions for numerical strings.</span><br/><span class=\"co1\">' There are no other types of string comparison for the built-in types though 'user defined types'</span><br/><span class=\"co1\">' can specify their own comparisons by over-loading the relational operators.</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> StringCompare<span class=\"br0\">(</span>s1 <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, s2 <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, ignoreCase <span class=\"kw1\">As</span> Boolean = <span class=\"kw1\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> s, t <span class=\"co1\">' need new string variables as the strings passed in can't be changed</span><br/>  <span class=\"kw1\">If</span> ignoreCase <span class=\"kw1\">Then</span><br/>    s = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>    t = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    s = s1<br/>    t = s2<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">If</span> s &lt; t <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\" comes before \"</span><br/>  <span class=\"kw1\">If</span> s = t <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\" is equal to \"</span><br/>  <span class=\"kw1\">Return</span> <span class=\"st0\">\" comes after \"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> result<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> s1, s2, s3<br/>s1 = <span class=\"st0\">\"Dog\"</span>\u00a0: s2 = <span class=\"st0\">\"Dog\"</span><br/><span class=\"kw1\">Print</span> s1; StringCompare<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span>; s2<br/>s2 = <span class=\"st0\">\"Cat\"</span><br/><span class=\"kw1\">Print</span> s1; StringCompare<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span>; s2<br/>s2 = <span class=\"st0\">\"Rat\"</span><br/><span class=\"kw1\">Print</span> s1; StringCompare<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span>; s2<br/>s2 = <span class=\"st0\">\"dog\"</span><br/><span class=\"kw1\">Print</span> s1; StringCompare<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span>; s2<br/><span class=\"kw1\">Print</span> s1; StringCompare<span class=\"br0\">(</span>s1, s2, <span class=\"kw1\">True</span><span class=\"br0\">)</span>; s2; <span class=\"st0\">\" if case is ignored\"</span><br/>s1  = <span class=\"st0\">\"Dog\"</span>\u00a0: s2 = <span class=\"st0\">\"Pig\"</span><br/>s3 = StringCompare<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> s3 &lt;&gt; <span class=\"st0\">\" is equal to \"</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> s1; <span class=\"st0\">\" is not equal to \"</span>; s2<br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 33, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"co1\">// self defined operators for case insensitive comparison</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>~<span class=\"br0\">)</span> a b  <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span>~<span class=\"br0\">)</span> a b <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span>~<span class=\"br0\">)</span> a b  <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span>~<span class=\"br0\">)</span> a b <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span>~<span class=\"br0\">)</span> a b  <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span>~<span class=\"br0\">)</span> a b <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>a, b, StringComparison.<span class=\"me1\">OrdinalIgnoreCase</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> compare a b <span class=\"sy0\">=</span>   <span class=\"co1\">// standard operators:</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span>  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is strictly less than\u00a0%s\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is less than or equal to\u00a0%s\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span>  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is strictly greater than\u00a0%s\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is greater than or equal to\u00a0%s\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">=</span>  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is equal to\u00a0%s\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;&gt;</span> b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is not equal to\u00a0%s\"</span> a b<br/>    <span class=\"co1\">// and our case insensitive self defined operators:</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span>~  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is strictly less than\u00a0%s (case insensitive)\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span>~ b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is less than or equal to\u00a0%s (case insensitive)\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span>~  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is strictly greater than\u00a0%s (case insensitive)\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span>~ b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is greater than or equal to\u00a0%s (case insensitive)\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">=</span>~  b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is equal to\u00a0%s (case insensitive)\"</span> a b<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;&gt;</span>~ b <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%s is not equal to\u00a0%s (case insensitive)\"</span> a b<br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    compare <span class=\"st0\">\"YUP\"</span> <span class=\"st0\">\"YUP\"</span><br/>    compare <span class=\"st0\">\"BALL\"</span> <span class=\"st0\">\"BELL\"</span><br/>    compare <span class=\"st0\">\"24\"</span> <span class=\"st0\">\"123\"</span><br/>    compare <span class=\"st0\">\"BELL\"</span> <span class=\"st0\">\"bELL\"</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 18, "block": "<pre class=\"text highlighted_source\">USING: ascii math.order sorting.human\u00a0;<br/>\u00a0<br/>IN: scratchpad \"foo\" \"bar\" = .\u00a0! compare for equality<br/>f<br/>IN: scratchpad \"foo\" \"bar\" = not .\u00a0! compare for inequality<br/>t<br/>IN: scratchpad \"foo\" \"bar\" before? .\u00a0! lexically ordered before?<br/>f<br/>IN: scratchpad \"foo\" \"bar\" after? .\u00a0! lexically ordered after?<br/>t<br/>IN: scratchpad \"Foo\" \"foo\" &lt;=&gt; .\u00a0! case-sensitive comparison<br/>+lt+<br/>IN: scratchpad \"Foo\" \"foo\" [ &gt;lower ] <a class=\"__cf_email__\" data-cfemail=\"7c1e153c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt;=&gt; .\u00a0! case-insensitive comparison<br/>+eq+<br/>IN: scratchpad \"a1\" \"a03\" &lt;=&gt; .\u00a0! comparing numeric strings<br/>+gt+<br/>IN: scratchpad \"a1\" \"a03\" human&lt;=&gt; .\u00a0! comparing numeric strings like a human<br/>+lt+</pre>"}, {"lang": "Falcon", "loc": 37, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>e <span class=\"sy0\">=</span> <span class=\"st0\">\"early\"</span><br/>l <span class=\"sy0\">=</span> <span class=\"st0\">\"toast\"</span><br/>g <span class=\"sy0\">=</span> <span class=\"st0\">\"cheese\"</span><br/>b <span class=\"sy0\">=</span> <span class=\"st0\">\"cheese\"</span><br/>e2 <span class=\"sy0\">=</span> <span class=\"st0\">\"early\"</span><br/>num1 <span class=\"sy0\">=</span> <span class=\"nu0\">123</span><br/>num2 <span class=\"sy0\">=</span> <span class=\"nu0\">456</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> e <span class=\"sy0\">==</span> e2 <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$e equals $e2\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$e does not equal $e2\"</span><br/><span class=\"sy0\">&gt;</span> e\u00a0!<span class=\"sy0\">=</span> e2 <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$e does not equal $e2\"</span><span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$e equals $e2\"</span><br/><span class=\"co1\">// produces -1 for less than</span><br/><span class=\"sy0\">&gt;</span> b.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is grater than $l\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$l is grater than $b\"</span><br/><span class=\"co1\">// produces 1 for greater than</span><br/><span class=\"sy0\">&gt;</span> l.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$l is grater than $b\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is grater than $l\"</span><br/><span class=\"co1\">// produces 0 for equal (but could be greater than or equal)</span><br/><span class=\"sy0\">&gt;</span> b.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw3\">or</span> b.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is grater than or equal to $g\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is not &gt;= $g\"</span><br/><span class=\"co1\">// produces 0 for equal (but could be less than or equal)</span><br/><span class=\"sy0\">&gt;</span>b.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">or</span> b.<span class=\"me0\">cmpi</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is less than or equal to $g\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$b is not &lt;= $g\"</span><br/>\u00a0<br/><span class=\"kw1\">function</span> NumCompare<span class=\"br0\">(</span>num1<span class=\"sy0\">,</span> num2<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> num1 <span class=\"sy0\">&lt;</span> num2<br/>\t\tans <span class=\"sy0\">=</span> <span class=\"st0\">\" &lt; \"</span><br/>\t<span class=\"kw1\">elif</span> num1 <span class=\"sy0\">&gt;</span> num2<br/>\t\tans <span class=\"sy0\">=</span>  <span class=\"st0\">\" &gt; \"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tans <span class=\"sy0\">=</span>  <span class=\"st0\">\" = \"</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> ans<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>result <span class=\"sy0\">=</span> NumCompare<span class=\"br0\">(</span>num1<span class=\"sy0\">,</span> num2<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$num1 $result $num2\"</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: str-eq  ( str len str len --\u00a0? ) compare 0=\u00a0;<br/>: str-neq ( str len str len --\u00a0? ) compare 0&lt;&gt;\u00a0;<br/>: str-lt  ( str len str len --\u00a0? ) compare 0&lt;\u00a0;<br/>: str-gt  ( str len str len --\u00a0? ) compare 0&gt;\u00a0;<br/>: str-le  ( str len str len --\u00a0? ) compare 0&lt;=\u00a0;<br/>: str-ge  ( str len str len --\u00a0? ) compare 0&gt;=\u00a0;</pre>"}, {"lang": "Go", "loc": 50, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Go language string comparison operators:</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"st0\">\"cat\"</span><br/>    d <span class=\"sy2\">:=</span> <span class=\"st0\">\"dog\"</span><br/>    <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is bytewise identical to\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> c <span class=\"sy2\">!=</span> d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is bytewise different from\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> c &gt; d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is lexically bytewise greater than\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> c &lt; d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is lexically bytewise less than\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> c &gt;<span class=\"sy2\">=</span> d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is lexically bytewise greater than or equal to\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> c &lt;<span class=\"sy2\">=</span> d <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"is lexically bytewise less than or equal to\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Go is strongly typed and will not directly compare a value of string</span><br/>    <span class=\"co1\">// type to a value of numeric type.</span><br/>\u00a0<br/>    <span class=\"co1\">// A case insensitive compare can be done with a function in the strings</span><br/>    <span class=\"co1\">// package in the Go standard library:</span><br/>    eqf <span class=\"sy2\">:=</span> <span class=\"co2\">`when interpreted as UTF-8 and compared under Unicode<br/>simple case folding rules.`</span><br/>    <span class=\"kw1\">if</span> strings<span class=\"sy3\">.</span>EqualFold<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> d<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"equal to\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> eqf<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> <span class=\"st0\">\"not equal to\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> eqf<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Seeing that the built in operators work bytewise and the library</span><br/>    <span class=\"co1\">// case folding functions interpret UTF-8, you might then ask about</span><br/>    <span class=\"co1\">// other equality and inequality tests that interpret UTF-8.</span><br/>    <span class=\"co1\">// Functions for this are not in the Go standard library but are in</span><br/>    <span class=\"co1\">// the Go \"sub repository\" at golang.org/x/text.  There is support</span><br/>    <span class=\"co1\">// for Unicode normalization, collation tables, and locale sensitive</span><br/>    <span class=\"co1\">// comparisons.</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Harbour", "loc": 12, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">IF</span> s1 <span class=\"sy0\">==</span> s2<br/>   <span class=\"sy0\">?</span> <span class=\"st0\">\"The strings are equal\"</span><br/><span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">IF</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span> s1 <span class=\"sy0\">==</span> s2 <span class=\"br0\">)</span><br/>   <span class=\"sy0\">?</span> <span class=\"st0\">\"The strings are not equal\"</span><br/><span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">IF</span> s1 <span class=\"sy0\">&gt;</span> s2<br/>   <span class=\"sy0\">?</span> <span class=\"st0\">\"s2 is lexically ordered before than s1\"</span><br/><span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">IF</span> s1 <span class=\"sy0\">&lt;</span> s2<br/>   <span class=\"sy0\">?</span> <span class=\"st0\">\"s2 is lexically ordered after than s1\"</span><br/><span class=\"kw1\">ENDIF</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"abc\"</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> <span class=\"sy0\">/=</span> <span class=\"st0\">\"abc\"</span><br/>False<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">\"abcd\"</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">\"abC\"</span><br/>False<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"HELLOWORLD\"</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"HelloWorld\"</span><br/>False<br/><span class=\"sy0\">&gt;</span>\u00a0:m <span class=\"sy0\">+</span>Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/><span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower <span class=\"st0\">\"ABC\"</span><br/><span class=\"st0\">\"abc\"</span><br/><span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower <span class=\"st0\">\"HELLOWORLD\"</span> <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower <span class=\"st0\">\"HelloWorld\"</span><br/>True<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    s1 <span class=\"sy0\">:=</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"a\"</span><br/>    s2 <span class=\"sy0\">:=</span> A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"b\"</span><br/>    <span class=\"co1\"># These first four are case-sensitive</span><br/>    s1 <span class=\"sy0\">==</span> s2        <span class=\"co1\"># Are they equal?</span><br/>    s1 <span class=\"sy0\">~==</span> s2       <span class=\"co1\"># Are they unequal?</span><br/>    s1 <span class=\"sy0\">&lt;&lt;</span> s2         <span class=\"co1\"># Does s1 come before s2?</span><br/>    s1 <span class=\"sy0\">&gt;&gt;</span> s2         <span class=\"co1\"># Does s1 come after s2?</span><br/>    <span class=\"kw4\">map</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>  <span class=\"co1\"># Caseless comparison</span><br/>    <span class=\"st0\">\"123\"</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"st0\">\"12\"</span>    <span class=\"co1\"># Lexical comparison</span><br/>    <span class=\"st0\">\"123\"</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"12\"</span>     <span class=\"co1\"># Numeric comparison</span><br/>    <span class=\"st0\">\"123\"</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">12</span>      <span class=\"co1\"># Lexical comparison (12 coerced into \"12\")</span><br/>    <span class=\"st0\">\"123\"</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span>       <span class=\"co1\"># Numeric comparison (\"123\" coerced into 123)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">eq=: -:                         <span class=\"co1\">NB. equal</span><br/>ne=: <a class=\"__cf_email__\" data-cfemail=\"b4999af499\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:                      <span class=\"co1\">NB. not equal</span><br/>gt=: {<a class=\"__cf_email__\" data-cfemail=\"715f31\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/:@,&amp;boxopen *. ne      <span class=\"co1\">NB. lexically greater than</span><br/>lt=: <a class=\"__cf_email__\" data-cfemail=\"b99497f9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"c3ed83\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/:@,&amp;boxopen *. ne   <span class=\"co1\">NB. lexically less than</span><br/>ge=: {<a class=\"__cf_email__\" data-cfemail=\"a38de3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/:@,&amp;boxopen +. eq      <span class=\"co1\">NB. lexically greater than or equal to</span><br/>le=: <a class=\"__cf_email__\" data-cfemail=\"9eb3b0de\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"ecc2ac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/:@,&amp;boxopen         <span class=\"co1\">NB. lexically less than or equal to</span></pre>"}, {"lang": "Java", "loc": 38, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Compare<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        compare<span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span>, <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        compare<span class=\"br0\">(</span><span class=\"st0\">\"5\"</span>, <span class=\"st0\">\"5.0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        compare<span class=\"br0\">(</span><span class=\"st0\">\"java\"</span>, <span class=\"st0\">\"Java\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        compare<span class=\"br0\">(</span><span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span>, <span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        compare<span class=\"br0\">(</span><span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span>, <span class=\"st0\">\"\u0135\u00e3v\u00e1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> compare <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> A, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> B<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">equals</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' and '%s' are lexically equal.\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' and '%s' are not lexically equal.\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' and '%s' are case-insensitive lexically equal.\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' and '%s' are not case-insensitive lexically equal.\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' is lexically before '%s'.<span class=\"es0\">\\n</span>\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' is lexically after '%s'.<span class=\"es0\">\\n</span>\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' is not lexically before '%s'.<span class=\"es0\">\\n</span>\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' is not lexically after '%s'.<span class=\"es0\">\\n</span>\"</span>, A, B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The lexical relationship is:\u00a0%d<span class=\"es0\">\\n</span>\"</span>, A.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The case-insensitive lexical relationship is:\u00a0%d<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>, A.<span class=\"me1\">compareToIgnoreCase</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\"># Comparing two strings for exact equality:<br/>\"this\" == \"this\"     # true<br/>\"this\" == \"This\"     # false<br/>\u00a0<br/>#\u00a0!= is the inverse of ==<br/>\u00a0<br/># Comparing two strings to see if one is lexically ordered before the other:<br/>\"alpha\" &lt; \"beta\"     # true<br/>\"beta\" &lt; \"alpha\"     # false<br/>\u00a0<br/># &gt; is the inverse of &lt; </pre>"}, {"lang": "Julia", "loc": 17, "block": "<pre class=\"text highlighted_source\">function compare(a, b)<br/>    println(\"\\n$a is of type $(typeof(a)) and $b is of type $(typeof(b))\")<br/>    if a &lt;  b println(\"$a is strictly less than $b\") end<br/>    if a &lt;= b println(\"$a is less than or equal to $b\") end<br/>    if a &gt;  b println(\"$a is strictly greater than $b\") end<br/>    if a &gt;= b println(\"$a is greater than or equal to $b\") end<br/>    if a == b println(\"$a is equal to $b\") end<br/>    if a\u00a0!= b println(\"$a is not equal to $b\") end<br/>    if a === b println(\"$a has object identity with $b\") end<br/>    if a\u00a0!== b println(\"$a has negated object identity with $b\") end<br/>end<br/>\u00a0<br/>compare(\"YUP\", \"YUP\")<br/>compare('a', 'z')<br/>compare(\"24\", \"123\")<br/>compare(24, 123)<br/>compare(5.0, 5)</pre>"}, {"lang": "Kotlin", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k1 <span class=\"sy0\">=</span> <span class=\"st0\">\"kotlin\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k2 <span class=\"sy0\">=</span> <span class=\"st0\">\"Kotlin\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Case sensitive comparisons:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin and Kotlin are equal     = ${k1 == k2}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin and Kotlin are not equal = ${k1\u00a0!= k2}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin comes before Kotlin      = ${k1 &lt; k2}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin comes after Kotlin       = ${k1 &gt; k2}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Case insensitive comparisons:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin and Kotlin are equal     = ${k1 == k2.toLowerCase()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin and Kotlin are not equal = ${k1\u00a0!= k2.toLowerCase()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin comes before Kotlin      = ${k1 &lt; k2.toLowerCase()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"kotlin comes after Kotlin       = ${k1 &gt; k2.toLowerCase()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 36, "block": "<pre class=\"text highlighted_source\">// Comparing two strings for exact equality<br/>\"'this' == 'this': \" + ('this' == 'this') // true<br/>\"'this' == 'This': \" + ('this' == 'This') // true, as it's case insensitive<br/>\u00a0<br/>// Comparing two strings for inequality (i.e., the inverse of exact equality)<br/>\"'this'\u00a0!= 'this': \" + ('this'\u00a0!= 'this')// false<br/>\"'this'\u00a0!= 'that': \" + ('this'\u00a0!= 'that') // true<br/>\u00a0<br/>// Comparing two strings to see if one is lexically ordered before than the other<br/>\"'alpha' &lt; 'beta': \" + ('alpha' &lt; 'beta') // true<br/>\"'beta' &lt; 'alpha': \" + ('beta' &lt; 'alpha') // false<br/>\u00a0<br/>// Comparing two strings to see if one is lexically ordered after than the other<br/>\"'alpha' &gt; 'beta': \" + ('alpha' &gt; 'beta') // false<br/>\"'beta' &gt; 'alpha': \" + ('beta' &gt; 'alpha') // true<br/>\u00a0<br/>// How to achieve both case sensitive comparisons and case insensitive comparisons within the language<br/>\"case sensitive - 'this'-&gt;equals('This',-case=true): \" + ('this'-&gt;equals('This',-case=true)) // false<br/>\"case insensitive - 'this'-&gt;equals('This',-case=true): \" + ('this'-&gt;equals('This')) // true<br/>\u00a0<br/>// How the language handles comparison of numeric strings if these are not treated lexically<br/>\"'01234' == '01234': \"+ ('01234' == '01234') // true<br/>\"'01234' == '0123': \" + ('01234' == '0123') // false<br/>\"'01234' &gt; '0123': \" + ('01234' &gt; '0123') // true<br/>\"'01234' &lt; '0123': \" + ('01234' &lt; '0123') //false<br/>\u00a0<br/>// Additional string comparisons <br/>\"'The quick brown fox jumps over the rhino' &gt;&gt; 'fox' (contains): \" + <br/>    ('The quick brown fox jumps over the rhino' &gt;&gt; 'fox') // true<br/>\"'The quick brown fox jumps over the rhino' &gt;&gt; 'cat' (contains): \" + <br/>    ('The quick brown fox jumps over the rhino' &gt;&gt; 'cat') // false<br/>\"'The quick brown fox jumps over the rhino'-&gt;beginswith('rhino'): \" + <br/>    ('The quick brown fox jumps over the rhino'-&gt;beginswith('rhino')) // false<br/>\"'The quick brown fox jumps over the rhino'-&gt;endswith('rhino'): \" + <br/>    ('The quick brown fox jumps over the rhino'-&gt;endswith('rhino')) // true<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 11, "block": "<pre class=\"text highlighted_source\">put \"abc\"=\"ABC\"<br/>-- 1<br/>\u00a0<br/>put \"abc\"&lt;&gt;\"def\"<br/>-- 1<br/>\u00a0<br/>put \"abc\"&lt;\"def\"<br/>-- 1<br/>\u00a0<br/>put \"abc\"&gt;\"def\"<br/>-- 0</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> compare<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"%s is of type\u00a0%s and\u00a0%s is of type\u00a0%s\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span><br/>        a<span class=\"sy0\">,</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        b<span class=\"sy0\">,</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span>  b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is strictly less than\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is less than or equal to\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span>  b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is strictly greater than\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is greater than or equal to\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">==</span> b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is equal to\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">~=</span> b <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'%s is not equal to\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st0\">'YUP'</span><span class=\"sy0\">,</span> <span class=\"st0\">'YUP'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'BALL'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BELL'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'24'</span><span class=\"sy0\">,</span> <span class=\"st0\">'123'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">123</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 19, "block": "<pre class=\"text highlighted_source\">compare[x_, y_]\u00a0:= Module[{},<br/>  If[x == y, <br/>   Print[\"Comparing for equality (case sensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" ARE equal\"], <br/>   Print[\"Comparing for equality (case sensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" are NOT equal\" ]]\u00a0;<br/>  If[x\u00a0!= y, <br/>   Print[\"Comparing for inequality (case sensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" are NOT equal\"], <br/>   Print[\"Comparing for inequality (case sensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" ARE equal\" ]]\u00a0;<br/>  Switch[Order[x, y], <br/>    1, Print[\"Comparing for order (case sensitive): \" &lt;&gt; x &lt;&gt; \" comes before \" &lt;&gt; y], <br/>   -1, Print[\"Comparing for order (case sensitive): \" &lt;&gt; x &lt;&gt; \" comes after \" &lt;&gt; y], <br/>    0, Print[\"Comparing for order (case sensitive): \" &lt;&gt; x &lt;&gt; \" comes in the same spot as \" &lt;&gt; y]];<br/>  If[ToLowerCase[x] == ToLowerCase[y], <br/>   Print[\"Comparing for equality (case insensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" ARE equal\"], <br/>   Print[\"Comparing for equality (case insensitive): \" &lt;&gt; x &lt;&gt; \" and \" &lt;&gt; y &lt;&gt; \" are NOT equal\" ]]\u00a0;<br/>  Print[];<br/>  ]<br/>compare[\"Hello\", \"Hello\"]<br/>compare[\"3.1\", \"3.14159\"]<br/>compare[\"mathematica\", \"Mathematica\"]</pre>"}, {"lang": "NetRexx", "loc": 24, "block": "<pre class=\"netrexx highlighted_source\">animal = <span class=\"st0\">'dog'</span><br/><span class=\"kw1\">if</span> animal = <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is lexically equal to cat\"</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">\\</span>= <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is not lexically equal cat\"</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&gt;</span> <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is lexically higher than cat\"</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&lt;</span> <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is lexically lower than cat\"</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&gt;</span>= <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is not lexically lower than cat\"</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&lt;</span>= <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> animal <span class=\"st0\">\"is not lexically higher than cat\"</span><br/><span class=\"coMULTI\">/* The above comparative operators do not consider<br/>   leading and trailing whitespace when making comparisons. */</span><br/><span class=\"kw1\">if</span> <span class=\"st0\">'  cat  '</span> = <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"this will print because whitespace is stripped\"</span><br/>\u00a0<br/><span class=\"coMULTI\">/* To consider all whitespace in a comparison<br/>   we need to use strict comparative operators */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"st0\">'  cat  '</span> == <span class=\"st0\">'cat'</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"this will not print because comparison is strict\"</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>var s1: string = \"The quick brown\"<br/>var s2: string = \"The Quick Brown\"<br/>echo(\"==\u00a0: \", s1 == s2)<br/>echo(\"!=\u00a0: \", s1\u00a0!= s2)<br/>echo(\"&lt;\u00a0: \", s1 &lt; s2)<br/>echo(\"&lt;=\u00a0: \", s1 &lt;= s2)<br/>echo(\"&gt;\u00a0: \", s1 &gt; s2)<br/>echo(\"&gt;=\u00a0: \", s1 &gt;= s2)</pre>"}, {"lang": "Oforth", "loc": 5, "block": "<pre class=\"text highlighted_source\">\"abcd\" \"abcd\" ==<br/>\"abcd\" \"abce\" &lt;&gt;<br/>\"abcd\" \"abceed\" &lt;= <br/>\"abce\" \"abcd\" &gt;<br/>\"abcEEE\" toUpper \"ABCeee\" toUpper ==</pre>"}, {"lang": "ooRexx", "loc": 5, "block": "<pre class=\"text highlighted_source\">a=.array~of('A 1','B 2','a 3','b 3','A 5')<br/>a~sortwith(.caselesscomparator~new)<br/>Do i=1 To 5<br/>  Say a[i]<br/>  End</pre>"}, {"lang": "PARI/GP", "loc": 25, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> v5<span class=\"sy0\">.</span>16<span class=\"sy0\">;</span>  <span class=\"co1\"># ...for fc(), which does proper Unicode casefolding.</span><br/>            <span class=\"co1\"># With older Perl versions you can use lc() as a poor-man's substitute.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> compare <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"'$a'\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"'$b'\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A and $B are lexically equal.<span class=\"es0\">\\n</span>\"</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A and $B are not lexically equal.<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is lexically before $B.<span class=\"es0\">\\n</span>\"</span>         <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is lexically after $B.<span class=\"es0\">\\n</span>\"</span>          <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">gt</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is not lexically before $B.<span class=\"es0\">\\n</span>\"</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ge</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is not lexically after $B.<span class=\"es0\">\\n</span>\"</span>      <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">le</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The lexical relationship is: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The case-insensitive lexical relationship is: \"</span><span class=\"sy0\">,</span> fc<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"kw1\">cmp</span> fc<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'Hello'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Hello'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'5'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'5.0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'perl'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Perl'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 25, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> v5<span class=\"sy0\">.</span>16<span class=\"sy0\">;</span>  <span class=\"co1\"># ...for fc(), which does proper Unicode casefolding.</span><br/>            <span class=\"co1\"># With older Perl versions you can use lc() as a poor-man's substitute.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> compare <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"'$a'\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"'$b'\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A and $B are lexically equal.<span class=\"es0\">\\n</span>\"</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A and $B are not lexically equal.<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is lexically before $B.<span class=\"es0\">\\n</span>\"</span>         <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is lexically after $B.<span class=\"es0\">\\n</span>\"</span>          <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">gt</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is not lexically before $B.<span class=\"es0\">\\n</span>\"</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ge</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$A is not lexically after $B.<span class=\"es0\">\\n</span>\"</span>      <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">le</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The lexical relationship is: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The case-insensitive lexical relationship is: \"</span><span class=\"sy0\">,</span> fc<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"kw1\">cmp</span> fc<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'Hello'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Hello'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'5'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'5.0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>compare<span class=\"br0\">(</span><span class=\"st_h\">'perl'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Perl'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 36, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> compare<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"{$a.WHAT.^name} '$a'\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"{$b.WHAT.^name} '$b'\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are lexically equal\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are not lexically equal\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">gt</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is lexically after $B\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is lexically before than $B\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">ge</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is not lexically before $B\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"kw1\">le</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is not lexically after $B\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">===</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are identical objects\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">!===</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are not identical objects\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> eqv <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are generically equal\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A and $B are not generically equal\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> before <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is generically after $B\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> after <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is generically before $B\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">!</span>after <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is not generically before $B\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">!</span>before <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$A is not generically after $B\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"The lexical relationship of $A and $B is { $a leg $b }\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">~~</span> Stringy<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"The generic relationship of $A and $B is { $a cmp $b }\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"The numeric relationship of $A and $B is { $a &lt;=&gt; $b }\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">~~</span> Numeric<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>compare <span class=\"st_h\">'YUP'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'YUP'</span><span class=\"sy0\">;</span><br/>compare <span class=\"st_h\">'BALL'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'BELL'</span><span class=\"sy0\">;</span><br/>compare <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span><br/>compare <span class=\"nu0\">5.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>compare 5<span class=\"sy0\">.</span>1e0<span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 6, "block": "<pre class=\"text highlighted_source\">if name==\"pete\" then\u00a0?\"The strings are equal\" end if<br/>if name!=\"pete\" then\u00a0?\"The strings are not equal\" end if<br/>if name&lt;\"pete\" then\u00a0?\"name is lexically first\" end if<br/>if name&gt;\"pete\" then\u00a0?\"name is lexically last\" end if<br/>if upper(name)=upper(\"pete\") then\u00a0?\"case insensitive match\" end if<br/>if match(\"pete\",lower(name)) then\u00a0?\"petes in there somewhere\" end if</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(setq<br/>   str= =<br/>   str&lt; &lt; <br/>   str&gt; &gt; )<br/>\u00a0<br/>(println <br/>   (str= (lowc \"Foo\") (lowc \"foo\") (lowc \"fOO\"))<br/>   (str= \"f\" \"foo\")<br/>   (str= \"foo\" \"foo\" \"foo\")<br/>   (str= \"\" \"\") )<br/>\u00a0<br/>(println<br/>   (str&lt; \"abc\" \"def\")<br/>   (str&gt; \"abc\" \"def\")<br/>   (str&lt; \"\" \"\")<br/>   (str&lt; \"12\" \"45\") )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-lt</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># lower than</span><br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-eq</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># equal</span><br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-gt</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># greater than</span><br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-le</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># lower than or equal</span><br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-ne</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># not equal</span><br/><span class=\"st0\">\"a\"</span> <span class=\"kw4\">-ge</span> <span class=\"st0\">\"b\"</span>  <span class=\"co1\"># greater than or equal</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 37, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> StrTest<span class=\"br0\">(</span>Check,tof<span class=\"br0\">)</span>  <br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Test \"</span><span class=\"sy0\">+</span>Check<span class=\"sy0\">+</span>#TAB$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> tof<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"true\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"false\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b StrBool_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>  \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>a$<span class=\"sy0\">=</span>b$<span class=\"br0\">)</span>            \u00a0:   <span class=\"kw1\">EndProcedure</span><br/><span class=\"kw1\">Procedure</span>.b StrBool_n_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>\u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>a$<span class=\"sy0\">&lt;&gt;</span>b$<span class=\"br0\">)</span>           \u00a0:   <span class=\"kw1\">EndProcedure</span><br/><span class=\"kw1\">Procedure</span>.b StrBool_a<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>   \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>a$<span class=\"sy0\">&gt;</span>b$<span class=\"br0\">)</span>            \u00a0:   <span class=\"kw1\">EndProcedure</span>  <br/><span class=\"kw1\">Procedure</span>.b StrBool_b<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>   \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>a$<span class=\"sy0\">&lt;</span>b$<span class=\"br0\">)</span>            \u00a0:   <span class=\"kw1\">EndProcedure</span><br/><span class=\"kw1\">Procedure</span>.b NumBool_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>  \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span>  \u00a0:   <span class=\"kw1\">EndProcedure</span><br/><span class=\"kw1\">Procedure</span>.b NumBool_n_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>\u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span> \u00a0:   <span class=\"kw1\">EndProcedure</span><br/><span class=\"kw1\">Procedure</span>.b NumBool_a<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>   \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span>  \u00a0:   <span class=\"kw1\">EndProcedure</span>  <br/><span class=\"kw1\">Procedure</span>.b NumBool_b<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span>   \u00a0:   <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span>  \u00a0:   <span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Compare<span class=\"br0\">(</span>a$,b$,cs.b<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,num.b<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> cs\u00a0: a$<span class=\"sy0\">=</span><span class=\"kw2\">UCase</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span>\u00a0: b$<span class=\"sy0\">=</span><span class=\"kw2\">UCase</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"a = \"</span><span class=\"sy0\">+</span>a$<span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"b = \"</span><span class=\"sy0\">+</span>b$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> num \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a=b \"</span>,StrBool_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>    \u00a0:   <span class=\"kw1\">Else</span> \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a=b \"</span>,NumBool_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>    \u00a0:   <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> num \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&lt;&gt;b \"</span>,StrBool_n_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span> \u00a0:   <span class=\"kw1\">Else</span> \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&lt;&gt;b \"</span>,NumBool_n_eq<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span> \u00a0:   <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> num \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&gt;b \"</span>,StrBool_a<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>     \u00a0:   <span class=\"kw1\">Else</span> \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&gt;b \"</span>,NumBool_a<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>     \u00a0:   <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> num \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&lt;b \"</span>,StrBool_b<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>     \u00a0:   <span class=\"kw1\">Else</span> \u00a0:   StrTest<span class=\"br0\">(</span><span class=\"st0\">\" a&lt;b \"</span>,NumBool_b<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><span class=\"br0\">)</span>     \u00a0:   <span class=\"kw1\">EndIf</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"String comparison - \"</span><span class=\"br0\">)</span><br/>  a$<span class=\"sy0\">=</span><span class=\"st0\">\"Abcd\"</span>\u00a0: b$<span class=\"sy0\">=</span><span class=\"st0\">\"abcd\"</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"- case sensitive:\"</span><span class=\"br0\">)</span><br/>  Compare<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"- case insensitive:\"</span><span class=\"br0\">)</span>  <br/>  Compare<span class=\"br0\">(</span>a$,b$,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  a$<span class=\"sy0\">=</span><span class=\"st0\">\"1241\"</span>\u00a0: b$<span class=\"sy0\">=</span><span class=\"st0\">\"222\"</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"- num-string; lexically compared:\"</span><span class=\"br0\">)</span><br/>  Compare<span class=\"br0\">(</span>a$,b$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"- num-string; numerically compared:\"</span><span class=\"br0\">)</span><br/>  Compare<span class=\"br0\">(</span>a$,b$,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> compare<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%r is of type\u00a0%r and\u00a0%r is of type\u00a0%r\"</span><br/>         \u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span>  b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is strictly less than \u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is less than or equal to\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span>  b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is strictly greater than \u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;=</span> b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is greater than or equal to\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">==</span> b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is equal to\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">!=</span> b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r is not equal to\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"kw1\">is</span> b:      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r has object identity with\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> b:  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r has negated object identity with\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st0\">'YUP'</span><span class=\"sy0\">,</span> <span class=\"st0\">'YUP'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'BALL'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BELL'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'24'</span><span class=\"sy0\">,</span> <span class=\"st0\">'123'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">123</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 19, "block": "<pre class=\"rsplus highlighted_source\">compare <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is of type\"</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/class.html\"><span class=\"kw2\">class</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>, <span class=\"st0\">\"and\"</span>, b, <span class=\"st0\">\"is of type\"</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/class.html\"><span class=\"kw2\">class</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span>, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is strictly less than\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;=</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is less than or equal to\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is strictly greater than\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;=</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is greater than or equal to\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is equal to\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">!=</span> b<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/cat.html\"><span class=\"kw2\">cat</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>a, <span class=\"st0\">\"is not equal to\"</span>, b, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/invisible.html\"><span class=\"kw2\">invisible</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>compare<span class=\"br0\">(</span><span class=\"st0\">'YUP'</span>, <span class=\"st0\">'YUP'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'BALL'</span>, <span class=\"st0\">'BELL'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"st0\">'24'</span>, <span class=\"st0\">'123'</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">24</span>, <span class=\"nu0\">123</span><span class=\"br0\">)</span><br/>compare<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Comparing two strings for exact equality<br/>(string=? \"foo\" \"foo\")<br/>\u00a0<br/>;; Comparing two strings for inequality<br/>(not (string=? \"foo\" \"bar\"))<br/>\u00a0<br/>;; Comparing two strings to see if one is lexically ordered before than the other<br/>(string&lt;? \"abc\" \"def\")<br/>\u00a0<br/>;; Comparing two strings to see if one is lexically ordered after than the other <br/>(string&gt;? \"def\" \"abc\")<br/>\u00a0<br/>;; How to achieve both case sensitive comparisons and case insensitive comparisons within the language<br/>(string-ci=? \"foo\" \"FOO\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows  different ways to  compare  two character strings.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'This is an '</span>      <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'ASCII EBCDIC'</span>, <span class=\"nu0\">1</span>+<span class=\"br0\">(</span><span class=\"nu0\">1</span>==<span class=\"st0\">'f1'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <span class=\"st0\">' system.'</span><br/><span class=\"kw1\">say</span><br/>      cat = <span class=\"st0\">'cat'</span><br/>   animal = <span class=\"st0\">'dog'</span><br/><span class=\"kw1\">if</span> animal =  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is lexically equal to\"</span>        $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">\\</span>= cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is not lexically equal to\"</span>    $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&gt;</span>  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is lexically higher than\"</span>     $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&lt;</span>  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is lexically lower than\"</span>      $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&gt;</span>  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is not lexically lower than\"</span>  $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> animal <span class=\"sy0\">&lt;</span>  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>animal<span class=\"br0\">)</span> <span class=\"st0\">\"is not lexically higher than\"</span> $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/>\u00a0<br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500 [\u2191]  The above comparative operators don't */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500consider any leading and/or trailing white- */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500space when making comparisons, but the case */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500is honored  (uppercase, lowercase).         */</span><br/>\u00a0<br/>fatcat=<span class=\"st0\">'  cat  '</span>      <span class=\"coMULTI\">/*pad the cat with leading and trailing blanks.   */</span><br/><span class=\"kw1\">if</span> fatcat =  cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>fatcat<span class=\"br0\">)</span> <span class=\"st0\">\" is equal to\"</span>                 $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/>\u00a0<br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500To consider any whitespace in a comparison, */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500we need to use strict comparative operators.*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> fatcat == cat  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>fatcat<span class=\"br0\">)</span> <span class=\"st0\">\"is strictly equal to\"</span>         $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span><br/>\u00a0<br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500To perform caseless comparisons, the easiest*/</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500method would be to uppercase a copy of both */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500operands.  Uppercasing is only done for the */</span><br/>                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500Latin (or Roman) alphabet in REXX.    [\u2193]   */</span><br/>kat=<span class=\"st0\">'cAt'</span><br/><span class=\"kw1\">if</span> caselessComp<span class=\"br0\">(</span>cat,kat<span class=\"br0\">)</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span> $<span class=\"br0\">(</span>cat<span class=\"br0\">)</span> <span class=\"st0\">'and'</span> $<span class=\"br0\">(</span>kat<span class=\"br0\">)</span> <span class=\"st0\">\"are equal caseless\"</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500$ subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>$:  <span class=\"kw1\">return</span> <span class=\"st0\">'\u2500\u2500\u25ba'</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'\u25c4\u2500\u2500'</span>            <span class=\"coMULTI\">/*bracket the string with \u2500\u2500\u25ba\u03b1\u25c4\u2500\u2500*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500CASELESSCOMP subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>caselessComp:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">arg</span> a,b     <span class=\"coMULTI\">/*ARG  uppercases the A &amp; B args.*/</span><br/>               <span class=\"kw1\">return</span> a==b             <span class=\"coMULTI\">/*if exactly equal, return  1.   */</span><br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>   if s1 = s2<br/>      See \"The strings are equal\"<br/>   ok<br/>   if not (s1 = s2)<br/>      See \"The strings are not equal\"<br/>   ok<br/>   if strcmp(s1,s2) &gt; 0<br/>      see \"s2 is lexically ordered before than s1\"<br/>   ok<br/>   if strcmp(s1,s2) &lt; 0<br/>      see \"s2 is lexically ordered after than s1\"<br/>   ok<br/>\u00a0<br/>To achieve case insensitive comparisons, we should use Upper() or Lower() functions:<br/>\u00a0<br/>   if Upper(s1) = Upper(s2)<br/>      see \"The strings are equal\"<br/>   ok<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">method_names = <span class=\"br0\">[</span>:==,:!=,\u00a0:<span class=\"sy0\">&gt;</span>,\u00a0:<span class=\"sy0\">&gt;</span>=,\u00a0:<span class=\"sy0\">&lt;</span>,\u00a0:<span class=\"sy0\">&lt;</span>=,\u00a0:<span class=\"sy0\">&lt;=&gt;</span>, <span class=\"re3\">:casecmp</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"YUP\"</span>, <span class=\"st0\">\"YUP\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">\"YUP\"</span>, <span class=\"st0\">\"Yup\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">\"bot\"</span>,<span class=\"st0\">\"bat\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">\"aaa\"</span>, <span class=\"st0\">\"zz\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>str1, str2<span class=\"sy0\">|</span><br/>  method_names.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"%s\u00a0%s\u00a0%s<span class=\"es0\">\\t</span>%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>str1, m, str2, str1.<span class=\"me1\">send</span><span class=\"br0\">(</span>m, str2<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">a$\t= \"dog\"<br/>b$\t= \"cat\"<br/>if a$ =  b$ then print \"the strings are equal\" \t\t\t' test for equalitY<br/>if a$ &lt;&gt; b$ then print \"the strings are not equal\" \t\t' test for inequalitY<br/>if a$ &gt;  b$ then print a$;\" is lexicallY higher than \";b$ \t' test for lexicallY higher<br/>if a$ &lt;  b$ then print a$;\" is lexicallY lower than \";b$ \t' test for lexicallY lower<br/>if a$ &lt;= b$ then print a$;\" is not lexicallY higher than \";b$<br/>if a$ &gt;= b$ then print a$;\" is not lexicallY lower than \";b$<br/>end</pre>"}, {"lang": "Rust", "loc": 29, "block": "<pre class=\"text highlighted_source\">use std::ascii::AsciiExt; // for case insensitives only<br/>\u00a0<br/>fn main() {<br/>    // only same types can be compared<br/>    // String and String or &amp;str and &amp;str<br/>    // exception: strict equality and inequality also work on &amp;str and String<br/>    let a: &amp;str = \"abc\";<br/>    let b: String = \"Bac\".to_owned();<br/>\u00a0<br/>    // Strings are coerced to &amp;str when borrowed and needed<br/>    if a == b { println!(\"The strings are equal\") }<br/>    if a\u00a0!= b { println!(\"The strings are not equal\") }<br/>    if a  &gt; &amp;b { println!(\"The first string is lexically after the second\") }<br/>    if a  &lt; &amp;b { println!(\"The first string is lexically before the second\") }<br/>    if a &gt;= &amp;b { println!(\"The first string is not lexically before the second\") }<br/>    if a &lt;= &amp;b { println!(\"The first string is not lexically after the second\") }<br/>\u00a0<br/>    // case-insensitives:<br/>\u00a0<br/>    // equality<br/>    // this avoids new allocations<br/>    if a.eq_ignore_ascii_case(&amp;b) { println!(\"Both strings are equal when ignoring case\") }<br/>\u00a0<br/>    // everything else, create owned Strings, then compare as above<br/>    let a2 = a.to_ascii_uppercase();<br/>    let b2 = b.to_ascii_uppercase();<br/>\u00a0<br/>    // repeat checks<br/>}</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Compare <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compare<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> String, b<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b<span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' and '$b' are lexically equal.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' and '$b' are not lexically equal.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">equalsIgnoreCase</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' and '$b' are case-insensitive lexically equal.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' and '$b' are not case-insensitive lexically equal.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' is lexically before '$b'.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' is lexically after '$b'.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' is not lexically before '$b'.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"'$a' is not lexically after '$b'.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"The lexical relationship is: ${a.compareTo(b)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"The case-insensitive lexical relationship is: ${a.compareToIgnoreCase(b)}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  compare<span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span>, <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><br/>  compare<span class=\"br0\">(</span><span class=\"st0\">\"5\"</span>, <span class=\"st0\">\"5.0\"</span><span class=\"br0\">)</span><br/>  compare<span class=\"br0\">(</span><span class=\"st0\">\"java\"</span>, <span class=\"st0\">\"Java\"</span><span class=\"br0\">)</span><br/>  compare<span class=\"br0\">(</span><span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span>, <span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span><span class=\"br0\">)</span><br/>  compare<span class=\"br0\">(</span><span class=\"st0\">\"\u0134\u00c3V\u00c1\"</span>, <span class=\"st0\">\"\u0135\u00e3v\u00e1\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; Comparing two strings for exact equality</span><br/><span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"st0\">\"hello\"</span> <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Comparing two strings for inequality</span><br/><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"st0\">\"hello\"</span> <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Checking if the first string is lexically ordered before the second</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">&lt;</span>? <span class=\"st0\">\"bar\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Checking if the first string is lexically ordered after the second </span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">&gt;</span>? <span class=\"st0\">\"foo\"</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; case insensitive comparison</span><br/><span class=\"br0\">(</span><span class=\"kw1\">string-ci=?</span> <span class=\"st0\">\"hello\"</span> <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: showComparisons (in string: a, in string: b) is func<br/>  begin<br/>    writeln(\"compare \" &lt;&amp; literal(a) &lt;&amp; \" with \" &lt;&amp; literal(b) &lt;&amp;\":\");<br/>    writeln(\"a = b  returns: \" &lt;&amp; a = b);<br/>    writeln(\"a &lt;&gt; b returns: \" &lt;&amp; a &lt;&gt; b);<br/>    writeln(\"a &lt; b  returns: \" &lt;&amp; a &lt; b);<br/>    writeln(\"a &gt; b  returns: \" &lt;&amp; a &gt; b);<br/>    writeln(\"a &lt;= b returns: \" &lt;&amp; a &lt;= b);<br/>    writeln(\"a &gt;= b returns: \" &lt;&amp; a &gt;= b);<br/>    writeln(\"compare(a, b)               returns: \" &lt;&amp; compare(a, b));<br/>    writeln(\"compare(lower(a), lower(b)) returns: \" &lt;&amp; compare(a, b));<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    showComparisons(\"this\", \"that\");<br/>    showComparisons(\"that\", \"this\");<br/>    showComparisons(\"THAT\", \"That\");<br/>    showComparisons(\"this\", \"This\");<br/>    showComparisons(\"this\", \"this\");<br/>    showComparisons(\"the\", \"there\");<br/>    showComparisons(\"there\", \"the\");<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">var methods = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>==\u00a0!= <span class=\"sy0\">&gt;</span> <span class=\"sy0\">&gt;</span>= <span class=\"sy0\">&lt;</span> <span class=\"sy0\">&lt;</span>= <span class=\"sy0\">&lt;=&gt;</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> s1, s2 <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>YUP YUP<span class=\"sy0\">&gt;</span>,<span class=\"sy0\">&lt;</span>YUP Yup<span class=\"sy0\">&gt;</span>,<span class=\"sy0\">&lt;</span>bot bat<span class=\"sy0\">&gt;</span>,<span class=\"sy0\">&lt;</span>aaa zz<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    methods.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> <span class=\"st0\">\"%s\u00a0%s\u00a0%s<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>s1, m, s2, s1.<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SNOBOL4", "loc": 35, "block": "<pre class=\"text highlighted_source\">      s1 = 'mnopqrs'<br/>      s2 = 'mnopqrs'<br/>      s3 = 'mnopqr'<br/>      s4 = 'nop'<br/>      s5 = 'nOp'<br/>\u00a0<br/>      OUTPUT = 'Case sensitive comparisons:'<br/>      OUTPUT = LEQ(s1, s2) s1 ' and ' s2 ' are equal (LEQ).'<br/>      OUTPUT = IDENT(s1, s2) s1 ' and ' s2 ' are equal (IDENT).'<br/>\u00a0<br/>      OUTPUT =<br/>      OUTPUT = LNE(s1, s3) s1 ' and ' s3 ' are not equal (LNE).'<br/>      OUTPUT = ~LEQ(s1, s3) s1 ' and ' s3 ' are not equal (~LEQ).'<br/>      OUTPUT = DIFFER(s1, s3) s1 ' and ' s3 ' are not equal (DIFFER).'<br/>\u00a0<br/>      OUTPUT =<br/>      OUTPUT = LGE(s1, s3) s1 ' is greater than or equal to ' s3 ' (LGE).'<br/>      OUTPUT = LLE(s3, s1) s3 ' is less than or equal to ' s1 ' (LLE).'<br/>\u00a0<br/>      OUTPUT =<br/>      OUTPUT = LGT(s4, s1) s4 ' is greater than ' s1 ' (LGT).'<br/>      OUTPUT = LLT(s1, s4) s1 ' is less than ' s4 ' (LLT).'<br/>\u00a0<br/>      OUTPUT =<br/>      OUTPUT = \"Case insensitive comparison:\"<br/>      OUTPUT = LEQ(s4, REPLACE(s5, &amp;UCASE, &amp;LCASE)) s4 ' and ' s5 ' are equal.'<br/>\u00a0<br/>      OUTPUT =<br/>      OUTPUT = 'String and numeric conversions and comparisons:'<br/>      OUTPUT = EQ('1234', 1234) '\"1234\" and 1234 are equal (coerce to integer).'<br/>      OUTPUT = LEQ('1234', 1234) '\"1234\" and 1234 are equal (coerce to string).'<br/>      OUTPUT =<br/>      OUTPUT = GT('1234', 1233) '\"1234\" is greater than 1233 (numeric comparison).'<br/>      OUTPUT = LT('1233', 1234) '\"1233\" is less than 1234 (numeric comparison).'<br/>END</pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">func compare (a: String, b: String) {<br/>  if a == b {<br/>    println(\"'\\(a)' and '\\(b)' are lexically equal.\")<br/>  }<br/>  if a\u00a0!= b {<br/>    println(\"'\\(a)' and '\\(b)' are not lexically equal.\")<br/>  }<br/>\u00a0<br/>  if a &lt; b {<br/>    println(\"'\\(a)' is lexically before '\\(b)'.\")<br/>  }<br/>  if a &gt; b {<br/>    println(\"'\\(a)' is lexically after '\\(b)'.\")<br/>  }<br/>\u00a0<br/>  if a &gt;= b {<br/>    println(\"'\\(a)' is not lexically before '\\(b)'.\")<br/>  }<br/>  if a &lt;= b {<br/>    println(\"'\\(a)' is not lexically after '\\(b)'.\")<br/>  }<br/>}<br/>compare(\"cat\", \"dog\")</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> eq <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"the strings are equal\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> ne <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"the strings are not equal\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 18, "block": "<pre class=\"text highlighted_source\">#!/bin/sh<br/>\u00a0<br/>A=Bell<br/>B=Ball<br/>\u00a0<br/># Traditional test command implementations test for equality and inequality<br/># but do not have a lexical comparison facility<br/>if [ $A = $B ]\u00a0; then<br/>  echo 'The strings are equal'<br/>fi<br/>if [ $A\u00a0!= $B ]\u00a0; then<br/>  echo 'The strings are not equal'<br/>fi<br/>\u00a0<br/># All variables in the shell are strings, so numeric content cause no lexical problems<br/># 0 , -0 , 0.0 and 00 are all lexically different if tested using the above methods.<br/>\u00a0<br/># However this may not be the case if other tools, such as awk are the slave instead of test.</pre>"}, {"lang": "WDTE", "loc": 11, "block": "<pre class=\"text highlighted_source\">== 'example1' 'example2' -- io.writeln io.stdout; # Test for exact equality.<br/>== 'example1' 'example2' -&gt;\u00a0! -- io.writeln io.stdout; # Test for inequality.<br/>&lt; 'example1' 'example2' -- io.writeln io.stdout; # Test for lexical before.<br/>&gt; 'example1' 'example2' -- io.writeln io.stdout; # Test for lexical after.<br/>\u00a0<br/># Case insensitive equality check by converting both to lowercase.<br/>let str =&gt; import 'strings';<br/>== (str.lower 'eXaMpLe') (str.lower 'ExAmPlE') -- io.writeln io.stdout;<br/>\u00a0<br/># This is false. Strings are not coerced to numbers and vice-versa.<br/>== '3' 3 -- io.writeln io.stdout;</pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">\"foo\" == \"foo\"        //True<br/>\"foo\" == \"FOO\"        //False<br/>\"foo\" == \"foobar\"     //False<br/>Op(\"==\")(\"foo\",\"foo\") //True<br/>Op(\"==\",\"foo\")(\"foo\") //True<br/>\u00a0<br/>\"abc\"&lt;\"cde\"       //True<br/>\"abc\"&gt;\"cde\"       //False<br/>\u00a0<br/>\"foo\" == \"FOO\"         //False<br/>\"abc\".toUpper()==\"ABC\" //True<br/>\u00a0<br/>123==\"123\"         //False<br/>123==\"123\".toInt() //True<br/>\u00a0<br/>123&lt;\"123\"   //False, int on left forces \"123\".toInt()<br/>123&lt;\"1234\"  //True<br/>2345&lt;\"1234\" //False</pre>"}]}