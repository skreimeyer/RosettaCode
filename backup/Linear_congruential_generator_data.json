{"task": "Linear_congruential_generator", "blocks": [{"lang": "360 Assembly", "loc": 38, "block": "<pre class=\"text highlighted_source\">*        Linear congruential generator   07/03/2017<br/>LINCONG  CSECT<br/>         USING  LINCONG,R12<br/>         LR     R12,R15            set base register<br/>BEGIN    SR     R5,R5              bsdseed=0<br/>         SR     R7,R7              msseed=0<br/>         LA     R8,1               i=1<br/>         L      R9,=F'10'          number of loop<br/>LOOP     M      R4,=F'1103515245'  bsdseed*=1103515245<br/>         A      R5,=F'12345'       bsdseed+=12345<br/>         LR     R3,R5              bsdrand=bsdseed<br/>         LTR    R5,R5              if bsdseed&lt;0<br/>         BP     CONT               then<br/>         L      R3,COMP2             -2**31 <br/>         SR     R3,R5                -bsdseed <br/>         LPR    R3,R3                bsdrand=abs(-2**31-bsdseed)<br/>CONT     M      R6,=F'214013'      msseed*=214013<br/>         A      R7,=F'2531011'     msseed+=2531011<br/>         XR     R6,R6<br/>         D      R6,TWO16           /2**16<br/>         XDECO  R8,XDEC            i<br/>         MVC    PG(4),XDEC+8<br/>         XDECO  R3,XDEC            bsdrand<br/>         MVC    PG+4(12),XDEC<br/>         XDECO  R7,XDEC            msseed<br/>         MVC    PG+16(7),XDEC+5<br/>         XPRNT  PG,L'PG            print buffer<br/>         LA     R8,1(R8)           i=i+1<br/>         BCT    R9,LOOP            loop<br/>RETURN   XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>         DS     0F                 alignment<br/>TWO16    DC     XL4'00010000'      2**16<br/>COMP2    DC     XL4'80000000'      -2**31 <br/>PG       DC     CL80' '<br/>XDEC     DS     CL12 <br/>         YREGS  <br/>         END    LINCONG</pre>"}, {"lang": "Ada", "loc": 11, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Base_Type <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> &lt;&gt;;<br/>   Multiplyer, Adder: Base_Type;<br/>   Output_Divisor: Base_Type\u00a0:= <span class=\"nu0\">1</span>;<br/><span class=\"kw3\">package</span> LCG <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Initialize<span class=\"br0\">(</span>Seed: Base_Type<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Random <span class=\"kw1\">return</span> Base_Type;<br/>   <span class=\"co1\">-- changes the state and outputs the result</span><br/>\u00a0<br/><span class=\"kw1\">end</span> LCG;</pre>"}, {"lang": "ALGOL 68", "loc": 81, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>COMMENT<br/>   Algol 68 Genie checks for integer overflow whereas the reference<br/>   language leaves the result undefined so for portability we need to<br/>   see how wide a variable must be to hold the maximum possible value<br/>   before range reduction. This occurs in the BSD RNG when<br/>   rseed<span class=\"sy1\">=</span>2147483647 and is therefore 2147483647 <span class=\"sy1\">*</span> 1103515245 <span class=\"sy1\">+</span> 12345 <span class=\"sy1\">=</span><br/>   2369780942852710860<span class=\"sy1\">,</span> which itself is 19 decimal digits.  Use<br/>   evironmental queries to determine the width needed.<br/>COMMENT<br/>   <span class=\"kw4\">MODE</span> RANDINT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   RANDINT rseed <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"kw20\">int width</span> <span class=\"sy1\">&gt;</span> 18 <span class=\"sy1\">|</span> 0 <span class=\"sy1\">|:</span><br/>\t\t     <span class=\"kw20\">long int width</span> <span class=\"sy1\">&gt;</span> 18 <span class=\"sy1\">|</span><br/>\t\t     <span class=\"kw4\">LONG</span> 0 <span class=\"sy1\">|</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">PROC</span> srand <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> x<span class=\"br0\">)</span> <span class=\"kw3\">VOID</span> <span class=\"sy1\">:</span><br/>   <span class=\"br0\">(</span>rseed <span class=\"sy1\">|</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> rseed <span class=\"sy1\">:=</span> x<span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> rseed <span class=\"sy1\">:=</span> <span class=\"kw8\">LENG</span> x <span class=\"sy1\">|</span> rseed <span class=\"sy1\">:=</span> <span class=\"kw8\">LENG</span> <span class=\"kw8\">LENG</span> x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">PROC</span> bsd rand <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">CASE</span> rseed <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span><span class=\"kw3\">INT</span> ri<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> 1103515245<span class=\"sy1\">,</span> c <span class=\"sy1\">=</span> 12345<span class=\"sy1\">,</span> m1 <span class=\"sy1\">=</span> 2<span class=\"sy1\">^</span>16<span class=\"sy1\">,</span> m2 <span class=\"sy1\">=</span> 2<span class=\"sy1\">^</span>15<span class=\"sy1\">;</span><br/>COMMENT<br/>   That curious declaration is because 2<span class=\"sy1\">^</span>31 might overflow during<br/>   compilation but the <span class=\"kw4\">MODE</span> declaration for RANDINT guarantees that it<br/>   will not overflow at run<span class=\"sy1\">-</span>time.  We assume that an <span class=\"kw3\">INT</span> is at least<br/>   32 bits wide<span class=\"sy1\">,</span> otherwise a similar workaround would be needed for<br/>   the declaration of a.<br/>COMMENT<br/>\t <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>ri <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span>m1 <span class=\"sy1\">*</span> m2<span class=\"br0\">)</span><span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t result<br/>      <span class=\"kw2\">END</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> rli<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 1103515245<span class=\"sy1\">,</span> c <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 12345<span class=\"sy1\">,</span> m <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>31<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>rli <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> m<span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t <span class=\"kw8\">SHORTEN</span> result<br/>      <span class=\"kw2\">END</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> rlli<span class=\"br0\">)</span> <span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 1103515245<span class=\"sy1\">,</span><br/>\t c <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 12345<span class=\"sy1\">,</span> m <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>31<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>rlli <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span>  m<span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t <span class=\"kw8\">SHORTEN</span> <span class=\"kw8\">SHORTEN</span> result<br/>      <span class=\"kw2\">END</span><br/>      <span class=\"kw2\">ESAC</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">PROC</span> ms rand <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">CASE</span> rseed <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span><span class=\"kw3\">INT</span> ri<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> 214013<span class=\"sy1\">,</span> c <span class=\"sy1\">=</span> 2531011<span class=\"sy1\">,</span> m1 <span class=\"sy1\">=</span> 2<span class=\"sy1\">^</span>15<span class=\"sy1\">,</span> m2 <span class=\"sy1\">=</span> 2<span class=\"sy1\">^</span>16<span class=\"sy1\">;</span><br/>\t <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>ri <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span>m1 <span class=\"sy1\">*</span> m2<span class=\"br0\">)</span><span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t result <span class=\"sy1\">%</span> m2<br/>      <span class=\"kw2\">END</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> rli<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 214013<span class=\"sy1\">,</span> c <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 2531011<span class=\"sy1\">,</span> m <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>31<span class=\"sy1\">,</span> m2 <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>16<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>rli <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> m<span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t <span class=\"kw8\">SHORTEN</span> <span class=\"br0\">(</span>result <span class=\"sy1\">%</span> m2<span class=\"br0\">)</span><br/>      <span class=\"kw2\">END</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> rlli<span class=\"br0\">)</span> <span class=\"sy1\">:</span><br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 214013<span class=\"sy1\">,</span><br/>\t c <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 2531011<span class=\"sy1\">,</span> m <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>31<span class=\"sy1\">,</span> m2 <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 2<span class=\"sy1\">^</span>16<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>rlli <span class=\"sy1\">*</span> a <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> m<span class=\"sy1\">;</span> rseed <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>\t <span class=\"kw8\">SHORTEN</span> <span class=\"kw8\">SHORTEN</span> <span class=\"br0\">(</span>result <span class=\"sy1\">%</span> m2<span class=\"br0\">)</span><br/>      <span class=\"kw2\">END</span><br/>      <span class=\"kw2\">ESAC</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   srand <span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> bsd rand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   srand <span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> ms rand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   srand <span class=\"br0\">(</span>0<span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> b<span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>\tBSD <span class=\"sy0\">.=</span> <span class=\"st0\">\"`t\"</span> <span class=\"br0\">(</span>a <span class=\"sy0\">:=</span>  BSD<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"sy0\">,</span>\tb <span class=\"sy0\">:=</span> MS<span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span>\tMS <span class=\"sy0\">.=</span> <span class=\"st0\">\"`t\"</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"BSD:`n\"</span> BSD <span class=\"st0\">\"`nMS:`n\"</span> MS<br/>\u00a0<br/>BSD<span class=\"br0\">(</span>Seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> Seed <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>MS<span class=\"br0\">(</span>Seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tSeed <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> Seed <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"sy0\">,</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Seed<span class=\"sy0\">,</span> Seed <span class=\"sy0\">//</span> <span class=\"nu0\">65536</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off &amp; setlocal enabledelayedexpansion<br/>\u00a0<br/>echo BSD Rand<br/>set /a a=0,cnt=1<br/>:b<br/>set /a \"a=1103515245 *a+12345,a&amp;=0x7fffffff, cnt+=1\"<br/>call:prettyprint\u00a0!cnt!\u00a0!a!<br/>if\u00a0!cnt! leq 10 goto\u00a0:b<br/>\u00a0<br/>echo.<br/>echo Microsoft Rand<br/>set /a a=0,cnt=1<br/>:c<br/>set /a \"a=214013 *a+2531011,a&amp;=0x7fffffff, b=a&gt;&gt;16,cnt+=1\"<br/>call:prettyprint\u00a0!cnt!\u00a0!b!<br/>if\u00a0!cnt! lss 10 goto\u00a0:c<br/>pause<br/>goto:eof<br/>\u00a0<br/>:prettyprint<br/>set p1=\u00a0%1<br/>set p2=       \u00a0%2<br/>echo\u00a0%p1:~-2% \u00a0%p2:~-10%<br/>goto:eof<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 34, "block": "<pre class=\"text highlighted_source\">      @% = &amp;D0D<br/>      PRINT \"MS generator:\"<br/>      dummy% = FNrandMS(0)<br/>      FOR i% = 1 TO 10<br/>        PRINT FNrandMS(-1)<br/>      NEXT<br/>      PRINT '\"BSD generator:\"<br/>      dummy% = FNrandBSD(0)<br/>      FOR i% = 1 TO 10<br/>        PRINT FNrandBSD(-1)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNrandMS(seed%)<br/>      PRIVATE state%<br/>      IF seed% &gt;= 0 THEN<br/>        state% = seed%<br/>      ELSE<br/>        state% = FNmuladd(state%, 214013, 2531011)<br/>      ENDIF<br/>      = state% &gt;&gt; 16<br/>\u00a0<br/>      DEF FNrandBSD(seed%)<br/>      PRIVATE state%<br/>      IF seed% &gt;= 0 THEN<br/>        state% = seed%<br/>      ELSE<br/>        state% = FNmuladd(state%, 1103515245, 12345)<br/>      ENDIF<br/>      = state%<br/>\u00a0<br/>      DEF FNmuladd(A%,B%,C%)\u00a0: PRIVATE M%\u00a0: LOCAL P%\u00a0: IF M% = 0 DIM P% 8<br/>      IF P% THEN [OPT 0\u00a0: .M% mul ebx\u00a0: add eax,ecx\u00a0: btr eax,31\u00a0: ret\u00a0:]<br/>      = USR M%</pre>"}, {"lang": "bc", "loc": 19, "block": "<pre class=\"text highlighted_source\">/* BSD rand */<br/>\u00a0<br/>define rand() {<br/>\trandseed = (randseed * 1103515245 + 12345)\u00a0% 2147483648<br/>\treturn randseed<br/>}<br/>\u00a0<br/>randseed = 1<br/>rand(); rand(); rand(); print \"\\n\"<br/>\u00a0<br/>/* Microsoft rand */<br/>\u00a0<br/>define rand() {<br/>\trandseed = (randseed * 214013 + 2531011)\u00a0% 2147483648<br/>\treturn randseed / 65536<br/>}<br/>\u00a0<br/>randseed = 1<br/>rand(); rand(); rand(); print \"\\n\"</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;025*&gt;\\::0\\`288*::*:****+.55+,\"iQ\"5982156*:v<br/>v $$_^#!\\-1:\\%***:*::*882 ++*\"yf\"3***+***+*&lt;<br/>&gt;025*&gt;\\:488**:*/:0\\`6\"~7\"+:*+01-2/-*+.\"O?+\"55v<br/>@ $$_^#!\\-1:\\%***:*::*882 ++***\" ''4C\"*+2**,+&lt;</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">( 2^31:?RANDMAX<br/>&amp; 2^-16:?rshift<br/>&amp; (randBSD=mod$(!seed*1103515245+12345.!RANDMAX):?seed)<br/>&amp; ( randMS<br/>  =   div<br/>    $ ((mod$(!seed*214013+2531011.!RANDMAX):?seed)*!rshift.1)<br/>  )<br/>&amp; out$\\nBSD<br/>&amp; 0:?seed<br/>&amp; 0:?i<br/>&amp; whl'(1+!i:~&gt;10:?i&amp;out$!randBSD)<br/>&amp; out$\\nMicrosoft<br/>&amp; 0:?seed<br/>&amp; 0:?i<br/>&amp; whl'(1+!i:~&gt;10:?i&amp;out$!randMS)<br/>)</pre>"}, {"lang": "C", "loc": 41, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* always assuming int is at least 32 bits */</span><br/><span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> rseed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\trseed <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#ifndef MS_RAND</span><br/><span class=\"co2\">#define RAND_MAX ((1U &lt;&lt; 31) - 1)</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> rseed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rseed <span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RAND_MAX<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#else /* MS rand */</span><br/>\u00a0<br/><span class=\"co2\">#define RAND_MAX_32 ((1U &lt;&lt; 31) - 1)</span><br/><span class=\"co2\">#define RAND_MAX ((1U &lt;&lt; 15) - 1)</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>rseed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rseed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RAND_MAX_32<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#endif/* MS_RAND */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"rand max is\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> RAND_MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 51, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mRND<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> seed<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span> _seed <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>    mRND<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> _seed<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, _a<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, _c<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, _m<span class=\"br0\">(</span> <span class=\"nu0\">2147483648</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span> _seed <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _a <span class=\"sy2\">*</span> _seed <span class=\"sy2\">+</span> _c <span class=\"br0\">)</span> <span class=\"sy2\">%</span> _m <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> _a, _c<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> _m, _seed<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> MS_RND <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> mRND<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    MS_RND<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> _a <span class=\"sy1\">=</span> <span class=\"nu0\">214013</span><span class=\"sy4\">;</span> _c <span class=\"sy1\">=</span> <span class=\"nu0\">2531011</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> mRND<span class=\"sy4\">::</span><span class=\"me2\">rnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> BSD_RND <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> mRND<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    BSD_RND<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _a <span class=\"sy1\">=</span> <span class=\"nu0\">1103515245</span><span class=\"sy4\">;</span> _c <span class=\"sy1\">=</span> <span class=\"nu0\">12345</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> mRND<span class=\"sy4\">::</span><span class=\"me2\">rnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    BSD_RND bsd_rnd<span class=\"sy4\">;</span><br/>    MS_RND ms_rnd<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"MS RAND:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"========\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ms_rnd.<span class=\"me1\">rnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl  <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"BSD RAND:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"=========\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> bsd_rnd.<span class=\"me1\">rnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> iterator <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a x<span class=\"br0\">)</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left <span class=\"nu0\">1</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> bsd <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"br0\">(</span>iterator <span class=\"nu0\">1103515245</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> ms <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">iterate</span>  <span class=\"br0\">(</span>iterator <span class=\"nu0\">214013</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>right x <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">10</span> bsd<span class=\"br0\">)</span> <span class=\"co1\">;-&gt; (12345 1406932606 654583775 1449466924 229283573 1109335178 1051550459 1293799192 794471793 551188310)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">10</span> ms<span class=\"br0\">)</span> <span class=\"co1\">;-&gt; (38 7719 21238 2437 8855 11797 8365 32285 10450 30612)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-rng <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>seed <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mode <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"returns an RNG according to\u00a0:seed and\u00a0:mode keywords<br/>  default mode: bsd<br/>  default seed: 0 (should be 1 actually)\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> mode 'ms<span class=\"br0\">)</span><br/>    #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>ash <span class=\"br0\">(</span><span class=\"kw1\">setf</span> seed <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">214013</span> seed<span class=\"br0\">)</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> -<span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> seed <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* seed <span class=\"nu0\">1103515245</span><span class=\"br0\">)</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rng <span class=\"br0\">(</span>make-rng<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>x <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"BSD: ~d~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> rng<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rng <span class=\"br0\">(</span>make-rng <span class=\"sy0\">:</span><span class=\"me1\">mode</span> 'ms <span class=\"sy0\">:</span><span class=\"me1\">seed</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>x <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"MS: ~d~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> rng<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 36, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"kw1\">static</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> LinearCongruentialGenerator<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> LinearCongruentialGenerator<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> _seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">.</span><span class=\"me1\">Ticks</span><span class=\"sy0\">;</span> <span class=\"co1\">// from bad random gens might as well have bad seed!</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> _bsdCurrent <span class=\"sy0\">=</span> _seed<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> _msvcrtCurrent <span class=\"sy0\">=</span> _seed<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Next<span class=\"br0\">(</span><span class=\"kw4\">int</span> seed, <span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> seed <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> BsdRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> _bsdCurrent <span class=\"sy0\">=</span> Next<span class=\"br0\">(</span>_bsdCurrent, <span class=\"nu0\">1103515245</span>, <span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> MscvrtRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> _msvcrtCurrent <span class=\"sy0\">=</span> Next <span class=\"br0\">(</span>_msvcrtCurrent <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span>,<span class=\"nu0\">214013</span>,<span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PrintRandom<span class=\"br0\">(</span><span class=\"kw4\">int</span> count, <span class=\"kw4\">bool</span> isBsd<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> name <span class=\"sy0\">=</span> isBsd <span class=\"sy0\">?</span> <span class=\"st0\">\"BSD\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"MS\"</span><span class=\"sy0\">;</span><br/>            WriteLine<span class=\"br0\">(</span>$<span class=\"st0\">\"{name} next {count} Random\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> gen <span class=\"sy0\">=</span> isBsd <span class=\"sy0\">?</span> <span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">(</span>BsdRand<span class=\"br0\">)</span> <span class=\"sy0\">:</span> MscvrtRand<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span>gen, count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                WriteLine<span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            PrintRandom<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PrintRandom<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Read<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">struct</span> LinearCongruentialGenerator <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> RAND_MAX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> seed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> randBSD<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">1</span>_103_515_245 <span class=\"sy0\">+</span> <span class=\"nu0\">12</span>_345<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RAND_MAX<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> seed<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> randMS<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">214</span>_013 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>_531_011<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RAND_MAX<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    LinearCongruentialGenerator rnd<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>rnd.<span class=\"me1\">randBSD</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/>\u00a0<br/>    rnd.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>rnd.<span class=\"me1\">randMS</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 11, "block": "<pre class=\"text highlighted_source\">[*<br/> * lrx -- (random number from 0 to 2147483647)<br/> *<br/> * Returns a number from the BSD rand() sequence.<br/> * Seeded by storing a seed in register R.<br/> *]sz<br/>[lR 1103515245 * 12345 + 2147483648\u00a0% d sR]sr<br/>\u00a0<br/>[* Set seed to 1, then print the first 3 random numbers. *]sz<br/>1 sR<br/>lrx psz lrx psz lrx psz</pre>"}, {"lang": "Elixir", "loc": 35, "block": "<pre class=\"text highlighted_source\">defmodule LCG do<br/>  def ms_seed(seed) do<br/>    Process.put(:ms_state, seed)<br/>    ms_rand<br/>    Process.put(:ms_seed, seed)<br/>  end<br/>\u00a0<br/>  def ms_rand do<br/>    state = Process.get(:ms_state)<br/>    state2 = rem(214013 * state + 2531011, 2147483648)<br/>    Process.put(:ms_state, state2)<br/>    div(state, 65536)<br/>  end<br/>\u00a0<br/>  def bsd_seed(seed) do<br/>    Process.put(:bsd_state, seed)<br/>    Process.put(:bsd_seed, seed)<br/>  end<br/>\u00a0<br/>  def bsd_rand do<br/>    state = Process.get(:bsd_state)<br/>    state2 = rem(1103515245 * state + 12345, 2147483648)<br/>    Process.put(:bsd_state, state2)<br/>    state2<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([0,1], fn i -&gt;<br/>  IO.puts \"\\nRandom seed: #{i}\\n        BSD      MS\"<br/>  LCG.bsd_seed(i)<br/>  LCG.ms_seed(i)<br/>  Enum.each(1..10, fn _ -&gt;<br/>   \u00a0:io.format \"~11w~8w~n\", [LCG.bsd_rand, LCG.ms_rand]<br/>  end)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 21, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>lcg<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>bsd_seed<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> ms_seed<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> bsd_rand<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> ms_rand<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bsd_seed</span><span class=\"br0\">(</span><span class=\"re5\">Seed</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">put</span><span class=\"br0\">(</span>bsd_state<span class=\"sy1\">,</span> <span class=\"re5\">Seed</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">ms_seed</span><span class=\"br0\">(</span><span class=\"re5\">Seed</span><span class=\"br0\">)</span>  <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">put</span><span class=\"br0\">(</span>ms_state<span class=\"sy1\">,</span> <span class=\"re5\">Seed</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bsd_rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re5\">State</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">get</span><span class=\"br0\">(</span>bsd_state<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">1103515245</span> <span class=\"sy3\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2147483648</span><span class=\"sy1\">,</span><br/>  <span class=\"kw3\">put</span><span class=\"br0\">(</span>bsd_state<span class=\"sy1\">,</span><span class=\"re5\">State</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">State</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ms_rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re5\">State</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">get</span><span class=\"br0\">(</span>ms_state<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2147483648</span><span class=\"sy1\">,</span><br/>  <span class=\"kw3\">put</span><span class=\"br0\">(</span>ms_state<span class=\"sy1\">,</span><span class=\"re5\">State</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">State</span> <span class=\"kw2\">div</span> <span class=\"nu0\">65536</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re3\">bsd_seed</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>  <span class=\"re3\">ms_seed</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~10s~c~5s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"BSD\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"st0\">\"MS\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~10w~c~5w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">bsd_rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"re3\">ms_rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 34, "block": "<pre class=\"text highlighted_source\">PROGRAM RNG<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>DIM CARDS%[52]<br/>\u00a0<br/>PROCEDURE XRANDOM(SEED-&gt;XRND)<br/>   POW31=2^31<br/>   POW16=2^16<br/>   SEED=SEED*214013+2531011<br/>   SEED=SEED-POW31*INT(SEED/POW31)<br/>   XRND=INT(SEED/POW16)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE YRANDOM(SEED-&gt;YRND)<br/>   POW31=2^31<br/>   SEED=SEED*1103515245+12345<br/>   SEED=SEED-POW31*INT(SEED/POW31)<br/>   YRND=SEED<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)<br/>    SEED=0  PRINT(\"BSD:\")<br/>    FOR I%=1 TO 10 DO<br/>       YRANDOM(SEED-&gt;YRND)<br/>       PRINT(TAB(10);YRND)<br/>    END FOR<br/>    SEED=0  PRINT(\"MSD:\")<br/>    FOR I%=1 TO 10 DO<br/>       XRANDOM(SEED-&gt;XRND)<br/>       PRINT(TAB(10);XRND)<br/>    END FOR<br/>END PROGRAM</pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">module</span> lcg <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> bsd seed <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> state <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> seed<br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_:<span class=\"kw4\">unit</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            state <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"sy0\">!</span>state <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;&amp;</span> System.<span class=\"me1\">Int32</span>.<span class=\"me1\">MaxValue</span><br/>            <span class=\"sy0\">!</span>state<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> ms seed <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> state <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> seed<br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_:<span class=\"kw4\">unit</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            state <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"sy0\">!</span>state <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;&amp;</span> System.<span class=\"me1\">Int32</span>.<span class=\"me1\">MaxValue</span><br/>            <span class=\"sy0\">!</span>state <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 17, "block": "<pre class=\"text highlighted_source\">1 31 lshift 1- constant MAX-RAND-BSD<br/>1 15 lshift 1- constant MAX-RAND-MS<br/>\u00a0<br/>variable seed                         \\ seed variable<br/>\u00a0<br/>: (random) seed @ * + dup seed\u00a0!\u00a0;    ( -- n)<br/>: BSDrandom MAX-RAND-BSD 12345 1103515245 (random) and\u00a0;<br/>: MSrandom MAX-RAND-MS 2531011 214013 (random) 16 rshift and\u00a0;<br/>\u00a0<br/>: test-random<br/>  1 seed\u00a0! cr .\" BSD (seed=1)\" cr<br/>  5 0 do BSDrandom . cr loop<br/>  1 seed\u00a0! cr .\" MS  (seed=1)\" cr<br/>  5 0 do MSrandom . cr loop<br/>;<br/>\u00a0<br/>test-random</pre>"}, {"lang": "Fortran", "loc": 42, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> lcgs<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i64</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">a1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1103515245</span>, a2 <span class=\"sy0\">=</span> <span class=\"nu0\">214013</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">c1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">12345</span>, c2 <span class=\"sy0\">=</span> <span class=\"nu0\">2531011</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">div</span> <span class=\"sy0\">=</span> <span class=\"nu0\">65536</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2147483648</span>_i64  <span class=\"co1\">! need to go to 64 bits because</span><br/>                                                 <span class=\"co1\">! of the use of signed integers</span><br/><span class=\"co1\">contains </span><br/>\u00a0<br/><span class=\"kw1\">function</span> bsdrand<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">bsdrand</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">optional</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">seed</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">present</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"br0\">)</span> x <span class=\"sy0\">=</span> seed<br/>  x <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> c1, m<span class=\"br0\">)</span><br/>  bsdrand <span class=\"sy0\">=</span> x<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> msrand<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">msrand</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">optional</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">seed</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">present</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"br0\">)</span> x <span class=\"sy0\">=</span> seed <br/>  x <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>a2 <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> c2, m<span class=\"br0\">)</span><br/>  msrand <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> div<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> lcgtest<br/>  <span class=\"kw3\">use</span> lcgs<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"      BSD            MS\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(2i12)\"</span><span class=\"br0\">)</span> bsdrand<span class=\"br0\">(</span><span class=\"br0\">)</span>, msrand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 57, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 04-11-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' to seed BSD_lcg(seed &gt; -1)</span><br/><span class=\"co1\">' to get random number BSD_lcg(-1) or BSD_lcg() or just BSD_lcg</span><br/><span class=\"kw1\">Function</span> BSD_lcg<span class=\"br0\">(</span>seed <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Static</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> bsd_state<br/>\u00a0<br/>    <span class=\"kw1\">If</span> seed &lt;&gt; -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        bsd_state = seed <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">Else</span><br/>        bsd_state = <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> * bsd_state + <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> bsd_state<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' to seed ms_lcg(seed &gt; -1)</span><br/><span class=\"co1\">' to get random number ms_lcg(-1) or ms_lcg() or just ms_lcg</span><br/><span class=\"kw1\">Function</span> ms_lcg<span class=\"br0\">(</span>seed <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Static</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> ms_state<br/>\u00a0<br/>    <span class=\"kw1\">If</span> seed &lt;&gt; -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        ms_state = seed <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">Else</span><br/>        ms_state = <span class=\"br0\">(</span><span class=\"nu0\">214013</span> * ms_state + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> ms_state <span class=\"kw1\">Shr</span> <span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"MS generator\"</span><br/><span class=\"co1\">' ms_lcg(0)      ' state = 0 at the start of the program</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###########\"</span>; ms_lcg<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"BSD generator\"</span><br/><span class=\"co1\">' BSD_lcg(0)     ' state = 0 at the start of the program</span><br/><span class=\"kw1\">For</span> i  = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###########\"</span>; BSD_lcg<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 35, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// basic linear congruential generator</span><br/><span class=\"kw4\">func</span> lcg<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> seed <span class=\"kw4\">uint32</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">uint32</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> seed<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">uint32</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>a<span class=\"sy3\">*</span>r <span class=\"sy3\">+</span> c<span class=\"sy1\">)</span> <span class=\"sy3\">%</span> m<br/>        <span class=\"kw1\">return</span> r<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// microsoft generator has extra division step</span><br/><span class=\"kw4\">func</span> msg<span class=\"sy1\">(</span>seed <span class=\"kw4\">uint32</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">uint32</span> <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> lcg<span class=\"sy1\">(</span><span class=\"nu0\">214013</span><span class=\"sy1\">,</span> <span class=\"nu0\">2531011</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">31</span><span class=\"sy1\">,</span> seed<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">uint32</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> g<span class=\"sy1\">()</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span><span class=\"nu0\">1</span> &lt;&lt; <span class=\"nu0\">16</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> example<span class=\"sy1\">(</span>seed <span class=\"kw4\">uint32</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>With seed =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> seed<span class=\"sy1\">)</span><br/>    bsd <span class=\"sy2\">:=</span> lcg<span class=\"sy1\">(</span><span class=\"nu0\">1103515245</span><span class=\"sy1\">,</span> <span class=\"nu0\">12345</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">31</span><span class=\"sy1\">,</span> seed<span class=\"sy1\">)</span><br/>    msf <span class=\"sy2\">:=</span> msg<span class=\"sy1\">(</span>seed<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"       BSD  Microsoft\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">5</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%10d   \u00a0%5d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> bsd<span class=\"sy1\">(),</span> msf<span class=\"sy1\">())</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    example<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    example<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">bsd <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>msr <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">$</span> bsd <span class=\"nu0\">0</span> <span class=\"co1\">-- can take seeds other than 0, of course</span><br/>\t<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">$</span> msr <span class=\"nu0\">0</span></pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"       BSD        MS<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0%10s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>rand_BSD<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>rand_MS<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> srand_BSD<span class=\"br0\">(</span>x<span class=\"br0\">)</span>             <span class=\"co1\">#: seed random </span><br/><span class=\"kw2\">static</span> seed<br/>   <span class=\"kw1\">return</span> seed <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>x <span class=\"sy1\">|</span> <span class=\"sy1\">\\</span>seed <span class=\"sy1\">|</span> <span class=\"nu0\">0</span>   <span class=\"co1\"># parm or seed or zero if none</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rand_BSD<span class=\"br0\">(</span><span class=\"br0\">)</span>               <span class=\"co1\">#: lcrng </span><br/>   <span class=\"kw1\">return</span> srand_BSD<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy1\">*</span> srand_BSD<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> srand_MS<span class=\"br0\">(</span>x<span class=\"br0\">)</span>              <span class=\"co1\">#: seed random </span><br/><span class=\"kw2\">static</span> seed<br/>   <span class=\"kw1\">return</span> seed <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>x <span class=\"sy1\">|</span> <span class=\"sy1\">\\</span>seed <span class=\"sy1\">|</span> <span class=\"nu0\">0</span>   <span class=\"co1\"># parm or seed or zero if none </span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rand_MS<span class=\"br0\">(</span><span class=\"br0\">)</span>                <span class=\"co1\">#: lcrng </span><br/>   <span class=\"kw1\">return</span> <span class=\"kw4\">ishift</span><span class=\"br0\">(</span>srand_MS<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy1\">*</span> srand_MS<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><span class=\"sy1\">,-</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"j highlighted_source\">lcg=: adverb define<br/> <span class=\"nu0\">0</span> <span class=\"kw2\">m</span> lcg <span class=\"kw2\">y</span>                     <span class=\"co1\">NB. default seed of 0</span><br/>:<br/> <span class=\"st_h\">'a c mod'</span>=. x: <span class=\"kw2\">m</span><br/> }. <span class=\"sy0\">(</span>mod | c + a * ]<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span>&lt;<span class=\"kw2\">y</span>+<span class=\"nu0\">1</span><span class=\"sy0\">)</span> <span class=\"kw2\">x</span> <br/><span class=\"sy0\">)</span><br/>\u00a0<br/>rand_bsd=: <span class=\"sy0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"nu0\">12345</span> , &lt;.<span class=\"nu0\">2</span>^<span class=\"nu0\">31</span><span class=\"sy0\">)</span> lcg<br/>rand_ms=: <span class=\"sy0\">(</span><span class=\"nu0\">2</span>^<span class=\"nu0\">16</span><span class=\"sy0\">)</span> &lt;<a class=\"__cf_email__\" data-cfemail=\"b49af4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:%~ <span class=\"sy0\">(</span><span class=\"nu0\">214013</span> <span class=\"nu0\">2531011</span> , &lt;.<span class=\"nu0\">2</span>^<span class=\"nu0\">31</span><span class=\"sy0\">)</span> lcg</pre>"}, {"lang": "Java", "loc": 23, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">IntStream</span>.<span class=\"me1\">iterate</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LinearCongruentialGenerator <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> mask <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"BSD:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        randBSD<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">limit</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>MS:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        randMS<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">limit</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IntStream randBSD<span class=\"br0\">(</span><span class=\"kw4\">int</span> seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> iterate<span class=\"br0\">(</span>seed, s <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">*</span> <span class=\"nu0\">1</span>_103_515_245 <span class=\"sy0\">+</span> <span class=\"nu0\">12</span>_345<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> mask<span class=\"br0\">)</span>.<span class=\"me1\">skip</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IntStream randMS<span class=\"br0\">(</span><span class=\"kw4\">int</span> seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> iterate<span class=\"br0\">(</span>seed, s <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">*</span> <span class=\"nu0\">214</span>_013 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>_531_011<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> mask<span class=\"br0\">)</span>.<span class=\"me1\">skip</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 14, "block": "<pre class=\"text highlighted_source\"># 15-bit integers generated using the same formula as rand() <br/># from the Microsoft C Runtime.<br/># Input: [ count, state, rand ]<br/>def next_rand_Microsoft:<br/>  .[0] as $count | .[1] as $state<br/>  | ( (214013 * $state) + 2531011)\u00a0% 2147483648 # mod 2^31<br/>  | [$count+1 , ., (. / 65536 | floor) ];<br/>\u00a0<br/># Generate the first n pseudo-random numbers:<br/>def rand_Microsoft(seed; n):<br/>  [0,seed]<br/>  | next_rand_Microsoft  # the seed is not so random<br/>  | recurse(if .[0] &lt; n then next_rand_Microsoft else empty end)<br/>  | .[2];</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">function getlgc(r::Integer, a::Integer, c::Integer, m::Integer, sh::Integer)<br/>    state = r<br/>    return function lgcrand()<br/>        state = mod(a * state + c, m)<br/>        return state &gt;&gt; sh<br/>    end<br/>end<br/>\u00a0<br/>seed, nrep = 0, 10<br/>bsdrand = getlgc(seed, 1103515245, 12345, 2 ^ 31, 0)<br/>\u00a0<br/>println(\"The first $nrep results for a BSD rand seeded with $seed:\")<br/>for _ in 1:nrep<br/>    @printf(\"%14d\\n\", bsdrand())<br/>end<br/>\u00a0<br/>msrand = getlgc(seed, 214013, 2531011, 2 ^ 31, 16)<br/>\u00a0<br/>println(\"\\nThe first $nrep results for a M\\$ rand seeded with $seed:\")<br/>for _ in 1:nrep<br/>    @printf(\"%14d\\n\", msrand())<br/>end</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">   bsd:{1_ y{((1103515245*x)+12345)!(_2^31)}\\x}<br/>   ms:{1_(y{_(((214013*x)+2531011)!(_2^31))}\\x)%(_2^16)}<br/>\u00a0<br/>   bsd[0;10]<br/>12345 1406932606 654583775 1449466924 229283573 1109335178 1051550459 1293799192 794471793 551188310<br/>   ms[0;10]<br/>38 7719 21238 2437 8855 11797 8365 32285 10450 30612</pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Lcg<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> state <span class=\"sy0\">=</span> s<br/>\u00a0<br/>    fun nextInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"br0\">{</span><br/>        state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> state + c<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> state / d<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"First 10 BSD random numbers - seed 0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bsd <span class=\"sy0\">=</span> Lcg<span class=\"br0\">(</span><span class=\"nu0\">1103515245</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1</span> shl <span class=\"nu0\">31</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${bsd.nextInt()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>First 10 MSC random numbers - seed 0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> msc <span class=\"sy0\">=</span> Lcg<span class=\"br0\">(</span><span class=\"nu0\">214013</span>, <span class=\"nu0\">2531011</span>, <span class=\"nu0\">1</span> shl <span class=\"nu0\">31</span>, <span class=\"nu0\">1</span> shl <span class=\"nu0\">16</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${msc.nextInt()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 25, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'by default these are 0</span><br/><span class=\"kw1\">global</span> BSDState<br/><span class=\"kw1\">global</span> MSState<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">print</span> randBSD<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">print</span> randMS<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">function</span> randBSD<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    randBSD <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> BSDState <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>    BSDState <span class=\"sy0\">=</span> randBSD<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> randMS<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    MSState <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> MSState <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>    randMS <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>MSState <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 30, "block": "<pre class=\"text highlighted_source\">; Configuration parameters for Microsoft and BSD implementations<br/>make \"LCG_MS [214013 2531011 65536 2147483648]<br/>make \"LCG_BSD [1103515245 12345 1 2147483648]<br/>\u00a0<br/>; Default seed is 0<br/>make \"_lcg_value 0<br/>\u00a0<br/>; set the seed<br/>to lcg_seed\u00a0:seed<br/>  make \"_lcg_value\u00a0:seed<br/>end<br/>\u00a0<br/>; generate the next number in the series using the given parameters<br/>to lcg_rand [:config\u00a0:LCG_MS]<br/>  local \"a local \"c local \"d local \"m<br/>  foreach [a c d m] [<br/>    make\u00a0? item #\u00a0:config<br/>  ]<br/>  make \"_lcg_value (modulo (sum (product\u00a0:a\u00a0:_lcg_value)\u00a0:c)\u00a0:m)<br/>  output int quotient\u00a0:_lcg_value\u00a0:d<br/>end<br/>\u00a0<br/>foreach (list\u00a0:LCG_BSD\u00a0:LCG_MS) [<br/>  lcg_seed 0<br/>  repeat 10 [<br/>    print (lcg_rand\u00a0?)<br/>  ]<br/>  print []<br/>]<br/>bye</pre>"}, {"lang": "Lua", "loc": 27, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> RNG <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  new <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>class<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> rand<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">local</span> self <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> class<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> state <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    self<span class=\"sy0\">.</span>rnd <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>      state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> state <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<br/>      <span class=\"kw1\">return</span> rand <span class=\"kw2\">and</span> rand<span class=\"br0\">(</span>state<span class=\"br0\">)</span> <span class=\"kw2\">or</span> state<br/>    <span class=\"kw1\">end</span><br/>    self<span class=\"sy0\">.</span>seed <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>new_seed<span class=\"br0\">)</span><br/>      state <span class=\"sy0\">=</span> new_seed <span class=\"sy0\">%</span> m<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> self<br/>  <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bsd <span class=\"sy0\">=</span> RNG<span class=\"sy0\">:</span>new<span class=\"br0\">(</span><span class=\"nu0\">1103515245</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>ms <span class=\"sy0\">=</span> RNG<span class=\"sy0\">:</span>new<span class=\"br0\">(</span><span class=\"nu0\">214013</span><span class=\"sy0\">,</span> <span class=\"nu0\">2531011</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">31</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">return</span> s<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">16</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"st0\">\"BSD:\"</span><br/><span class=\"kw1\">for</span> _ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%10d\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>bsd<span class=\"sy0\">.</span>rnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"st0\">\"Microsoft:\"</span><br/><span class=\"kw1\">for</span> _ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%10d\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>ms<span class=\"sy0\">.</span>rnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">BSDrand[x_]\u00a0:= Mod[x*1103515245 + 12345, 2147483648]<br/>NestList[BSDrand, 0, 10]<br/>-&gt; {0, 12345, 1406932606, 654583775, 1449466924, 229283573, 1109335178, 1051550459, 1293799192, 794471793, 551188310}<br/>\u00a0<br/>MSrand[x_]\u00a0:= Mod[x*214013 + 2531011, 2147483648]<br/>BitShiftRight[ NestList[MSrand, 0, 10], 16]<br/>-&gt; {0, 38, 7719, 21238, 2437, 8855, 11797, 8365, 32285, 10450, 30612}</pre>"}, {"lang": "Maxima", "loc": 14, "block": "<pre class=\"text highlighted_source\">seed: 0$<br/>ms_rand()\u00a0:= quotient(seed: mod(214013 * seed + 2531011, 2147483648), 65536)$<br/>makelist(ms_rand(), 20); /* see http://oeis.org/A096558 */<br/>\u00a0<br/>[38, 7719, 21238, 2437, 8855, 11797, 8365, 32285, 10450, 30612, 5853, 28100, 1142, 281, <br/>20537, 15921, 8945, 26285, 2997, 14680]<br/>\u00a0<br/>seed: 0$<br/>bsd_rand()\u00a0:= seed: mod(1103515245 * seed + 12345, 2147483648)$<br/>makelist(bsd_rand(), 20); /* see http://www.randomwalk.de/scimath/prngseqs.txt */<br/>\u00a0<br/>[12345, 1406932606, 654583775, 1449466924, 229283573, 1109335178, 1051550459, <br/>1293799192, 794471793, 551188310, 803550167, 1772930244, 370913197, 639546082, 1381971571, <br/>1695770928, 2121308585, 1719212846, 996984527, 1157490780]</pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">proc bsdRand(seed: int): iterator: int =<br/>  var seed = seed<br/>  result = iterator: int =<br/>    while true:<br/>      seed = (1103515245 * seed + 12345) and 0x7fffffff<br/>      yield seed<br/>\u00a0<br/>proc msvcrtRand(seed: int): iterator: int =<br/>  var seed = seed<br/>  result = iterator: int =<br/>    while true:<br/>      seed = (214013 * seed + 2531011) and 0x7fffffff<br/>      yield seed</pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: genLCG(a, c, m, seed)<br/>| ch |<br/>   Channel newSize(1) dup send(seed) drop -&gt;ch<br/>   #[ ch receive a * c + m mod dup ch send drop ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">BSDseed<span class=\"sy0\">=</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu1\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MSFTseed<span class=\"sy0\">=</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu1\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>BSD<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>BSDseed<span class=\"sy0\">=</span><span class=\"nu1\">1103515245</span><span class=\"sy0\">*</span>BSDseed<span class=\"sy0\">+</span><span class=\"nu1\">12345</span><span class=\"sy0\">;</span><span class=\"kw1\">lift</span><span class=\"br0\">(</span>BSDseed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MSFT<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>MSFTseed<span class=\"sy0\">=</span><span class=\"nu1\">214013</span><span class=\"sy0\">*</span>MSFTseed<span class=\"sy0\">+</span><span class=\"nu1\">2531011</span><span class=\"sy0\">;</span><span class=\"kw1\">lift</span><span class=\"br0\">(</span>MSFTseed<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu1\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 35, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> LinearCongruentialGenerator<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"co2\">{$mode iso}</span> <br/><span class=\"kw1\">var</span><br/>  x1<span class=\"sy1\">,</span> x2<span class=\"sy1\">:</span> int64<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> bsdrand<span class=\"sy1\">:</span> cardinal<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span><br/>    a <span class=\"sy3\">=</span> <span class=\"nu0\">1103515245</span><span class=\"sy1\">;</span><br/>    c <span class=\"sy3\">=</span> <span class=\"nu0\">12345</span><span class=\"sy1\">;</span><br/>    m <span class=\"sy3\">=</span> <span class=\"nu0\">2147483648</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    x1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>a <span class=\"sy3\">*</span> x1 <span class=\"sy3\">+</span> c<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> m<span class=\"sy1\">;</span><br/>    bsdrand <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x1<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> msrand<span class=\"sy1\">:</span> cardinal<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span><br/>    a <span class=\"sy3\">=</span> <span class=\"nu0\">214013</span><span class=\"sy1\">;</span><br/>    c <span class=\"sy3\">=</span> <span class=\"nu0\">2531011</span><span class=\"sy1\">;</span><br/>    m <span class=\"sy3\">=</span> <span class=\"nu0\">2147483648</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    x2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>a <span class=\"sy3\">*</span> x2 <span class=\"sy3\">+</span> c<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> m<span class=\"sy1\">;</span><br/>    msrand <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x2 <span class=\"kw1\">div</span> <span class=\"nu0\">65536</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> cardinal<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'      BSD            MS'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  x1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  x2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>bsdrand<span class=\"sy1\">:</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> msrand<span class=\"sy1\">:</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> LCG<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> overload <span class=\"st_h\">'0+'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;get</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> integer<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> gen_bsd <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gen_ms  <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> set <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>seed<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># srand</span><br/><span class=\"kw2\">sub</span> get <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$o</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$o</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>seed<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>meth<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$o</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>seed<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$r</span> <span class=\"sy0\">//=</span> <span class=\"re0\">$o</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>seed<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$cls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">%opts</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><br/>\t\tseed <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$opts</span><span class=\"br0\">{</span>seed<span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\tmeth <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$opts</span><span class=\"br0\">{</span>meth<span class=\"br0\">}</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'MS'</span> <span class=\"sy0\">?</span> <span class=\"re0\">\\&amp;gen_ms</span> <span class=\"sy0\">:</span> <span class=\"re0\">\\&amp;gen_bsd</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$cls</span> <span class=\"sy0\">||</span> <span class=\"re0\">$cls</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$rand</span> <span class=\"sy0\">=</span> LCG<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"BSD:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$rand<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$rand</span> <span class=\"sy0\">=</span> LCG<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>meth <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'MS'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>MS:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$rand<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> modulus <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> bsd  <span class=\"br0\">{</span><br/>    <span class=\"re0\">$^seed</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> modulus <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> ms   <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><br/>\t<span class=\"re0\">$^seed</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> modulus <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'BSD LCG first 10 values (first one is the seed):'</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> bsd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>MS LCG first 10 values (first one is the seed):\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> ms<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 28, "block": "<pre class=\"text highlighted_source\">atom seed<br/>\u00a0<br/>include builtins/bigatom.e<br/>bigatom ba_seed<br/>\u00a0<br/>function BSDrnd()<br/>    ba_seed = ba_remainder(ba_add(ba_multiply(1103515245,ba_seed),12345), #8000_0000)<br/>    return ba_seed<br/>end function<br/>\u00a0<br/>--function BSDrnd()   -- (only works on 64-bit, as per ERRE and UCBLogo above on 32-bit)<br/>--    seed = remainder(1103515245 * seed + 12345, #8000_0000)<br/>--    return seed<br/>--end function<br/>\u00a0<br/>function MSrnd()<br/>    seed = and_bits(seed*214013+2531011,#7FFFFFFF)<br/>    return floor(seed/power(2,16))<br/>end function<br/>\u00a0<br/>--seed = 0<br/>ba_seed = ba_new(0)<br/>?\"BSDrnd\"<br/>--for i=1 to 10 do\u00a0?BSDrnd() end for    -- (64-bit only)<br/>for i=1 to 10 do puts(1,ba_sprintf(\"%B\\n\",BSDrnd())) end for<br/>seed = 0<br/>?\"MSrnd\"<br/>for i=1 to 10 do\u00a0?MSrnd() end for</pre>"}, {"lang": "PHP", "loc": 25, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> bsd_rand<span class=\"br0\">(</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$seed</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"re0\">$seed</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> msvcrt_rand<span class=\"br0\">(</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$seed</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"re0\">$seed</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$lcg</span> <span class=\"sy0\">=</span> bsd_rand<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"BSD \"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"re0\">$lcg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$lcg</span> <span class=\"sy0\">=</span> msvcrt_rand<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Microsoft \"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"re0\">$lcg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(zero *BsdSeed *MsSeed)<br/>\u00a0<br/>(de bsdRand ()<br/>   (setq *BsdSeed<br/>      (&amp; (+ 12345 (* 1103515245 *BsdSeed)) `(dec (** 2 31))) ) )<br/>\u00a0<br/>(de msRand ()<br/>   (&gt;&gt; 16<br/>      (setq *MsSeed<br/>         (&amp; (+ 2531011 (* 214013 *MsSeed)) `(dec (** 2 31))) ) ) )</pre>"}, {"lang": "PL/I", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(nofixedoverflow, nosize):<br/>LCG: procedure options (main);<br/>   declare i fixed binary;<br/>\u00a0<br/>   put skip list ('BSD', 'MS');<br/>   do i = 1 to 20;<br/>      put skip list (BSD(), MS());<br/>   end;<br/>\u00a0<br/>bsd: procedure returns (fixed binary (31));<br/>    declare const fixed binary static initial (12345);<br/>    declare s fixed binary (31) static initial (123456789);<br/>\u00a0<br/>    s = s * 1103515245 + const;<br/>    s = isrl(isll(s,1), 1);<br/>    return (s);<br/>end bsd;<br/>ms: procedure returns (fixed binary (15));<br/>    declare const fixed binary (31) static initial (2531011);<br/>    declare s     fixed binary (31) static initial (123456789);<br/>\u00a0<br/>    s = s * 214013 + const;<br/>    s = isrl(isll(s,1), 1);<br/>    return (isrl(s,16));<br/>\u00a0<br/>end ms;<br/>\u00a0<br/>end LCG;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 26, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">Function</span> msstate<span class=\"br0\">{</span><br/>    <span class=\"kw3\">Param</span><span class=\"br0\">(</span><span class=\"re0\">$current_seed</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">Return</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span><span class=\"sy0\">*</span><span class=\"re0\">$current_seed</span><span class=\"sy0\">+</span><span class=\"nu0\">2531011</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>2147483648<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">Function</span> randMS<span class=\"br0\">{</span><br/>    <span class=\"kw3\">Param</span><span class=\"br0\">(</span><span class=\"re0\">$MSState</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">Return</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$MSState</span><span class=\"sy0\">/</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">Function</span> randBSD<span class=\"br0\">{</span><br/>    <span class=\"kw3\">Param</span><span class=\"br0\">(</span><span class=\"re0\">$BSDState</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">Return</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span><span class=\"sy0\">*</span><span class=\"re0\">$BSDState</span><span class=\"sy0\">+</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>2147483648<span class=\"br0\">}</span>    <br/>\u00a0<br/><span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"MS: seed=0\"</span><br/><span class=\"re0\">$seed</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"co1\">#initialize seed</span><br/><span class=\"kw3\">For</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>;$i<span class=\"kw4\">-le</span><span class=\"nu0\">5</span>;$i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$seed</span> <span class=\"sy0\">=</span> msstate<span class=\"br0\">(</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$rand</span> <span class=\"sy0\">=</span> randMS<span class=\"br0\">(</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Write-Host</span> <span class=\"re0\">$rand</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"BSD: seed=0\"</span><br/><span class=\"re0\">$seed</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"co1\">#initialize seed</span><br/><span class=\"kw3\">For</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>;$j<span class=\"kw4\">-le</span><span class=\"nu0\">5</span>;$j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$seed</span> <span class=\"sy0\">=</span> randBSD<span class=\"br0\">(</span><span class=\"re0\">$seed</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Write-Host</span> <span class=\"re0\">$seed</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 37, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> ms_LCG<span class=\"br0\">(</span>seed.q <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> state.q<br/>  <span class=\"kw1\">If</span> seed <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>    state <span class=\"sy0\">=</span> seed<br/>  <span class=\"kw1\">Else</span><br/>    state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>state <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">ProcedureReturn</span> state <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.q bsd_LCG<span class=\"br0\">(</span>seed.q <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> state.q<br/>  <span class=\"kw1\">If</span> seed <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>    state <span class=\"sy0\">=</span> seed<br/>  <span class=\"kw1\">Else</span> <br/>    state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>state <span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">ProcedureReturn</span> state<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"BSD (seed = 1)\"</span><span class=\"br0\">)</span><br/>  bsd_LCG<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>bsd_LCG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"MS (seed = 1)\"</span><span class=\"br0\">)</span><br/>  ms_LCG<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ms_LCG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> bsd_rand<span class=\"br0\">(</span>seed<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      rand.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span>*rand.<span class=\"me1\">seed</span> + <span class=\"nu0\">12345</span><span class=\"br0\">)</span> &amp; <span class=\"nu0\">0x7fffffff</span><br/>      <span class=\"kw1\">return</span> rand.<span class=\"me1\">seed</span><br/>   rand.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> seed<br/>   <span class=\"kw1\">return</span> rand<br/>\u00a0<br/><span class=\"kw1\">def</span> msvcrt_rand<span class=\"br0\">(</span>seed<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      rand.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span>*rand.<span class=\"me1\">seed</span> + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> &amp; <span class=\"nu0\">0x7fffffff</span><br/>      <span class=\"kw1\">return</span> rand.<span class=\"me1\">seed</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>   rand.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> seed<br/>   <span class=\"kw1\">return</span> rand</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require racket/generator)<br/>\u00a0<br/>(define (bsd-update state_n)<br/>  (modulo (+ (* 1103515245 state_n) 12345)<br/>          (expt 2 31)))<br/>\u00a0<br/>(define (ms-update state_n)<br/>  (modulo (+ (* 214013 state_n) 2531011)<br/>          (expt 2 31)))<br/>\u00a0<br/>(define ((rand update -&gt;rand) seed)<br/>  (generator ()<br/>   (let loop ([state_n seed])<br/>     (define state_n+1 (update state_n))<br/>     (yield (-&gt;rand state_n+1))<br/>     (loop state_n+1))))<br/>\u00a0<br/>(define bsd-rand (rand bsd-update identity))<br/>(define ms-rand (rand ms-update (\u03bb (x) (quotient x (expt 2 16)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program is a congruential generator which simulates the old BSD  and  MS random  */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 number generators.    BSD= 0 \u2500\u2500\u25ba (2**31)-1           MS= 0 \u2500\u2500\u25ba (2**16)-1 */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*used enough digits for the multiply.*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> seed=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/*perform for seed=0  and also  seed=1.*/</span><br/>  bsd=seed;      ms=seed                         <span class=\"coMULTI\">/*assign  SEED  to  two REXX variables.*/</span><br/>  <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'seed='</span>seed, <span class=\"nu0\">79</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*display the seed in a title/separator*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  show 20 rand #'s for each seed.*/</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">20</span>                             <span class=\"coMULTI\">/*obtain the right\u2500most 3 digits of  J.*/</span><br/>      bsd = <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> bsd  +    <span class=\"nu0\">12345</span><span class=\"br0\">)</span>    <span class=\"sy0\">//</span>    <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><br/>      ms  = <span class=\"br0\">(</span>    <span class=\"nu0\">214013</span> <span class=\"sy0\">*</span>  ms  +  <span class=\"nu0\">2531011</span><span class=\"br0\">)</span>    <span class=\"sy0\">//</span>    <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'  state'</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"st0\">\" BSD\"</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>bsd,     <span class=\"nu0\">11</span><span class=\"br0\">)</span>   <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>,<br/>                                   <span class=\"st0\">\" MS\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span> ms,     <span class=\"nu0\">11</span><span class=\"br0\">)</span>   <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span>,<br/>                                   <span class=\"st0\">\" rand\"</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>ms%2<span class=\"sy0\">**</span><span class=\"nu0\">16</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*seed*/</span>                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 30, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> LCG<br/>  <span class=\"kw1\">module</span> Common<br/>    <span class=\"co1\"># The original seed of this generator.</span><br/>    attr_reader <span class=\"re3\">:seed</span><br/>\u00a0<br/>    <span class=\"co1\"># Creates a linear congruential generator with the given _seed_.</span><br/>    <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>      <span class=\"re1\">@seed</span> = <span class=\"re1\">@r</span> = seed<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># LCG::Berkeley generates 31-bit integers using the same formula</span><br/>  <span class=\"co1\"># as BSD rand().</span><br/>  <span class=\"kw1\">class</span> Berkeley<br/>    <span class=\"kw1\">include</span> Common<br/>    <span class=\"kw1\">def</span> <span class=\"kw3\">rand</span><br/>      <span class=\"re1\">@r</span> = <span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"re1\">@r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff_ffff<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># LCG::Microsoft generates 15-bit integers using the same formula</span><br/>  <span class=\"co1\"># as rand() from the Microsoft C Runtime.</span><br/>  <span class=\"kw1\">class</span> Microsoft<br/>    <span class=\"kw1\">include</span> Common<br/>    <span class=\"kw1\">def</span> <span class=\"kw3\">rand</span><br/>      <span class=\"re1\">@r</span> = <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"re1\">@r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff_ffff<br/>      <span class=\"re1\">@r</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">global bsd<br/>global ms<br/>print \"Num  ___Bsd___\";chr$(9);\"__Ms_\" <br/>for i = 1 to 10<br/>    print using(\"##\",i);using(\"############\",bsdRnd());chr$(9);using(\"#####\",msRnd())<br/>next i<br/>\u00a0<br/>function bsdRnd()<br/>    bsdRnd = (1103515245 * bsd + 12345) mod (2 ^ 31)<br/>    bsd = bsdRnd<br/>end function<br/>\u00a0<br/>function msRnd()<br/>    ms = (214013 * ms + 2531011) mod (2 ^ 31)<br/>    msRnd = int(ms / 2 ^ 16)<br/>end function</pre>"}, {"lang": "Rust", "loc": 71, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>pub use rand::{Rng, SeedableRng};<br/>\u00a0<br/>pub struct BsdLcg {<br/>    state: u32,<br/>}<br/>\u00a0<br/>impl Rng for BsdLcg {<br/>    // Because the output is in the range [0, 2147483647], this should technically be `next_u16`<br/>    // (the largest integer size which is fully covered, as `rand::Rng` assumes).  The `rand`<br/>    // crate does not provide it however.  If serious usage is required, implementing this<br/>    // function as a concatenation of two `next_u16`s (elsewhere defined) should work.<br/>    fn next_u32(&amp;mut self) -&gt; u32 {<br/>        self.state = self.state.wrapping_mul(1_103_515_245).wrapping_add(12_345);<br/>        self.state\u00a0%= 1 &lt;&lt; 31;<br/>        self.state<br/>    }<br/>}<br/>\u00a0<br/>impl SeedableRng&lt;u32&gt; for BsdLcg {<br/>    fn from_seed(seed: u32) -&gt; Self {<br/>        Self { state: seed }<br/>    }<br/>    fn reseed(&amp;mut self, seed: u32) {<br/>        self.state = seed;<br/>    }<br/>}<br/>\u00a0<br/>pub struct MsLcg {<br/>    state: u32,<br/>}<br/>\u00a0<br/>impl Rng for MsLcg {<br/>    // Similarly, this outputs in the range [0, 32767] and should output a `u8`.  Concatenate<br/>    // four `next_u8`s for serious usage.<br/>    fn next_u32(&amp;mut self) -&gt; u32 {<br/>        self.state = self.state.wrapping_mul(214_013).wrapping_add(2_531_011);<br/>        self.state\u00a0%= 1 &lt;&lt; 31;<br/>        self.state &gt;&gt; 16 // rand_n = state_n / 2^16<br/>    }<br/>}<br/>\u00a0<br/>impl SeedableRng&lt;u32&gt; for MsLcg {<br/>    fn from_seed(seed: u32) -&gt; Self {<br/>        Self { state: seed }<br/>    }<br/>    fn reseed(&amp;mut self, seed: u32) {<br/>        self.state = seed;<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"~~~ BSD ~~~\");<br/>    let mut bsd = BsdLcg::from_seed(0);<br/>    for _ in 0..10 {<br/>        println!(\"{}\", bsd.next_u32());<br/>    }<br/>\u00a0<br/>    println!(\"~~~ MS ~~~\");<br/>    let mut ms = MsLcg::from_seed(0);<br/>    for _ in 0..10 {<br/>        println!(\"{}\", ms.next_u32());<br/>    }<br/>\u00a0<br/>    // Because we have implemented the `rand::Rng` trait, we can generate a variety of other types.<br/>    println!(\"~~~ Others ~~~\");<br/>    println!(\"{:?}\", ms.gen::&lt;[u32; 5]&gt;());<br/>    println!(\"{}\", ms.gen::&lt;bool&gt;());<br/>    println!(\"{}\", ms.gen_ascii_chars().take(15).collect::&lt;String&gt;());<br/>}</pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LinearCongruentialGenerator <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bsdRandom<span class=\"br0\">(</span>rseed<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Iterator<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Iterator<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> seed<span class=\"sy0\">=</span>rseed<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasNext<span class=\"sy0\">:</span>Boolean<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"br0\">{</span>seed<span class=\"sy0\">=</span><span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> + <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> Int.<span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span> seed<span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> msRandom<span class=\"br0\">(</span>rseed<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Iterator<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Iterator<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> seed<span class=\"sy0\">=</span>rseed<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasNext<span class=\"sy0\">:</span>Boolean<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"br0\">{</span>seed<span class=\"sy0\">=</span><span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> Int.<span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span>it<span class=\"sy0\">:</span>Iterator<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, n<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>it take n mkString <span class=\"st0\">\", \"</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"-- seed 0 --\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"BSD: \"</span>+ toString<span class=\"br0\">(</span>bsdRandom<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"MS\u00a0: \"</span>+ toString<span class=\"br0\">(</span>msRandom<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"-- seed 1 --\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"BSD: \"</span>+ toString<span class=\"br0\">(</span>bsdRandom<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"MS\u00a0: \"</span>+ toString<span class=\"br0\">(</span> msRandom<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bsd<span class=\"sy0\">-</span>rand seed<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> seed <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> seed<span class=\"br0\">)</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><span class=\"br0\">)</span> seed<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>msvcrt<span class=\"sy0\">-</span>rand seed<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> seed <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> seed<span class=\"br0\">)</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> seed <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; auxiliary function to get a list of 'n random numbers from generator 'r</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> r n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> r <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>bsd<span class=\"sy0\">-</span>rand <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"co1\">; (12345 1406932606 654583775 1449466924 229283573 1109335178 1051550459 1293799192 794471793 551188310)</span><br/>\u00a0<br/><span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>msvcrt<span class=\"sy0\">-</span>rand <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"co1\">; (38 7719 21238 2437 8855 11797 8365 32285 10450 30612)</span></pre>"}, {"lang": "Seed7", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>var bigInteger: bsdSeed is 0_;<br/>var bigInteger: msSeed is 0_;<br/>\u00a0<br/>const func integer: bsdRand is func<br/>  result<br/>    var integer: bsdRand is 0;<br/>  begin<br/>    bsdSeed\u00a0:= (1103515245_ * bsdSeed + 12345_) mod 2147483648_;<br/>    bsdRand\u00a0:= ord(bsdSeed);<br/>  end func;<br/>\u00a0<br/>const func integer: msRand is func<br/>  result<br/>    var integer: msRand is 0;<br/>  begin<br/>    msSeed\u00a0:= (214013_ * msSeed + 2531011_) mod 2147483648_;<br/>    msRand\u00a0:= ord(msSeed) mdiv 65536;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    writeln(\"         BSD          MS\");<br/>    for i range 1 to 10 do<br/>      writeln(bsdRand lpad 12 &lt;&amp; msRand lpad 12);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import &lt;Utilities/Random.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:=<br/>\tlet<br/>\t\tbsdRandomGenerator\u00a0:= newRandomGenerator(0, 0, 2147483647, bsdNext);<br/>\t\tmsRandomGenerator\u00a0:= newRandomGenerator(0, 0, 32767, msNext);<br/>\u00a0<br/>\t\t// Create a random sequence with each one of the generators<br/>\t\tnumbers\u00a0:= getRandomSequence([bsdRandomGenerator, msRandomGenerator], 10).Value;<br/>\tin<br/>\t\t\"BSD Values: \" ++ toString(numbers[1]) ++<br/>\t\t\"\\nMS Values: \" ++ toString(numbers[2]);<br/>\u00a0<br/>bsdNext(RG)\u00a0:=<br/>\tlet<br/>\t\tnewSeed\u00a0:= ((1103515245 -&gt; int64 * RG.Seed + 12345) mod 2147483648) -&gt; int32;<br/>\tin<br/>\t\t(Value\u00a0: newSeed,<br/>\t\tGenerator\u00a0: (Seed\u00a0: newSeed, RandomMin\u00a0: RG.RandomMin, RandomMax\u00a0: RG.RandomMax, NextFunction\u00a0: RG.NextFunction));<br/>\u00a0<br/>msNext(RG)\u00a0:=<br/>\tlet<br/>\t\tnewSeed\u00a0:= ((214013 -&gt; int64 * RG.Seed + 2531011) mod 2147483648) -&gt; int32;<br/>\tin<br/>\t\t(Value\u00a0: newSeed / 65536,<br/>\t\tGenerator\u00a0: (Seed\u00a0: newSeed, RandomMin\u00a0: RG.RandomMin, RandomMax\u00a0: RG.RandomMax, NextFunction\u00a0: RG.NextFunction));<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 30, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> LCG <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\"># Creates a linear congruential generator and remembers the initial seed.</span><br/>  <span class=\"kw1\">class</span> Common<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     has seed = r<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># LCG::Berkeley generates 31-bit integers using the same formula</span><br/>  <span class=\"co1\"># as BSD rand().</span><br/>  <span class=\"kw1\">class</span> Berkeley <span class=\"sy0\">&lt;</span> Common <span class=\"br0\">{</span><br/>    method <span class=\"kw3\">rand</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff_ffff<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># LCG::Microsoft generates 15-bit integers using the same formula</span><br/>  <span class=\"co1\"># as rand() from the Microsoft C Runtime.</span><br/>  <span class=\"kw1\">class</span> Microsoft <span class=\"sy0\">&lt;</span> Common <span class=\"br0\">{</span><br/>    method <span class=\"kw3\">rand</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff_ffff<span class=\"br0\">)</span>;<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span>;<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var lcg1 = <span class=\"re2\">LCG::Berkeley</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>say <span class=\"nu0\">5</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> lcg1.<span class=\"kw3\">rand</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var lcg2 = <span class=\"re2\">LCG::Microsoft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>say <span class=\"nu0\">5</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> lcg2.<span class=\"kw3\">rand</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Sparkling", "loc": 20, "block": "<pre class=\"text highlighted_source\">var states = {<br/>\t\"BSD\": 0,<br/>\t\"MS\": 0<br/>};<br/>\u00a0<br/>function BSD_seed(n) {<br/>\tstates.BSD = n;<br/>}<br/>\u00a0<br/>function BSD_rand() {<br/>\treturn states.BSD = (1103515245 * states.BSD + 12345)\u00a0% (1 &lt;&lt; 31);<br/>}<br/>\u00a0<br/>function Microsoft_seed(n) {<br/>\tstates.MS = n;<br/>}<br/>\u00a0<br/>function Microsoft_rand() {<br/>\treturn (states.MS = (214013 * states.MS + 2531011)\u00a0% (1 &lt;&lt; 31))\u00a0% (1 &lt;&lt; 15);<br/>}</pre>"}, {"lang": "Stata", "loc": 25, "block": "<pre class=\"text highlighted_source\">mata<br/>function rand_bsd(u) {<br/>\tm = 65536<br/>\tu1 = floor(u/m)<br/>\tu2 = mod(u,m)<br/>\ta1 = 16838<br/>\ta2 = 20077<br/>\tb = 12345<br/>\tu = mod((a1*u2+a2*u1)*m+a2*u2+b,2147483648)<br/>\treturn(u)<br/>}<br/>\u00a0<br/>function rand_ms(u) {<br/>\tu = mod(214013*u+2531011,2147483648)<br/>\treturn(floor(u/65536))<br/>}<br/>\u00a0<br/>function rand_seq(f,seed,n) {<br/>\ta = J(n,1,.)<br/>\tfor (i=1; i&lt;=n; i++) a[i] = (*f)(seed)<br/>\treturn(a)<br/>}<br/>\u00a0<br/>rand_seq(&amp;rand_bsd(),1,10)<br/>rand_seq(&amp;rand_ms(),0,10)</pre>"}, {"lang": "Swift", "loc": 47, "block": "<pre class=\"text highlighted_source\">import Cocoa<br/>\u00a0<br/>class LinearCongruntialGenerator {<br/>\u00a0<br/>    var state = 0 //seed of 0 by default<br/>    let a, c, m, shift: Int<br/>\u00a0<br/>    //we will use microsoft random by default<br/>    init() {<br/>        self.a = 214013<br/>        self.c = 2531011<br/>        self.m = Int(pow(2.0, 31.0)) //2^31 or 2147483648<br/>        self.shift = 16<br/>    }<br/>\u00a0<br/>    init(a: Int, c: Int, m: Int, shift: Int) {<br/>        self.a = a<br/>        self.c = c<br/>        self.m = m //2^31 or 2147483648<br/>        self.shift = shift<br/>    }<br/>\u00a0<br/>    func seed(seed: Int) -&gt; Void {<br/>        state = seed;<br/>    }<br/>\u00a0<br/>    func random() -&gt; Int {<br/>        state = (a * state + c)\u00a0% m<br/>        return state &gt;&gt; shift<br/>    }<br/>}<br/>\u00a0<br/>let microsoftLinearCongruntialGenerator = LinearCongruntialGenerator()<br/>let BSDLinearCongruntialGenerator = LinearCongruntialGenerator(a: 1103515245, c: 12345, m: 2147483648, shift: 0)<br/>\u00a0<br/>print(\"Microsft Rand:\")<br/>for(var i = 0; i &lt; 10; i++)<br/>{<br/>    print(microsoftLinearCongruntialGenerator.random())<br/>}<br/>\u00a0<br/>print(\"\") //new line for readability<br/>print(\"BSD Rand:\")<br/>for(var i = 0; i &lt; 10; i++)<br/>{<br/>    print(BSDLinearCongruntialGenerator.random())<br/>}</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># General form of a linear-congruential RNG</span><br/>oo::<span class=\"me1\">class</span> create LCRNG <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> seed A B C D<br/>    constructor <span class=\"br0\">{</span>init a b c d<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$init</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> init <span class=\"br0\">[</span><span class=\"kw2\">clock</span> clicks<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">variable</span> seed <span class=\"re0\">$init</span> A <span class=\"re0\">$a</span> B <span class=\"re0\">$b</span> C <span class=\"re0\">$c</span> D <span class=\"re0\">$d</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> rand <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> seed <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$A</span> <span class=\"sy0\">*</span> <span class=\"re0\">$seed</span> + <span class=\"re0\">$B</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$C</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$seed</span> / <span class=\"re0\">$D</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> srand x <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> seed <span class=\"re0\">$x</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Subclass to introduce constants</span><br/>oo::<span class=\"me1\">class</span> create BSDRNG <span class=\"br0\">{</span><br/>    superclass LCRNG<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">{</span>initialSeed -<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tnext <span class=\"re0\">$initialSeed</span> <span class=\"nu0\">1103515245</span> <span class=\"nu0\">12345</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>oo::<span class=\"me1\">class</span> create MSRNG <span class=\"br0\">{</span><br/>    superclass LCRNG<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">{</span>initialSeed -<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tnext <span class=\"re0\">$initialSeed</span> <span class=\"nu0\">214013</span> <span class=\"nu0\">2531011</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">16</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 35, "block": "<pre class=\"text highlighted_source\">w = 32                                 ' Change for different integer size<br/>b = 0                                  ' Initial BSD seed<br/>m = 0                                  ' Initial MS seed<br/>\u00a0<br/>Print \"BSD\"                            ' Get the first 10 numbers from BSD<br/>For i = 1 To 10<br/>    GoSub _randBSD<br/>    Print Pop()<br/>Next i<br/>\u00a0<br/>Print<br/>\u00a0<br/>Print \"Microsoft\"                      ' Get the first 10 numbers from MS<br/>For i = 1 To 10<br/>    GoSub _randMS<br/>    Print Pop()<br/>Next i<br/>\u00a0<br/>End<br/>\u00a0<br/>\u00a0<br/>_randBSD                               ' ( n1 -- n2)<br/>    Push (1103515245 * b + 12345)      ' Compensate for the sign bit<br/>    If Tos() &lt; 0 Then Push (Pop() - (2 ^ (w-1)))<br/>    b = Pop()\u00a0% (2 ^ 31)               ' Now we got a number less than 2^31<br/>    Push b                             ' So we can complete the operation<br/>Return<br/>\u00a0<br/>\u00a0<br/>_randMS                                ' ( n1 -- n2)<br/>    Push (214013 * m + 2531011)        ' Compensate for the sign bit<br/>    If Tos() &lt; 0 Then Push (Pop() - (2 ^ (w-1)))<br/>    m =  Pop()\u00a0% (2 ^ 31)              ' Now we got a number less than 2^31<br/>    Push m / (2 ^ 16)                  ' So we can complete the operation<br/>Return</pre>"}, {"lang": "UNIX Shell", "loc": 25, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#! /bin/bash</span><br/>\u00a0<br/><span class=\"kw1\">function</span> BSD<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">SEED</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1103515245</span> <span class=\"sy0\">*</span> <span class=\"re1\">$SEED</span> + <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"  <span class=\"es2\">$SEED</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> MS<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">SEED</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"re1\">$SEED</span> + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"  <span class=\"es4\">$(($SEED / 2**16)</span>)\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> output<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">SEED</span>=<span class=\"nu0\">0</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">}</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">eval</span> <span class=\"st0\">\"$1\"</span><br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>output BSD<br/>output MS</pre>"}, {"lang": "X86 Assembly", "loc": 188, "block": "<pre class=\"asm highlighted_source\"><span class=\"co1\">;x86-64 assembly code for Microsoft Windows</span><br/><span class=\"co1\">;Tested in windows 7 Enterprise Service Pack 1 64 bit</span><br/><span class=\"co1\">;With the AMD FX(tm)-6300 processor</span><br/><span class=\"co1\">;Assembled with NASM version 2.11.06 </span><br/><span class=\"co1\">;Linked to C library with gcc version 4.9.2 (x86_64-win32-seh-rev1, Built by MinGW-W64 project)</span><br/>\u00a0<br/><span class=\"co1\">;Assembled and linked with the following commands:</span><br/><span class=\"co1\">;nasm -f win64 &lt;filename&gt;.asm -o &lt;filename&gt;.obj</span><br/><span class=\"co1\">;gcc &lt;filename&gt;.obj -o &lt;filename&gt;</span><br/>\u00a0<br/><span class=\"co1\">;Takes number of iterations to run RNG loop as command line parameter.</span><br/>\u00a0<br/><span class=\"kw5\">extern</span> printf<span class=\"sy1\">,</span>puts<span class=\"sy1\">,</span>atoi<span class=\"sy1\">,</span>exit<span class=\"sy1\">,</span>time<span class=\"sy1\">,</span>malloc<br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.data</span><br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>errmsg_argnumber<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"There should be no more than one argument.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>errmsg_noarg<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"Number of iterations was not specified.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>errmsg_zeroiterations<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"Zero iterations of RNG loop specified.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>errmsg_timefail<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"Unable to retrieve calender time.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>errmsg_mallocfail<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"Unable to allocate memory for array of random numbers.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw5\">align</span> <span class=\"nu0\">64</span><br/>fmt_random<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"The\u00a0%u number generated is\u00a0%d\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0xa</span><span class=\"sy1\">,</span><span class=\"nu0\">0xd</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.bss</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.text</span><br/><span class=\"kw5\">global</span> main<br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">;check for argument</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">jle</span> err_noarg<br/>\u00a0<br/><span class=\"co1\">;ensure that only one argument was entered</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">jg</span> err_argnumber<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;get number of times to iterate get_random</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rdx</span> <span class=\"sy1\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/><span class=\"kw1\">call</span> atoi<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;ensure that number of iterations is greater than 0</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">jle</span> err_zeroiterations<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;calculate space needed for an array containing the random numbers</span><br/><span class=\"kw1\">shl</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">;move size of array into r14</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r14</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/>\u00a0<br/><span class=\"co1\">;reserve memory for array of random numbers with malloc</span><br/><span class=\"kw1\">call</span> malloc<br/>\u00a0<br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">jz</span> err_mallocfail<br/>\u00a0<br/><span class=\"co1\">;pointer to array in r15</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r15</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;seed the RNG using time()</span><br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/><span class=\"kw1\">call</span> time<br/>\u00a0<br/><span class=\"co1\">;ensure that time returns valid output</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">jz</span> err_timefail<br/>\u00a0<br/><span class=\"co1\">;calculate address of end of array in r14</span><br/><span class=\"kw1\">add</span> <span class=\"kw4\">r14</span><span class=\"sy1\">,</span><span class=\"kw4\">r15</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;pointer to array of random numbers in r15</span><br/><span class=\"co1\">;address of end of array in r14</span><br/><span class=\"co1\">;current address in array in rdi</span><br/><span class=\"co1\">;multiplier in rbx</span><br/><span class=\"co1\">;seed in rax</span><br/><span class=\"co1\">;current random number in rcx</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;prepare random number generator</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"kw4\">r15</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"nu0\">214013</span><br/>\u00a0<br/>\u00a0<br/>get_random<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">;multiply by 214013 and add 2561011 to get next state</span><br/><span class=\"kw1\">mul</span> <span class=\"kw4\">ebx</span><br/><span class=\"kw1\">add</span> <span class=\"kw4\">eax</span><span class=\"sy1\">,</span><span class=\"nu0\">2531011</span><br/>\u00a0<br/><span class=\"co1\">;shr by 16 and AND with 0x7FFF to get current random number</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span><span class=\"kw4\">eax</span><br/><span class=\"kw1\">shr</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span><span class=\"nu0\">16</span><br/><span class=\"kw1\">and</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span><span class=\"nu0\">0x7fff</span><br/>\u00a0<br/><span class=\"co1\">;store random number in array</span><br/><span class=\"kw1\">mov</span> <span class=\"br0\">[</span><span class=\"kw4\">rdi</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">ecx</span><br/>\u00a0<br/><span class=\"kw1\">add</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"kw4\">r14</span><br/><span class=\"kw1\">jl</span> get_random<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;pointer to array of random numbers in r15</span><br/><span class=\"co1\">;address of end of array in r14</span><br/><span class=\"co1\">;current address in array in rdi</span><br/><span class=\"co1\">;array index in rsi</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span><span class=\"kw4\">rsi</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"kw4\">r15</span><br/>\u00a0<br/>print_random<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>fmt_random<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span><span class=\"kw4\">rsi</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r8d</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rdi</span><span class=\"br0\">]</span><br/><span class=\"kw1\">call</span> printf<br/>\u00a0<br/><span class=\"kw1\">add</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">add</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"kw4\">r14</span><br/><span class=\"kw1\">jl</span> print_random<br/>\u00a0<br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/><span class=\"kw1\">call</span> exit<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;;;;;;;;;;ERROR MESSAGES;;;;;;;;;;;;;;;;</span><br/>\u00a0<br/>err_argnumber<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_argnumber<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">jmp</span> exit_one<br/>\u00a0<br/>\u00a0<br/>err_noarg<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_noarg<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">jmp</span> exit_one<br/>\u00a0<br/>\u00a0<br/>err_zeroiterations<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_zeroiterations<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">jmp</span> exit_one<br/>\u00a0<br/>\u00a0<br/>err_timefail<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_timefail<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">jmp</span> exit_one<br/>\u00a0<br/>\u00a0<br/>err_mallocfail<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_mallocfail<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/>\u00a0<br/>exit_one<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">call</span> exit</pre>"}, {"lang": "XPL0", "loc": 29, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int R;<br/>\u00a0<br/>func BSD;<br/>[R:= (1103515245*R + 12345) &amp; $7FFF_FFFF;<br/>return R;<br/>]; \\BSD<br/>\u00a0<br/>\u00a0<br/>func MSFT;<br/>[R:= (214013*R + 2531011) &amp; $7FFF_FFFF;<br/>return R&gt;&gt;16;<br/>]; \\MSFT<br/>\u00a0<br/>\u00a0<br/>int N;<br/>[SetVid(4);             \\320x200x2 graphics<br/>R:= 0;                  \\initialize seed<br/>for N:= 0 to 5000 do<br/>        Point(rem(BSD/180), rem(BSD/180), 3);<br/>N:= ChIn(1);            \\wait for keystoke<br/>\u00a0<br/>SetVid(4);              \\320x200x2 graphics<br/>R:= 0;                  \\initialize seed<br/>for N:= 0 to 5000 do<br/>        Point(rem(MSFT/180), rem(MSFT/180), 3);<br/>N:= ChIn(1);            \\wait for keystoke<br/>SetVid(3);              \\restore normal text mode<br/>]</pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">var [private] seed = 0;<br/>fcn srand(s){ seed = s }<br/>\u00a0<br/>const TWO31=(1).shiftLeft(31);<br/>\u00a0<br/>//#define BSD_RAND 1<br/>\u00a0<br/>#ifdef BSD_RAND<br/>   const A=1103515245, C=12345;<br/>   fcn rand{ seed = (seed * A + C)\u00a0% TWO31 }<br/>#else  // MS rand<br/>   const A=214013, C=2531011, TWO16=(1).shiftLeft(16);<br/>   fcn rand{ (seed = (seed * A + C)\u00a0% TWO31) / TWO16 }<br/>#endif</pre>"}]}