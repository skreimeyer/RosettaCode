{"task": "Test_a_function", "blocks": [{"lang": "ACL2", "loc": 36, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> reverse-split-at-r <span class=\"br0\">(</span>xs i ys<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mv xs ys<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>reverse-split-at-r <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> reverse-split-at <span class=\"br0\">(</span>xs i<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reverse-split-at-r xs i <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> is-palindrome <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>lngth <span class=\"br0\">(</span><span class=\"kw1\">length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>idx <span class=\"br0\">(</span>floor lngth <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>xs ys<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>reverse-split-at <span class=\"br0\">(</span>coerce str '<span class=\"kw1\">list</span><span class=\"br0\">)</span> idx<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod lngth <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">equal</span> xs ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>include-book <span class=\"st0\">\"testing\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">teachpacks</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>is-palindrome <span class=\"st0\">\"abba\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>is-palindrome <span class=\"st0\">\"mom\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>is-palindrome <span class=\"st0\">\"dennis sinned\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>is-palindrome <span class=\"st0\">\"palindrome\"</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>is-palindrome <span class=\"st0\">\"racecars\"</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>include-book <span class=\"st0\">\"doublecheck\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">teachpacks</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrandom random-palindrome <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>chars <span class=\"br0\">(</span>random-list-of <span class=\"br0\">(</span>random-char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span><span class=\"kw1\">append</span> chars <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            'string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defproperty palindrome-test<br/>  <span class=\"br0\">(</span>p <span class=\"sy0\">:</span><span class=\"kw1\">value</span> <span class=\"br0\">(</span>random-palindrome<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>is-palindrome p<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Function <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Palindrome <span class=\"br0\">(</span>Text\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Offset <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">Text</span>'Length / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Text <span class=\"br0\">(</span>Text'First + Offset<span class=\"br0\">)</span> /= Text <span class=\"br0\">(</span>Text'Last - Offset<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> True;<br/>   <span class=\"kw1\">end</span> Palindrome;<br/>\u00a0<br/>   str1\u00a0: String\u00a0:= <span class=\"st0\">\"racecar\"</span>;<br/>   str2\u00a0: String\u00a0:= <span class=\"st0\">\"wombat\"</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">pragma</span> Assert<span class=\"br0\">(</span>False<span class=\"br0\">)</span>; <span class=\"co1\">-- raises an exception if assertions are switched on</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Skipping the test! Please compile with assertions switched on!\"</span><span class=\"br0\">)</span>; <br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <span class=\"co1\">-- assertions are switched on -- perform the tests</span><br/>         <span class=\"kw3\">pragma</span> Assert <span class=\"br0\">(</span>Palindrome <span class=\"br0\">(</span>str1<span class=\"br0\">)</span> = True,  <span class=\"st0\">\"Assertion on str1 failed\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">pragma</span> Assert <span class=\"br0\">(</span>Palindrome <span class=\"br0\">(</span>str2<span class=\"br0\">)</span> = False, <span class=\"st0\">\"Assertion on str2 failed\"</span><span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Test Passed!\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Test_Function;</pre>"}, {"lang": "AutoHotkey", "loc": 38, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; assert.ahk</span><br/><span class=\"co1\">;; assert(a, b, test=2)</span><br/>assert<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">=</span><span class=\"st0\">\"blank\"</span><span class=\"sy0\">,</span> test<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"st0\">\"blank\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span>\u00a0!a<br/>      <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <span class=\"st0\">\"blank value\"</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> equal_list<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">else</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% test <span class=\"sy0\">.</span> <span class=\"st0\">\":`n\"</span> <span class=\"sy0\">.</span> a <span class=\"sy0\">.</span> <span class=\"st0\">\"`nexpected:`n\"</span> <span class=\"sy0\">.</span> b<br/><span class=\"br0\">}</span><br/>\u00a0<br/>!r::<a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">reload</span></a><br/>\u00a0<br/><span class=\"co1\">;; equal_list(a, b, delimiter)</span><br/>equal_list<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> delimiter<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"re0\">%delimiter%</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">instr</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"re0\">%delimiter%</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">instr</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Brat", "loc": 24, "block": "<pre class=\"text highlighted_source\">include\u00a0:assert<br/>\u00a0<br/>palindrome? = { str | <br/>  str = str.downcase.sub /\\s+/ \"\"<br/>  str == str.reverse <br/>}<br/>\u00a0<br/>setup name: \"palindrome test\" {<br/>  test \"is a palindrome\" {<br/>    assert { palindrome? \"abba\" }<br/>  }<br/>\u00a0<br/>  test \"is not a palindrome\" {<br/>    assert_false { palindrome? \"abb\" }<br/>  }<br/>\u00a0<br/>  test \"is not a string\" {<br/>    assert_fail { palindrome? 1001 }<br/>  }<br/>\u00a0<br/>  test \"this test fails\" {<br/>    assert { palindrome? \"blah blah\" }<br/>  }<br/>}</pre>"}, {"lang": "C", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"kw4\">int</span> IsPalindrome<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>Str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"racecar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"alice\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>test<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftest test-palindrome?<br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> true <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"amanaplanacanalpanama\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> false <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"Test 1, 2, 3\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>run-tests<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 35, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">PalindromeDetector.ConsoleApp</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PalindromeDetector<span class=\"sy0\">.</span><span class=\"me1\">VisualStudioTests</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>TestClass<span class=\"br0\">]</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> VSTests<br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>TestMethod<span class=\"br0\">]</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PalindromeDetectorCanUnderstandPalindrome<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">//Microsoft.VisualStudio.QualityTools.UnitTestFramework v4.0.30319</span><br/>            <span class=\"kw4\">bool</span> expected <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> actual<span class=\"sy0\">;</span><br/>            actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindrome</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span>expected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindromeNonRecursive</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span>expected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindrome</span><span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span>expected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindromeNonRecursive</span><span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span>expected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">[</span>TestMethod<span class=\"br0\">]</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PalindromeDetecotryCanUnderstandNonPalindrome<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span> notExpected <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindrome</span><span class=\"br0\">(</span><span class=\"st0\">\"ThisIsNotAPalindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreNotEqual</span><span class=\"br0\">(</span>notExpected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            actual <span class=\"sy0\">=</span> Program<span class=\"sy0\">.</span><span class=\"me1\">IsPalindromeNonRecursive</span><span class=\"br0\">(</span><span class=\"st0\">\"ThisIsNotAPalindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreNotEqual</span><span class=\"br0\">(</span>notExpected, actual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"racecar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"bob\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"alice\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 3, "block": "<pre class=\"delphi highlighted_source\">  <span class=\"kw3\">Assert</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">'sal\u00e0las'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">'sal\u00e0las is a valid palindrome'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Assert</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">'Ingirumimusnocteetconsumimurigni'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">'Ingirumimusnocteetconsumimurigni is a valid palindrome'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Assert</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">'123'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">'123 is not a valid palindrome'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 50, "block": "<pre class=\"e highlighted_source\"><span class=\"co1\">#!/usr/bin/env rune</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isPalindrome<span class=\"br0\">(</span>string <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"sy0\">&gt;</span>   <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> upper <span class=\"sy0\">:=</span> string.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span>   <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> last <span class=\"sy0\">:=</span> upper.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"sy0\">&gt;</span>   <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">?</span> <span class=\"br0\">(</span>upper<span class=\"br0\">[</span>last <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> upper<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> upper.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/><span class=\"sy0\">&gt;</span>     return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/><span class=\"sy0\">&gt;</span>   <span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;</span>   return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"aa\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"baa\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: false</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"baab\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ba_ab\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ba_ ab\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: false</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ba _ ab\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: false</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> x <span class=\"sy0\">:=</span> <span class=\"st0\">\"ab\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">15</span><span class=\"sy0\">;</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/>\u00a0<br/><span class=\"sy0\">?</span> x.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 65536</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> xreversed <span class=\"sy0\">:=</span> <span class=\"st0\">\"ba\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">15</span><span class=\"sy0\">;</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/>\u00a0<br/><span class=\"sy0\">?</span> isPalindrome<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> xreversed<span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> xreversed<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 131072</span></pre>"}, {"lang": "EchoLisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"aba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"abbbca\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"palindrome fail\"</span><span class=\"br0\">)</span><br/>\ud83d\udca5 <span class=\"kw1\">error</span><span class=\"sy0\">:</span> <span class=\"me1\">palindrome</span> fail <span class=\"sy0\">:</span> <span class=\"me1\">assertion</span> failed <span class=\"sy0\">:</span> <span class=\"br0\">(</span>palindrome? abbbca<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"aba\"</span><span class=\"br0\">)</span> #t<span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"abcda\"</span><span class=\"br0\">)</span> #f<span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span>check-expect <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"abcda\"</span><span class=\"br0\">)</span> #t<span class=\"br0\">)</span><br/>\ud83d\ude10 warning<span class=\"sy0\">:</span> #t <span class=\"sy0\">:</span> <span class=\"me1\">check</span> failed <span class=\"sy0\">:</span> <span class=\"br0\">(</span>palindrome? abcda<span class=\"br0\">)</span> \u2192 #f<br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"un roc lamina l animal cornu\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 #t<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 9, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> palindrome_tests <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span> export_all <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">include_lib</span><span class=\"br0\">(</span> <span class=\"st0\">\"eunit/include/eunit.hrl\"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">abcba_test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\u00a0?<span class=\"re3\">assert</span><span class=\"br0\">(</span> palindrome:<span class=\"re3\">is_palindrome</span><span class=\"br0\">(</span><span class=\"st0\">\"abcba\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">abcdef_test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\u00a0?<span class=\"re3\">assertNot</span><span class=\"br0\">(</span> palindrome:<span class=\"re3\">is_palindrome</span><span class=\"br0\">(</span><span class=\"st0\">\"abcdef\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 13, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"co1\">--unittest in standard library 4.0+</span><br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>unittest.e<br/><span class=\"kw1\">include</span> palendrome.e  <span class=\"co1\">--routines to be tested</span><br/>\u00a0<br/><span class=\"kw2\">object</span> p <span class=\"sy1\">=</span> <span class=\"st0\">\"12321\"</span><br/>\u00a0<br/>test_equal<span class=\"br0\">(</span><span class=\"st0\">\"12321\"</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> isPalindrome<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>test_equal<span class=\"br0\">(</span><span class=\"st0\">\"r12321\"</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> isPalindrome<span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>test_report<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> palindrome <span class=\"br0\">(</span>s\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> s.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">rev</span> a <span class=\"sy0\">=</span> a<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">open</span> NUnit.<span class=\"me1\">Framework</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>TestFixture<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> TestCases<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">member</span> x.<span class=\"me1\">Test01</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Assert.<span class=\"me1\">IsTrue</span><span class=\"br0\">(</span>palindrome <span class=\"st0\">\"radar\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">member</span> x.<span class=\"me1\">Test02</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Assert.<span class=\"me1\">IsFalse</span><span class=\"br0\">(</span>palindrome <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USING: kernel sequences\u00a0;<br/>IN: palindrome<br/>\u00a0<br/>: palindrome? ( string --\u00a0? ) dup reverse =\u00a0;</pre>"}, {"lang": "Fantom", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class TestPalindrome\u00a0: Test<br/>{<br/>  public Void testIsPalindrome ()<br/>  {<br/>    verify(Palindrome.isPalindrome(\"\"))<br/>    verify(Palindrome.isPalindrome(\"a\"))<br/>    verify(Palindrome.isPalindrome(\"aa\"))<br/>    verify(Palindrome.isPalindrome(\"aba\"))<br/>    verifyFalse(Palindrome.isPalindrome(\"abb\"))<br/>    verify(Palindrome.isPalindrome(\"sal\u00e0las\"))<br/>    verify(Palindrome.isPalindrome(\"In girum imus nocte et consumimur igni\".lower.replace(\" \",\"\")))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> pal<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"testing\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> TestPals<span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>testing<span class=\"sy3\">.</span>T<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pals <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\".\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"11\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ere\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pals <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>IsPal<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            t<span class=\"sy3\">.</span>Error<span class=\"sy1\">(</span><span class=\"st0\">\"IsPal returned false on palindrome,\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> TestNonPals<span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>testing<span class=\"sy3\">.</span>T<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    nps <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"no\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"odd\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"sal\u00e0las\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nps <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> IsPal<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            t<span class=\"sy3\">.</span>Error<span class=\"sy1\">(</span><span class=\"st0\">\"IsPal returned true on non-palindrome,\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> pal<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"testing\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> TestPals<span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>testing<span class=\"sy3\">.</span>T<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pals <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\".\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"11\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ere\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pals <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>IsPal<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            t<span class=\"sy3\">.</span>Error<span class=\"sy1\">(</span><span class=\"st0\">\"IsPal returned false on palindrome,\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> TestNonPals<span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>testing<span class=\"sy3\">.</span>T<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    nps <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"no\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"odd\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"sal\u00e0las\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nps <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> IsPal<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            t<span class=\"sy3\">.</span>Error<span class=\"sy1\">(</span><span class=\"st0\">\"IsPal returned true on non-palindrome,\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 20, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Test<span class=\"sy0\">.</span>QuickCheck<br/>\u00a0<br/>isPalindrome <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPalindrome x <span class=\"sy0\">=</span> x <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> x<br/>\u00a0<br/><span class=\"coMULTI\">{- There is no built-in definition of how to generate random characters;<br/>   here we just specify ASCII characters. Generating strings then automatically<br/>   follows from the definition of String as list of Char. -}</span><br/><span class=\"kw1\">instance</span> Arbitrary <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"kw1\">where</span><br/>  arbitrary <span class=\"sy0\">=</span> choose <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\3</span>2'</span><span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es0\">\\1</span>27'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--                                            /------------------------- the randomly-generated parameters</span><br/><span class=\"co1\">--                                            |      /------------------ the constraint on the test values</span><br/><span class=\"co1\">--                                            |      |                /- the condition which should be true</span><br/><span class=\"co1\">--                                            v      v                v</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Even palindromes: \"</span> <span class=\"sy0\">&gt;&gt;</span> quickCheck <span class=\"br0\">(</span>\\s   <span class=\"sy0\">-&gt;</span>                  isPalindrome <span class=\"br0\">(</span>s <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Odd palindromes:  \"</span> <span class=\"sy0\">&gt;&gt;</span> quickCheck <span class=\"br0\">(</span>\\s   <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> s<span class=\"br0\">)</span> <span class=\"sy0\">==&gt;</span> isPalindrome <span class=\"br0\">(</span>s <span class=\"sy0\">++</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Non-palindromes:  \"</span> <span class=\"sy0\">&gt;&gt;</span> quickCheck <span class=\"br0\">(</span>\\i s <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> s<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> i <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s <span class=\"sy0\">&amp;&amp;</span> i<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">/=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<br/>                                                                  <span class=\"sy0\">==&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span>isPalindrome <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> i s <span class=\"sy0\">++</span> <span class=\"st0\">\"\u2022\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> i s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"ablewasiereisawelba\"</span><br/>    assert<span class=\"br0\">{</span><span class=\"st0\">\"test1\"</span><span class=\"sy0\">,</span>palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    assertFailure<span class=\"br0\">{</span><span class=\"st0\">\"test2\"</span><span class=\"sy0\">,</span>palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"un\"</span><span class=\"sy0\">||</span>s<br/>    assert<span class=\"br0\">{</span><span class=\"st0\">\"test3\"</span><span class=\"sy0\">,</span>palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    assertFailure<span class=\"br0\">{</span><span class=\"st0\">\"test4\"</span><span class=\"sy0\">,</span>palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s <span class=\"sy0\">==</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> assert<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\": failed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> assertFailure<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\": failed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 16, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. Contents of palindrome_test.ijs</span><br/>\u00a0<br/><span class=\"co1\">NB. Basic testing</span><br/>test_palinA=: monad define<br/>  assert isPalin0 <span class=\"st_h\">'abcba'</span><br/>  assert isPalin0 <span class=\"st_h\">'aa'</span><br/>  assert isPalin0 <span class=\"st_h\">''</span><br/>  assert -. isPalin0 <span class=\"st_h\">'ab'</span><br/>  assert -. isPalin0 <span class=\"st_h\">'abcdba'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. Can test for expected failure instead</span><br/>palinB_expect=: <span class=\"st_h\">'assertion failure'</span><br/>test_palinB=: monad define<br/>  assert isPalin0 <span class=\"st_h\">'ab'</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 48, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"kw2\">static</span> <span class=\"co2\">ExampleClass.pali</span><span class=\"sy0\">;</span> <span class=\"co1\">// or from wherever it is defined</span><br/><span class=\"kw2\">import</span> <span class=\"kw2\">static</span> <span class=\"co2\">ExampleClass.rPali</span><span class=\"sy0\">;</span> <span class=\"co1\">// or from wherever it is defined</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">org.junit.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> PalindromeTest <span class=\"kw2\">extends</span> junit.<span class=\"me1\">framework</span>.<span class=\"me1\">TestCase</span> <span class=\"br0\">{</span><br/>    @Before<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> setUp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"co1\">//runs before each test</span><br/>        <span class=\"co1\">//set up instance variables, network connections, etc. needed for all tests</span><br/>    <span class=\"br0\">}</span><br/>    @After<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> tearDown<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"co1\">//runs after each test</span><br/>        <span class=\"co1\">//clean up instance variables (close files, network connections, etc.).</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Test the pali(...) method.<br/>     */</span><br/>    @Test<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> testNonrecursivePali<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> <span class=\"br0\">{</span><br/>        assertTrue<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"abcba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"aa\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertFalse<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertFalse<span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"abcdba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co3\">/**<br/>     * Test the rPali(...) method.<br/>     */</span><br/>    @Test<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> testRecursivePali<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> <span class=\"br0\">{</span><br/>        assertTrue<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"abcba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"aa\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertTrue<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertFalse<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        assertFalse<span class=\"br0\">(</span>rPali<span class=\"br0\">(</span><span class=\"st0\">\"abcdba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Expect a WhateverExcpetion<br/>     */</span><br/>    @Test<span class=\"br0\">(</span>expected=WhateverException.<span class=\"kw2\">class</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> except<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"co1\">//some code that should throw a WhateverException</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> assert <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'assert'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>describe<span class=\"br0\">(</span><span class=\"st0\">'palindrome'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">const</span> pali <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'../lib/palindrome'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  describe<span class=\"br0\">(</span><span class=\"st0\">'.check()'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    it<span class=\"br0\">(</span><span class=\"st0\">'should return true on encountering a palindrome'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'racecar'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'abcba'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'aa'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    it<span class=\"br0\">(</span><span class=\"st0\">'should return true on encountering an empty string'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    it<span class=\"br0\">(</span><span class=\"st0\">'should return false on encountering a non-palindrome'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'alice'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      assert.<span class=\"me1\">ok</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pali.<span class=\"me1\">check</span><span class=\"br0\">(</span><span class=\"st0\">'abcdba'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Test case 1:<br/>.<br/>1<br/>1<br/>\u00a0<br/># Test case 2:<br/>1+1<br/>null<br/>2<br/>\u00a0<br/># Test case 3 (with the wrong result):<br/>1+1<br/>null<br/>0<br/>\u00a0<br/># A test case with a function definition:<br/>def factorial: if . &lt;= 0 then 1 else . * ((. - 1) | factorial) end; factorial<br/>3<br/>6</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">using Base.Test<br/>include(\"Palindrome_detection.jl\")<br/>\u00a0<br/># Simple test<br/>@test palindrome(\"abcdcba\")<br/>@test\u00a0!palindrome(\"abd\")<br/>\u00a0<br/># Test sets<br/>@testset \"palindromes\" begin<br/>    @test palindrome(\"aaaaa\")<br/>    @test palindrome(\"abcba\")<br/>    @test palindrome(\"1\")<br/>    @test palindrome(\"12321\")<br/>end<br/>\u00a0<br/>@testset \"non-palindromes\" begin<br/>    @test\u00a0!palindrome(\"abc\")<br/>    @test\u00a0!palindrome(\"a11\")<br/>    @test\u00a0!palindrome(\"012\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun isPalindrome<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> s.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> testCases <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"racecar\"</span>, <span class=\"st0\">\"alice\"</span>, <span class=\"st0\">\"eertree\"</span>, <span class=\"st0\">\"david\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>testCase in testCases<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            assert<span class=\"br0\">(</span>isPalindrome<span class=\"br0\">(</span>testCase<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"$testCase is not a palindrome\"</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ae<span class=\"sy0\">:</span> AssertionError<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>ae.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 37, "block": "<pre class=\"text highlighted_source\">// Taken from the Lasso entry in Palindrome page<br/>define isPalindrome(text::string) =&gt; {<br/>\u00a0<br/>    local(_text = string(#text)) // need to make copy to get rid of reference issues<br/>\u00a0<br/>    #_text -&gt; replace(regexp(`(?:$|\\W)+`), -ignorecase)<br/>\u00a0<br/>    local(reversed = string(#_text))<br/>    #reversed -&gt; reverse<br/>\u00a0<br/>    return #_text == #reversed<br/>}<br/>\u00a0<br/>// The tests<br/>describe(::isPalindrome) =&gt; {<br/>    it(`throws an error when not passed a string`) =&gt; {<br/>        expect-&gt;error =&gt;{<br/>            isPalindrome(43)<br/>        }<br/>    }<br/>\u00a0<br/>    it(`returns true if the string is the same forward and backwords`) =&gt; {<br/>        expect(isPalindrome('abba'))<br/>    }<br/>\u00a0<br/>    it(`returns false if the string is different forward and backwords`) =&gt; {<br/>        expect(not isPalindrome('aab'))<br/>    }<br/>\u00a0<br/>    it(`ignores spaces and punctuation`) =&gt; {<br/>        expect(isPalindrome(`Madam, I'm Adam`))<br/>    }<br/>}<br/>\u00a0<br/>// Run the tests and get the summary<br/>// (This normally isn't in the code as the test suite is run via command-line.)<br/>lspec-&gt;stop</pre>"}, {"lang": "Lua", "loc": 2, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">assert</span><span class=\"br0\">(</span> ispalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ABCBA\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">assert</span><span class=\"br0\">(</span> ispalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ABCDE\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">myFun[x_]\u00a0:= Block[{y},y = x^2; Assert[y &gt; 5]; Sin[y]]<br/>On[Assert];myFun[1.0]</pre>"}, {"lang": "NetRexx", "loc": 44, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> junit.<span class=\"me0\">framework</span>.<span class=\"me0\">TestCase</span><br/><span class=\"kw1\">import</span> RCPalindrome<br/>\u00a0<br/><span class=\"kw1\">class</span> RCTestAFunction <span class=\"kw2\">public</span> <span class=\"kw2\">final</span> <span class=\"kw2\">extends</span> TestCase<br/>\u00a0<br/>method setUp <span class=\"kw2\">public</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method tearDown <span class=\"kw2\">public</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method testIsPal <span class=\"kw2\">public</span> <span class=\"kw2\">signals</span> AssertionError<br/>\u00a0<br/>  assertTrue<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">'abcba'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assertTrue<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">'aa'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assertTrue<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assertTrue<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assertFalse<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">'ab'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assertFalse<span class=\"br0\">(</span>RCPalindrome.<span class=\"me0\">isPal</span><span class=\"br0\">(</span>Rexx <span class=\"st0\">'abcdba'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method except <span class=\"kw2\">signals</span> RuntimeException<br/>  <span class=\"kw1\">signal</span> RuntimeException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span><br/>\u00a0<br/>  testResult = org.<span class=\"me0\">junit</span>.<span class=\"me0\">runner</span>.<span class=\"me0\">JUnitCore</span>.<span class=\"me0\">runClasses</span><span class=\"br0\">(</span><span class=\"br0\">[</span>RCTestAFunction.<span class=\"kw1\">class</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>  secs = Rexx testResult.<span class=\"me0\">getRunTime</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000.0</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> testResult.<span class=\"me0\">wasSuccessful</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'Tests successful'</span><br/>                              <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'Tests failed'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'  failure count:'</span> testResult.<span class=\"me0\">getFailureCount</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'   ignore count:'</span> testResult.<span class=\"me0\">getIgnoreCount</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'      run count:'</span> testResult.<span class=\"me0\">getRunCount</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'       run time:'</span> secs.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 18, "block": "<pre class=\"text highlighted_source\">proc reverse(s): string =<br/>  result = newString(s.len)<br/>  for i,c in s:<br/>    result[s.high - i] = c<br/>\u00a0<br/>proc isPalindrome(s): bool =<br/>  s == reverse(s)<br/>\u00a0<br/>when isMainModule:<br/>  assert(isPalindrome(\"\"))<br/>  assert(isPalindrome(\"a\"))<br/>  assert(isPalindrome(\"aa\"))<br/>  assert(not isPalindrome(\"baa\"))<br/>  assert(isPalindrome(\"baab\"))<br/>  assert(isPalindrome(\"ba_ab\"))<br/>  assert(not isPalindrome(\"ba_ ab\"))<br/>  assert(isPalindrome(\"ba _ ab\"))<br/>  assert(not isPalindrome(\"abab\"))</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre>ocaml unix.cma -I +oUnit oUnit.cma  palindrome.cmo  palindrome_tests.ml\n</pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">test: [ \"abcd\" isPalindrome ]<br/>test: [\"abba\" isPalindrome ]<br/>test: [ \"abcba\" isPalindrome ]</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre>? ispal(\"abc\")\n0\n? ispal(\"aba\")\n1</pre>"}, {"lang": "Pascal", "loc": 37, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># ptest.t</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%tests</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># plan tests before loading Palindrome.pm</span><br/>    <span class=\"re0\">%tests</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>        <span class=\"st_h\">'A man, a plan, a canal: Panama.'</span>           <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'My dog has fleas'</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Madam, I'm Adam.\"</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'1 on 1'</span>                                    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'In girum imus nocte et consumimur igni'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">''</span>                                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># plan 4 tests per string</span><br/>    plan tests <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a><span class=\"br0\">(</span><span class=\"re0\">%tests</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Palindrome<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$key</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%tests</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$key</span><span class=\"sy0\">;</span>  <span class=\"co1\"># convert to lowercase</span><br/>    <span class=\"co2\">s/[\\W_]//g</span><span class=\"sy0\">;</span>    <span class=\"co1\"># keep only alphanumeric characters</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$expect</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tests</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$note</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>$key<span class=\"es0\">\\\"</span> should \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$expect</span> <span class=\"sy0\">?</span> <span class=\"st_h\">''</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'not '</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>                <span class=\"st0\">\"be a palindrome.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ok palindrome <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_c <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_c: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_r <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_r: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_e <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_e: $note\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 37, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># ptest.t</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%tests</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># plan tests before loading Palindrome.pm</span><br/>    <span class=\"re0\">%tests</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>        <span class=\"st_h\">'A man, a plan, a canal: Panama.'</span>           <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'My dog has fleas'</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Madam, I'm Adam.\"</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'1 on 1'</span>                                    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'In girum imus nocte et consumimur igni'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">''</span>                                          <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># plan 4 tests per string</span><br/>    plan tests <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a><span class=\"br0\">(</span><span class=\"re0\">%tests</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Palindrome<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$key</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%tests</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$key</span><span class=\"sy0\">;</span>  <span class=\"co1\"># convert to lowercase</span><br/>    <span class=\"co2\">s/[\\W_]//g</span><span class=\"sy0\">;</span>    <span class=\"co1\"># keep only alphanumeric characters</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$expect</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tests</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$note</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>$key<span class=\"es0\">\\\"</span> should \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$expect</span> <span class=\"sy0\">?</span> <span class=\"st_h\">''</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'not '</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>                <span class=\"st0\">\"be a palindrome.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ok palindrome <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_c <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_c: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_r <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_r: $note\"</span><span class=\"sy0\">;</span><br/>    ok palindrome_e <span class=\"sy0\">==</span> <span class=\"re0\">$expect</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"palindrome_e: $note\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> palin<span class=\"br0\">(</span> Str <span class=\"re0\">$string</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> so <span class=\"re0\">$string</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w/</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span>  <span class=\"re0\">$string</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w/</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%tests</span> <span class=\"sy0\">=</span><br/>    <span class=\"st_h\">'A man, a plan, a canal: Panama.'</span>           <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">True</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'My dog has fleas'</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">False</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"Madam, I'm Adam.\"</span>                          <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">True</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'1 on 1'</span>                                    <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">False</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'In girum imus nocte et consumimur igni'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">True</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">''</span>                                          <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">True</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">;</span><br/>\u00a0<br/>plan <span class=\"re0\">%tests</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">%tests</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$test</span><span class=\"sy0\">,</span> <span class=\"re0\">$expected</span><span class=\"sy0\">-</span>result <span class=\"br0\">{</span><br/>    <span class=\"kw1\">is</span> palin<span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$expected</span><span class=\"sy0\">-</span>result<span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>$test<span class=\"es0\">\\\"</span> is {$expected-result??''!!'not '}a palindrome.\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de palindrome? (S)<br/>   (= (setq S (chop S)) (reverse S)) )<br/>\u00a0<br/>(test T (palindrome? \"racecar\"))<br/>(test NIL (palindrome? \"ferrari\"))</pre>"}, {"lang": "PureBasic", "loc": 27, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> DoubleQuote<br/>  <span class=\"co1\">; Needed for the Assert-Macro below</span><br/>  <span class=\"st0\">\"                            \u00a0; \"</span> <span class=\"kw2\">second</span> dlbquote <span class=\"kw1\">to</span> prevent Rosettas misshighlighting of following code. Remove comment before execution<span class=\"sy0\">!</span><br/><span class=\"kw1\">EndMacro</span><br/><span class=\"kw1\">Macro</span> Assert<span class=\"br0\">(</span><span class=\"kw3\">TEST</span>,MSG<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CompilerIf</span> #PB_Compiler_Debugger<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"br0\">(</span><span class=\"kw3\">TEST</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> MSG<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span>: <span class=\"kw1\">Debug</span> MSG: <span class=\"kw1\">EndIf</span><br/>      Temp$<span class=\"sy0\">=</span><span class=\"st0\">\"Fail: \"</span><span class=\"sy0\">+</span>DoubleQuote#TEST#DoubleQuote<br/>      <span class=\"kw1\">Debug</span> Temp$<span class=\"sy0\">+</span><span class=\"st0\">\", Line=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>#PB_Compiler_Line<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" in \"</span><span class=\"sy0\">+</span>#PB_Compiler_File<br/>      <span class=\"kw1\">CallDebugger</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">CompilerEndIf</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> IsPalindrome<span class=\"br0\">(</span>StringToTest.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> StringToTest<span class=\"sy0\">=</span>ReverseString<span class=\"br0\">(</span>StringToTest<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>text1$<span class=\"sy0\">=</span><span class=\"st0\">\"racecar\"</span><br/>text2$<span class=\"sy0\">=</span><span class=\"st0\">\"wisconsin\"</span><br/>Assert<span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span>text1$<span class=\"br0\">)</span>, <span class=\"st0\">\"Catching this would be a fail\"</span><span class=\"br0\">)</span><br/>Assert<span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span>text2$<span class=\"br0\">)</span>, <span class=\"st0\">\"Catching this is correct\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 39, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> is_palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/>        &gt;&gt;&gt; is_palindrome('')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('a')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('aa')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('baa')<br/>        False<br/>        &gt;&gt;&gt; is_palindrome('baab')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('ba_ab')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('ba_ ab')<br/>        False<br/>        &gt;&gt;&gt; is_palindrome('ba _ ab')<br/>        True<br/>        &gt;&gt;&gt; is_palindrome('ab'*2)<br/>        False<br/>        &gt;&gt;&gt; x = 'ab' *2**15<br/>        &gt;&gt;&gt; len(x)<br/>        65536<br/>        &gt;&gt;&gt; xreversed = x[::-1]<br/>        &gt;&gt;&gt; is_palindrome(x+xreversed)<br/>        True<br/>        &gt;&gt;&gt; len(x+xreversed)<br/>        131072<br/>        &gt;&gt;&gt; <br/>    '''</span><br/>    <span class=\"kw1\">return</span> s <span class=\"sy0\">==</span> s<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> _test<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">import</span> <span class=\"kw3\">doctest</span><br/>    <span class=\"kw3\">doctest</span>.<span class=\"me1\">testmod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">#doctest.testmod(verbose=True)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    _test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">checkTrue(palindroc(\"aba\"))  # TRUE<br/>checkTrue(!palindroc(\"ab\"))  # TRUE<br/>checkException(palindroc())  # TRUE<br/>checkTrue(palindroc(\"\"))     # Error.  Uh-oh, there's a bug in the function</pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(module+ test (require rackunit))<br/>\u00a0<br/>;; from the Palindrome entry<br/>(define (palindromb str)<br/>  (let* ([lst (string-&gt;list (string-downcase str))]<br/>         [slst (remove* '(#\\space) lst)])<br/>    (string=? (list-&gt;string (reverse slst)) (list-&gt;string slst))))<br/>\u00a0<br/>;; this test module is not loaded unless it is<br/>;; specifically requested for testing, allowing internal<br/>;; unit test specification<br/>(module+ test<br/>  (check-true (palindromb \"racecar\"))<br/>  (check-true (palindromb \"avoova\"))<br/>  (check-false (palindromb \"potato\")))<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 10, "block": "<pre class=\"text highlighted_source\">needs assertion'<br/>needs hash'<br/>\u00a0<br/>: palindrome? ( $-f ) dup ^hash'hash [ ^strings'reverse ^hash'hash ] dip =\u00a0;<br/>\u00a0<br/>with assertion'<br/>: t0 ( - ) \"hello\" palindrome? 0 assert= \u00a0; assertion <br/>: t1 ( - ) \"ingirumimusnocteetconsumimurigni\" palindrome? -1 assert= \u00a0; assertion <br/>: test ( - ) t0 t1\u00a0;<br/>test</pre>"}, {"lang": "REXX", "loc": 10, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* This REXX uses a lot of REXX keywords as variables. */</span><br/>\u00a0<br/><span class=\"kw1\">signal</span>=<span class=\"br0\">(</span><span class=\"kw1\">interpret</span>=<span class=\"kw2\">value</span><span class=\"br0\">)</span>;<span class=\"kw2\">value</span>=<span class=\"br0\">(</span>interpret<span class=\"sy0\">&lt;</span><span class=\"kw1\">parse</span><span class=\"br0\">)</span>;<span class=\"kw1\">do</span> <span class=\"kw2\">upper</span>=<span class=\"kw2\">value</span> <span class=\"kw2\">to</span> <span class=\"kw2\">value</span><br/><span class=\"kw3\">end</span>;<span class=\"kw1\">exit</span>=<span class=\"kw2\">upper</span><span class=\"sy0\">*</span><span class=\"kw2\">upper</span><span class=\"sy0\">*</span><span class=\"kw2\">upper</span><span class=\"sy0\">*</span>upper-value-<span class=\"kw2\">upper</span>;<span class=\"kw1\">say</span>=<span class=\"st0\">' '</span>;<span class=\"kw1\">return</span>=<span class=\"kw1\">say</span> <span class=\"kw1\">say</span> <span class=\"kw1\">say</span>;<br/><span class=\"kw2\">with</span><span class=\"sy0\">.</span>=<span class=\"kw1\">signal</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">then</span>=<span class=\"kw2\">value</span> <span class=\"kw2\">to</span> <span class=\"kw1\">exit</span>;<span class=\"kw1\">pull</span>=<span class=\"st0\">''</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">otherwise</span>=<span class=\"kw2\">upper</span> <span class=\"kw2\">to</span> then-,<br/><span class=\"kw2\">value</span>;<span class=\"kw1\">select</span>=otherwise-<span class=\"kw2\">value</span>;<span class=\"kw1\">if</span><span class=\"sy0\">.</span><span class=\"kw3\">otherwise</span>=<span class=\"kw2\">with</span><span class=\"sy0\">.</span><span class=\"kw3\">otherwise</span>+<span class=\"kw2\">with</span><span class=\"sy0\">.</span><span class=\"kw1\">select</span>;<span class=\"kw3\">end</span><br/><span class=\"kw1\">if</span><span class=\"sy0\">.</span><span class=\"kw2\">value</span>=<span class=\"kw2\">value</span>;<span class=\"kw1\">if</span><span class=\"sy0\">.</span><span class=\"kw3\">then</span>=<span class=\"kw2\">value</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">otherwise</span>=<span class=\"kw2\">value</span> <span class=\"kw2\">to</span> exit-<span class=\"kw3\">then</span>;<span class=\"kw1\">pull</span>=<span class=\"kw1\">pull</span>,<br/><span class=\"kw1\">say</span><span class=\"st0\">''</span><span class=\"kw1\">say</span>;<span class=\"kw3\">end</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">otherwise</span>=<span class=\"kw2\">value</span> <span class=\"kw2\">to</span> <span class=\"kw3\">then</span>;<span class=\"kw1\">pull</span>=<span class=\"kw1\">pull</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"sy0\">.</span><span class=\"kw3\">otherwise</span>,,<br/><span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw3\">end</span>;<span class=\"kw1\">say</span> <span class=\"kw1\">pull</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">otherwise</span>=<span class=\"kw2\">value</span> <span class=\"kw2\">to</span> <span class=\"kw1\">exit</span>;<span class=\"kw2\">with</span><span class=\"sy0\">.</span><span class=\"kw3\">otherwise</span>=,<br/><span class=\"kw1\">if</span><span class=\"sy0\">.</span><span class=\"kw3\">otherwise</span>;<span class=\"kw3\">end</span>;<span class=\"kw3\">end</span></pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  assert(IsPalindrome(\"racecar\"))<br/>  assert(IsPalindrome(\"alice\"))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> palindrome?<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  s == s.<span class=\"me1\">reverse</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'test/unit'</span><br/><span class=\"kw1\">class</span> MyTests <span class=\"sy0\">&lt;</span> <span class=\"kw4\"><span class=\"re2\">Test::Unit::TestCase</span></span><br/>  <span class=\"kw1\">def</span> test_palindrome_ok<br/>    assert<span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"aba\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> test_palindrome_nok<br/>    assert_equal<span class=\"br0\">(</span><span class=\"kw2\">false</span>, palindrome?<span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> test_object_without_reverse<br/>    assert_raise<span class=\"br0\">(</span><span class=\"kw4\">NoMethodError</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>palindrome? <span class=\"nu0\">42</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> test_wrong_number_args<br/>    assert_raise<span class=\"br0\">(</span><span class=\"kw4\">ArgumentError</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>palindrome? <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> test_show_failing_test<br/>    assert<span class=\"br0\">(</span>palindrome?<span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"this test case fails on purpose\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">scalacheck</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Prop.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Gen.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PalindromeCheck <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Properties<span class=\"br0\">(</span><span class=\"st0\">\"Palindrome\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  property<span class=\"br0\">(</span><span class=\"st0\">\"A string concatenated with its reverse is a palindrome\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    forAll <span class=\"br0\">{</span> s<span class=\"sy0\">:</span> String <span class=\"sy0\">=&gt;</span> isPalindrome<span class=\"br0\">(</span>s + s.<span class=\"me1\">reverse</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  property<span class=\"br0\">(</span><span class=\"st0\">\"A string concatenated with any character and its reverse is a palindrome\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    forAll <span class=\"br0\">{</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, c<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> isPalindrome<span class=\"br0\">(</span>s + c + s.<span class=\"me1\">reverse</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  property<span class=\"br0\">(</span><span class=\"st0\">\"If the first half of a string is equal to the reverse of its second half, it is a palindrome\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    forAll <span class=\"br0\">{</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">take</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> s.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span> || isPalindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  property<span class=\"br0\">(</span><span class=\"st0\">\"If the first half of a string is different than the reverse of its second half, it isn't a palindrome\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    forAll <span class=\"br0\">{</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">take</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span> || <span class=\"sy0\">!</span>isPalindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>srfi <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">begin</span> <span class=\"st0\">\"palindrome-tests\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span>assert <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"This is not a palindrome\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span>equal #t <span class=\"br0\">(</span>palindrome? <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; another of several test functions</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span>end<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "SQL PL", "loc": 11, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">OR</span> <span class=\"kw1\">REPLACE</span> <span class=\"kw1\">PROCEDURE</span> TEST_MY_TEST<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">DECLARE</span> EXPECTED <span class=\"kw1\">INTEGER</span>;<br/>    <span class=\"kw1\">DECLARE</span> ACTUAL <span class=\"kw1\">INTEGER</span>;<br/>    <span class=\"kw1\">CALL</span> DB2UNIT<span class=\"sy0\">.</span>REGISTER_MESSAGE<span class=\"br0\">(</span><span class=\"st0\">'My first test'</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">SET</span> EXPECTED <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>;<br/>    <span class=\"kw1\">SET</span> ACTUAL <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">CALL</span> DB2UNIT<span class=\"sy0\">.</span>ASSERT_INT_EQUALS<span class=\"br0\">(</span><span class=\"st0\">'Same value'</span><span class=\"sy0\">,</span> EXPECTED<span class=\"sy0\">,</span> ACTUAL<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> @<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 32, "block": "<pre class=\"text highlighted_source\">import Cocoa<br/>import XCTest<br/>\u00a0<br/>class PalindromTests: XCTestCase {<br/>\u00a0<br/>    override func setUp() {<br/>        super.setUp()<br/>\u00a0<br/>    }<br/>\u00a0<br/>    override func tearDown() {<br/>        super.tearDown()<br/>    }<br/>\u00a0<br/>    func testPalindrome() {<br/>        // This is an example of a functional test case.<br/>        XCTAssert(isPalindrome(\"abcba\"), \"Pass\")<br/>        XCTAssert(isPalindrome(\"aa\"), \"Pass\")<br/>        XCTAssert(isPalindrome(\"a\"), \"Pass\")<br/>        XCTAssert(isPalindrome(\"\"), \"Pass\")<br/>        XCTAssert(isPalindrome(\"ab\"), \"Pass\") // Fail<br/>        XCTAssert(isPalindrome(\"aa\"), \"Pass\")<br/>        XCTAssert(isPalindrome(\"abcdba\"), \"Pass\") // Fail<br/>    }<br/>\u00a0<br/>    func testPalindromePerformance() {<br/>        // This is an example of a performance test case.<br/>        self.measureBlock() {<br/>            var _is = isPalindrome(\"abcba\")<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require <span class=\"kw3\">tcltest</span> <span class=\"nu0\">2</span><br/><span class=\"kw2\">source</span> palindrome.tcl<span class=\"sy0\">;</span> <span class=\"co1\"># Assume that this is what loads the implementation of \u2018palindrome\u2019</span><br/>\u00a0<br/><span class=\"kw3\">tcltest</span>::<span class=\"me1\">test</span> palindrome-<span class=\"nu0\">1</span> <span class=\"br0\">{</span>check <span class=\"kw1\">for</span> palindromicity<span class=\"br0\">}</span> -body <span class=\"br0\">{</span><br/>    palindrome abcdedcba<br/><span class=\"br0\">}</span> -result <span class=\"nu0\">1</span><br/><span class=\"kw3\">tcltest</span>::<span class=\"me1\">test</span> palindrome-<span class=\"nu0\">2</span> <span class=\"br0\">{</span>check <span class=\"kw1\">for</span> non-palindromicity<span class=\"br0\">}</span> -body <span class=\"br0\">{</span><br/>    palindrome abcdef<br/><span class=\"br0\">}</span> -result <span class=\"nu0\">0</span><br/><span class=\"kw3\">tcltest</span>::<span class=\"me1\">test</span> palindrome-<span class=\"nu0\">3</span> <span class=\"br0\">{</span>check <span class=\"kw1\">for</span> palindrome <span class=\"kw1\">error</span><span class=\"br0\">}</span> -body <span class=\"br0\">{</span><br/>    palindrome<br/><span class=\"br0\">}</span> -returnCodes <span class=\"kw1\">error</span> -result <span class=\"st0\">\"wrong # args: should be <span class=\"es0\">\\\"</span>palindrome s<span class=\"es0\">\\\"</span>\"</span><br/>\u00a0<br/><span class=\"kw3\">tcltest</span>::<span class=\"me1\">cleanupTests</span></pre>"}, {"lang": "UNIX Shell", "loc": 14, "block": "<pre class=\"text highlighted_source\">#!/bin/bash<br/>\u00a0<br/>is_palindrome() {<br/>  local s1=$1<br/>  local s2=$(echo $1 | tr -d \"[ ,!:;.'\\\"]\" | tr '[A-Z]' '[a-z]')<br/>\u00a0<br/>  if [[ $s2 = $(echo $s2 | rev) ]]<br/>  then<br/>     echo \"[$s1] is a palindrome\"<br/>  else<br/>     echo \"[$s1] is NOT a palindrome\"<br/>  fi<br/>}<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 17, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Test_a_function()<br/><span class=\"kw4\">Dim</span> a, i&amp;<br/>    a = Array(<span class=\"st0\">\"abba\"</span>, <span class=\"st0\">\"mom\"</span>, <span class=\"st0\">\"dennis sinned\"</span>, <span class=\"st0\">\"Un roc lamina l animal cornu\"</span>, <span class=\"st0\">\"palindrome\"</span>, <span class=\"st0\">\"ba _ ab\"</span>, <span class=\"st0\">\"racecars\"</span>, <span class=\"st0\">\"racecar\"</span>, <span class=\"st0\">\"wombat\"</span>, <span class=\"st0\">\"in girum imus nocte et consumimur igni\"</span>)<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(a)<br/>        Debug.<span class=\"kw4\">Print</span> a(i) &amp; <span class=\"st0\">\" is a palidrome\u00a0? \"</span> &amp; IsPalindrome(CStr(a(i)))<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPalindrome(txt <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> tempTxt <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    tempTxt = LCase(Replace(txt, <span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span>))<br/>    IsPalindrome = (tempTxt = StrReverse(tempTxt))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn pali(text){<br/>   if (text.len()&lt;2) return(False);<br/>   text==text.reverse();<br/>}</pre>"}]}