{"task": "Magic_squares_of_odd_order", "blocks": [{"lang": "360 Assembly", "loc": 42, "block": "<pre class=\"text highlighted_source\">*        Magic squares of odd order - 20/10/2015<br/>MAGICS   CSECT<br/>         USING  MAGICS,R15         set base register<br/>         LA     R6,1               i=1<br/>LOOPI    C      R6,N               do i=1 to n<br/>         BH     ELOOPI<br/>         LR     R8,R6              i<br/>         SLA    R8,1               i*2<br/>         LA     R9,PG              <a class=\"__cf_email__\" data-cfemail=\"6a1a0d03572a1a0d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R7,1               j=1<br/>LOOPJ    C      R7,N               do j=1 to n<br/>         BH     ELOOPJ<br/>         LR     R5,R8              i*2<br/>         SR     R5,R7              -j<br/>         A      R5,N               +n<br/>         BCTR   R5,0               -1<br/>         XR     R4,R4              clear high reg<br/>         D      R4,N               /n<br/>         LR     R5,R4              //n<br/>         M      R4,N               *n<br/>         LR     R2,R5              (i*2-j+n-1)//n*n<br/>         LR     R5,R8              i*2<br/>         AR     R5,R7              -j<br/>         S      R5,=F'2'           -2<br/>         XR     R4,R4              clear high reg<br/>         D      R4,N               /n<br/>         AR     R2,R4              +(i*2+j-2)//n<br/>         LA     R2,1(R2)           +1<br/>         XDECO  R2,PG+80           (i*2-j+n-1)//n*n+(i*2+j-2)//n+1<br/>         MVC    0(5,R9),PG+87      put in buffer<br/>         LA     R9,5(R9)           pgi=pgi+5<br/>         LA     R7,1(R7)           j=j+1<br/>         B      LOOPJ<br/>ELOOPJ   XPRNT  PG,80<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>N        DC     F'9'               &lt;== input<br/>PG       DC     CL92' '            buffer<br/>         YREGS<br/>         END    MAGICS</pre>"}, {"lang": "Ada", "loc": 35, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Magic_Square <span class=\"kw1\">is</span><br/>   N: <span class=\"kw3\">constant</span> Positive\u00a0:= Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Constants <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">N</span>*N;<br/>   <span class=\"kw3\">package</span> CIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span><span class=\"br0\">(</span>Constants<span class=\"br0\">)</span>;<br/>   Undef: <span class=\"kw3\">constant</span> Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Index <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">N</span>-<span class=\"nu0\">1</span>;<br/>   <span class=\"kw3\">function</span> Inc<span class=\"br0\">(</span>I: Index<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Index <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> I = N-<span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> I+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Dec<span class=\"br0\">(</span>I: Index<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Index <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> I = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> N-<span class=\"nu0\">1</span> <span class=\"kw1\">else</span> I-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   A: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Index, Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Undef<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>     <span class=\"co1\">-- initially undefined; at the end holding the magic square</span><br/>\u00a0<br/>   X: Index\u00a0:= <span class=\"nu0\">0</span>; Y: Index\u00a0:= N/<span class=\"nu0\">2</span>; <span class=\"co1\">-- start position for the algorithm</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Constants <span class=\"kw1\">loop</span> <span class=\"co1\">-- write 1, 2, ..., N*N into the magic array</span><br/>      A<span class=\"br0\">(</span>X, Y<span class=\"br0\">)</span>\u00a0:= I; <span class=\"co1\">-- write I into the magic array</span><br/>      <span class=\"kw1\">if</span> A<span class=\"br0\">(</span>Dec<span class=\"br0\">(</span>X<span class=\"br0\">)</span>, Inc<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span> = Undef <span class=\"kw1\">then</span> <br/>\t X\u00a0:= Dec<span class=\"br0\">(</span>X<span class=\"br0\">)</span>; Y\u00a0:= Inc<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>; <span class=\"co1\">-- go right-up</span><br/>      <span class=\"kw1\">else</span><br/>\t X\u00a0:= Inc<span class=\"br0\">(</span>X<span class=\"br0\">)</span>; <span class=\"co1\">-- go down</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> Row <span class=\"kw3\">in</span> Index <span class=\"kw1\">loop</span> <span class=\"co1\">-- output the magic array</span><br/>      <span class=\"kw1\">for</span> Collumn <span class=\"kw3\">in</span> Index <span class=\"kw1\">loop</span><br/>\t CIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>Row, Collumn<span class=\"br0\">)</span>, <br/>\t\t Width =&gt; <span class=\"br0\">(</span><span class=\"kw1\">if</span> N*N &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">then</span> <span class=\"nu0\">2</span> <span class=\"kw1\">elsif</span> N*N &lt; <span class=\"nu0\">100</span> <span class=\"kw1\">then</span> <span class=\"nu0\">3</span> <span class=\"kw1\">else</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Magic_Square;</pre>"}, {"lang": "ALGOL W", "loc": 77, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% construct a magic square of odd order - as a procedure can't return an\u00a0%<br/>   \u00a0% array, the caller must supply one that is big enough                  \u00a0%<br/>    logical procedure magicSquare( integer array square ( *, * )<br/>                                \u00a0; integer value order<br/>                                 )\u00a0;<br/>        if not odd( order ) or order &lt; 1 then begin<br/>           \u00a0% can't make a magic square of the specified order              \u00a0%<br/>            false<br/>            end<br/>        else begin<br/>           \u00a0% order is OK - construct the square using de la Loub\u00e8re's      \u00a0%<br/>           \u00a0% algorithm as in the wikipedia page                            \u00a0%<br/>\u00a0<br/>           \u00a0% ensure a row/col position is on the square                    \u00a0%<br/>            integer procedure inSquare( integer value pos )\u00a0;<br/>                if pos &lt; 1 then order else if pos &gt; order then 1 else pos;<br/>           \u00a0% move \"up\" a row in the square                                 \u00a0%<br/>            integer procedure up   ( integer value row )\u00a0; inSquare( row - 1 );<br/>           \u00a0% move \"accross right\" in the square                            \u00a0%<br/>            integer procedure right( integer value col )\u00a0; inSquare( col + 1 );<br/>\u00a0<br/>            integer  row, col;<br/>           \u00a0% initialise square                                             \u00a0%<br/>            for i\u00a0:= 1 until order do for j\u00a0:= 1 until order do square( i, j )\u00a0:= 0;<br/>\u00a0<br/>           \u00a0% initial position is the middle of the top row                 \u00a0%<br/>            col\u00a0:= ( order + 1 ) div 2;<br/>            row\u00a0:= 1;<br/>           \u00a0% construct square                                              \u00a0%<br/>            for i\u00a0:= 1 until ( order * order ) do begin<br/>                square( row, col )\u00a0:= i;<br/>                if square( up( row ), right( col ) ) not = 0 then begin<br/>                   \u00a0% the up/right position is already taken, move down     \u00a0%<br/>                    row\u00a0:= row + 1;<br/>                    end<br/>                else begin<br/>                   \u00a0% can move up/right                                     \u00a0%<br/>                    row\u00a0:= up(    row );<br/>                    col\u00a0:= right( col );<br/>                end<br/>            end for_i;<br/>           \u00a0% sucessful result                                              \u00a0%<br/>            true<br/>        end magicSquare\u00a0;<br/>\u00a0<br/>   \u00a0% prints the magic square                                               \u00a0%<br/>    procedure printSquare( integer array  square ( *, * )<br/>                        \u00a0; integer value  order<br/>                         )\u00a0;<br/>    begin<br/>        integer sum, w;<br/>\u00a0<br/>       \u00a0% set integer width to accomodate the largest number in the square  \u00a0%<br/>        w\u00a0:= ( order * order ) div 10;<br/>        i_w\u00a0:= s_w\u00a0:= 1;<br/>        while w &gt; 0 do begin i_w\u00a0:= i_w + 1; w\u00a0:= w div 10 end;<br/>\u00a0<br/>        for i\u00a0:= 1 until order do sum\u00a0:= sum + square( 1, i );<br/>        write( \"maqic square of order \", order, \": sum: \", sum );<br/>        for i\u00a0:= 1 until order do begin<br/>            write( square( i, 1 ) );<br/>            for j\u00a0:= 2 until order do writeon( square( i, j ) )<br/>        end for_i<br/>\u00a0<br/>    end printSquare\u00a0;<br/>\u00a0<br/>   \u00a0% test the magic square generation                                      \u00a0%<br/>\u00a0<br/>    integer array sq ( 1\u00a0:: 11, 1\u00a0:: 11 );<br/>\u00a0<br/>    for i\u00a0:= 1, 3, 5, 7 do begin<br/>        if magicSquare( sq, i ) then printSquare( sq, i )<br/>                                else write( \"can't generate square\" );<br/>    end for_i<br/>\u00a0<br/>end.</pre>"}, {"lang": "ALGOL 68", "loc": 59, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># construct a magic square of odd order                                      #</span><br/><span class=\"kw4\">PROC</span> magic square <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> order <span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> order <span class=\"kw16\">OR</span> order <span class=\"sy1\">&lt;</span> 1<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># can't make a magic square of the specified order                   #</span><br/>        <span class=\"kw4\">LOC</span> <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 0<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> 0 <span class=\"br0\">]</span><span class=\"kw3\">INT</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># order is OK - construct the square using de la Loub\u00e8re's           #</span><br/>        <span class=\"coMULTI\"># algorithm as in the wikipedia page                                 #</span><br/>\u00a0<br/>        <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> order<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> order <span class=\"br0\">]</span><span class=\"kw3\">INT</span> square<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> order <span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> order <span class=\"kw2\">DO</span> square<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># as square [ 1, 1 ] if the top-left, moving \"up\" reduces the row    #</span><br/>        <span class=\"coMULTI\"># operator to advance \"up\" the square                                #</span><br/>        <span class=\"kw4\">OP</span>   PREV <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> pos <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> pos <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span> order <span class=\"kw2\">ELSE</span> pos <span class=\"sy1\">-</span> 1 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># operator to advance \"across right\" or \"down\" the square            #</span><br/>        <span class=\"kw4\">OP</span>   NEXT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> pos <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> pos <span class=\"kw12\">MOD</span> order <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># fill in the square, starting from the middle of the top row        #</span><br/>        <span class=\"kw3\">INT</span> col <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> order <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> row <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> order <span class=\"sy1\">*</span> order <span class=\"kw2\">DO</span><br/>            square<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> i<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> square<span class=\"br0\">[</span> PREV row<span class=\"sy1\">,</span> NEXT col <span class=\"br0\">]</span> <span class=\"sy1\">/=</span> 0<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># the up/right position is already taken, move down          #</span><br/>                row <span class=\"sy1\">:=</span> NEXT row<br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"coMULTI\"># can move up and right                                      #</span><br/>                row <span class=\"sy1\">:=</span> PREV row<span class=\"sy1\">;</span><br/>                col <span class=\"sy1\">:=</span> NEXT col<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        square<br/>    <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># magic square #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># prints the magic square                                                    #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> square <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> square <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> order <span class=\"sy1\">=</span> 1 <span class=\"kw8\">UPB</span> square<span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># calculate print width: negative so a leading \"+\" is not printed    #</span><br/>        <span class=\"kw3\">INT</span> width <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> mag   <span class=\"sy1\">:=</span> order <span class=\"sy1\">*</span> order<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> mag <span class=\"sy1\">&gt;=</span> 10 <span class=\"kw2\">DO</span> mag <span class=\"kw17\">OVERAB</span> 10<span class=\"sy1\">;</span> width <span class=\"kw17\">MINUSAB</span> 1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># calculate the \"magic sum\"                                          #</span><br/>        <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> order <span class=\"kw2\">DO</span> sum <span class=\"sy1\">+:=</span> square<span class=\"br0\">[</span> 1<span class=\"sy1\">,</span> i <span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># print the square                                                   #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"maqic square of order \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> order<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\": sum: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sum<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> order <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> order <span class=\"kw2\">DO</span> write<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> square<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><span class=\"sy1\">,</span> width <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            write<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># print square #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the magic square generation                                           #</span><br/><span class=\"kw2\">FOR</span> order <span class=\"kw2\">BY</span> 2 <span class=\"kw2\">TO</span> 7 <span class=\"kw2\">DO</span> <span class=\"kw22\">print</span> square<span class=\"br0\">(</span> magic square<span class=\"br0\">(</span> order <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">OD</span></pre>"}, {"lang": "AppleScript", "loc": 170, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- oddMagicSquare\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> oddMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    cond<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span>, \u00ac<br/>        cycleRows<span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>cycleRows<span class=\"br0\">(</span>table<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, \u00ac<br/>        <span class=\"kw1\">missing value</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> oddMagicSquare<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- Orders 3, 5, 11</span><br/>\u00a0<br/>    <span class=\"co1\">-- wikiTableMagic\u00a0:: Int -&gt; String</span><br/>    <span class=\"kw3\">script</span> wikiTableMagic<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            formattedTable<span class=\"br0\">(</span>oddMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed <span class=\"sy0\">&amp;</span> linefeed, map<span class=\"br0\">(</span>wikiTableMagic, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- table\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> table<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lstTop <span class=\"kw3\">to</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> cols<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> rows<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>row <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>rows, lstTop<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>cols, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> table<br/>\u00a0<br/><span class=\"co1\">-- cycleRows\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> cycleRows<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> rotationRow<br/>        <span class=\"co1\">-- rotatedList\u00a0:: [a] -&gt; Int -&gt; [a]</span><br/>        <span class=\"kw3\">on</span> rotatedList<span class=\"br0\">(</span>lst, n<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> lst<br/>\u00a0<br/>            <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> lst<br/>            <span class=\"kw3\">set</span> m <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> lng<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> lng<br/>            <span class=\"kw1\">items</span> <span class=\"sy0\">-</span>m <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> lst <span class=\"sy0\">&amp;</span> <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"br0\">(</span>lng <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"kw3\">of</span> lst<br/>        <span class=\"kw3\">end</span> rotatedList<br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>row, i<span class=\"br0\">)</span><br/>            rotatedList<span class=\"br0\">(</span>row, <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> row<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>rotationRow, lst<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> cycleRows<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: Text -&gt; Text -&gt; [Text]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> xs<br/><span class=\"kw3\">end</span> splitOn<br/>\u00a0<br/><span class=\"co1\">-- transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> column<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, iCol<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> row<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> xs<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>row, xss<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>column, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> transpose<br/>\u00a0<br/><span class=\"co1\">-- WIKI DISPLAY ---------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- formattedTable\u00a0:: [[Int]] -&gt; String</span><br/><span class=\"kw3\">on</span> formattedTable<span class=\"br0\">(</span>lstTable<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> lstTable<br/>    <span class=\"kw3\">set</span> w <span class=\"kw3\">to</span> <span class=\"nu0\">2.5</span> <span class=\"sy0\">*</span> n<br/>    <span class=\"st0\">\"magic(\"</span> <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")\"</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> wikiTable<span class=\"br0\">(</span>lstTable, \u00ac<br/>        <span class=\"kw1\">false</span>, <span class=\"st0\">\"text-align:center;width:\"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        w <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"em;height:\"</span> <span class=\"sy0\">&amp;</span> w <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"em;table-layout:fixed;\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> formattedTable<br/>\u00a0<br/><span class=\"co1\">-- wikiTable\u00a0:: [Text] -&gt; Bool -&gt; Text -&gt; Text</span><br/><span class=\"kw3\">on</span> wikiTable<span class=\"br0\">(</span>xs, blnHdr, strStyle<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> wikiRows<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>lstRow, iRow<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDelim <span class=\"kw3\">to</span> cond<span class=\"br0\">(</span>blnHdr <span class=\"kw2\">and</span> <span class=\"br0\">(</span>iRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"st0\">\"!\"</span>, <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDbl <span class=\"kw3\">to</span> strDelim <span class=\"sy0\">&amp;</span> strDelim<br/>            linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|-\"</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> strDelim <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                intercalate<span class=\"br0\">(</span><span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> strDbl <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span>, lstRow<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"{| class=<span class=\"es0\">\\\"</span>wikitable<span class=\"es0\">\\\"</span> \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        cond<span class=\"br0\">(</span>strStyle \u2260 <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"style=<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> strStyle <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>wikiRows, xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|}\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/><span class=\"kw3\">end</span> wikiTable<br/>\u00a0<br/><span class=\"co1\">-- cond\u00a0:: Bool -&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> cond<span class=\"br0\">(</span>bool, f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        g<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> cond</pre>"}, {"lang": "AutoHotkey", "loc": 41, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% OddMagicSquare<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% OddMagicSquare<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>OddMagicSquare<span class=\"br0\">(</span>oddN<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tsq <span class=\"sy0\">:=</span> oddN<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>\tobj <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% oddN<br/>\t\tobj<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> \t<span class=\"co1\">; dis is row</span><br/>\tmid <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Round</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>oddN<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\tsum <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Round</span></a><span class=\"br0\">(</span>sq<span class=\"sy0\">*</span><span class=\"br0\">(</span>sq<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">/</span>oddN<span class=\"br0\">)</span><br/>\tobj<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\tcR <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span> cC <span class=\"sy0\">:=</span> mid<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% sq<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"br0\">{</span><br/>\t\tdone <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">while</span>\u00a0!done <span class=\"br0\">{</span><br/>\t\t\tnR <span class=\"sy0\">:=</span> cR<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> nC <span class=\"sy0\">:=</span> cC<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!nR<br/>\t\t\t\tnR <span class=\"sy0\">:=</span> oddN<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>nC<span class=\"sy0\">&gt;</span>oddN<span class=\"br0\">)</span><br/>\t\t\t\tnC <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">if</span> obj<span class=\"br0\">[</span>nR<span class=\"br0\">]</span><span class=\"br0\">[</span>nC<span class=\"br0\">]</span> \t<span class=\"co1\">;filled</span><br/>\t\t\t\tcR <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">else</span> cR <span class=\"sy0\">:=</span> nR <span class=\"sy0\">,</span> cC <span class=\"sy0\">:=</span> nC<br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!obj<span class=\"br0\">[</span>cR<span class=\"br0\">]</span><span class=\"br0\">[</span>cC<span class=\"br0\">]</span><br/>\t\t\t\tobj<span class=\"br0\">[</span>cR<span class=\"br0\">]</span><span class=\"br0\">[</span>cC<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a <span class=\"sy0\">,</span> done <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tstr <span class=\"sy0\">:=</span> <span class=\"st0\">\"Magic Constant for \"</span> oddN <span class=\"st0\">\"x\"</span> oddN <span class=\"st0\">\" is \"</span> sum <span class=\"st0\">\"`n\"</span><br/>\tfor k<span class=\"sy0\">,</span>v in obj<br/>\t<span class=\"br0\">{</span><br/>\t\tfor k2<span class=\"sy0\">,</span>v2 in v<br/>\t\t\tstr <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span> v2<br/>\t\tstr <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> str<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 72, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MAGIC_SQUARES_OF_ODD_ORDER.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    build<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    build<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"># verify sum</span><br/>    build<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> build<span class=\"br0\">(</span>n,check,  arr,i,width,x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">*</span><span class=\"br0\">[</span><span class=\"nu0\">13579</span><span class=\"br0\">]</span>$<span class=\"sy3\">/</span> <span class=\"sy1\">||</span> n <span class=\"sy2\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"error:\u00a0%s is invalid<span class=\"es0\">\\n</span>\"</span>,n<span class=\"br0\">)</span><br/>      <span class=\"kw6\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>magic constant for\u00a0%dx%d is\u00a0%d<span class=\"es0\">\\n</span>\"</span>,n,n,<span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    x = <span class=\"nu0\">0</span><br/>    y = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = i<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy3\">+</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">%</span>n,<span class=\"br0\">(</span>y<span class=\"sy3\">+</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">%</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x = <span class=\"br0\">(</span>x<span class=\"sy3\">+</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">%</span> n<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        x = <span class=\"br0\">(</span>x<span class=\"sy3\">+</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">%</span> n<br/>        y = <span class=\"br0\">(</span>y<span class=\"sy3\">+</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">%</span> n<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    width = <span class=\"kw4\">length</span><span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>; x<span class=\"sy2\">&lt;</span>n; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y=<span class=\"nu0\">0</span>; y<span class=\"sy2\">&lt;</span>n; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*s \"</span>,width,arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>check<span class=\"br0\">)</span> <span class=\"br0\">{</span> verify<span class=\"br0\">(</span>arr,n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> verify<span class=\"br0\">(</span>arr,n,  total,x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># verify sum of each row, column and diagonal</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>verify\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># horizontal</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>; x<span class=\"sy2\">&lt;</span>n; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      total = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y=<span class=\"nu0\">0</span>; y<span class=\"sy2\">&lt;</span>n; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        total <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>:\u00a0%d row\u00a0%d<span class=\"es0\">\\n</span>\"</span>,total,x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"co1\"># vertical</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y=<span class=\"nu0\">0</span>; y<span class=\"sy2\">&lt;</span>n; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      total = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>; x<span class=\"sy2\">&lt;</span>n; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        total <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>:\u00a0%d column\u00a0%d<span class=\"es0\">\\n</span>\"</span>,total,y<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"co1\"># left diagonal</span><br/>    total = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x=y=<span class=\"nu0\">0</span>; x<span class=\"sy2\">&lt;</span>n; x<span class=\"sy3\">++</span> y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      total <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>:\u00a0%d diagonal top left to bottom right<span class=\"es0\">\\n</span>\"</span>,total<span class=\"br0\">)</span><br/><span class=\"co1\"># right diagonal</span><br/>    x = n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    total = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y=<span class=\"nu0\">0</span>; y<span class=\"sy2\">&lt;</span>n; y<span class=\"sy3\">++</span> x<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      total <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>:\u00a0%d diagonal bottom left to top right<span class=\"es0\">\\n</span>\"</span>,total<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  100\u00a0:<br/>  110  REM  MAGIC SQUARE OF ODD ORDER<br/>  120\u00a0:<br/>  130  DEF FN MOD(A) = A -  INT (A / N) * N<br/>  140  DEF FN NR(J) =  FN MOD((J + 2 * I + 1))<br/>  200  INPUT \"ENTER N: \";N<br/>  210  IF N &lt; 3 OR (N - INT (N / 2) * 2) = 0 GOTO 200               <br/>  220  FOR I = 0 TO (N - 1)              <br/>  230  FOR J = 0 TO (N - 1): HTAB 4 * (J + 1)                        <br/>  240  PRINT N * FN NR(N - J - 1) + FN NR(J) + 1;                  <br/>  250  NEXT J: PRINT                     <br/>  260  NEXT I                            <br/>  270  PRINT \"MAGIC CONSTANT: \";N * (N * N + 1) / 2<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 19, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co1\">rem Magic squares of odd order</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> EnableDelayedExpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n=9<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> The square order is: <span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> w=<br/>    <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a v1=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>*2-<span class=\"sy0\">%%</span><span class=\"re3\">j</span>+n-1<br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a v1=v1<span class=\"sy0\">%%</span><span class=\"re3\">n</span>*n<br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a v2=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>*2+<span class=\"sy0\">%%</span><span class=\"re3\">j</span>+n-2<br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a v2=v2<span class=\"sy0\">%%</span><span class=\"re3\">n</span><br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a v=v1+v2+1<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> v=     <span class=\"sy0\">!</span><span class=\"re2\">v</span><span class=\"sy0\">!</span><br/>\t    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> w=<span class=\"sy0\">!</span><span class=\"re2\">w</span><span class=\"sy0\">!!</span><span class=\"re2\">v</span>:~-5<span class=\"sy0\">!)</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">w</span><span class=\"sy0\">!)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a w=n*<span class=\"sy0\">(</span>n*n+1<span class=\"sy0\">)</span>/2<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> The magic number is: <span class=\"sy0\">%</span><span class=\"re3\">w</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a></pre>"}, {"lang": "bc", "loc": 29, "block": "<pre class=\"text highlighted_source\">define magic_constant(n) {<br/>    return(((n * n + 1) / 2) * n)<br/>}<br/>\u00a0<br/>define print_magic_square(n) {<br/>    auto i, x, col, row, len, old_scale<br/>\u00a0<br/>    old_scale = scale<br/>    scale = 0<br/>    len = length(n * n)<br/>\u00a0<br/>    print \"Magic constant for n=\", n, \": \", magic_constant(n), \"\\n\"<br/>    for (row = 1; row &lt;= n; row++) {<br/>        for (col = 1; col &lt;= n; col++) {<br/>            x = n * ((row + col - 1 + (n / 2))\u00a0% n) + \\<br/>                ((row + 2 * col - 2)\u00a0% n) + 1<br/>            for (i = 0; i &lt; len - length(x); i++) {<br/>                print \" \"<br/>            }<br/>            print x<br/>            if (col\u00a0!= n) print \" \"<br/>        }<br/>        print \"\\n\"<br/>    }<br/>\u00a0<br/>    scale = old_scale<br/>}<br/>\u00a0<br/>temp = print_magic_square(5)</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">500p0&gt;:::00g%00g\\-1-\\00g/2*+1+00g%00g*\\:00g%v<br/>@&lt;$&lt;_^#!-*:g00:,+9!%g00:+1.+1+%g00+1+*2/g00\\&lt;</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> f<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Edit: Add argument checking</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argc<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Edit: Input must be odd and not less than 3.</span><br/>\tn <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"sy0\">,</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span> Magic Constant:\u00a0%d.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 85, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> magicSqr<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span> <br/>    magicSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> sqr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    ~magicSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> sqr <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> sqr<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> sqr <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> sqr<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> d <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> d<span class=\"sy2\">++</span><span class=\"sy4\">;</span> sz <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>        sqr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>sz <span class=\"sy2\">*</span> sz<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> sqr, <span class=\"nu0\">0</span>, sz <span class=\"sy2\">*</span> sz <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Odd Magic Square: \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" x \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"It's Magic Sum is: \"</span> <span class=\"sy1\">&lt;&lt;</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        ostringstream cvr<span class=\"sy4\">;</span> cvr <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> cvr.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> l <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> sqr<span class=\"br0\">[</span>yy <span class=\"sy2\">+</span> x<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sx <span class=\"sy1\">=</span> sz <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, sy <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> c <span class=\"sy1\">&lt;</span> sz <span class=\"sy2\">*</span> sz <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>sqr<span class=\"br0\">[</span>sx <span class=\"sy2\">+</span> sy <span class=\"sy2\">*</span> sz<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tsqr<span class=\"br0\">[</span>sx <span class=\"sy2\">+</span> sy <span class=\"sy2\">*</span> sz<span class=\"br0\">]</span><span class=\"sy1\">=</span> c <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\tinc<span class=\"br0\">(</span> sx <span class=\"br0\">)</span><span class=\"sy4\">;</span> dec<span class=\"br0\">(</span> sy <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t\tc<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">else</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tdec<span class=\"br0\">(</span> sx <span class=\"br0\">)</span><span class=\"sy4\">;</span> inc<span class=\"br0\">(</span> sy <span class=\"br0\">)</span><span class=\"sy4\">;</span> inc<span class=\"br0\">(</span> sy <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">return</span> sz <span class=\"sy2\">*</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> sz <span class=\"sy2\">*</span> sz <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> inc<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>a <span class=\"sy1\">==</span> sz <span class=\"br0\">)</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> dec<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">--</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> a <span class=\"sy1\">=</span> sz <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> checkPos<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span> isInside<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> isInside<span class=\"br0\">(</span> y <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>sqr<span class=\"br0\">[</span>sz <span class=\"sy2\">*</span> y <span class=\"sy2\">+</span> x<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> isInside<span class=\"br0\">(</span> <span class=\"kw4\">int</span> s <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> s <span class=\"sy1\">&lt;</span> sz <span class=\"sy3\">&amp;&amp;</span> s <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"sy2\">*</span> sqr<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> sz<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    magicSqr s<span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> magic-square <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to n<br/>        collect <br/>          <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">1</span> to n<br/>                collect <br/>                  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ i j <span class=\"br0\">(</span>floor n <span class=\"nu0\">2</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>                               n<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                     <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ i <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> j<span class=\"br0\">)</span> -<span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>                          n<span class=\"br0\">)</span> <br/>                     <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> magic-constant <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* n <br/>     <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> output <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format T <span class=\"st0\">\"Magic constant for n=~a: ~a~%\"</span> n <span class=\"br0\">(</span>magic-constant n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>size <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>write-to-string <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>format-str <span class=\"br0\">(</span>format <span class=\"kw1\">NIL</span> <span class=\"st0\">\"~~{~~{~~~ad~~^ ~~}~~%~~}~~%\"</span> size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format T format-str <span class=\"br0\">(</span>magic-square n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">uint</span> <span class=\"sy0\">:</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Only odd n &gt; 1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> len <span class=\"sy0\">=</span> text<span class=\"br0\">(</span>n <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span>.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>   <span class=\"co1\">// writeln(len);</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// n(( I + J - 1 + ( n / 2 ) ) mod n ) + (( I + 2J - 2 ) mod n ) + 1</span><br/><span class=\"co1\">//        writeln(\"n = \",n, \" r = \",r,\" c = \",c, \" a = \",a );</span><br/>          writef<span class=\"br0\">(</span><span class=\"st0\">\"%\"</span> <span class=\"sy0\">~</span> len <span class=\"sy0\">~</span> <span class=\"st0\">\"d%s\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 34, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'matrix<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; compute next i,j = f(move,i,j)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>path imove jmove<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> i <span class=\"br0\">(</span>imove i n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> j <span class=\"br0\">(</span>jmove j n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; We define the ordinary and break moves </span><br/><span class=\"co1\">;; (1 , -1), (0, 1) King's move</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>inext i n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> i<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>jnext j n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> j<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ibreak i n<span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>jbreak j n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> j<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>ms n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> n2<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> ms <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>array n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> i <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> j <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> ms i j <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>ns <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span>  n2<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref ms <span class=\"br0\">(</span>inext i n <span class=\"br0\">)</span> <span class=\"br0\">(</span>jnext j n <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>path inext jnext<span class=\"br0\">)</span> <span class=\"co1\">;; ordinary move if empty target</span><br/>            <span class=\"br0\">(</span>path ibreak jbreak<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; else break move </span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref ms i j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> ms i j ns<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>error ns <span class=\"st0\">\"illegal path\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln 'order n 'magic<span class=\"sy0\">-</span>number  <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> n n2<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>print ms<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def odd_magic_square(n) when rem(n,2)==1 do<br/>    for i &lt;- 0..n-1 do<br/>      for j &lt;- 0..n-1, do: n * rem(i+j+1+div(n,2),n) + rem(i+2*j+2*n-5,n) + 1<br/>    end<br/>  end<br/>\u00a0<br/>  def print_square(sq) do<br/>    width = List.flatten(sq) |&gt; Enum.max |&gt; to_char_list |&gt; length<br/>    fmt = String.duplicate(\" ~#{width}w\", length(sq)) &lt;&gt; \"~n\"<br/>    Enum.each(sq, fn row -&gt;\u00a0:io.format fmt, row end)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([3,5,11], fn n -&gt;<br/>  IO.puts \"\\nSize #{n}, magic sum #{div(n*n+1,2)*n}\"<br/>  RC.odd_magic_square(n) |&gt; RC.print_square<br/>end)</pre>"}, {"lang": "ERRE", "loc": 95, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MAGIC_SQUARE<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>PROCEDURE Magicsq(size,filename$)<br/>\u00a0<br/>LOCAL DIM sq[25,25]\u00a0! array to hold square<br/>\u00a0<br/>IF (size AND 1)=0 OR size&lt;3 THEN<br/>     PRINT PRINT(CHR$(7))\u00a0! beep<br/>     PRINT(\"error: size is not odd or size is smaller then 3\")<br/>     PAUSE(3)<br/>     EXIT PROCEDURE<br/>END IF<br/>\u00a0<br/>! filename$ &lt;&gt; \"\" then save magic square in a file<br/>! filename$ can contain directory name<br/>! if filename$ exist it will be overwriten, no error checking<br/>\u00a0<br/>! start in the middle of the first row<br/>   nr=1   x=size-(size DIV 2) y=1<br/>   max=size*size<br/>\u00a0<br/>! create format string for using<br/>   frmt$=STRING$(LEN(STR$(max)),\"#\")<br/>\u00a0<br/>! main loop for creating magic square<br/>   REPEAT<br/>      IF sq[x,y]=0 THEN<br/>        sq[x,y]=nr<br/>        IF nr MOD size=0 THEN<br/>           y=y+1<br/>         ELSE<br/>           x=x+1<br/>           y=y-1<br/>        END IF<br/>        nr=nr+1<br/>      END IF<br/>      IF x&gt;size THEN<br/>         x=1<br/>         WHILE sq[x,y]&lt;&gt;0 DO<br/>            x=x+1<br/>         END WHILE<br/>      END IF<br/>      IF y&lt;1 THEN<br/>         y=size<br/>         WHILE sq[x,y]&lt;&gt;0 DO<br/>            y=y-1<br/>         END WHILE<br/>      END IF<br/>   UNTIL nr&gt;max<br/>\u00a0<br/>! printing square's bigger than 19 result in a wrapping of the line<br/>   PRINT(\"Odd magic square size:\";size;\"*\";size)<br/>   PRINT(\"The magic sum =\";((max+1) DIV 2)*size)<br/>   PRINT<br/>\u00a0<br/>   FOR y=1 TO size DO<br/>      FOR x=1 TO size DO<br/>          WRITE(frmt$;sq[x,y];)<br/>      END FOR<br/>      PRINT<br/>   END FOR<br/>\u00a0<br/> \u00a0! output magic square to a file with the name provided<br/>  IF filename$&lt;&gt;\"\" THEN<br/>        OPEN(\"O\",1,filename$)<br/>           PRINT(#1,\"Odd magic square size:\";size;\" *\";size)<br/>           PRINT(#1,\"The magic sum =\";((max+1) DIV 2)*size)<br/>           PRINT(#1,)<br/>\u00a0<br/>           FOR y=1 TO size DO<br/>             FOR x=1 TO size DO<br/>               WRITE(#1,frmt$;sq[x,y];)<br/>             END FOR<br/>             PRINT(#1,)<br/>           END FOR<br/>  END IF<br/>  CLOSE(1)<br/>\u00a0<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>PRINT(CHR$(12);) \u00a0! CLS<br/>Magicsq(5,\"\")<br/>Magicsq(11,\"\")<br/>!----------------------------------------------------<br/>! the next line will also print the square to a file<br/>! called 'magic_square_19txt'<br/>!----------------------------------------------------<br/>Magicsq(19,\"msq_19.txt\")<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 30, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Magic_Square<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">order</span> <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Magic Square Order: \"</span>, order<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span><span class=\"br0\">)</span>     <span class=\"st0\">\"----------------------\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, order<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, order<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i4)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> f1<span class=\"br0\">(</span>order, i, j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Magic number = \"</span>, f2<span class=\"br0\">(</span>order<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> f1<span class=\"br0\">(</span>n, x, y<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, x, y<br/>\u00a0<br/>  f1 <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>, n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> f2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>  f2 <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 94, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 23-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> magicsq<span class=\"br0\">(</span>size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, filename <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> =<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>size And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> size &lt; <span class=\"nu0\">3</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Beep</span> <span class=\"co1\">' alert</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"error: size is not odd or size is smaller then 3\"</span><br/>        <span class=\"kw1\">Sleep</span> <span class=\"nu0\">3000</span>,<span class=\"nu0\">1</span>  <span class=\"co1\">'wait 3 seconds, ignore key press</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"co1\">' filename &lt;&gt; \"\" then save magic square in a file</span><br/>    <span class=\"co1\">' filename can contain directory name</span><br/>    <span class=\"co1\">' if filename exist it will be overwriten, no error checking</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sq<span class=\"br0\">(</span>size,size<span class=\"br0\">)</span> <span class=\"co1\">' array to hold square</span><br/>    <span class=\"co1\">' start in the middle of the first row</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> nr = <span class=\"nu0\">1</span>, x = size - <span class=\"br0\">(</span>size \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span>, y = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> max = size * size<br/>    <span class=\"co1\">' create format string for using</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> frmt = <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span><span class=\"br0\">)</span> +<span class=\"nu0\">1</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' main loop for creating magic square</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">If</span> sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = nr<br/>            <span class=\"kw1\">If</span> nr <span class=\"kw1\">Mod</span> size = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                y += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Else</span><br/>                x += <span class=\"nu0\">1</span><br/>                y -= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            nr += <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">If</span> x &gt; size <span class=\"kw1\">Then</span><br/>            x = <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><br/>                x += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Loop</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">If</span> y &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            y = size<br/>            <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><br/>                y -= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Loop</span><br/>        EndIf<br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> nr &gt; max<br/>\u00a0<br/>    <span class=\"co1\">' printing square's bigger than 19 result in a wrapping of the line</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Odd magic square size:\"</span>; size; <span class=\"st0\">\" *\"</span>; size<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The magic sum =\"</span>; <span class=\"br0\">(</span><span class=\"br0\">(</span>max +<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span> * size<br/>    <span class=\"kw1\">Print</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> size<br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> size<br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    <span class=\"co1\">' output magic square to a file with the name provided</span><br/>    <span class=\"kw1\">If</span> filename &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span><br/>        nr = <span class=\"kw1\">FreeFile</span><br/>        <span class=\"kw1\">Open</span> filename <span class=\"kw1\">For</span> <span class=\"kw1\">Output</span> <span class=\"kw1\">As</span> <span class=\"co2\">#nr</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"Odd magic square size:\"; size; \" *\"; size</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"The magic sum =\"; ((max +1) \\ 2) * size</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> size<br/>            <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> size<br/>                <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, Using frmt; sq(x,y);</span><br/>            <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Close</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>magicsq<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>magicsq<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/><span class=\"co1\">' the next line will also print the square to a file called: magic_square_19.txt</span><br/>magicsq<span class=\"br0\">(</span><span class=\"nu0\">19</span>, <span class=\"st0\">\"magic_square_19.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 40, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ms<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    M <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"sy1\">(</span>x <span class=\"sy3\">+</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">%</span> n <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> n&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>        log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"forcing size\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">)</span><br/>    <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> k<br/>        <span class=\"kw1\">if</span> m<span class=\"sy1\">[</span>M<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>M<span class=\"sy1\">(</span>j<span class=\"sy1\">)]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">%</span> n<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"sy2\">=</span> M<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">),</span> M<span class=\"sy1\">(</span>j<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy1\">,</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    n<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> ms<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">;</span> j <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>        <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    f <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%%%dd\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>j<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 62, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- as a translation from imperative code, this is probably not a \"good\" implementation</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/><span class=\"kw1\">type</span> Var <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"co1\">-- sx sy sz c</span><br/>\u00a0<br/>magicSum <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>magicSum x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x<br/>\u00a0<br/>wrapInc <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>wrapInc <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> x<br/>   <span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a>    <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>       <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>wrapDec <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>wrapDec <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> x<br/>   <span class=\"sy0\">|</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>    <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>isZero <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isZero m x y <span class=\"sy0\">=</span> m <span class=\"sy0\">!!</span> x <span class=\"sy0\">!!</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>setAt <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>setAt <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> val table<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">(</span>upper<span class=\"sy0\">,</span> current\u00a0: lower<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> x table<span class=\"sy0\">,</span><br/>     <span class=\"br0\">(</span>left<span class=\"sy0\">,</span> this\u00a0: right<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> y current<br/>         <span class=\"sy0\">=</span> upper <span class=\"sy0\">++</span> <span class=\"br0\">(</span>left <span class=\"sy0\">++</span> val\u00a0: right<span class=\"br0\">)</span>\u00a0: lower<br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Outside\"</span><br/>\u00a0<br/>create <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>create x <span class=\"sy0\">=</span> replicate x <span class=\"sy0\">$</span> replicate x <span class=\"nu0\">0</span><br/>\u00a0<br/>cells <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>cells m <span class=\"sy0\">=</span> x<span class=\"sy0\">*</span>x <span class=\"kw1\">where</span> x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> m<br/>\u00a0<br/>fill <span class=\"sy0\">::</span> Var <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>fill <span class=\"br0\">(</span>sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> m<br/>   <span class=\"sy0\">|</span> c <span class=\"sy0\">&lt;</span> cells m <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> isZero m sx sy <br/>      <span class=\"kw1\">then</span> fill <span class=\"br0\">(</span><span class=\"br0\">(</span>wrapInc sz sx<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>wrapDec sz sy<span class=\"br0\">)</span><span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>setAt <span class=\"br0\">(</span>sx<span class=\"sy0\">,</span> sy<span class=\"br0\">)</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> m<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> fill <span class=\"br0\">(</span><span class=\"br0\">(</span>wrapDec sz sx<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>wrapInc sz<span class=\"br0\">(</span>wrapInc sz sy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> m<br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> m<br/>\u00a0<br/>magicNumber <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>magicNumber d <span class=\"sy0\">=</span> transpose <span class=\"sy0\">$</span> fill <span class=\"br0\">(</span>d `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>create d<span class=\"br0\">)</span><br/>\u00a0<br/>display <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>display <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> xs <span class=\"sy0\">=</span> vdisplay x<br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> vdisplay x <span class=\"sy0\">++</span> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>\u00a0: display xs<span class=\"br0\">)</span><br/>\u00a0<br/>vdisplay <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>vdisplay <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">++</span> vdisplay xs<br/>\u00a0<br/>\u00a0<br/>magicSquare x <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Magic Square of \"</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\" = \"</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> magicSum x<br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> display <span class=\"sy0\">$</span> magicNumber x</pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>A<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Magic number: \"</span><span class=\"sy0\">,</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    sq <span class=\"sy0\">:=</span> buildSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    showSquare<span class=\"br0\">(</span>sq<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> buildSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    sq <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span><span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">\\</span>n <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    r <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    c <span class=\"sy0\">:=</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">/</span>sq<span class=\"br0\">[</span>r<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<br/>        nr <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span>r<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>        nc <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>sq<span class=\"br0\">[</span>nr<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>nc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>r <span class=\"sy0\">:=</span> nr<span class=\"sy0\">,</span>c <span class=\"sy0\">:=</span> nc<span class=\"br0\">)</span> <span class=\"kw1\">else</span> r <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>r<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sq<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showSquare<span class=\"br0\">(</span>sq<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>sq<br/>    s <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sq <span class=\"kw1\">do</span> <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">ms=: i:@&lt;<a class=\"__cf_email__\" data-cfemail=\"557b1578\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: |.\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>&amp;|:^:<span class=\"nu0\">2</span> &gt;:@<a class=\"__cf_email__\" data-cfemail=\"f39addb3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,~</pre>"}, {"lang": "Java", "loc": 47, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MagicSquare <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> magicSquareOdd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">:</span> row<span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Magic constant:\u00a0%d \"</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareOdd<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>base <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> base <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base must be odd and &gt; 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>base<span class=\"br0\">]</span><span class=\"br0\">[</span>base<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> base <span class=\"sy0\">*</span> base<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> base <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>number<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    r<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    r <span class=\"sy0\">=</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    c<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    r<span class=\"sy0\">--;</span><br/>                    c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        r<span class=\"sy0\">--;</span><br/>                        c<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        r<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> grid<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 86, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// n -&gt; [[n]]</span><br/>  <span class=\"kw1\">function</span> magic<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> rotation<span class=\"br0\">(</span><br/>      transposed<span class=\"br0\">(</span><br/>        rotation<span class=\"br0\">(</span><br/>          table<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// [[a]] -&gt; [[a]]</span><br/>  <span class=\"kw1\">function</span> rotation<span class=\"br0\">(</span>lst<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> lst.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>row<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> rotated<span class=\"br0\">(</span><br/>        row<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>row.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// [[a]] -&gt; [[a]]</span><br/>  <span class=\"kw1\">function</span> transposed<span class=\"br0\">(</span>lst<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> lst<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>col<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> lst.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// [a] -&gt; n -&gt; [a]</span><br/>  <span class=\"kw1\">function</span> rotated<span class=\"br0\">(</span>lst<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> lng <span class=\"sy0\">=</span> lst.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>      m <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> n <span class=\"sy0\">===</span> <span class=\"st0\">'undefined'</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><br/>        n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> lng <span class=\"sy0\">+</span> n <span class=\"sy0\">:</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> lng <span class=\"sy0\">?</span> n <span class=\"sy0\">%</span> lng <span class=\"sy0\">:</span> n<span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> m <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>      lst.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>m<span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>lst.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> lng <span class=\"sy0\">-</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span> <span class=\"sy0\">:</span> lst<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// n -&gt; [[n]]</span><br/>  <span class=\"kw1\">function</span> table<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> rngTop <span class=\"sy0\">=</span> rng<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> rng<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> rngTop.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> row <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// [m..n]</span><br/>  <span class=\"kw1\">function</span> rng<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>      <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/******************** TEST WITH 3, 5, 11 ***************************/</span><br/>\u00a0<br/>  <span class=\"co1\">// Results as right-aligned wiki tables</span><br/>  <span class=\"kw1\">function</span> wikiTable<span class=\"br0\">(</span>lstRows<span class=\"sy0\">,</span> blnHeaderRow<span class=\"sy0\">,</span> strStyle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> css <span class=\"sy0\">=</span> strStyle <span class=\"sy0\">?</span> <span class=\"st0\">'style=\"'</span> <span class=\"sy0\">+</span> strStyle <span class=\"sy0\">+</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'{| class=\"wikitable\" '</span> <span class=\"sy0\">+</span> css <span class=\"sy0\">+</span> lstRows.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>      <span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRow<span class=\"sy0\">,</span> iRow<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> strDelim <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>blnHeaderRow <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>iRow<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'!'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          strDbl <span class=\"sy0\">=</span> strDelim <span class=\"sy0\">+</span> strDelim<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|-<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> lstRow.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">+</span> strDbl <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|}'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>    <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">2.5</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'magic('</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">+</span> <span class=\"st0\">')<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> wikiTable<span class=\"br0\">(</span><br/>        magic<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"st0\">'text-align:center;width:'</span> <span class=\"sy0\">+</span> w <span class=\"sy0\">+</span> <span class=\"st0\">'em;height:'</span> <span class=\"sy0\">+</span> w <span class=\"sy0\">+</span> <span class=\"st0\">'em;table-layout:fixed;'</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\">def odd_magic_square:<br/>  if type\u00a0!= \"number\" or .\u00a0% 2 == 0 or . &lt;= 0<br/>  then error(\"odd_magic_square requires an odd positive integer\")<br/>  else<br/>    . as $n<br/>    | reduce range(1; 1 + ($n*$n)) as $i<br/>         ( [0, (($n-1)/2), []];<br/> \t  .[0] as $x | .[1] as $y<br/>          | .[2]<br/>\t  | setpath([$x, $y]; $i )<br/>          | if getpath([(($x+$n-1)\u00a0% $n), (($y+$n+1)\u00a0% $n)])<br/>            then [(($x+$n+1)\u00a0% $n), $y, .]<br/>            else [ (($x+$n-1)\u00a0% $n), (($y+$n+1)\u00a0% $n), .]<br/> \t    end )  | .[2]<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 34, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>\u00a0<br/>function magicsquareodd(base::Int)<br/>    if base &amp; 1 == 0 || base &lt; 3; error(\"base must be odd and &gt;3\") end<br/>\u00a0<br/>    square = fill(0, base, base)<br/>    r, number = 1, 1<br/>    size = base * base<br/>\u00a0<br/>    c = div(base, 2) + 1<br/>    while number \u2264 size<br/>        square[r, c] = number<br/>        fr = r == 1\u00a0? base\u00a0: r - 1<br/>        fc = c == base\u00a0? 1\u00a0: c + 1<br/>        if square[fr, fc]\u00a0!= 0<br/>            fr = r == base\u00a0? 1\u00a0: r + 1<br/>            fc = c<br/>        end<br/>        r, c = fr, fc<br/>        number += 1<br/>    end<br/>\u00a0<br/>    return square<br/>end<br/>\u00a0<br/>for n in 3:2:7<br/>    println(\"Magic square with size $n - magic constant = \", div(n ^ 3 + n, 2))<br/>    println(\"----------------------------------------------------\")<br/>    square = magicsquareodd(n)<br/>    for i in 1:n<br/>        println(square[i,\u00a0:])<br/>    end<br/>    println()<br/>end</pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun f<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x + y <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"Enter the order of the magic square\u00a0: \"</span><span class=\"br0\">)</span><br/>        n <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> || n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Must be odd and &gt;= 1, try again\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> break<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>n, n - j - <span class=\"nu0\">1</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n + f<span class=\"br0\">(</span>n, j, i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The magic constant is ${(n * n + 1) / 2 * n}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 51, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">Dim</span> m<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> magicSquare <span class=\"nu0\">5</span><br/><span class=\"kw1\">Call</span> magicSquare <span class=\"nu0\">17</span><br/>\u00a0<br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> magicSquare n<br/>    <span class=\"kw1\">ReDim</span> m<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>    inc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    row <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    col<span class=\"sy0\">=</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">While</span> count <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">*</span>n<br/>        m<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> count<br/>        count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> inc <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">Then</span><br/>            inc <span class=\"sy0\">=</span> inc <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            row <span class=\"sy0\">=</span> row <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            col <span class=\"sy0\">=</span> col <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> row <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> col <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">Then</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Else</span><br/>                row <span class=\"sy0\">=</span> n<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Else</span><br/>            inc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            row <span class=\"sy0\">=</span> row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">Call</span> printSquare n<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printSquare n<br/>    <span class=\"co1\">'Arbitrary limit to fit width of A4 paper</span><br/>    <span class=\"kw1\">If</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> n;<span class=\"st0\">\" x \"</span>;n;<span class=\"st0\">\" Magic Square --- \"</span>;<br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Magic constant is \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">For</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                <span class=\"kw1\">Print</span> <span class=\"kw2\">Using</span><span class=\"br0\">(</span><span class=\"st0\">\"####\"</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">Next</span> col<br/>            <span class=\"kw1\">Print</span><br/>            <span class=\"kw1\">Print</span><br/>        <span class=\"kw1\">Next</span> row<br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Notice</span> <span class=\"st0\">\"Magic Square will not fit on one sheet of paper.\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>rp[v_, pos_]\u00a0:= RotateRight[v, (Length[v] + 1)/2 - pos];<br/>rho[m_]\u00a0:= MapIndexed[rp, m];<br/>magic[n_]\u00a0:= <br/>  rho[Transpose[rho[Table[i*n + j, {i, 0, n - 1}, {j, 1, n}]]]];<br/>\u00a0<br/>square = magic[11] // Grid<br/>Print[\"Magic number is \", Total[square[[1, 1]]]]<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>rp[v_, pos_]\u00a0:= RotateRight[v, (Length[v] + 1)/2 - pos];<br/>rho[m_]\u00a0:= MapIndexed[rp, m];<br/>magic[n_]\u00a0:= <br/>  rho[Transpose[rho[Table[i*n + j, {i, 0, n - 1}, {j, 1, n}]]]];<br/>\u00a0<br/>square = magic[11] // Grid<br/>Print[\"Magic number is \", Total[square[[1, 1]]]]<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 17, "block": "<pre class=\"text highlighted_source\">wrap1(i):= if i&gt;%n% then 1 else if i&lt;1 then\u00a0%n% else i;<br/>wrap(P):=maplist('wrap1, P);<br/>\u00a0<br/>uprigth(P):= wrap(P + [-1, 1]);<br/>down(P):= wrap(P + [1, 0]);<br/>\u00a0<br/>magic(n):=block([%n%: n,<br/>  M: zeromatrix (n, n),<br/>  P: [1, (n + 1)/2],<br/>  m: 1, Pc],<br/>  do (<br/>    M[P[1],P[2]]: m,<br/>    m: m + 1,<br/>    if m&gt;n^2 then return(M),<br/>    Pc: uprigth(P),<br/>    if M[Pc[1],Pc[2]]=0 then P: Pc<br/>    else while(M[P[1],P[2]]#0) do P: down(P)));</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc `^`*(base: int, exp: int): int =<br/>  var (base, exp) = (base, exp)<br/>  result = 1<br/>\u00a0<br/>  while exp\u00a0!= 0:<br/>    if (exp and 1)\u00a0!= 0:<br/>      result *= base<br/>    exp = exp shr 1<br/>    base *= base<br/>\u00a0<br/>proc magic(n) =<br/>  for row in 1 .. n:<br/>    for col in 1 .. n:<br/>      let cell = (n * ((row + col - 1 + n div 2) mod n) +<br/>                  ((row + 2 * col - 2) mod n) + 1)<br/>      stdout.write align($cell, len($(n^2))),\" \"<br/>    echo \"\"<br/>  echo \"\\nAll sum to magic number \", ((n * n + 1) * n div 2)<br/>\u00a0<br/>for n in [5, 3, 7]:<br/>  echo \"\\nOrder \",n,\"\\n=======\"<br/>  magic(n)</pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"text highlighted_source\">: magicSquare(n)<br/>| i j wd |<br/>   n sq log asInteger 1+ -&gt;wd<br/>   n loop: i [<br/>      n loop: j [<br/>         i j + 1- n 2 / + n mod n *<br/>         i j + j + 2 - n mod 1 + + <br/>         System.Out swap &lt;&lt;w(wd) \" \" &lt;&lt; drop <br/>         ]<br/>      printcr<br/>      ] <br/>   System.Out \"Magic constant is\u00a0: \" &lt;&lt; n sq 1 + 2 / n * &lt;&lt; cr\u00a0;</pre>"}, {"lang": "Pascal", "loc": 16, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">PROGRAM</span> magic<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">(* Magic squares of odd order *)</span><br/><span class=\"kw1\">CONST</span><br/>  n<span class=\"sy3\">=</span><span class=\"nu0\">9</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy1\">,</span>j <span class=\"sy1\">:</span><span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span> <span class=\"coMULTI\">(*magic*)</span><br/>  <span class=\"kw3\">WRITELN</span><span class=\"br0\">(</span><span class=\"st0\">'The square order is: '</span><span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">FOR</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>      <span class=\"kw3\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy3\">-</span>j<span class=\"sy3\">+</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> n<span class=\"sy3\">*</span>n <span class=\"sy3\">+</span> <span class=\"br0\">(</span>i<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span>j<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">WRITELN</span><br/>  <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WRITELN</span><span class=\"br0\">(</span><span class=\"st0\">'The magic number is: '</span><span class=\"sy1\">,</span>n<span class=\"sy3\">*</span><span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"coMULTI\">(*magic*)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">magicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>j<span class=\"sy0\">=</span>n<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>l<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><br/>    M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>l<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>j<span class=\"sy0\">%</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      i<span class=\"sy0\">=</span>i<span class=\"sy0\">%</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><br/>    <span class=\"sy0\">,</span><br/>      i<span class=\"sy0\">=</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>      j<span class=\"sy0\">=</span>j<span class=\"sy0\">%</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  M<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>magicSquare<span class=\"br0\">(</span><span class=\"nu1\">7</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">sub</span> magic_square <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@magic_square</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$l</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$magic_square</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$l</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$magic_square</span><span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@magic_square</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> magic_square<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st_h\">'%8d'</span> x <span class=\"re0\">$n</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/qq.html\"><span class=\"kw3\">qq</span></a><span class=\"br0\">{</span><span class=\"re0\">\\n</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre>17 24  1  8 15\n23  5  7 14 16\n 4  6 13 20 22\n10 12 19 21  3\n11 18 25  2  9\n\nThe magic number is 65</pre>"}, {"lang": "PL/I", "loc": 38, "block": "<pre class=\"pli highlighted_source\">magic<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* 18 April 2014 */</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'What is the order of the magic square?'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">|</span> <span class=\"kw1\">iand</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'The value is out of range'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">stop</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'The order is '</span> <span class=\"sy0\">||</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">declare</span> m<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">on</span> <span class=\"kw1\">subrg</span> <span class=\"kw1\">snap</span> <span class=\"kw1\">put</span> <span class=\"kw1\">data</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> m<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            m<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>               i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">if</span> j <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>               m<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>         i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> j <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>m<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'The magic number is'</span> <span class=\"sy0\">||</span> <span class=\"kw1\">sum</span><span class=\"br0\">(</span>m<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> magic<span class=\"sy0\">;</span></pre>"}, {"lang": "PureBasic", "loc": 14, "block": "<pre class=\"purebasic highlighted_source\">#N<span class=\"sy0\">=</span><span class=\"nu0\">9</span><br/><span class=\"kw1\">Define</span>.i i,j<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Magic squares\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The square order is: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>#N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #N<br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #N<br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span>j<span class=\"sy0\">+</span>#N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> #N<span class=\"sy0\">*</span>#N <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span>j<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> #N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The magic number is: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>#N<span class=\"sy0\">*</span><span class=\"br0\">(</span>#N<span class=\"sy0\">*</span>#N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 45, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> magic<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%*i'</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n**<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> cell<span class=\"br0\">)</span> <span class=\"kw1\">for</span> cell <span class=\"kw1\">in</span><br/>                       <span class=\"br0\">(</span>n * <span class=\"br0\">(</span><span class=\"br0\">(</span>row + col - <span class=\"nu0\">1</span> + n // <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0% n<span class=\"br0\">)</span> +<br/>                       <span class=\"br0\">(</span><span class=\"br0\">(</span>row + <span class=\"nu0\">2</span> * col - <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0% n<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>                       <span class=\"kw1\">for</span> col <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>All sum to magic number\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span><span class=\"br0\">(</span>n * n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> * n // <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Order\u00a0%i<span class=\"es0\">\\n</span>======='</span>\u00a0% n<span class=\"br0\">)</span><br/>\tmagic<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>Order <span class=\"nu0\">5</span><br/><span class=\"sy0\">=======</span><br/><span class=\"nu0\">17</span> <span class=\"nu0\">24</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">23</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">16</span><br/> <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">13</span> <span class=\"nu0\">20</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">10</span> <span class=\"nu0\">12</span> <span class=\"nu0\">19</span> <span class=\"nu0\">21</span>  <span class=\"nu0\">3</span><br/><span class=\"nu0\">11</span> <span class=\"nu0\">18</span> <span class=\"nu0\">25</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">9</span><br/>\u00a0<br/>All <span class=\"kw2\">sum</span> to magic number <span class=\"nu0\">65</span><br/>\u00a0<br/>Order <span class=\"nu0\">3</span><br/><span class=\"sy0\">=======</span><br/><span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>All <span class=\"kw2\">sum</span> to magic number <span class=\"nu0\">15</span><br/>\u00a0<br/>Order <span class=\"nu0\">7</span><br/><span class=\"sy0\">=======</span><br/><span class=\"nu0\">30</span> <span class=\"nu0\">39</span> <span class=\"nu0\">48</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">19</span> <span class=\"nu0\">28</span><br/><span class=\"nu0\">38</span> <span class=\"nu0\">47</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">18</span> <span class=\"nu0\">27</span> <span class=\"nu0\">29</span><br/><span class=\"nu0\">46</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">17</span> <span class=\"nu0\">26</span> <span class=\"nu0\">35</span> <span class=\"nu0\">37</span><br/> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">16</span> <span class=\"nu0\">25</span> <span class=\"nu0\">34</span> <span class=\"nu0\">36</span> <span class=\"nu0\">45</span><br/><span class=\"nu0\">13</span> <span class=\"nu0\">15</span> <span class=\"nu0\">24</span> <span class=\"nu0\">33</span> <span class=\"nu0\">42</span> <span class=\"nu0\">44</span>  <span class=\"nu0\">4</span><br/><span class=\"nu0\">21</span> <span class=\"nu0\">23</span> <span class=\"nu0\">32</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span>  <span class=\"nu0\">3</span> <span class=\"nu0\">12</span><br/><span class=\"nu0\">22</span> <span class=\"nu0\">31</span> <span class=\"nu0\">40</span> <span class=\"nu0\">49</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">11</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>All <span class=\"kw2\">sum</span> to magic number <span class=\"nu0\">175</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Using \"helpful formulae\" in:<br/>;; http://en.wikipedia.org/wiki/Magic_square#Method_for_constructing_a_magic_square_of_odd_order<br/>(define (squares n) n)<br/>\u00a0<br/>(define (last-no n) (sqr n))<br/>\u00a0<br/>(define (middle-no n) (/ (add1 (sqr n)) 2))<br/>\u00a0<br/>(define (M n) (* n (middle-no n)))<br/>\u00a0<br/>(define ((Ith-row-Jth-col n) I J)<br/>  (+ (* (modulo (+ I J -1 (exact-floor (/ n 2))) n) n)<br/>     (modulo (+ I (* 2 J) -2) n)<br/>     1))<br/>\u00a0<br/>(define (magic-square n)<br/>  (define IrJc (Ith-row-Jth-col n))<br/>  (for/list ((I (in-range 1 (add1 n)))) (for/list ((J (in-range 1 (add1 n)))) (IrJc I J))))<br/>\u00a0<br/>(define (fmt-list-of-lists l-o-l width)<br/>  (string-join<br/>   (for/list ((row l-o-l))<br/>     (string-join (map (\u03bb (x) (~a #:align 'right #:width width x)) row) \"  \"))<br/>   \"\\n\"))<br/>\u00a0<br/>(define (show-magic-square n)<br/>  (format \"MAGIC SQUARE ORDER:~a~%~a~%MAGIC NUMBER:~a~%\"<br/>          n (fmt-list-of-lists (magic-square n) (+ (order-of-magnitude (last-no n)) 1)) (M n)))<br/>\u00a0<br/>(displayln (show-magic-square 3))<br/>(displayln (show-magic-square 5))<br/>(displayln (show-magic-square 9))</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates and displays magic squares (odd N will be a true magic square).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain the optional argument from CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">5</span>                      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>NN=N<span class=\"sy0\">*</span>N;    w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>NN<span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*W:  width of largest number (output).*/</span><br/>r=<span class=\"nu0\">1</span>;       c=<span class=\"br0\">(</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span>                           <span class=\"coMULTI\">/*define the initial  row  and  column.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                             <span class=\"coMULTI\">/*assign a default value for entire  @.*/</span><br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> NN                               <span class=\"coMULTI\">/* [\u2193]  filling uses the Siamese method*/</span><br/>    <span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> c<span class=\"sy0\">&gt;</span>N <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; r=r+<span class=\"nu0\">2</span>;  c=c-<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*the  row   is under,  column is over.*/</span><br/>    <span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>       <span class=\"kw3\">then</span> r=N                        <span class=\"coMULTI\">/* \"    \"     \"   \"     make row=last. */</span><br/>    <span class=\"kw1\">if</span> r<span class=\"sy0\">&gt;</span>N       <span class=\"kw3\">then</span> r=<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* \"    \"     \"  over,    \"   \"  first.*/</span><br/>    <span class=\"kw1\">if</span> c<span class=\"sy0\">&gt;</span>N       <span class=\"kw3\">then</span> c=<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* \"  column  \"  over,    \"  col=first.*/</span><br/>    <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; r=<span class=\"kw6\">min</span><span class=\"br0\">(</span>N,r+<span class=\"nu0\">2</span><span class=\"br0\">)</span>;  c=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,c-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*at the previous cell? */</span><br/>    @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=j;              r=r-<span class=\"nu0\">1</span>;  c=c+<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*assign # \u2500\u2500\u2500\u25ba cell; next row &amp; column*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display square with aligned #'s*/</span><br/>          <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  _=                   <span class=\"coMULTI\">/*display  one matrix row  at a time.  */</span><br/>            <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c, w<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*construct a row of the magic square. */</span><br/>            <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>          <span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*display a row of the magic square.   */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  If an odd square, show magic #.*/</span><br/><span class=\"kw1\">if</span> N<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">'The magic number  (or magic constant is): '</span>         N <span class=\"sy0\">*</span> <span class=\"br0\">(</span>NN+<span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n=9<br/>see \"the square order is\u00a0: \" + n + nl<br/>for i=1 to n <br/>    for j = 1 to n <br/>        x = (i*2-j+n-1)\u00a0% n*n + (i*2+j-2)\u00a0% n + 1<br/>        see \"\" + x + \" \"<br/>    next<br/>    see nl<br/>next<br/>see \"'the magic number is\u00a0: \" + n*(n*n+1) / 2 + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> odd_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span> <span class=\"st0\">\"Need odd positive number\"</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">even</span>? <span class=\"sy0\">||</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><br/>  n.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> n.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> n<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j<span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Size #{n}, magic sum #{(n*n+1)/2*n}\"</span><br/>  fmt = <span class=\"st0\">\"%#{(n*n).to_s.size + 1}d\"</span> <span class=\"sy0\">*</span> n<br/>  odd_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> fmt <span class=\"sy0\">%</span> row<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 13, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let n = 9;<br/>    let mut square = vec![vec![0; n]; n];<br/>    for (i, row) in square.iter_mut().enumerate() {<br/>        for (j, e) in row.iter_mut().enumerate() {<br/>            *e = n * (((i + 1) + (j + 1) - 1 + (n &gt;&gt; 1))\u00a0% n) + (((i + 1) + (2 * (j + 1)) - 2)\u00a0% n) + 1;<br/>            print!(\"{:3} \", e);<br/>        }<br/>        println!(\"\");<br/>    }<br/>    let sum = n * (((n * n) + 1) / 2);<br/>    println!(\"The sum of the square is {}.\", sum);<br/>}</pre>"}, {"lang": "Scala", "loc": 60, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> magicSquare<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"n must be an odd number\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// Make the horizontal by starting in the middle of the row and then taking a step back every n steps</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ii <span class=\"sy0\">=</span> Iterator.<span class=\"me1\">continually</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> to n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">drop</span><span class=\"br0\">(</span>n/<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sliding</span><span class=\"br0\">(</span>n,n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">flatten</span><br/>\u00a0<br/>    <span class=\"co1\">// Make the vertical component by moving up (subtracting 1) but every n-th step, step down (add 1)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> jj <span class=\"sy0\">=</span> Iterator.<span class=\"me1\">continually</span><span class=\"br0\">(</span>n-<span class=\"nu0\">1</span> to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">drop</span><span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">sliding</span><span class=\"br0\">(</span>n,n-<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">flatten</span><br/>\u00a0<br/>    <span class=\"co1\">// Combine the horizontal and vertical components to create the path</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> path <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ii zip jj<span class=\"br0\">)</span> take <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// Fill the array by following the path</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i<span class=\"sy0\">&lt;</span>-<span class=\"nu0\">1</span> to <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> p<span class=\"sy0\">=</span>path<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> a<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <span class=\"br0\">}</span><br/>\u00a0<br/>    Some<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> output<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span>  Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printMagicSquare<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ms <span class=\"sy0\">=</span> magicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> magicsum <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>\u00a0<br/>      assert<span class=\"br0\">(</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> ms.<span class=\"me1\">isDefined</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> ms.<span class=\"me1\">get</span><br/>          a.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> magicsum<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            a.<span class=\"me1\">transpose</span>.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> magicsum<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>-<span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">{</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> magicsum<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <span class=\"br0\">}</span><br/>      <span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> ms.<span class=\"me1\">isDefined</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> ms.<span class=\"me1\">get</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2554\u2550\u2550\u2550\u2550\u2564\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2550\u2550\u2550\u2550\u2557<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2550\u2550\u2550\u2550\u2564\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2551 \"</span> + f<span class=\"st0\">\"${ a(0)((j - 1) / 2) }%2d\"</span> + <span class=\"st0\">\" \u2502\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> + f<span class=\"st0\">\"${ a(i)((j - 1) / 2) }%2d\"</span> + <span class=\"st0\">\" \u2551<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> + f<span class=\"st0\">\"${ a(i)((j - 1) / 2) }%2d\"</span> + <span class=\"st0\">\" \u2502\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">==</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u255a\u2550\u2550\u2550\u2550\u2567\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">==</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2550\u2550\u2550\u2550\u255d<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">==</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2550\u2550\u2550\u2550\u2567\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u255f\u2500\u2500\u2500\u2500\u253c\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2562<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"\u2500\u2500\u2500\u2500\u253c\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    printMagicSquare<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: succ (in integer: num, in integer: max) is<br/>  return succ(num mod max);<br/>\u00a0<br/>const func integer: pred (in integer: num, in integer: max) is<br/>  return succ((num - 2) mod max);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: size is 3;<br/>    var array array integer: magic is 0 times 0 times 0;<br/>    var integer: row is 1;<br/>    var integer: column is 1;<br/>    var integer: number is 0;<br/>  begin<br/>    if length(argv(PROGRAM)) &gt;= 1 then<br/>      size\u00a0:= integer parse (argv(PROGRAM)[1]);<br/>    end if;<br/>    magic\u00a0:= size times size times 0;<br/>    column\u00a0:= succ(size div 2);<br/>    for number range 1 to size ** 2 do<br/>      magic[row][column]\u00a0:= number;<br/>      if magic[pred(row, size)][succ(column, size)] = 0 then <br/>        row\u00a0:= pred(row, size);<br/>        column\u00a0:= succ(column, size);<br/>      else<br/>        row\u00a0:= succ(row, size);<br/>      end if;<br/>    end for;<br/>    for key row range magic do<br/>      for key column range magic[row] do<br/>        write(magic[row][column] lpad 4);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 32, "block": "<pre class=\"ruby highlighted_source\">func magic_square<span class=\"br0\">(</span>n <span class=\"br0\">{</span>.<span class=\"me1\">is_pos</span> <span class=\"sy0\">&amp;&amp;</span> .<span class=\"me1\">is_odd</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var i = <span class=\"nu0\">0</span><br/>    var j = int<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var magic_square = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        magic_square<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = l<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>magic_square<span class=\"br0\">[</span>i.<span class=\"me1\">dec</span> <span class=\"sy0\">%</span> n<span class=\"br0\">]</span><span class=\"br0\">[</span>j.<span class=\"me1\">inc</span> <span class=\"sy0\">%</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i = <span class=\"br0\">(</span>i.<span class=\"me1\">inc</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            i = <span class=\"br0\">(</span>i.<span class=\"me1\">dec</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><br/>            j = <span class=\"br0\">(</span>j.<span class=\"me1\">inc</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> magic_square<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func print_square<span class=\"br0\">(</span>sq<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var f = <span class=\"st0\">\"%#{(sq.len**2).len}d\"</span>;<br/>    <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> sq <span class=\"br0\">{</span><br/>        say row.<span class=\"me1\">map</span><span class=\"br0\">{</span> f <span class=\"sy0\">%</span> _ <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var<span class=\"br0\">(</span>n=<span class=\"nu0\">5</span><span class=\"br0\">)</span> = ARGV\u00bbto_i\u00bb<span class=\"br0\">(</span><span class=\"br0\">)</span>...<br/><span class=\"me1\">var</span> sq = magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>print_square<span class=\"br0\">(</span>sq<span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>The magic number is: #{sq[0].sum}\"</span></pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> magicSquare <span class=\"br0\">{</span>order<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$order</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> || <span class=\"re0\">$order</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"order must be odd and positive\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$order</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$order</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$order</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$order</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lset</span> s <span class=\"re0\">$y</span> <span class=\"re0\">$x</span> <span class=\"re0\">$i</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$order</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$order</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$s</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$order</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$order</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">9\u2192N<br/>DelVar [A]:{N,N}\u2192dim([A])<br/>For(I,1,N)<br/>For(J,1,N)<br/>Remainder(I*2-J+N-1,N)*N+Remainder(I*2+J-2,N)+1\u2192[A](I,J)<br/>End<br/>End<br/>[A]</pre>"}, {"lang": "uBasic/4tH", "loc": 64, "block": "<pre class=\"text highlighted_source\">' ------=&lt; MAIN &gt;=------<br/>\u00a0<br/>Proc _magicsq(5)<br/>Proc _magicsq(11)<br/>End<br/>\u00a0<br/>_magicsq Param (1) Local (4)<br/>\u00a0<br/>    ' reset the array<br/>    For <a class=\"__cf_email__\" data-cfemail=\"8be9cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to 255<br/>        @(<a class=\"__cf_email__\" data-cfemail=\"7b193b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0<br/>    Next<br/>\u00a0<br/>    If  ((<a class=\"__cf_email__\" data-cfemail=\"bbdafb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% 2) = 0) + (<a class=\"__cf_email__\" data-cfemail=\"7e1f3e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 3) + (<a class=\"__cf_email__\" data-cfemail=\"fe9fbe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 15) Then<br/>        Print \"error: size is not odd or size is smaller then 3 or bigger than 15\"<br/>        Return<br/>    EndIf<br/>\u00a0<br/>    ' start in the middle of the first row<br/>    <a class=\"__cf_email__\" data-cfemail=\"234163\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>    <a class=\"__cf_email__\" data-cfemail=\"1f7c5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"adcced\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - (<a class=\"__cf_email__\" data-cfemail=\"2f4e6f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / 2)<br/>    <a class=\"__cf_email__\" data-cfemail=\"563216\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>    <a class=\"__cf_email__\" data-cfemail=\"254065\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"fa9bba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"2d4c6d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>    ' main loop for creating magic square<br/>    Do<br/>        If @(<a class=\"__cf_email__\" data-cfemail=\"1b785b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"1a7b5a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"b49fd0f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0 Then<br/>            @(<a class=\"__cf_email__\" data-cfemail=\"81e2c1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"1f7e5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"012a6541\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = <a class=\"__cf_email__\" data-cfemail=\"234163\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>            If (<a class=\"__cf_email__\" data-cfemail=\"4d2f0d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"9dfcdd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0 Then<br/>                <a class=\"__cf_email__\" data-cfemail=\"9bffdb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"630723\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>            Else<br/>                <a class=\"__cf_email__\" data-cfemail=\"98fbd8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"056645\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>                <a class=\"__cf_email__\" data-cfemail=\"a5c1e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"ed89ad\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>            EndIf<br/>            <a class=\"__cf_email__\" data-cfemail=\"f89ab8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"385a78\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>        EndIf<br/>        If <a class=\"__cf_email__\" data-cfemail=\"046744\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; <a class=\"__cf_email__\" data-cfemail=\"83e2c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Then<br/>            <a class=\"__cf_email__\" data-cfemail=\"b3d0f3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>            Do While @(<a class=\"__cf_email__\" data-cfemail=\"bfdcff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"016041\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"b19ad5f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) # 0<br/>                <a class=\"__cf_email__\" data-cfemail=\"e281a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"204360\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>            Loop<br/>        EndIf<br/>        If <a class=\"__cf_email__\" data-cfemail=\"5e3a1e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 1 Then<br/>            <a class=\"__cf_email__\" data-cfemail=\"117551\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"761736\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>            Do While @(<a class=\"__cf_email__\" data-cfemail=\"83e0c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"0b6a4b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"a48fc0e4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) # 0<br/>                <a class=\"__cf_email__\" data-cfemail=\"9efade\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"254165\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>            Loop<br/>        EndIf<br/>    Until <a class=\"__cf_email__\" data-cfemail=\"583a18\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; <a class=\"__cf_email__\" data-cfemail=\"1f7a5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    Loop<br/>\u00a0<br/>    Print \"Odd magic square size: \"; <a class=\"__cf_email__\" data-cfemail=\"442504\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; \" * \"; <a class=\"__cf_email__\" data-cfemail=\"5a3b1a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    Print \"The magic sum = \"; ((<a class=\"__cf_email__\" data-cfemail=\"422702\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1) / 2) * <a class=\"__cf_email__\" data-cfemail=\"92f3d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    Print<br/>\u00a0<br/>    For <a class=\"__cf_email__\" data-cfemail=\"f793b7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 To <a class=\"__cf_email__\" data-cfemail=\"ddbc9d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>        For <a class=\"__cf_email__\" data-cfemail=\"f596b5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 To <a class=\"__cf_email__\" data-cfemail=\"90f1d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>            Print Using \"____\"; @(<a class=\"__cf_email__\" data-cfemail=\"e281a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"9bfadb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"7d56193d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>);<br/>        Next<br/>        Print<br/>    Next<br/>    Print<br/>Return<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 13, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> magicsquare()<br/>    <span class=\"co1\">'Magic squares of odd order<br/></span>    Const n = 9<br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, v <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The square order is: \"</span> &amp; n<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> n<br/>            Cells(i, j) = ((i * 2 - j + n - 1) <span class=\"kw4\">Mod</span> n) * n + ((i * 2 + j - 2) <span class=\"kw4\">Mod</span> n) + 1<br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The magic number of\"</span>; n; <span class=\"st0\">\"x\"</span>; n; <span class=\"st0\">\"square is:\"</span>; n * (n * n + 1) \\ 2<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> <span class=\"co1\">'magicsquare<br/></span></pre>"}, {"lang": "VBScript", "loc": 41, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> magic_square(n)<br/>\t<span class=\"kw4\">Dim</span> ms()<br/>\t<span class=\"kw4\">ReDim</span> ms(n-1,n-1)<br/>\tinc = 0<br/>\tcount = 1<br/>\trow = 0<br/>\tcol = Int(n/2)<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> count &lt;= n*n<br/>\t\tms(row,col) = count<br/>\t\tcount = count + 1<br/>\t\t<span class=\"kw3\">If</span> inc &lt; n-1 <span class=\"kw3\">Then</span><br/>\t\t\tinc = inc + 1<br/>\t\t\trow = row - 1<br/>\t\t\tcol = col + 1<br/>\t\t\t<span class=\"kw3\">If</span> row &gt;= 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t<span class=\"kw3\">If</span> col &gt; n-1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tcol = 0<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\trow = n-1<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tinc = 0<br/>\t\t\trow = row + 1<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t\t<span class=\"kw3\">If</span> j = n-1 <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.Write ms(i,j)<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tWScript.StdOut.Write ms(i,j) &amp; vbTab<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span> <br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>magic_square(5)<br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 15, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> magicsquare()<br/>    <span class=\"co1\">'Magic squares of odd order<br/></span>    Const n = 9<br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, v <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The square order is: \"</span> &amp; n<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> n<br/>            v = ((i * 2 - j + n - 1) <span class=\"kw4\">Mod</span> n) * n + ((i * 2 + j - 2) <span class=\"kw4\">Mod</span> n) + 1<br/>            Debug.<span class=\"kw4\">Print</span> Right(Space(5) &amp; v, 5);<br/>        <span class=\"kw3\">Next</span> j<br/>        Debug.<span class=\"kw4\">Print</span><br/>    <span class=\"kw3\">Next</span> i<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The magic number is: \"</span> &amp; n * (n * n + 1) \\ 2<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> <span class=\"co1\">'magicsquare<br/></span></pre>"}, {"lang": "Visual Basic .NET", "loc": 14, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Sub</span> magicsquare<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'Magic squares of odd order</span><br/>    <span class=\"kw1\">Const</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">Dim</span> i, j, v <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The square order is: \"</span> <span class=\"sy0\">&amp;</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            v <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> j <span class=\"sy0\">+</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.google.com/search?q=RIGHT+site:msdn.microsoft.com\"><span class=\"kw7\">Right</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=SPACE+site:msdn.microsoft.com\"><span class=\"kw7\">Space</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> v, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span> j<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The magic number is: \"</span> <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <span class=\"co1\">'magicsquare</span></pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn rmod(n,m){ n=n%m; if (n&lt;0) n+=m; n } // Ruby: -5%3--&gt;1<br/>fcn odd_magic_square(n){ //--&gt;list of n*n numbers, row order<br/>   if (n.isEven or n &lt;= 0) throw(Exception.ValueError(\"Need odd positive number\"));<br/>   [[(i,j); n; n; '{ n*((i+j+1+n/2):rmod(_,n)) + ((i+2*j-5):rmod(_,n)) + 1 }]]<br/>}<br/>\u00a0<br/>T(3, 5, 9).pump(Void,fcn(n){<br/>   \"\\nSize\u00a0%d, magic sum\u00a0%d\".fmt(n,(n*n+1)/2*n).println();<br/>   fmt\u00a0:= \"%%%dd\".fmt((n*n).toString().len() + 1) * n;<br/>   odd_magic_square(n).pump(Console.println,T(Void.Read,n-1),fmt.fmt);<br/>});</pre>"}]}