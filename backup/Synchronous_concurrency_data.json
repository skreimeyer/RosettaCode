{"task": "Synchronous_concurrency", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Synchronous_Concurrent <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">task</span> Printer <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">entry</span> Put<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> String<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Get_Count<span class=\"br0\">(</span>Count\u00a0: <span class=\"kw3\">out</span> Natural<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Printer;<br/><span class=\"kw1\">end</span> Synchronous_Concurrent;</pre>"}, {"lang": "Aikido", "loc": 49, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>monitor Queue {<br/>    var items = []<br/>    public function put (item) {<br/>        items.append (item)<br/>        notify()<br/>    }<br/>\u00a0<br/>    public function get() {<br/>        while (items.size() == 0) {<br/>            wait()<br/>        }<br/>        var item = items[0]<br/>        items &lt;&lt;= 1<br/>        return item<br/>    }<br/>\u00a0<br/>    public function close {<br/>        items.append (none)<br/>    }<br/>}<br/>\u00a0<br/>thread reader (queue) {<br/>    var numlines = 0<br/>    for (;;) {<br/>        var line = queue.get()<br/>        if (typeof(line) == \"none\") {<br/>            break<br/>        }<br/>        print (line)<br/>        numlines++<br/>    }<br/>    println (\"Number of lines: \" + numlines)<br/>}<br/>\u00a0<br/>thread writer (queue, lines) {<br/>    foreach line lines {<br/>        queue.put (line)<br/>    }<br/>    queue.close()<br/>}<br/>\u00a0<br/>var queue = new Queue()<br/>var lines = readfile (\"input.txt\")<br/>var r = reader(queue)<br/>var w = writer(queue, lines)<br/>\u00a0<br/>join (r)<br/>join (w)</pre>"}, {"lang": "ALGOL 68", "loc": 32, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> line<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"kw27\">errno</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">BOOL</span> input complete <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">SEMA</span> output throttle <span class=\"sy1\">=</span> <span class=\"kw8\">LEVEL</span> 0<span class=\"sy1\">,</span> input throttle <span class=\"sy1\">=</span> <span class=\"kw8\">LEVEL</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw6\">FILE</span> input txt<span class=\"sy1\">;</span><br/>  <span class=\"kw27\">errno</span> <span class=\"sy1\">:=</span> <span class=\"kw22\">open</span><span class=\"br0\">(</span>input txt<span class=\"sy1\">,</span> <span class=\"st0\">\"input.txt\"</span><span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> call back done <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> input complete <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span>input txt<span class=\"sy1\">,</span> call back done<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">PAR</span> <span class=\"br0\">(</span><br/>    <span class=\"kw2\">WHILE</span><br/>      <span class=\"kw8\">DOWN</span> input throttle<span class=\"sy1\">;</span><br/>      get<span class=\"br0\">(</span>input txt<span class=\"sy1\">,</span><span class=\"br0\">(</span>line<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw8\">UP</span> output throttle<span class=\"sy1\">;</span><br/>      <span class=\"kw8\">NOT</span> input complete<br/>    <span class=\"kw2\">DO</span><br/>      count<span class=\"sy1\">+:=</span>1<br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"sy1\">,</span><br/>    <span class=\"kw2\">WHILE</span><br/>      <span class=\"kw8\">DOWN</span> output throttle<span class=\"sy1\">;</span><br/>      <span class=\"kw8\">NOT</span> input complete<br/>    <span class=\"kw2\">DO</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>line<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw8\">UP</span> input throttle<br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "BCPL", "loc": 140, "block": "<pre class=\"text highlighted_source\">// This is a BCPL implementation of the Rosettacode synchronous<br/>// concurrency test using BCPL coroutines and a coroutine implementation<br/>// of a Occum-style channels.<br/>// BCPL is freely available from www.cl.cam.ac.uk/users/mr10<br/>\u00a0<br/>SECTION \"coinout\"<br/>\u00a0<br/>GET \"libhdr.h\"<br/>\u00a0<br/>GLOBAL {<br/>  tracing: ug<br/>}<br/>\u00a0<br/>LET start() = VALOF<br/>{ LET argv = VEC 50<br/>  LET in_co, out_co = 0, 0<br/>  LET channel = 0<br/>  LET filename = \"input.txt\"<br/>\u00a0<br/>  UNLESS rdargs(\"-f,-t/S\", argv, 50) DO<br/>  { writef(\"Bad arguments for coinout*n\")<br/>    RESULTIS 0<br/>  }<br/>\u00a0<br/>  IF argv!0 DO filename\u00a0:= argv!0  // -f     the source file<br/>  tracing\u00a0:= argv!1                // -t/S   tracing option<br/>\u00a0<br/>  in_co \u00a0:= initco(infn,  500, @channel)<br/>  out_co\u00a0:= initco(outfn, 500, @channel)<br/>\u00a0<br/>  UNLESS in_co &amp; out_co DO<br/>  { writef(\"Trouble creating the coroutines*n\")<br/>    GOTO fin<br/>  }<br/>\u00a0<br/>  IF tracing DO writef(\"*nBoth in and out coroutines created*n*n\")<br/>\u00a0<br/>  callco(in_co, filename)<br/>\u00a0<br/>fin:<br/>  IF in_co  DO deleteco(in_co)<br/>  IF out_co DO deleteco(out_co)<br/>\u00a0<br/>  IF tracing DO writef(\"Both in and out coroutines deleted*n*n\")<br/>\u00a0<br/>  RESULTIS 0<br/>}<br/>\u00a0<br/>AND readline(line) = VALOF<br/>{ LET ch, i = 0, 0<br/>  line%0\u00a0:= 0<br/>\u00a0<br/>  { ch\u00a0:= rdch()<br/>    IF ch=endstreamch RESULTIS FALSE<br/>    i\u00a0:= i+1<br/>    line%0, line%i\u00a0:= i, ch<br/>    IF ch='*n' | i=255 BREAK<br/>  } REPEAT<br/>\u00a0<br/>  RESULTIS TRUE<br/>}<br/>\u00a0<br/>AND infn(args) BE<br/>{ LET channelptr = args!0<br/>  LET name = cowait()  // Get the file name<br/>  LET instream = findinput(name)<br/>  LET line = VEC 256/bytesperword<br/>\u00a0<br/>  UNLESS instream DO<br/>  { writef(\"*nTrouble with file:\u00a0%s*n\", name)<br/>    RETURN<br/>  }<br/>\u00a0<br/>  selectinput(instream)<br/>\u00a0<br/>  { LET ok = readline(line)<br/>    UNLESS ok BREAK<br/>    IF tracing DO<br/>      writef(\"inco:  Sending a line to outco*n\")<br/>    cowrite(channelptr, line) <br/>  } REPEAT<br/>\u00a0<br/>  IF tracing DO<br/>    writef(\"inco:  Sending zero to outco*n\")<br/>\u00a0<br/>  writef(\"*nNumber of lines written was\u00a0%n*n\", cowrite(channelptr, 0)) <br/>\u00a0<br/>  endstream(instream) <br/>}<br/>\u00a0<br/>AND outfn(args) BE<br/>{ LET channelptr = args!0<br/>  LET linecount = 0<br/>\u00a0<br/>  { LET line = coread(channelptr)<br/>    UNLESS line BREAK<br/>    IF tracing DO writef(\"outfn: Received a line*n\")<br/>    writes(line)<br/>    linecount\u00a0:= linecount + 1<br/>  } REPEAT<br/>\u00a0<br/>  IF tracing DO<br/>    writef(\"outfn: Received zero, so sent count=%n back to inco*n\",<br/>            linecount)<br/>\u00a0<br/>  cowait(linecount)<br/>}<br/>\u00a0<br/>// The following functions are a  implementation of Occum-style channels<br/>// using coroutines.<br/>\u00a0<br/>// The first coroutine to request a transfer through a channel becomes<br/>// suspended and the second causes the data to be transfers and then allows<br/>// both coroutines to resume (in some order). The channel word is either<br/>// zero or points to a suspended (read or write) cocoutine.<br/>\u00a0<br/>// The use of resumeco in coread is somewhat subtle!<br/>\u00a0<br/>AND coread(ptr) = VALOF<br/>{ LET cptr =\u00a0!ptr<br/>  TEST cptr<br/>  THEN {\u00a0!ptr\u00a0:= 0         // Clear the channel word<br/>         RESULTIS resumeco(cptr, currco)<br/>       }<br/>  ELSE {\u00a0!ptr\u00a0:= currco    // Set channel word to this coroutine<br/>         RESULTIS cowait() // Wait for value from cowrite<br/>       }<br/>}<br/>\u00a0<br/>AND cowrite(ptr, val) BE<br/>{ LET cptr =\u00a0!ptr<br/>  TEST cptr<br/>  THEN {\u00a0!ptr\u00a0:= 0<br/>         callco(cptr, val) // Send val to coread<br/>       }<br/>  ELSE {\u00a0!ptr\u00a0:= currco<br/>          callco(cowait(), val)<br/>       }<br/>}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 112, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;\t/* malloc(), realloc(), free() */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t/* fopen(), fgetc(), fwrite(), printf() */</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;libco.h&gt;\t/* co_create(), co_switch() */</span><br/>\u00a0<br/><span class=\"kw4\">void</span><br/>fail<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>message<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span>message<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * These are global variables of this process. All cothreads of this<br/> * process will share these global variables.<br/> */</span><br/>cothread_t reader<span class=\"sy0\">;</span><br/>cothread_t printer<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span>\t<span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* Not a C string. No terminating '\\0'. */</span><br/>\t<span class=\"kw4\">size_t</span>\tlen<span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* Length of line in buffer. */</span><br/>\t<span class=\"kw4\">size_t</span>\tcap<span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* Maximum capacity of buffer. */</span><br/><span class=\"br0\">}</span> line<span class=\"sy0\">;</span><br/><span class=\"kw4\">size_t</span> count<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* Number of lines printed. */</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * The reader cothread reads every line of an input file, passes each<br/> * line to the printer cothread, and reports the number of lines.<br/> */</span><br/><span class=\"kw4\">void</span><br/>reader_entry<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span>input<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> newcap<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> eof<span class=\"sy0\">,</span> eol<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>newbuf<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinput <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>input <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\tfail<span class=\"br0\">(</span><span class=\"st0\">\"fopen\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tline.<span class=\"me1\">buf</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>line.<span class=\"me1\">cap</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4096</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* New buffer. */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">buf</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\tfail<span class=\"br0\">(</span><span class=\"st0\">\"malloc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tline.<span class=\"me1\">len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Start with an empty line. */</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\tc <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgetc.html\"><span class=\"kw3\">fgetc</span></a><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Read next character. */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ferror.html\"><span class=\"kw3\">ferror</span></a><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tfail<span class=\"br0\">(</span><span class=\"st0\">\"fgetc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\teof <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> EOF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>eof<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/*<br/>\t\t\t * End of file is also end of line,<br/>\t\t`\t * unless the line would be empty.<br/>\t\t\t */</span><br/>\t\t\teol <span class=\"sy0\">=</span> <span class=\"br0\">(</span>line.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/* Append c to the buffer. */</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">len</span> <span class=\"sy0\">==</span> line.<span class=\"me1\">cap</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"coMULTI\">/* Need a bigger buffer! */</span><br/>\t\t\t\tnewcap <span class=\"sy0\">=</span> line.<span class=\"me1\">cap</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\tnewbuf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>line.<span class=\"me1\">buf</span><span class=\"sy0\">,</span> newcap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>newbuf <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\t\t\t\tfail<span class=\"br0\">(</span><span class=\"st0\">\"realloc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tline.<span class=\"me1\">buf</span> <span class=\"sy0\">=</span> newbuf<span class=\"sy0\">;</span><br/>\t\t\t\tline.<span class=\"me1\">cap</span> <span class=\"sy0\">=</span> newcap<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tline.<span class=\"me1\">buf</span><span class=\"br0\">[</span>line.<span class=\"me1\">len</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"coMULTI\">/* '\\n' is end of line. */</span><br/>\t\t\teol <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>eol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/* Pass our complete line to the printer. */</span><br/>\t\t\tco_switch<span class=\"br0\">(</span>printer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tline.<span class=\"me1\">len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Destroy our line. */</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>eof<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>line.<span class=\"me1\">buf</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tline.<span class=\"me1\">buf</span> <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Stops a loop in the printer. */</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Printed\u00a0%zu lines.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tco_switch<span class=\"br0\">(</span>printer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * The printer cothread starts the reader cothread, prints every line<br/> * line from the reader cothread, and counts the number of lines.<br/> */</span><br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\treader <span class=\"sy0\">=</span> co_create<span class=\"br0\">(</span><span class=\"nu0\">4096</span><span class=\"sy0\">,</span> reader_entry<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tprinter <span class=\"sy0\">=</span> co_active<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tco_switch<span class=\"br0\">(</span>reader<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">buf</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* Print this line. Count it. */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>line.<span class=\"me1\">buf</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> line.<span class=\"me1\">len</span><span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcount<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tco_delete<span class=\"br0\">(</span>reader<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 61, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;future&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;mutex&gt;</span><br/><span class=\"co2\">#include &lt;queue&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;thread&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> lock_queue<br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">queue</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> q<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span> mutex<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> reader<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> filename, std<span class=\"sy4\">::</span><span class=\"me2\">future</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> lines, lock_queue<span class=\"sy3\">&amp;</span> out<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> in<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>in, line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        line <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy1\">&gt;</span> lock<span class=\"br0\">(</span>out.<span class=\"me1\">mutex</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        out.<span class=\"me1\">q</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy1\">&gt;</span> lock<span class=\"br0\">(</span>out.<span class=\"me1\">mutex</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        out.<span class=\"me1\">q</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    lines.<span class=\"me1\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Printed \"</span> <span class=\"sy1\">&lt;&lt;</span> lines.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" lines<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printer<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">promise</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> lines, lock_queue<span class=\"sy3\">&amp;</span> in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">size_t</span> line_n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> print <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy1\">&gt;</span> lock<span class=\"br0\">(</span>in.<span class=\"me1\">mutex</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span> print <span class=\"sy1\">=</span> not in.<span class=\"me1\">q</span>.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//Assignment intended</span><br/>                s <span class=\"sy1\">=</span> in.<span class=\"me1\">q</span>.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                in.<span class=\"me1\">q</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>print<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>s <span class=\"sy1\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s<span class=\"sy4\">;</span><br/>            <span class=\"sy2\">++</span>line_n<span class=\"sy4\">;</span><br/>            print <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    lines.<span class=\"me1\">set_value</span><span class=\"br0\">(</span>line_n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    lock_queue queue<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">promise</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> promise<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">thread</span> t1<span class=\"br0\">(</span>reader, <span class=\"st0\">\"input.txt\"</span>, promise.<span class=\"me1\">get_future</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">thread</span> t2<span class=\"br0\">(</span>printer, std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>promise<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    t1.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> t2.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 42, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading.Tasks</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Concurrent</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> SynchronousConcurrency<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> toWriterTask <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> fromWriterTask <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Task writer <span class=\"sy0\">=</span> Task<span class=\"sy0\">.</span><span class=\"me1\">Factory</span><span class=\"sy0\">.</span><span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ConsoleWriter<span class=\"br0\">(</span>toWriterTask, fromWriterTask<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Task reader <span class=\"sy0\">=</span> Task<span class=\"sy0\">.</span><span class=\"me1\">Factory</span><span class=\"sy0\">.</span><span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> FileReader<span class=\"br0\">(</span>fromWriterTask, toWriterTask<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Task<span class=\"sy0\">.</span><span class=\"me1\">WaitAll</span><span class=\"br0\">(</span>writer, reader<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> ConsoleWriter<span class=\"br0\">(</span>BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> input, BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> output<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> nLines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> line<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> input<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"sy0\">++</span>nLines<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>nLines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> FileReader<span class=\"br0\">(</span>BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> input, BlockingCollection<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> output<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            StreamReader file <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamReader<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// TODO: check exceptions</span><br/>            <span class=\"kw4\">string</span> line<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> file<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"br0\">}</span><br/>            output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// EOF</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"line count: \"</span> <span class=\"sy0\">+</span> input<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io\u00a0:<span class=\"me1\">as</span> io<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> writer <span class=\"br0\">(</span>agent <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> write<span class=\"sy0\">-</span>line <span class=\"br0\">[</span>state line<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println line<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">inc</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 59, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *self*<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass queue <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>condition <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"br0\">(</span>make-condition-variable<span class=\"br0\">)</span><br/>              <span class=\"sy0\">:</span><span class=\"me1\">reader</span> condition-of<span class=\"br0\">)</span> <br/>   <span class=\"br0\">(</span>mailbox <span class=\"sy0\">:</span><span class=\"me1\">initform</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> mailbox-of<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>lock <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"br0\">(</span>make-lock<span class=\"br0\">)</span><br/>         <span class=\"sy0\">:</span><span class=\"me1\">reader</span> lock-of<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> message <span class=\"br0\">(</span>recipient <span class=\"kw1\">name</span> <span class=\"sy0\">&amp;</span>rest message<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-lock-held <span class=\"br0\">(</span><span class=\"br0\">(</span>lock-of recipient<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; it would have been better to implement tail-consing or a LIFO</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>mailbox-of recipient<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">nconc</span> <span class=\"br0\">(</span>mailbox-of recipient<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span>* <span class=\"kw1\">name</span> message<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>condition-notify <span class=\"br0\">(</span>condition-of recipient<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  message<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mklist <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">listp</span> x<span class=\"br0\">)</span><br/>      x<br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> slurp-message <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-lock-held <span class=\"br0\">(</span><span class=\"br0\">(</span>lock-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>mailbox-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>pop <span class=\"br0\">(</span>mailbox-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span>condition-wait <span class=\"br0\">(</span>condition-of *self*<span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span>lock-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>mailbox-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>pop <span class=\"br0\">(</span>mailbox-of *self*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> receive-message <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>body cases<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>msg-<span class=\"kw1\">name</span> <span class=\"br0\">(</span><span class=\"kw1\">gensym</span> <span class=\"st0\">\"MESSAGE\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>block-<span class=\"kw1\">name</span> <span class=\"br0\">(</span><span class=\"kw1\">gensym</span> <span class=\"st0\">\"BLOCK\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>msg-<span class=\"kw1\">name</span> <span class=\"br0\">(</span>slurp-message<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>       <span class=\"br0\">(</span>block <span class=\"sy0\">,</span>block-<span class=\"kw1\">name</span><br/>         <span class=\"sy0\">,</span>@<span class=\"br0\">(</span>loop for i in cases<br/>                 for <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span> <span class=\"sy0\">.</span> <span class=\"kw1\">case</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> body<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>mklist <span class=\"br0\">(</span><span class=\"kw1\">car</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                    <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">when</span> <span class=\"br0\">(</span>typep i '<span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"kw1\">quote</span><span class=\"br0\">)</span><br/>                                          t<span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"kw1\">quote</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>                                          t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>warn <span class=\"st0\">\"~S is a quoted form\"</span> i<span class=\"br0\">)</span><br/>                 collect `<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>                                     't<br/>                                     `<span class=\"br0\">(</span><span class=\"kw1\">eql</span> '<span class=\"sy0\">,</span><span class=\"kw1\">name</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"sy0\">,</span>msg-<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>destructuring-bind <span class=\"sy0\">,</span><span class=\"kw1\">case</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"sy0\">,</span>msg-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>return-from <span class=\"sy0\">,</span>block-<span class=\"kw1\">name</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Unknown message: ~S\"</span> <span class=\"sy0\">,</span>msg-<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> receive-one-message <span class=\"br0\">(</span>message <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>receive-message <span class=\"br0\">(</span><span class=\"sy0\">,</span>message <span class=\"sy0\">.</span> <span class=\"sy0\">,</span>body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> queue <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make-instance 'queue<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">concurrency</span><span class=\"sy0\">,</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> printer <span class=\"sy0\">=</span> spawn<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>printTask<span class=\"sy0\">,</span> thisTid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> line<span class=\"sy0\">;</span> lines<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        send<span class=\"br0\">(</span>printer<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    send<span class=\"br0\">(</span>printer<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"co1\">//EOF</span><br/>    <span class=\"kw4\">auto</span> n <span class=\"sy0\">=</span> receiveOnly<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    stdout.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d lines printed.\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printTask<span class=\"br0\">(</span>Tid reader<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">bool</span> eof <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>eof<span class=\"sy0\">;</span><span class=\"br0\">)</span> <br/>        receive<span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span><span class=\"kw4\">string</span> line<span class=\"br0\">)</span> <span class=\"br0\">{</span>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++;</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">(</span><span class=\"kw4\">bool</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>send<span class=\"br0\">(</span>reader<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> eof <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 170, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> Project2<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> Classes<span class=\"sy1\">,</span> Windows<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  EThreadStackFinalized <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>Exception<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  PLine <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>TLine<span class=\"sy1\">;</span><br/>  TLine <span class=\"sy3\">=</span> <span class=\"kw1\">record</span><br/>    Text<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TThreadQueue <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FFinalized<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>    FQueue<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Finalize<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Push<span class=\"br0\">(</span>Data<span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> Pop<span class=\"br0\">(</span><span class=\"kw1\">var</span> Data<span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">property</span> Finalized<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span> <span class=\"kw1\">read</span> FFinalized<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TPrintThread <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>TThread<span class=\"br0\">)</span><br/>  <span class=\"kw1\">private</span><br/>    FCount<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>    FTreminateEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/>    FDoneEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/>    FQueue<span class=\"sy1\">:</span> TThreadQueue<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>aTreminateEvent<span class=\"sy1\">,</span> aDoneEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span> aQueue<span class=\"sy1\">:</span> TThreadQueue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Execute<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">property</span> Count<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FCount<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TThreadQueue }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FQueue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateIOCompletionPort<span class=\"br0\">(</span>INVALID_HANDLE_VALUE<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FFinalized <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> FQueue &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    CloseHandle<span class=\"br0\">(</span>FQueue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">inherited</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Finalize</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  PostQueuedCompletionStatus<span class=\"br0\">(</span>FQueue<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">(</span><span class=\"re0\">$FFFFFFFF</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FFinalized <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> Data<span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  A<span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"sy1\">;</span><br/>  OL<span class=\"sy1\">:</span> POverLapped<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> FFinalized <span class=\"kw1\">then</span><br/>    GetQueuedCompletionStatus<span class=\"br0\">(</span>FQueue<span class=\"sy1\">,</span> A<span class=\"sy1\">,</span> <span class=\"kw4\">Cardinal</span><span class=\"br0\">(</span>Data<span class=\"br0\">)</span><span class=\"sy1\">,</span> OL<span class=\"sy1\">,</span> INFINITE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> FFinalized <span class=\"kw1\">or</span> <span class=\"br0\">(</span>OL <span class=\"sy3\">=</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">(</span><span class=\"re0\">$FFFFFFFF</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>    Data <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">nil</span><span class=\"sy1\">;</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>    Finalize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>Data<span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> FFinalized <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">raise</span> EThreadStackFinalized<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'Stack is finalized'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  PostQueuedCompletionStatus<span class=\"br0\">(</span>FQueue<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw4\">Cardinal</span><span class=\"br0\">(</span>Data<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TPrintThread }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TPrintThread<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>aTreminateEvent<span class=\"sy1\">,</span> aDoneEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span> aQueue<span class=\"sy1\">:</span> TThreadQueue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FCount <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  FreeOnTerminate <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>  FTreminateEvent <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aTreminateEvent<span class=\"sy1\">;</span><br/>  FDoneEvent <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aDoneEvent<span class=\"sy1\">;</span><br/>  FQueue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aQueue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TPrintThread<span class=\"sy1\">.</span><span class=\"me1\">Execute</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  data<span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span><span class=\"sy1\">;</span><br/>  line<span class=\"sy1\">:</span> PLine<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">if</span> FQueue<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      line <span class=\"sy1\">:</span><span class=\"sy3\">=</span> data<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">try</span><br/>        <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>line<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> line<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy3\">=</span> <span class=\"re1\">#0</span> <span class=\"kw1\">then</span><br/>          SetEvent<span class=\"br0\">(</span>FDoneEvent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">finally</span><br/>        <span class=\"kw3\">Dispose</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>  WaitForSingleObject<span class=\"br0\">(</span>FTreminateEvent<span class=\"sy1\">,</span> INFINITE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  PrintThread<span class=\"sy1\">:</span> TPrintThread<span class=\"sy1\">;</span><br/>  Queue<span class=\"sy1\">:</span> TThreadQueue<span class=\"sy1\">;</span><br/>  lines<span class=\"sy1\">:</span> TStrings<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  line<span class=\"sy1\">:</span> PLine<span class=\"sy1\">;</span><br/>  TreminateEvent<span class=\"sy1\">,</span> DoneEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Queue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TThreadQueue<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    TreminateEvent <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateEvent<span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"st0\">'TERMINATE_EVENT'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    DoneEvent <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateEvent<span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"st0\">'DONE_EVENT'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">try</span><br/>      PrintThread <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TPrintThread<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>TreminateEvent<span class=\"sy1\">,</span> DoneEvent<span class=\"sy1\">,</span> Queue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      PrintThread<span class=\"sy1\">.</span><span class=\"me1\">Start</span><span class=\"sy1\">;</span><br/>      lines <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">try</span><br/>        lines<span class=\"sy1\">.</span><span class=\"me1\">LoadFromFile</span><span class=\"br0\">(</span><span class=\"st0\">'input.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> lines<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>          <span class=\"kw3\">New</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          line<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          Queue<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">New</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        line<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"re1\">#0</span><span class=\"sy1\">;</span><br/>        Queue<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        WaitForSingleObject<span class=\"br0\">(</span>DoneEvent<span class=\"sy1\">,</span> INFINITE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">New</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        line<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>PrintThread<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        Queue<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        SetEvent<span class=\"br0\">(</span>TreminateEvent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">finally</span><br/>        lines<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">finally</span><br/>      CloseHandle<span class=\"br0\">(</span>TreminateEvent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      CloseHandle<span class=\"br0\">(</span>DoneEvent<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    Readln<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    Queue<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 30, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> printer <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> printer <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> run<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> getCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            return count <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> sender<span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> count <span class=\"sy0\">:=</span> printer <span class=\"sy0\">&lt;-</span> getCount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`$count lines were printed.`</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>line<span class=\"br0\">]</span> <span class=\"sy0\">+</span> rest <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>printer <span class=\"sy0\">&lt;-</span> run<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                sender<span class=\"br0\">(</span>rest<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Stream IO in E is not finished yet, so this example just uses a list.</span><br/>sender<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>file<span class=\"sy0\">:</span>input.<span class=\"me1\">txt</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">getText</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 37, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'sequences<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require 'tasks<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; inter-tasks message\u00a0: (op-code . data)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>message? op message<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">and</span> message <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> op <span class=\"br0\">(</span>first message<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; reader task</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>reader infile <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>wait <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> message <span class=\"br0\">(</span>semaphore<span class=\"sy0\">-</span>pop <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>message? 'count message <span class=\"br0\">)</span> <span class=\"br0\">(</span>writeln 'reader<span class=\"sy0\">-&gt;</span> message<span class=\"br0\">)</span> <span class=\"br0\">(</span>task<span class=\"sy0\">-</span>stop<span class=\"sy0\">-</span>all<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>first infile<span class=\"br0\">)</span> <span class=\"co1\">;; not EOF</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> message <span class=\"br0\">(</span><span class=\"kw1\">cons</span> '<span class=\"kw1\">write</span> <span class=\"br0\">(</span>next infile<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> message <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'reader<span class=\"sy0\">-</span>count<span class=\"sy0\">-</span>please<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>semaphore<span class=\"sy0\">-</span>push <span class=\"kw1\">S</span> message<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>signal <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>\tinfile<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>writer count<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>wait <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> message <span class=\"br0\">(</span>semaphore<span class=\"sy0\">-</span>pop <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>when  <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>message? '<span class=\"kw1\">write</span> message <span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">(</span>writeln <span class=\"br0\">(</span>rest message<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> count <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> message <span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'ack count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>when  <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>message? 'reader<span class=\"sy0\">-</span>count<span class=\"sy0\">-</span>please message <span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">set!</span> message <span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'count count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>semaphore<span class=\"sy0\">-</span>push <span class=\"kw1\">S</span> message<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>signal <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>\tcount<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 31, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def start do<br/>     my_pid = self<br/>     pid = spawn( fn -&gt; reader(my_pid, 0) end )<br/>     File.open( \"input.txt\", [:read], fn io -&gt;<br/>       process( IO.gets(io, \"\"), io, pid )<br/>     end )<br/>  end<br/>\u00a0<br/>  defp process(\u00a0:eof, _io, pid ) do<br/>    send( pid,\u00a0:count )<br/>    receive do<br/>      i -&gt; IO.puts \"Count:#{i}\"<br/>    end<br/>  end<br/>  defp process( any, io, pid ) do<br/>    send( pid, any )<br/>    process( IO.gets(io, \"\"), io, pid )<br/>  end<br/>\u00a0<br/>  defp reader( pid, c ) do<br/>    receive do<br/>     \u00a0:count -&gt; send( pid, c )<br/>      any -&gt;<br/>        IO.write any<br/>        reader( pid, c+1 )<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>RC.start</pre>"}, {"lang": "Erlang", "loc": 27, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>cc<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">reader</span><span class=\"br0\">(</span><span class=\"re5\">My_pid</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">IO</span> <span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">open</span><span class=\"br0\">(</span> <span class=\"st0\">\"input.txt\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>read<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"kw3\">process</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">line</span><span class=\"br0\">(</span><span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">close</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">process</span><span class=\"br0\">(</span> eof<span class=\"sy1\">,</span> <span class=\"re5\">_IO</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> count<span class=\"sy1\">,</span><br/>   <span class=\"kw1\">receive</span><br/>       <span class=\"re5\">I</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Count:~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">I</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">process</span><span class=\"br0\">(</span> <span class=\"re5\">Any</span><span class=\"sy1\">,</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"re5\">Any</span><span class=\"sy1\">,</span><br/>   <span class=\"kw3\">process</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">line</span><span class=\"br0\">(</span><span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">reader</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"kw1\">receive</span><br/>       count <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"re5\">C</span><span class=\"sy1\">;</span><br/>       <span class=\"re5\">Any</span> <span class=\"sy1\">-&gt;</span><br/>           <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Any</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>           <span class=\"re3\">reader</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 58, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> lines<br/><span class=\"kw2\">sequence</span> count<br/>lines <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>count <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> read<span class=\"br0\">(</span><span class=\"kw2\">integer</span> fn<span class=\"br0\">)</span><br/>    <span class=\"kw2\">object</span> line<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        line <span class=\"sy1\">=</span> <span class=\"kw2\">gets</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">else</span><br/>            lines <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>lines<span class=\"sy2\">,</span> line<span class=\"br0\">)</span><br/>            <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    lines <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>lines<span class=\"sy2\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Count:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>count<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> write<span class=\"br0\">(</span><span class=\"kw2\">integer</span> fn<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> n<br/>    <span class=\"kw2\">object</span> line<br/>    n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>        line <span class=\"sy1\">=</span> lines<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        lines <span class=\"sy1\">=</span> lines<span class=\"br0\">[</span><span class=\"nu0\">2</span>..$<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span>fn<span class=\"sy2\">,</span>line<span class=\"br0\">)</span><br/>            n <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    count <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>count<span class=\"sy2\">,</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> fn<br/><span class=\"kw2\">atom</span> reader<span class=\"sy2\">,</span> writer<br/><span class=\"kw1\">constant</span> stdout <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/>reader <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"read\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>fn<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>writer <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"write\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>stdout<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>writer<span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>reader<span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span><span class=\"kw2\">task_list</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "Forth", "loc": 31, "block": "<pre class=\"text highlighted_source\">\\<br/>\\ co.fs\t\tCoroutines by continuations.<br/>\\<br/>\\ * Circular Queue. Capacity is power of 2.<br/>\\<br/>\tVARIABLE HEAD VARIABLE TAIL<br/>\t128 CELLS CONSTANT CQ#<br/>\\ * align by queue capacity<br/>\tHERE DUP<br/>\t\tCQ# 1- INVERT AND CQ# +<br/>\tSWAP - ALLOT<br/>\\\t<br/>\tHERE CQ# ALLOT CONSTANT START<br/>\\<br/>: ADJUST   (  -- )   [ CQ# 1- ]L AND START +\u00a0;<br/>: PUT      ( n-- )   TAIL @ TUCK\u00a0! CELL+ ADJUST TAIL\u00a0!\u00a0;<br/>: TAKE \t   ( --n )   HEAD @ DUP @ SWAP CELL+ ADJUST HEAD\u00a0!\u00a0;<br/>: 0CQ\t   ( --  )   START DUP HEAD\u00a0! TAIL\u00a0!\u00a0; 0CQ<br/>: NOEMPTY? ( --f )   HEAD @ TAIL @ &lt;&gt;\u00a0;<br/>:\u00a0;CO      ( --  )   TAKE &gt;R\u00a0;<br/>\\<br/>\\ * COROUTINES LEXEME<br/>\\<br/>: CO:  ( -- )   R&gt;  PUT\u00a0;\t  \\ Register continuation as coroutine. Exit.<br/>: CO   ( -- )   R&gt;  PUT TAKE &gt;R\u00a0; \\ Co-route.<br/>: GO   ( -- )   BEGIN NOEMPTY? WHILE\u00a0;CO REPEAT\u00a0; \\\u00a0:-)<br/>\\<br/>\\ * CHANNELS LEXEME<br/>\\<br/>: CHAN?  ( a--f )   <a class=\"__cf_email__\" data-cfemail=\"300270\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> XOR\u00a0;<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 31, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Msg <span class=\"sy0\">=</span><br/>    | PrintLine <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><br/>    | GetCount <span class=\"kw1\">of</span> AsyncReplyChannel<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> printer <span class=\"sy0\">=</span><br/>    MailboxProcessor.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> inbox <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop count <span class=\"sy0\">=</span><br/>            <span class=\"kw4\">async</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">let!</span> msg <span class=\"sy0\">=</span> inbox.<span class=\"me1\">Receive</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">match</span> msg <span class=\"kw1\">with</span><br/>                | PrintLine<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>                    printfn <span class=\"st0\">\"%s\"</span> s<br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">!</span> loop <span class=\"br0\">(</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                | GetCount<span class=\"br0\">(</span>reply<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>                    reply.<span class=\"me1\">Reply</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">!</span> loop count<br/>            <span class=\"br0\">}</span><br/>        loop <span class=\"nu0\">0</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> reader <span class=\"br0\">(</span>printAgent:MailboxProcessor<span class=\"sy0\">&lt;</span>Msg<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> file <span class=\"sy0\">=</span><br/>    File.<span class=\"me1\">ReadLines</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> line <span class=\"sy0\">-&gt;</span> PrintLine line <span class=\"sy0\">|&gt;</span> printAgent.<span class=\"me1\">Post</span><span class=\"br0\">)</span><br/>    printAgent.<span class=\"me1\">PostAndReply</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> reply <span class=\"sy0\">-&gt;</span> GetCount<span class=\"br0\">(</span>reply<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"Lines written:\u00a0%i\"</span><br/>\u00a0<br/>reader printer <span class=\"st_h\">@\"c:\\temp\\input.txt\"</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 32, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    lines <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">string</span><span class=\"sy1\">)</span><br/>    count <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> l <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lines <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>l<span class=\"sy1\">)</span><br/>            c<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        count &lt;<span class=\"sy3\">-</span> c<br/>    <span class=\"sy1\">}()</span><br/>\u00a0<br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewScanner<span class=\"sy1\">(</span>f<span class=\"sy1\">);</span> s<span class=\"sy3\">.</span>Scan<span class=\"sy1\">();</span> <span class=\"sy1\">{</span><br/>        lines &lt;<span class=\"sy3\">-</span> s<span class=\"sy3\">.</span>Text<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>    <span class=\"kw3\">close</span><span class=\"sy1\">(</span>lines<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Number of lines:\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">&lt;-</span>count<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<span class=\"sy0\">.</span>MVar<br/>\u00a0<br/>main <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">do</span> lineVar <span class=\"sy0\">&lt;-</span> newEmptyMVar<br/>       countVar <span class=\"sy0\">&lt;-</span> newEmptyMVar<br/>\u00a0<br/>       <span class=\"kw1\">let</span> takeLine  <span class=\"sy0\">=</span> takeMVar lineVar<br/>           putLine   <span class=\"sy0\">=</span> putMVar lineVar <span class=\"sy0\">.</span> Just<br/>           putEOF    <span class=\"sy0\">=</span> putMVar lineVar Nothing<br/>           takeCount <span class=\"sy0\">=</span> takeMVar countVar<br/>           putCount  <span class=\"sy0\">=</span> putMVar countVar<br/>\u00a0<br/>       forkIO <span class=\"sy0\">$</span> writer takeLine putCount<br/>       reader putLine putEOF takeCount</pre>"}, {"lang": "Icon and Unicon", "loc": 19, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    fName <span class=\"sy0\">:=</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">|</span><span class=\"st0\">\"index.txt\"</span><br/>    p <span class=\"sy0\">:=</span> thread produce<span class=\"br0\">(</span>fName<span class=\"br0\">)</span><br/>    c <span class=\"sy0\">:=</span> thread consume<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> wait<span class=\"br0\">(</span>p <span class=\"sy0\">|</span> c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> produce<span class=\"br0\">(</span>fName<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span><span class=\"kw4\">open</span><span class=\"br0\">(</span>fName<span class=\"br0\">)</span><span class=\"sy0\">@&gt;&gt;</span>    <span class=\"co1\"># drop messages in p's outbox (blocking whenever box is full)</span><br/>    <span class=\"sy0\">@&gt;&gt;</span>                      <span class=\"co1\"># Signal consumer that p is done</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"count is \"</span><span class=\"sy0\">,&lt;&lt;@</span><span class=\"br0\">)</span>   <span class=\"co1\"># block until message in p's inbox</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> consume<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">\\&lt;&lt;@</span>p<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+:=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\"># loop until empty message in p's outbox</span><br/>                                   <span class=\"co1\">#    (blocking until each message arrives)</span><br/>    i<span class=\"sy0\">@&gt;&gt;</span>p                          <span class=\"co1\"># put row count into p's inbox</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\">input=: <span class=\"nu0\">1</span>\u00a0:<span class=\"nu0\">0</span><br/>  nlines=: <span class=\"nu0\">0</span><br/>  <span class=\"kw2\">u</span>;.<span class=\"nu0\">_2</span>@fread <span class=\"st_h\">'input.txt'</span><br/>  smoutput nlines<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>output=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  nlines=: nlines+<span class=\"nu0\">1</span><br/>  smoutput <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 53, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.FileReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.atomic.AtomicBoolean</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.atomic.AtomicLong</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.BlockingQueue</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.LinkedBlockingQueue</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> SynchronousConcurrency<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> AtomicLong lineCount <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> AtomicLong<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> BlockingQueue<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> queue <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedBlockingQueue<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> EOF <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a> writerThread <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw4\">long</span> linesWrote <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            <span class=\"kw1\">try</span><br/>            <span class=\"br0\">{</span><br/>              <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">=</span> queue.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              <span class=\"co1\">// Reference equality</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line <span class=\"sy0\">==</span> EOF<span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>              <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              linesWrote<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> ie<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span>  <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>          lineCount.<span class=\"me1\">set</span><span class=\"br0\">(</span>linesWrote<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writerThread.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// No need to start a third thread for the reader, just use this thread</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> br <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>      queue.<span class=\"me1\">put</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    br.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    queue.<span class=\"me1\">put</span><span class=\"br0\">(</span>EOF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writerThread.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// AtomicLong is not needed here due to memory barrier created by thread join, but still need a mutable long since lineCount must be final to access it from an anonymous class</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Line count: \"</span> <span class=\"sy0\">+</span> lineCount.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function inputlines(txtfile, iochannel)<br/>    for line in readlines(txtfile)<br/>        Base.put!(iochannel, line)<br/>    end<br/>    Base.put!(iochannel, nothing)<br/>    println(\"The other task printed $(take!(iochannel)) lines.\")<br/>end<br/>\u00a0<br/>function outputlines(iochannel)<br/>    totallines = 0<br/>    while (line = Base.take!(iochannel))\u00a0!= nothing<br/>        totallines += 1<br/>        println(line)<br/>    end<br/>    Base.put!(iochannel, totallines)<br/>end<br/>\u00a0<br/>c = Channel(0)<br/>@async inputlines(\"filename.txt\", c)<br/>outputlines(c)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">concurrent</span>.<span class=\"me1\">SynchronousQueue</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">concurrent</span>.<span class=\"me1\">thread</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> queue <span class=\"sy0\">=</span> SynchronousQueue<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> EOT <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es3\">\\u0004</span>\"</span>  <span class=\"co1\">// end of transmission</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    thread <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> queue.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>             <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line <span class=\"sy0\">==</span> EOT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                queue.<span class=\"me1\">put</span><span class=\"br0\">(</span>count.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                break<br/>             <span class=\"br0\">}</span><br/>             println<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>             count++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    File<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">forEachLine</span> <span class=\"br0\">{</span> line -<span class=\"sy0\">&gt;</span> queue.<span class=\"me1\">put</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    queue.<span class=\"me1\">put</span><span class=\"br0\">(</span>EOT<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count <span class=\"sy0\">=</span> queue.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Number of lines printed = $count\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 34, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(team).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(start<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    start <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">threaded</span>((<br/>            reader,<br/>            writer(<span class=\"nu0\">0</span>)<br/>        )).<br/>\u00a0<br/>    reader <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">open</span>(<span class=\"st0\">'input.txt'</span>, read, <span class=\"re0\">Stream</span>),<br/>        <span class=\"kw5\">repeat</span>,<br/>            <span class=\"kw4\">read_term</span>(<span class=\"re0\">Stream</span>, <span class=\"re0\">Term</span>, []),<br/>            <span class=\"kw4\">threaded_notify</span>(term(<span class=\"re0\">Term</span>)),<br/>        <span class=\"re0\">Term</span> <span class=\"sy1\">==</span> end_of_file,<br/>        <span class=\"sy1\">!</span>,<br/>        <span class=\"kw4\">close</span>(<span class=\"re0\">Stream</span>),<br/>        <span class=\"kw4\">threaded_wait</span>(lines(<span class=\"re0\">Lines</span>)),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Number of lines: '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Lines</span>), <span class=\"kw5\">nl</span>.<br/>\u00a0<br/>    writer(<span class=\"re0\">N0</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">threaded_wait</span>(term(<span class=\"re0\">Term</span>)),<br/>        (   <span class=\"re0\">Term</span> <span class=\"sy1\">==</span> end_of_file <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw4\">threaded_notify</span>(lines(<span class=\"re0\">N0</span>))<br/>        <span class=\"sy1\">;</span>   <span class=\"re0\">N</span> <span class=\"kw5\">is</span> <span class=\"re0\">N0</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span>,<br/>            <span class=\"kw4\">write</span>(<span class=\"re0\">Term</span>), <span class=\"kw5\">nl</span>,<br/>            writer(<span class=\"re0\">N</span>)<br/>        ).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> ReadFile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> <span class=\"st0\">\"input.txt\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span> fp <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> fp<span class=\"sy0\">:</span>lines<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">coroutine.yield</span><span class=\"br0\">(</span> line <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>co <span class=\"sy0\">=</span> <span class=\"kw3\">coroutine.create</span><span class=\"br0\">(</span> ReadFile <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> status<span class=\"sy0\">,</span> val <span class=\"sy0\">=</span> <span class=\"kw3\">coroutine.resume</span><span class=\"br0\">(</span> co <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">coroutine.status</span><span class=\"br0\">(</span> co <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"dead\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> val <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>  <br/>\u00a0</pre>"}, {"lang": "Mercury", "loc": 59, "block": "<pre class=\"text highlighted_source\">:- module synchronous_concurrency.<br/>:- interface.<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is cc_multi.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list, string, thread, thread.channel, thread.mvar.<br/>\u00a0<br/>:- type line_or_stop<br/>    ---&gt;    line(string)<br/>   \u00a0;       stop.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.open_input(\"input.txt\", Res,\u00a0!IO),<br/>    (<br/>        Res = ok(Input),<br/>        channel.init(Channel,\u00a0!IO),<br/>        mvar.init(MVar,\u00a0!IO),<br/>        thread.spawn(writer(Channel, MVar, 0),\u00a0!IO),<br/>        reader(Input, Channel, MVar,\u00a0!IO)<br/>   \u00a0;<br/>        Res = error(Err),<br/>        io.format(\"Error opening file:\u00a0%s\\n\", [s(io.error_message(Err))],\u00a0!IO)<br/>    ).<br/>\u00a0<br/>:- pred reader(io.text_input_stream::in, channel(line_or_stop)::in, mvar(int)::in,<br/>    io::di, io::uo) is det.<br/>\u00a0<br/>reader(Input, Channel, MVar,\u00a0!IO)\u00a0:-<br/>    io.read_line_as_string(Input, Res,\u00a0!IO),<br/>    (<br/>        Res = ok(Line),<br/>        channel.put(Channel, line(Line),\u00a0!IO),<br/>        reader(Input, Channel, MVar,\u00a0!IO)<br/>   \u00a0;<br/>        Res = eof,<br/>        channel.put(Channel, stop,\u00a0!IO),<br/>        mvar.take(MVar, Count,\u00a0!IO),<br/>        io.format(\"%d lines printed.\\n\", [i(Count)],\u00a0!IO)<br/>   \u00a0;<br/>        Res = error(Err),<br/>        channel.put(Channel, stop,\u00a0!IO),<br/>        io.format(\"Error reading file:\u00a0%s\\n\", [s(io.error_message(Err))],\u00a0!IO)<br/>    ).<br/>\u00a0<br/>:- pred writer(channel(line_or_stop)::in, mvar(int)::in, int::in,<br/>    io::di, io::uo) is cc_multi.<br/>\u00a0<br/>writer(Channel, MVar, Count,\u00a0!IO)\u00a0:-<br/>    channel.take(Channel, LineOrStop,\u00a0!IO),<br/>    (<br/>        LineOrStop = line(Line),<br/>        io.write_string(Line,\u00a0!IO),<br/>        writer(Channel, MVar, Count + 1,\u00a0!IO)<br/>   \u00a0;<br/>        LineOrStop = stop,<br/>        mvar.put(MVar, Count,\u00a0!IO)<br/>    ).</pre>"}, {"lang": "Nim", "loc": 33, "block": "<pre class=\"text highlighted_source\">var msgs: Channel[string]<br/>var count: Channel[int]<br/>\u00a0<br/>const FILE = \"input.txt\"<br/>\u00a0<br/>proc read() {.thread.} =<br/>  var file = open(FILE)<br/>  for line in file.lines:<br/>    msgs.send(line)<br/>  msgs.send(nil)<br/>  file.close()<br/>  echo count.recv()<br/>  count.close()<br/>\u00a0<br/>proc print() {.thread.} =<br/>  var n = 0<br/>  while true:<br/>    var msg = msgs.recv()<br/>    if msg == nil:<br/>      break<br/>    echo msg<br/>    n += 1<br/>  msgs.close()<br/>  count.send(n)<br/>\u00a0<br/>var reader_thread = Thread[void]()<br/>var printer_thread = Thread[void]()<br/>\u00a0<br/>msgs.open()<br/>count.open()<br/>createThread(reader_thread, read)<br/>createThread(printer_thread, print)<br/>joinThreads(reader_thread, printer_thread)</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Event.html\"><span class=\"kw2\">Event</span></a></pre>"}, {"lang": "Oforth", "loc": 16, "block": "<pre class=\"text highlighted_source\">import: parallel<br/>\u00a0<br/>: printing(chPrint, chCount)<br/>  0 while( chPrint receive dup notNull ) [ println 1+ ] drop<br/>  chCount send drop\u00a0;<br/>\u00a0<br/>: concurrentPrint(aFileName)<br/>| chPrint chCount line |<br/>   Channel new -&gt;chPrint<br/>   Channel new -&gt;chCount<br/>\u00a0<br/>   #[ printing(chPrint, chCount) ] &amp;<br/>\u00a0<br/>   aFileName File new forEach: line [ chPrint send(line) drop ]<br/>   chPrint close<br/>   chCount receive \"Number of lines printed\u00a0: \" print println\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 87, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">queue</span> = <span class=\"sy0\">.</span>workqueue~new<br/>input = <span class=\"sy0\">.</span><span class=\"kw6\">stream</span>~new<span class=\"br0\">(</span><span class=\"st0\">\"jabberwocky.txt\"</span><span class=\"br0\">)</span><br/>output = <span class=\"sy0\">.</span>output<br/>\u00a0<br/>reader = <span class=\"sy0\">.</span>filereader~new<span class=\"br0\">(</span>input, <span class=\"kw1\">queue</span><span class=\"br0\">)</span><br/>writer = <span class=\"sy0\">.</span>filewriter~new<span class=\"br0\">(</span>output, <span class=\"kw1\">queue</span><span class=\"br0\">)</span><br/>\u00a0<br/>::class workQueue<br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw1\">queue</span> stopped actionpending<br/>  <span class=\"kw1\">queue</span> = <span class=\"sy0\">.</span><span class=\"kw1\">queue</span>~new<br/>  stopped = <span class=\"sy0\">.</span>false<br/>  actionPending = <span class=\"sy0\">.</span>false<br/>\u00a0<br/><span class=\"co1\">-- add an item to the work queue.  This is a</span><br/><span class=\"co1\">-- guarded method, which means this is a synchronized access</span><br/>::method addItem guarded<br/>  <span class=\"kw1\">expose</span> <span class=\"kw1\">queue</span> actionPending<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> item<br/>  <span class=\"co1\">-- add the item to the queue</span><br/>  <span class=\"kw1\">queue</span>~<span class=\"kw1\">queue</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>  <span class=\"co1\">-- indicate there's something new.  This is a condition variable</span><br/>  <span class=\"co1\">-- that any will wake up any thread that's waiting on access.  They'll</span><br/>  <span class=\"co1\">-- be able to get access once we exit</span><br/>  actionPending = <span class=\"sy0\">.</span>true<br/>\u00a0<br/><span class=\"co1\">-- another method for coordinating access with the other thread.  This indicates</span><br/><span class=\"co1\">-- it is time to shut down</span><br/>::method stop guarded<br/>  <span class=\"kw1\">expose</span> actionPending stopped<br/>  <span class=\"co1\">-- indicate this has been stopped and also flip the condition variable to</span><br/>  <span class=\"co1\">-- wake up any waiters</span><br/>  stopped = <span class=\"sy0\">.</span>true<br/>  actionPending = <span class=\"sy0\">.</span>true<br/>\u00a0<br/><span class=\"co1\">-- read the next item off of the queue.  .nil indicates we've reached</span><br/><span class=\"co1\">-- the last item on the queue.  This is also a guarded method, but we'll use</span><br/><span class=\"co1\">-- the GUARD ON instruction to wait for work if the queue is currently empty</span><br/>::method nextItem<br/>  <span class=\"kw1\">expose</span> <span class=\"kw1\">queue</span> stopped actionPending<br/>  <span class=\"co1\">-- we might need to loop a little to get an item</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span><br/>    <span class=\"co1\">-- if there's something on the queue, pull the front item and return</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw1\">queue</span>~isEmpty <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">queue</span>~<span class=\"kw1\">pull</span><br/>    <span class=\"co1\">-- if the other thread says it is done sending is stuff, time to shut down</span><br/>    <span class=\"kw1\">if</span> stopped <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>nil<br/>    <span class=\"co1\">-- nothing on the queue, not stopped yet, so release the guard and wait until</span><br/>    <span class=\"co1\">-- there's something pending to work on.</span><br/>    <span class=\"kw1\">guard</span> <span class=\"kw2\">on</span> <span class=\"kw3\">when</span> actionPending<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- one half of the synchronization effort.  This will read lines and</span><br/><span class=\"co1\">-- add them to the work queue.  The thread will terminate once we hit end-of-file</span><br/>::class filereader<br/>::method init<br/>  <span class=\"co1\">-- accept a generic stream...the data source need not be a file</span><br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">stream</span>, <span class=\"kw1\">queue</span><br/>\u00a0<br/>  <span class=\"kw1\">reply</span>   <span class=\"co1\">-- now multithreaded</span><br/>\u00a0<br/>  <span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> notready<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">forever</span><br/>     <span class=\"kw1\">queue</span>~addItem<span class=\"br0\">(</span><span class=\"kw6\">stream</span>~<span class=\"kw2\">linein</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- we come here on an EOF condition.  Indicate we're done and terminate</span><br/>  <span class=\"co1\">-- the thread</span><br/>  notready:<br/>  <span class=\"kw1\">queue</span>~stop<br/>\u00a0<br/><span class=\"co1\">-- the other end of this.  This class will read lines from a work queue</span><br/><span class=\"co1\">-- and write it to a stream</span><br/>::class filewriter<br/>::method init<br/>  <span class=\"co1\">-- accept a generic stream...the data source need not be a file</span><br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">stream</span>, <span class=\"kw1\">queue</span><br/>\u00a0<br/>  <span class=\"kw1\">reply</span>   <span class=\"co1\">-- now multithreaded</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">forever</span><br/>     item = <span class=\"kw1\">queue</span>~nextItem<br/>     <span class=\"co1\">-- .nil means last item received</span><br/>     <span class=\"kw1\">if</span> item == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>     <span class=\"co1\">-- write to the stream</span><br/>     <span class=\"kw6\">stream</span>~<span class=\"kw6\">lineout</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 49, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% Helper function to read a file lazily.</span><br/>  <span class=\"co1\">%% Returns a lazy list of lines.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ReadLines</span> FN<span class=\"br0\">}</span><br/>     F = <span class=\"br0\">{</span>New <span class=\"kw1\">class</span> <span class=\"re2\">$</span> <span class=\"kw1\">from</span> Open<span class=\"sy0\">.</span>file Open<span class=\"sy0\">.</span>text <span class=\"kw1\">end</span> init<span class=\"br0\">(</span>name:FN<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">ReadNext</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">case</span> <span class=\"br0\">{</span>F getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">of</span><br/>           <span class=\"kw1\">false</span> <span class=\"kw1\">then</span> nil<br/>        <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> Line <span class=\"kw1\">then</span><br/>           Line<span class=\"sy0\">|</span><span class=\"br0\">{</span>ReadNext<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"co1\">%% close file when handle becomes unreachable</span><br/>     <span class=\"br0\">{</span>Finalize<span class=\"sy0\">.</span>register F <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> F<span class=\"br0\">}</span> <span class=\"br0\">{</span>F close<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>ReadNext<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Count <span class=\"co1\">%% Will receive the number of lines</span><br/>  PrinterPort<br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% Printer thread</span><br/>  <span class=\"kw1\">thread</span><br/>     Stream<br/>     Counter = <span class=\"br0\">{</span>NewCell 0<span class=\"br0\">}</span> <span class=\"co1\">%% mutable variable</span><br/>  <span class=\"kw1\">in</span><br/>     PrinterPort = <span class=\"br0\">{</span>NewPort\u00a0?Stream<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> Line <span class=\"kw1\">in</span> Stream <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">case</span> Line <span class=\"kw1\">of</span> eof <span class=\"kw1\">then</span><br/>           Count = <span class=\"sy0\">@</span>Counter<br/>        <span class=\"kw1\">else</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo Line<span class=\"br0\">}</span><br/>           Counter <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>Counter <span class=\"sy0\">+</span> 1<br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Send all lines to printer thread; make sure that eof is sent.</span><br/>  <span class=\"kw1\">try</span><br/>     <span class=\"kw1\">for</span> Line <span class=\"kw1\">in</span> <span class=\"br0\">{</span>ReadLines <span class=\"st0\">\"input.txt\"</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span>Send PrinterPort Line<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">finally</span><br/>     <span class=\"br0\">{</span>Send PrinterPort eof<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Sync on Count and print its value.</span><br/>  <span class=\"br0\">{</span>Wait Count<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show Count<span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 33, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> threads<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Thread<span class=\"sy0\">::</span><span class=\"me2\">Queue</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$q1</span> <span class=\"sy0\">=</span> Thread<span class=\"sy0\">::</span><span class=\"me2\">Queue</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$q2</span> <span class=\"sy0\">=</span> Thread<span class=\"sy0\">::</span><span class=\"me2\">Queue</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$reader</span> <span class=\"sy0\">=</span> threads<span class=\"sy0\">-&gt;</span><span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$q1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$q2</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>     <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> <span class=\"kw1\">my</span> <span class=\"re0\">$fh</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'input.txt'</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$q1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">enqueue</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"sy0\">&lt;</span><span class=\"re0\">$fh</span><span class=\"sy0\">&gt;;</span><br/>     <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$fh</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$q1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">enqueue</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$q2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dequeue</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$q1</span><span class=\"sy0\">,</span> <span class=\"re0\">$q2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$printer</span> <span class=\"sy0\">=</span> threads<span class=\"sy0\">-&gt;</span><span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$q1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$q2</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$line</span> <span class=\"sy0\">=</span> <span class=\"re0\">$q1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dequeue</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$line</span><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$count</span><span class=\"sy0\">++;</span><br/>     <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"re0\">$q2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">enqueue</span><span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$q1</span><span class=\"sy0\">,</span> <span class=\"re0\">$q2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$reader</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"sy0\">;</span><br/><span class=\"re0\">$printer</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$infile</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$infile</span><span class=\"sy0\">.</span><span class=\"me1\">IO</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span> <span class=\"sy0\">==&gt;</span> printer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==&gt;</span> <span class=\"kw1\">my</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"printed $count lines\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> printer<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@lines</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$lines</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@lines</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">++</span><span class=\"re0\">$lines</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$lines</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 51, "block": "<pre class=\"text highlighted_source\">atom frThread,  -- file reader thread<br/>     lcThread   -- line counter thread<br/>\u00a0<br/>sequence queue = {}<br/>integer qlock = init_cs()<br/>\u00a0<br/>integer linecount = 1<br/>\u00a0<br/>procedure readfile()<br/>object line<br/>integer fn = open(\"input.txt\",\"r\")<br/>    while 1 do<br/>        line = gets(fn)<br/>        enter_cs(qlock)<br/>        queue = append(queue,line)<br/>        line = atom(line)   -- kill refcount!<br/>        leave_cs(qlock)<br/>        if line then exit end if<br/>    end while<br/>    close(fn)<br/>    wait_thread(lcThread)<br/>    printf(1,\"Lines read:\u00a0%d\\n\",linecount)<br/>    exit_thread(0)<br/>end procedure<br/>\u00a0<br/>procedure countlines()<br/>object line<br/>    linecount = 0<br/>    while 1 do<br/>        enter_cs(qlock)<br/>        if length(queue)=0 then<br/>            leave_cs(qlock)<br/>--          sleep(0.1)<br/>        else<br/>            line = queue[1]<br/>            queue = queue[2..$]<br/>            leave_cs(qlock)<br/>            if atom(line) then exit end if<br/>--         \u00a0?line<br/>            linecount += 1<br/>        end if<br/>    end while<br/>    exit_thread(0)<br/>end procedure<br/>\u00a0<br/>frThread = create_thread(routine_id(\"readfile\"),{})<br/>lcThread = create_thread(routine_id(\"countlines\"),{})<br/>\u00a0<br/>wait_thread(frThread)<br/>puts(1,\"done\")<br/>{} = wait_key()</pre>"}, {"lang": "PicoLisp", "loc": 21, "block": "<pre class=\"text highlighted_source\"># Reading task (synchronous)<br/>(task (open \"input.txt\")<br/>   (let Fd @<br/>      (if (in Fd (line T))             # More lines?<br/>         (udp \"localhost\" 4444 @)      # Yes: Send next line<br/>         (task (port T 4445)           # Else install handler<br/>            (prinl (udp @) \" lines\")   # to receive and print count<br/>            (task (close @)) )<br/>         (udp \"localhost\" 4444 T)      # Send 'T' for \"Done\"<br/>         (task (close Fd)) ) ) )       # Stop the task<br/>\u00a0<br/># Printing task (asynchronous)<br/>(sigio (setq \"Sock\" (port T 4444))<br/>   (job '((Cnt . 0))<br/>      (let? X (udp \"Sock\")<br/>         (if (=T X)                    # Done?<br/>            (prog<br/>               (udp \"localhost\" 4445 Cnt) # Yes: Send count<br/>               (sigio (close \"Sock\")) )   # and stop the task<br/>            (println X)                # Else print line to stdout<br/>            (inc 'Cnt) ) ) ) )         # and increment count</pre>"}, {"lang": "Pony", "loc": 31, "block": "<pre class=\"text highlighted_source\">use \"files\"<br/>\u00a0<br/>actor Main<br/>  let _env: Env // The environment contains stdout, so we save it here<br/>\u00a0<br/>  new create(env: Env) =&gt;<br/>    _env = env<br/>    let printer: Printer tag = Printer(env)<br/>    try<br/>      let path = FilePath(env.root as AmbientAuth, \"input.txt\")? // this may fail, hence the\u00a0?<br/>      let file = File.open(path)<br/>      for line in FileLines(file) do <br/>        printer(line) // sugar for \"printer.apply(line)\"<br/>      end<br/>    end<br/>    printer.done(this)<br/>\u00a0<br/>  be finish(count: USize) =&gt;<br/>    _env.out.print(\"Printed: \" + count.string() + \" lines\")<br/>\u00a0<br/>\u00a0<br/>actor Printer<br/>  let _env: Env<br/>  var _count: USize = 0<br/>  new create(env: Env) =&gt; _env = env<br/>\u00a0<br/>  be apply(line: String) =&gt;<br/>    _count = _count + 1<br/>    _env.out.print(line)<br/>\u00a0<br/>  be done(main: Main tag) =&gt; main.finish(_count)</pre>"}, {"lang": "PureBasic", "loc": 45, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Enumeration</span> <br/>  #Write<br/>  #Done<br/><span class=\"kw1\">EndEnumeration</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> commblock<br/>  txtline.s<br/>  Order.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Global</span> MessageSent<span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Global</span> LineWritten<span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Global</span> LinesWritten, com.commblock<br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Writer<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span> <br/>    WaitSemaphore<span class=\"br0\">(</span>MessageSent<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> com<span class=\"sy0\">\\</span>Order<span class=\"sy0\">=</span>#Write<br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>com<span class=\"sy0\">\\</span>txtline<span class=\"br0\">)</span><br/>      LinesWritten<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    SignalSemaphore<span class=\"br0\">(</span>LineWritten<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Until</span> com<span class=\"sy0\">\\</span>Order<span class=\"sy0\">=</span>#Done<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Reader<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> File<span class=\"sy0\">=</span><span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span>#PB_Any,<span class=\"kw2\">OpenFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"input.txt\"</span>,<span class=\"st0\">\"\"</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> file <span class=\"kw1\">And</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>    com<span class=\"sy0\">\\</span>txtline<span class=\"sy0\">=</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span>File<span class=\"br0\">)</span><br/>    com<span class=\"sy0\">\\</span>Order<span class=\"sy0\">=</span>#Write<br/>    SignalSemaphore<span class=\"br0\">(</span>MessageSent<span class=\"br0\">)</span><br/>    WaitSemaphore<span class=\"br0\">(</span>LineWritten<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  com<span class=\"sy0\">\\</span>Order<span class=\"sy0\">=</span>#Done<br/>  SignalSemaphore<span class=\"br0\">(</span>MessageSent<span class=\"br0\">)</span><br/>  WaitSemaphore<span class=\"br0\">(</span>LineWritten<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>LinesWritten<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" lines written.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Thread1<span class=\"sy0\">=</span><span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@Reader<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Thread2<span class=\"sy0\">=</span><span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@Writer<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">WaitThread</span><span class=\"br0\">(</span>Thread1<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"kw2\">WaitThread</span><span class=\"br0\">(</span>Thread2<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press Enter to exit\"</span><span class=\"br0\">)</span>:<span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 31, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">Queue</span> <span class=\"kw1\">import</span> <span class=\"kw3\">Queue</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">threading</span> <span class=\"kw1\">import</span> Thread<br/>\u00a0<br/>lines <span class=\"sy0\">=</span> <span class=\"kw3\">Queue</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>count <span class=\"sy0\">=</span> <span class=\"kw3\">Queue</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> read<span class=\"br0\">(</span><span class=\"kw2\">file</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> <span class=\"kw2\">file</span>:<br/>            lines.<span class=\"me1\">put</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>    <span class=\"kw1\">finally</span>:<br/>        lines.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"kw2\">None</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> count.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> write<span class=\"br0\">(</span><span class=\"kw2\">file</span><span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>        line <span class=\"sy0\">=</span> lines.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> line <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw2\">file</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        n +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    count.<span class=\"me1\">put</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>reader <span class=\"sy0\">=</span> Thread<span class=\"br0\">(</span>target<span class=\"sy0\">=</span>read<span class=\"sy0\">,</span> args<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'input.txt'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>writer <span class=\"sy0\">=</span> Thread<span class=\"br0\">(</span>target<span class=\"sy0\">=</span>write<span class=\"sy0\">,</span> args<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">stdout</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>reader.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>writer.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>reader.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>writer.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define reader-&gt;printer-channel (make-channel))<br/>(define printer-&gt;reader-channel (make-channel))<br/>\u00a0<br/>(define (sync-line-counter filename)<br/>  (define (reader)<br/>    (define file-port (open-input-file filename))<br/>    (let loop ([line (read-line file-port)])<br/>      (when (not (eof-object? line))<br/>        (begin<br/>          (channel-put reader-&gt;printer-channel line)<br/>          (loop (read-line file-port)))))<br/>    (channel-put reader-&gt;printer-channel eof)<br/>    (let ([num-lines (channel-get printer-&gt;reader-channel)])<br/>      (printf \"Number of lines printed = ~a~%\" num-lines)))<br/>\u00a0<br/>  (define (printer)<br/>    (define count 0)<br/>    (let loop ([line (channel-get reader-&gt;printer-channel)])<br/>      (when (not (eof-object? line))<br/>        (begin<br/>          (printf \"~a~%\" line)<br/>          (set! count (add1 count))<br/>          (loop (channel-get reader-&gt;printer-channel)))))<br/>    (channel-put printer-&gt;reader-channel count))<br/>\u00a0<br/>  (thread reader)<br/>  (thread printer))<br/>\u00a0<br/>(sync-line-counter \"input.txt\")<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 28, "block": "<pre class=\"text highlighted_source\">'input.txt' as src_file<br/>\u00a0<br/>class Queue<br/>\u00a0<br/>    new list  as items<br/>    condition as ready<br/>\u00a0<br/>    define item_put<br/>        items push ready notify<br/>\u00a0<br/>    define item_get<br/>        items empty if ready wait<br/>        items shift<br/>\u00a0<br/>Queue as lines<br/>Queue as count<br/>\u00a0<br/>thread reader<br/>    \"file://r:%(src_file)s\" open each lines.item_put<br/>    NULL lines.item_put count.item_get \"reader:\u00a0%d\\n\" print<br/>\u00a0<br/>thread writer<br/>    0 repeat lines.item_get dup while<br/>        \"writer:\u00a0%s\" print 1+<br/>    drop count.item_put<br/>\u00a0<br/>reader as r<br/>writer as w</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">count = <span class=\"nu0\">0</span><br/><span class=\"kw4\">IO</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> line; count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Printed #{count} lines.\"</span></pre>"}, {"lang": "Rust", "loc": 44, "block": "<pre class=\"text highlighted_source\">use std::fs::File;<br/>use std::io::BufReader;<br/>use std::io::BufRead;<br/>\u00a0<br/>use std::thread::spawn;<br/>use std::sync::mpsc::{SyncSender, Receiver, sync_channel};<br/>\u00a0<br/>fn main() {<br/>    let (tx, rx): (SyncSender&lt;String&gt;, Receiver&lt;String&gt;) = sync_channel::&lt;String&gt;(0);<br/>\u00a0<br/>    // Reader thread.<br/>    spawn(move || {<br/>        let file = File::open(\"input.txt\").unwrap();<br/>        let reader = BufReader::new(file);<br/>\u00a0<br/>        for line in reader.lines() {<br/>            match line {<br/>                Ok(msg) =&gt; tx.send(msg).unwrap(),<br/>                Err(e) =&gt; println!(\"{}\", e)<br/>            }<br/>        }<br/>\u00a0<br/>        drop(tx);<br/>    });<br/>\u00a0<br/>    // Writer thread.<br/>    spawn(move || {<br/>        let mut loop_count: u16 = 0;<br/>\u00a0<br/>        loop {<br/>            let recvd = rx.recv();<br/>\u00a0<br/>            match recvd {<br/>                Ok(msg) =&gt; {<br/>                    println!(\"{}\", msg);<br/>                    loop_count += 1;<br/>                },<br/>                Err(_) =&gt; break // rx.recv() will only err when tx is closed.<br/>            }<br/>        }<br/>\u00a0<br/>        println!(\"Line count: {}\", loop_count);<br/>    }).join().unwrap();<br/>}</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> HowMany<span class=\"br0\">(</span>asker<span class=\"sy0\">:</span> Actor<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> printer <span class=\"sy0\">=</span> actor <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    receive <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> line<span class=\"sy0\">:</span> String <span class=\"sy0\">=&gt;</span><br/>        print<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span> count <span class=\"sy0\">=</span> count + <span class=\"nu0\">1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> HowMany<span class=\"br0\">(</span>asker<span class=\"sy0\">:</span> Actor<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> asker <span class=\"sy0\">!</span> count<span class=\"sy0\">;</span> exit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> reader<span class=\"br0\">(</span>printer<span class=\"sy0\">:</span> Actor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span><span class=\"st0\">\"c:<span class=\"es1\">\\\\</span>input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span> foreach <span class=\"br0\">{</span> printer <span class=\"sy0\">!</span> <span class=\"sy0\">_</span> <span class=\"br0\">}</span><br/>  printer <span class=\"sy0\">!</span> HowMany<span class=\"br0\">(</span><br/>    actor <span class=\"br0\">{</span><br/>      receive <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> count<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"line count = \"</span> + count<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>reader<span class=\"br0\">(</span>printer<span class=\"br0\">)</span></pre>"}, {"lang": "Swift", "loc": 44, "block": "<pre class=\"text highlighted_source\">//<br/>//  Reader.swift<br/>//<br/>\u00a0<br/>import Foundation<br/>\u00a0<br/>class Reader: NSObject {<br/>    let inputPath = \"~/Desktop/input.txt\".stringByExpandingTildeInPath<br/>    var gotNumberOfLines = false<br/>\u00a0<br/>    override init() {<br/>        super.init()<br/>        NSNotificationCenter.defaultCenter().addObserver(self, selector: \"linesPrinted:\",<br/>            name: \"LinesPrinted\", object: nil)<br/>    }<br/>\u00a0<br/>    deinit {<br/>        NSNotificationCenter.defaultCenter().removeObserver(self)<br/>    }<br/>\u00a0<br/>    // Selector for the number of lines printed<br/>    func linesPrinted(not:NSNotification) {<br/>        println(not.object!)<br/>        self.gotNumberOfLines = true<br/>        exit(0)<br/>    }<br/>\u00a0<br/>    func readFile() {<br/>        var err:NSError?<br/>        let fileString = NSString(contentsOfFile: self.inputPath,<br/>            encoding: NSUTF8StringEncoding, error: &amp;err)<br/>\u00a0<br/>        if let lines = fileString?.componentsSeparatedByString(\"\\n\") {<br/>            for line in lines {<br/>                NSNotificationCenter.defaultCenter().postNotificationName(\"Line\", object: line)<br/>            }<br/>            NSNotificationCenter.defaultCenter().postNotificationName(\"LineNumberRequest\", object: nil)<br/>\u00a0<br/>            while\u00a0!self.gotNumberOfLines {<br/>                sleep(1 as UInt32)<br/>            }<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "SystemVerilog", "loc": 37, "block": "<pre class=\"systemverilog highlighted_source\"><span class=\"kw4\">program</span> main<span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw7\">mailbox</span><span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"kw5\">bit</span><span class=\"br0\">)</span> p2c_cmd <span class=\"sy0\">=</span> <span class=\"kw3\">new</span><span class=\"sy0\">;</span><br/> <span class=\"kw7\">mailbox</span><span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"kw5\">string</span><span class=\"br0\">)</span> p2c_data <span class=\"sy0\">=</span> <span class=\"kw3\">new</span><span class=\"sy0\">;</span><br/> <span class=\"kw7\">mailbox</span><span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"kw5\">int</span><span class=\"br0\">)</span> c2p_data <span class=\"sy0\">=</span> <span class=\"kw3\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw4\">initial</span> <span class=\"kw4\">begin</span><br/>   <span class=\"kw5\">int</span> fh <span class=\"sy0\">=</span> $fopen<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw5\">string</span> line<span class=\"sy0\">;</span><br/>   <span class=\"kw5\">int</span> count<span class=\"sy0\">;</span><br/>   <span class=\"kw3\">while</span> <span class=\"br0\">(</span>$fgets<span class=\"br0\">(</span>line<span class=\"sy0\">,</span> fh<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>     p2c_cmd.<span class=\"kw7\">put</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     p2c_data.<span class=\"kw7\">put</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">end</span><br/>   p2c_cmd.<span class=\"kw7\">put</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c2p_data.<span class=\"kw7\">get</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   $display<span class=\"br0\">(</span> <span class=\"st0\">\"COUNT:\u00a0%0d\"</span><span class=\"sy0\">,</span> count <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">end</span><br/>\u00a0<br/> <span class=\"kw4\">initial</span> <span class=\"kw4\">begin</span><br/>   <span class=\"kw5\">bit</span> done<span class=\"sy0\">;</span><br/>   <span class=\"kw5\">int</span> count<span class=\"sy0\">;</span><br/>   <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>done<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>     p2c_cmd.<span class=\"kw7\">get</span><span class=\"br0\">(</span>done<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw3\">if</span> <span class=\"br0\">(</span>done<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>       c2p_data.<span class=\"kw7\">put</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw4\">end</span><br/>     <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>       <span class=\"kw5\">string</span> line<span class=\"sy0\">;</span><br/>       p2c_data.<span class=\"kw7\">get</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       $display<span class=\"br0\">(</span> <span class=\"st0\">\"LINE:\u00a0%s\"</span><span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       count<span class=\"sy0\">++;</span><br/>     <span class=\"kw4\">end</span><br/>   <span class=\"kw4\">end</span><br/> <span class=\"kw4\">end</span><br/>\u00a0<br/><span class=\"kw4\">endprogram</span></pre>"}, {"lang": "Tcl", "loc": 28, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Thread<br/>\u00a0<br/><span class=\"co1\"># Define the input thread</span><br/><span class=\"kw1\">set</span> input <span class=\"br0\">[</span>thread::<span class=\"me1\">create</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">proc</span> readFile <span class=\"br0\">{</span><span class=\"kw3\">filename</span> receiver<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$f</span> line<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    thread::<span class=\"me1\">send</span> <span class=\"re0\">$receiver</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> line <span class=\"re0\">$line</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>\tthread::<span class=\"me1\">send</span> <span class=\"re0\">$receiver</span> lineCount lines<br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"got $lines lines\"</span><br/>    <span class=\"br0\">}</span><br/>    thread::<span class=\"me1\">wait</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Define the output thread</span><br/><span class=\"kw1\">set</span> output <span class=\"br0\">[</span>thread::<span class=\"me1\">create</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> lines <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">proc</span> line <span class=\"br0\">{</span><span class=\"kw2\">string</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"re0\">$string</span><br/>\t<span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">lines</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> lineCount <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"sy0\">$</span>::<span class=\"me1\">lines</span><span class=\"br0\">}</span><br/>    thread::<span class=\"me1\">wait</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Connect everything together and start the processing</span><br/>thread::<span class=\"me1\">send</span> <span class=\"re0\">$input</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> readFile <span class=\"st0\">\"input.txt\"</span> <span class=\"re0\">$output</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 33, "block": "<pre class=\"text highlighted_source\">(defstruct thread nil<br/>  suspended<br/>  cont<br/>  (:method resume (self)<br/>    [self.cont])<br/>  (:method give (self item)<br/>    [self.cont item])<br/>  (:method get (self)<br/>    (yield-from run nil))<br/>  (:method start (self)<br/>    (set self.cont (obtain self.(run)))<br/>    (unless self.suspended<br/>      self.(resume)))<br/>  (:postinit (self)<br/>    self.(start)))<br/>\u00a0<br/>(defstruct consumer thread<br/>  (count 0)<br/>  (:method run (self)<br/>    (whilet ((item self.(get)))<br/>      (prinl item)<br/>      (inc self.count))))<br/>\u00a0<br/>(defstruct producer thread<br/>  consumer<br/>  (:method run (self)<br/>    (whilet ((line (get-line)))<br/>      self.consumer.(give line))))<br/>\u00a0<br/>(let* ((con (new consumer))<br/>       (pro (new producer suspended t consumer con)))<br/>  pro.(resume)<br/>  (put-line `count = @{con.count}`))</pre>"}, {"lang": "UnixPipes", "loc": 2, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">rm</span> <span class=\"re5\">-f</span> node\u00a0; <span class=\"kw2\">mkfifo</span> node<br/><span class=\"kw2\">cat</span> <span class=\"kw2\">file</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tee</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw2\">wc</span> <span class=\"re5\">-l</span> <span class=\"sy0\">&gt;</span> node <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw2\">cat</span> - node</pre>"}, {"lang": "Visual Basic .NET", "loc": 65, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Threading</span><br/>\u00a0<br/><span class=\"kw1\">Module</span> Module1<br/>\u00a0<br/>   <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> t1 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Thread<span class=\"br0\">(</span><span class=\"kw1\">AddressOf</span> Reader<span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> t2 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Thread<span class=\"br0\">(</span><span class=\"kw1\">AddressOf</span> Writer<span class=\"br0\">)</span><br/>       t1<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       t2<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       t1<span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=JOIN+site:msdn.microsoft.com\"><span class=\"kw7\">Join</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       t2<span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=JOIN+site:msdn.microsoft.com\"><span class=\"kw7\">Join</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Sub</span> Reader<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> line <span class=\"kw1\">In</span> IO<span class=\"sy0\">.</span><span class=\"me1\">File</span><span class=\"sy0\">.</span><span class=\"me1\">ReadAllLines</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><br/>           m_WriterQueue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>       <span class=\"kw1\">Next</span><br/>       m_WriterQueue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span><span class=\"kw1\">Nothing</span><span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>       <span class=\"kw1\">Do</span> Until m_ReaderQueue<span class=\"sy0\">.</span><span class=\"me1\">TryDequeue</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>           Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Loop</span><br/>\u00a0<br/>       Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Sub</span> Writer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">Dim</span> line <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>       <span class=\"kw1\">Do</span><br/>           <span class=\"kw1\">Do</span> Until m_WriterQueue<span class=\"sy0\">.</span><span class=\"me1\">TryDequeue</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>               Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">Loop</span><br/>           <span class=\"kw1\">If</span> line <span class=\"kw1\">IsNot</span> <span class=\"kw1\">Nothing</span> <span class=\"kw1\">Then</span><br/>               Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>               count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw1\">Else</span><br/>               m_ReaderQueue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>               <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>           <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>       <span class=\"kw1\">Loop</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Private</span> m_WriterQueue <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SafeQueue<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Private</span> m_ReaderQueue <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SafeQueue<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span><br/>\u00a0<br/><span class=\"kw1\">Class</span> SafeQueue<span class=\"br0\">(</span><span class=\"kw1\">Of</span> T<span class=\"br0\">)</span><br/>   <span class=\"kw1\">Private</span> m_list <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Queue<span class=\"br0\">(</span><span class=\"kw1\">Of</span> T<span class=\"br0\">)</span><br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Function</span> TryDequeue<span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> result <span class=\"kw1\">As</span> T<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span><br/>       <span class=\"kw1\">SyncLock</span> m_list<br/>           <span class=\"kw1\">If</span> m_list<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>           result <span class=\"sy0\">=</span> m_list<span class=\"sy0\">.</span><span class=\"me1\">Dequeue</span><br/>           <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">SyncLock</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> Enqueue<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> value <span class=\"kw1\">As</span> T<span class=\"br0\">)</span><br/>       <span class=\"kw1\">SyncLock</span> m_list<br/>           m_list<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">SyncLock</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span></pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">fcn reader(fileName,out){<br/>   n:=0; foreach line in (File(fileName)) { out.write(line); n+=1; }<br/>   out.close();\t// signal done<br/>   Atomic.waitFor(out.Property(\"isOpen\")); // wait for other thread to reopen Pipe<br/>   out.write(n);<br/>}<br/>fcn writer(in){<br/>   Utils.zipWith(fcn(n,line){ \"%3d:\u00a0%s\".fmt(n,line).print() },[1..],in);<br/>   in.open();  // signal other thread to send num lines read<br/>   println(\"Other thread read \",in.read(),\" lines\");<br/>}<br/>\u00a0<br/>p:=Thread.Pipe();  // NOT Unix pipes, thread safe channel between threads<br/>reader.launch(\"input.txt\",p);<br/>writer.future(p).noop();  // noop forces eval, ie sleep until writer finished</pre>"}]}