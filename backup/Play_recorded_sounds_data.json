{"task": "Play_recorded_sounds", "blocks": [{"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SoundPlay.htm\"><span class=\"kw3\">SoundPlay</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_WinDir%</span>\\Media\\tada<span class=\"sy0\">.</span>wav<span class=\"sy0\">,</span> wait<br/><a href=\"http://www.autohotkey.com/docs/commands/SoundPlay.htm\"><span class=\"kw3\">SoundPlay</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_WinDir%</span>\\Media\\Windows XP Startup<span class=\"sy0\">.</span>wav<span class=\"sy0\">,</span> wait<br/>\u00a0<br/><span class=\"co1\">; simulaneous play may require a second script</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/SoundPlay.htm\"><span class=\"kw3\">SoundPlay</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_WinDir%</span>\\Media\\tada<span class=\"sy0\">.</span>wav<br/><a href=\"http://www.autohotkey.com/docs/commands/SoundPlay.htm\"><span class=\"kw3\">SoundPlay</span></a><span class=\"sy0\">,</span> Nonexistent  <span class=\"co1\">; stop before finishing</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/SoundSet.htm\"><span class=\"kw3\">SoundSet</span></a> <span class=\"sy0\">+</span><span class=\"nu0\">10</span>  <span class=\"co1\">; increase volume by 10%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/SoundPlay.htm\"><span class=\"kw3\">SoundPlay</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_WinDir%</span>\\Media\\tada<span class=\"sy0\">.</span>wav<span class=\"sy0\">,</span> wait</pre>"}, {"lang": "Batch File", "loc": 1, "block": "<pre> @echo off\n\u00a0:main\n cls\n echo Drag a .wav file there and press enter\n set /p file1=\n sndrec32 /embedding /play /close\u00a0%file1%\n cls\n echo Drag a second .wav file and both will play together\n set /p file2=\n sndrec32 /embedding /play /close\u00a0%file1% | sndrec32 /embedding /play /close\u00a0%file2%\n echo Thanks\n pause&gt;nul\n exit\n</pre>"}, {"lang": "BBC BASIC", "loc": 41, "block": "<pre class=\"text highlighted_source\">      SND_LOOP = 8<br/>      SND_ASYNC = 1<br/>      SND_FILENAME = &amp;20000<br/>\u00a0<br/>      PRINT \"Playing a MIDI file...\"<br/>      *PLAY C:\\windows\\media\\canyon.mid<br/>\u00a0<br/>      WAIT 300<br/>      PRINT \"Playing the Windows TADA sound quietly...\"<br/>      wave$ = \"\\windows\\media\\tada.wav\"<br/>      volume% = 10000<br/>      SYS \"waveOutSetVolume\", -1, volume% + (volume% &lt;&lt; 16)<br/>      SYS \"PlaySound\", wave$, 0, SND_FILENAME + SND_ASYNC<br/>\u00a0<br/>      WAIT 300<br/>      PRINT \"Playing the Windows TADA sound loudly on the left channel...\"<br/>      volume% = 65535<br/>      SYS \"waveOutSetVolume\", -1, volume%<br/>      SYS \"PlaySound\", wave$, 0, SND_FILENAME + SND_ASYNC<br/>\u00a0<br/>      WAIT 300<br/>      PRINT \"Playing the Windows TADA sound loudly on the right channel...\"<br/>      volume% = 65535<br/>      SYS \"waveOutSetVolume\", -1, volume% &lt;&lt; 16<br/>      SYS \"PlaySound\", wave$, 0, SND_FILENAME + SND_ASYNC<br/>\u00a0<br/>      WAIT 300<br/>      PRINT \"Looping the Windows TADA sound on both channels...\"<br/>      volume% = 65535<br/>      SYS \"waveOutSetVolume\", -1, volume% + (volume% &lt;&lt; 16)<br/>      SYS \"PlaySound\", wave$, 0, SND_FILENAME + SND_ASYNC + SND_LOOP<br/>\u00a0<br/>      WAIT 300<br/>      SYS \"PlaySound\", 0, 0, 0<br/>      PRINT \"Stopped looping...\"<br/>\u00a0<br/>      WAIT 300<br/>      SOUND OFF<br/>      PRINT \"Stopped MIDI.\"<br/>\u00a0<br/>      END</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Media</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">//load sound file</span><br/>        SoundPlayer s1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SoundPlayer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//</span><br/>        s1<span class=\"sy0\">.</span><span class=\"me1\">SoundLocation</span> <span class=\"sy0\">=</span> file<span class=\"sy0\">;</span> <span class=\"co1\">// or \"s1 = new SoundPlayer(file)\"</span><br/>\u00a0<br/>        <span class=\"co1\">//play</span><br/>        s1<span class=\"sy0\">.</span><span class=\"me1\">Play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <br/>\u00a0<br/>        <span class=\"co1\">//play for 0.1 seconds</span><br/>        s1<span class=\"sy0\">.</span><span class=\"me1\">Play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s1<span class=\"sy0\">.</span><span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//loops</span><br/>        s1<span class=\"sy0\">.</span><span class=\"me1\">PlayLooping</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 9, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> PlayRecordedSounds<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> MMSystem<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  sndPlaySound<span class=\"br0\">(</span><span class=\"st0\">'SoundFile.wav'</span><span class=\"sy1\">,</span> SND_NODEFAULT <span class=\"kw1\">OR</span> SND_ASYNC<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "GUISS", "loc": 2, "block": "<pre class=\"text highlighted_source\">Start,Programs,Accessories,Media Player,Menu:File,Open,<br/>Doubleclick:Icon:Sound.WAV,Button:OK,Button:Play</pre>"}, {"lang": "Liberty BASIC", "loc": 42, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'Supports .mid and .wav natively</span><br/><span class=\"co1\">'Midi may be played simultaneously</span><br/><span class=\"co1\">'with .wav but only one .wav voice</span><br/><span class=\"co1\">'is supported. Multiple voices can</span><br/><span class=\"co1\">'be achieved via API or Dlls such</span><br/><span class=\"co1\">'as FMOD or Wavemix</span><br/>\u00a0<br/><span class=\"co1\">'to play a .mid and return its length</span><br/><span class=\"kw1\">playmidi</span> <span class=\"st0\">\"my.mid\"</span><span class=\"sy0\">,</span> midiLength<br/>\u00a0<br/><span class=\"co1\">'check where we are in .mid</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">midipos</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>midiLength <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Midi still playing\"</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Midi ended\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">'to stop a playing .mid</span><br/><span class=\"kw1\">stopmidi</span><br/>\u00a0<br/><span class=\"co1\">'to play a .wav and wait for it to end</span><br/><span class=\"kw1\">playwave</span> <span class=\"st0\">\"my.wav\"</span><br/>\u00a0<br/><span class=\"co1\">'to play a .wav and continue procesing</span><br/><span class=\"kw1\">playwave</span> <span class=\"st0\">\"my.wav\"</span><span class=\"sy0\">,</span> async<br/>\u00a0<br/><span class=\"co1\">'to loop a .wav and continue processing</span><br/><span class=\"kw1\">playwave</span> <span class=\"st0\">\"my.wav\"</span><span class=\"sy0\">,</span><span class=\"kw1\">loop</span><br/>\u00a0<br/><span class=\"co1\">'to silence any .wav</span><br/><span class=\"kw1\">playwave</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">or</span><br/><span class=\"kw1\">playwave</span> <span class=\"st0\">\"next.wav\"</span><br/>\u00a0<br/><span class=\"co1\">'to adjust .wav vol</span><br/><span class=\"co1\">'set left and right full on</span><br/>left <span class=\"sy0\">=</span><span class=\"nu0\">65535</span><br/>right<span class=\"sy0\">=</span><span class=\"nu0\">65535</span><br/>dwVol<span class=\"sy0\">=</span>right<span class=\"sy0\">*</span><span class=\"nu0\">65536</span><span class=\"sy0\">+</span>left<br/><span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>winmm<span class=\"sy0\">,</span> <span class=\"st0\">\"waveOutSetVolume\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> _<br/>    dwVol <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> ret <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">a = Import[\"sound1.flac\",\"FLAC\"]; b = Import[\"sound2.flac\",\"FLAC\"];<br/>\u00a0<br/>ListPlay[a, {t, 0, 10}]; ListPlay[b, {t, 0, 10}];<br/>\u00a0<br/>ListPlay[{a,b}, {t, 0, 10}];<br/>\u00a0<br/>Stopping before the end can be done using the GUI or by reducing the parameter range of the ListPlay function. <br/>\u00a0<br/>While[True,ListPlay[{a,b}, {t, 0, 10}];]<br/>\u00a0<br/>ListPlay[{0.5*a, 0.3*b}, {t, 0, 10}];</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(call 'sox<br/>   \"-m\"  \"-v\" \"0.75\" \"a.wav\"  \"-v\" \"0.25\" \"b.wav\"<br/>   \"-d\"<br/>   \"trim\" 4 6<br/>   \"repeat\" 5 )</pre>"}, {"lang": "PureBasic", "loc": 36, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">InitSound</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">; We need this to use Sound functions</span><br/><span class=\"kw2\">UseOGGSoundDecoder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Now we can not only load wav sound files, but also ogg encoded ones.</span><br/><span class=\"co1\">;   With movie library more formats can be played (depends on system) but you cannot</span><br/><span class=\"co1\">;   handle them with Sound functions</span><br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">LoadSound</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"st0\">\"Path/to/Sound/1.ogg\"</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">LoadSound</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"st0\">\"Path/to/Sound/2.wav\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Error\"</span>,<span class=\"st0\">\"One of our sounds could not be loaded\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"Use Debugger to check which one\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"co1\">;- simultaneous playing</span><br/><span class=\"kw2\">PlaySound</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PlaySound</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;- manipulating sounds</span><br/><span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"co1\">; pause for one second, to let user hear something</span><br/><span class=\"kw2\">SoundVolume</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">90</span><span class=\"br0\">)</span><br/><span class=\"kw2\">SoundVolume</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">60</span><span class=\"br0\">)</span><br/><span class=\"co1\">; reduce volume of the sounds a bit</span><br/><span class=\"kw2\">SoundPan</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><br/><span class=\"kw2\">SoundPan</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Sound 1 mostly left speaker, sound 2 only right speaker</span><br/><span class=\"kw2\">SoundFrequency</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">30000</span><span class=\"br0\">)</span><br/><span class=\"co1\">; play sound one faster</span><br/><span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"co1\">; pause for one second, to let user hear effects of previous actions</span><br/>\u00a0<br/><span class=\"co1\">;- stopping while playing</span><br/><span class=\"kw2\">StopSound</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co1\">; value -1 stops all playing sounds</span><br/><span class=\"kw2\">PlaySound</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,#PB_Sound_Loop<span class=\"br0\">)</span><br/><span class=\"co1\">; continous looping without glitch</span><br/>\u00a0<br/><span class=\"co1\">;suitable for 2D games and music playing.</span><br/><span class=\"co1\">; TODO: There is a Sound3D library for 3D Games, needs to be decribed here too</span></pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/><span class=\"kw1\">from</span> pygame <span class=\"kw1\">import</span> mixer<br/>\u00a0<br/>mixer.<span class=\"me1\">init</span><span class=\"br0\">(</span>frequency<span class=\"sy0\">=</span><span class=\"nu0\">16000</span><span class=\"br0\">)</span> <span class=\"co1\">#set frequency for wav file</span><br/>s1 <span class=\"sy0\">=</span> mixer.<span class=\"me1\">Sound</span><span class=\"br0\">(</span><span class=\"st0\">'test.wav'</span><span class=\"br0\">)</span><br/>s2 <span class=\"sy0\">=</span> mixer.<span class=\"me1\">Sound</span><span class=\"br0\">(</span><span class=\"st0\">'test2.wav'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#individual</span><br/>s1.<span class=\"me1\">play</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>         <span class=\"co1\">#loops indefinitely</span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#simultaneously</span><br/>s2.<span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span>          <span class=\"co1\">#play once </span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>s2.<span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>         <span class=\"co1\">#optional parameter loops three times </span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#set volume down</span><br/>s1.<span class=\"me1\">set_volume</span><span class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#set volume up</span><br/>s1.<span class=\"me1\">set_volume</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>s1.<span class=\"me1\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>s2.<span class=\"me1\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>mixer.<span class=\"me1\">quit</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#Setup<br/># Warning: The example files are Windows specific.<br/>library(sound)<br/>media_dir &lt;- file.path(Sys.getenv(\"SYSTEMROOT\"), \"Media\")<br/>chimes &lt;- loadSample(file.path(media_dir, \"chimes.wav\"))<br/>chord &lt;- loadSample(file.path(media_dir, \"chord.wav\"))<br/>\u00a0<br/># Play sequentially<br/>play(appendSample(chimes, chord))<br/>\u00a0<br/># Play simultaneously<br/>play(chimes + chord)<br/>\u00a0<br/># Stopping before the end<br/>play(cutSample(chimes, 0, 0.2))<br/>\u00a0<br/>#Looping<br/>for(i in 1:3) play(chimes)                 #leaves a gap between instances<br/>\u00a0<br/>three_chimes &lt;- lapply(vector(3, mode = \"list\"), function(x) chimes)<br/>play(do.call(appendSample, three_chimes))  #no gap, see also cutSampleEnds<br/>\u00a0<br/># Volume control<br/>play(3 * chimes)<br/>\u00a0<br/>#Stereo effect<br/>play(stereo(chimes, chord))<br/>\u00a0<br/>#Other actions (not obviously possible)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/gui<br/>(play-sound \"some-sound.wav\" #f)<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 119, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Load \"guilib.ring\"<br/>new qapp {<br/>         q1=NULL  q2=NULL<br/>         win1 = new qwidget() {<br/>                setwindowtitle(\"play sound!\") show()<br/>                setgeometry(100,100,400,400)<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(50,50,100,30)<br/>             settext(\"play1\")<br/>             setclickevent(\"playmusic1()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(200,50,100,30)<br/>             settext(\"play2\")<br/>             setclickevent(\"playmusic2()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(50,100,100,30)<br/>             settext(\"pause1\")<br/>             setclickevent(\"pauseplay1()\")<br/>         show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(200,100,100,30)<br/>             settext(\"pause2\")<br/>             setclickevent(\"pauseplay2()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(50,150,100,30)<br/>             settext(\"stop1\")<br/>             setclickevent(\"stopplay1()\")<br/>             show()<br/>                }<br/>         new qpushbutton(win1) {<br/>             setgeometry(200,150,100,30)<br/>             settext(\"stop2\")<br/>             setclickevent(\"stopplay2()\")<br/>             show()<br/>         }<br/>         lineedit1 = new qlineedit(win1) {<br/>                     setGeometry(50,200,100,30)<br/>                     settext(\"50\")<br/>                     show()<br/>         }<br/>         lineedit2 = new qlineedit(win1) {<br/>                     setGeometry(200,200,100,30)<br/>                     settext(\"50\")<br/>                     show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(50,250,100,30)<br/>             settext(\"volume1\")<br/>             setclickevent(\"volume1()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(200,250,100,30)<br/>             settext(\"volume2\")<br/>             setclickevent(\"volume2()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(50,300,100,30)<br/>             settext(\"mute1\")<br/>             setclickevent(\"mute1()\")<br/>             show()<br/>         }<br/>         new qpushbutton(win1) {<br/>             setgeometry(200,300,100,30)<br/>             settext(\"mute2\")<br/>             setclickevent(\"mute2()\")<br/>             show()<br/>         }<br/>         exec()<br/>         }<br/>\u00a0<br/>func playmusic1<br/>     q1 = new qmediaplayer(win1)  {<br/>          setmedia(new qurl(\"music1.wav\"))<br/>          setvolume(50) play()<br/>     }<br/>\u00a0<br/>func playmusic2<br/>     q2 = new qmediaplayer(win1)  {<br/>          setmedia(new qurl(\"music2.wav\"))<br/>          setvolume(50) play()<br/>     }<br/>\u00a0<br/>func pauseplay1<br/>     q1.pause()<br/>\u00a0<br/>func pauseplay2<br/>     q2.pause()<br/>\u00a0<br/>func stopplay1<br/>     q1.stop()<br/>\u00a0<br/>func stopplay2<br/>     q2.stop()<br/>\u00a0<br/>func volume1<br/>     lineedit1 { vol1 = text() }<br/>     q1 {setvolume(number(vol1))}<br/>\u00a0<br/>func volume2<br/>     lineedit2 { vol2 = text() }<br/>     q2 {setvolume(number(vol2))}<br/>\u00a0<br/>func mute1<br/>     q1.setmuted(true)<br/>\u00a0<br/>func mute2<br/>     q2.setmuted(true)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 43, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'win32/sound'</span><br/><span class=\"kw1\">include</span> Win32<br/>\u00a0<br/>sound1 = ENV<span class=\"br0\">[</span><span class=\"st0\">'WINDIR'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\M</span>edia<span class=\"es0\">\\W</span>indows XP Startup.wav'</span> <br/>sound2 = ENV<span class=\"br0\">[</span><span class=\"st0\">'WINDIR'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\M</span>edia<span class=\"es0\">\\W</span>indows XP Shutdown.wav'</span> <br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"play the sounds sequentially\"</span><br/><span class=\"br0\">[</span>sound1, sound2<span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> <br/>  t1 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>  Sound.<span class=\"me1\">play</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"'#{s}' duration: #{(Time.now.to_f - t1.to_f)} seconds\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"attempt to play the sounds simultaneously\"</span><br/><span class=\"br0\">[</span>sound1, sound2<span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> Sound.<span class=\"me1\">play</span><span class=\"br0\">(</span>s, <span class=\"re2\">Sound::ASYNC</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"co4\">&lt;&lt;END<br/>the above only plays the second sound2 because the library only appears <br/>to be able to play one sound at a time.<br/>END</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"loop a sound for a few seconds\"</span><br/><span class=\"kw3\">puts</span> <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>Sound.<span class=\"me1\">play</span><span class=\"br0\">(</span>sound1, <span class=\"re2\">Sound::ASYNC</span> <span class=\"sy0\">+</span> Sound::<span class=\"kw3\">LOOP</span><span class=\"br0\">)</span><br/><span class=\"kw3\">sleep</span> <span class=\"nu0\">10</span><br/>Sound.<span class=\"me1\">stop</span><br/><span class=\"kw3\">puts</span> <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"manipulate the volume\"</span><br/>vol_left, vol_right = Sound.<span class=\"me1\">wave_volume</span><br/>Sound.<span class=\"me1\">play</span><span class=\"br0\">(</span>sound1, <span class=\"re2\">Sound::ASYNC</span><span class=\"br0\">)</span><br/><span class=\"kw3\">sleep</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"right channel quiet\"</span><br/>Sound.<span class=\"me1\">set_wave_volume</span><span class=\"br0\">(</span>vol_left, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw3\">sleep</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"left channel quiet\"</span><br/>Sound.<span class=\"me1\">set_wave_volume</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, vol_right<span class=\"br0\">)</span><br/><span class=\"kw3\">sleep</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"restore volume\"</span><br/>Sound.<span class=\"me1\">set_wave_volume</span><span class=\"br0\">(</span>vol_left, vol_right<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">sleep</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"the asynchronous sound is cancelled when the program exits\"</span></pre>"}, {"lang": "Swift", "loc": 78, "block": "<pre class=\"text highlighted_source\">import AVFoundation<br/>\u00a0<br/>// This example uses AVAudioPlayer for playback.<br/>// AVAudioPlayer is the player Apple recommends for playback, since it suitable for songs<br/>// and offers control over numerous playback parameters.<br/>// It can play any type that is natively supported by OSX or iOS<br/>\u00a0<br/>class PlayerControl: NSObject, AVAudioPlayerDelegate {<br/>    let player1:AVAudioPlayer!<br/>    let player2:AVAudioPlayer!<br/>    var playedBoth = false<br/>    var volume:Float {<br/>        get {<br/>            return player1.volume<br/>        }<br/>\u00a0<br/>        set {<br/>            player1.volume = newValue<br/>            player2.volume = newValue<br/>        }<br/>    }<br/>\u00a0<br/>    init(player1:AVAudioPlayer, player2:AVAudioPlayer) {<br/>        super.init()<br/>        self.player1 = player1<br/>        self.player2 = player2<br/>        self.player1.delegate = self<br/>        self.player2.delegate = self<br/>    }<br/>\u00a0<br/>    func loop() {<br/>        player1.numberOfLoops = 1<br/>        player1.play()<br/>\u00a0<br/>        let time = Int64((Double(player1.duration) + 2.0) * Double(NSEC_PER_SEC))<br/>\u00a0<br/>        dispatch_after(dispatch_time(0, time), dispatch_get_main_queue()) {[weak self] in<br/>            println(\"Stopping track\")<br/>            self?.player1.stop()<br/>            exit(0)<br/>        }<br/>    }<br/>\u00a0<br/>    func playBoth() {<br/>        player1.play()<br/>        player2.play()<br/>    }<br/>\u00a0<br/>    func audioPlayerDidFinishPlaying(player:AVAudioPlayer!, successfully flag:Bool) {<br/>        if player === player2 &amp;&amp;\u00a0!playedBoth {<br/>            playBoth()<br/>            playedBoth = true<br/>        } else if player === player2 &amp;&amp; playedBoth {<br/>            loop()<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>let url1 = NSURL(string: \"file:///file1.mp3\")<br/>let url2 = NSURL(string: \"file:///file2.mp3\")<br/>\u00a0<br/>var err:NSError?<br/>let player1 = AVAudioPlayer(contentsOfURL: url1, error: &amp;err)<br/>let player2 = AVAudioPlayer(contentsOfURL: url2, error: &amp;err)<br/>\u00a0<br/>let player = PlayerControl(player1: player1, player2: player2)<br/>\u00a0<br/>// Setting the volume<br/>player.volume = 0.5<br/>\u00a0<br/>// Play track 2<br/>// When this track finishes it will play both of them<br/>// by calling the audioPlayerDidFinishPlaying delegate method<br/>// Once both tracks finish playing, it will then loop the first track twice<br/>// stopping the track after 2 seconds of the second play<br/>player.player2.play()<br/>\u00a0<br/>CFRunLoopRun()</pre>"}, {"lang": "Tcl", "loc": 20, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require sound<br/><span class=\"co1\"># Potentially also require driver support for particular formats</span><br/>\u00a0<br/><span class=\"co1\"># Load some sounds in; this part can be slow</span><br/>snack::<span class=\"me1\">sound</span> s1<br/>s1 <span class=\"kw2\">read</span> <span class=\"re0\">$soundFile1</span><br/>snack::<span class=\"me1\">sound</span> s2<br/>s2 <span class=\"kw2\">read</span> <span class=\"re0\">$soundFile2</span><br/>\u00a0<br/><span class=\"co1\"># Play a sound for a while (0.1 seconds; this is a low-latency operation)</span><br/>s1 play<br/>after <span class=\"nu0\">100</span> <span class=\"kw1\">set</span> done <span class=\"nu0\">1</span><span class=\"sy0\">;</span> vwait done<span class=\"sy0\">;</span> <span class=\"co1\"># Run the event loop for a while</span><br/>s1 stop<br/>\u00a0<br/><span class=\"co1\"># Play two sounds at once (for 30 seconds) while mixing together</span><br/>s1 play<br/>s2 play<br/>after <span class=\"nu0\">30000</span> <span class=\"kw1\">set</span> done <span class=\"nu0\">1</span><span class=\"sy0\">;</span> vwait done<br/>s1 stop<br/>s2 stop</pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>audiofile=\"test.wav\"<br/>ERROR/STOP OPEN (audiofile,READ,-std-)<br/>BROWSE $audiofile<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 8, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/usr/bin/sh</span><br/>\u00a0<br/><span class=\"co0\"># play.sh</span><br/>\u00a0<br/><span class=\"co0\"># Plays .au files.</span><br/><span class=\"co0\"># Usage: play.sh &lt;recorded_sound.au&gt;</span><br/>\u00a0<br/><span class=\"kw2\">cat</span> <span class=\"re4\">$1</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>audio <span class=\"co0\"># Write file $1 to the speaker's Character Special (/dev/audio).</span></pre>"}, {"lang": "VBA", "loc": 8, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> libPlaySound Lib <span class=\"st0\">\"winmm.dll\"</span> Alias <span class=\"st0\">\"sndPlaySoundA\"</span> _<br/>    (<span class=\"kw4\">ByVal</span> filename <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, <span class=\"kw4\">ByVal</span> Flags <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> PlaySound(sWav <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/>  <span class=\"kw2\">Call</span> libPlaySound(sWav, 1) <span class=\"co1\">'1 to play asynchronously<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}]}