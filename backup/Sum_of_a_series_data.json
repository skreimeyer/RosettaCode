{"task": "Sum_of_a_series", "blocks": [{"lang": "360 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">*        Sum of a series           30/03/2017<br/>SUMSER   CSECT<br/>         USING  SUMSER,12          base register<br/>         LR     12,15              set addressability<br/>         LR     10,14              save r14<br/>         LE     4,=E'0'            s=0<br/>         LE     2,=E'1'            i=1 <br/>       DO WHILE=(CE,2,LE,=E'1000') do i=1 to 1000<br/>         LER    0,2                  i<br/>         MER    0,2                  *i<br/>         LE     6,=E'1'              1<br/>         DER    6,0                  1/i**2<br/>         AER    4,6                  s=s+1/i**2<br/>         AE     2,=E'1'              i=i+1<br/>       ENDDO    ,                  enddo i<br/>         LA     0,4                format F13.4<br/>         LER    0,4                s<br/>         BAL    14,FORMATF         call formatf<br/>         MVC    PG(13),0(1)        retrieve result<br/>         XPRNT  PG,80              print buffer<br/>         BR     10                 exit<br/>         COPY   FORMATF            formatf code<br/>PG       DC     CL80' '            buffer<br/>         END    SUMSER</pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-x<span class=\"sy0\">^</span>-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>max-x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp max-x<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* max-x max-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>sum-x<span class=\"sy0\">^</span>-<span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- max-x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 8, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> partialSum<span class=\"br0\">(</span>n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= n; i++<span class=\"br0\">)</span><br/>\t\tsum += <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> sum;<br/><span class=\"br0\">}</span><br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>partialSum<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 20, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sum_Series <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> F<span class=\"br0\">(</span>X\u00a0: Long_Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1.0</span> / X**<span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">end</span> F;<br/>   <span class=\"kw3\">package</span> Lf_Io <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Float_Io</span><span class=\"br0\">(</span>Long_Float<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Lf_Io;<br/>   Sum\u00a0: Long_Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw3\">subtype</span> Param_Range <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Param_Range <span class=\"kw1\">loop</span><br/>      Sum\u00a0:= Sum + F<span class=\"br0\">(</span>Long_Float<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"Sum of F(x) from\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Param_Range'First<span class=\"br0\">)</span> &amp;<br/>      <span class=\"st0\">\" to\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Param_Range'Last<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is \"</span><span class=\"br0\">)</span>;<br/>   Put<span class=\"br0\">(</span>Item =&gt; Sum, Aft =&gt; <span class=\"nu0\">10</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   New_Line;<br/><span class=\"kw1\">end</span> Sum_Series;</pre>"}, {"lang": "Aime", "loc": 25, "block": "<pre class=\"text highlighted_source\">real<br/>Invsqr(real n)<br/>{<br/>    1 / (n * n);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer i;<br/>    real sum;<br/>\u00a0<br/>    sum = 0;<br/>\u00a0<br/>    i = 1;<br/>    while (i &lt; 1000) {<br/>        sum += Invsqr(i);<br/>        i += 1;<br/>    }<br/>\u00a0<br/>    o_real(14, sum);<br/>    o_byte('\\n');<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 15, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> RANGE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> lwb<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> sum <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> f<span class=\"sy1\">,</span> RANGE range<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum <span class=\"sy1\">:=</span> <span class=\"kw8\">LENG</span> <span class=\"re1\">0.0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> lwb <span class=\"kw6\">OF</span> range <span class=\"kw2\">TO</span> upb <span class=\"kw6\">OF</span> range <span class=\"kw2\">DO</span><br/>     sum <span class=\"sy1\">:=</span> sum <span class=\"sy1\">+</span> f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  RANGE range <span class=\"sy1\">=</span> <span class=\"br0\">(</span>1<span class=\"sy1\">,</span>100<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">PROC</span> f <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> x<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> <span class=\"kw8\">LENG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"kw8\">LENG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">**</span>2<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum of f(x) from\"</span><span class=\"sy1\">,</span> lwb <span class=\"kw6\">OF</span> range<span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span>upb <span class=\"kw6\">OF</span> range<span class=\"sy1\">,</span><span class=\"st0\">\" is \"</span><span class=\"sy1\">,</span> <span class=\"kw8\">SHORTEN</span> sum<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>range<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\".\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      +/\u00f72*\u2368\u23731000<br/>1.64393</pre>"}, {"lang": "AppleScript", "loc": 67, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- SUM OF SERIES -------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- seriesSum\u00a0:: Num a =&gt; (a -&gt; a) -&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> seriesSum<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> seriesSum<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw3\">on</span> inverseSquare<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> inverseSquare<br/>\u00a0<br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    seriesSum<span class=\"br0\">(</span>inverseSquare, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; 1.643934566682</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.15</span><br/><span class=\"kw1\">While</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><br/> sum <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>% sum  <span class=\"co1\">;1.643934566681554</span></pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">1000</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span>s<span class=\"sy3\">+</span>=<span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>i<span class=\"sy3\">*</span>i<span class=\"br0\">)</span>;<span class=\"kw5\">print</span> s<span class=\"br0\">}</span>'<br/><span class=\"nu0\">1.64393</span></pre>"}, {"lang": "BASIC", "loc": 12, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> s<span class=\"br0\">(</span>x%<span class=\"br0\">)</span><br/>   s <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> sum<span class=\"br0\">(</span>low%<span class=\"sy0\">,</span> high%<span class=\"br0\">)</span><br/>   ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> low <span class=\"kw1\">TO</span> high<br/>      ret <span class=\"sy0\">=</span> ret <span class=\"sy0\">+</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>   <span class=\"kw1\">NEXT</span> i<br/>   sum <span class=\"sy0\">=</span> ret<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sum<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">      FOR i% = 1 TO 1000<br/>        sum += 1/i%^2<br/>      NEXT<br/>      PRINT sum</pre>"}, {"lang": "bc", "loc": 16, "block": "<pre class=\"text highlighted_source\">define f(x) {<br/>    return(1 / (x * x))<br/>}<br/>\u00a0<br/>define s(n) {<br/>    auto i, s<br/>\u00a0<br/>    for (i = 1; i &lt;= n; i++) {<br/>        s += f(i)<br/>    }<br/>\u00a0<br/>    return(s)<br/>}<br/>\u00a0<br/>scale = 20<br/>s(1000)</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">05558***&gt;::\"~\"%00p\"~\"/10p\"( }}2\"*v<br/>v*8555$_^#!:-1+*\"~\"g01g00+/*:\\***&lt;<br/>&lt;@$_,#!&gt;#:&lt;+*&lt;v+*86%+55:p00&lt;6\\0/**<br/>   \".\"\\55+%68^&gt;\\55+/00g1-:#^_$</pre>"}, {"lang": "Bracmat", "loc": 6, "block": "<pre class=\"text highlighted_source\">( 0:?i<br/>&amp; 0:?S<br/>&amp; whl'(1+!i:~&gt;1000:?i&amp;!i^-2+!S:?S)<br/>&amp; out$!S<br/>&amp; out$(flt$(!S,10))<br/>);</pre>"}, {"lang": "Brat", "loc": 1, "block": "<pre class=\"text highlighted_source\">p 1.to(1000).reduce 0 { sum, x | sum + 1.0 / x ^ 2 }  #Prints 1.6439345666816</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> Invsqr<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> start <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> end <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> i <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tsum <span class=\"sy0\">+=</span> Invsqr<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>           <br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%16.14f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> start <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> end <span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> start<span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;=</span> end<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>x <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Sum of f(x) from \"</span> <span class=\"sy1\">&lt;&lt;</span> start <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" to \"</span> <span class=\"sy1\">&lt;&lt;</span> end <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"nu16\">1.0</span> <span class=\"sy2\">/</span> <span class=\"br0\">(</span> x <span class=\"sy2\">*</span> x <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 19, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Create and fill a list of number 1 to 1000</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> myList <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1001</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            myList<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// Calculate the sum of 1/x^2</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> myList<span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CLIPS", "loc": 9, "block": "<pre class=\"text highlighted_source\">(deffunction S (?x) (/ 1 (*\u00a0?x\u00a0?x)))<br/>(deffunction partial-sum-S<br/>  (?start\u00a0?stop)<br/>  (bind\u00a0?sum 0)<br/>  (loop-for-count (?i\u00a0?start\u00a0?stop) do<br/>    (bind\u00a0?sum (+\u00a0?sum (S\u00a0?i)))<br/>  )<br/>  (return\u00a0?sum)<br/>)</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 19, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> sum-of-series<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  N                       <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1000</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  series-term             <span class=\"kw3\">USAGE</span> FLOAT-LONG<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  i                       <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> N &lt; i<br/>               <span class=\"kw2\">COMPUTE</span> series-term <span class=\"sy0\">=</span> series-term<span class=\"sy0\"> + </span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\"> / </span>i<span class=\"sy0\"> ** </span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw2\">DISPLAY</span> series-term<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 3, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">]</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span> summing <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x -<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>ReturnType<span class=\"sy0\">!</span>TF series<span class=\"br0\">(</span>TF<span class=\"br0\">)</span><span class=\"br0\">(</span>TF func<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> end<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> start <span class=\"sy0\">..</span> <span class=\"me1\">end</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Sum: \"</span><span class=\"sy0\">,</span> series<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> 1.0L <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 49, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">unit</span> Form_SumOfASeries_Unit<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Windows<span class=\"sy1\">,</span> Messages<span class=\"sy1\">,</span> SysUtils<span class=\"sy1\">,</span> Variants<span class=\"sy1\">,</span> Classes<span class=\"sy1\">,</span> Graphics<span class=\"sy1\">,</span> Controls<span class=\"sy1\">,</span> Forms<span class=\"sy1\">,</span><br/>  Dialogs<span class=\"sy1\">,</span> StdCtrls<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TFormSumOfASeries <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>TForm<span class=\"br0\">)</span><br/>    M_Log<span class=\"sy1\">:</span> TMemo<span class=\"sy1\">;</span><br/>    B_Calc<span class=\"sy1\">:</span> TButton<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> B_CalcClick<span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">private</span><br/>    <span class=\"coMULTI\">{ Private-Deklarationen }</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"coMULTI\">{ Public-Deklarationen }</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  FormSumOfASeries<span class=\"sy1\">:</span> TFormSumOfASeries<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"co2\">{$R *.dfm}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Sum_Of_A_Series<span class=\"br0\">(</span>_from<span class=\"sy1\">,</span>_to<span class=\"sy1\">:</span><span class=\"kw4\">int64</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">extended</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> _from&lt;<span class=\"sy3\">=</span>_to <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    result<span class=\"sy1\">:</span><span class=\"sy3\">=</span>result<span class=\"sy3\">+</span><span class=\"nu0\">1.0</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>_from<span class=\"sy3\">*</span>_from<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">inc</span><span class=\"br0\">(</span>_from<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TFormSumOfASeries<span class=\"sy1\">.</span><span class=\"me1\">B_CalcClick</span><span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">try</span><br/>    M_Log<span class=\"sy1\">.</span><span class=\"me1\">Lines</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw3\">FloatToStr</span><span class=\"br0\">(</span>Sum_Of_A_Series<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">except</span><br/>    M_Log<span class=\"sy1\">.</span><span class=\"me1\">Lines</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">'Error'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "DWScript", "loc": 7, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> s <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">var</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">do</span><br/>   s <span class=\"sy3\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"kw3\">Sqr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 2, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; for (sigma f(n) nfrom nto) function</span><br/><span class=\"br0\">(</span>\u03a3 <span class=\"br0\">(</span>\u03bb<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>// <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; or</span><br/><span class=\"br0\">(</span>sigma <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>// <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1.6439345666815615</span><br/>\u00a0<br/><span class=\"br0\">(</span>// <span class=\"br0\">(</span>* PI PI<span class=\"br0\">)</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1.6449340668482264</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 53, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>note<br/>\tdescription<span class=\"sy0\">:</span> <span class=\"st0\">\"Compute the n-th term of a series\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tSUM_OF_SERIES_EXAMPLE<br/>\u00a0<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+math_const&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">MATH_CONST</span></a><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tapproximated, known<span class=\"sy0\">:</span> REAL_64<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tknown <span class=\"sy0\">:=</span> Pi<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><br/>\u00a0<br/>\t\t\tapproximated <span class=\"sy0\">:=</span> sum_until <span class=\"br0\">(</span><span class=\"kw2\">agent</span> g, <span class=\"nu0\">1001</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>zeta function exact value: <span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>known<span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>zeta function approximated value: <span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>approximated<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tg <span class=\"br0\">(</span>k<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> REAL_64<br/>\t\t\t<span class=\"co1\">-- 'k'-th term of the serie</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tk_positive<span class=\"sy0\">:</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k <span class=\"sy0\">*</span> k<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsum_until <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+function&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">FUNCTION</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+any&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ANY</span></a>, <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+tuple&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">TUPLE</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>, REAL_64<span class=\"br0\">]</span>; n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> REAL_64<br/>\t\t\t<span class=\"co1\">-- sum of the 'n' first terms of 's'</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn_positive<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tone_parameter<span class=\"sy0\">:</span> s.<span class=\"me1\">open_count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\tacross <span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> n <span class=\"kw2\">as</span> it <span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> s.<span class=\"me1\">item</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>it.<span class=\"me1\">item</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.reduce(1..1000, 0, fn x,sum -&gt; sum + 1/(x*x) end)<br/>1.6439345666815615</pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var sum\u00a0:= 1 to:1000 repeat(:x)(1.0r / (x * x)); summarize(Real new).<br/>\u00a0<br/>    console printLine:sum.<br/>].</pre>"}, {"lang": "Emacs Lisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun serie (n)<br/>  (if (&lt; 0 n)<br/>      (apply '+ (mapcar (lambda (k) (/ 1.0 (* k k) )) (number-sequence 1 n) ))<br/>    (error \"input error\") ))<br/>\u00a0<br/>(insert (format \"%.10f\" (serie 1000) ))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 14, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> s<span class=\"br0\">(</span> <span class=\"kw2\">atom</span> x <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy1\">/</span> <span class=\"kw2\">power</span><span class=\"br0\">(</span> x<span class=\"sy2\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> <br/>\u00a0<br/><span class=\"kw1\">function</span> sum<span class=\"br0\">(</span> <span class=\"kw2\">atom</span> low<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> high <span class=\"br0\">)</span><br/>\t<span class=\"kw2\">atom</span> ret <span class=\"sy1\">=</span> <span class=\"nu0\">0.0</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> low <span class=\"kw1\">to</span> high <span class=\"kw1\">do</span><br/>\t\tret <span class=\"sy1\">=</span> ret <span class=\"sy1\">+</span> s<span class=\"br0\">(</span> i <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%.15f<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> sum<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Ezhil", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0ba4\u0bca\u0b9f\u0bb0\u0bcd \u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd (Sum Of Series) \u0b8e\u0ba9\u0bcd\u0bb1 \u0bb5\u0b95\u0bc8\u0baf\u0bc8\u0b9a\u0bcd \u0b9a\u0bc7\u0bb0\u0bcd\u0ba8\u0bcd\u0ba4\u0ba4\u0bc1<br/>\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0b92\u0ba9\u0bcd\u0bb1\u0bc1 \u0bae\u0bc1\u0ba4\u0bb2\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b8e\u0ba3\u0bcd \u0bb5\u0bb0\u0bc8 1/(\u0b8e\u0ba3\u0bcd * \u0b8e\u0ba3\u0bcd) \u0b8e\u0ba9\u0b95\u0bcd \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bcd \u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bbf \u0bb5\u0bbf\u0b9f\u0bc8 \u0ba4\u0bb0\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0ba4\u0bca\u0b9f\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd(\u0b8e\u0ba3\u0bcd1)<br/>\u00a0<br/>  \u0b8e\u0ba3\u0bcd2 = 0<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd3 = 1, \u0b8e\u0ba3\u0bcd3 &lt;= \u0b8e\u0ba3\u0bcd1, \u0b8e\u0ba3\u0bcd3 = \u0b8e\u0ba3\u0bcd3 + 1) \u0b86\u0b95<br/>\u00a0<br/>    ## \u0b92\u0bb5\u0bcd\u0bb5\u0bcb\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0ba9\u0bcd \u0bb5\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0ba4\u0bcd\u0ba4\u0bc8\u0b95\u0bcd \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bcd\u0b9f\u0bc1, \u0b92\u0ba9\u0bcd\u0bb1\u0bc8 \u0b85\u0ba4\u0ba9\u0bbe\u0bb2\u0bcd \u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd \u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bc1\u0b95\u0bbf\u0bb1\u0bcb\u0bae\u0bcd<br/>\u00a0<br/>    \u0b8e\u0ba3\u0bcd2 = \u0b8e\u0ba3\u0bcd2 + (1 / (\u0b8e\u0ba3\u0bcd3 * \u0b8e\u0ba3\u0bcd3))<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 (\u0b8e\u0ba3\u0bcd2)<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0b85 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b93\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0b9a\u0bcd \u0b9a\u0bca\u0bb2\u0bcd\u0bb2\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd: \"))<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba4\u0ba8\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd \" \u0b85<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0b85\u0ba4\u0ba9\u0bcd \u0ba4\u0bca\u0b9f\u0bb0\u0bcd\u0b95\u0bcd \u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd \" \u0ba4\u0bca\u0b9f\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd(\u0b85)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">1000 [1,b] [ &gt;float sq recip ] map-sum</pre>"}, {"lang": "Fantom", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; (1..1000).toList.reduce(0.0f) |Obj a, Int v -&gt; Obj| { (Float)a + (1.0f/(v*v)) }<br/>1.6439345666815615<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: sum ( fn start count -- fsum )<br/>  0e<br/>  bounds do<br/>    i s&gt;d d&gt;f dup execute f+<br/>  loop drop\u00a0;<br/>\u00a0<br/>:noname ( x -- 1/x^2 ) fdup f* 1/f\u00a0;   ( xt )<br/>1 1000 sum f.       \\ 1.64393456668156<br/>pi pi f* 6e f/ f.   \\ 1.64493406684823</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"br0\">)</span>, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/><span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"kw3\">result</span><br/>\u00a0<br/><span class=\"kw3\">result</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;</pre>"}, {"lang": "FreeBASIC", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> pi <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">3.141592653589793</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> sumSeries <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    sum += <span class=\"nu0\">1.0</span>/<span class=\"br0\">(</span>k * k<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"s(1000) = \"</span>; sumSeries<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"zeta(2) = \"</span>; Pi * pi / <span class=\"nu0\">6</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> f <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">float</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">match</span> x <span class=\"kw1\">with</span><br/>        | <span class=\"nu0\">0</span>. <span class=\"sy0\">-&gt;</span> x<br/>        | x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>. <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>.<span class=\"br0\">)</span></pre>"}, {"lang": "GAP", "loc": 32, "block": "<pre class=\"text highlighted_source\"># We will compute the sum exactly<br/>\u00a0<br/># Computing an approximation of a rationnal (giving a string)<br/># Value is truncated toward zero<br/>Approx\u00a0:= function(x, d)<br/>\tlocal neg, a, b, n, m, s;<br/>\tif x &lt; 0 then<br/>\t\tx\u00a0:= -x;<br/>\t\tneg\u00a0:= true;<br/>\telse<br/>\t\tneg\u00a0:= false;<br/>\tfi;<br/>\ta\u00a0:= NumeratorRat(x);<br/>\tb\u00a0:= DenominatorRat(x);<br/>\tn\u00a0:= QuoInt(a, b);<br/>\ta\u00a0:= RemInt(a, b);<br/>\tm\u00a0:= 10^d;<br/>\ts\u00a0:= \"\";<br/>\tif neg then<br/>\t\tAppend(s, \"-\");<br/>\tfi;<br/>\tAppend(s, String(n));<br/>\tn\u00a0:= Size(s) + 1;<br/>\tAppend(s, String(m + QuoInt(a*m, b)));<br/>\ts[n]\u00a0:= '.';<br/>\treturn s;<br/>end;<br/>\u00a0<br/>a\u00a0:= Sum([1 .. 1000], n -&gt; 1/n^2);;<br/>Approx(a, 10);<br/>\"1.6439345666\"<br/># and pi^2/6 is 1.6449340668, truncated to ten digits</pre>"}, {"lang": "GEORGE", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>0 (s)<br/>1, 1000 rep (i)<br/>   s 1 i dup \u00d7 / + (s)\u00a0;<br/>]<br/>P<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><span class=\"st0\">\"fmt\"</span><span class=\"sy1\">;</span> <span class=\"st0\">\"math\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"known:   \"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">/</span><span class=\"nu0\">6</span><span class=\"sy1\">)</span><br/>    sum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu1\">1e3</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">*</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"computed:\"</span><span class=\"sy1\">,</span> sum<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> x <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span>/<span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 3, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> a<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">/</span> <span class=\"sy2\">$</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><br/>        <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span><span class=\"st0\">'F17.15'</span><span class=\"br0\">)</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> i<span class=\"sy1\">,</span> sum<br/>   sum <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">every</span> sum <span class=\"sy1\">+:=</span> <span class=\"nu0\">1.0</span><span class=\"sy1\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">|</span> i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy1\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">\\</span><span class=\"nu0\">1000</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">print,total<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>findgen<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre>Io 20110905\nIo&gt; sum\u00a0:= 0\u00a0; Range 1 to(1000) foreach(k, sum = sum + 1/(k*k))\n==&gt; 1.6439345666815615\nIo&gt; 1 to(1000) map(k, 1/(k*k)) sum\n==&gt; 1.6439345666815615\nIo&gt;</pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"j highlighted_source\">   <span class=\"co1\">NB. sum of reciprocals of squares of first thousand positive integers</span><br/>   +/\u00a0% *: &gt;: i. <span class=\"nu0\">1000</span><br/><span class=\"nu0\">1.64393</span><br/>\u00a0<br/>   <span class=\"sy0\">(</span>*:o.<span class=\"nu0\">1</span><span class=\"sy0\">)</span>%<span class=\"nu0\">6</span>       <span class=\"co1\">NB. pi squared over six, for comparison</span><br/><span class=\"nu0\">1.64493</span><br/>\u00a0<br/>   <span class=\"nu0\">1r6p2</span>           <span class=\"co1\">NB.  As a constant (J has a rich constant notation)</span><br/><span class=\"nu0\">1.64493</span></pre>"}, {"lang": "Java", "loc": 15, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sum<span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>       <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>       <span class=\"kw4\">double</span> start <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw4\">double</span> end <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>       <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>       <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span>x <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span>x<span class=\"sy0\">++</span><span class=\"br0\">)</span> sum <span class=\"sy0\">+=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum of f(x) from \"</span> <span class=\"sy0\">+</span> start <span class=\"sy0\">+</span> <span class=\"st0\">\" to \"</span> <span class=\"sy0\">+</span> end <span class=\"sy0\">+</span><span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> sum<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>fn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> s <span class=\"sy0\">+=</span> fn<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/> sum<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span>  <span class=\"co1\">// 1.64393456668156</span></pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">def s(n): reduce range(1; n+1) as $k (0; . + 1/($k * $k) );<br/>\u00a0<br/>s(1000)<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">julia&gt; sum(k -&gt; 1/k^2, 1:1000)<br/>1.643934566681559<br/>\u00a0<br/>julia&gt; pi^2/6<br/>1.6449340668482264<br/>\u00a0</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  ssr: +/1%_sqr<br/>  ssr 1+!1000<br/>1.643935</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">sumByDouble</span> <span class=\"br0\">{</span> <span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span>it <span class=\"sy0\">*</span> it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Actual sum is $sum\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"zeta(2)    is ${Math.PI * Math.PI / 6.0}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\">1000 iota 1 + 1 swap / 2 ** '+ reduce .</pre>"}, {"lang": "Lasso", "loc": 8, "block": "<pre class=\"text highlighted_source\">define sum_of_a_series(n::integer,k::integer) =&gt; {<br/>\tlocal(sum = 0)<br/>\tloop(-from=#k,-to=#n) =&gt; {<br/>\t\t#sum += 1.00/(math_pow(loop_count,2))<br/>\t}<br/>\treturn #sum<br/>}<br/>sum_of_a_series(1000,1)</pre>"}, {"lang": "LFE", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-series <span class=\"br0\">(</span>nums<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">foldl</span><br/>    #'+/<span class=\"nu0\">2</span><br/>    <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">map</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ <span class=\"nu0\">1</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 9, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span><br/>  sum <span class=\"sy0\">=</span>sum <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span><span class=\"br0\">(</span> i^<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">print</span> sum<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">the floatprecision = 8<br/>sum = 0<br/>repeat with i = 1 to 1000<br/>  sum = sum + 1/power(i, 2)<br/>end repeat<br/>put sum<br/>-- 1.64393457</pre>"}, {"lang": "LiveCode", "loc": 4, "block": "<pre class=\"text highlighted_source\">repeat with i = 1 to 1000<br/>    add 1/(i^2) to summ<br/>end repeat<br/>put summ  //1.643935</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to series\u00a0:fn\u00a0:a\u00a0:b<br/>  localmake \"sigma 0<br/>  for [i\u00a0:a\u00a0:b] [make \"sigma\u00a0:sigma + invoke\u00a0:fn\u00a0:i]<br/>  output\u00a0:sigma<br/>end<br/>to zeta.2\u00a0:x<br/>  output 1 / (:x *\u00a0:x)<br/>end<br/>print series \"zeta.2 1 1000<br/>make \"pi (radarctan 0 1) * 2<br/>print\u00a0:pi *\u00a0:pi / 6</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">do</span> sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>i<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lucid", "loc": 5, "block": "<pre class=\"text highlighted_source\">series = ssum asa  n &gt;= 1000<br/>   where<br/>         num = 1 fby num + 1;<br/>         ssum = ssum + 1/(num * num)<br/>   end;</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">sum(1/k^2, k=1..1000);</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Sum[1/x^2, {x, 1, 1000}]</pre>"}, {"lang": "MATLAB", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1000</span><span class=\"br0\">]</span>.^<span class=\"br0\">(</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Maxima", "loc": 7, "block": "<pre class=\"text highlighted_source\">(%i45) sum(1/x^2, x, 1, 1000);<br/>       835459384831496894781878542648[806 digits]396236858699094240207812766449<br/>(%o45) ------------------------------------------------------------------------<br/>       508207201043258126178352922730[806 digits]886537101453118476390400000000<br/>\u00a0<br/>(%i46) sum(1/x^2, x, 1, 1000),numer;<br/>(%o46) 1.643934566681561</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">total = 0<br/>for i in 1 to 1000 do<br/>(<br/>    total += 1.0 / pow i 2<br/>)<br/>print total</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">0\t\u041f0\t\u041f1\t\u0418\u041f1\t1\t+\t\u041f1\tx^2\t1/x\t\u0418\u041f0<br/>+\t\u041f0\t\u0418\u041f1\t1\t0\t0\t0\t-\tx&gt;=0\t03<br/>\u0418\u041f0\t\u0421/\u041f</pre>"}, {"lang": "ML", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* 1.64393456668 *)<br/>List.foldl op+ 0.0 (List.tabulate(1000, fn x =&gt; 1.0 / Math.pow(real(x + 1),2.0)))<br/>\u00a0</pre>"}, {"lang": "MMIX", "loc": 106, "block": "<pre class=\"mmix highlighted_source\">x\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$1</span>\t<span class=\"co2\">% flt calculations</span><br/>y\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$2</span>\t<span class=\"co2\">%   id</span><br/>z\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$3</span>\t<span class=\"co2\">% z = sum series</span><br/>t\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$4</span>\t<span class=\"co2\">% temp var</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\tData_Segment<br/>\t<span class=\"kw2\">GREG</span>\t@<br/>BUF\t<span class=\"kw2\">OCTA</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t\t<span class=\"co2\">% print buffer</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\t<span class=\"nu2\">#1000</span><br/>\t<span class=\"kw2\">GREG</span>\t@<br/><span class=\"co3\"><br/>// print floating point number in scientific format: 0.xxx...ey.. </span><br/><span class=\"co3\">// most of this routine is adopted from:</span><br/><span class=\"co3\">// http://www.pspu.ru/personal/eremin/emmi/rom_subs/printreal.html</span><br/><span class=\"co3\">// float number in z</span><br/>\t<span class=\"kw2\">GREG</span>\t@<br/>NaN\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">\"NaN..\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>NewLn\t<span class=\"kw2\">BYTE</span>\t<span class=\"nu2\">#a</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>1H\t<span class=\"kw1\">LDA</span>\tx<span class=\"sy0\">,</span>NaN<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>prtFlt\t<span class=\"kw1\">FUN</span>\tx<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span>z\t\t<span class=\"co2\">% test if z == NaN</span><br/>\t<span class=\"kw1\">BNZ</span>\tx<span class=\"sy0\">,</span><span class=\"nu1\">1B</span><br/>\t<span class=\"kw1\">CMP</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t\t<span class=\"co2\">% if necessary remember it is neg</span><br/>\t<span class=\"kw1\">BNN</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu1\">4F</span><br/>Sign\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">'-'</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>Sign<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">ANDNH</span>\tz<span class=\"sy0\">,</span><span class=\"nu2\">#8000</span>\t\t<span class=\"co2\">% make number pos</span><br/><span class=\"co3\">// normalizing float number</span><br/>4H\t<span class=\"kw1\">SETH</span>\t<span class=\"nu3\">$74</span><span class=\"sy0\">,</span><span class=\"nu2\">#4024</span>\t<span class=\"co2\">% initialize mulfactor = 10.0</span><br/>\t<span class=\"kw1\">SETH</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu2\">#0023</span><br/>\t<span class=\"kw1\">INCMH</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu2\">#86f2</span><br/>\t<span class=\"kw1\">INCML</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu2\">#6fc1</span>\t<span class=\"co2\">%</span><br/>\t<span class=\"kw1\">FLOT</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu3\">$73</span>\t\t<span class=\"co2\">% $73 = float 10^16</span><br/>\t<span class=\"kw2\">SET</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">16</span>\t\t<span class=\"co2\">% set # decimals to 16</span><br/>8H\t<span class=\"kw1\">FCMP</span>\t<span class=\"nu3\">$72</span><span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu3\">$73</span>\t<span class=\"co2\">% while z &gt;= 10^16 do</span><br/>\t<span class=\"kw1\">BN</span>\t<span class=\"nu3\">$72</span><span class=\"sy0\">,</span><span class=\"nu1\">9F</span>\t\t<span class=\"co2\">% </span><br/>\t<span class=\"kw1\">FDIV</span>\tz<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu3\">$74</span>\t\t<span class=\"co2\">%  z = z / 10.0 </span><br/>\t<span class=\"kw1\">ADD</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<span class=\"co2\">%  incr exponent</span><br/>\t<span class=\"kw1\">JMP</span>\t<span class=\"nu1\">8B</span>\t\t<span class=\"co2\">% wend</span><br/>9H\t<span class=\"kw1\">FDIV</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu3\">$74</span>\t<span class=\"co2\">% 10^16 / 10.0</span><br/>5H\t<span class=\"kw1\">FCMP</span>\t<span class=\"nu3\">$72</span><span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu3\">$73</span>\t<span class=\"co2\">% while z &lt; 10^15 do </span><br/>\t<span class=\"kw1\">BNN</span>\t<span class=\"nu3\">$72</span><span class=\"sy0\">,</span><span class=\"nu1\">6F</span><br/>\t<span class=\"kw1\">FMUL</span>\tz<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu3\">$74</span>\t\t<span class=\"co2\">%  z = z * 10.0</span><br/>\t<span class=\"kw1\">SUB</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<span class=\"co2\">%  exp = exp - 1</span><br/>\t<span class=\"kw1\">JMP</span>\t<span class=\"nu1\">5B</span><br/>NulPnt\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">'0'</span><span class=\"sy0\">,</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span><span class=\"nu2\">#00</span><br/>6H\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NulPnt\t<span class=\"co2\">% print '0.' to StdOut</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">FIX</span>\tz<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>z\t\t<span class=\"co2\">% convert float z to integer </span><br/><span class=\"co3\">// print mantissa</span><br/>0H\t<span class=\"kw2\">GREG</span>\t<span class=\"nu2\">#3030303030303030</span><br/>\t<span class=\"kw1\">STO</span>\t<span class=\"nu1\">0B</span><span class=\"sy0\">,</span>BUF<br/>\t<span class=\"kw1\">STO</span>\t<span class=\"nu1\">0B</span><span class=\"sy0\">,</span>BUF<span class=\"sy0\">+</span><span class=\"nu1\">8</span>\t<span class=\"co2\">% store print mask in buffer</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>BUF<span class=\"sy0\">+</span><span class=\"nu1\">16</span>\t<span class=\"co2\">% points after LSD</span><br/><span class=\"co3\">\t\t\t\t% repeat</span><br/>2H\t<span class=\"kw1\">SUB</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<span class=\"co2\">%   move pointer down</span><br/>\t<span class=\"kw1\">DIV</span>\tz<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu1\">10</span>\t\t<span class=\"co2\">%   (q,r) = divmod z 10 </span><br/>\t<span class=\"kw1\">GET</span>\tt<span class=\"sy0\">,</span><span class=\"kw3\">rR</span>\t\t<span class=\"co2\">%   get remainder</span><br/>\t<span class=\"kw1\">INCL</span>\tt<span class=\"sy0\">,</span><span class=\"st0\">'0'</span>\t\t<span class=\"co2\">%   convert to ascii digit</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">%   store digit in buffer</span><br/>\t<span class=\"kw1\">BNZ</span>\tz<span class=\"sy0\">,</span><span class=\"nu1\">2B</span>\t\t<span class=\"co2\">% until q == 0</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">% print mantissa</span><br/>Exp\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">'e'</span><span class=\"sy0\">,</span><span class=\"nu2\">#00</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>Exp\t<span class=\"co2\">% print 'exponent' indicator</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/><span class=\"co3\">// print exponent</span><br/>0H\t<span class=\"kw2\">GREG</span>\t<span class=\"nu2\">#3030300000000000</span><br/>\t<span class=\"kw1\">STO</span>\t<span class=\"nu1\">0B</span><span class=\"sy0\">,</span>BUF<br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>BUF<span class=\"sy0\">+</span><span class=\"nu1\">2</span>\t<span class=\"co2\">% store print mask in buffer</span><br/>\t<span class=\"kw1\">CMP</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">% if exp neg then place - in buffer</span><br/>\t<span class=\"kw1\">BNN</span>\t<span class=\"nu3\">$73</span><span class=\"sy0\">,</span><span class=\"nu1\">2F</span><br/>ExpSign\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">'-'</span>\t<br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>ExpSign<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">NEG</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu3\">$75</span>\t\t<span class=\"co2\">% make exp positive</span><br/>2H\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>BUF<span class=\"sy0\">+</span><span class=\"nu1\">3</span>\t<span class=\"co2\">% points after LSD</span><br/><span class=\"co3\">\t\t\t\t% repeat</span><br/>3H\t<span class=\"kw1\">SUB</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<span class=\"co2\">%   move pointer down</span><br/>\t<span class=\"kw1\">DIV</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span>\t<span class=\"co2\">%   (q,r) = divmod exp 10</span><br/>\t<span class=\"kw1\">GET</span>\tt<span class=\"sy0\">,</span><span class=\"kw3\">rR</span><br/>\t<span class=\"kw1\">INCL</span>\tt<span class=\"sy0\">,</span><span class=\"st0\">'0'</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">%   store exp. digit in buffer</span><br/>\t<span class=\"kw1\">BNZ</span>\t<span class=\"nu3\">$75</span><span class=\"sy0\">,</span><span class=\"nu1\">3B</span>\t\t<span class=\"co2\">% until q == 0</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">% print exponent</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NewLn<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">% do a NL</span><br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">% return</span><br/>\u00a0<br/>i  <span class=\"kw2\">IS</span> <span class=\"nu3\">$5</span> <span class=\"co1\">;iu IS $6</span><br/>Main\t<span class=\"kw2\">SET</span>\tiu<span class=\"sy0\">,</span><span class=\"nu1\">1000</span><br/>\t<span class=\"kw1\">SETH</span>\ty<span class=\"sy0\">,</span><span class=\"nu2\">#3ff0</span>     y = <span class=\"nu1\">1</span><span class=\"sy0\">.</span><span class=\"nu1\">0</span><br/>\t<span class=\"kw1\">SETH</span>\tz<span class=\"sy0\">,</span><span class=\"nu2\">#0000</span>     z = <span class=\"nu1\">0</span><span class=\"sy0\">.</span><span class=\"nu1\">0</span><br/>\t<span class=\"kw2\">SET</span>\ti<span class=\"sy0\">,</span><span class=\"nu1\">1</span>          for <span class=\"br0\">(</span>i=<span class=\"nu1\">1</span><span class=\"co1\">;i&lt;=1000; i++ ) {</span><br/>1H\t<span class=\"kw1\">FLOT</span>\tx<span class=\"sy0\">,</span>i           x = int i<br/>\t<span class=\"kw1\">FMUL</span>\tx<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>x         x = x^<span class=\"nu1\">2</span><br/>\t<span class=\"kw1\">FDIV</span>\tx<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>x         x = <span class=\"nu1\">1</span> <span class=\"sy0\">/</span> x<br/>\t<span class=\"kw1\">FADD</span>\tz<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span>x         s = s <span class=\"sy0\">+</span> x<br/>\t<span class=\"kw1\">ADD</span>\ti<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">1</span><br/>\t<span class=\"kw1\">CMP</span>\tt<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>iu<br/>\t<span class=\"kw1\">PBNP</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">1B</span>         <span class=\"br0\">}</span> z = sum<br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span>prtFlt  print sum <span class=\"sy0\">--</span>&gt; StdOut<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span></pre>"}, {"lang": "Modula-3", "loc": 19, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Sum <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Math;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> sum<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span> <span class=\"sy0\">:=</span> 0.0D0;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> F<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> 1.0D0 <span class=\"sy0\">/</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> 2.0D0<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> F;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">DO</span><br/>    sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> F<span class=\"br0\">(</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum of F(x) from 1 to 1000 is \"</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">LongReal</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Sum.</pre>"}, {"lang": "MUMPS", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>SOAS(N)<br/> NEW SUM,I SET SUM=0<br/> FOR I=1:1:N DO<br/> .SET SUM=SUM+(1/((I*I)))<br/> QUIT SUM<br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">|sum (1 / power (count 1000) 2)<br/>=1.64393</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span>s <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#inc\"><span class=\"kw1\">inc</span></a> s <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> i i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>var ls: seq[float] = @[]<br/>for x in 1..1000:<br/>  ls.add(1.0 / float(x * x))<br/>echo sum(ls)</pre>"}, {"lang": "Objeck", "loc": 26, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> SumSeries <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      DoSumSeries<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> DoSumSeries<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      start <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      end <span class=\"sy0\">:=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span> <span class=\"sy0\">:=</span> start<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum of f(x) from \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" to \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>end<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" is \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sum a b fn <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> a <span class=\"kw1\">to</span> b <span class=\"kw1\">do</span><br/>    result <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>result <span class=\"sy0\">+.</span> fn i<br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">!</span>result</pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/sum.html\"><span class=\"kw5\">sum</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy2\">./</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"sy2\">.^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: sumSerie(s, n)   0 n seq apply(#[ s perform + ])\u00a0;</pre>"}, {"lang": "OpenEdge/Progress", "loc": 8, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> dcResult <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> n <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">:</span><br/>  <span class=\"me0\">dcResult</span> <span class=\"sy0\">=</span> dcResult <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span>  <span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DISPLAY</span> dcResult <span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 11, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SumSeries</span> S N<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>Map <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 N 1<span class=\"br0\">}</span> S<span class=\"br0\">}</span><br/>      Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"sy0\">.</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">S</span> X<span class=\"br0\">}</span><br/>     1<span class=\"sy0\">.</span> <span class=\"sy0\">/</span> <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat X<span class=\"sy0\">*</span>X<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>SumSeries S 1000<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">sum</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1000</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Panda", "loc": 1, "block": "<pre class=\"text highlighted_source\">sum{{1.0.divide(1..1000.sqr)}}</pre>"}, {"lang": "Pascal", "loc": 24, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> SumSeries<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tOutput <span class=\"sy3\">=</span> double<span class=\"sy1\">;</span><span class=\"co1\">//extended;</span><br/>  tmyFunc <span class=\"sy3\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>number<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> tOutput<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> tOutput<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  f <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>sqr<span class=\"br0\">(</span>tOutput<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Sum<span class=\"br0\">(</span>from<span class=\"sy1\">,</span>upto<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span>func<span class=\"sy1\">:</span>tmyFunc<span class=\"br0\">)</span><span class=\"sy1\">:</span>tOutput<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  res<span class=\"sy1\">:</span> tOutput<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//  for from:= from to upto do res\u00a0:= res + f(from);</span><br/>  <span class=\"kw1\">for</span> upTo <span class=\"sy1\">:</span><span class=\"sy3\">=</span> upto <span class=\"kw1\">downto</span> from <span class=\"kw1\">do</span> res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res <span class=\"sy3\">+</span> f<span class=\"br0\">(</span>upTo<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The sum of 1/x^2 from 1 to 1000 is: '</span><span class=\"sy1\">,</span> Sum<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span><span class=\"sy2\">@</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Whereas pi^2/6 is:                  '</span><span class=\"sy1\">,</span> pi<span class=\"sy3\">*</span>pi<span class=\"sy3\">/</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"co5\">$_</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"kw1\">foreach</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$sum<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function sumto(atom n)<br/>atom res = 0<br/>    for i=1 to n do<br/>        res += 1/(i*i)<br/>    end for<br/>    return res<br/>end function<br/>?sumto(1000)</pre>"}, {"lang": "PHP", "loc": 23, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @author Elad Yosifon<br/> */</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @param int $n<br/> * @param int $k<br/> * @return float|int<br/> */</span><br/><span class=\"kw2\">function</span> sum_of_a_series<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$sum_of_a_series</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"re0\">$k</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;=</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$sum_of_a_series</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$sum_of_a_series</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> sum_of_a_series<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(scl 9)  # Calculate with 9 digits precision<br/>\u00a0<br/>(let S 0<br/>   (for I 1000<br/>      (inc 'S (*/ 1.0 (* I I))) )<br/>   (prinl (round S 6)) )  # Round result to 6 digits</pre>"}, {"lang": "Pike", "loc": 3, "block": "<pre class=\"pike highlighted_source\">array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> x <span class=\"sy0\">=</span> enumerate<span class=\"br0\">(</span><span class=\"nu0\">1000</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>`<span class=\"sy0\">+</span><span class=\"br0\">(</span>@<span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span>pow<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1.64393</span></pre>"}, {"lang": "PL/I", "loc": 8, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* sum the first 1000 terms of the series 1/n**2. */</span><br/>s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw1\">float</span><span class=\"br0\">(</span>i<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 6, "block": "<pre class=\"text highlighted_source\">lvars s = 0, j;<br/>for j from 1 to 1000 do<br/>    s + 1.0/(j*j) -&gt; s;<br/>endfor;<br/>\u00a0<br/>s =&gt;</pre>"}, {"lang": "PostScript", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/aproxriemann{<br/>/x exch def<br/>/i 1 def<br/>/sum 0 def<br/>x{<br/>/sum sum i -2 exp add def<br/>/i i 1 add def<br/>}repeat<br/>sum ==<br/>}def<br/>\u00a0<br/>1000 aproxriemann<br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 3, "block": "<pre class=\"text highlighted_source\">sum = 0.0<br/>1 to 1000 (i): sum = sum + 1.0 / (i * i).<br/>sum print</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> `<br/>       <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"br0\">}</span> `<br/>       <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span><br/><span class=\"kw1\">Write-Host</span> Sum <span class=\"sy0\">=</span> <span class=\"re0\">$x</span>.Sum</pre>"}, {"lang": "Prolog", "loc": 4, "block": "<pre class=\"prolog highlighted_source\">sum<span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1000</span><span class=\"sy4\">,</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span>L <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>N^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Ls<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        sumlist<span class=\"br0\">(</span>Ls<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Define</span> i, sum.d<br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000</span><br/>  sum<span class=\"sy0\">+</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">Debug</span> sum</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span>x * x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">print( sum( 1/seq(1000)^2 ) )</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang typed/racket<br/>\u00a0<br/>(: S\u00a0: Natural -&gt; Real)<br/>(define (S n)<br/>  (for/sum:\u00a0: Real ([k\u00a0: Natural (in-range 1 (+ n 1))])<br/>    (/ 1.0 (* k k))))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 2, "block": "<pre class=\"text highlighted_source\">0 1 1000 1 range each 1.0 swap dup * / +<br/>\"%g\\n\" print</pre>"}, {"lang": "Red", "loc": 5, "block": "<pre class=\"text highlighted_source\">Red []<br/>s: 0<br/>repeat n 1000 [  s:   1.0 / n ** 2  + s  ]<br/>print s<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program sums the first    N    terms of     1/(k**2),          k=1 \u2500\u2500\u25ba  N.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N D <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">1000</span>                   <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> D==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> D==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> D=  <span class=\"nu0\">60</span>                   <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> D                                 <span class=\"coMULTI\">/*use D digits (9 is the REXX default).*/</span><br/>$=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*initialize the sum to zero.          */</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                          <span class=\"coMULTI\">/* [\u2193]  compute for   N   terms.       */</span><br/>          $=$  +  <span class=\"nu0\">1</span><span class=\"sy0\">/</span>k<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                         <span class=\"coMULTI\">/*add a squared reciprocal to the sum. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'The sum of'</span>     N     <span class=\"st0\">\"terms is:\"</span>    $      <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>sum = 0<br/>for i =1 to 1000<br/>    sum = sum + 1 /(pow(i,2))<br/>next<br/>decimals(8)<br/>see sum<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; sum( (1 ./ [1:1000]) .^ 2 ) - const.pi^2/6<br/>-0.000999500167<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, x<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"co1\">#=&gt; 1.64393456668156</span></pre>"}, {"lang": "Run BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i =1 to 1000<br/>  sum = sum + 1 /( i^2)<br/>next i<br/>print sum</pre>"}, {"lang": "Rust", "loc": 13, "block": "<pre class=\"text highlighted_source\">const LOWER: i32 = 1;<br/>const UPPER: i32 = 1000;<br/>\u00a0<br/>// Because the rule for our series is simply adding one, the number of terms are the number of<br/>// digits between LOWER and UPPER<br/>const NUMBER_OF_TERMS: i32 = (UPPER + 1) - LOWER;<br/>fn main() {<br/>    // Formulaic method<br/>    println!(\"{}\", (NUMBER_OF_TERMS * (LOWER + UPPER)) / 2);<br/>    // Naive method<br/>    println!(\"{}\", (LOWER..UPPER + 1).fold(0, |sum, x| sum + x));<br/>}<br/>\u00a0</pre>"}, {"lang": "SAS", "loc": 8, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>s=<span class=\"nu0\">0</span>;<br/><span class=\"kw5\">do</span> <span class=\"kw3\">n</span>=<span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span>;<br/>   s+<span class=\"nu0\">1</span>/<span class=\"kw3\">n</span><span class=\"coMULTI\">**2;</span>        <span class=\"coMULTI\">/* s+x is synonym of s=s+x */</span><br/><span class=\"kw5\">end</span>;<br/>e=s-constant<span class=\"br0\">(</span><span class=\"st0\">'pi'</span><span class=\"br0\">)</span><span class=\"coMULTI\">**2/6;</span><br/><span class=\"kw3\">put</span> s e;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span> map <span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> sum<br/>res30<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"nu0\">1.6439345666815615</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum a b fn<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i a <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>result <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> result <span class=\"br0\">(</span>fn i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i b<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>sum <span class=\"nu0\">1</span> <span class=\"nu0\">1000</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; fraction</span><br/><span class=\"br0\">(</span>exact<span class=\"sy0\">-&gt;</span>inexact <span class=\"br0\">(</span>sum <span class=\"nu0\">1</span> <span class=\"nu0\">1000</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; decimal</span></pre>"}, {"lang": "Seed7", "loc": 16, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const func float: invsqr (in float: n) is<br/>  return 1.0 / n**2;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>    var float: sum is 0.0;<br/>  begin<br/>    for i range 1 to 1000 do<br/>      sum +:= invsqr(flt(i));<br/>    end for;<br/>    writeln(sum digits 6 lpad 8);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say sum<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">((1 to: 1000) reduce: [|:x\u00a0:y | x + (y squared reciprocal as: Float)]).</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re5\">1000</span><span class=\"br0\">)</span> fold: <span class=\"br0\">[</span>:<span class=\"re5\">sum</span>\u00a0:<span class=\"re5\">aNumber</span> |<br/>  sum + <span class=\"br0\">(</span><span class=\"re5\">aNumber</span> squared reciprocal<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> asFloat displayNl.</pre>"}, {"lang": "SQL", "loc": 7, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> t1 <span class=\"br0\">(</span>n <span class=\"kw1\">REAL</span><span class=\"br0\">)</span>;<br/><span class=\"co1\">-- this is postgresql specific, fill the table</span><br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> t1 <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> generate_series<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>::<span class=\"kw1\">REAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">WITH</span> tt <span class=\"kw1\">AS</span> <span class=\"br0\">(</span><br/>  <span class=\"kw1\">SELECT</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> recip <span class=\"kw1\">FROM</span> t1<br/><span class=\"br0\">)</span> <span class=\"kw1\">SELECT</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>recip<span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> tt; <br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 6, "block": "<pre class=\"text highlighted_source\">function series(n) {<br/>\treturn(sum((n..1):^-2))<br/>}<br/>\u00a0<br/>series(1000)-pi()^2/6<br/>  -.0009995002</pre>"}, {"lang": "Swift", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>func sumSeries(var n: Int) -&gt; Double {<br/>    var ret: Double = 0<br/>\u00a0<br/>    for i in 1...n {<br/>        ret += (1 / pow(Double(i), 2))<br/>    }<br/>\u00a0<br/>    return ret<br/>}<br/>\u00a0<br/>output: 1.64393456668156<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 12, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> partial_sum <span class=\"br0\">{</span>func - start - stop<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"re0\">$start</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$stop</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"br0\">[</span>apply <span class=\"re0\">$func</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> S <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> / <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>partial_sum <span class=\"re0\">$S</span> from <span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span> <span class=\"sy0\">;</span><span class=\"co1\"># =&gt; 1.6439345666815615</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u2211(1/X\u00b2,X,1,1000)<br/>\u00a0</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u2211(1/x^2,x,1,1000)</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">txr -p '[reduce-left + (let ((i 0)) (gen (&lt; i 1000) (/ 1.0 (* (inc i) i)))) 0]'<br/>1.64393456668156</pre>"}, {"lang": "UnixPipes", "loc": 18, "block": "<pre class=\"bash highlighted_source\">term<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re2\">b</span>=<span class=\"re4\">$1</span>;<span class=\"re2\">res</span>=<span class=\"re4\">$2</span><br/>   <span class=\"kw3\">echo</span> <span class=\"st0\">\"scale=5;1/(<span class=\"es2\">$res</span>*<span class=\"es2\">$res</span>)+<span class=\"es2\">$b</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">bc</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"kw2\">read</span> B; <span class=\"re2\">res</span>=<span class=\"re4\">$1</span>;<br/>  <span class=\"kw3\">test</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>term <span class=\"re1\">$B</span> <span class=\"re1\">$res</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>term <span class=\"nu0\">0</span> <span class=\"re1\">$res</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fold<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">func</span>=<span class=\"re4\">$1</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">while</span> <span class=\"kw2\">read</span> a\u00a0; <span class=\"kw1\">do</span><br/>      fold <span class=\"re1\">$func</span> <span class=\"sy0\">|</span> <span class=\"re1\">$func</span> <span class=\"re1\">$a</span><br/>  <span class=\"kw1\">done</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"nu0\">3</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> fold <span class=\"kw2\">sum</span></pre>"}, {"lang": "Unicon", "loc": 6, "block": "<pre class=\"text highlighted_source\">#import flo<br/>#import nat<br/>\u00a0<br/>#cast\u00a0%e<br/>\u00a0<br/>total = plus:-0 div/*1. sqr* float*t iota 1001</pre>"}, {"lang": "Ursala", "loc": 6, "block": "<pre class=\"text highlighted_source\">#import flo<br/>#import nat<br/>\u00a0<br/>#cast\u00a0%e<br/>\u00a0<br/>total = plus:-0 div/*1. sqr* float*t iota 1001</pre>"}, {"lang": "Vala", "loc": 11, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i, start <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, end <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tsum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, sum.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 5, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' Sum of a series<br/></span>    <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> 1000<br/>        s=s+1/i^2<br/>    <span class=\"kw3\">next</span><br/>    wscript.echo s </pre>"}, {"lang": "Visual Basic .NET", "loc": 9, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"co1\">' Sum of a series</span><br/>    <span class=\"kw1\">Sub</span> SumOfaSeries<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw2\">Double</span><br/>        s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000</span><br/>            s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> i <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">Next</span> <span class=\"co1\">'i</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> </pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@sum\u00a0!*#~V1Sn @to 1000\u00a0; returns 1.6439345666815615</pre>"}, {"lang": "XPL0", "loc": 6, "block": "<pre class=\"text highlighted_source\">code CrLf=9;  code real RlOut=48;<br/>int  X;  real S;<br/>[S:= 0.0;<br/>for X:= 1 to 1000 do S:= S + 1.0/float(X*X);<br/>RlOut(0, S);  CrLf(0);<br/>]</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre class=\"text highlighted_source\">(1./indgen(1:1000)^2)(sum)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1.0..1000].reduce(fcn(p,n){ p + 1.0/(n*n) },0.0)  //--&gt;1.64394</pre>"}]}