{"task": "Pangram_checker", "blocks": [{"lang": "360 Assembly", "loc": 38, "block": "<pre class=\"text highlighted_source\">*        Pangram RC                11/08/2015<br/>PANGRAM  CSECT<br/>         USING  PANGRAM,R12<br/>         LR     R12,R15<br/>BEGIN    LA     R9,SENTENCE<br/>         LA     R6,4<br/>LOOPI    LA     R10,ALPHABET       loop on sentences<br/>         LA     R7,26<br/>LOOPJ    LA     R5,0               loop on letters<br/>         LR     R11,R9<br/>         LA     R8,60<br/>LOOPK    MVC    BUFFER+1(1),0(R10) loop in sentence<br/>         CLC    0(1,R10),0(R11)    if alphabet[j=sentence[i]<br/>         BNE    NEXTK<br/>         LA     R5,1               found<br/>NEXTK    LA     R11,1(R11)         next character<br/>         BCT    R8,LOOPK <br/>         LTR    R5,R5              if found<br/>         BNZ    NEXTJ<br/>         MVI    BUFFER,C'?'        not found<br/>         B      PRINT<br/>NEXTJ    LA     R10,1(R10)         next letter<br/>         BCT    R7,LOOPJ <br/>         MVC    BUFFER(2),=CL2'OK'<br/>PRINT    MVC    BUFFER+3(60),0(R9)<br/>         XPRNT  BUFFER,80<br/>NEXTI    LA     R9,60(R9)          next sentence<br/>         BCT    R6,LOOPI <br/>RETURN   XR     R15,R15<br/>         BR     R14<br/>ALPHABET DC     CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'<br/>SENTENCE DC     CL60'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'<br/>         DC     CL60'THE FIVE BOXING WIZARDS DUMP QUICKLY.'<br/>         DC     CL60'HEAVY BOXES PERFORM WALTZES AND JIGS.'<br/>         DC     CL60'PACK MY BOX WITH FIVE DOZEN LIQUOR JUGS.'<br/>BUFFER   DC     CL80' '<br/>         YREGS  <br/>         END    PANGRAM</pre>"}, {"lang": "ACL2", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> contains-each <span class=\"br0\">(</span>needles haystack<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp needles<span class=\"br0\">)</span><br/>       t<br/>       <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span>first needles<span class=\"br0\">)</span> haystack<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>contains-each <span class=\"br0\">(</span>rest needles<span class=\"br0\">)</span> haystack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pangramp <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>contains-each <span class=\"br0\">(</span>coerce <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span> '<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>string-downcase str<span class=\"br0\">)</span> '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 16, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> pangram<span class=\"br0\">(</span>k:<span class=\"kw3\">string</span><span class=\"br0\">)</span>:<span class=\"kw3\">Boolean</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">var</span> lowerK:<span class=\"kw3\">String</span> = k.<span class=\"kw3\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw2\">var</span> has:<span class=\"kw3\">Object</span> = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">Number</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>=k.<span class=\"me1\">length</span>-<span class=\"nu0\">1</span>; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    has<span class=\"br0\">[</span>lowerK.<span class=\"kw3\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"kw2\">true</span>;<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">var</span> result:<span class=\"kw3\">Boolean</span> = <span class=\"kw2\">true</span>;<br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> ch:<span class=\"kw3\">String</span>=<span class=\"st0\">'a'</span>; ch <span class=\"sy0\">&lt;</span>= <span class=\"st0\">'z'</span>; ch=<span class=\"kw3\">String</span>.<span class=\"kw3\">fromCharCode</span><span class=\"br0\">(</span>ch.<span class=\"kw3\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      result = result <span class=\"sy0\">&amp;&amp;</span> has<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result <span class=\"sy0\">||</span> <span class=\"kw2\">false</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Maps</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Maps</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Handling</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Handling</span>;<br/><span class=\"kw3\">procedure</span> pangram <span class=\"kw1\">is</span><br/>\u00a0<br/>\t<span class=\"kw3\">function</span> ispangram<span class=\"br0\">(</span>txt: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>\t\tlowtxt\u00a0: String\u00a0:= To_Lower<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>;<br/>\t\tletset,txtset\u00a0: Character_Set;<br/>\t\t<span class=\"kw1\">begin</span><br/>\t\tletset\u00a0:= To_Set<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span>;<br/>\t\ttxtset\u00a0:= To_Set<span class=\"br0\">(</span>lowtxt<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>letset-txtset<span class=\"br0\">)</span>=Null_Set;<br/>\t<span class=\"kw1\">end</span> ispangram;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>put_line<span class=\"br0\">(</span>Boolean'Image<span class=\"br0\">(</span>ispangram<span class=\"br0\">(</span><span class=\"st0\">\"This is a test\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>put_line<span class=\"br0\">(</span>Boolean'Image<span class=\"br0\">(</span>ispangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>put_line<span class=\"br0\">(</span>Boolean'Image<span class=\"br0\">(</span>ispangram<span class=\"br0\">(</span><span class=\"st0\">\"NOPQRSTUVWXYZ  abcdefghijklm\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>put_line<span class=\"br0\">(</span>Boolean'Image<span class=\"br0\">(</span>ispangram<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklopqrstuvwxyz\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">--Missing m, n</span><br/><span class=\"kw1\">end</span> pangram;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 36, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># init pangram: #</span><br/><span class=\"kw3\">INT</span> la <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span> lz <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"z\"</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> ua <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> uz <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"Z\"</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">IF</span> lz<span class=\"sy1\">-</span>la<span class=\"sy1\">+</span>1 <span class=\"sy1\">&gt;</span> <span class=\"kw20\">bits width</span> <span class=\"kw2\">THEN</span><br/>  put<span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"st0\">\"Exception: insufficient bits in word for task\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  stop<br/><span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is a pangram <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> test<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">BITS</span> a2z <span class=\"sy1\">:=</span> <span class=\"kw8\">BIN</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"re0\">2r1</span> <span class=\"kw11\">SHL</span> <span class=\"br0\">(</span>lz<span class=\"sy1\">-</span>la<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># assume: ASCII &amp; Binary #</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> test <span class=\"kw2\">WHILE</span><br/>    <span class=\"kw3\">INT</span> c <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> test<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> la <span class=\"sy1\">&lt;=</span> c <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> lz <span class=\"kw2\">THEN</span><br/>      a2z <span class=\"sy1\">:=</span> a2z <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span><span class=\"br0\">(</span><span class=\"re0\">2r1</span> <span class=\"kw11\">SHL</span> <span class=\"br0\">(</span>c<span class=\"sy1\">-</span>la<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELIF</span> ua <span class=\"sy1\">&lt;=</span> c <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> uz <span class=\"kw2\">THEN</span><br/>      a2z <span class=\"sy1\">:=</span> a2z <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span><span class=\"br0\">(</span><span class=\"re0\">2r1</span> <span class=\"kw11\">SHL</span> <span class=\"br0\">(</span>c<span class=\"sy1\">-</span>ua<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> a2z <span class=\"sy1\">/=</span> <span class=\"re0\">2r0</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw7\">SKIP</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  a2z <span class=\"sy1\">=</span> <span class=\"re0\">2r0</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> test list <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"st0\">\"Big fjiords vex quick waltz nymph\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"The quick brown fox jumps over a lazy dog\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"A quick brown fox jumps over a lazy dog\"</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> key <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> test list <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">STRING</span> test <span class=\"sy1\">=</span> test list<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> is a pangram<span class=\"br0\">(</span>test<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span>test<span class=\"sy1\">,</span><span class=\"st0\">\"\"</span><span class=\"st0\">\" is a pangram!\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    a\u2190'abcdefghijklmnopqrstuvwxyz'<br/>    A\u2190'ABCDEFGHIJKLMNOPQRSTUVWXYZ'<br/>\u00a0<br/>    Panagram\u2190{\u2227/ \u2228\u233f 2 26\u2374(a,A) \u220a \u2375}<br/>    Panagram 'This should fail'<br/>0<br/>    Panagram 'The quick brown fox jumps over the lazy dog'<br/>1<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 71, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span> <span class=\"co1\">-- ( for case conversion function )</span><br/>\u00a0<br/><span class=\"co1\">-- PANGRAM CHECK -------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- isPangram\u00a0:: String -&gt; Bool</span><br/><span class=\"kw3\">on</span> isPangram<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> charUnUsed<br/>        <span class=\"kw3\">property</span> lowerCaseString\u00a0: <span class=\"kw3\">my</span> toLower<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>            lowerCaseString does <span class=\"kw2\">not</span> contain c<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    length <span class=\"kw3\">of</span> filter<span class=\"br0\">(</span>charUnUsed, <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">end</span> isPangram<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    map<span class=\"br0\">(</span>isPangram, <span class=\"br0\">{</span>\u00ac<br/>        <span class=\"st0\">\"is this a pangram\"</span>, \u00ac<br/>        <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {false, true}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- toLower\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> toLower<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>        lowercaseStringWithLocale:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSLocale<span class=\"co2\">'</span>s currentLocale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> toLower</pre>"}, {"lang": "ATS", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>fun<br/>letter_check<br/>(<br/>cs: string, c0: char<br/>)\u00a0: bool = cs.exists()(lam(c) =&gt; c0 = c)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>fun<br/>Pangram_check<br/>  (text: string): bool = let<br/>//<br/>val<br/>alphabet = \"abcdefghijklmnopqrstuvwxyz\"<br/>val<br/>((*void*)) = assertloc(length(alphabet) = 26)<br/>//<br/>in<br/>  alphabet.forall()(lam(c) =&gt; letter_check(text, c) || letter_check(text, toupper(c)))<br/>end // end of [Pangram_check]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>val<br/>text0 = \"The quick brown fox jumps over the lazy dog.\"<br/>//<br/>val-true = Pangram_check(text0)<br/>val-false = Pangram_check(\"This is not a pangram sentence.\")<br/>//<br/>} (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>MinimizeBox<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> w300 r5 vText<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x105 w100 <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Default\"><span class=\"kw7\">Default</span></a><span class=\"sy0\">,</span> Check Pangram<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> Pangram Checker<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">ButtonCheckPangram:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><br/>        <span class=\"kw1\">If</span> Not <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> Char <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">64</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> Pangram<span class=\"sy0\">,</span> Character <span class=\"re0\">%Char%</span> is missing!<br/>            <span class=\"kw1\">Return</span><br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span> Pangram<span class=\"sy0\">,</span> OK`<span class=\"sy0\">,</span> this is a Pangram!<br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "AutoIt", "loc": 11, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/>Pangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Pangram<span class=\"br0\">(</span><span class=\"re0\">$s_String</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">26</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">IF</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm\"><span class=\"kw3\">StringInStr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s_String</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">64</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"No Pangram\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Character \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">64</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\" is missing\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Pangram\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Sentence is a Pangram\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>   allChars=<span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>;<br/>   <span class=\"kw5\">print</span> isPangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw5\">print</span> isPangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fo.\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> isPangram<span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    delete X;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>; k<span class=\"sy2\">&lt;</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span>; k<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        X<span class=\"br0\">[</span><span class=\"kw4\">toupper</span><span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>string,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy3\">++</span>;  <span class=\"co1\"># histogram</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>; k<span class=\"sy2\">&lt;=</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>allChars<span class=\"br0\">)</span>; k<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>X<span class=\"br0\">[</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>allChars,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"br0\">}</span>\t<br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 42, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> IsPangram! <span class=\"br0\">(</span>sentence <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\u00a0<br/>x <span class=\"sy0\">=</span> <span class=\"st0\">\"My dog has fleas.\"</span><br/><span class=\"kw1\">GOSUB</span> doIt<br/>x <span class=\"sy0\">=</span> <span class=\"st0\">\"The lazy dog jumps over the quick brown fox.\"</span><br/><span class=\"kw1\">GOSUB</span> doIt<br/>x <span class=\"sy0\">=</span> <span class=\"st0\">\"Jackdaws love my big sphinx of quartz.\"</span><br/><span class=\"kw1\">GOSUB</span> doIt<br/>x <span class=\"sy0\">=</span> <span class=\"st0\">\"What's a jackdaw?\"</span><br/><span class=\"kw1\">GOSUB</span> doIt<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/>\u00a0<br/>doIt:<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> IsPangram!<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<br/>    <span class=\"kw1\">RETURN</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> IsPangram! <span class=\"br0\">(</span>sentence <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>    <span class=\"co1\">'returns -1 (true) if sentence is a pangram, 0 (false) otherwise</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> l <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> s <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> t <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> letters<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>sentence<span class=\"br0\">)</span><br/>        s <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckucase%24.shtml\"><span class=\"kw3\">UCASE$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>sentence<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> s<br/>            <span class=\"kw1\">CASE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span> <span class=\"st0\">\"Z\"</span><br/>                t <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">65</span><br/>                letters<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">25</span><br/>        <span class=\"kw1\">IF</span> letters<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>            IsPangram! <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">FUNCTION</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    IsPangram! <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 30, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">===The Main Thing===</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">pangram</span> \"The quick brown fox jumps over the lazy dog.\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">pangram</span> \"The quick brown fox jumped over the lazy dog.\"<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">===The Function===</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">pangram</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> letters=abcdefgihjklmnopqrstuvwxyz<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">!</span><span class=\"re2\">inp: =</span><span class=\"sy0\">!</span><br/>\u00a0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> chr=<span class=\"sy0\">!</span><span class=\"re2\">str:~%<span class=\"re3\">cnt</span>%,1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">letters</span><span class=\"sy0\">!</span>\"==\"\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span> is a pangram<span class=\"co3\">^^</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">chr</span><span class=\"sy0\">!</span>\"==\"\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span> is <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> a pangram.<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> letters=<span class=\"sy0\">!</span><span class=\"re2\">letters:%<span class=\"re3\">chr</span>%=</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">      FOR test% = 1 TO 2<br/>        READ test$<br/>        PRINT \"\"\"\" test$ \"\"\" \"\u00a0;<br/>        IF FNpangram(test$) THEN<br/>          PRINT \"is a pangram\"<br/>        ELSE<br/>          PRINT \"is not a pangram\"<br/>        ENDIF<br/>      NEXT test%<br/>      END<br/>\u00a0<br/>      DATA \"The quick brown fox jumped over the lazy dog\"<br/>      DATA \"The five boxing wizards jump quickly\"<br/>\u00a0<br/>      DEF FNpangram(A$)<br/>      LOCAL C%<br/>      A$ = FNlower(A$)<br/>      FOR C% = ASC(\"a\") TO ASC(\"z\")<br/>        IF INSTR(A$, CHR$(C%)) = 0 THEN = FALSE<br/>      NEXT<br/>      = TRUE<br/>\u00a0<br/>      DEF FNlower(A$)<br/>      LOCAL A%, C%<br/>      FOR A% = 1 TO LEN(A$)<br/>        C% = ASCMID$(A$,A%)<br/>        IF C% &gt;= 65 IF C% &lt;= 90 MID$(A$,A%,1) = CHR$(C%+32)<br/>      NEXT<br/>      = A$</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;~&gt;:65*`!#v_:\"`\"`48*v&gt;g+04p1\\4p<br/>^#*`\\*93\\`0&lt;::-\"@\"-*&lt;^40!%2g4:_<br/>\"pangram.\"&lt;v*84&lt;_v#-\":\"g40\\\" a\"<br/>&gt;&gt;:#,_55+,@&gt;\"ton\"&gt;48*&gt;\"si tahT\"</pre>"}, {"lang": "Bracmat", "loc": 11, "block": "<pre class=\"text highlighted_source\">(isPangram=<br/>  k<br/>.   low$!arg:?arg<br/>  &amp; a:?k<br/>  &amp;   whl<br/>    ' ( @(!arg:?\u00a0!k\u00a0?)<br/>      &amp; chr$(1+asc$!k):?k:~&gt;z<br/>      )<br/>  &amp;\u00a0!k:&gt;z<br/>  &amp; <br/>);</pre>"}, {"lang": "Brat", "loc": 15, "block": "<pre class=\"text highlighted_source\">pangram? = { sentence |<br/>  letters = [:a\u00a0:b\u00a0:c\u00a0:d\u00a0:e\u00a0:f\u00a0:g\u00a0:h\u00a0:i\u00a0:j\u00a0:k\u00a0:l\u00a0:m<br/>   \u00a0:n\u00a0:o\u00a0:p\u00a0:q\u00a0:r\u00a0:s\u00a0:t\u00a0:u\u00a0:v\u00a0:w\u00a0:x\u00a0:y\u00a0:z]<br/>\u00a0<br/>    sentence.downcase!<br/>\u00a0<br/>    letters.reject! { l |<br/>      sentence.include? l<br/>    }<br/>\u00a0<br/>  letters.empty?<br/>}<br/>\u00a0<br/>p pangram? 'The quick brown fox jumps over the lazy dog.' #Prints true<br/>p pangram? 'Probably not a pangram.'  #Prints false</pre>"}, {"lang": "C", "loc": 41, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is_pangram<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>alpha <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"st0\">\"abcdefghjiklmnopqrstuvwxyz\"</span><br/>\t\t<span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> ch<span class=\"sy0\">,</span> wasused<span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ch <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> idx<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span> ch<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tidx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> alpha<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ttotal <span class=\"sy0\">+=</span> <span class=\"sy0\">!</span>wasused<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\twasused<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>total <span class=\"sy0\">==</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>tests<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"The qu1ck brown fox jumps over the lazy d0g.\"</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span> is\u00a0%sa pangram<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t\ttests<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> is_pangram<span class=\"br0\">(</span>tests<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"not \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPangram<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> text, <span class=\"kw4\">string</span> alphabet <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> alphabet<span class=\"sy0\">.</span><span class=\"me1\">All</span><span class=\"br0\">(</span>text<span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arguments<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>arguments<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> arguments<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IsPangram</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 25, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;cctype&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> alphabet<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> is_pangram<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy4\">::</span><span class=\"kw3\">tolower</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">includes</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, alphabet.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, alphabet.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> examples <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>,<br/>                           <span class=\"st0\">\"The quick white cat jumps over the lazy dog\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>.<span class=\"me1\">setf</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> text <span class=\"sy4\">:</span> examples<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Is <span class=\"es1\">\\\"</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> text <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\\"</span> a pangram? - \"</span> <span class=\"sy1\">&lt;&lt;</span> is_pangram<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 17, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tfunction pangram(String sentence) =&gt;<br/> \t\tlet(alphabet = set('a'..'z'),<br/>\t\t\tletters = set(sentence.lowercased.filter(alphabet.contains)))<br/> \t\tletters == alphabet;<br/>\u00a0<br/> \tvalue sentences = [<br/> \t\t\"The quick brown fox jumps over the lazy dog\",<br/> \t\t\"\"\"Watch \"Jeopardy!\", Alex Trebek's fun TV quiz game.\"\"\",<br/> \t\t\"Pack my box with five dozen liquor jugs.\",<br/> \t\t\"blah blah blah\"<br/> \t];<br/> \tfor(sentence in sentences) {<br/> \t\tprint(\"\\\"``sentence``\\\" is a pangram? ``pangram(sentence)``\");<br/> \t}<br/>}</pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn pangram? <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>letters <span class=\"br0\">(</span>into #<span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>-<span class=\"sy0\">&gt;&gt;</span> s <span class=\"sy0\">.</span>toLowerCase <span class=\"br0\">(</span>filter letters<span class=\"br0\">)</span> <span class=\"br0\">(</span>into #<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span> letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 51, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> pan-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> text-<span class=\"kw3\">string</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> len <span class=\"kw3\">binary</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> trailing-<span class=\"kw3\">spaces</span> <span class=\"kw3\">binary</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> pangram-flag <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> <span class=\"st0\">\"n\"</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">88</span> is-not-pangram <span class=\"kw3\">value</span> <span class=\"st0\">\"n\"</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">88</span> is-pangram <span class=\"kw3\">value</span> <span class=\"st0\">\"y\"</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       begin<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Enter text string:\"</span><br/>           <span class=\"kw2\">accept</span> text-<span class=\"kw3\">string</span><br/>           <span class=\"kw3\">set</span> is-not-pangram <span class=\"kw2\">to</span> <span class=\"kw3\">true</span><br/>           <span class=\"kw2\">initialize</span> trailing-<span class=\"kw3\">spaces</span> len<br/>           <span class=\"kw1\">inspect</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>text-<span class=\"kw3\">string</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">tallying</span> trailing-<span class=\"kw3\">spaces</span> <span class=\"kw3\">for</span> <span class=\"kw3\">leading</span> <span class=\"kw3\">space</span><br/>               len <span class=\"kw3\">for</span> <span class=\"kw3\">characters</span> <span class=\"kw3\">after</span> <span class=\"kw3\">space</span><br/>           <span class=\"kw2\">call</span> <span class=\"st0\">\"pangram\"</span> <span class=\"kw3\">using</span> pangram-flag len text-<span class=\"kw3\">string</span><br/>           <span class=\"kw1\">cancel</span> <span class=\"st0\">\"pangram\"</span><br/>           <span class=\"kw1\">if</span> is-pangram<br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"is a pangram\"</span><br/>           <span class=\"kw3\">else</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"is not a pangram\"</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> pan-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> pangram<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> lc-<span class=\"kw3\">alphabet</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> pangram-flag <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">88</span> is-not-pangram <span class=\"kw3\">value</span> <span class=\"st0\">\"n\"</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">88</span> is-pangram <span class=\"kw3\">value</span> <span class=\"st0\">\"y\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> len <span class=\"kw3\">binary</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> text-<span class=\"kw3\">string</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> pangram-flag len text-<span class=\"kw3\">string</span><span class=\"sy0\">.</span><br/>       begin<span class=\"sy0\">.</span><br/>           <span class=\"kw1\">inspect</span> lc-<span class=\"kw3\">alphabet</span> <span class=\"kw2\">converting</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">lower-case</span> <span class=\"br0\">(</span>text-<span class=\"kw3\">string</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>:len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"kw2\">to</span> <span class=\"kw3\">space</span><br/>           <span class=\"kw1\">if</span> lc-<span class=\"kw3\">alphabet</span> <span class=\"sy0\">=</span> <span class=\"kw3\">space</span><br/>               <span class=\"kw3\">set</span> is-pangram <span class=\"kw2\">to</span> <span class=\"kw3\">true</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw2\">exit</span> <span class=\"kw3\">program</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> pangram<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 36, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>is_pangram = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># This is optimized for longish strings--as soon as all 26 letters</span><br/>  <span class=\"co1\"># are encountered, we will be done.  Our worst case scenario is a really</span><br/>  <span class=\"co1\"># long non-pangram, or a really long pangram with at least one letter</span><br/>  <span class=\"co1\"># only appearing toward the end of the string.</span><br/>  a_code = <span class=\"st0\">'a'</span>.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  required_letters = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span>a_code...<span class=\"me1\">a_code</span><span class=\"sy0\">+</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><br/>    required_letters<span class=\"br0\">[</span>String.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>\u00a0<br/>  cnt = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> s<br/>    c = c.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> required_letters<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>      cnt <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">if</span> cnt == <span class=\"nu0\">26</span><br/>      <span class=\"kw3\">delete</span> required_letters<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>  <span class=\"kw4\">false</span><br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  tests = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"is this a pangram\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> test <span class=\"kw1\">in</span> tests<br/>    <span class=\"br0\">[</span>s<span class=\"sy0\">,</span> exp_value<span class=\"br0\">]</span> = test<br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"fail\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_pangram<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= exp_value<br/>    <span class=\"co1\"># try long strings</span><br/>    long_str = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">500000</span><span class=\"br0\">]</span><br/>      long_str <span class=\"sy0\">+</span>= s<br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"fail\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_pangram<span class=\"br0\">(</span>long_str<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= exp_value<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"Passed tests: #{s}\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pangramp <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>set-difference<br/>          <span class=\"br0\">(</span>loop for c from <span class=\"br0\">(</span>char-code #\\A<span class=\"br0\">)</span> upto <span class=\"br0\">(</span>char-code #\\Z<span class=\"br0\">)</span> collect <span class=\"br0\">(</span>code-char c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>string-upcase s<span class=\"br0\">)</span> '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 50, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> BbtPangramChecker;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>DevCommanders<span class=\"sy0\">,</span>TextMappers;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Check<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">CONST</span> <br/>\tletters <span class=\"sy0\">=</span> <span class=\"nu0\">26</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tstatus<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> letters <span class=\"kw1\">OF</span> <span class=\"kw4\">BOOLEAN</span>; <br/>\tresp <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>status<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> status<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span>  <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tj <span class=\"sy0\">:=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"kw3\">CAP</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> &lt;<span class=\"sy0\">=</span> j<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span><span class=\"nu0\">25</span> &gt;<span class=\"sy0\">=</span> j<span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span>status<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> status<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">END</span> <br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tresp <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>status<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span>;<br/>\t\tresp <span class=\"sy0\">:=</span> resp &amp; status<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> resp;<br/><span class=\"kw1\">END</span> Check;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tparams<span class=\"sy0\">:</span> DevCommanders.<span class=\"me1\">Par</span>;<br/>\ts<span class=\"sy0\">:</span> TextMappers.<span class=\"me1\">Scanner</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tparams <span class=\"sy0\">:=</span> DevCommanders.<span class=\"me1\">par</span>;<br/>\ts.<span class=\"me1\">ConnectTo</span><span class=\"br0\">(</span>params.<span class=\"me1\">text</span><span class=\"br0\">)</span>;<br/>\ts.<span class=\"me1\">SetPos</span><span class=\"br0\">(</span>params.<span class=\"me1\">beg</span><span class=\"br0\">)</span>;<br/>\ts.<span class=\"me1\">Scan</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span>s.<span class=\"me1\">rider</span>.<span class=\"me1\">eot</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> TextMappers.<span class=\"me1\">char</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">char</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'~'</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t<span class=\"kw1\">RETURN</span><br/>\t\t<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">#</span> TextMappers.<span class=\"me1\">string</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid parameter\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tStdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>s.<span class=\"me1\">string</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"' is pangram?:&gt; \"</span><span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>Check<span class=\"br0\">(</span>s.<span class=\"me1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\ts.<span class=\"me1\">Scan</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> BbtPangramChecker.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">bool</span> isPangram<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> text<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint</span> bitset<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>            bitset <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1u <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>            bitset <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1u <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> bitset <span class=\"sy0\">==</span> <span class=\"nu6\">0b11</span>_11111111_11111111_11111111<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"the quick brown fox jumps over the lazy dog\"</span>.<span class=\"me1\">isPangram</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQSTUVWXYZ\"</span>.<span class=\"me1\">isPangram</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"st0\">\"ABCDEFGHIJKL.NOPQRSTUVWXYZ\"</span>.<span class=\"me1\">isPangram</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"ABC.D.E.FGHI*J/KL-M+NO*PQ R<span class=\"es1\">\\n</span>STUVWXYZ\"</span>.<span class=\"me1\">isPangram</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> PangramChecker<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsPangram<span class=\"br0\">(</span><span class=\"kw1\">const</span> aString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'a'</span> <span class=\"kw1\">to</span> <span class=\"st0\">'z'</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> ContainsText<span class=\"br0\">(</span>aString<span class=\"sy1\">,</span> c<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">Exit</span><span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>IsPangram<span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// true</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>IsPangram<span class=\"br0\">(</span><span class=\"st0\">'Not a panagram'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// false</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isPangram<span class=\"br0\">(</span>sentence <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return <span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;!</span> sentence.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule Pangram do<br/>  def checker(str) do<br/>    unused = Enum.to_list(?a..?z) -- to_char_list(String.downcase(str))<br/>    Enum.empty?(unused)<br/>  end<br/>end<br/>\u00a0<br/>text = \"The quick brown fox jumps over the lazy dog.\"<br/>IO.puts \"#{Pangram.checker(text)}\\t#{text}\"<br/>text = (Enum.to_list(?A..?Z) -- 'Test') |&gt; to_string<br/>IO.puts \"#{Pangram.checker(text)}\\t#{text}\"</pre>"}, {"lang": "Erlang", "loc": 5, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>pangram<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>is_pangram<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_pangram</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/ordsets.html\"><span class=\"kw5\">ordsets</span></a>:<span class=\"re3\">is_subset</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re6\">$a</span><span class=\"sy1\">,</span> <span class=\"re6\">$z</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/ordsets.html\"><span class=\"kw5\">ordsets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> isPangram <span class=\"br0\">(</span>str: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>set<span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> set<span class=\"br0\">(</span>str.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">IsEmpty</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">: pangram? ( str --\u00a0? )<br/>    [ \"abcdefghijklmnopqrstuvwxyz\" ] dip &gt;lower diff length 0 =\u00a0;<br/>\u00a0<br/>\"How razorback-jumping frogs can level six piqued gymnasts!\" pangram? .</pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: pangram? ( addr len --\u00a0? )<br/>  0 -rot bounds do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"cdae8d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 32 or [char] a -<br/>    dup 0 26 within if<br/>      1 swap lshift or<br/>    else drop then<br/>  loop<br/>  1 26 lshift 1- =\u00a0;<br/>\u00a0<br/>s\" The five boxing wizards jump quickly.\" pangram? .   \\ -1</pre>"}, {"lang": "Fortran", "loc": 48, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> pangram<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">private</span><br/>  <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_pangram</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">lower_case</span> <span class=\"sy0\">=</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">upper_case</span> <span class=\"sy0\">=</span> <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> to_lower_case <span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">input</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span> <span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">output</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>\u00a0<br/>    output <span class=\"sy0\">=</span> input<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span> <span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>      j <span class=\"sy0\">=</span> <span class=\"kw4\">index</span> <span class=\"br0\">(</span>upper_case, output <span class=\"br0\">(</span>i <span class=\"sy0\">:</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        output <span class=\"br0\">(</span>i <span class=\"sy0\">:</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> lower_case <span class=\"br0\">(</span>j <span class=\"sy0\">:</span> j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> to_lower_case<br/>\u00a0<br/>  <span class=\"kw1\">function</span> is_pangram <span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">input</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span> <span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">lower_case_input</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">output</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    lower_case_input <span class=\"sy0\">=</span> to_lower_case <span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    output <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span> <span class=\"br0\">(</span>lower_case<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">index</span> <span class=\"br0\">(</span>lower_case_input, lower_case <span class=\"br0\">(</span>i <span class=\"sy0\">:</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        output <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>        <span class=\"kw1\">exit</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> is_pangram<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> pangram</pre>"}, {"lang": "FreeBASIC", "loc": 27, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPangram<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> length = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">26</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> p <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">97</span> <span class=\"kw1\">To</span> <span class=\"nu0\">122</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>p, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = _<br/><span class=\"br0\">{</span> _<br/> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>, _<br/> <span class=\"st0\">\"abbdefghijklmnopqrstuVwxYz\"</span>, _ <span class=\"co1\">'' no c!</span><br/> <span class=\"st0\">\"How vexingly quick daft zebras jump!\"</span> _<br/><span class=\"br0\">}</span> <br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span>:<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"'\"</span>; s<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\"' is \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"not a\"</span><span class=\"br0\">)</span>; <span class=\"st0\">\" pangram\"</span> <br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press nay key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`Watch \"Jeopardy!\", Alex Trebek's fun TV quiz game.`</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"Not a pangram.\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> pangram<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Yes:\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"No: \"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> pangram<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> missing <span class=\"kw4\">uint32</span> <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"nu0\">1</span> &lt;&lt; <span class=\"nu0\">26</span><span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">var</span> index <span class=\"kw4\">uint32</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&lt;=</span> c <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy1\">{</span><br/>\t\t\tindex <span class=\"sy2\">=</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span>c <span class=\"sy3\">-</span> <span class=\"st0\">'a'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&lt;=</span> c <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'Z'</span> <span class=\"sy1\">{</span><br/>\t\t\tindex <span class=\"sy2\">=</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span>c <span class=\"sy3\">-</span> <span class=\"st0\">'A'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t\tmissing &amp;<span class=\"sy2\">^=</span> <span class=\"nu0\">1</span> &lt;&lt; index<br/>\t\t<span class=\"kw1\">if</span> missing <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>toLower<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><span class=\"br0\">(</span>\\\\<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>pangram <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>pangram <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span> \\\\<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> pangram <span class=\"st0\">\"How razorback-jumping frogs can level six piqued gymnasts!\"</span></pre>"}, {"lang": "HicEst", "loc": 8, "block": "<pre class=\"hicest highlighted_source\">PangramBrokenAt<span class=\"br0\">(</span><span class=\"st0\">\"This is a Pangram.\"</span><span class=\"br0\">)</span> <span class=\"co1\">! =&gt; 2 (b is missing)</span><br/>PangramBrokenAt<span class=\"br0\">(</span><span class=\"st0\">\"The quick Brown Fox jumps over the Lazy Dog\"</span><span class=\"br0\">)</span> <span class=\"co1\">! =&gt; 0 (OK)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> PangramBrokenAt<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>   <span class=\"kw1\">CHARACTER</span> string<span class=\"sy1\">,</span> Alfabet<span class=\"sy1\">=</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>   PangramBrokenAt <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>Alfabet<span class=\"sy1\">,</span> string<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">! option 64: verify = 1st letter of string not in Alfabet</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> panagram<span class=\"br0\">(</span>s<span class=\"br0\">)</span>     <span class=\"co1\">#: return s if s is a panagram and fail otherwise</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">**</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lcase</span><span class=\"br0\">)</span> <span class=\"sy1\">===</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lcase</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 14, "block": "<pre class=\"io highlighted_source\">Sequence isPangram\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><br/>    letters\u00a0:= <span class=\"st0\">\" \"</span> repeated<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>    ia\u00a0:= <span class=\"st0\">\"a\"</span> at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>ichar,<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>ichar isLetter,<br/>            letters atPut<span class=\"br0\">(</span><span class=\"br0\">(</span>ichar asLowercase<span class=\"br0\">)</span> - ia, ichar<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    letters contains<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> not     <span class=\"co1\">// true only if no \" \" in letters</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span> isPangram println    <span class=\"co1\">// --&gt; true</span><br/><span class=\"st0\">\"The quick brown fox jumped over the lazy dog.\"</span> isPangram println   <span class=\"co1\">// --&gt; false</span><br/><span class=\"st0\">\"ABC.D.E.FGHI*J/KL-M+NO*PQ R<span class=\"es0\">\\n</span>STUVWXYZ\"</span> isPangram println           <span class=\"co1\">// --&gt; true</span></pre>"}, {"lang": "Ioke", "loc": 5, "block": "<pre class=\"text highlighted_source\">Text isPangram? = method(<br/>  letters = \"abcdefghijklmnopqrstuvwxyz\" chars<br/>  text = self lower chars<br/>  letters map(x, text include?(x)) reduce(&amp;&amp;)<br/>)</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'strings'</span><br/>isPangram=: <span class=\"sy0\">(</span>a. {~ <span class=\"nu0\">97</span>+i.<span class=\"nu0\">26</span><span class=\"sy0\">)</span> */@e. tolower</pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Pangram <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isPangram<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> test<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">char</span> a = <span class=\"st0\">'A'</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span>= <span class=\"st0\">'Z'</span><span class=\"sy0\">;</span> a++<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>test.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>test.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">char</span><span class=\"br0\">)</span><span class=\"br0\">(</span>a + <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"the quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//true</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"the quick brown fox jumped over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//false, no s</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//true</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//false, no r</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKL.NOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//false, no m</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABC.D.E.FGHI*J/KL-M+NO*PQ R<span class=\"es0\">\\n</span>STUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//true</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//false</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isPangram<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> letters <span class=\"sy0\">=</span> <span class=\"st0\">\"zqxjkvbpygfwmucldrhsnioate\"</span><br/>    <span class=\"co1\">// sorted by frequency ascending (http://en.wikipedia.org/wiki/Letter_frequency)</span><br/>    s <span class=\"sy0\">=</span> s.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[^a-z]/g</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>letters<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"is this a pangram\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// false</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>isPangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// true</span></pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\">def is_pangram:<br/>  explode<br/>  | map( if 65 &lt;= . and . &lt;= 90 then . + 32 # uppercase<br/>         elif 97 &lt;= . and . &lt;= 122 then .   # lowercase<br/>         else empty<br/>         end )<br/>  | unique<br/>  | length == 26;<br/>\u00a0<br/># Example:<br/>\"The quick brown fox jumps over the lazy dog\" | is_pangram</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">function makepangramchecker(alphabet)<br/>    alphabet = Set(uppercase.(alphabet))<br/>    function ispangram(s)<br/>        lengthcheck = length(s) \u2265 length(alphabet)<br/>        return lengthcheck &amp;&amp; all(c in uppercase(s) for c in alphabet)<br/>    end<br/>    return ispangram<br/>end<br/>\u00a0<br/>const tests = [\"Pack my box with five dozen liquor jugs.\",<br/>                \"The quick brown fox jumps over a lazy dog.\",<br/>                \"The quick brown fox jumps\\u2323over the lazy dog.\",<br/>                \"The five boxing wizards jump quickly.\",<br/>                \"This sentence contains A-Z but not the whole alphabet.\"]<br/>\u00a0<br/>is_english_pangram = makepangramchecker('a':'z')<br/>\u00a0<br/>for s in tests<br/>    println(\"The sentence \\\"\", s, \"\\\" is \", is_english_pangram(s)\u00a0? \"\"\u00a0: \"not \", \"a pangram.\")<br/>end</pre>"}, {"lang": "K", "loc": 4, "block": "<pre class=\"text highlighted_source\">lcase  \u00a0: _ci 97+!26<br/>ucase  \u00a0: _ci 65+!26<br/>tolower\u00a0: {@[x;p;:;<a class=\"__cf_email__\" data-cfemail=\"f19d92908294b19f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@p:&amp;26&gt;n:ucase?/:x]}<br/>panagram: {&amp;/lcase _lin tolower x}</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun isPangram<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"st0\">'a'</span> .. <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">!</span>in t<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>       <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>,<br/>       <span class=\"st0\">\"New job: fix Mr. Gluck's hazy TV, PDQ!\"</span>,<br/>       <span class=\"st0\">\"A very bad quack might jinx zippy fowls\"</span>,<br/>       <span class=\"st0\">\"A very mad quack might jinx zippy fowls\"</span>   <span class=\"co1\">// no 'b' now!</span><br/>   <span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate in candidates<span class=\"br0\">)</span> <br/>       println<span class=\"br0\">(</span><span class=\"st0\">\"'$candidate' is ${if (isPangram(candidate)) \"</span>a<span class=\"st0\">\" else \"</span>not a<span class=\"st0\">\"} pangram\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 12, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'Returns 0 if the string is NOT a pangram or &gt;0 if it IS a pangram</span><br/>string$ <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> isPangram<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPangram<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    string$ <span class=\"sy0\">=</span> <span class=\"kw2\">Lower$</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>        isPangram <span class=\"sy0\">=</span> <span class=\"kw2\">Instr</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> isPangram <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Logo", "loc": 10, "block": "<pre class=\"text highlighted_source\">to remove.all\u00a0:s\u00a0:set<br/>  if empty?\u00a0:s [output\u00a0:set]<br/>  if word?\u00a0:s [output remove.all butfirst\u00a0:s remove first\u00a0:s\u00a0:set]<br/>  output remove.all butfirst\u00a0:s remove.all first\u00a0:s\u00a0:set<br/>end<br/>to pangram?\u00a0:s<br/>  output empty? remove.all\u00a0:s \"abcdefghijklmnopqrstuvwxyz<br/>end<br/>\u00a0<br/>show pangram? [The five boxing wizards jump quickly.]  \u00a0; true</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span><span class=\"st0\">\"lpeg\"</span><br/>S<span class=\"sy0\">,</span> C <span class=\"sy0\">=</span> lpeg<span class=\"sy0\">.</span>S<span class=\"sy0\">,</span> lpeg<span class=\"sy0\">.</span>C<br/><span class=\"kw1\">function</span> ispangram<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">#</span><span class=\"br0\">(</span>C<span class=\"br0\">(</span>S<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>match<span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">26</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>ispangram<span class=\"st0\">\"waltz, bad nymph, for quick jigs vex\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>ispangram<span class=\"st0\">\"bobby\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>ispangram<span class=\"st0\">\"long sentence\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">#Used built-in StringTools package<br/>is_pangram\u00a0:= proc(str)<br/>\tlocal present\u00a0:= StringTools:-LowerCase~(select(StringTools:-HasAlpha, StringTools:-Explode(str)));<br/>\tlocal alphabets\u00a0:= {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};<br/>\tpresent\u00a0:= convert(present, set);<br/>\treturn evalb(present = alphabets);<br/>end proc;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">pangramQ[msg_]:=Complement[CharacterRange[\"a\", \"z\"], Characters[ToLowerCase[msg]]]=== {}</pre>"}, {"lang": "MATLAB", "loc": 12, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> trueFalse = isPangram<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%This works by histogramming the ascii character codes for lower case</span><br/>    <span class=\"co1\">%letters contained in the string (which is first converted to all</span><br/>    <span class=\"co1\">%lower case letters). Then it finds the index of the first letter that</span><br/>    <span class=\"co1\">%is not contained in the string (this is faster than using the find</span><br/>    <span class=\"co1\">%without the second parameter). If the find returns an empty array then</span><br/>    <span class=\"co1\">%the original string is a pangram, if not then it isn't.</span><br/>\u00a0<br/>    trueFalse = isempty<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span> histc<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">97</span>:<span class=\"nu0\">122</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "NetRexx", "loc": 30, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>A2Z = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>\u00a0<br/>pangrams = create_samples<br/>\u00a0<br/><span class=\"kw1\">loop</span> p_ = <span class=\"nu0\">1</span> to pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  pangram = pangrams<span class=\"br0\">[</span>p_<span class=\"br0\">]</span><br/>  q_ = A2Z.<span class=\"kw6\">verify</span><span class=\"br0\">(</span>pangram.<span class=\"kw6\">upper</span><span class=\"br0\">)</span> <span class=\"co1\">-- &lt;= it basically all happens in this function call!</span><br/>  <span class=\"kw1\">say</span> pangram.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"st0\">'\\-'</span><br/>  <span class=\"kw1\">if</span> q_ == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> -<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">' [OK, a pangram]'</span><br/>  <span class=\"kw3\">else</span> -<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">' [Not a pangram.  Missing:'</span> A2Z.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>q_, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">']'</span><br/>  <span class=\"kw3\">end</span> p_<br/>\u00a0<br/>method create_samples <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  pangrams = <span class=\"st0\">''</span><br/>\u00a0<br/>  x_ = <span class=\"nu0\">0</span><br/>  x_ = x_ + <span class=\"nu0\">1</span>; pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; pangrams<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'The quick brown fox jumps over a lazy dog.'</span>    <span class=\"co1\">-- best/shortest pangram</span><br/>  x_ = x_ + <span class=\"nu0\">1</span>; pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; pangrams<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'The quick brown fox jumps over the lazy dog.'</span>  <span class=\"co1\">-- not as short but at least it's still a pangram</span><br/>  x_ = x_ + <span class=\"nu0\">1</span>; pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; pangrams<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'The quick brown fox jumped over the lazy dog.'</span> <span class=\"co1\">-- common misquote; not a pangram</span><br/>  x_ = x_ + <span class=\"nu0\">1</span>; pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; pangrams<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'The quick onyx goblin jumps over the lazy dwarf.'</span><br/>  x_ = x_ + <span class=\"nu0\">1</span>; pangrams<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; pangrams<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'Bored? Craving a pub quiz fix? Why, just come to the Royal Oak!'</span> <span class=\"co1\">-- (Used to advertise a pub quiz in Bowness-on-Windermere)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> pangrams<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 20, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#context\"><span class=\"kw1\">context</span></a> <span class=\"re5\">'PGR</span><span class=\"br0\">)</span>                              <span class=\"co1\">;; Switch to context (say namespace) PGR</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>is<span class=\"sy1\">-</span>pangram? str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> chars <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#explode\"><span class=\"kw1\">explode</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#upper-case\"><span class=\"kw1\">upper-case</span></a> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; Uppercase + convert string into a list of chars</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> is<span class=\"sy1\">-</span>pangram<span class=\"sy1\">-</span>status <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>           <span class=\"co1\">;; Default return value of function</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#char\"><span class=\"kw1\">char</span></a> <span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#char\"><span class=\"kw1\">char</span></a> <span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil%3F\"><span class=\"kw1\">nil?</span></a> is<span class=\"sy1\">-</span>pangram<span class=\"sy1\">-</span>status<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; For loop with break condition</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#not\"><span class=\"kw1\">not</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#find\"><span class=\"kw1\">find</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#char\"><span class=\"kw1\">char</span></a> c<span class=\"br0\">)</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">;; If char not found in list, \"is-pangram-status\" becomes \"nil\"</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> is<span class=\"sy1\">-</span>pangram<span class=\"sy1\">-</span>status <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil\"><span class=\"kw1\">nil</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    is<span class=\"sy1\">-</span>pangram<span class=\"sy1\">-</span>status                       <span class=\"co1\">;; Return current value of symbol \"is-pangram-status\"</span><br/><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#context\"><span class=\"kw1\">context</span></a> <span class=\"re5\">'MAIN</span><span class=\"br0\">)</span>                             <span class=\"co1\">;; Back to MAIN context</span><br/>\u00a0<br/><span class=\"co1\">;; - - - - - - - - - -</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>PGR<span class=\"sy1\">:</span><span class=\"me0\">is-pangram</span>? <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; Print true</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>PGR<span class=\"sy1\">:</span><span class=\"me0\">is-pangram</span>? <span class=\"st0\">\"abcdef\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; Print nil</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import rdstdin<br/>\u00a0<br/>proc isPangram(sentence: string, alphabet = {'a'..'z'}): bool =<br/>  var sentset: set[char] = {}<br/>  for c in sentence: sentset.incl c<br/>  alphabet &lt;= sentset<br/>\u00a0<br/>echo isPangram(readLineFromStdin \"Sentence: \")</pre>"}, {"lang": "Objeck", "loc": 25, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Pangram <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> IsPangram<span class=\"br0\">(</span>test <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>a <span class=\"sy0\">:=</span> 'A'<span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> 'Z'<span class=\"sy0\">;</span> a <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>test<span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> test<span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"the quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># true</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"the quick brown fox jumped over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># false, no s</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># true</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># false, no r</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKL.NOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># false, no m</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"ABC.D.E.FGHI*J/KL-M+NO*PQ R<span class=\"es0\">\\n</span>STUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># true</span><br/>      IsPangram<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># false</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> pangram str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ar <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"nu0\">26</span> <span class=\"kw1\">false</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"sy0\">'</span>a<span class=\"sy0\">'..'</span>z<span class=\"sy0\">'</span> <span class=\"kw1\">as</span> c <span class=\"sy0\">-&gt;</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>code c <span class=\"sy0\">-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>code <span class=\"sy0\">'</span>a<span class=\"sy0\">'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">true</span><br/>  <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>lowercase str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">)</span> <span class=\"kw1\">true</span> ar</pre>"}, {"lang": "MATLAB / Octave", "loc": 5, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> trueFalse = isPangram<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>    <span class=\"co1\">% X is a histogram of letters</span><br/>    X = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sparse.html\"><span class=\"kw2\">sparse</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">128</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    trueFalse = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/full.html\"><span class=\"kw2\">full</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>X<span class=\"br0\">(</span><span class=\"co2\">'a'</span>:<span class=\"co2\">'z'</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "ML", "loc": 38, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> to_locase s <span class=\"sy0\">=</span> implode ` map <span class=\"br0\">(</span>c_downcase<span class=\"br0\">)</span> ` explode s<br/>\u00a0<br/><span class=\"kw1\">fun</span> is_pangram <br/>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> \t\t\t\t <br/>\t\t<span class=\"kw1\">let</span> <br/>\t\t\t<span class=\"kw1\">val</span> flen <span class=\"sy0\">=</span> len <span class=\"br0\">(</span>filter <span class=\"br0\">(</span>fn c <span class=\"sy0\">=</span> c eql h<span class=\"br0\">)</span> T<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">in</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>flen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">false</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tis_pangram <span class=\"br0\">(</span>t, T<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><br/><span class=\"sy0\">|</span>\t<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span> <br/><span class=\"sy0\">|</span> \tS <span class=\"sy0\">=</span> is_pangram <span class=\"br0\">(</span>explode <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>, explode ` to_locase S<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> is_pangram_i <br/>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> \t\t\t\t <br/>\t\t<span class=\"kw1\">let</span> <br/>\t\t\t<span class=\"kw1\">val</span> flen <span class=\"sy0\">=</span> len <span class=\"br0\">(</span>filter <span class=\"br0\">(</span>fn c <span class=\"sy0\">=</span> c eql h<span class=\"br0\">)</span> T<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">in</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>flen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">false</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tis_pangram <span class=\"br0\">(</span>t, T<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><br/><span class=\"sy0\">|</span>\t<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span> <br/><span class=\"sy0\">|</span> \t<span class=\"br0\">(</span>A,S<span class=\"br0\">)</span> <span class=\"sy0\">=</span> is_pangram <span class=\"br0\">(</span>explode A, explode ` to_locase S<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> test <span class=\"br0\">(</span>f, arg, res, ok, notok<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f arg eql res<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ arg @ <span class=\"st0\">\"' \"</span> @ ok<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ arg @ <span class=\"st0\">\"' \"</span> @ notok<span class=\"br0\">)</span><br/><span class=\"kw1\">fun</span> test2 <span class=\"br0\">(</span>f, arg, res, ok, notok<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f arg eql res<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ <span class=\"kw1\">ref</span> <span class=\"br0\">(</span>arg,<span class=\"nu0\">1</span><span class=\"br0\">)</span> @ <span class=\"st0\">\"' \"</span> @ ok<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ <span class=\"kw1\">ref</span> <span class=\"br0\">(</span>arg,<span class=\"nu0\">1</span><span class=\"br0\">)</span> @ <span class=\"st0\">\"' \"</span> @ notok<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_pangram, <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a pangram\"</span>, <span class=\"st0\">\"is not a pangram\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>println ` test <span class=\"br0\">(</span>is_pangram, <span class=\"st0\">\"abcdefghijklopqrstuvwxyz\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a pangram\"</span>, <span class=\"st0\">\"is not a pangram\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">val</span> SValphabet <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\u00e5\u00e4\u00f6\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">val</span> SVsentence <span class=\"sy0\">=</span> <span class=\"st0\">\"Yxskaftbud, ge v\u00e5r wczonm\u00f6 iq hj\u00e4lp\"</span><span class=\"sy0\">;</span><br/>println ` test2 <span class=\"br0\">(</span>is_pangram_i, <span class=\"br0\">(</span>SValphabet, SVsentence<span class=\"br0\">)</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a Swedish pangram\"</span>, <span class=\"st0\">\"is not a Swedish pangram\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 8, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsPangram</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>sub<br/>      <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number <span class=\"re3\">&amp;a</span> <span class=\"re3\">&amp;z</span> 1<span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>Sort <span class=\"br0\">{</span>Map Xs Char<span class=\"sy0\">.</span>toLower<span class=\"br0\">}</span> Value<span class=\"sy0\">.</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>IsPangram <span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">pangram<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  s<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">97</span><span class=\"sy0\">,</span><span class=\"nu1\">122</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>pangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">)</span><br/>pangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy doe.\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">MoreUtils</span> <span class=\"st_h\">'all'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pangram <span class=\"br0\">{</span>all <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=~</span> <span class=\"sy0\">/</span><span class=\"co5\">$_</span><span class=\"sy0\">/</span>i<span class=\"br0\">}</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Yes.<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> pangram <span class=\"st_h\">'Cozy lummox gives smart squid who asks for job pen.'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">MoreUtils</span> <span class=\"st_h\">'all'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pangram <span class=\"br0\">{</span>all <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=~</span> <span class=\"sy0\">/</span><span class=\"co5\">$_</span><span class=\"sy0\">/</span>i<span class=\"br0\">}</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Yes.<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> pangram <span class=\"st_h\">'Cozy lummox gives smart squid who asks for job pen.'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> Eng <span class=\"sy0\">=</span> set <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> Cyr <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span>\u0430 \u0431 \u0432 \u0433 \u0434 \u0435 \u0436 \u0437 \u0438 \u0439 \u043a \u043b \u043c \u043d \u043e \u043f \u0440 \u0441 \u0442 \u0443 \u0444 \u0445 \u0446 \u0447 \u0448 \u0449 \u044a \u044b \u044c \u044d \u044e \u044f \u0451<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> Hex <span class=\"sy0\">=</span> set <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'f'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pangram<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> Set <span class=\"re0\">$alpha</span> <span class=\"sy0\">=</span> Eng<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$alpha</span> \u2286 <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> pangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog has fleas.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog has fleas.\"</span><span class=\"sy0\">,</span> Hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog backs fleas.\"</span><span class=\"sy0\">,</span> Hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> pangram <span class=\"st0\">\"\u0421\u044a\u0435\u0448\u044c \u0436\u0435 \u0435\u0449\u0451 \u044d\u0442\u0438\u0445 \u043c\u044f\u0433\u043a\u0438\u0445 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0445 \u0431\u0443\u043b\u043e\u043a, \u0434\u0430 \u0432\u044b\u043f\u0435\u0439 \u0447\u0430\u044e\"</span><span class=\"sy0\">,</span> Cyr<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 31, "block": "<pre class=\"text highlighted_source\">function pangram(string s)<br/>sequence az = repeat(false,26)<br/>integer count = 0<br/>    for i=1 to length(s) do<br/>        integer ch = lower(s[i])<br/>        if ch&gt;='a'<br/>        and ch&lt;='z'<br/>        and not az[ch-96] then<br/>            count += 1<br/>            if count=26 then return {true,0} end if<br/>            az[ch-96] = true<br/>        end if<br/>    end for<br/>    return {false,find(false,az)+96}<br/>end function<br/>\u00a0<br/>sequence checks = {\"The quick brown fox jumped over the lazy dog\",<br/>                   \"The quick brown fox jumps over the lazy dog\",<br/>                   \".!$\\\"AbCdEfghijklmnoprqstuvwxyz\",<br/>                   \"THE FIVE BOXING WIZARDS DUMP QUICKLY.\",<br/>                   \"THE FIVE BOXING WIZARDS JUMP QUICKLY.\",<br/>                   \"HEAVY BOXES PERFORM WALTZES AND JIGS.\",<br/>                   \"PACK MY BOX WITH FIVE DOZEN LIQUOR JUGS.\",<br/>                   \"Big fjiords vex quick waltz nymph\",<br/>                   \"The quick onyx goblin jumps over the lazy dwarf.\",<br/>                   \"no\"}<br/>for i=1 to length(checks) do<br/>    string ci = checks[i]<br/>    integer {r,ch} = pangram(ci)<br/>    printf(1,\"%-50s -\u00a0%s\\n\",{ci,iff(r?\"yes\":\"no \"&amp;ch)})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de isPangram (Str)<br/>   (not<br/>      (diff<br/>         '`(chop \"abcdefghijklmnopqrstuvwxyz\")<br/>         (chop (lowc Str)) ) ) )</pre>"}, {"lang": "PHP", "loc": 20, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> isPangram<span class=\"br0\">(</span><span class=\"re0\">$text</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><span class=\"re0\">$text</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">&gt;=</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;=</span> <span class=\"st_h\">'z'</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$bitset</span> <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">&gt;=</span> <span class=\"st_h\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;=</span> <span class=\"st_h\">'Z'</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$bitset</span> <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$bitset</span> <span class=\"sy0\">==</span> <span class=\"nu12\">0x3ffffff</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><br/>    <span class=\"st0\">\"the quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"the quick brown fox jumped over the lazy dog\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"ABCDEFGHIJKLMNOPQSTUVWXYZ\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"ABCDEFGHIJKL.NOPQRSTUVWXYZ\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"ABC.D.E.FGHI*J/KL-M+NO*PQ R<span class=\"es1\">\\n</span>STUVWXYZ\"</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$test</span> <span class=\"kw1\">as</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$str</span>\u00a0: \"</span><span class=\"sy0\">,</span> isPangram<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'T'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'F'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;/br&gt;'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>test_pangram: procedure options (main);<br/>\u00a0<br/>is_pangram: procedure() returns (bit(1) aligned);<br/>\u00a0<br/>   declare text character (200) varying;<br/>   declare c character (1);<br/>\u00a0<br/>   get edit (text) (L);<br/>   put skip list (text);<br/>\u00a0<br/>   text = lowercase(text);<br/>\u00a0<br/>   do c = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',<br/>          'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',<br/>          'v', 'w', 'x', 'y', 'z';<br/>      if index(text, c) = 0 then return ('0'b);<br/>   end;<br/>   return ('1'b);<br/>end is_pangram;<br/>\u00a0<br/>   put skip list ('Please type a sentence');<br/>\u00a0<br/>   if is_pangram() then<br/>      put skip list ('The sentence is a pangram.');<br/>   else<br/>      put skip list ('The sentence is not a pangram.');<br/>\u00a0<br/>end test_pangram;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 15, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Test<span class=\"sy0\">-</span>Pangram <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$Text</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$Alphabet</span> <span class=\"sy0\">=</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Text</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Text</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$Alphabet</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alphabet</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$IsPangram</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alphabet</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw3\">Where</span><span class=\"br0\">{</span> <span class=\"re0\">$Text</span>.Contains<span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span> <span class=\"br0\">}</span>.Count <span class=\"kw4\">-eq</span> <span class=\"re0\">$Alphabet</span>.Length<br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$IsPangram</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>Test<span class=\"sy0\">-</span>Pangram <span class=\"st0\">'The quick brown fox jumped over the lazy dog.'</span><br/>Test<span class=\"sy0\">-</span>Pangram <span class=\"st0\">'The quick brown fox jumps over the lazy dog.'</span><br/>Test<span class=\"sy0\">-</span>Pangram <span class=\"st0\">'\u0421\u044a\u0435\u0448\u044c \u0436\u0435 \u0435\u0449\u0451 \u044d\u0442\u0438\u0445 \u043c\u044f\u0433\u043a\u0438\u0445 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0445 \u0431\u0443\u043b\u043e\u043a, \u0434\u0430 \u0432\u044b\u043f\u0435\u0439 \u0447\u0430\u044e'</span> <span class=\"st0\">'\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\u0451'</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 13, "block": "<pre class=\"prolog highlighted_source\">pangram<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"st_h\">'a, 0'</span>z<span class=\"sy4\">,</span> Alphabet<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>member<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> Alphabet<span class=\"br0\">)</span><span class=\"sy4\">,</span> member<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pangram_example <span class=\"sy1\">:-</span><br/>\tL1 <span class=\"sy6\">=</span> \"the quick brown fox jumps over the lazy dog\"<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   pangram<span class=\"br0\">(</span>L1<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R1<span class=\"sy6\">=</span> ok<span class=\"sy4\">;</span> R1 <span class=\"sy6\">=</span> ko<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~s --&gt; ~w ~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L1<span class=\"sy4\">,</span>R1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tL2 <span class=\"sy6\">=</span> \"the quick brown fox jumped over the lazy dog\"<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   pangram<span class=\"br0\">(</span>L2<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R2 <span class=\"sy6\">=</span> ok<span class=\"sy4\">;</span> R2 <span class=\"sy6\">=</span> ko<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~s --&gt; ~w ~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L2<span class=\"sy4\">,</span> R2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> IsPangram_fast<span class=\"br0\">(</span>String$<span class=\"br0\">)</span><br/>  String$ <span class=\"sy0\">=</span> <span class=\"kw2\">LCase</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>  char_a<span class=\"sy0\">=</span><span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; sets bits in a variable if a letter is found, reads string only once</span><br/>  <span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    char$ <span class=\"sy0\">=</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>String$, a, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    pos   <span class=\"sy0\">=</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span>char$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> char_a<br/>    check.l <span class=\"sy0\">|</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> pos<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">If</span> check <span class=\"sy0\">&amp;</span> $3FFFFFF <span class=\"sy0\">=</span> $3FFFFFF<br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> IsPangram_simple<span class=\"br0\">(</span>String$<span class=\"br0\">)</span><br/>  String$ <span class=\"sy0\">=</span> <span class=\"kw2\">LCase</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>  found   <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; searches for every letter in whole string</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>String$, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      found <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> found<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Debug</span> IsPangram_fast<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over lazy dogs.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> IsPangram_simple<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over lazy dogs.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> IsPangram_fast<span class=\"br0\">(</span><span class=\"st0\">\"No pangram\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> IsPangram_simple<span class=\"br0\">(</span><span class=\"st0\">\"No pangram\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">string</span><span class=\"sy0\">,</span> <span class=\"kw3\">sys</span><br/><span class=\"kw1\">if</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">version_info</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>:<br/>    <span class=\"kw2\">input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ispangram<span class=\"br0\">(</span>sentence<span class=\"sy0\">,</span> alphabet<span class=\"sy0\">=</span><span class=\"kw3\">string</span>.<span class=\"me1\">ascii_lowercase</span><span class=\"br0\">)</span>:<br/>    alphaset <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> alphaset <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>sentence.<span class=\"me1\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> ispangram<span class=\"br0\">(</span><span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'Sentence: '</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">checkPangram &lt;- function(sentence){<br/>  my.letters &lt;- tolower(unlist(strsplit(sentence, \"\")))<br/>  is.pangram &lt;- all(letters\u00a0%in% my.letters)<br/>\u00a0<br/>  if (is.pangram){<br/>    cat(\"\\\"\", sentence, \"\\\" is a pangram! \\n\", sep=\"\")<br/>  } else {<br/>    cat(\"\\\"\", sentence, \"\\\" is not a pangram! \\n\", sep=\"\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (pangram? str)<br/>  (define chars (regexp-replace* #rx\"[^a-z]+\" (string-downcase str) \"\"))<br/>  (= 26 (length (remove-duplicates (string-&gt;list chars)))))<br/>(pangram? \"The quick Brown Fox jumps over the Lazy Dog\")<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 5, "block": "<pre class=\"text highlighted_source\">: isPangram? ( $-f )<br/>  ^strings'toLower<br/>  heap [ 27 allot ] preserve<br/>  [ @ 'a - dup 0 25 within [ [ 'a + ] [ here + ] bi\u00a0! ] &amp;drop if ]<br/>  ^types'STRING <a class=\"__cf_email__\" data-cfemail=\"056064666d45\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> here \"abcdefghijklmnopqrstuvwxyz\" compare\u00a0;</pre>"}, {"lang": "REXX", "loc": 14, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  verifies  if an  entered/supplied  string  (sentence)  is a pangram.    */</span><br/>@abc= <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>               <span class=\"coMULTI\">/*a list of all (Latin) capital letters*/</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;    <span class=\"kw1\">say</span>                           <span class=\"coMULTI\">/*keep promoting 'til null (or blanks).*/</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Please enter a pangramic sentence   (or a blank to quit):'</span>;      <span class=\"kw1\">say</span><br/>    <span class=\"kw1\">pull</span> y                                       <span class=\"coMULTI\">/*this also uppercases the  Y variable.*/</span><br/>    <span class=\"kw1\">if</span> y=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                          <span class=\"coMULTI\">/*if nothing entered,  then we're done.*/</span><br/>    absent= <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span> @abc, , y<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*obtain a list of any absent letters. */</span><br/>    <span class=\"kw1\">if</span> absent==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Sentence is a pangram.\"</span><br/>                   <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Sentence isn't a pangram, missing: \"</span>    absent<br/>    <span class=\"kw1\">say</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PANGRAM program ended. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500'</span>   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>pangram = 0<br/>s = \"The quick brown fox jumps over the lazy dog.\"<br/>see \"\" + pangram(s) + \" \" + s + nl<br/>\u00a0<br/>s = \"My dog has fleas.\"<br/>see \"\" + pangram(s) + \" \" + s + nl<br/>\u00a0<br/>func pangram str<br/>     str  = lower(str)<br/>     for i = ascii(\"a\") to ascii(\"z\")<br/>             bool = substr(str, char(i)) &gt; 0<br/>             pangram = pangram + bool<br/>     next <br/>     pan = (pangram = 26)<br/>     return pan<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> pangram?<span class=\"br0\">(</span>sentence<span class=\"br0\">)</span><br/>  unused_letters = <span class=\"br0\">(</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span> <span class=\"sy0\">-</span> sentence.<span class=\"me1\">downcase</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">to_a</span><br/>  unused_letters.<span class=\"me1\">empty</span>?<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> pangram?<span class=\"br0\">(</span><span class=\"st0\">'this is a sentence'</span><span class=\"br0\">)</span>  <span class=\"co1\"># ==&gt; false</span><br/><span class=\"kw3\">p</span> pangram?<span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumps over the lazy dog.'</span><span class=\"br0\">)</span>  <span class=\"co1\"># ==&gt; true</span></pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">s$ = \"The quick brown fox jumps over the lazy dog.\"<br/>Print pangram(s$);\" \";s$<br/>\u00a0<br/>s$ = \"My dog has fleas.\"<br/>Print pangram(s$);\" \";s$<br/>\u00a0<br/>function pangram(str$)<br/>  str$  = lower$(str$)<br/>  for i = asc(\"a\") to asc(\"z\")<br/>      pangram = pangram + (instr(str$, chr$(i)) &lt;&gt; 0)<br/>  next i<br/>pangram = (pangram = 26)<br/>end function</pre>"}, {"lang": "Rust", "loc": 69, "block": "<pre class=\"text highlighted_source\">#![feature(test)]<br/>\u00a0<br/>extern crate test;<br/>\u00a0<br/>use std::collections::HashSet;<br/>\u00a0<br/>pub fn is_pangram_via_bitmask(s: &amp;str) -&gt; bool {<br/>\u00a0<br/>    // Create a mask of set bits and convert to false as we find characters.<br/>    let mut mask = (1 &lt;&lt; 26) - 1;<br/>\u00a0<br/>    for chr in s.chars() {<br/>        let val = chr as u32 &amp;\u00a0!0x20; /* 0x20 converts lowercase to upper */<br/>        if val &lt;= 'Z' as u32 &amp;&amp; val &gt;= 'A' as u32 {<br/>            mask = mask &amp;\u00a0!(1 &lt;&lt; (val - 'A' as u32));<br/>        }<br/>    }<br/>\u00a0<br/>    mask == 0<br/>}<br/>\u00a0<br/>pub fn is_pangram_via_hashset(s: &amp;str) -&gt; bool {<br/>\u00a0<br/>    // Insert lowercase letters into a HashSet, then check if we have at least 26.<br/>    let letters = s.chars()<br/>        .flat_map(|chr| chr.to_lowercase())<br/>        .filter(|&amp;chr| chr &gt;= 'a' &amp;&amp; chr &lt;= 'z')<br/>        .fold(HashSet::new(), |mut letters, chr| {<br/>            letters.insert(chr);<br/>            letters<br/>        });<br/>\u00a0<br/>    letters.len() == 26<br/>}<br/>\u00a0<br/>pub fn is_pangram_via_sort(s: &amp;str) -&gt; bool {<br/>\u00a0<br/>    // Copy chars into a vector, convert to lowercase, sort, and remove duplicates.<br/>    let mut chars: Vec&lt;char&gt; = s.chars()<br/>        .flat_map(|chr| chr.to_lowercase())<br/>        .filter(|&amp;chr| chr &gt;= 'a' &amp;&amp; chr &lt;= 'z')<br/>        .collect();<br/>\u00a0<br/>    chars.sort();<br/>    chars.dedup();<br/>\u00a0<br/>    chars.len() == 26<br/>}<br/>\u00a0<br/>fn main() {<br/>\u00a0<br/>    let examples = [\"The quick brown fox jumps over the lazy dog\",<br/>                    \"The quick white cat jumps over the lazy dog\"];<br/>\u00a0<br/>    for &amp;text in examples.iter() {<br/>        let is_pangram_sort = is_pangram_via_sort(text);<br/>        println!(\"Is \\\"{}\\\" a pangram via sort? - {}\", text, is_pangram_sort);<br/>\u00a0<br/>        let is_pangram_bitmask = is_pangram_via_bitmask(text);<br/>        println!(\"Is \\\"{}\\\" a pangram via bitmask? - {}\",<br/>                 text,<br/>                 is_pangram_bitmask);<br/>\u00a0<br/>        let is_pangram_hashset = is_pangram_via_hashset(text);<br/>        println!(\"Is \\\"{}\\\" a pangram via bitmask? - {}\",<br/>                 text,<br/>                 is_pangram_hashset);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> is<span class=\"sy0\">_</span>pangram<span class=\"br0\">(</span>sentence<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sentence.<span class=\"me1\">toLowerCase</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">26</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 24, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isPangram (in string: stri) is func<br/>  result<br/>    var boolean: isPangram is FALSE;<br/>  local<br/>    var char: ch is ' ';<br/>    var set of char: usedChars is (set of char).value;<br/>  begin<br/>    for ch range lower(stri) do<br/>      if ch in {'a' .. 'z'} then<br/>        incl(usedChars, ch);<br/>      end if;<br/>    end for;<br/>    isPangram\u00a0:= usedChars = {'a' .. 'z'};<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(isPangram(\"This is a test\"));<br/>    writeln(isPangram(\"The quick brown fox jumps over the lazy dog\"));<br/>    writeln(isPangram(\"NOPQRSTUVWXYZ  abcdefghijklm\"));<br/>    writeln(isPangram(\"abcdefghijklopqrstuvwxyz\"));  # Missing m, n<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">define Eng = <span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span>;<br/>define Hex = <span class=\"st0\">'a'</span>..<span class=\"st0\">'f'</span>;<br/>define Cyr = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>\u0430 \u0431 \u0432 \u0433 \u0434 \u0435 \u0436 \u0437 \u0438 \u0439 \u043a \u043b \u043c \u043d \u043e \u043f \u0440 \u0441 \u0442 \u0443 \u0444 \u0445 \u0446 \u0447 \u0448 \u0449 \u044a \u044b \u044c \u044d \u044e \u044f \u0451<span class=\"br0\">)</span>;<br/>\u00a0<br/>func pangram<span class=\"br0\">(</span>str, alpha=Eng<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var lstr = str.<span class=\"me1\">lc</span>;<br/>    alpha.<span class=\"me1\">all</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> lstr.<span class=\"me1\">contains</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say pangram<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">)</span>;<br/>say pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog has fleas.\"</span><span class=\"br0\">)</span>;<br/>say pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog has fleas.\"</span>, Hex<span class=\"br0\">)</span>;<br/>say pangram<span class=\"br0\">(</span><span class=\"st0\">\"My dog backs fleas.\"</span>, Hex<span class=\"br0\">)</span>;<br/>say pangram<span class=\"br0\">(</span><span class=\"st0\">\"\u0421\u044a\u0435\u0448\u044c \u0436\u0435 \u0435\u0449\u0451 \u044d\u0442\u0438\u0445 \u043c\u044f\u0433\u043a\u0438\u0445 \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0445 \u0431\u0443\u043b\u043e\u043a, \u0434\u0430 \u0432\u044b\u043f\u0435\u0439 \u0447\u0430\u044e\"</span>, Cyr<span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\">!<span class=\"re0\">String</span> methodsFor: <span class=\"st0\">'testing'</span>!<br/>isPangram<br/>\t^<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">self</span> collect: <span class=\"br0\">[</span>:<span class=\"re5\">c</span> | c asUppercase<span class=\"br0\">]</span><span class=\"br0\">)</span> select: <span class=\"br0\">[</span>:<span class=\"re5\">c</span> | c &gt;<span class=\"sy0\">=</span> $<span class=\"re0\">A</span> and: <span class=\"br0\">[</span><span class=\"re5\">c</span> &lt;<span class=\"sy0\">=</span> $<span class=\"re0\">Z</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> asSet size <span class=\"sy0\">=</span> <span class=\"re5\">26</span><br/>\u00a0</pre>"}, {"lang": "SNOBOL4", "loc": 18, "block": "<pre class=\"text highlighted_source\">        define('pangram(str)alfa,c')\u00a0:(pangram_end)<br/>pangram str = replace(str,&amp;ucase,&amp;lcase)<br/>        alfa = &amp;lcase<br/>pgr_1   alfa len(1) . c =\u00a0:f(return)<br/>        str c\u00a0:s(pgr_1)f(freturn)<br/>pangram_end<br/>\u00a0<br/>        define('panchk(str)tf')\u00a0:(panchk_end)<br/>panchk  output = str <br/>        tf = 'False'; tf = pangram(str) 'True'<br/>        output = 'Pangram: ' tf\u00a0:(return)<br/>panchk_end<br/>\u00a0<br/>*       # Test and display<br/>        panchk(\"The quick brown fox jumped over the lazy dogs.\")<br/>        panchk(\"My girl wove six dozen plaid jackets before she quit.\")<br/>        panchk(\"This 41-character string: it's a pangram!\")<br/>end</pre>"}, {"lang": "Swift", "loc": 16, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let str = \"the quick brown fox jumps over the lazy dog\"<br/>\u00a0<br/>func isPangram(str:String) -&gt; Bool {<br/>    let stringArray = Array(str.lowercaseString)<br/>    for char in \"abcdefghijklmnopqrstuvwxyz\" {<br/>        if (find(stringArray, char) == nil) {<br/>            return false<br/>        }<br/>    }<br/>    return true<br/>}<br/>\u00a0<br/>isPangram(str) // True<br/>isPangram(\"Test string\") // False</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> pangram<span class=\"sy0\">?</span> <span class=\"br0\">{</span>sentence<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> letters <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"br0\">{</span><span class=\"br0\">[</span>a-z<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$sentence</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique <span class=\"re0\">$letters</span><span class=\"br0\">]</span><span class=\"br0\">]</span> == <span class=\"nu0\">26</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>pangram<span class=\"sy0\">?</span> <span class=\"st0\">\"This is a sentence\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># ==&gt; false</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>pangram<span class=\"sy0\">?</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># ==&gt; true</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">:Prompt Str1<br/>:For(L,1,26<br/>:If not(inString(Str1,sub(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",L,1))<br/>:L=28<br/>:End<br/>:If L&lt;28<br/>:Disp \"IS A PANGRAM\"</pre>"}, {"lang": "TUSCRIPT", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT,{}<br/>alfabet=\"abcdefghijklmnopqrstuvwxyz\"<br/>sentences = *<br/>DATA The quick brown fox jumps over the lazy dog<br/>DATA the quick brown fox falls over the lazy dog<br/>LOOP s=sentences<br/> getchars      =STRINGS    (s,\" {&amp;a} \")<br/> sortchars     =ALPHA_SORT (getchars)<br/> reducechars   =REDUCE     (sortchars)<br/> chars_in_s    =EXCHANGE   (reducechars,\" '  \")<br/> IF (chars_in_s==alfabet) PRINT \"   pangram: \",s<br/> IF (chars_in_s!=alfabet) PRINT \"no pangram: \",s<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 7, "block": "<pre class=\"text highlighted_source\">@/.*[Aa].*&amp;.*[Bb].*&amp;.*[Cc].*&amp;.*[Dd].*&amp; \\<br/>  .*[Ee].*&amp;.*[Ff].*&amp;.*[Gg].*&amp;.*[Hh].*&amp; \\<br/>  .*[Ii].*&amp;.*[Jj].*&amp;.*[Kk].*&amp;.*[Ll].*&amp; \\<br/>  .*[Mm].*&amp;.*[Nn].*&amp;.*[Oo].*&amp;.*[Pp].*&amp; \\<br/>  .*[Qq].*&amp;.*[Rr].*&amp;.*[Ss].*&amp;.*[Tt].*&amp; \\<br/>  .*[Uu].*&amp;.*[Vv].*&amp;.*[Ww].*&amp;.*[Xx].*&amp; \\<br/>  .*[Yy].*&amp;.*[Zz].*/</pre>"}, {"lang": "UNIX Shell", "loc": 11, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> pangram? <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">alphabet</span>=abcdefghijklmnopqrstuvwxyz<br/>  <span class=\"kw3\">local</span> <span class=\"re2\">string</span>=<span class=\"st0\">\"$*\"</span><br/>  <span class=\"re2\">string</span>=<span class=\"st0\">\"<span class=\"es3\">${string,,}</span>\"</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$string</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$alphabet</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">ch</span>=<span class=\"st0\">\"<span class=\"es3\">${string%%${string#?}</span>}\"</span><br/>    <span class=\"re2\">string</span>=<span class=\"st0\">\"<span class=\"es3\">${string#?}</span>\"</span><br/>    <span class=\"re2\">alphabet</span>=<span class=\"st0\">\"<span class=\"es3\">${alphabet/$ch}</span>\"</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-z</span> <span class=\"st0\">\"<span class=\"es2\">$alphabet</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#import std<br/>\u00a0<br/>is_pangram = ^jZ^(<a class=\"__cf_email__\" data-cfemail=\"5c7d1c30\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,*+ @rlp -:~&amp;) ~=`A-~ letters<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 16, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> pangram2(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    Const sKey <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>    <span class=\"kw4\">Dim</span> sLow <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    sLow = LCase(s)<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 26<br/>      <span class=\"kw3\">If</span> InStr(sLow, Mid(sKey, i, 1)) = 0 <span class=\"kw3\">Then</span><br/>        pangram2 = <span class=\"kw5\">False</span><br/>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>      <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>    pangram2 = <span class=\"kw5\">True</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 29, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">function</span> pangram( s )<br/>\t<span class=\"kw4\">dim</span> i<br/>\t<span class=\"kw4\">dim</span> sKey<br/>\t<span class=\"kw4\">dim</span> sChar<br/>\t<span class=\"kw4\">dim</span> nOffset<br/>\tsKey = <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>\t<span class=\"kw3\">for</span> i = 1 <span class=\"kw3\">to</span> len( s )<br/>\t\tsChar = lcase(mid(s,i,1))<br/>\t\t<span class=\"kw3\">if</span> sChar &lt;&gt; <span class=\"st0\">\" \"</span>  <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">if</span> instr(sKey, sChar) <span class=\"kw3\">then</span><br/>\t\t\t\tnOffset = asc( sChar ) - asc(<span class=\"st0\">\"a\"</span>)  + 1<br/>\t\t\t\t<span class=\"kw3\">if</span> nOffset &gt; 1 <span class=\"kw3\">then</span><br/>\t\t\t\t\tsKey = left(sKey, nOffset - 1) &amp; <span class=\"st0\">\" \"</span> &amp; mid( sKey, nOffset + 1)<br/>\t\t\t\t<span class=\"kw3\">else</span><br/>\t\t\t\t\tsKey = <span class=\"st0\">\" \"</span> &amp; mid( sKey, nOffset + 1)<br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">next</span><br/>\tpangram = ( ltrim(sKey) = vbnullstring )<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> eef( bCond, exp1, exp2 )<br/>\t<span class=\"kw3\">if</span> bCond <span class=\"kw3\">then</span><br/>\t\teef = exp1<br/>\t<span class=\"kw3\">else</span><br/>\t\teef = exp2<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "XPL0", "loc": 31, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>string 0;                       \\use zero-terminated strings<br/>\u00a0<br/>func StrLen(Str);               \\Return number of characters in an ASCIIZ string<br/>char Str;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if Str(I) = 0 then return I;<br/>\u00a0<br/>func Pangram(S);<br/>char S;<br/>int  A, I, C;<br/>[A:= 0;<br/>for I:= 0 to StrLen(S)-1 do<br/>        [C:= S(I);<br/>        if C&gt;=^A &amp; C&lt;=^Z then C:= C or $20;<br/>        if C&gt;=^a &amp; C&lt;=^z then [C:= C - ^a;  A:= A or 1&lt;&lt;C];<br/>        ];<br/>return A = $3FFFFFF;<br/>]; \\Pangram<br/>\u00a0<br/>int Sentence, I;<br/>[Sentence:=<br/>    [\"The quick brown fox jumps over the lazy dog.\",<br/>     \"Pack my box with five dozen liquor jugs.\",<br/>     \"Now is the time for all good men to come to the aid of their country.\"];<br/>for I:= 0 to 3-1 do<br/>    [Text(0, if Pangram(Sentence(I)) then \"yes\" else \"no\");<br/>    CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 29, "block": "<pre class=\"text highlighted_source\">sub isPangram$(t$, l1$)<br/>\tlocal lt, ll, r$, i, cc, ic<br/>\u00a0<br/>\tif numparams = 1 then<br/>\t\tl1$ = \"abcdefghijklmnopqrstuvwxyz\"<br/>\tend if<br/>\u00a0<br/>\tt$ = lower$(t$)<br/>\tll = len(l1$)<br/>\tfor i = 1 to ll<br/>\t\tr$ = r$ + \" \"<br/>\tnext<br/>\tlt = len(t$)<br/>\tcc = asc(\"a\")<br/>\u00a0<br/>\tfor i = 1 to lt<br/>\t\tic = asc(mid$(t$, i, 1)) - cc + 1<br/>\t\tif ic &gt; 0 and ic &lt;= ll then<br/>\t\t\tmid$(r$, ic, 1) = chr$(ic + cc - 1)<br/>\t\tend if<br/>\tnext i<br/>\u00a0<br/>\tif l1$ = r$ then return \"true\" else return \"false\" end if<br/>\u00a0<br/>end sub<br/>\u00a0<br/>print isPangram$(\"The quick brown fox jumps over the lazy dog.\")   // --&gt; true<br/>print isPangram$(\"The quick brown fox jumped over the lazy dog.\")  // --&gt; false<br/>print isPangram$(\"ABC.D.E.FGHI*J/KL-M+NO*PQ R\\nSTUVWXYZ\")          // --&gt; true</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">var letters=[\"a\"..\"z\"].pump(String); //--&gt;\"abcdefghijklmnopqrstuvwxyz\"<br/>fcn isPangram(text){(not (letters-text.toLower()))}</pre>"}]}