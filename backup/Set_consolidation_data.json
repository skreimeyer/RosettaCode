{"task": "Set_consolidation", "blocks": [{"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Element <span class=\"kw1\">is</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Image<span class=\"br0\">(</span>E: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/><span class=\"kw3\">package</span> Set_Cons <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Set <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- constructor and manipulation functions for type Set</span><br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>E: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>Left, Right: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>Left: Set; Right: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">(</span>Left: Set; Right: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set;<br/>\u00a0<br/>   <span class=\"co1\">-- compare, unite or output a Set</span><br/>   <span class=\"kw3\">function</span> Nonempty_Intersection<span class=\"br0\">(</span>Left, Right: Set<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/>   <span class=\"kw3\">function</span> Union<span class=\"br0\">(</span>Left, Right: Set<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Set;<br/>   <span class=\"kw3\">function</span> Image<span class=\"br0\">(</span>S: Set<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Set_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Set;<br/>\u00a0<br/>   <span class=\"co1\">-- output a Set_Vec</span><br/>   <span class=\"kw3\">function</span> Image<span class=\"br0\">(</span>V: Set_Vec<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Set <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Element<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>\u00a0<br/><span class=\"kw1\">end</span> Set_Cons;</pre>"}, {"lang": "Aime", "loc": 79, "block": "<pre class=\"text highlighted_source\">void<br/>display(list l)<br/>{<br/>    integer i;<br/>    record r;<br/>\u00a0<br/>    for (i, r in l) {<br/>        text u, v;<br/>\u00a0<br/>        o_text(i\u00a0? \", {\"\u00a0: \"{\");<br/>        for (u in r) {<br/>            o_(v, u);<br/>            v = \", \";<br/>        }<br/>        o_text(\"}\");<br/>    }<br/>\u00a0<br/>    o_text(\"\\n\");<br/>}<br/>\u00a0<br/>integer<br/>intersect(record r, record u)<br/>{<br/>    trap_q(r_vcall, r, r_put, 1, record().copy(u), 0);<br/>}<br/>\u00a0<br/>void<br/>merge(record u, record r)<br/>{<br/>    r.wcall(r_add, 1, 2, u);<br/>}<br/>\u00a0<br/>list<br/>consolidate(list l)<br/>{<br/>    integer i;<br/>    record r;<br/>\u00a0<br/>    for (i, r in l) {<br/>        integer j;<br/>\u00a0<br/>        j = i - ~l;<br/>        while (j += 1) {<br/>            record u;<br/>\u00a0<br/>            u = l[j];<br/>            if (intersect(r, u)) {<br/>                merge(u, r);<br/>                l.delete(i);<br/>                i -= 1;<br/>                break;<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    l;<br/>}<br/>\u00a0<br/>record<br/>R(...)<br/>{<br/>    record r;<br/>\u00a0<br/>    ucall(r_put, 1, r, 0);<br/>\u00a0<br/>    return r;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    display(consolidate(list(R(\"A\", \"B\"), R(\"C\", \"D\"))));<br/>    display(consolidate(list(R(\"A\", \"B\"), R(\"B\", \"D\"))));<br/>    display(consolidate(list(R(\"A\", \"B\"), R(\"C\", \"D\"), R(\"D\", \"B\"))));<br/>    display(consolidate(list(R(\"H\", \"I\", \"K\"), R(\"A\", \"B\"), R(\"C\", \"D\"),<br/>                             R(\"D\", \"B\"), R(\"F\", \"G\", \"K\"))));<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "Bracmat", "loc": 28, "block": "<pre class=\"text highlighted_source\">( ( consolidate<br/>  =   a m z mm za zm zz<br/>    .     ( removeNumFactors<br/>          =   a m z<br/>            .    \u00a0!arg:?a+#%*?m+?z<br/>                &amp;\u00a0!a+!m+removeNumFactors$!z<br/>              |\u00a0!arg<br/>          )<br/>        &amp;  \u00a0!arg<br/>         \u00a0:  \u00a0?a<br/>             \u00a0%?`m<br/>              (\u00a0%?z<br/>              &amp;  \u00a0!m<br/>               \u00a0:  \u00a0?<br/>                  + (\u00a0%@?mm<br/>                    &amp;\u00a0!z:?za (?+!mm+?:?zm)\u00a0?zz<br/>                    )<br/>                  +\u00a0?<br/>              )<br/>        &amp; consolidate$(!a removeNumFactors$(!m+!zm)\u00a0!za\u00a0!zz)<br/>      |\u00a0!arg<br/>  )<br/>&amp; (test=.out$(!arg \"==&gt;\" consolidate$!arg))<br/>&amp; test$(A+B C+D)<br/>&amp; test$(A+B B+D)<br/>&amp; test$(A+B C+D D+B)<br/>&amp; test$(H+I+K A+B C+D D+B F+G+H)<br/>);</pre>"}, {"lang": "C", "loc": 37, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define s(x) (1U &lt;&lt; ((x) - 'A'))</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> bitset<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> consolidate<span class=\"br0\">(</span>bitset <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"sy0\">--</span>len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_sets<span class=\"br0\">(</span>bitset <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tbitset b<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>len<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>len<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> s<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c \"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tbitset x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> s<span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">(</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\ts<span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'G'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'H'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">(</span><span class=\"st0\">'H'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'I'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> s<span class=\"br0\">(</span><span class=\"st0\">'K'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Before:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_sets<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>After:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_sets<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> consolidate<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 107, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> SetConsolidation<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> setCollection1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> setCollection2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> setCollection3 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> setCollection4 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"H\"</span>, <span class=\"st0\">\"I\"</span>, <span class=\"st0\">\"K\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"D\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"F\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> input <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>setCollection1, setCollection2, setCollection3, setCollection4<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> sets <span class=\"kw1\">in</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Start sets:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, sets<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Sets consolidated using Nodes:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, ConsolidateSets1<span class=\"br0\">(</span>sets<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Sets consolidated using Set operations:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, ConsolidateSets2<span class=\"br0\">(</span>sets<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Consolidates sets using a connected-component-finding-algorithm involving Nodes with parent pointers.</span><br/>    <span class=\"co1\">/// The more efficient solution, but more elaborate code.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> ConsolidateSets1<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> sets,<br/>        IEqualityComparer<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> comparer <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>comparer <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> comparer <span class=\"sy0\">=</span> EqualityComparer<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;.</span><span class=\"kw1\">Default</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> elements <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span>T, Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">set</span> <span class=\"kw1\">in</span> sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> top <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> element<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>elements<span class=\"sy0\">.</span><span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span><span class=\"kw1\">value</span>, <span class=\"kw1\">out</span> element<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">var</span> newTop <span class=\"sy0\">=</span> element<span class=\"sy0\">.</span><span class=\"me1\">FindTop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        top<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> newTop<span class=\"sy0\">;</span><br/>                        element<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> newTop<span class=\"sy0\">;</span><br/>                        top <span class=\"sy0\">=</span> newTop<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        top <span class=\"sy0\">=</span> element<span class=\"sy0\">.</span><span class=\"me1\">FindTop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    elements<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">value</span>, element <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> top <span class=\"sy0\">=</span> element<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span> element<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> top<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> g <span class=\"kw1\">in</span> elements<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">GroupBy</span><span class=\"br0\">(</span>element <span class=\"sy0\">=&gt;</span> element<span class=\"sy0\">.</span><span class=\"me1\">FindTop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> g<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">class</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> Node<span class=\"br0\">(</span>T <span class=\"kw1\">value</span>, Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> parent <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            Parent <span class=\"sy0\">=</span> parent <span class=\"sy0\">??</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> T <span class=\"kw1\">Value</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Parent <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Node<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> FindTop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> top <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>top <span class=\"sy0\">!=</span> top<span class=\"sy0\">.</span><span class=\"me1\">Parent</span><span class=\"br0\">)</span> top <span class=\"sy0\">=</span> top<span class=\"sy0\">.</span><span class=\"me1\">Parent</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//Set all parents to the top element to prevent repeated iteration in the future</span><br/>            <span class=\"kw1\">var</span> element <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>element<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">!=</span> top<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> parent <span class=\"sy0\">=</span> element<span class=\"sy0\">.</span><span class=\"me1\">Parent</span><span class=\"sy0\">;</span><br/>                element<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> top<span class=\"sy0\">;</span><br/>                element <span class=\"sy0\">=</span> parent<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> top<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Consolidates sets using operations on the HashSet&amp;lt;T&amp;gt; class.</span><br/>    <span class=\"co1\">/// Less efficient than the other method, but easier to write.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> ConsolidateSets2<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> sets,<br/>        IEqualityComparer<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> comparer <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>comparer <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> comparer <span class=\"sy0\">=</span> EqualityComparer<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;.</span><span class=\"kw1\">Default</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> currentSets <span class=\"sy0\">=</span> sets<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> previousSize<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            previousSize <span class=\"sy0\">=</span> currentSets<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> currentSets<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> currentSets<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>currentSets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Overlaps</span><span class=\"br0\">(</span>currentSets<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        currentSets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">UnionWith</span><span class=\"br0\">(</span>currentSets<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        currentSets<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>previousSize <span class=\"sy0\">&gt;</span> currentSets<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">set</span> <span class=\"kw1\">in</span> currentSets<span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">set</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> consolidate <span class=\"br0\">(</span>ss<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>comb <span class=\"br0\">(</span>cs s<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> s<span class=\"br0\">)</span> cs<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> cs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>intersection s <span class=\"br0\">(</span>first cs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first cs<span class=\"br0\">)</span> <span class=\"br0\">(</span>comb <span class=\"br0\">(</span>rest cs<span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>consolidate <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>union s <span class=\"br0\">(</span>first cs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rest cs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>reduce #'comb ss <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 29, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> consolidate<span class=\"br0\">(</span><span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sets<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>set<span class=\"sy0\">;</span> sets<span class=\"br0\">)</span><br/>        set.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> si<span class=\"sy0\">;</span> sets<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>si.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> sj<span class=\"sy0\">;</span> sets<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>sj.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>si.<span class=\"me1\">setIntersection</span><span class=\"br0\">(</span>sj<span class=\"br0\">)</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sj <span class=\"sy0\">=</span> si.<span class=\"me1\">setUnion</span><span class=\"br0\">(</span>sj<span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>                si <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sets.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"st0\">\"!a.empty\"</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'C'</span><span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">consolidate</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'B'</span><span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">consolidate</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'C'</span><span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'D'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">consolidate</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'H'</span><span class=\"sy0\">,</span><span class=\"st0\">'I'</span><span class=\"sy0\">,</span><span class=\"st0\">'K'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'C'</span><span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"st0\">'D'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'F'</span><span class=\"sy0\">,</span><span class=\"st0\">'G'</span><span class=\"sy0\">,</span><span class=\"st0\">'H'</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">consolidate</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; utility\u00a0: make a set of sets from a list</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set<span class=\"sy0\">*</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">list?</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"br0\">(</span><span class=\"kw1\">map</span> make<span class=\"sy0\">-</span>set<span class=\"sy0\">*</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; union of all sets which intersect - O(n^2)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>big ss<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set<br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>u ss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>big u<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>v ss<span class=\"br0\">)</span><span class=\"br0\">)</span> #:when <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>intersect? big v<span class=\"br0\">)</span>  <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>union big v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; remove sets which are subset of another one - O(n^2)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>small ss<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>keep ss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:when <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>v ss<span class=\"br0\">)</span><span class=\"br0\">)</span>  #:continue <span class=\"br0\">(</span>set<span class=\"sy0\">-</span><span class=\"kw1\">equal?</span> keep v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>subset? v keep<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tkeep<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>consolidate ss<span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>small <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>big ss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">S</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set<span class=\"sy0\">*</span> ' <span class=\"br0\">(</span><span class=\"br0\">(</span>h i k<span class=\"br0\">)</span> <span class=\"br0\">(</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span> b c<span class=\"br0\">)</span> <span class=\"br0\">(</span>c <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"kw1\">f</span> g h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">{</span> <span class=\"br0\">{</span> a b <span class=\"br0\">}</span> <span class=\"br0\">{</span> b c <span class=\"br0\">}</span> <span class=\"br0\">{</span> c <span class=\"kw1\">d</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span> <span class=\"kw1\">f</span> g h <span class=\"br0\">}</span> <span class=\"br0\">{</span> h i k <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span>consolidate <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">{</span> <span class=\"br0\">{</span> a b c <span class=\"kw1\">d</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span> <span class=\"kw1\">f</span> g h i k <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Egison", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define $consolidate<br/>  (lambda [$xss]<br/>    (match xss (multiset (set char))<br/>      {[&lt;cons &lt;cons $m $xs&gt;<br/>              &lt;cons &lt;cons ,m $ys&gt;<br/>                    $rss&gt;&gt;<br/>        (consolidate {(unique/m char {m @xs @ys}) @rss})]<br/>       [_ xss]})))<br/>\u00a0<br/>(test (consolidate {{'H' 'I' 'K'} {'A' 'B'} {'C' 'D'} {'D' 'B'} {'F' 'G' 'H'}}))<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 11, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>merge [] ys = ys<br/>merge (x::xs) ys | x `elem` ys = merge xs ys<br/>                 | else = merge xs (x::ys)<br/>\u00a0<br/>consolidate (_::[])@xs = xs<br/>consolidate (x::xs) = conso [x] (consolidate xs)<br/>                where conso xs [] = xs<br/>                      conso (x::xs)@r (y::ys) | intersect x y &lt;&gt; [] = conso ((merge x y)::xs) ys<br/>                                              | else = conso (r ++ [y]) ys</pre>"}, {"lang": "Elixir", "loc": 23, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def set_consolidate(sets, result\\\\[])<br/>  def set_consolidate([], result), do: result<br/>  def set_consolidate([h|t], result) do<br/>    case Enum.find(t, fn set -&gt; not MapSet.disjoint?(h, set) end) do<br/>      nil -&gt; set_consolidate(t, [h | result])<br/>      set -&gt; set_consolidate([MapSet.union(h, set) | t -- [set]], result)<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>examples = [[[:A,:B], [:C,:D]],<br/>            [[:A,:B], [:B,:D]],<br/>            [[:A,:B], [:C,:D], [:D,:B]],<br/>            [[:H,:I,:K], [:A,:B], [:C,:D], [:D,:B], [:F,:G,:H]]]<br/>           |&gt; Enum.map(fn sets -&gt;<br/>                Enum.map(sets, fn set -&gt; MapSet.new(set) end)<br/>              end)<br/>\u00a0<br/>Enum.each(examples, fn sets -&gt;<br/>  IO.write \"#{inspect sets} =&gt;\\n\\t\"<br/>  IO.inspect RC.set_consolidate(sets)<br/>end)</pre>"}, {"lang": "F#", "loc": 26, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span>|SeqNode|SeqEmpty|<span class=\"br0\">)</span> s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">isEmpty</span> s <span class=\"kw1\">then</span> SeqEmpty<br/>    <span class=\"kw1\">else</span> SeqNode <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">head</span> s<span class=\"br0\">)</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">1</span> s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> SetDisjunct x y <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isEmpty</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">intersect</span> x y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> consolidate s <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span>        <br/>    <span class=\"kw1\">match</span> s <span class=\"kw1\">with</span><br/>    | SeqEmpty <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    | SeqNode <span class=\"br0\">(</span>this, rest<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> consolidatedRest <span class=\"sy0\">=</span> consolidate rest<br/>        <span class=\"kw1\">for</span> that <span class=\"kw1\">in</span> consolidatedRest <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>SetDisjunct this that<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> that<br/>        <span class=\"kw1\">yield</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x y <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>SetDisjunct x y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">union</span> x y <span class=\"kw1\">else</span> x<span class=\"br0\">)</span> this consolidatedRest<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> makeSeqOfSet listOfList <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span> x<span class=\"br0\">)</span> listOfList <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">ofList</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>consolidate <span class=\"br0\">(</span>makeSeqOfSet x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"H\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"I\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"K\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"F\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"G\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Go", "loc": 56, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> set <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw1\">var</span> testCase <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>set<span class=\"sy1\">{</span><br/>    set<span class=\"sy1\">{</span><span class=\"st0\">\"H\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"I\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"K\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">},</span><br/>    set<span class=\"sy1\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">},</span><br/>    set<span class=\"sy1\">{</span><span class=\"st0\">\"C\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">},</span><br/>    set<span class=\"sy1\">{</span><span class=\"st0\">\"D\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">},</span><br/>    set<span class=\"sy1\">{</span><span class=\"st0\">\"F\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>consolidate<span class=\"sy1\">(</span>testCase<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> consolidate<span class=\"sy1\">(</span>sets <span class=\"sy1\">[]</span>set<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>set <span class=\"sy1\">{</span><br/>    setlist <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>set<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sets <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> s <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> &amp;&amp; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            setlist <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>setlist<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> setlist <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s1<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s2 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> setlist<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> s1<span class=\"sy3\">.</span>disjoint<span class=\"sy1\">(</span>s2<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s1 <span class=\"sy1\">{</span><br/>                    s2<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>                    delete<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                s1 <span class=\"sy2\">=</span> s2<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>set<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> setlist <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s1 set<span class=\"sy1\">)</span> disjoint<span class=\"sy1\">(</span>s2 set<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s2 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> s1<span class=\"sy1\">[</span>e<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Set <span class=\"kw1\">as</span> S<br/>\u00a0<br/>consolidate <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>S<span class=\"sy0\">.</span>Set a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>S<span class=\"sy0\">.</span>Set a<span class=\"br0\">]</span><br/>consolidate <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> comb <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span> comb <span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"st0\">' = [s'</span><span class=\"br0\">]</span><br/>        comb <span class=\"br0\">(</span>s:ss<span class=\"br0\">)</span> s<span class=\"st0\">'<br/>          | S.null (s `S.intersection` s'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s\u00a0: comb ss s<span class=\"st0\">'<br/>          | otherwise = comb ss (s `S.union` s'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">consolidate=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span>/<br/>  b=. <span class=\"kw2\">y</span> <span class=\"nu0\">1</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"23460d63460d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;&gt; <span class=\"kw2\">x</span><br/>  <span class=\"sy0\">(</span><span class=\"nu0\">1</span>,-.b<span class=\"sy0\">)</span>#<span class=\"sy0\">(</span>~.;<span class=\"kw2\">x</span>,b#<span class=\"kw2\">y</span><span class=\"sy0\">)</span>;<span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 63, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SetConsolidation <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> h1 <span class=\"sy0\">=</span> hashSetList<span class=\"br0\">(</span><span class=\"st0\">\"AB\"</span>, <span class=\"st0\">\"CD\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>consolidate<span class=\"br0\">(</span>h1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> h2 <span class=\"sy0\">=</span> hashSetList<span class=\"br0\">(</span><span class=\"st0\">\"AB\"</span>, <span class=\"st0\">\"BD\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>consolidateR<span class=\"br0\">(</span>h2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> h3 <span class=\"sy0\">=</span> hashSetList<span class=\"br0\">(</span><span class=\"st0\">\"AB\"</span>, <span class=\"st0\">\"CD\"</span>, <span class=\"st0\">\"DB\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>consolidate<span class=\"br0\">(</span>h3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> h4 <span class=\"sy0\">=</span> hashSetList<span class=\"br0\">(</span><span class=\"st0\">\"HIK\"</span>, <span class=\"st0\">\"AB\"</span>, <span class=\"st0\">\"CD\"</span>, <span class=\"st0\">\"DB\"</span>, <span class=\"st0\">\"FGH\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>consolidateR<span class=\"br0\">(</span>h4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// iterative</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span><br/>                consolidate<span class=\"br0\">(</span>Collection<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tList<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> s <span class=\"sy0\">:</span> sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> new_r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    new_r.<span class=\"me1\">add</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> x <span class=\"sy0\">:</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">disjoint</span><span class=\"br0\">(</span>s, x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t    s.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    new_r.<span class=\"me1\">add</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    r <span class=\"sy0\">=</span> new_r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// recursive</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> consolidateR<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sets.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> sets<span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;&gt;</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r.<span class=\"me1\">add</span><span class=\"br0\">(</span>sets.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Set<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> x <span class=\"sy0\">:</span> consolidateR<span class=\"br0\">(</span>sets.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, sets.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">disjoint</span><span class=\"br0\">(</span>r.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                r.<span class=\"me1\">add</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> hashSetList<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">set</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;&gt;</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> set.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> set<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                r.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>set<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">def to_set: unique;<br/>\u00a0<br/>def union(A; B): (A + B) | unique;<br/>\u00a0<br/># boolean<br/>def intersect(A;B):<br/>  reduce A[] as $x (false; if . then . else (B|index($x)) end) | not | not;</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function consolidate{T}(a::Array{Set{T},1})<br/>    1 &lt; length(a) || return a<br/>    b = copy(a)<br/>    c = Set{T}[]<br/>    while 1 &lt; length(b)<br/>        x = shift!(b)<br/>        cme = true<br/>        for (i, y) in enumerate(b)<br/>           \u00a0!isempty(intersect(x, y)) || continue<br/>            cme = false<br/>            b[i] = union(x, y)<br/>            break<br/>        end<br/>       \u00a0!cme || push!(c, x)<br/>    end<br/>    push!(c, b[1])<br/>    return c<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun<span class=\"sy0\">&lt;</span>T <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> consolidateSets<span class=\"br0\">(</span>sets<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Set<span class=\"sy0\">&lt;</span>Set<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> sets.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> consolidated <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"co1\">// all false by default</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> size - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>consolidated<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> intersects <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> until size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>consolidated<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> continue <br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sets<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>sets<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        sets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sets<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">union</span><span class=\"br0\">(</span>sets<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        consolidated<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                        intersects++<br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>intersects <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> break<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until size<span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span>consolidated<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> sets<span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">toSortedSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">toSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                    <br/><span class=\"br0\">}</span>              <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> unconsolidatedSets <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        arrayOf<span class=\"br0\">(</span>setOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        arrayOf<span class=\"br0\">(</span>setOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'B'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        arrayOf<span class=\"br0\">(</span>setOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'D'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        arrayOf<span class=\"br0\">(</span>setOf<span class=\"br0\">(</span><span class=\"st0\">'H'</span>, <span class=\"st0\">'I'</span>, <span class=\"st0\">'K'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'D'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span>, setOf<span class=\"br0\">(</span><span class=\"st0\">'F'</span>, <span class=\"st0\">'G'</span>, <span class=\"st0\">'H'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>sets in unconsolidatedSets<span class=\"br0\">)</span> println<span class=\"br0\">(</span>consolidateSets<span class=\"br0\">(</span>sets<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">reduce[x_]\u00a0:=<br/> Block[{pairs, unique},<br/>  pairs = <br/>   DeleteCases[<br/>    Subsets[<a class=\"__cf_email__\" data-cfemail=\"491b28272e2c09\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      <a class=\"__cf_email__\" data-cfemail=\"a9e5ccc7ceddc1e9d1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, {2}], _?(Intersection @@ x[[#]] == {} &amp;)];<br/>  unique = Complement[<a class=\"__cf_email__\" data-cfemail=\"ce9cafa0a9ab8e82aba0a9baa6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@x, <a class=\"__cf_email__\" data-cfemail=\"1e58727f6a6a7b705e6e7f776c6d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>];<br/>  Join[Union[Flatten[x[[#]]]] &amp; /@ pairs, x[[unique]]]]<br/>\u00a0<br/>consolidate[x__]\u00a0:= FixedPoint[reduce, {x}]</pre>"}, {"lang": "OCaml", "loc": 40, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> join a b <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc v <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem v acc <span class=\"kw1\">then</span> acc <span class=\"kw1\">else</span> v<span class=\"sy0\">::</span>acc<br/>  <span class=\"br0\">)</span> b a<br/>\u00a0<br/><span class=\"kw1\">let</span> share a b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>exists <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem x b<span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"kw1\">let</span> extract p lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> p x <span class=\"kw1\">then</span> Some <span class=\"br0\">(</span>x, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev_append acc xs<span class=\"br0\">)</span> <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> xs<br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span><span class=\"br0\">]</span> lst<br/>\u00a0<br/><span class=\"kw1\">let</span> consolidate sets <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">match</span> extract <span class=\"br0\">(</span>share x<span class=\"br0\">)</span> xs <span class=\"kw1\">with</span><br/>      <span class=\"sy0\">|</span> Some <span class=\"br0\">(</span>y, ys<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> aux acc <span class=\"br0\">(</span><span class=\"br0\">(</span>join x y<span class=\"br0\">)</span> <span class=\"sy0\">::</span> ys<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> aux <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> xs<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span><span class=\"br0\">]</span> sets<br/>\u00a0<br/><span class=\"kw1\">let</span> print_sets sets <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"{ \"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> set <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"{\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\" \"</span> set<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"} \"</span><br/>  <span class=\"br0\">)</span> sets<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"}\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  print_sets <span class=\"br0\">(</span>consolidate <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_sets <span class=\"br0\">(</span>consolidate <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_sets <span class=\"br0\">(</span>consolidate <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_sets <span class=\"br0\">(</span>consolidate <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"H\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"I\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"K\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"D\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                           <span class=\"br0\">[</span><span class=\"st0\">\"F\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"G\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 116, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 04.08.2013 Walter Pachl using ooRexx features<br/>*                   (maybe not in the best way -improvements welcome!)<br/>*                   but trying to demonstrate the algorithm<br/>**********************************************************************/</span><br/>s<span class=\"sy0\">.</span>1=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'C'</span>,<span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>2=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'B'</span>,<span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>3=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'C'</span>,<span class=\"st0\">'D'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'D'</span>,<span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>4=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'H'</span>,<span class=\"st0\">'I'</span>,<span class=\"st0\">'K'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'C'</span>,<span class=\"st0\">'D'</span><span class=\"br0\">)</span>,,<br/>              <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'B'</span>,<span class=\"st0\">'D'</span><span class=\"br0\">)</span>,<span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'F'</span>,<span class=\"st0\">'G'</span>,<span class=\"st0\">'H'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>5=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'snow'</span>,<span class=\"st0\">'ice'</span>,<span class=\"st0\">'slush'</span>,<span class=\"st0\">'frost'</span>,<span class=\"st0\">'fog'</span><span class=\"br0\">)</span>,,<br/>              <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'iceburgs'</span>,<span class=\"st0\">'icecubes'</span><span class=\"br0\">)</span>,,<br/>              <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"st0\">'rain'</span>,<span class=\"st0\">'fog'</span>,<span class=\"st0\">'sleet'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>6=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">'one'</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">.</span>7=<span class=\"sy0\">.</span>array~new<br/>s<span class=\"sy0\">.</span>8=<span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">8</span>                           <span class=\"coMULTI\">/* loop through the test data */</span><br/>  na=s<span class=\"sy0\">.</span>si                              <span class=\"coMULTI\">/* an array of sets           */</span><br/>  head=<span class=\"st0\">'Output(s):'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'Input'</span> si,<span class=\"nu0\">10</span><span class=\"br0\">)</span> list_as<span class=\"br0\">(</span>na<span class=\"br0\">)</span>  <span class=\"coMULTI\">/* show the input             */</span><br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> na~items<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>                <span class=\"coMULTI\">/* while the array ain't empty*/</span><br/>    na=cons<span class=\"br0\">(</span>na<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/* consolidate and get back   */</span><br/>                                       <span class=\"coMULTI\">/*  array of remaining sets   */</span><br/>    head=<span class=\"st0\">'          '</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'===='</span>                           <span class=\"coMULTI\">/* separator line             */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>cons: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> head<br/><span class=\"coMULTI\">/**********************************************************************<br/>* consolidate the sets in the given array<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> a<br/>  w=a                                  <span class=\"coMULTI\">/* work on a copy             */</span><br/>  n=w~items<span class=\"br0\">(</span><span class=\"br0\">)</span>                          <span class=\"coMULTI\">/* number of sets in the array*/</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> n=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span>                      <span class=\"coMULTI\">/* no set in array            */</span><br/>      <span class=\"kw1\">Return</span> <span class=\"sy0\">.</span>array~new                <span class=\"coMULTI\">/* retuns an empty array      */</span><br/>    <span class=\"kw3\">When</span> n=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                   <span class=\"coMULTI\">/* one set in array           */</span><br/>      <span class=\"kw1\">Say</span> head list<span class=\"br0\">(</span>w<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/* show its contents          */</span><br/>      <span class=\"kw1\">Return</span> <span class=\"sy0\">.</span>array~new                <span class=\"coMULTI\">/* retuns an empty array      */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span>                       <span class=\"coMULTI\">/* at least two sets are there*/</span><br/>      b=<span class=\"sy0\">.</span>array~new                     <span class=\"coMULTI\">/* use for remaining sets     */</span><br/>      r=w<span class=\"br0\">[</span>n<span class=\"br0\">]</span>                           <span class=\"coMULTI\">/* start with last set        */</span><br/>      try=<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Do</span> <span class=\"kw2\">until</span> changed=<span class=\"nu0\">0</span>               <span class=\"coMULTI\">/* loop until result is stable*/</span><br/>        changed=<span class=\"nu0\">0</span><br/>        new=<span class=\"nu0\">0</span><br/>        n=w~items<span class=\"br0\">(</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/* number of sets             */</span><br/>        <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n-try                <span class=\"coMULTI\">/* loop first through n-1 sets*/</span><br/>          try=<span class=\"nu0\">0</span>                        <span class=\"coMULTI\">/* then through all of them   */</span><br/>          is=r~intersection<span class=\"br0\">(</span>w<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> is~items<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>        <span class=\"coMULTI\">/* any elements in common     */</span><br/>            r=r~union<span class=\"br0\">(</span>w<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* result is the union        */</span><br/>            Changed=<span class=\"nu0\">1</span>                  <span class=\"coMULTI\">/* and result is now larger   */</span><br/>            <span class=\"kw3\">End</span><br/>          <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span>                      <span class=\"coMULTI\">/* no elemen in common        */</span><br/>            new=new+<span class=\"nu0\">1</span>                  <span class=\"coMULTI\">/* add the set to the array   */</span><br/>            b<span class=\"br0\">[</span>new<span class=\"br0\">]</span>=w<span class=\"br0\">[</span>i<span class=\"br0\">]</span>                <span class=\"coMULTI\">/* of remaining sets          */</span><br/>            <span class=\"kw3\">End</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw1\">If</span> b~items<span class=\"br0\">(</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>         <span class=\"coMULTI\">/* no remaining sets          */</span><br/>          w=<span class=\"sy0\">.</span>array~new<br/>          <span class=\"kw1\">Leave</span>                        <span class=\"coMULTI\">/* we are done                */</span><br/>          <span class=\"kw3\">End</span><br/>        w=b                            <span class=\"coMULTI\">/* repeat with remaining sets */</span><br/>        b=<span class=\"sy0\">.</span>array~new                   <span class=\"coMULTI\">/* prepare for next iteration */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Say</span> head list<span class=\"br0\">(</span>r<span class=\"br0\">)</span>                   <span class=\"coMULTI\">/* show one consolidated set  */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> w                             <span class=\"coMULTI\">/* return array of remaining  */</span><br/>\u00a0<br/>list: <span class=\"kw1\">Procedure</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* list elements of given set<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw1\">trace</span>\u00a0?O<br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> set<br/>  arr=set~makeArray<br/>  arr~sort<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  ol=<span class=\"st0\">'('</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> arr~items<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> i=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>      ol=ol<span class=\"sy0\">||</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw3\">Else</span><br/>      ol=ol<span class=\"sy0\">||</span><span class=\"st0\">','</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> ol<span class=\"st0\">')'</span><br/>\u00a0<br/>list_as: <span class=\"kw1\">Procedure</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* List an array of sets<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw1\">trace</span>\u00a0?O<br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> a<br/>  n=a~items<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    ol=<span class=\"st0\">'no element in array'</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    ol=<span class=\"st0\">''</span><br/>    <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n<br/>      ol=ol <span class=\"st0\">'('</span><br/>      arr=a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>~makeArray<br/>      <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> arr~items<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> j=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>          ol=ol<span class=\"sy0\">||</span>arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"kw3\">Else</span><br/>          ol=ol<span class=\"st0\">','</span>arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"kw3\">End</span><br/>      ol=ol<span class=\"st0\">') '</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>ol<span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">cons<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#V<span class=\"sy0\">,</span><br/>    v<span class=\"sy0\">=</span>V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#V<span class=\"sy0\">,</span><br/>      u<span class=\"sy0\">=</span>V<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>#setintersect<span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span>V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">setunion</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>V<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>s<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  V<span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>#v<span class=\"sy0\">,</span>V<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>cons<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy0\">,</span>V<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 47, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> English<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Smart<span class=\"sy0\">::</span><span class=\"me2\">Comments</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@ex1</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'C'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'D'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">### Example 1: @ex1</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ex2</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'B'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'D'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">### Example 2: @ex2</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ex3</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'C'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'D'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'D'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">### Example 3: @ex3</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ex4</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'H'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'I'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'K'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'C'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'D'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'D'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'F'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'G'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'H'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">### Example 4: @ex4</span><br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> consolidate <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@ARG</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@result</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"re0\">@ARG</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@recursion</span> <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span><span class=\"re0\">@ARG</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"br0\">(</span><span class=\"re0\">@recursion</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>set_intersection<span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> set_union<span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@result</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> set_union <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%union</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$a_elt</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$union</span><span class=\"br0\">{</span><span class=\"re0\">$a_elt</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$b_elt</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$union</span><span class=\"br0\">{</span><span class=\"re0\">$b_elt</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span> <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a><span class=\"br0\">(</span><span class=\"re0\">%union</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> set_intersection <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%a_hash</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$a_elt</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$a_hash</span><span class=\"br0\">{</span><span class=\"re0\">$a_elt</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@result</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$b_elt</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@result</span><span class=\"sy0\">,</span> <span class=\"re0\">$b_elt</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$a_hash</span><span class=\"br0\">{</span><span class=\"re0\">$b_elt</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 17, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">multi</span> consolidate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> consolidate<span class=\"br0\">(</span>Set \\this <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@those</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> consolidate <span class=\"sy0\">|</span><span class=\"re0\">@those</span> <span class=\"sy0\">-&gt;</span> \\that <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> this \u2229 that <span class=\"br0\">{</span> this <span class=\"sy0\">=</span> this \u222a that <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span>           <span class=\"br0\">{</span> take that <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        take this<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Elems <span class=\"sy0\">&lt;</span>A B C D E F G H <span class=\"kw3\">I</span> J K<span class=\"sy0\">&gt;;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>    ==&gt; \"</span><span class=\"sy0\">,</span> consolidate <span class=\"sy0\">|</span><span class=\"re0\">$_</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">[</span>set<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>set<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>set<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>set<span class=\"br0\">(</span>H<span class=\"sy0\">,</span><span class=\"kw3\">I</span><span class=\"sy0\">,</span>K<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">,</span> set<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>G<span class=\"sy0\">,</span>H<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de consolidate (S)<br/>   (when S<br/>      (let R (cons (car S))<br/>         (for X (consolidate (cdr S))<br/>            (if (mmeq X (car R))<br/>               (set R (uniq (conc X (car R))))<br/>               (conc R (cons X)) ) )<br/>         R ) ) )</pre>"}, {"lang": "PL/I", "loc": 58, "block": "<pre class=\"text highlighted_source\">Set: procedure options (main);     /* 13 November 2013 */<br/>   declare set(20) character (200) varying;<br/>   declare e character (1);<br/>   declare (i, n) fixed binary;<br/>\u00a0<br/>   set = '';<br/>   n = 1;<br/>   do until (e = ']');<br/>      get edit (e) (a(1)); put edit (e) (a(1));<br/>      if e = '}' then n = n + 1; /* end of set. */<br/>      if e ^= '{' &amp; e ^= ',' &amp; e ^= '}' &amp; e ^= ' ' then<br/>         set(n) = set(n) || e;   /* Build set */<br/>   end;<br/>   /* We have read in all sets. */<br/>   n = n - 1; /* we have n sets */<br/>   /* Display the sets: */<br/>   put skip list ('The original sets:');<br/>   do i = 1 to n;<br/>      call print(i);<br/>   end;<br/>   /* Look for sets to combine: */<br/>   do i = 2 to n;<br/>      if length(set(i)) &gt; 0 then<br/>         if search(set(1), set(i)) &gt; 0 then<br/>            /* there's at least one common element */<br/>            do; call combine (1, i); set(i) = '';  end;<br/>   end;<br/>\u00a0<br/>   put skip (2) list ('Results:');<br/>   do i = 1 to n;<br/>      if length(set(i)) &gt; 0 then call print (i);<br/>   end;<br/>\u00a0<br/>combine: procedure (p, q);<br/>   declare (p, q) fixed binary;<br/>   declare e character (1);<br/>   declare i fixed binary;<br/>\u00a0<br/>   do i = 1 to length(set(q));<br/>      e = substr(set(q), i, 1);<br/>      if index(set(p), e) = 0 then set(p) = set(p) || e;<br/>   end;<br/>\u00a0<br/>end combine;<br/>\u00a0<br/>print: procedure(k);<br/>   declare k fixed binary;<br/>   declare i fixed binary;<br/>\u00a0<br/>   put edit ('{') (a);<br/>   do i = 1 to length(set(k));<br/>      put edit (substr(set(k), i, 1)) (a);<br/>      if i &lt; length(set(k)) then put edit (',') (a);<br/>   end;<br/>   put edit ('} ') (a);<br/>end print;<br/>\u00a0<br/>end Set;</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> consolidate<span class=\"br0\">(</span><span class=\"kw3\">sets</span><span class=\"br0\">)</span>:<br/>    setlist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw3\">sets</span> <span class=\"kw1\">if</span> s<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> s1 <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>setlist<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> s1:<br/>            <span class=\"kw1\">for</span> s2 <span class=\"kw1\">in</span> setlist<span class=\"br0\">[</span>i+<span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>                intersection <span class=\"sy0\">=</span> s1.<span class=\"me1\">intersection</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> intersection:<br/>                    s2.<span class=\"me1\">update</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>                    s1.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    s1 <span class=\"sy0\">=</span> s2<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>s <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> setlist <span class=\"kw1\">if</span> s<span class=\"br0\">]</span></pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (consolidate ss)<br/>  (define (comb s cs)<br/>    (cond [(set-empty? s) cs]<br/>          [(empty? cs) (list s)]<br/>          [(set-empty? (set-intersect s (first cs)))<br/>           (cons (first cs) (comb s (rest cs)))]<br/>          [(consolidate (cons (set-union s (first cs)) (rest cs)))]))<br/>  (foldl comb '() ss))<br/>\u00a0<br/>(consolidate (list (set 'a 'b) (set 'c 'd)))<br/>(consolidate (list (set 'a 'b) (set 'b 'c)))<br/>(consolidate (list (set 'a 'b) (set 'c 'd) (set 'd 'b)))<br/>(consolidate (list (set 'h 'i 'k) (set 'a 'b) (set 'c 'd) (set 'd 'b) (set 'f 'g 'h)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 52, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  a method  of  consolidating  some sample  sets.           */</span><br/>@<span class=\"sy0\">.</span>=;     @<span class=\"sy0\">.</span>1 = <span class=\"st0\">'{A,B}     {C,D}'</span><br/>         @<span class=\"sy0\">.</span>2 = <span class=\"st0\">\"{A,B}     {B,D}\"</span><br/>         @<span class=\"sy0\">.</span>3 = <span class=\"st0\">'{A,B}     {C,D}     {D,B}'</span><br/>         @<span class=\"sy0\">.</span>4 = <span class=\"st0\">'{H,I,K}   {A,B}     {C,D}     {D,B}     {F,G,H}'</span><br/>         @<span class=\"sy0\">.</span>5 = <span class=\"st0\">'{snow,ice,slush,frost,fog} {icebergs,icecubes} {rain,fog,sleet}'</span><br/>\u00a0<br/>               <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>            <span class=\"coMULTI\">/*traipse through each of sample sets. */</span><br/>               <span class=\"kw1\">call</span> SETconsolidate @<span class=\"sy0\">.</span>j           <span class=\"coMULTI\">/*have the function do the heavy work. */</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isIn:  <span class=\"kw1\">return</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>        <span class=\"coMULTI\">/*is (word) argument 1 in the set arg2?*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>SETconsolidate: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> old;       #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>old<span class=\"br0\">)</span>;      new=<br/>       <span class=\"kw1\">say</span> <span class=\"st0\">' the old set='</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>old<span class=\"br0\">)</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                           <span class=\"coMULTI\">/* [\u2193]  change all commas to a blank.  */</span><br/>        \u00a0!<span class=\"sy0\">.</span>k=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>old,k<span class=\"br0\">)</span>, , <span class=\"st0\">'},{'</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*create a list of words  (aka, a set).*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                             <span class=\"coMULTI\">/* [\u2191]  \u00b7\u00b7\u00b7 and also remove the braces.*/</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> <span class=\"sy0\">\\</span>changed;    changed=<span class=\"nu0\">0</span>        <span class=\"coMULTI\">/*consolidate some sets  (well, maybe).*/</span><br/>              <span class=\"kw1\">do</span> set=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #-<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">do</span> item=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set<span class=\"br0\">)</span>;       x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set, item<span class=\"br0\">)</span><br/>                      <span class=\"kw1\">do</span> other=set+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> #<br/>                      <span class=\"kw1\">if</span> isIn<span class=\"br0\">(</span>x,\u00a0!<span class=\"sy0\">.</span>other<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  changed=<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*it's changed*/</span><br/>                                                    \u00a0!<span class=\"sy0\">.</span>set=!<span class=\"sy0\">.</span>set\u00a0!<span class=\"sy0\">.</span>other;  \u00a0!<span class=\"sy0\">.</span>other=<br/>                                                     <span class=\"kw1\">iterate</span> set<br/>                                                <span class=\"kw3\">end</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*other*/</span><br/>                  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*item */</span><br/>              <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*set  */</span><br/>         <span class=\"kw3\">end</span>                <span class=\"coMULTI\">/*until \u00acchanged*/</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span> set=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;   $=                                           <span class=\"coMULTI\">/*elide dups*/</span><br/>              <span class=\"kw1\">do</span> items=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set<span class=\"br0\">)</span>;   x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set, items<span class=\"br0\">)</span><br/>              <span class=\"kw1\">if</span> x==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;        <span class=\"kw1\">if</span> x==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>              $=$ x                                                         <span class=\"coMULTI\">/*build new. */</span><br/>                     <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  <span class=\"sy0\">\\</span>isIn<span class=\"br0\">(</span>x,\u00a0!<span class=\"sy0\">.</span>set<span class=\"br0\">)</span><br/>                     _=<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>x,\u00a0!<span class=\"sy0\">.</span>set<span class=\"br0\">)</span><br/>                    \u00a0!<span class=\"sy0\">.</span>set=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set, <span class=\"nu0\">1</span>, _-<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"st0\">','</span>  <span class=\"kw6\">subword</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>set, _+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*purify set*/</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until \u00acisIn \u00b7\u00b7\u00b7 */</span><br/>              <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*items*/</span><br/>           \u00a0!<span class=\"sy0\">.</span>set=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>, <span class=\"st0\">','</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*set*/</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #; <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>i==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*ignore any  set  that is a null set. */</span><br/>         new=<span class=\"kw6\">space</span><span class=\"br0\">(</span>new  <span class=\"st0\">'{'</span>!<span class=\"sy0\">.</span>i<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*prepend and append a set identifier. */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>\u00a0<br/>       <span class=\"kw1\">say</span> <span class=\"st0\">' the new set='</span>  new;         <span class=\"kw1\">say</span><br/>       <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Set consolidation<br/>\u00a0<br/>load \"stdlib.ring\"<br/>test = [\"AB\",\"AB,CD\",\"AB,CD,DB\",\"HIK,AB,CD,DB,FGH\"]<br/>for t in test<br/>     see consolidate(t) + nl<br/>next<br/>func consolidate(s)<br/>\tsets = split(s,\",\")<br/>\tn = len(sets)<br/>\tfor i = 1 to n<br/>\t     p = i<br/>             ts = \"\"<br/>\t     for j = i to 1 step -1<br/>\t\t if ts = \"\" <br/>\t\t    p = j<br/>\t\t ok<br/>\t\t ts = \"\"<br/>\t\t for k = 1 to len(sets[p])<br/>                      if j &gt; 1<br/>\t\t         if substring(sets[j-1],substr(sets[p],k,1),1) = 0 <br/>\t\t\t     ts = ts + substr(sets[p],k,1)<br/>\t\t         ok<br/>                      ok<br/>\t\t next<br/>\t\t if len(ts) &lt; len(sets[p]) <br/>                    if j &gt; 1<br/>\t\t       sets[j-1] = sets[j-1] + ts<br/>\t\t       sets[p] = \"-\"<br/>\t\t       ts = \"\"<br/>                    ok<br/>\t\t else<br/>\t\t    p = i<br/>\t\t ok<br/>\t     next\t<br/>\tnext<br/>\tconsolidate = s + \" = \" + substr(list2str(sets),nl,\",\")<br/>        return consolidate<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/>\u00a0<br/>tests = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:A</span>,:B<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:C</span>,:D<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>         <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:A</span>,:B<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:B</span>,:D<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>         <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:A</span>,:B<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:C</span>,:D<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:D</span>,:B<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>         <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:H</span>,:I,:K<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:A</span>,:B<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:C</span>,:D<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:D</span>,:B<span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:F</span>,:G,:H<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>tests.<span class=\"me1\">map</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>sets<span class=\"sy0\">|</span> sets.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_set<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>tests.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>sets<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">until</span> sets.<span class=\"me1\">combination</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">none</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a.<span class=\"me1\">merge</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> sets.<span class=\"me1\">delete</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">if</span> a.<span class=\"me1\">intersect</span>?<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">p</span> sets<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SetConsolidation <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> consolidate<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">(</span>sets<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Set<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Set<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result <span class=\"sy0\">=</span> sets <span class=\"co1\">// each iteration combines two sets and reiterates, else returns</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- sets<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span>- sets - i<span class=\"sy0\">;</span> k <span class=\"sy0\">=</span> i.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> result <span class=\"sy0\">==</span> sets <span class=\"sy0\">&amp;&amp;</span> k.<span class=\"me1\">nonEmpty</span><span class=\"br0\">)</span> result <span class=\"sy0\">=</span> result - i - j + i.<span class=\"me1\">union</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result <span class=\"sy0\">==</span> sets<span class=\"br0\">)</span> sets <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> consolidate<span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Tests:</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parse<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> pretty<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">(</span>sets<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Set<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        sets.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span>,<span class=\"st0\">\",\"</span>,<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tests <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><br/>        parse<span class=\"br0\">(</span><span class=\"st0\">\"AB,CD\"</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Set<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        parse<span class=\"br0\">(</span><span class=\"st0\">\"AB,BD\"</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Set<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        parse<span class=\"br0\">(</span><span class=\"st0\">\"AB,CD,DB\"</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Set<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        parse<span class=\"br0\">(</span><span class=\"st0\">\"HIK,AB,CD,DB,FGH\"</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Set<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"st0\">\"F\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span>, <span class=\"st0\">\"I\"</span>, <span class=\"st0\">\"K\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    require<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    assert<span class=\"br0\">(</span>tests.<span class=\"me1\">forall</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>test, expect<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> consolidate<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>s<span class=\"st0\">\"${pretty(test)} -&gt; ${pretty(result)}\"</span><span class=\"br0\">)</span><br/>        expect <span class=\"sy0\">==</span> result<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">func consolidate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>func consolidate<span class=\"br0\">(</span>this, <span class=\"sy0\">*</span>those<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        consolidate<span class=\"br0\">(</span>those...<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>that<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>this <span class=\"sy0\">&amp;</span> that<span class=\"br0\">)</span> <span class=\"br0\">{</span> this <span class=\"sy0\">|</span>= that <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span>             <span class=\"br0\">{</span> take that <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        take this;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>enum <span class=\"sy0\">|</span>A=<span class=\"st0\">\"A\"</span>, B, C, D, _E, F, G, H, I, _J, K<span class=\"sy0\">|</span>;<br/>\u00a0<br/>func <span class=\"kw3\">format</span><span class=\"br0\">(</span>ss<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ss.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"st0\">'('</span> <span class=\"sy0\">+</span> .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">')'</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span>A,B<span class=\"br0\">]</span>, <span class=\"br0\">[</span>C,D<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span>A,B<span class=\"br0\">]</span>, <span class=\"br0\">[</span>B,D<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span>A,B<span class=\"br0\">]</span>, <span class=\"br0\">[</span>C,D<span class=\"br0\">]</span>, <span class=\"br0\">[</span>D,B<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span>H,I,K<span class=\"br0\">]</span>, <span class=\"br0\">[</span>A,B<span class=\"br0\">]</span>, <span class=\"br0\">[</span>C,D<span class=\"br0\">]</span>, <span class=\"br0\">[</span>D,B<span class=\"br0\">]</span>, <span class=\"br0\">[</span>F,G,H<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>ss<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>ss<span class=\"br0\">)</span>, <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>==&gt; \"</span>, <span class=\"kw3\">format</span><span class=\"br0\">(</span>consolidate<span class=\"br0\">(</span>ss...<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw1\">set</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> consolidate <span class=\"br0\">{</span>sets<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$sets</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$sets</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> r0 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$sets</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> x <span class=\"br0\">[</span>consolidate <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$sets</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>struct::<span class=\"kw1\">set</span> size <span class=\"br0\">[</span>struct::<span class=\"kw1\">set</span> intersect <span class=\"re0\">$x</span> <span class=\"re0\">$r0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    struct::<span class=\"kw1\">set</span> add r0 <span class=\"re0\">$x</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> r <span class=\"re0\">$x</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lset</span> r <span class=\"nu0\">0</span> <span class=\"re0\">$r0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 25, "block": "<pre class=\"text highlighted_source\">(defun mkset (p x) (set [p x] (or [p x] x)))<br/>\u00a0<br/>(defun fnd (p x) (if (eq [p x] x) x (fnd p [p x])))<br/>\u00a0<br/>(defun uni (p x y)<br/>  (let ((xr (fnd p x)) (yr (fnd p y)))<br/>    (set [p xr] yr)))<br/>\u00a0<br/>(defun consoli (sets)<br/>  (let ((p (hash)))<br/>    (each ((s sets))<br/>      (each ((e s))<br/>        (mkset p e)<br/>        (uni p e (car s))))<br/>    (hash-values <br/>      [group-by (op fnd p) (hash-keys <br/>                             [group-by identity (flatten sets)])])))<br/>\u00a0<br/>;; tests<br/>\u00a0<br/>(each ((test '(((a b) (c d))<br/>               ((a b) (b d))<br/>               ((a b) (c d) (d b))<br/>               ((h i k) (a b) (c d) (d b) (f g h)))))<br/>  (format t \"~s -&gt; ~s\\n\" test (consoli test)))</pre>"}, {"lang": "VBScript", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> consolidate(s)<br/>\tsets = Split(s,<span class=\"st0\">\",\"</span>)<br/>\tn = <span class=\"kw4\">UBound</span>(sets)<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>\t\tp = i<br/>\t\tts = <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw3\">For</span> j = i <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\t<span class=\"kw3\">If</span> ts = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span> <br/>\t\t\t\tp = j<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\tts = <span class=\"st0\">\"\"</span><br/>\t\t\t<span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> Len(sets(p))<br/>\t\t\t\t<span class=\"kw3\">If</span> InStr(1,sets(j-1),Mid(sets(p),k,1)) = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tts = ts &amp; Mid(sets(p),k,1)<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Next</span><br/>\t\t\t<span class=\"kw3\">If</span> Len(ts) &lt; Len(sets(p)) <span class=\"kw3\">Then</span><br/>\t\t\t\tsets(j-1) = sets(j-1) &amp; ts<br/>\t\t\t\tsets(p) = <span class=\"st0\">\"-\"</span><br/>\t\t\t\tts = <span class=\"st0\">\"\"</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tp = i<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span>\t<br/>\t<span class=\"kw3\">Next</span><br/>\tconsolidate = s &amp; <span class=\"st0\">\" = \"</span> &amp; Join(sets,<span class=\"st0\">\" , \"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing<br/></span>test = Array(<span class=\"st0\">\"AB\"</span>,<span class=\"st0\">\"AB,CD\"</span>,<span class=\"st0\">\"AB,CD,DB\"</span>,<span class=\"st0\">\"HIK,AB,CD,DB,FGH\"</span>)<br/><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> t <span class=\"kw3\">In</span> test<br/>\tWScript.StdOut.WriteLine consolidate(t)<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn consolidate(sets){  // set are munged if they are read/write<br/>   if(sets.len()&lt;2) return(sets);<br/>   r,r0\u00a0:= List(List()),sets[0];<br/>   foreach x in (consolidate(sets[1,*])){<br/>      i,ni:=x.filter22(r0.holds); //--&gt;(intersection,\u00a0!intersection)<br/>      if(i) r0=r0.extend(ni);<br/>      else  r.append(x);<br/>   }<br/>   r[0]=r0;<br/>   r<br/>}</pre>"}]}