{"task": "Canny_edge_detector", "blocks": [{"lang": "C", "loc": 453, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;float.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_BRIGHTNESS 255</span><br/>\u00a0<br/><span class=\"co1\">// C99 doesn't define M_PI (GNU-C99 does)</span><br/><span class=\"co2\">#define M_PI 3.14159265358979323846264338327</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Loading part taken from<br/> * http://www.vbforums.com/showthread.php?t=261522<br/> * BMP info:<br/> * http://en.wikipedia.org/wiki/BMP_file_format<br/> *<br/> * Note: the magic number has been removed from the bmpfile_header_t<br/> * structure since it causes alignment problems<br/> *     bmpfile_magic_t should be written/read first<br/> * followed by the<br/> *     bmpfile_header_t<br/> * [this avoids compiler-specific alignment pragmas etc.]<br/> */</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint8_t</span> magic<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> bmpfile_magic_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint32_t</span> filesz<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint16_t</span> creator1<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint16_t</span> creator2<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> bmp_offset<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> bmpfile_header_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint32_t</span> header_sz<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int32_t</span>  width<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int32_t</span>  height<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint16_t</span> nplanes<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint16_t</span> bitspp<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> compress_type<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> bmp_bytesz<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int32_t</span>  hres<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int32_t</span>  vres<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> ncolors<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> nimpcolors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> bitmap_info_header_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint8_t</span> r<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint8_t</span> g<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint8_t</span> b<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint8_t</span> nothing<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> rgb_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Use short int instead `unsigned char' so that we can</span><br/><span class=\"co1\">// store negative values.</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">short</span> <span class=\"kw4\">int</span> pixel_t<span class=\"sy0\">;</span><br/>\u00a0<br/>pixel_t <span class=\"sy0\">*</span>load_bmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>filename<span class=\"sy0\">,</span><br/>                  bitmap_info_header_t <span class=\"sy0\">*</span>bitmapInfoHeader<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    FILE <span class=\"sy0\">*</span>filePtr <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>filePtr <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fopen()\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    bmpfile_magic_t mag<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>mag<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_magic_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// verify that this is a bmp file by check bitmap id</span><br/>    <span class=\"co1\">// warning: dereferencing type-punned pointer will break</span><br/>    <span class=\"co1\">// strict-aliasing rules [-Wstrict-aliasing]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint16_t</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>mag.<span class=\"me1\">magic</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu12\">0x4D42</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Not a BMP file: magic=%c%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                mag.<span class=\"me1\">magic</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> mag.<span class=\"me1\">magic</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    bmpfile_header_t bitmapFileHeader<span class=\"sy0\">;</span> <span class=\"co1\">// our bitmap file header</span><br/>    <span class=\"co1\">// read the bitmap file header</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>bitmapFileHeader<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_header_t<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// read the bitmap info header</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>bitmapInfoHeader<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bitmap_info_header_t<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>compress_type <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Warning, compression is not supported.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// move file point to the beginning of bitmap data</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fseek.html\"><span class=\"kw3\">fseek</span></a><span class=\"br0\">(</span>filePtr<span class=\"sy0\">,</span> bitmapFileHeader.<span class=\"me1\">bmp_offset</span><span class=\"sy0\">,</span> SEEK_SET<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// allocate enough memory for the bitmap image data</span><br/>    pixel_t <span class=\"sy0\">*</span>bitmapImage <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>bmp_bytesz <span class=\"sy0\">*</span><br/>                                  <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// verify memory allocation</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bitmapImage <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// read in the bitmap image data</span><br/>    <span class=\"kw4\">size_t</span> pad<span class=\"sy0\">,</span> count<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/>    pad <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ceil.html\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>bitspp<span class=\"sy0\">*</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">/</span><span class=\"nu0\">32</span>.<span class=\"br0\">)</span> <span class=\"sy0\">-</span> bitmapInfoHeader<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>height<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>bitmapInfoHeader<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t    <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t    bitmapImage<span class=\"br0\">[</span>count<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span> c<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fseek.html\"><span class=\"kw3\">fseek</span></a><span class=\"br0\">(</span>filePtr<span class=\"sy0\">,</span> pad<span class=\"sy0\">,</span> SEEK_CUR<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// If we were using unsigned char as pixel_t, then:</span><br/>    <span class=\"co1\">// fread(bitmapImage, 1, bitmapInfoHeader-&gt;bmp_bytesz, filePtr);</span><br/>\u00a0<br/>    <span class=\"co1\">// close file and return bitmap image data</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> bitmapImage<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Return: true on error.</span><br/>bool save_bmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>filename<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> bitmap_info_header_t <span class=\"sy0\">*</span>bmp_ih<span class=\"sy0\">,</span><br/>              <span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    FILE<span class=\"sy0\">*</span> filePtr <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>filePtr <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    bmpfile_magic_t mag <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu12\">0x42</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4d</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>mag<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_magic_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> offset <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_magic_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                            <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_header_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                            <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bitmap_info_header_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                            <span class=\"br0\">(</span><span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> bmp_ih<span class=\"sy0\">-&gt;</span>bitspp<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> bmpfile_header_t bmp_fh <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        .<span class=\"me1\">filesz</span> <span class=\"sy0\">=</span> offset <span class=\"sy0\">+</span> bmp_ih<span class=\"sy0\">-&gt;</span>bmp_bytesz<span class=\"sy0\">,</span><br/>        .<span class=\"me1\">creator1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        .<span class=\"me1\">creator2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        .<span class=\"me1\">bmp_offset</span> <span class=\"sy0\">=</span> offset<br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>bmp_fh<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bmpfile_header_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>bmp_ih<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bitmap_info_header_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Palette</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>1U <span class=\"sy0\">&lt;&lt;</span> bmp_ih<span class=\"sy0\">-&gt;</span>bitspp<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> rgb_t color <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span>i<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span>i<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span>i<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>color<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>rgb_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// We use int instead of uchar, so we can't write img</span><br/>    <span class=\"co1\">// in 1 call any more.</span><br/>    <span class=\"co1\">// fwrite(data, 1, bmp_ih-&gt;bmp_bytesz, filePtr);</span><br/>\u00a0<br/>    <span class=\"co1\">// Padding: http://en.wikipedia.org/wiki/BMP_file_format#Pixel_storage</span><br/>    <span class=\"kw4\">size_t</span> pad <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ceil.html\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span>bmp_ih<span class=\"sy0\">-&gt;</span>bitspp<span class=\"sy0\">*</span>bmp_ih<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">/</span><span class=\"nu0\">32</span>.<span class=\"br0\">)</span> <span class=\"sy0\">-</span> bmp_ih<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bmp_ih<span class=\"sy0\">-&gt;</span>height<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> bmp_ih<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t    c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span> data<span class=\"br0\">[</span>j <span class=\"sy0\">+</span> bmp_ih<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">*</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>pad<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>c<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> filePtr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>filePtr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// if normalize is true, map pixels to range 0..MAX_BRIGHTNESS</span><br/><span class=\"kw4\">void</span> convolution<span class=\"br0\">(</span><span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>in<span class=\"sy0\">,</span> pixel_t <span class=\"sy0\">*</span>out<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> <span class=\"sy0\">*</span>kernel<span class=\"sy0\">,</span><br/>                 <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ny<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> kn<span class=\"sy0\">,</span><br/>                 <span class=\"kw4\">const</span> bool normalize<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>kn <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>nx <span class=\"sy0\">&gt;</span> kn <span class=\"sy0\">&amp;&amp;</span> ny <span class=\"sy0\">&gt;</span> kn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> khalf <span class=\"sy0\">=</span> kn <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">float</span> min <span class=\"sy0\">=</span> FLT_MAX<span class=\"sy0\">,</span> max <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>FLT_MAX<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>normalize<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> khalf<span class=\"sy0\">;</span> m <span class=\"sy0\">&lt;</span> nx <span class=\"sy0\">-</span> khalf<span class=\"sy0\">;</span> m<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> khalf<span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> ny <span class=\"sy0\">-</span> khalf<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">float</span> pixel <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>khalf<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> khalf<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>khalf<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> khalf<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        pixel <span class=\"sy0\">+=</span> in<span class=\"br0\">[</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        c<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">&lt;</span> min<span class=\"br0\">)</span><br/>                    min <span class=\"sy0\">=</span> pixel<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span><br/>                    max <span class=\"sy0\">=</span> pixel<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> khalf<span class=\"sy0\">;</span> m <span class=\"sy0\">&lt;</span> nx <span class=\"sy0\">-</span> khalf<span class=\"sy0\">;</span> m<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> khalf<span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> ny <span class=\"sy0\">-</span> khalf<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">float</span> pixel <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>khalf<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> khalf<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>khalf<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> khalf<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    pixel <span class=\"sy0\">+=</span> in<span class=\"br0\">[</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    c<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>normalize<span class=\"br0\">)</span><br/>                pixel <span class=\"sy0\">=</span> MAX_BRIGHTNESS <span class=\"sy0\">*</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">-</span> min<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>max <span class=\"sy0\">-</span> min<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            out<span class=\"br0\">[</span>n <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span>pixel<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * gaussianFilter:<br/> * http://www.songho.ca/dsp/cannyedge/cannyedge.html<br/> * determine size of kernel (odd #)<br/> * 0.0 &lt;= sigma &lt; 0.5\u00a0: 3<br/> * 0.5 &lt;= sigma &lt; 1.0\u00a0: 5<br/> * 1.0 &lt;= sigma &lt; 1.5\u00a0: 7<br/> * 1.5 &lt;= sigma &lt; 2.0\u00a0: 9<br/> * 2.0 &lt;= sigma &lt; 2.5\u00a0: 11<br/> * 2.5 &lt;= sigma &lt; 3.0\u00a0: 13 ...<br/> * kernelSize = 2 * int(2*sigma) + 3;<br/> */</span><br/><span class=\"kw4\">void</span> gaussian_filter<span class=\"br0\">(</span><span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>in<span class=\"sy0\">,</span> pixel_t <span class=\"sy0\">*</span>out<span class=\"sy0\">,</span><br/>                     <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ny<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> sigma<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> sigma<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> mean <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">float</span> kernel<span class=\"br0\">[</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// variable length array</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"gaussian_filter: kernel size\u00a0%d, sigma=%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            n<span class=\"sy0\">,</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu16\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span> <span class=\"sy0\">/</span> sigma<span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                                    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span> <span class=\"sy0\">/</span> sigma<span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> M_PI <span class=\"sy0\">*</span> sigma <span class=\"sy0\">*</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    convolution<span class=\"br0\">(</span>in<span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> kernel<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Links:<br/> * http://en.wikipedia.org/wiki/Canny_edge_detector<br/> * http://www.tomgibara.com/computer-vision/CannyEdgeDetector.java<br/> * http://fourier.eng.hmc.edu/e161/lectures/canny/node1.html<br/> * http://www.songho.ca/dsp/cannyedge/cannyedge.html<br/> *<br/> * Note: T1 and T2 are lower and upper thresholds.<br/> */</span><br/>pixel_t <span class=\"sy0\">*</span>canny_edge_detection<span class=\"br0\">(</span><span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>in<span class=\"sy0\">,</span><br/>                              <span class=\"kw4\">const</span> bitmap_info_header_t <span class=\"sy0\">*</span>bmp_ih<span class=\"sy0\">,</span><br/>                              <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> tmin<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> tmax<span class=\"sy0\">,</span><br/>                              <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> sigma<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nx <span class=\"sy0\">=</span> bmp_ih<span class=\"sy0\">-&gt;</span>width<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ny <span class=\"sy0\">=</span> bmp_ih<span class=\"sy0\">-&gt;</span>height<span class=\"sy0\">;</span><br/>\u00a0<br/>    pixel_t <span class=\"sy0\">*</span>G <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>nx <span class=\"sy0\">*</span> ny <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pixel_t <span class=\"sy0\">*</span>after_Gx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>nx <span class=\"sy0\">*</span> ny <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pixel_t <span class=\"sy0\">*</span>after_Gy <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>nx <span class=\"sy0\">*</span> ny <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pixel_t <span class=\"sy0\">*</span>nms <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>nx <span class=\"sy0\">*</span> ny <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pixel_t <span class=\"sy0\">*</span>out <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>bmp_ih<span class=\"sy0\">-&gt;</span>bmp_bytesz <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>G <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> after_Gx <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> after_Gy <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span><br/>        nms <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> out <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"canny_edge_detection:\"</span><br/>                <span class=\"st0\">\" Failed memory allocation(s).<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    gaussian_filter<span class=\"br0\">(</span>in<span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> Gx<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                        <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                        <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    convolution<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> after_Gx<span class=\"sy0\">,</span> Gx<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> Gy<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                         <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                        <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    convolution<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> after_Gy<span class=\"sy0\">,</span> Gy<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> ny <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> nx <span class=\"sy0\">*</span> j<span class=\"sy0\">;</span><br/>            <span class=\"co1\">// G[c] = abs(after_Gx[c]) + abs(after_Gy[c]);</span><br/>            G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span>hypot<span class=\"br0\">(</span>after_Gx<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span> after_Gy<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Non-maximum suppression, straightforward implementation.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> ny <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> nx <span class=\"sy0\">*</span> j<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nn <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> nx<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ss <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> nx<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ww <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ee <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> nw <span class=\"sy0\">=</span> nn <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ne <span class=\"sy0\">=</span> nn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> sw <span class=\"sy0\">=</span> ss <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> se <span class=\"sy0\">=</span> ss <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><span class=\"br0\">(</span>fmod<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span>after_Gy<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                                 after_Gx<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> M_PI<span class=\"sy0\">,</span><br/>                                           M_PI<span class=\"br0\">)</span> <span class=\"sy0\">/</span> M_PI<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ee<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ww<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 0 deg</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>nw<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>se<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 45 deg</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>nn<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ss<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 90 deg</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ne<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>sw<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">// 135 deg</span><br/>                nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Reuse array</span><br/>    <span class=\"co1\">// used as a stack. nx*ny/2 elements should be enough.</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>edges <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> after_Gy<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>out<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">*</span> ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>edges<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pixel_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">*</span> ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Tracing edges with hysteresis . Non-recursive implementation.</span><br/>    <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> ny <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> tmax <span class=\"sy0\">&amp;&amp;</span> out<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// trace edges</span><br/>                out<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> MAX_BRIGHTNESS<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> nedges <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                edges<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    nedges<span class=\"sy0\">--;</span><br/>                    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> t <span class=\"sy0\">=</span> edges<span class=\"br0\">[</span>nedges<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> nbs<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// neighbours</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t <span class=\"sy0\">-</span> nx<span class=\"sy0\">;</span>     <span class=\"co1\">// nn</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> nx<span class=\"sy0\">;</span>     <span class=\"co1\">// ss</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>      <span class=\"co1\">// ww</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>      <span class=\"co1\">// ee</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nbs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// nw</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nbs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// ne</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nbs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// sw</span><br/>                    nbs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> nbs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// se</span><br/>\u00a0<br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nms<span class=\"br0\">[</span>nbs<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> tmin <span class=\"sy0\">&amp;&amp;</span> out<span class=\"br0\">[</span>nbs<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            out<span class=\"br0\">[</span>nbs<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> MAX_BRIGHTNESS<span class=\"sy0\">;</span><br/>                            edges<span class=\"br0\">[</span>nedges<span class=\"br0\">]</span> <span class=\"sy0\">=</span> nbs<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            nedges<span class=\"sy0\">++;</span><br/>                        <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nedges <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>after_Gx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>after_Gy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>G<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>nms<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span> <span class=\"kw4\">const</span> argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage:\u00a0%s image.bmp<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> bitmap_info_header_t ih<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>in_bitmap_data <span class=\"sy0\">=</span> load_bmp<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ih<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>in_bitmap_data <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"main: BMP image not loaded.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Info:\u00a0%d x\u00a0%d x\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ih.<span class=\"me1\">width</span><span class=\"sy0\">,</span> ih.<span class=\"me1\">height</span><span class=\"sy0\">,</span> ih.<span class=\"me1\">bitspp</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> pixel_t <span class=\"sy0\">*</span>out_bitmap_data <span class=\"sy0\">=</span><br/>        canny_edge_detection<span class=\"br0\">(</span>in_bitmap_data<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ih<span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu17\">1.0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>out_bitmap_data <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"main: failed canny_edge_detection.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>save_bmp<span class=\"br0\">(</span><span class=\"st0\">\"out.bmp\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ih<span class=\"sy0\">,</span> out_bitmap_data<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"main: BMP image not saved.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>pixel_t<span class=\"sy0\">*</span><span class=\"br0\">)</span>in_bitmap_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>pixel_t<span class=\"sy0\">*</span><span class=\"br0\">)</span>out_bitmap_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 200, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> bitmap<span class=\"sy0\">,</span> grayscale_image<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> maxBrightness <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> Pixel <span class=\"sy0\">=</span> <span class=\"kw4\">short</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> IntT <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span>.<span class=\"me1\">init</span>.<span class=\"me1\">signed</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// If normalize is true, map pixels to range 0...maxBrightness.</span><br/><span class=\"kw4\">void</span> convolution<span class=\"br0\">(</span><span class=\"kw4\">bool</span> normalize<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Pixel<span class=\"br0\">[</span><span class=\"br0\">]</span> inp<span class=\"sy0\">,</span> Pixel<span class=\"br0\">[</span><span class=\"br0\">]</span> outp<span class=\"sy0\">,</span><br/>                                 <span class=\"kw2\">in</span> <span class=\"kw4\">float</span><span class=\"br0\">[</span><span class=\"br0\">]</span> kernel<span class=\"sy0\">,</span><br/>                                 <span class=\"kw2\">in</span> IntT nx<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> IntT ny<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> IntT kn<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>kernel.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> kn <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>kn <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>nx <span class=\"sy0\">&gt;</span> kn <span class=\"sy0\">&amp;&amp;</span> ny <span class=\"sy0\">&gt;</span> kn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>inp.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> outp.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">//immutable IntT kn = sqrti(kernel.length);</span><br/>    <span class=\"kw4\">immutable</span> IntT khalf <span class=\"sy0\">=</span> kn <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>normalize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">float</span> pMin <span class=\"sy0\">=</span> <span class=\"kw4\">float</span>.<span class=\"me1\">max</span><span class=\"sy0\">,</span> pMax <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"kw4\">float</span>.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> m<span class=\"sy0\">;</span> khalf <span class=\"sy0\">..</span> <span class=\"me1\">nx</span> <span class=\"sy0\">-</span> khalf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> khalf <span class=\"sy0\">..</span> <span class=\"me1\">ny</span> <span class=\"sy0\">-</span> khalf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">float</span> pixel <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">size_t</span> c<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"sy0\">-</span>khalf <span class=\"sy0\">..</span> <span class=\"me1\">khalf</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"sy0\">-</span>khalf <span class=\"sy0\">..</span> <span class=\"me1\">khalf</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        pixel <span class=\"sy0\">+=</span> inp<span class=\"br0\">[</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        c<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">&lt;</span> pMin<span class=\"br0\">)</span> pMin <span class=\"sy0\">=</span> pixel<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">&gt;</span> pMax<span class=\"br0\">)</span> pMax <span class=\"sy0\">=</span> pixel<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> m<span class=\"sy0\">;</span> khalf <span class=\"sy0\">..</span> <span class=\"me1\">nx</span> <span class=\"sy0\">-</span> khalf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> khalf <span class=\"sy0\">..</span> <span class=\"me1\">ny</span> <span class=\"sy0\">-</span> khalf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">float</span> pixel <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">size_t</span> c<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"sy0\">-</span>khalf <span class=\"sy0\">..</span> <span class=\"me1\">khalf</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"sy0\">-</span>khalf <span class=\"sy0\">..</span> <span class=\"me1\">khalf</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    pixel <span class=\"sy0\">+=</span> inp<span class=\"br0\">[</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    c<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>normalize<span class=\"br0\">)</span><br/>                pixel <span class=\"sy0\">=</span> maxBrightness <span class=\"sy0\">*</span> <span class=\"br0\">(</span>pixel <span class=\"sy0\">-</span> pMin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>pMax <span class=\"sy0\">-</span> pMin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            outp<span class=\"br0\">[</span>n <span class=\"sy0\">*</span> nx <span class=\"sy0\">+</span> m<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>Pixel<span class=\"br0\">)</span>pixel<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> gaussianFilter<span class=\"br0\">(</span><span class=\"kw2\">in</span> Pixel<span class=\"br0\">[</span><span class=\"br0\">]</span> inp<span class=\"sy0\">,</span> Pixel<span class=\"br0\">[</span><span class=\"br0\">]</span> outp<span class=\"sy0\">,</span><br/>                    <span class=\"kw2\">in</span> IntT nx<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> IntT ny<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">float</span> sigma<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>inp.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> outp.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> IntT n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>IntT<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> sigma<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">float</span> mean <span class=\"sy0\">=</span> floor<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> kernel <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">float</span><span class=\"br0\">[</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">debug</span> fprintf<span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"gaussianFilter: kernel size\u00a0%d, sigma=%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                  n<span class=\"sy0\">,</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            kernel<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> exp<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu16\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span> <span class=\"sy0\">/</span> sigma<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span><br/>                                    <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span> <span class=\"sy0\">/</span> sigma<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI <span class=\"sy0\">*</span> sigma <span class=\"sy0\">*</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    convolution<span class=\"sy0\">!</span><span class=\"kw2\">true</span><span class=\"br0\">(</span>inp<span class=\"sy0\">,</span> outp<span class=\"sy0\">,</span> kernel<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Pixel cannyEdgeDetection<span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Pixel inp<span class=\"sy0\">,</span><br/>                               <span class=\"kw2\">in</span> IntT tMin<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> IntT tMax<span class=\"sy0\">,</span><br/>                               <span class=\"kw2\">in</span> <span class=\"kw4\">float</span> sigma<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>inp <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> IntT nx <span class=\"sy0\">=</span> inp.<span class=\"me1\">nx</span>.<span class=\"me1\">signed</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> IntT ny <span class=\"sy0\">=</span> inp.<span class=\"me1\">ny</span>.<span class=\"me1\">signed</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> outp <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Pixel<span class=\"br0\">[</span>nx <span class=\"sy0\">*</span> ny<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    gaussianFilter<span class=\"br0\">(</span>inp.<span class=\"me1\">image</span><span class=\"sy0\">,</span> outp<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> sigma<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">float</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Gx <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                                   <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                                   <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> after_Gx <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Pixel<span class=\"br0\">[</span>nx <span class=\"sy0\">*</span> ny<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    convolution<span class=\"sy0\">!</span><span class=\"kw2\">false</span><span class=\"br0\">(</span>outp<span class=\"sy0\">,</span> after_Gx<span class=\"sy0\">,</span> Gx<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">float</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Gy <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                                    <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                                   <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> after_Gy <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Pixel<span class=\"br0\">[</span>nx <span class=\"sy0\">*</span> ny<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    convolution<span class=\"sy0\">!</span><span class=\"kw2\">false</span><span class=\"br0\">(</span>outp<span class=\"sy0\">,</span> after_Gy<span class=\"sy0\">,</span> Gy<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> G <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Pixel<span class=\"br0\">[</span>nx <span class=\"sy0\">*</span> ny<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">nx</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>j<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">ny</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> nx <span class=\"sy0\">*</span> j<span class=\"sy0\">;</span><br/>            G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>Pixel<span class=\"br0\">)</span>hypot<span class=\"br0\">(</span>after_Gx<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span> after_Gy<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Non-maximum suppression, straightforward implementation.</span><br/>    <span class=\"kw4\">auto</span> nms <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Pixel<span class=\"br0\">[</span>nx <span class=\"sy0\">*</span> ny<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">nx</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">ny</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> IntT c <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> nx <span class=\"sy0\">*</span> j<span class=\"sy0\">,</span><br/>                           nn <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> nx<span class=\"sy0\">,</span><br/>                           ss <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> nx<span class=\"sy0\">,</span><br/>                           ww <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                           ee <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                           nw <span class=\"sy0\">=</span> nn <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                           ne <span class=\"sy0\">=</span> nn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                           sw <span class=\"sy0\">=</span> ss <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                           se <span class=\"sy0\">=</span> ss <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">immutable</span> aux <span class=\"sy0\">=</span> atan2<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">(</span>after_Gy<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                  <span class=\"kw4\">double</span><span class=\"br0\">(</span>after_Gx<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> PI<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">float</span> dir <span class=\"sy0\">=</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span><span class=\"br0\">(</span>aux <span class=\"sy0\">%</span> PI<span class=\"br0\">)</span> <span class=\"sy0\">/</span> PI<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ee<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ww<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 0 deg.</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>nw<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>se<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 45 deg.</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>nn<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ss<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"co1\">// 90 deg.</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">&amp;&amp;</span> dir <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>ne<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                 G<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> G<span class=\"br0\">[</span>sw<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">// 135 deg.</span><br/>                nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> G<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Reuse array used as a stack. nx*ny/2 elements should be enough.</span><br/>    IntT<span class=\"br0\">[</span><span class=\"br0\">]</span> edges <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">cast</span><span class=\"br0\">(</span>IntT<span class=\"sy0\">*</span><span class=\"br0\">)</span>after_Gy.<span class=\"me1\">ptr</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">after_Gy</span>.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    outp<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Pixel.<span class=\"me1\">init</span><span class=\"sy0\">;</span><br/>    edges<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Tracing edges with hysteresis. Non-recursive implementation.</span><br/>    <span class=\"kw4\">size_t</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">ny</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">nx</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nms<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> tMax <span class=\"sy0\">&amp;&amp;</span> outp<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Trace edges.</span><br/>                outp<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maxBrightness<span class=\"sy0\">;</span><br/>                IntT nedges <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                edges<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    nedges<span class=\"sy0\">--;</span><br/>                    <span class=\"kw4\">immutable</span> IntT t <span class=\"sy0\">=</span> edges<span class=\"br0\">[</span>nedges<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">immutable</span> IntT<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> neighbours <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>                        t <span class=\"sy0\">-</span> nx<span class=\"sy0\">,</span>      <span class=\"co1\">// nn</span><br/>                        t <span class=\"sy0\">+</span> nx<span class=\"sy0\">,</span>      <span class=\"co1\">// ss</span><br/>                        t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>       <span class=\"co1\">// ww</span><br/>                        t <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>       <span class=\"co1\">// ee</span><br/>                        t <span class=\"sy0\">-</span> nx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"co1\">// nw</span><br/>                        t <span class=\"sy0\">-</span> nx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"co1\">// ne</span><br/>                        t <span class=\"sy0\">+</span> nx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"co1\">// sw</span><br/>                        t <span class=\"sy0\">+</span> nx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// se</span><br/>\u00a0<br/>                    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> neighbours<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nms<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> tMin <span class=\"sy0\">&amp;&amp;</span> outp<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            outp<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maxBrightness<span class=\"sy0\">;</span><br/>                            edges<span class=\"br0\">[</span>nedges<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>                            nedges<span class=\"sy0\">++;</span><br/>                        <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nedges <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> Image<span class=\"sy0\">!</span>Pixel.<span class=\"me1\">fromData</span><span class=\"br0\">(</span>outp<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> fileName <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"lena.pgm\"</span><span class=\"sy0\">;</span><br/>    Image<span class=\"sy0\">!</span>Pixel imIn<span class=\"sy0\">;</span><br/>    imIn <span class=\"sy0\">=</span> imIn.<span class=\"me1\">loadPGM</span><span class=\"br0\">(</span>fileName<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    printf<span class=\"br0\">(</span><span class=\"st0\">\"Image size:\u00a0%d x\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> imIn.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> imIn.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    imIn.<span class=\"me1\">cannyEdgeDetection</span><span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu17\">1.0f</span><span class=\"br0\">)</span>.<span class=\"me1\">savePGM</span><span class=\"br0\">(</span><span class=\"st0\">\"lena_canny.pgm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "J", "loc": 90, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. 2D convolution, filtering, ...</span><br/>\u00a0<br/>convolve  =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'x apply (($x) partition y)'</span><br/>partition=: <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> |: {:@[ ]\\ <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> |: {<a class=\"__cf_email__\" data-cfemail=\"cce28c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ ]\\ ]<br/>apply=: [: +/ [: +/ *<br/>max3x3 =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'(0&lt;1{1{y) * (&gt;./&gt;./y)'</span><br/>addborder =: <span class=\"sy0\">(</span><span class=\"nu0\">0</span>&amp;,@|:@|.<span class=\"sy0\">)</span>^:<span class=\"nu0\">4</span><br/>normalize =: ]%+/@,<br/>attach =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'max3x3 (3 3 partition (addborder y))'</span><br/>unique =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'y*i.$y'</span><br/>connect =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'attach^:_ unique y'</span><br/>\u00a0<br/><span class=\"co1\">NB. on low memory devices, cropping or resampling of high-resolution images may be required</span><br/>crop      =: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/>   <span class=\"st_h\">'h w h0 w0'</span> =: <span class=\"kw2\">x</span><br/>   |: w{. w0}. |: h{. h0}. <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>resample  =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'|: (1{-x)(+/%#)\\ |: (0{-x)(+/%#)\\ y'</span><br/><span class=\"co1\">NB. on e. g. smartphones, image may need to be expanded for viewing</span><br/>inflate1 =: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/>   <span class=\"st_h\">'h w'</span> =: $<span class=\"kw2\">y</span><br/>   r =: ,<span class=\"kw2\">y</span><br/>   c =: #r<br/>   rr =: <span class=\"sy0\">(</span>c$<span class=\"kw2\">x</span><span class=\"sy0\">)</span> # r<br/>   <span class=\"sy0\">(</span>h,<span class=\"kw2\">x</span>*w<span class=\"sy0\">)</span>$rr<br/><span class=\"sy0\">)</span><br/>inflate =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'|: x inflate1 (|: x inflate1 y)'</span><br/>\u00a0<br/><span class=\"co1\">NB. Step 1 - gaussian smoothing</span><br/>step1 =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>   <span class=\"co1\">NB. Gaussian kernel (from Wikipedia article)</span><br/>   &lt;] gaussianKernel =: <span class=\"nu0\">5</span> <span class=\"nu0\">5</span>$<span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">9</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">12</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">9</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span><br/>   gaussianKernel =: gaussianKernel\u00a0% <span class=\"nu0\">159</span><br/>   gaussianKernel convolve <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. Step 2 - gradient</span><br/>step2 =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>   &lt;] gradientKernel =: <span class=\"nu0\">3</span> <span class=\"nu0\">3</span>$<span class=\"nu0\">0</span> <span class=\"nu0\">_1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0j_1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0j1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>   gradientKernel convolve <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. Step 3 - edge detection</span><br/>step3 =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>   <span class=\"co1\">NB. find the octant (eighth of circle) in which the gradient lies</span><br/>   octant =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'4|(&gt;.(_0.5+((4%(o. 1))*(12&amp;o. y))))'</span><br/>   &lt;<span class=\"sy0\">(</span>i:<span class=\"nu0\">6</span><span class=\"sy0\">)(</span><span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'octant (x j. y)'</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span>/<span class=\"sy0\">(</span>i:<span class=\"nu0\">6</span><span class=\"sy0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">NB. is this gradient greater than [the projection of] a neighbor?</span><br/>   greaterThan   =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">' (9 o.((x|.y)%y))&lt;1'</span><br/>\u00a0<br/>   <span class=\"co1\">NB. is this gradient the greatest of immmediate colinear neighbore?</span><br/>   greatestOf   =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'(x greaterThan y) *. ((-x) greaterThan y)'</span><br/>\u00a0<br/>   <span class=\"co1\">NB. relative address of neighbor relevant to grad direction</span><br/>   krnl0 =. <span class=\"nu0\">_1</span>  <span class=\"nu0\">0</span><br/>   krnl1 =. <span class=\"nu0\">_1</span> <span class=\"nu0\">_1</span><br/>   krnl2 =.  <span class=\"nu0\">0</span> <span class=\"nu0\">_1</span><br/>   krnl3 =.  <span class=\"nu0\">1</span> <span class=\"nu0\">_1</span><br/>\u00a0<br/>   image =. <span class=\"kw2\">y</span><br/>   og =. octant image<br/>\u00a0<br/>   <span class=\"co1\">NB. mask for maximum gradient colinear with gradient</span><br/>   ok0 =. <span class=\"sy0\">(</span><span class=\"nu0\">0</span>=og<span class=\"sy0\">)</span> *. krnl0 greatestOf image<br/>   ok1 =. <span class=\"sy0\">(</span><span class=\"nu0\">1</span>=og<span class=\"sy0\">)</span> *. krnl1 greatestOf image<br/>   ok2 =. <span class=\"sy0\">(</span><span class=\"nu0\">2</span>=og<span class=\"sy0\">)</span> *. krnl2 greatestOf image<br/>   ok3 =. <span class=\"sy0\">(</span><span class=\"nu0\">3</span>=og<span class=\"sy0\">)</span> *. krnl3 greatestOf image<br/>   image *. <span class=\"sy0\">(</span>ok0 +. ok1 +. ok2 +. ok3<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. Step 4 - Weak edge suppression</span><br/>step4 =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>   magnitude =. <span class=\"nu0\">10</span>&amp;o. <span class=\"kw2\">y</span><br/>   <span class=\"co1\">NB. weak, strong threshholds</span><br/>   <span class=\"co1\">NB. TODO: parameter picker algorithm or helper</span><br/>   threshholds =. <span class=\"nu0\">1e14</span> <span class=\"nu0\">1e15</span><br/>   nearbyKernel =. <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> $ <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> # <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>   weak   =. magnitude &gt; <span class=\"nu0\">0</span>{threshholds<br/>   strong =. magnitude &gt; <span class=\"nu0\">1</span>{threshholds<br/>   strongs =. addborder <span class=\"sy0\">(</span>nearbyKernel convolve strong<span class=\"sy0\">)</span> &gt; <span class=\"nu0\">0</span><br/>   strong +. <span class=\"sy0\">(</span>weak *. strongs<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. given the edge points, find the edges</span><br/>  step5 =: connect<br/>\u00a0<br/>canny =: step5 @ step4 @ step3 @ step2 @ step1<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">using Images<br/>\u00a0<br/>canny_edges = canny(img, sigma = 1.4, upperThreshold = 0.80, lowerThreshold = 0.20)</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Export[\"out.bmp\", EdgeDetect[Import[InputString[]]]];</pre>"}, {"lang": "MATLAB", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">BWImage = edge<span class=\"br0\">(</span>GrayscaleImage,<span class=\"co2\">'canny'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Python", "loc": 86, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/bin/python</span><br/><span class=\"kw1\">import</span> numpy <span class=\"kw1\">as</span> np<br/><span class=\"kw1\">from</span> scipy.<span class=\"me1\">ndimage</span>.<span class=\"me1\">filters</span> <span class=\"kw1\">import</span> convolve<span class=\"sy0\">,</span> gaussian_filter<br/><span class=\"kw1\">from</span> scipy.<span class=\"me1\">misc</span> <span class=\"kw1\">import</span> imread<span class=\"sy0\">,</span> imshow<br/>\u00a0<br/><span class=\"kw1\">def</span> CannyEdgeDetector<span class=\"br0\">(</span>im<span class=\"sy0\">,</span> blur <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> highThreshold <span class=\"sy0\">=</span> <span class=\"nu0\">91</span><span class=\"sy0\">,</span> lowThreshold <span class=\"sy0\">=</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span>:<br/>\tim <span class=\"sy0\">=</span> np.<span class=\"kw3\">array</span><span class=\"br0\">(</span>im<span class=\"sy0\">,</span> dtype<span class=\"sy0\">=</span><span class=\"kw2\">float</span><span class=\"br0\">)</span> <span class=\"co1\">#Convert to float to prevent clipping values</span><br/>\u00a0<br/>\t<span class=\"co1\">#Gaussian blur to reduce noise</span><br/>\tim2 <span class=\"sy0\">=</span> gaussian_filter<span class=\"br0\">(</span>im<span class=\"sy0\">,</span> blur<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">#Use sobel filters to get horizontal and vertical gradients</span><br/>\tim3h <span class=\"sy0\">=</span> convolve<span class=\"br0\">(</span>im2<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>\tim3v <span class=\"sy0\">=</span> convolve<span class=\"br0\">(</span>im2<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">#Get gradient and direction</span><br/>\tgrad <span class=\"sy0\">=</span> np.<span class=\"me1\">power</span><span class=\"br0\">(</span>np.<span class=\"me1\">power</span><span class=\"br0\">(</span>im3h<span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> + np.<span class=\"me1\">power</span><span class=\"br0\">(</span>im3v<span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>\ttheta <span class=\"sy0\">=</span> np.<span class=\"me1\">arctan2</span><span class=\"br0\">(</span>im3v<span class=\"sy0\">,</span> im3h<span class=\"br0\">)</span><br/>\tthetaQ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>np.<span class=\"kw2\">round</span><span class=\"br0\">(</span>theta * <span class=\"br0\">(</span><span class=\"nu0\">5.0</span> / np.<span class=\"me1\">pi</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">5</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">5</span> <span class=\"co1\">#Quantize direction</span><br/>\u00a0<br/>\t<span class=\"co1\">#Non-maximum suppression</span><br/>\tgradSup <span class=\"sy0\">=</span> grad.<span class=\"kw3\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>\t\t\t<span class=\"co1\">#Suppress pixels at the image edge</span><br/>\t\t\t<span class=\"kw1\">if</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> r <span class=\"sy0\">==</span> im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">or</span> c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> c <span class=\"sy0\">==</span> im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span>:<br/>\t\t\t\tgradSup<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\ttq <span class=\"sy0\">=</span> thetaQ<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span>\u00a0% <span class=\"nu0\">4</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> tq <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>: <span class=\"co1\">#0 is E-W (horizontal)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c+<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>\t\t\t\t\tgradSup<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> tq <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>: <span class=\"co1\">#1 is NE-SW</span><br/>\t\t\t\t<span class=\"kw1\">if</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c+<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c-<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>\t\t\t\t\tgradSup<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> tq <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>: <span class=\"co1\">#2 is N-S (vertical)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"kw1\">or</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c<span class=\"br0\">]</span>:<br/>\t\t\t\t\tgradSup<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> tq <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>: <span class=\"co1\">#3 is NW-SE</span><br/>\t\t\t\t<span class=\"kw1\">if</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> grad<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> grad<span class=\"br0\">[</span>r+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> c+<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>\t\t\t\t\tgradSup<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"co1\">#Double threshold</span><br/>\tstrongEdges <span class=\"sy0\">=</span> <span class=\"br0\">(</span>gradSup <span class=\"sy0\">&gt;</span> highThreshold<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">#Strong has value 2, weak has value 1</span><br/>\tthresholdedEdges <span class=\"sy0\">=</span> np.<span class=\"kw3\">array</span><span class=\"br0\">(</span>strongEdges<span class=\"sy0\">,</span> dtype<span class=\"sy0\">=</span>np.<span class=\"me1\">uint8</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span>gradSup <span class=\"sy0\">&gt;</span> lowThreshold<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">#Tracing edges with hysteresis\t</span><br/>\t<span class=\"co1\">#Find weak edge pixels near strong edge pixels</span><br/>\tfinalEdges <span class=\"sy0\">=</span> strongEdges.<span class=\"kw3\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tcurrentPixels <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> im.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>:\t<br/>\t\t\t<span class=\"kw1\">if</span> thresholdedEdges<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:<br/>\t\t\t\t<span class=\"kw1\">continue</span> <span class=\"co1\">#Not a weak pixel</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">#Get 3x3 patch\t</span><br/>\t\t\tlocalPatch <span class=\"sy0\">=</span> thresholdedEdges<span class=\"br0\">[</span>r-<span class=\"nu0\">1</span>:r+<span class=\"nu0\">2</span><span class=\"sy0\">,</span>c-<span class=\"nu0\">1</span>:c+<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\t\t\tpatchMax <span class=\"sy0\">=</span> localPatch.<span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> patchMax <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>:<br/>\t\t\t\tcurrentPixels.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tfinalEdges<span class=\"br0\">[</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"co1\">#Extend strong edges based on current pixels</span><br/>\t<span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>currentPixels<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>\t\tnewPix <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">for</span> r<span class=\"sy0\">,</span> c <span class=\"kw1\">in</span> currentPixels:<br/>\t\t\t<span class=\"kw1\">for</span> dr <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>\t\t\t\t<span class=\"kw1\">for</span> dc <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>\t\t\t\t\t<span class=\"kw1\">if</span> dr <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> dc <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">continue</span><br/>\t\t\t\t\tr2 <span class=\"sy0\">=</span> r+dr<br/>\t\t\t\t\tc2 <span class=\"sy0\">=</span> c+dc<br/>\t\t\t\t\t<span class=\"kw1\">if</span> thresholdedEdges<span class=\"br0\">[</span>r2<span class=\"sy0\">,</span> c2<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> finalEdges<span class=\"br0\">[</span>r2<span class=\"sy0\">,</span> c2<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>\t\t\t\t\t\t<span class=\"co1\">#Copy this weak pixel to final result</span><br/>\t\t\t\t\t\tnewPix.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r2<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tfinalEdges<span class=\"br0\">[</span>r2<span class=\"sy0\">,</span> c2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\tcurrentPixels <span class=\"sy0\">=</span> newPix<br/>\u00a0<br/>\t<span class=\"kw1\">return</span> finalEdges<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__<span class=\"sy0\">==</span><span class=\"st0\">\"__main__\"</span>:<br/>\tim <span class=\"sy0\">=</span> imread<span class=\"br0\">(</span><span class=\"st0\">\"test.jpg\"</span><span class=\"sy0\">,</span> mode<span class=\"sy0\">=</span><span class=\"st0\">\"L\"</span><span class=\"br0\">)</span> <span class=\"co1\">#Open image, convert to greyscale</span><br/>\tfinalEdges <span class=\"sy0\">=</span> CannyEdgeDetector<span class=\"br0\">(</span>im<span class=\"br0\">)</span><br/>\timshow<span class=\"br0\">(</span>finalEdges<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require crimp<br/><span class=\"kw2\">package</span> require crimp::<span class=\"me1\">pgm</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> readPGM <span class=\"br0\">{</span><span class=\"kw3\">filename</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span> rb<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> data <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>crimp <span class=\"kw2\">read</span> pgm <span class=\"re0\">$data</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> writePGM <span class=\"br0\">{</span><span class=\"kw3\">filename</span> image<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    crimp write 2file pgm-raw <span class=\"re0\">$filename</span> <span class=\"re0\">$image</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> cannyFilterFile <span class=\"br0\">{</span><span class=\"br0\">{</span>inputFile <span class=\"st0\">\"lena.pgm\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>outputFile <span class=\"st0\">\"lena_canny.pgm\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    writePGM <span class=\"re0\">$outputFile</span> <span class=\"br0\">[</span>crimp filter canny sobel <span class=\"br0\">[</span>readPGM <span class=\"re0\">$inputFile</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>cannyFilterFile <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"kw2\"><span class=\"re0\">$argv</span></span></pre>"}]}